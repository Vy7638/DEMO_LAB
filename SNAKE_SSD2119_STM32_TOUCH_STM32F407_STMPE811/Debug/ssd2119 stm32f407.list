
ssd2119 stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004afc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b9c  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006828  08006828  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006830  08006830  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000002a0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b51c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f92  00000000  00000000  0002b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009d0  00000000  00000000  0002e040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e5c  00000000  00000000  0002ea10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d365  00000000  00000000  0005086c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8398  00000000  00000000  0005dbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125f69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fc0  00000000  00000000  00125fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c74 	.word	0x08004c74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08004c74 	.word	0x08004c74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <STMPE811_init>:
extern I2C_HandleTypeDef hi2c1;



void STMPE811_init()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

    
    STMPE811_write_byte(STMPE811_SYS_CTRL1, 0x02);
 8000578:	2102      	movs	r1, #2
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f84c 	bl	8000618 <STMPE811_write_byte>
    HAL_Delay(6);
 8000580:	2006      	movs	r0, #6
 8000582:	f001 fedd 	bl	8002340 <HAL_Delay>
    STMPE811_write_byte(STMPE811_SYS_CTRL1, 0x00);
 8000586:	2100      	movs	r1, #0
 8000588:	2003      	movs	r0, #3
 800058a:	f000 f845 	bl	8000618 <STMPE811_write_byte>
    HAL_Delay(4);
 800058e:	2004      	movs	r0, #4
 8000590:	f001 fed6 	bl	8002340 <HAL_Delay>
    STMPE811_write_byte(STMPE811_SYS_CTRL2, 0x04);
 8000594:	2104      	movs	r1, #4
 8000596:	2004      	movs	r0, #4
 8000598:	f000 f83e 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_SPI_CFG, 0x00);
 800059c:	2100      	movs	r1, #0
 800059e:	2008      	movs	r0, #8
 80005a0:	f000 f83a 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_FIFO_STA, 0x01);
 80005a4:	2101      	movs	r1, #1
 80005a6:	204b      	movs	r0, #75	; 0x4b
 80005a8:	f000 f836 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_FIFO_STA, 0x00);
 80005ac:	2100      	movs	r1, #0
 80005ae:	204b      	movs	r0, #75	; 0x4b
 80005b0:	f000 f832 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_ADC_CTRL1, 0x48);
 80005b4:	2148      	movs	r1, #72	; 0x48
 80005b6:	2020      	movs	r0, #32
 80005b8:	f000 f82e 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_ADC_CTRL2, 0x01);
 80005bc:	2101      	movs	r1, #1
 80005be:	2021      	movs	r0, #33	; 0x21
 80005c0:	f000 f82a 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_GPIO_AF, 0x0F);
 80005c4:	210f      	movs	r1, #15
 80005c6:	2017      	movs	r0, #23
 80005c8:	f000 f826 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_TSC_CFG, 0xD3);
 80005cc:	21d3      	movs	r1, #211	; 0xd3
 80005ce:	2041      	movs	r0, #65	; 0x41
 80005d0:	f000 f822 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_FIFO_TH, 0x01);
 80005d4:	2101      	movs	r1, #1
 80005d6:	204a      	movs	r0, #74	; 0x4a
 80005d8:	f000 f81e 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_FIFO_STA, 0x01);
 80005dc:	2101      	movs	r1, #1
 80005de:	204b      	movs	r0, #75	; 0x4b
 80005e0:	f000 f81a 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_FIFO_STA, 0x00);
 80005e4:	2100      	movs	r1, #0
 80005e6:	204b      	movs	r0, #75	; 0x4b
 80005e8:	f000 f816 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_TSC_FRACTION_Z, 0x01);
 80005ec:	2101      	movs	r1, #1
 80005ee:	2056      	movs	r0, #86	; 0x56
 80005f0:	f000 f812 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_TSC_I_DRIVE, 0x01);
 80005f4:	2101      	movs	r1, #1
 80005f6:	2058      	movs	r0, #88	; 0x58
 80005f8:	f000 f80e 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_TSC_CTRL, 0x03);
 80005fc:	2103      	movs	r1, #3
 80005fe:	2040      	movs	r0, #64	; 0x40
 8000600:	f000 f80a 	bl	8000618 <STMPE811_write_byte>
    STMPE811_write_byte(STMPE811_INT_STA, 0xFF);
 8000604:	21ff      	movs	r1, #255	; 0xff
 8000606:	200b      	movs	r0, #11
 8000608:	f000 f806 	bl	8000618 <STMPE811_write_byte>
    HAL_Delay(4);
 800060c:	2004      	movs	r0, #4
 800060e:	f001 fe97 	bl	8002340 <HAL_Delay>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <STMPE811_write_byte>:


void STMPE811_write_byte(unsigned char addr, unsigned char value)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	71bb      	strb	r3, [r7, #6]
    unsigned char data_values[2] = {0x00, 0x00};
 8000628:	2300      	movs	r3, #0
 800062a:	81bb      	strh	r3, [r7, #12]
    
    data_values[0] = addr;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	733b      	strb	r3, [r7, #12]
    data_values[1] = value;
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	737b      	strb	r3, [r7, #13]
    

    HAL_I2C_Master_Transmit(&hi2c1,STMPE811_device_address, data_values, 2, 1000);
 8000634:	f107 020c 	add.w	r2, r7, #12
 8000638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2302      	movs	r3, #2
 8000640:	2182      	movs	r1, #130	; 0x82
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <STMPE811_write_byte+0x38>)
 8000644:	f002 fa80 	bl	8002b48 <HAL_I2C_Master_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000b8 	.word	0x200000b8

08000654 <STMPE811_read_word>:
    HAL_I2C_Master_Transmit(&hi2c1,STMPE811_device_address, data_values, 3, 1000);
}


unsigned int STMPE811_read_word(unsigned char addr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af02      	add	r7, sp, #8
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    unsigned char value_a[1] = {0x00};
 800065e:	2300      	movs	r3, #0
 8000660:	743b      	strb	r3, [r7, #16]
    unsigned char value_d[2] = {0x00, 0x00};
 8000662:	2300      	movs	r3, #0
 8000664:	81bb      	strh	r3, [r7, #12]

    unsigned int value = 0x0000;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]

    value_a[0] = addr;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	743b      	strb	r3, [r7, #16]


    HAL_I2C_Master_Transmit(&hi2c1,STMPE811_device_address, value_a, 1, 1000);
 800066e:	f107 0210 	add.w	r2, r7, #16
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2301      	movs	r3, #1
 800067a:	2182      	movs	r1, #130	; 0x82
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <STMPE811_read_word+0x60>)
 800067e:	f002 fa63 	bl	8002b48 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1,STMPE811_device_address, value_d, 2, 1000);
 8000682:	f107 020c 	add.w	r2, r7, #12
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2302      	movs	r3, #2
 800068e:	2182      	movs	r1, #130	; 0x82
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <STMPE811_read_word+0x60>)
 8000692:	f002 fb57 	bl	8002d44 <HAL_I2C_Master_Receive>

    value = value_d[0];
 8000696:	7b3b      	ldrb	r3, [r7, #12]
 8000698:	617b      	str	r3, [r7, #20]
    value <<= 0x08;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	617b      	str	r3, [r7, #20]
    value |= value_d[1];
 80006a0:	7b7b      	ldrb	r3, [r7, #13]
 80006a2:	461a      	mov	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	617b      	str	r3, [r7, #20]

    return value;
 80006aa:	697b      	ldr	r3, [r7, #20]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000b8 	.word	0x200000b8

080006b8 <STMPE811_read_x>:


unsigned int STMPE811_read_x()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
    unsigned int value = 0x0000;
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
    
    value = STMPE811_read_word(STMPE811_TSC_DATA_X);
 80006c2:	204d      	movs	r0, #77	; 0x4d
 80006c4:	f7ff ffc6 	bl	8000654 <STMPE811_read_word>
 80006c8:	6078      	str	r0, [r7, #4]
    
    return value;
 80006ca:	687b      	ldr	r3, [r7, #4]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <STMPE811_read_y>:


unsigned int STMPE811_read_y()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
    unsigned int value = 0x0000;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]

    value = STMPE811_read_word(STMPE811_TSC_DATA_Y);
 80006de:	204f      	movs	r0, #79	; 0x4f
 80006e0:	f7ff ffb8 	bl	8000654 <STMPE811_read_word>
 80006e4:	6078      	str	r0, [r7, #4]

    return value;
 80006e6:	687b      	ldr	r3, [r7, #4]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint8_t state = INIT, old_state = 0xFF;
 80006f6:	2300      	movs	r3, #0
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	23ff      	movs	r3, #255	; 0xff
 80006fc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f001 fdad 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f8f5 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 f98b 	bl	8000a20 <MX_GPIO_Init>
  MX_FSMC_Init();
 800070a:	f000 f9cd 	bl	8000aa8 <MX_FSMC_Init>
  MX_I2C1_Init();
 800070e:	f000 f959 	bl	80009c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD2119_Init();
 8000712:	f000 ff45 	bl	80015a0 <SSD2119_Init>
  STMPE811_init();
 8000716:	f7ff ff2d 	bl	8000574 <STMPE811_init>
//  char str[20] = {0};
  /* USER CODE END 2 */

  LCD_Clear(Green);
 800071a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800071e:	f001 f867 	bl	80017f0 <LCD_Clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(old_state != state)
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	429a      	cmp	r2, r3
 8000728:	d001      	beq.n	800072e <main+0x3e>
	  {

		  old_state = state;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	71bb      	strb	r3, [r7, #6]

	  }

	  switch (state)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b04      	cmp	r3, #4
 8000732:	f200 80d3 	bhi.w	80008dc <main+0x1ec>
 8000736:	a201      	add	r2, pc, #4	; (adr r2, 800073c <main+0x4c>)
 8000738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073c:	08000751 	.word	0x08000751
 8000740:	08000757 	.word	0x08000757
 8000744:	080007cb 	.word	0x080007cb
 8000748:	08000813 	.word	0x08000813
 800074c:	08000821 	.word	0x08000821
	  {
	  case INIT:
		  state = WAIT_PLAY;
 8000750:	2301      	movs	r3, #1
 8000752:	71fb      	strb	r3, [r7, #7]
		  break;
 8000754:	e0c6      	b.n	80008e4 <main+0x1f4>

	  case WAIT_PLAY:
		  x=STMPE811_read_x();
 8000756:	f7ff ffaf 	bl	80006b8 <STMPE811_read_x>
 800075a:	4603      	mov	r3, r0
 800075c:	4a62      	ldr	r2, [pc, #392]	; (80008e8 <main+0x1f8>)
 800075e:	6013      	str	r3, [r2, #0]
		  y=STMPE811_read_y();
 8000760:	f7ff ffb8 	bl	80006d4 <STMPE811_read_y>
 8000764:	4603      	mov	r3, r0
 8000766:	4a61      	ldr	r2, [pc, #388]	; (80008ec <main+0x1fc>)
 8000768:	6013      	str	r3, [r2, #0]
		  HAL_Delay(20);
 800076a:	2014      	movs	r0, #20
 800076c:	f001 fde8 	bl	8002340 <HAL_Delay>
		  LCD_FillRect(218, 0, 106, 80, Red);
 8000770:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2350      	movs	r3, #80	; 0x50
 8000778:	226a      	movs	r2, #106	; 0x6a
 800077a:	2100      	movs	r1, #0
 800077c:	20da      	movs	r0, #218	; 0xda
 800077e:	f000 ffe5 	bl	800174c <LCD_FillRect>
		  LCD_FillRect(218, 160, 106, 80, Yellow);
 8000782:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2350      	movs	r3, #80	; 0x50
 800078a:	226a      	movs	r2, #106	; 0x6a
 800078c:	21a0      	movs	r1, #160	; 0xa0
 800078e:	20da      	movs	r0, #218	; 0xda
 8000790:	f000 ffdc 	bl	800174c <LCD_FillRect>

	    	  if(x >=230 && x<=1400 && y>=2660 && y<=3800)
 8000794:	4b54      	ldr	r3, [pc, #336]	; (80008e8 <main+0x1f8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2be5      	cmp	r3, #229	; 0xe5
 800079a:	d913      	bls.n	80007c4 <main+0xd4>
 800079c:	4b52      	ldr	r3, [pc, #328]	; (80008e8 <main+0x1f8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80007a4:	d80e      	bhi.n	80007c4 <main+0xd4>
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <main+0x1fc>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f640 2263 	movw	r2, #2659	; 0xa63
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d908      	bls.n	80007c4 <main+0xd4>
 80007b2:	4b4e      	ldr	r3, [pc, #312]	; (80008ec <main+0x1fc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f640 62d8 	movw	r2, #3800	; 0xed8
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d802      	bhi.n	80007c4 <main+0xd4>
	    	  {
	    		  state = OPTIONS;}
 80007be:	2302      	movs	r3, #2
 80007c0:	71fb      	strb	r3, [r7, #7]
	    	  else
	    	  {
	    		  state = INIT_PLAY;}

		  break;
 80007c2:	e08f      	b.n	80008e4 <main+0x1f4>
	    		  state = INIT_PLAY;}
 80007c4:	2303      	movs	r3, #3
 80007c6:	71fb      	strb	r3, [r7, #7]
		  break;
 80007c8:	e08c      	b.n	80008e4 <main+0x1f4>

	  case OPTIONS:
		  snakeOptions();
 80007ca:	f000 fd8d 	bl	80012e8 <snakeOptions>

		  state = INIT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
		  do
		  {
			  x=STMPE811_read_x();
 80007d2:	f7ff ff71 	bl	80006b8 <STMPE811_read_x>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a43      	ldr	r2, [pc, #268]	; (80008e8 <main+0x1f8>)
 80007da:	6013      	str	r3, [r2, #0]
			  y=STMPE811_read_y();
 80007dc:	f7ff ff7a 	bl	80006d4 <STMPE811_read_y>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a42      	ldr	r2, [pc, #264]	; (80008ec <main+0x1fc>)
 80007e4:	6013      	str	r3, [r2, #0]
		  } while(!(x >=188 && x<=3900 && y>=260 && y<=3800));
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <main+0x1f8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2bbb      	cmp	r3, #187	; 0xbb
 80007ec:	d9f1      	bls.n	80007d2 <main+0xe2>
 80007ee:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <main+0x1f8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f640 723c 	movw	r2, #3900	; 0xf3c
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d8eb      	bhi.n	80007d2 <main+0xe2>
 80007fa:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <main+0x1fc>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000802:	d3e6      	bcc.n	80007d2 <main+0xe2>
 8000804:	4b39      	ldr	r3, [pc, #228]	; (80008ec <main+0x1fc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f640 62d8 	movw	r2, #3800	; 0xed8
 800080c:	4293      	cmp	r3, r2
 800080e:	d8e0      	bhi.n	80007d2 <main+0xe2>
		  break;
 8000810:	e068      	b.n	80008e4 <main+0x1f4>

	  case INIT_PLAY:
		  printFrame();
 8000812:	f000 f9ae 	bl	8000b72 <printFrame>
		  initSnake();
 8000816:	f000 f9dd 	bl	8000bd4 <initSnake>
		  state = PLAY;
 800081a:	2304      	movs	r3, #4
 800081c:	71fb      	strb	r3, [r7, #7]
		  break;
 800081e:	e061      	b.n	80008e4 <main+0x1f4>

	  case PLAY:
		  if (false == snakeTask())
 8000820:	f000 fbce 	bl	8000fc0 <snakeTask>
 8000824:	4603      	mov	r3, r0
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d021      	beq.n	8000874 <main+0x184>
		  {
			  state = INIT;
 8000830:	2300      	movs	r3, #0
 8000832:	71fb      	strb	r3, [r7, #7]
			  do
			  {
				  x=STMPE811_read_x();
 8000834:	f7ff ff40 	bl	80006b8 <STMPE811_read_x>
 8000838:	4603      	mov	r3, r0
 800083a:	4a2b      	ldr	r2, [pc, #172]	; (80008e8 <main+0x1f8>)
 800083c:	6013      	str	r3, [r2, #0]
				  y=STMPE811_read_y();
 800083e:	f7ff ff49 	bl	80006d4 <STMPE811_read_y>
 8000842:	4603      	mov	r3, r0
 8000844:	4a29      	ldr	r2, [pc, #164]	; (80008ec <main+0x1fc>)
 8000846:	6013      	str	r3, [r2, #0]
			  } while(!(x >=188 && x<=3900 && y>=260 && y<=3800));
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <main+0x1f8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2bbb      	cmp	r3, #187	; 0xbb
 800084e:	d9f1      	bls.n	8000834 <main+0x144>
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <main+0x1f8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000858:	4293      	cmp	r3, r2
 800085a:	d8eb      	bhi.n	8000834 <main+0x144>
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <main+0x1fc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000864:	d3e6      	bcc.n	8000834 <main+0x144>
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <main+0x1fc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f640 62d8 	movw	r2, #3800	; 0xed8
 800086e:	4293      	cmp	r3, r2
 8000870:	d8e0      	bhi.n	8000834 <main+0x144>
			  break;
 8000872:	e037      	b.n	80008e4 <main+0x1f4>
		  }
		  x=STMPE811_read_x();
 8000874:	f7ff ff20 	bl	80006b8 <STMPE811_read_x>
 8000878:	4603      	mov	r3, r0
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <main+0x1f8>)
 800087c:	6013      	str	r3, [r2, #0]
		  y=STMPE811_read_y();
 800087e:	f7ff ff29 	bl	80006d4 <STMPE811_read_y>
 8000882:	4603      	mov	r3, r0
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <main+0x1fc>)
 8000886:	6013      	str	r3, [r2, #0]
		  if((x >=188 && x<=3900 && y>=260 && y<=3800))
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <main+0x1f8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2bbb      	cmp	r3, #187	; 0xbb
 800088e:	d928      	bls.n	80008e2 <main+0x1f2>
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <main+0x1f8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000898:	4293      	cmp	r3, r2
 800089a:	d822      	bhi.n	80008e2 <main+0x1f2>
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <main+0x1fc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80008a4:	d31d      	bcc.n	80008e2 <main+0x1f2>
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <main+0x1fc>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f640 62d8 	movw	r2, #3800	; 0xed8
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d817      	bhi.n	80008e2 <main+0x1f2>
		  {
			  x=STMPE811_read_x();
 80008b2:	f7ff ff01 	bl	80006b8 <STMPE811_read_x>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <main+0x1f8>)
 80008ba:	6013      	str	r3, [r2, #0]
			  y=STMPE811_read_y();
 80008bc:	f7ff ff0a 	bl	80006d4 <STMPE811_read_y>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <main+0x1fc>)
 80008c4:	6013      	str	r3, [r2, #0]
			  calcDirection(x, y);
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <main+0x1f8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	4a07      	ldr	r2, [pc, #28]	; (80008ec <main+0x1fc>)
 80008ce:	6812      	ldr	r2, [r2, #0]
 80008d0:	b292      	uxth	r2, r2
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fca1 	bl	800121c <calcDirection>
		  }
		  break;
 80008da:	e002      	b.n	80008e2 <main+0x1f2>
	  default:
		  state = INIT;
 80008dc:	2300      	movs	r3, #0
 80008de:	71fb      	strb	r3, [r7, #7]
		  break;
 80008e0:	e000      	b.n	80008e4 <main+0x1f4>
		  break;
 80008e2:	bf00      	nop
	  if(old_state != state)
 80008e4:	e71d      	b.n	8000722 <main+0x32>
 80008e6:	bf00      	nop
 80008e8:	200000b0 	.word	0x200000b0
 80008ec:	200000b4 	.word	0x200000b4

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	2230      	movs	r2, #48	; 0x30
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f003 fd50 	bl	80043a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <SystemClock_Config+0xcc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <SystemClock_Config+0xcc>)
 800091e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <SystemClock_Config+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <SystemClock_Config+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <SystemClock_Config+0xd0>)
 800093a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <SystemClock_Config+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000960:	2308      	movs	r3, #8
 8000962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000964:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800096e:	2307      	movs	r3, #7
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	4618      	mov	r0, r3
 8000978:	f002 ff38 	bl	80037ec <HAL_RCC_OscConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000982:	f000 f8f1 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	230f      	movs	r3, #15
 8000988:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098a:	2302      	movs	r3, #2
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000992:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000996:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2105      	movs	r1, #5
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 f999 	bl	8003cdc <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009b0:	f000 f8da 	bl	8000b68 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3750      	adds	r7, #80	; 0x50
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <MX_I2C1_Init+0x54>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <MX_I2C1_Init+0x58>)
 80009d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_I2C1_Init+0x50>)
 8000a02:	f001 ff5d 	bl	80028c0 <HAL_I2C_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a0c:	f000 f8ac 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000b8 	.word	0x200000b8
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	000186a0 	.word	0x000186a0

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0310 	and.w	r3, r3, #16
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_GPIO_Init+0x84>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]
 8000abe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000ac2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ac6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ac8:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000aca:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <MX_FSMC_Init+0xbc>)
 8000acc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 9;
 8000b24:	2309      	movs	r3, #9
 8000b26:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 36;
 8000b2c:	2324      	movs	r3, #36	; 0x24
 8000b2e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b30:	230f      	movs	r3, #15
 8000b32:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b34:	2310      	movs	r3, #16
 8000b36:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b38:	2311      	movs	r3, #17
 8000b3a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_FSMC_Init+0xb8>)
 8000b48:	f003 fad4 	bl	80040f4 <HAL_SRAM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000b52:	f000 f809 	bl	8000b68 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000b56:	bf00      	nop
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000010c 	.word	0x2000010c
 8000b64:	a0000104 	.word	0xa0000104

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>

08000b72 <printFrame>:
static void snakeGrow(void);
static uint8_t moveSnake(uint8_t direction);
static void printDirections(void);

void printFrame(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af02      	add	r7, sp, #8
	LCD_Clear(BACKGROUND_COLOR);
 8000b78:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b7c:	f000 fe38 	bl	80017f0 <LCD_Clear>
	LCD_SetTextColor(FRAME_COLOR);
 8000b80:	201f      	movs	r0, #31
 8000b82:	f000 fe7d 	bl	8001880 <LCD_SetTextColor>

	#define FRAME_SIZE 4
	LCD_DrawFullRectFill(0, HEADER_SIZE, DISP_HOR_RESOLUTION, FRAME_SIZE, true);
 8000b86:	2301      	movs	r3, #1
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b90:	2114      	movs	r1, #20
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 ff2c 	bl	80019f0 <LCD_DrawFullRectFill>
	LCD_DrawFullRectFill(0, HEADER_SIZE, FRAME_SIZE, DISP_VER_RESOLUTION - HEADER_SIZE, true);
 8000b98:	2301      	movs	r3, #1
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	23dc      	movs	r3, #220	; 0xdc
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	2114      	movs	r1, #20
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 ff24 	bl	80019f0 <LCD_DrawFullRectFill>
	LCD_DrawFullRectFill(0, DISP_VER_RESOLUTION - FRAME_SIZE, DISP_HOR_RESOLUTION, FRAME_SIZE, true);
 8000ba8:	2301      	movs	r3, #1
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2304      	movs	r3, #4
 8000bae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bb2:	21ec      	movs	r1, #236	; 0xec
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 ff1b 	bl	80019f0 <LCD_DrawFullRectFill>
	LCD_DrawFullRectFill(DISP_HOR_RESOLUTION - FRAME_SIZE, HEADER_SIZE, FRAME_SIZE, DISP_VER_RESOLUTION - HEADER_SIZE, true);
 8000bba:	2301      	movs	r3, #1
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	23dc      	movs	r3, #220	; 0xdc
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	2114      	movs	r1, #20
 8000bc4:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8000bc8:	f000 ff12 	bl	80019f0 <LCD_DrawFullRectFill>
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <initSnake>:

void initSnake(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	uint8_t part;
    g_snakeSize = SNAKE_INIT_SIZE;
 8000bda:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <initSnake+0x128>)
 8000bdc:	2205      	movs	r2, #5
 8000bde:	701a      	strb	r2, [r3, #0]
    g_snakeSpeed = SPEED_VALUE_MS;
 8000be0:	4b47      	ldr	r3, [pc, #284]	; (8000d00 <initSnake+0x12c>)
 8000be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000be6:	801a      	strh	r2, [r3, #0]
    g_direction = up;
 8000be8:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <initSnake+0x130>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	701a      	strb	r2, [r3, #0]
    g_timeH = g_timeM = g_timeS = g_points = 0;
 8000bee:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <initSnake+0x134>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	801a      	strh	r2, [r3, #0]
 8000bf4:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <initSnake+0x138>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	4b44      	ldr	r3, [pc, #272]	; (8000d0c <initSnake+0x138>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <initSnake+0x13c>)
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <initSnake+0x13c>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <initSnake+0x140>)
 8000c08:	701a      	strb	r2, [r3, #0]

    g_snake[0].x = SNAKE_START_X_POSITION;
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <initSnake+0x144>)
 8000c0c:	2291      	movs	r2, #145	; 0x91
 8000c0e:	801a      	strh	r2, [r3, #0]
    g_snake[0].y = SNAKE_START_Y_POSITION;
 8000c10:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <initSnake+0x144>)
 8000c12:	2291      	movs	r2, #145	; 0x91
 8000c14:	805a      	strh	r2, [r3, #2]

    LCD_SetColors(SNAKE_COLOR_BODY, SNAKE_COLOR_HEAD);
 8000c16:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000c1a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000c1e:	f000 fe17 	bl	8001850 <LCD_SetColors>
    LCD_DrawFullCircle(g_snake[0].x, g_snake[0].y, 5);
 8000c22:	4b3d      	ldr	r3, [pc, #244]	; (8000d18 <initSnake+0x144>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	4a3c      	ldr	r2, [pc, #240]	; (8000d18 <initSnake+0x144>)
 8000c28:	8851      	ldrh	r1, [r2, #2]
 8000c2a:	2205      	movs	r2, #5
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 f8c1 	bl	8001db4 <LCD_DrawFullCircle>
    for (part = 1; part < g_snakeSize; part++)
 8000c32:	2301      	movs	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e022      	b.n	8000c7e <initSnake+0xaa>
    {
        g_snake[part].x = SNAKE_START_X_POSITION + (part * SNAKE_STEP);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	3291      	adds	r2, #145	; 0x91
 8000c4a:	b291      	uxth	r1, r2
 8000c4c:	4a32      	ldr	r2, [pc, #200]	; (8000d18 <initSnake+0x144>)
 8000c4e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        g_snake[part].y = SNAKE_START_Y_POSITION;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4a30      	ldr	r2, [pc, #192]	; (8000d18 <initSnake+0x144>)
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	2291      	movs	r2, #145	; 0x91
 8000c5c:	805a      	strh	r2, [r3, #2]
        LCD_DrawFullCircleFill(g_snake[part].x, g_snake[part].y, 5, true);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <initSnake+0x144>)
 8000c62:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4a2b      	ldr	r2, [pc, #172]	; (8000d18 <initSnake+0x144>)
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	8859      	ldrh	r1, [r3, #2]
 8000c70:	2301      	movs	r3, #1
 8000c72:	2205      	movs	r2, #5
 8000c74:	f000 fffe 	bl	8001c74 <LCD_DrawFullCircleFill>
    for (part = 1; part < g_snakeSize; part++)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <initSnake+0x128>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	79fa      	ldrb	r2, [r7, #7]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3d7      	bcc.n	8000c38 <initSnake+0x64>
    }

    // print target
    LCD_SetColors(TARGET_COLOR, BACKGROUND_COLOR);
 8000c88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c8c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000c90:	f000 fdde 	bl	8001850 <LCD_SetColors>
    LCD_DrawFullCircleFill(target.x, target.y, 3, true);
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <initSnake+0x148>)
 8000c96:	8818      	ldrh	r0, [r3, #0]
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <initSnake+0x148>)
 8000c9a:	8859      	ldrh	r1, [r3, #2]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	f000 ffe8 	bl	8001c74 <LCD_DrawFullCircleFill>

    // print header

	LCD_SetColors(HEADER_TEXT_COLOR, BACKGROUND_COLOR);
 8000ca4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 fdd1 	bl	8001850 <LCD_SetColors>

	LCD_SetFont(&Font8x12);
 8000cae:	481c      	ldr	r0, [pc, #112]	; (8000d20 <initSnake+0x14c>)
 8000cb0:	f000 fdbe 	bl	8001830 <LCD_SetFont>
//	LCD_SetColors(HEADER_TEXT_COLOR, BACKGROUND_COLOR);

//	ILI9341_WriteString(HEADER_TEXT_MARGIN,COLUMN(25), (uint8_t *)"Points:  0", Font_8x12, HEADER_TEXT_COLOR, BACKGROUND_COLOR);
//	ILI9341_WriteString(HEADER_TEXT_MARGIN,COLUMN(6), (uint8_t *)"Time 0:00", Font_8x12, HEADER_TEXT_COLOR, BACKGROUND_COLOR);

	LCD_DisplayString(HEADER_TEXT_MARGIN,COLUMN(25),(uint8_t *)"Points:  0");
 8000cb4:	f001 f892 	bl	8001ddc <LCD_GetFont>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	889b      	ldrh	r3, [r3, #4]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	0091      	lsls	r1, r2, #2
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4413      	add	r3, r2
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <initSnake+0x150>)
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2005      	movs	r0, #5
 8000cd4:	f001 f934 	bl	8001f40 <LCD_DisplayString>
	LCD_DisplayString(HEADER_TEXT_MARGIN,COLUMN(6),(uint8_t *)"Time 0:00");
 8000cd8:	f001 f880 	bl	8001ddc <LCD_GetFont>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	889b      	ldrh	r3, [r3, #4]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	0052      	lsls	r2, r2, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <initSnake+0x154>)
 8000cec:	4619      	mov	r1, r3
 8000cee:	2005      	movs	r0, #5
 8000cf0:	f001 f926 	bl	8001f40 <LCD_DisplayString>
//	LCD_TextFont(HEADER_TEXT_MARGIN,COLUMN(25),"Points:  0",Black,White, font_8x16);
//	LCD_TextFont(HEADER_TEXT_MARGIN,COLUMN(6),"Time 0:00",Black,White, font_8x16);

//	LCD_DisplayString(HEADER_TEXT_MARGIN,COLUMN(25),(uint8_t *)"Points:  0");
//	LCD_DisplayString(HEADER_TEXT_MARGIN,COLUMN(6),(uint8_t *)"Time 0:00");
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000010 	.word	0x20000010
 8000d00:	2000001c 	.word	0x2000001c
 8000d04:	2000001a 	.word	0x2000001a
 8000d08:	20000308 	.word	0x20000308
 8000d0c:	20000306 	.word	0x20000306
 8000d10:	20000305 	.word	0x20000305
 8000d14:	20000304 	.word	0x20000304
 8000d18:	20000170 	.word	0x20000170
 8000d1c:	20000014 	.word	0x20000014
 8000d20:	20000008 	.word	0x20000008
 8000d24:	08004c8c 	.word	0x08004c8c
 8000d28:	08004c98 	.word	0x08004c98

08000d2c <moveSnake>:

static uint8_t moveSnake(uint8_t direction)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint8_t part, partsCount = g_snakeSize, ret_val = RET_OK;
 8000d36:	4b83      	ldr	r3, [pc, #524]	; (8000f44 <moveSnake+0x218>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	737b      	strb	r3, [r7, #13]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73bb      	strb	r3, [r7, #14]
    static uint8_t speedIncreaseCnt = SPEED_INCREASE_STEPS_CNT;

    if (direction >= directionsCnt)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d901      	bls.n	8000d4a <moveSnake+0x1e>
        return RET_NO_MOVE;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e0f8      	b.n	8000f3c <moveSnake+0x210>

    // remove last part of snake
    LCD_SetTextColor(BACKGROUND_COLOR);
 8000d4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d4e:	f000 fd97 	bl	8001880 <LCD_SetTextColor>
    LCD_DrawFullRectFill(g_snake[partsCount-1].x - 5, g_snake[partsCount-1].y - 5, 11, 11, true);
 8000d52:	7b7b      	ldrb	r3, [r7, #13]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	4a7c      	ldr	r2, [pc, #496]	; (8000f48 <moveSnake+0x21c>)
 8000d58:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000d5c:	3b05      	subs	r3, #5
 8000d5e:	b298      	uxth	r0, r3
 8000d60:	7b7b      	ldrb	r3, [r7, #13]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	4a78      	ldr	r2, [pc, #480]	; (8000f48 <moveSnake+0x21c>)
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	885b      	ldrh	r3, [r3, #2]
 8000d6c:	3b05      	subs	r3, #5
 8000d6e:	b299      	uxth	r1, r3
 8000d70:	2301      	movs	r3, #1
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	230b      	movs	r3, #11
 8000d76:	220b      	movs	r2, #11
 8000d78:	f000 fe3a 	bl	80019f0 <LCD_DrawFullRectFill>

    for (part = partsCount-1; part > 0; part--)
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e017      	b.n	8000db4 <moveSnake+0x88>
    {
        g_snake[part].x = g_snake[part-1].x;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	1e5a      	subs	r2, r3, #1
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	496f      	ldr	r1, [pc, #444]	; (8000f48 <moveSnake+0x21c>)
 8000d8c:	f831 1022 	ldrh.w	r1, [r1, r2, lsl #2]
 8000d90:	4a6d      	ldr	r2, [pc, #436]	; (8000f48 <moveSnake+0x21c>)
 8000d92:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        g_snake[part].y = g_snake[part-1].y;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	496a      	ldr	r1, [pc, #424]	; (8000f48 <moveSnake+0x21c>)
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	8858      	ldrh	r0, [r3, #2]
 8000da4:	4968      	ldr	r1, [pc, #416]	; (8000f48 <moveSnake+0x21c>)
 8000da6:	0093      	lsls	r3, r2, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	4602      	mov	r2, r0
 8000dac:	805a      	strh	r2, [r3, #2]
    for (part = partsCount-1; part > 0; part--)
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1e4      	bne.n	8000d84 <moveSnake+0x58>
    }
    // redraw new last part of snake
    LCD_SetColors(SNAKE_COLOR_BODY, SNAKE_COLOR_HEAD);
 8000dba:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000dbe:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000dc2:	f000 fd45 	bl	8001850 <LCD_SetColors>
    LCD_DrawFullCircleFill(g_snake[partsCount-1].x, g_snake[partsCount-1].y, 5, true);
 8000dc6:	7b7b      	ldrb	r3, [r7, #13]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	4a5f      	ldr	r2, [pc, #380]	; (8000f48 <moveSnake+0x21c>)
 8000dcc:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8000dd0:	7b7b      	ldrb	r3, [r7, #13]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	4a5c      	ldr	r2, [pc, #368]	; (8000f48 <moveSnake+0x21c>)
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	8859      	ldrh	r1, [r3, #2]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	2205      	movs	r2, #5
 8000de0:	f000 ff48 	bl	8001c74 <LCD_DrawFullCircleFill>

    switch (direction)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d83f      	bhi.n	8000e6a <moveSnake+0x13e>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <moveSnake+0xc4>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e01 	.word	0x08000e01
 8000df4:	08000e1b 	.word	0x08000e1b
 8000df8:	08000e37 	.word	0x08000e37
 8000dfc:	08000e51 	.word	0x08000e51
    {
    case left:
        if (MOVE_MARGIN >= g_snake[0].x)
 8000e00:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <moveSnake+0x21c>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d801      	bhi.n	8000e0c <moveSnake+0xe0>
            ret_val = RET_GAME_OVER; //snake[0].x = 790;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	73bb      	strb	r3, [r7, #14]

        g_snake[0].x -= SNAKE_STEP;
 8000e0c:	4b4e      	ldr	r3, [pc, #312]	; (8000f48 <moveSnake+0x21c>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	3b0a      	subs	r3, #10
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <moveSnake+0x21c>)
 8000e16:	801a      	strh	r2, [r3, #0]
        break;
 8000e18:	e027      	b.n	8000e6a <moveSnake+0x13e>
    case right:
        if((DISP_HOR_RESOLUTION - MOVE_MARGIN) <= g_snake[0].x)
 8000e1a:	4b4b      	ldr	r3, [pc, #300]	; (8000f48 <moveSnake+0x21c>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000e22:	d901      	bls.n	8000e28 <moveSnake+0xfc>
            ret_val = RET_GAME_OVER; //snake[0].x = 0;
 8000e24:	2302      	movs	r3, #2
 8000e26:	73bb      	strb	r3, [r7, #14]

        g_snake[0].x += SNAKE_STEP;
 8000e28:	4b47      	ldr	r3, [pc, #284]	; (8000f48 <moveSnake+0x21c>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	330a      	adds	r3, #10
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <moveSnake+0x21c>)
 8000e32:	801a      	strh	r2, [r3, #0]
        break;
 8000e34:	e019      	b.n	8000e6a <moveSnake+0x13e>
    case up:
        if ((MOVE_MARGIN + HEADER_SIZE) >= g_snake[0].y)
 8000e36:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <moveSnake+0x21c>)
 8000e38:	885b      	ldrh	r3, [r3, #2]
 8000e3a:	2b23      	cmp	r3, #35	; 0x23
 8000e3c:	d801      	bhi.n	8000e42 <moveSnake+0x116>
            ret_val = RET_GAME_OVER; //snake[0].y = 470;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	73bb      	strb	r3, [r7, #14]

        g_snake[0].y -= SNAKE_STEP;
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <moveSnake+0x21c>)
 8000e44:	885b      	ldrh	r3, [r3, #2]
 8000e46:	3b0a      	subs	r3, #10
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <moveSnake+0x21c>)
 8000e4c:	805a      	strh	r2, [r3, #2]
        break;
 8000e4e:	e00c      	b.n	8000e6a <moveSnake+0x13e>
    case down:
        if ((DISP_VER_RESOLUTION - MOVE_MARGIN) <= g_snake[0].y)
 8000e50:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <moveSnake+0x21c>)
 8000e52:	885b      	ldrh	r3, [r3, #2]
 8000e54:	2be0      	cmp	r3, #224	; 0xe0
 8000e56:	d901      	bls.n	8000e5c <moveSnake+0x130>
            ret_val = RET_GAME_OVER; //snake[0].y = 0;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	73bb      	strb	r3, [r7, #14]

        g_snake[0].y += SNAKE_STEP;
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <moveSnake+0x21c>)
 8000e5e:	885b      	ldrh	r3, [r3, #2]
 8000e60:	330a      	adds	r3, #10
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <moveSnake+0x21c>)
 8000e66:	805a      	strh	r2, [r3, #2]
        break;
 8000e68:	bf00      	nop
    }

    for (part = partsCount-1; part > 0; part--)
 8000e6a:	7b7b      	ldrb	r3, [r7, #13]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e015      	b.n	8000e9e <moveSnake+0x172>
    {
        if ((g_snake[0].x == g_snake[part].x) &&
 8000e72:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <moveSnake+0x21c>)
 8000e74:	881a      	ldrh	r2, [r3, #0]
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	4933      	ldr	r1, [pc, #204]	; (8000f48 <moveSnake+0x21c>)
 8000e7a:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d10a      	bne.n	8000e98 <moveSnake+0x16c>
            (g_snake[0].y == g_snake[part].y))
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <moveSnake+0x21c>)
 8000e84:	885a      	ldrh	r2, [r3, #2]
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	492f      	ldr	r1, [pc, #188]	; (8000f48 <moveSnake+0x21c>)
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	885b      	ldrh	r3, [r3, #2]
        if ((g_snake[0].x == g_snake[part].x) &&
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d101      	bne.n	8000e98 <moveSnake+0x16c>
        {
            ret_val = RET_GAME_OVER;
 8000e94:	2302      	movs	r3, #2
 8000e96:	73bb      	strb	r3, [r7, #14]
    for (part = partsCount-1; part > 0; part--)
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e6      	bne.n	8000e72 <moveSnake+0x146>
        }
    }

    // print head on new position
    LCD_SetColors(SNAKE_COLOR_BODY, SNAKE_COLOR_HEAD);
 8000ea4:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000ea8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000eac:	f000 fcd0 	bl	8001850 <LCD_SetColors>
    LCD_DrawFullCircle(g_snake[0].x, g_snake[0].y, 5);
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <moveSnake+0x21c>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	4a24      	ldr	r2, [pc, #144]	; (8000f48 <moveSnake+0x21c>)
 8000eb6:	8851      	ldrh	r1, [r2, #2]
 8000eb8:	2205      	movs	r2, #5
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 ff7a 	bl	8001db4 <LCD_DrawFullCircle>
    LCD_DrawFullCircleFill(g_snake[1].x, g_snake[1].y, 5, true);
 8000ec0:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <moveSnake+0x21c>)
 8000ec2:	8898      	ldrh	r0, [r3, #4]
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <moveSnake+0x21c>)
 8000ec6:	88d9      	ldrh	r1, [r3, #6]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	2205      	movs	r2, #5
 8000ecc:	f000 fed2 	bl	8001c74 <LCD_DrawFullCircleFill>
    if ( (target.x == g_snake[0].x)
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <moveSnake+0x220>)
 8000ed2:	881a      	ldrh	r2, [r3, #0]
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <moveSnake+0x21c>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d12e      	bne.n	8000f3a <moveSnake+0x20e>
       &&(target.y == g_snake[0].y) )
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <moveSnake+0x220>)
 8000ede:	885a      	ldrh	r2, [r3, #2]
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <moveSnake+0x21c>)
 8000ee2:	885b      	ldrh	r3, [r3, #2]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d128      	bne.n	8000f3a <moveSnake+0x20e>
    {
        target.new = true;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <moveSnake+0x220>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	711a      	strb	r2, [r3, #4]
        g_points++;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <moveSnake+0x224>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <moveSnake+0x224>)
 8000ef8:	801a      	strh	r2, [r3, #0]
        snakeGrow();
 8000efa:	f000 f82f 	bl	8000f5c <snakeGrow>
        if (0 == --speedIncreaseCnt)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <moveSnake+0x228>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <moveSnake+0x228>)
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <moveSnake+0x228>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d113      	bne.n	8000f3a <moveSnake+0x20e>
        {
            speedIncreaseCnt = SPEED_INCREASE_STEPS_CNT;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <moveSnake+0x228>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
            g_snakeSpeed -= g_snakeSpeed>>2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <moveSnake+0x22c>)
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <moveSnake+0x22c>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <moveSnake+0x22c>)
 8000f2a:	801a      	strh	r2, [r3, #0]
            if (SPEED_LIMIT > g_snakeSpeed)
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <moveSnake+0x22c>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	2b09      	cmp	r3, #9
 8000f32:	d802      	bhi.n	8000f3a <moveSnake+0x20e>
                g_snakeSpeed = SPEED_LIMIT;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <moveSnake+0x22c>)
 8000f36:	220a      	movs	r2, #10
 8000f38:	801a      	strh	r2, [r3, #0]
        }
    }
//    sprintf(buf,"snake x=%d, y=%d\r\n", g_snake[0].x, g_snake[0].y);
    return ret_val;
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000010 	.word	0x20000010
 8000f48:	20000170 	.word	0x20000170
 8000f4c:	20000014 	.word	0x20000014
 8000f50:	20000308 	.word	0x20000308
 8000f54:	2000001e 	.word	0x2000001e
 8000f58:	2000001c 	.word	0x2000001c

08000f5c <snakeGrow>:

static void snakeGrow(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
    if (SNAKE_LIMIT == g_snakeSize)
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <snakeGrow+0x5c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b64      	cmp	r3, #100	; 0x64
 8000f66:	d021      	beq.n	8000fac <snakeGrow+0x50>
        return;

    g_snake[g_snakeSize].x = g_snake[g_snakeSize-1].x;
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <snakeGrow+0x5c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <snakeGrow+0x5c>)
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <snakeGrow+0x60>)
 8000f76:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <snakeGrow+0x60>)
 8000f7c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    g_snake[g_snakeSize].y = g_snake[g_snakeSize-1].y;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <snakeGrow+0x5c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <snakeGrow+0x5c>)
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <snakeGrow+0x60>)
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	8859      	ldrh	r1, [r3, #2]
 8000f94:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <snakeGrow+0x60>)
 8000f96:	0083      	lsls	r3, r0, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	805a      	strh	r2, [r3, #2]
    g_snakeSize++;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <snakeGrow+0x5c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <snakeGrow+0x5c>)
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	e000      	b.n	8000fae <snakeGrow+0x52>
        return;
 8000fac:	bf00      	nop
}
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000010 	.word	0x20000010
 8000fbc:	20000170 	.word	0x20000170

08000fc0 <snakeTask>:

bool snakeTask(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af02      	add	r7, sp, #8
	uint8_t part;
	static uint8_t old_sec = 0;
	static uint16_t old_points = 0;
	uint8_t sec = HAL_GetTick() / 1000;
 8000fc6:	f001 f9af 	bl	8002328 <HAL_GetTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a80      	ldr	r2, [pc, #512]	; (80011d0 <snakeTask+0x210>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	099b      	lsrs	r3, r3, #6
 8000fd4:	71bb      	strb	r3, [r7, #6]

	if (old_sec < sec)
 8000fd6:	4b7f      	ldr	r3, [pc, #508]	; (80011d4 <snakeTask+0x214>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d94c      	bls.n	800107a <snakeTask+0xba>
	{
		g_timeS++;
 8000fe0:	4b7d      	ldr	r3, [pc, #500]	; (80011d8 <snakeTask+0x218>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b7b      	ldr	r3, [pc, #492]	; (80011d8 <snakeTask+0x218>)
 8000fea:	701a      	strb	r2, [r3, #0]
		old_sec = sec;
 8000fec:	4a79      	ldr	r2, [pc, #484]	; (80011d4 <snakeTask+0x214>)
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	7013      	strb	r3, [r2, #0]
		if (60 == g_timeS)
 8000ff2:	4b79      	ldr	r3, [pc, #484]	; (80011d8 <snakeTask+0x218>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b3c      	cmp	r3, #60	; 0x3c
 8000ff8:	d108      	bne.n	800100c <snakeTask+0x4c>
		{
			g_timeS = 0;
 8000ffa:	4b77      	ldr	r3, [pc, #476]	; (80011d8 <snakeTask+0x218>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
			g_timeM++;
 8001000:	4b76      	ldr	r3, [pc, #472]	; (80011dc <snakeTask+0x21c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b74      	ldr	r3, [pc, #464]	; (80011dc <snakeTask+0x21c>)
 800100a:	701a      	strb	r2, [r3, #0]
		}
		if (60 == g_timeM)
 800100c:	4b73      	ldr	r3, [pc, #460]	; (80011dc <snakeTask+0x21c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b3c      	cmp	r3, #60	; 0x3c
 8001012:	d108      	bne.n	8001026 <snakeTask+0x66>
		{
			g_timeM = 0;
 8001014:	4b71      	ldr	r3, [pc, #452]	; (80011dc <snakeTask+0x21c>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
			g_timeH++;
 800101a:	4b71      	ldr	r3, [pc, #452]	; (80011e0 <snakeTask+0x220>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <snakeTask+0x220>)
 8001024:	701a      	strb	r2, [r3, #0]
		}

//		LCD_SetFont(&Font8x12);
//		LCD_SetColors(HEADER_TEXT_COLOR, BACKGROUND_COLOR);
		if (g_timeH)
 8001026:	4b6e      	ldr	r3, [pc, #440]	; (80011e0 <snakeTask+0x220>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00e      	beq.n	800104c <snakeTask+0x8c>
			sprintf(buf,"Time %d:%02d:%02d", g_timeH, g_timeM, g_timeS);
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <snakeTask+0x220>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b69      	ldr	r3, [pc, #420]	; (80011dc <snakeTask+0x21c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4b67      	ldr	r3, [pc, #412]	; (80011d8 <snakeTask+0x218>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	460b      	mov	r3, r1
 8001042:	4968      	ldr	r1, [pc, #416]	; (80011e4 <snakeTask+0x224>)
 8001044:	4868      	ldr	r0, [pc, #416]	; (80011e8 <snakeTask+0x228>)
 8001046:	f003 f9b5 	bl	80043b4 <siprintf>
 800104a:	e008      	b.n	800105e <snakeTask+0x9e>
		else
			sprintf(buf,"Time %d:%02d", g_timeM, g_timeS);
 800104c:	4b63      	ldr	r3, [pc, #396]	; (80011dc <snakeTask+0x21c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <snakeTask+0x218>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4965      	ldr	r1, [pc, #404]	; (80011ec <snakeTask+0x22c>)
 8001058:	4863      	ldr	r0, [pc, #396]	; (80011e8 <snakeTask+0x228>)
 800105a:	f003 f9ab 	bl	80043b4 <siprintf>

		LCD_DisplayString(HEADER_TEXT_MARGIN,COLUMN(6),buf);
 800105e:	f000 febd 	bl	8001ddc <LCD_GetFont>
 8001062:	4603      	mov	r3, r0
 8001064:	889b      	ldrh	r3, [r3, #4]
 8001066:	461a      	mov	r2, r3
 8001068:	0052      	lsls	r2, r2, #1
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	4a5d      	ldr	r2, [pc, #372]	; (80011e8 <snakeTask+0x228>)
 8001072:	4619      	mov	r1, r3
 8001074:	2005      	movs	r0, #5
 8001076:	f000 ff63 	bl	8001f40 <LCD_DisplayString>

//		LCD_TextFont(HEADER_TEXT_MARGIN,COLUMN(6),buf,HEADER_TEXT_COLOR,BACKGROUND_COLOR, font_8x16);
	}

	if (old_points < g_points)
 800107a:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <snakeTask+0x230>)
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <snakeTask+0x234>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d21c      	bcs.n	80010c0 <snakeTask+0x100>
	{
		old_points = g_points;
 8001086:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <snakeTask+0x234>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <snakeTask+0x230>)
 800108c:	801a      	strh	r2, [r3, #0]
//		LCD_SetFont(&Font8x12);
//		LCD_SetColors(HEADER_TEXT_COLOR, BACKGROUND_COLOR);
		sprintf(buf,"Points:%3d", g_points);
 800108e:	4b59      	ldr	r3, [pc, #356]	; (80011f4 <snakeTask+0x234>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4958      	ldr	r1, [pc, #352]	; (80011f8 <snakeTask+0x238>)
 8001096:	4854      	ldr	r0, [pc, #336]	; (80011e8 <snakeTask+0x228>)
 8001098:	f003 f98c 	bl	80043b4 <siprintf>
		LCD_DisplayString(HEADER_TEXT_MARGIN,COLUMN(25),buf);
 800109c:	f000 fe9e 	bl	8001ddc <LCD_GetFont>
 80010a0:	4603      	mov	r3, r0
 80010a2:	889b      	ldrh	r3, [r3, #4]
 80010a4:	461a      	mov	r2, r3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	461a      	mov	r2, r3
 80010ac:	0091      	lsls	r1, r2, #2
 80010ae:	461a      	mov	r2, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	4413      	add	r3, r2
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <snakeTask+0x228>)
 80010b8:	4619      	mov	r1, r3
 80010ba:	2005      	movs	r0, #5
 80010bc:	f000 ff40 	bl	8001f40 <LCD_DisplayString>
//		LCD_TextFont(HEADER_TEXT_MARGIN,COLUMN(25),buf,HEADER_TEXT_COLOR,BACKGROUND_COLOR, font_8x16);

	}

    if(g_stepCountDown < HAL_GetTick())
 80010c0:	f001 f932 	bl	8002328 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <snakeTask+0x23c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d91a      	bls.n	8001104 <snakeTask+0x144>
    {
        g_stepCountDown = HAL_GetTick() + g_snakeSpeed;
 80010ce:	f001 f92b 	bl	8002328 <HAL_GetTick>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <snakeTask+0x240>)
 80010d6:	8812      	ldrh	r2, [r2, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	4a48      	ldr	r2, [pc, #288]	; (80011fc <snakeTask+0x23c>)
 80010dc:	6013      	str	r3, [r2, #0]
        if (RET_GAME_OVER == moveSnake(g_direction))
 80010de:	4b49      	ldr	r3, [pc, #292]	; (8001204 <snakeTask+0x244>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fe22 	bl	8000d2c <moveSnake>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d10a      	bne.n	8001104 <snakeTask+0x144>
        {
//        	LCD_SetFont(&Font16x24);
        	LCD_SetColors(TEXT_COLOR, BACKGROUND_COLOR);
 80010ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010f2:	201f      	movs	r0, #31
 80010f4:	f000 fbac 	bl	8001850 <LCD_SetColors>
//            LCD_DisplayString(LINE(5), COLUMN(6), (uint8_t *)"GAME OVER");
//            LCD_TextFont(LINE(5), COLUMN(6),buf,TEXT_COLOR,BACKGROUND_COLOR, font_8x16);
            HAL_Delay(1000);
 80010f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fc:	f001 f920 	bl	8002340 <HAL_Delay>
            return false;
 8001100:	2300      	movs	r3, #0
 8001102:	e061      	b.n	80011c8 <snakeTask+0x208>
        }
    }

    if (target.new)
 8001104:	4b40      	ldr	r3, [pc, #256]	; (8001208 <snakeTask+0x248>)
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d05c      	beq.n	80011c6 <snakeTask+0x206>
    {
        target.x = (HAL_GetTick()%TARGET_X_RATIO + 1) * 10 + 5;
 800110c:	f001 f90c 	bl	8002328 <HAL_GetTick>
 8001110:	4601      	mov	r1, r0
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <snakeTask+0x24c>)
 8001114:	fba3 2301 	umull	r2, r3, r3, r1
 8001118:	091a      	lsrs	r2, r3, #4
 800111a:	4613      	mov	r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	1aca      	subs	r2, r1, r3
 8001124:	1c53      	adds	r3, r2, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4413      	add	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	b29b      	uxth	r3, r3
 8001132:	3305      	adds	r3, #5
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b34      	ldr	r3, [pc, #208]	; (8001208 <snakeTask+0x248>)
 8001138:	801a      	strh	r2, [r3, #0]
        target.y = (HAL_GetTick()%TARGET_Y_RATIO + 1) * 10 + 5 + HEADER_SIZE;
 800113a:	f001 f8f5 	bl	8002328 <HAL_GetTick>
 800113e:	4601      	mov	r1, r0
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <snakeTask+0x250>)
 8001142:	fba3 2301 	umull	r2, r3, r3, r1
 8001146:	091a      	lsrs	r2, r3, #4
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	1aca      	subs	r2, r1, r3
 8001152:	1c53      	adds	r3, r2, #1
 8001154:	b29b      	uxth	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	3319      	adds	r3, #25
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <snakeTask+0x248>)
 8001166:	805a      	strh	r2, [r3, #2]
        for (part = 0; part < g_snakeSize; part++)
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	e015      	b.n	800119a <snakeTask+0x1da>
        {
            if ((target.x == g_snake[part].x) &&
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <snakeTask+0x248>)
 8001170:	881a      	ldrh	r2, [r3, #0]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4927      	ldr	r1, [pc, #156]	; (8001214 <snakeTask+0x254>)
 8001176:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 800117a:	429a      	cmp	r2, r3
 800117c:	d10a      	bne.n	8001194 <snakeTask+0x1d4>
                (target.y == g_snake[part].y))
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <snakeTask+0x248>)
 8001180:	885a      	ldrh	r2, [r3, #2]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4923      	ldr	r1, [pc, #140]	; (8001214 <snakeTask+0x254>)
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	885b      	ldrh	r3, [r3, #2]
            if ((target.x == g_snake[part].x) &&
 800118c:	429a      	cmp	r2, r3
 800118e:	d101      	bne.n	8001194 <snakeTask+0x1d4>
            {
            	// target cannot be on the snake, place the new one
                return true;
 8001190:	2301      	movs	r3, #1
 8001192:	e019      	b.n	80011c8 <snakeTask+0x208>
        for (part = 0; part < g_snakeSize; part++)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	3301      	adds	r3, #1
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <snakeTask+0x258>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d3e4      	bcc.n	800116e <snakeTask+0x1ae>
            }
        }
        LCD_SetColors(TARGET_COLOR, BACKGROUND_COLOR);
 80011a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011a8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80011ac:	f000 fb50 	bl	8001850 <LCD_SetColors>
        LCD_DrawFullCircleFill(target.x, target.y, 3, true);
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <snakeTask+0x248>)
 80011b2:	8818      	ldrh	r0, [r3, #0]
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <snakeTask+0x248>)
 80011b6:	8859      	ldrh	r1, [r3, #2]
 80011b8:	2301      	movs	r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	f000 fd5a 	bl	8001c74 <LCD_DrawFullCircleFill>
        target.new = false;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <snakeTask+0x248>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	711a      	strb	r2, [r3, #4]
    }
    return true;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	10624dd3 	.word	0x10624dd3
 80011d4:	2000030a 	.word	0x2000030a
 80011d8:	20000306 	.word	0x20000306
 80011dc:	20000305 	.word	0x20000305
 80011e0:	20000304 	.word	0x20000304
 80011e4:	08004ca4 	.word	0x08004ca4
 80011e8:	2000015c 	.word	0x2000015c
 80011ec:	08004cb8 	.word	0x08004cb8
 80011f0:	2000030c 	.word	0x2000030c
 80011f4:	20000308 	.word	0x20000308
 80011f8:	08004cc8 	.word	0x08004cc8
 80011fc:	20000300 	.word	0x20000300
 8001200:	2000001c 	.word	0x2000001c
 8001204:	2000001a 	.word	0x2000001a
 8001208:	20000014 	.word	0x20000014
 800120c:	88888889 	.word	0x88888889
 8001210:	cccccccd 	.word	0xcccccccd
 8001214:	20000170 	.word	0x20000170
 8001218:	20000010 	.word	0x20000010

0800121c <calcDirection>:

void calcDirection(uint16_t x, uint16_t y)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
//    {
//        return;
//    }


	  if(x >=2680 && x<=3900 && y>=1440 && y<=2700)
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	f640 2277 	movw	r2, #2679	; 0xa77
 8001232:	4293      	cmp	r3, r2
 8001234:	d910      	bls.n	8001258 <calcDirection+0x3c>
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	f640 723c 	movw	r2, #3900	; 0xf3c
 800123c:	4293      	cmp	r3, r2
 800123e:	d80b      	bhi.n	8001258 <calcDirection+0x3c>
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8001246:	d307      	bcc.n	8001258 <calcDirection+0x3c>
 8001248:	88bb      	ldrh	r3, [r7, #4]
 800124a:	f640 228c 	movw	r2, #2700	; 0xa8c
 800124e:	4293      	cmp	r3, r2
 8001250:	d802      	bhi.n	8001258 <calcDirection+0x3c>
	  {
		  g_direction = left;
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <calcDirection+0xc8>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	  }

	  if(x >=200 && x<=1370 && y>=1440 && y<=2670)
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	2bc7      	cmp	r3, #199	; 0xc7
 800125c:	d910      	bls.n	8001280 <calcDirection+0x64>
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	f240 525a 	movw	r2, #1370	; 0x55a
 8001264:	4293      	cmp	r3, r2
 8001266:	d80b      	bhi.n	8001280 <calcDirection+0x64>
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800126e:	d307      	bcc.n	8001280 <calcDirection+0x64>
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	f640 226e 	movw	r2, #2670	; 0xa6e
 8001276:	4293      	cmp	r3, r2
 8001278:	d802      	bhi.n	8001280 <calcDirection+0x64>
	  {
		  g_direction = right;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <calcDirection+0xc8>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
	  }

	  if(x >=1430 && x<=2700 && y>=280 && y<=1400)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	f240 5295 	movw	r2, #1429	; 0x595
 8001286:	4293      	cmp	r3, r2
 8001288:	d90f      	bls.n	80012aa <calcDirection+0x8e>
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001290:	4293      	cmp	r3, r2
 8001292:	d80a      	bhi.n	80012aa <calcDirection+0x8e>
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800129a:	d306      	bcc.n	80012aa <calcDirection+0x8e>
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80012a2:	d802      	bhi.n	80012aa <calcDirection+0x8e>
	  {
		  g_direction = up;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <calcDirection+0xc8>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	701a      	strb	r2, [r3, #0]
	  }

	  if(x >=1400 && x<=2700 && y>=2700 && y<=3750)
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80012b0:	d311      	bcc.n	80012d6 <calcDirection+0xba>
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	f640 228c 	movw	r2, #2700	; 0xa8c
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d80c      	bhi.n	80012d6 <calcDirection+0xba>
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	f640 228b 	movw	r2, #2699	; 0xa8b
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d907      	bls.n	80012d6 <calcDirection+0xba>
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	f640 62a6 	movw	r2, #3750	; 0xea6
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d802      	bhi.n	80012d6 <calcDirection+0xba>
	  {
		  g_direction = down;
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <calcDirection+0xc8>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	701a      	strb	r2, [r3, #0]
//            // middle position
//            g_direction = down;
////            my_printf("down\r\n");
//        }
//    }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2000001a 	.word	0x2000001a

080012e8 <snakeOptions>:

void snakeOptions(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	printDirections();
 80012ec:	f000 f806 	bl	80012fc <printDirections>
	HAL_Delay(1000);
 80012f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f4:	f001 f824 	bl	8002340 <HAL_Delay>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <printDirections>:

void printDirections(void)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
	uint16_t x, y, color;

    for (y = 0; y < DISP_VER_RESOLUTION; y++)
 8001302:	2300      	movs	r3, #0
 8001304:	80bb      	strh	r3, [r7, #4]
 8001306:	e049      	b.n	800139c <printDirections+0xa0>
    {
    	LCD_SetCursor(0, y);
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	4619      	mov	r1, r3
 800130c:	2000      	movs	r0, #0
 800130e:	f000 fb0b 	bl	8001928 <LCD_SetCursor>
    	LCD_WriteRAM_Prepare();
 8001312:	f000 fad5 	bl	80018c0 <LCD_WriteRAM_Prepare>
    	for (x = 0; x < DISP_HOR_RESOLUTION; x++)
 8001316:	2300      	movs	r3, #0
 8001318:	80fb      	strh	r3, [r7, #6]
 800131a:	e038      	b.n	800138e <printDirections+0x92>
    	{
			// position calculation
			if(y < ((HEADER_SIZE + DISP_VER_RESOLUTION)>>1))
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	2b81      	cmp	r3, #129	; 0x81
 8001320:	d816      	bhi.n	8001350 <printDirections+0x54>
			{
				// upper position
				if (x + HEADER_SIZE< y)
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	f103 0214 	add.w	r2, r3, #20
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	da03      	bge.n	8001336 <printDirections+0x3a>
				{
					// left position
					color = Red;
 800132e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	e024      	b.n	8001380 <printDirections+0x84>
				}
				else if ((DISP_HOR_RESOLUTION - x + HEADER_SIZE) < y)
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	f5c3 72aa 	rsb	r2, r3, #340	; 0x154
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	429a      	cmp	r2, r3
 8001340:	da03      	bge.n	800134a <printDirections+0x4e>
				{
					// right position
					color = Green;
 8001342:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	e01a      	b.n	8001380 <printDirections+0x84>
				}
				else
				{
					// middle position
					color = Blue;
 800134a:	231f      	movs	r3, #31
 800134c:	807b      	strh	r3, [r7, #2]
 800134e:	e017      	b.n	8001380 <printDirections+0x84>
				}
			}
			else
			{
				// lower position
				if ((DISP_VER_RESOLUTION - y) > x)
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	f1c3 02f0 	rsb	r2, r3, #240	; 0xf0
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	429a      	cmp	r2, r3
 800135a:	dd03      	ble.n	8001364 <printDirections+0x68>
				{
					// left position
					color = Red;
 800135c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001360:	807b      	strh	r3, [r7, #2]
 8001362:	e00d      	b.n	8001380 <printDirections+0x84>
				}
				else if ((DISP_VER_RESOLUTION - y) > (DISP_HOR_RESOLUTION - x))
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	f1c3 02f0 	rsb	r2, r3, #240	; 0xf0
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001370:	429a      	cmp	r2, r3
 8001372:	dd03      	ble.n	800137c <printDirections+0x80>
				{
					// right position
					color = Green;
 8001374:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001378:	807b      	strh	r3, [r7, #2]
 800137a:	e001      	b.n	8001380 <printDirections+0x84>
				}
				else
				{
					// middle position
					color = Black;
 800137c:	2300      	movs	r3, #0
 800137e:	807b      	strh	r3, [r7, #2]
				}
			}
	    	LCD_WriteRAM(color);
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 faa8 	bl	80018d8 <LCD_WriteRAM>
    	for (x = 0; x < DISP_HOR_RESOLUTION; x++)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	3301      	adds	r3, #1
 800138c:	80fb      	strh	r3, [r7, #6]
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001394:	d3c2      	bcc.n	800131c <printDirections+0x20>
    for (y = 0; y < DISP_VER_RESOLUTION; y++)
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	3301      	adds	r3, #1
 800139a:	80bb      	strh	r3, [r7, #4]
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	2bef      	cmp	r3, #239	; 0xef
 80013a0:	d9b2      	bls.n	8001308 <printDirections+0xc>
    	}
    }
	LCD_SetFont(&Font8x12);
 80013a2:	4839      	ldr	r0, [pc, #228]	; (8001488 <printDirections+0x18c>)
 80013a4:	f000 fa44 	bl	8001830 <LCD_SetFont>
	LCD_SetColors(White, Blue);
 80013a8:	211f      	movs	r1, #31
 80013aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013ae:	f000 fa4f 	bl	8001850 <LCD_SetColors>
//    LCD_TextFont(LINE(5), COLUMN(1),(uint8_t *)"LEFT",White,Blue, font_8x16);

//    LCD_TextFont(LINE(5), COLUMN(14), (uint8_t *)"RIGHT",White,Blue, font_8x16);

//    LCD_TextFont(LINE(8), COLUMN(8),(uint8_t *)"DOWN",White,Blue, font_8x16);
    LCD_DisplayString(HEADER_TEXT_MARGIN, COLUMN(6), (uint8_t *)"Touch screen snake control");
 80013b2:	f000 fd13 	bl	8001ddc <LCD_GetFont>
 80013b6:	4603      	mov	r3, r0
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	0052      	lsls	r2, r2, #1
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4a31      	ldr	r2, [pc, #196]	; (800148c <printDirections+0x190>)
 80013c6:	4619      	mov	r1, r3
 80013c8:	2005      	movs	r0, #5
 80013ca:	f000 fdb9 	bl	8001f40 <LCD_DisplayString>
	LCD_SetFont(&Font16x24);
 80013ce:	4830      	ldr	r0, [pc, #192]	; (8001490 <printDirections+0x194>)
 80013d0:	f000 fa2e 	bl	8001830 <LCD_SetFont>
    LCD_DisplayString(LINE(2), COLUMN(9), (uint8_t *)"UP");
 80013d4:	f000 fd02 	bl	8001ddc <LCD_GetFont>
 80013d8:	4603      	mov	r3, r0
 80013da:	88db      	ldrh	r3, [r3, #6]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	b29c      	uxth	r4, r3
 80013e0:	f000 fcfc 	bl	8001ddc <LCD_GetFont>
 80013e4:	4603      	mov	r3, r0
 80013e6:	889b      	ldrh	r3, [r3, #4]
 80013e8:	461a      	mov	r2, r3
 80013ea:	00d2      	lsls	r2, r2, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4a28      	ldr	r2, [pc, #160]	; (8001494 <printDirections+0x198>)
 80013f2:	4619      	mov	r1, r3
 80013f4:	4620      	mov	r0, r4
 80013f6:	f000 fda3 	bl	8001f40 <LCD_DisplayString>
    LCD_SetBackColor(Red);
 80013fa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80013fe:	f000 fa4f 	bl	80018a0 <LCD_SetBackColor>
    LCD_DisplayString(LINE(5), COLUMN(1), (uint8_t *)"LEFT");
 8001402:	f000 fceb 	bl	8001ddc <LCD_GetFont>
 8001406:	4603      	mov	r3, r0
 8001408:	88db      	ldrh	r3, [r3, #6]
 800140a:	461a      	mov	r2, r3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4413      	add	r3, r2
 8001410:	b29c      	uxth	r4, r3
 8001412:	f000 fce3 	bl	8001ddc <LCD_GetFont>
 8001416:	4603      	mov	r3, r0
 8001418:	889b      	ldrh	r3, [r3, #4]
 800141a:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <printDirections+0x19c>)
 800141c:	4619      	mov	r1, r3
 800141e:	4620      	mov	r0, r4
 8001420:	f000 fd8e 	bl	8001f40 <LCD_DisplayString>
    LCD_SetBackColor(Green);
 8001424:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001428:	f000 fa3a 	bl	80018a0 <LCD_SetBackColor>
    LCD_DisplayString(LINE(5), COLUMN(14), (uint8_t *)"RIGHT");
 800142c:	f000 fcd6 	bl	8001ddc <LCD_GetFont>
 8001430:	4603      	mov	r3, r0
 8001432:	88db      	ldrh	r3, [r3, #6]
 8001434:	461a      	mov	r2, r3
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4413      	add	r3, r2
 800143a:	b29c      	uxth	r4, r3
 800143c:	f000 fcce 	bl	8001ddc <LCD_GetFont>
 8001440:	4603      	mov	r3, r0
 8001442:	889b      	ldrh	r3, [r3, #4]
 8001444:	461a      	mov	r2, r3
 8001446:	00d2      	lsls	r2, r2, #3
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <printDirections+0x1a0>)
 8001450:	4619      	mov	r1, r3
 8001452:	4620      	mov	r0, r4
 8001454:	f000 fd74 	bl	8001f40 <LCD_DisplayString>
    LCD_SetBackColor(Black);
 8001458:	2000      	movs	r0, #0
 800145a:	f000 fa21 	bl	80018a0 <LCD_SetBackColor>
    LCD_DisplayString(LINE(8), COLUMN(8), (uint8_t *)"DOWN");
 800145e:	f000 fcbd 	bl	8001ddc <LCD_GetFont>
 8001462:	4603      	mov	r3, r0
 8001464:	88db      	ldrh	r3, [r3, #6]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	b29c      	uxth	r4, r3
 800146a:	f000 fcb7 	bl	8001ddc <LCD_GetFont>
 800146e:	4603      	mov	r3, r0
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	b29b      	uxth	r3, r3
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <printDirections+0x1a4>)
 8001478:	4619      	mov	r1, r3
 800147a:	4620      	mov	r0, r4
 800147c:	f000 fd60 	bl	8001f40 <LCD_DisplayString>
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	20000008 	.word	0x20000008
 800148c:	08004cd4 	.word	0x08004cd4
 8001490:	20000000 	.word	0x20000000
 8001494:	08004cf0 	.word	0x08004cf0
 8001498:	08004cf4 	.word	0x08004cf4
 800149c:	08004cfc 	.word	0x08004cfc
 80014a0:	08004d04 	.word	0x08004d04

080014a4 <SSD2119_ResetDisplay>:


/* helper function to initialize reset and backlight pins of LCD and to perform
   proper reset of display */
static void SSD2119_ResetDisplay()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio;

  /* enable clock for LCD reset pin */
  LCD_RESET_GPIO_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <SSD2119_ResetDisplay+0xc4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <SSD2119_ResetDisplay+0xc4>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <SSD2119_ResetDisplay+0xc4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]

  /* configure GPIO for LCD reset pin */
  gpio.Pin   = LCD_RESET_PIN;
 80014c6:	2308      	movs	r3, #8
 80014c8:	60fb      	str	r3, [r7, #12]
  gpio.Pull  = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  gpio.Speed = GPIO_SPEED_FAST;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
  gpio.Mode  = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init( LCD_RESET_GPIO_PORT, &gpio );
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	4823      	ldr	r0, [pc, #140]	; (800156c <SSD2119_ResetDisplay+0xc8>)
 80014de:	f001 f839 	bl	8002554 <HAL_GPIO_Init>

  /* apply hardware reset */
  HAL_GPIO_WritePin( LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET );
 80014e2:	2200      	movs	r2, #0
 80014e4:	2108      	movs	r1, #8
 80014e6:	4821      	ldr	r0, [pc, #132]	; (800156c <SSD2119_ResetDisplay+0xc8>)
 80014e8:	f001 f9d0 	bl	800288c <HAL_GPIO_WritePin>
  HAL_Delay( 5 );   /* reset signal asserted during 5ms  */
 80014ec:	2005      	movs	r0, #5
 80014ee:	f000 ff27 	bl	8002340 <HAL_Delay>
  HAL_GPIO_WritePin( LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET );
 80014f2:	2201      	movs	r2, #1
 80014f4:	2108      	movs	r1, #8
 80014f6:	481d      	ldr	r0, [pc, #116]	; (800156c <SSD2119_ResetDisplay+0xc8>)
 80014f8:	f001 f9c8 	bl	800288c <HAL_GPIO_WritePin>
  HAL_Delay( 10 );  /* reset signal released during 10ms */
 80014fc:	200a      	movs	r0, #10
 80014fe:	f000 ff1f 	bl	8002340 <HAL_Delay>
  HAL_GPIO_WritePin( LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET );
 8001502:	2200      	movs	r2, #0
 8001504:	2108      	movs	r1, #8
 8001506:	4819      	ldr	r0, [pc, #100]	; (800156c <SSD2119_ResetDisplay+0xc8>)
 8001508:	f001 f9c0 	bl	800288c <HAL_GPIO_WritePin>
  HAL_Delay( 20 );  /* reset signal asserted during 20ms */
 800150c:	2014      	movs	r0, #20
 800150e:	f000 ff17 	bl	8002340 <HAL_Delay>
  HAL_GPIO_WritePin( LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET );
 8001512:	2201      	movs	r2, #1
 8001514:	2108      	movs	r1, #8
 8001516:	4815      	ldr	r0, [pc, #84]	; (800156c <SSD2119_ResetDisplay+0xc8>)
 8001518:	f001 f9b8 	bl	800288c <HAL_GPIO_WritePin>
  HAL_Delay( 10 );  /* reset signal released during 10ms */
 800151c:	200a      	movs	r0, #10
 800151e:	f000 ff0f 	bl	8002340 <HAL_Delay>

  /* enable clock for LCD backlight control pin */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <SSD2119_ResetDisplay+0xc4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <SSD2119_ResetDisplay+0xc4>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <SSD2119_ResetDisplay+0xc4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* configure GPIO for LCD backlight control pin */
  gpio.Pin  = LCD_BL_CTRL_PIN;
 800153e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001542:	60fb      	str	r3, [r7, #12]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init( LCD_BL_CTRL_GPIO_PORT, &gpio );
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <SSD2119_ResetDisplay+0xc8>)
 8001550:	f001 f800 	bl	8002554 <HAL_GPIO_Init>

  /* switch backlight on */
  HAL_GPIO_WritePin( LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET );
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <SSD2119_ResetDisplay+0xc8>)
 800155c:	f001 f996 	bl	800288c <HAL_GPIO_WritePin>
}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40020c00 	.word	0x40020c00

08001570 <SSD2119_WriteReg>:


/* helper function to set a command register value */
static void SSD2119_WriteReg( uint8_t aReg, uint16_t aValue )
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	460a      	mov	r2, r1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	4613      	mov	r3, r2
 800157e:	80bb      	strh	r3, [r7, #4]
  *SSD2119_Cmnd = aReg;
 8001580:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	b292      	uxth	r2, r2
 8001588:	801a      	strh	r2, [r3, #0]
  *SSD2119_Data = aValue;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <SSD2119_WriteReg+0x2c>)
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	8013      	strh	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	60100000 	.word	0x60100000

080015a0 <SSD2119_Init>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void SSD2119_Init( void )
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* initialize FSMC hardware (16bit, 8080 interface) */
//  FMC_BANK1_Init();

  /* perform reset of LCD */
  SSD2119_ResetDisplay();
 80015a4:	f7ff ff7e 	bl	80014a4 <SSD2119_ResetDisplay>

  /* Enter sleep mode (if we are not already there).*/
  SSD2119_WriteReg( SSD2119_SLEEP_MODE_1_REG, 0x0001 );
 80015a8:	2101      	movs	r1, #1
 80015aa:	2010      	movs	r0, #16
 80015ac:	f7ff ffe0 	bl	8001570 <SSD2119_WriteReg>

  /* Set initial power parameters. */
  SSD2119_WriteReg( SSD2119_PWR_CTRL_5_REG, 0x00B2 );
 80015b0:	21b2      	movs	r1, #178	; 0xb2
 80015b2:	201e      	movs	r0, #30
 80015b4:	f7ff ffdc 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_VCOM_OTP_1_REG, 0x0006 );
 80015b8:	2106      	movs	r1, #6
 80015ba:	2028      	movs	r0, #40	; 0x28
 80015bc:	f7ff ffd8 	bl	8001570 <SSD2119_WriteReg>

  /* Start the oscillator.*/
  SSD2119_WriteReg( SSD2119_OSC_START_REG, 0x0001 );
 80015c0:	2101      	movs	r1, #1
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff ffd4 	bl	8001570 <SSD2119_WriteReg>

  /* Set pixel format and basic display orientation (scanning direction).*/
  SSD2119_WriteReg( SSD2119_OUTPUT_CTRL_REG, 0x30EF ); /* 0x72EF for rotation by 180 degrees */
 80015c8:	f243 01ef 	movw	r1, #12527	; 0x30ef
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff ffcf 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_LCD_DRIVE_AC_CTRL_REG, 0x0600 );
 80015d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80015d6:	2002      	movs	r0, #2
 80015d8:	f7ff ffca 	bl	8001570 <SSD2119_WriteReg>

  /* Exit sleep mode.*/
  SSD2119_WriteReg( SSD2119_SLEEP_MODE_1_REG, 0x0000 );
 80015dc:	2100      	movs	r1, #0
 80015de:	2010      	movs	r0, #16
 80015e0:	f7ff ffc6 	bl	8001570 <SSD2119_WriteReg>
  HAL_Delay( 100 );
 80015e4:	2064      	movs	r0, #100	; 0x64
 80015e6:	f000 feab 	bl	8002340 <HAL_Delay>

  /* Configure pixel color format and MCU interface parameters.*/
  SSD2119_WriteReg( SSD2119_ENTRY_MODE_REG, ENTRY_MODE_DEFAULT );
 80015ea:	f646 0130 	movw	r1, #26672	; 0x6830
 80015ee:	2011      	movs	r0, #17
 80015f0:	f7ff ffbe 	bl	8001570 <SSD2119_WriteReg>

  /* Set analog parameters */
  SSD2119_WriteReg( SSD2119_SLEEP_MODE_2_REG, 0x0999 );
 80015f4:	f640 1199 	movw	r1, #2457	; 0x999
 80015f8:	2012      	movs	r0, #18
 80015fa:	f7ff ffb9 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_ANALOG_SET_REG, 0x3800 );
 80015fe:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001602:	2026      	movs	r0, #38	; 0x26
 8001604:	f7ff ffb4 	bl	8001570 <SSD2119_WriteReg>

  /* Enable the display */
  SSD2119_WriteReg( SSD2119_DISPLAY_CTRL_REG, 0x0033 );
 8001608:	2133      	movs	r1, #51	; 0x33
 800160a:	2007      	movs	r0, #7
 800160c:	f7ff ffb0 	bl	8001570 <SSD2119_WriteReg>

  /* Set VCIX2 voltage to 6.1V.*/
  SSD2119_WriteReg( SSD2119_PWR_CTRL_2_REG, 0x0005 );
 8001610:	2105      	movs	r1, #5
 8001612:	200c      	movs	r0, #12
 8001614:	f7ff ffac 	bl	8001570 <SSD2119_WriteReg>

  /* Configure gamma correction.*/
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_1_REG, 0x0000 );
 8001618:	2100      	movs	r1, #0
 800161a:	2030      	movs	r0, #48	; 0x30
 800161c:	f7ff ffa8 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_2_REG, 0x0303 );
 8001620:	f240 3103 	movw	r1, #771	; 0x303
 8001624:	2031      	movs	r0, #49	; 0x31
 8001626:	f7ff ffa3 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_3_REG, 0x0407 );
 800162a:	f240 4107 	movw	r1, #1031	; 0x407
 800162e:	2032      	movs	r0, #50	; 0x32
 8001630:	f7ff ff9e 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_4_REG, 0x0301 );
 8001634:	f240 3101 	movw	r1, #769	; 0x301
 8001638:	2033      	movs	r0, #51	; 0x33
 800163a:	f7ff ff99 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_5_REG, 0x0301 );
 800163e:	f240 3101 	movw	r1, #769	; 0x301
 8001642:	2034      	movs	r0, #52	; 0x34
 8001644:	f7ff ff94 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_6_REG, 0x0403 );
 8001648:	f240 4103 	movw	r1, #1027	; 0x403
 800164c:	2035      	movs	r0, #53	; 0x35
 800164e:	f7ff ff8f 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_7_REG, 0x0707 );
 8001652:	f240 7107 	movw	r1, #1799	; 0x707
 8001656:	2036      	movs	r0, #54	; 0x36
 8001658:	f7ff ff8a 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_8_REG, 0x0400 );
 800165c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001660:	2037      	movs	r0, #55	; 0x37
 8001662:	f7ff ff85 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_9_REG, 0x0a00 );
 8001666:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800166a:	203a      	movs	r0, #58	; 0x3a
 800166c:	f7ff ff80 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_GAMMA_CTRL_10_REG, 0x1000 );
 8001670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001674:	203b      	movs	r0, #59	; 0x3b
 8001676:	f7ff ff7b 	bl	8001570 <SSD2119_WriteReg>

  /* Configure Vlcd63 and VCOMl */
  SSD2119_WriteReg( SSD2119_PWR_CTRL_3_REG, 0x000A );
 800167a:	210a      	movs	r1, #10
 800167c:	200d      	movs	r0, #13
 800167e:	f7ff ff77 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_PWR_CTRL_4_REG, 0x2E00 );
 8001682:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 8001686:	200e      	movs	r0, #14
 8001688:	f7ff ff72 	bl	8001570 <SSD2119_WriteReg>
  HAL_Delay( 100 );
 800168c:	2064      	movs	r0, #100	; 0x64
 800168e:	f000 fe57 	bl	8002340 <HAL_Delay>

  /* Set the display size and ensure that the GRAM window is set to allow
     access to the full display buffer.*/
  SSD2119_WriteReg( SSD2119_V_RAM_POS_REG, (DISPLAY_PIXEL_HEIGHT - 1) << 8 );
 8001692:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8001696:	2044      	movs	r0, #68	; 0x44
 8001698:	f7ff ff6a 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_H_RAM_START_REG, 0x0000 );
 800169c:	2100      	movs	r1, #0
 800169e:	2045      	movs	r0, #69	; 0x45
 80016a0:	f7ff ff66 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_H_RAM_END_REG, DISPLAY_PIXEL_WIDTH - 1 );
 80016a4:	f240 113f 	movw	r1, #319	; 0x13f
 80016a8:	2046      	movs	r0, #70	; 0x46
 80016aa:	f7ff ff61 	bl	8001570 <SSD2119_WriteReg>

  SSD2119_WriteReg( SSD2119_X_RAM_ADDR_REG, 0x00 );
 80016ae:	2100      	movs	r1, #0
 80016b0:	204e      	movs	r0, #78	; 0x4e
 80016b2:	f7ff ff5d 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_Y_RAM_ADDR_REG, 0x00 );
 80016b6:	2100      	movs	r1, #0
 80016b8:	204f      	movs	r0, #79	; 0x4f
 80016ba:	f7ff ff59 	bl	8001570 <SSD2119_WriteReg>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <SSD2119_SetDataPosition>:
* RETURN VALUE:
*   None
*
*******************************************************************************/
void SSD2119_SetDataPosition( uint16_t aX, uint16_t aY )
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	460a      	mov	r2, r1
 80016cc:	80fb      	strh	r3, [r7, #6]
 80016ce:	4613      	mov	r3, r2
 80016d0:	80bb      	strh	r3, [r7, #4]
  /* set the GRAM window to entire display size */
  SSD2119_WriteReg( SSD2119_V_RAM_POS_REG, ( DISPLAY_PIXEL_HEIGHT - 1 ) << 8 );
 80016d2:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80016d6:	2044      	movs	r0, #68	; 0x44
 80016d8:	f7ff ff4a 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_H_RAM_START_REG, 0x0000 );
 80016dc:	2100      	movs	r1, #0
 80016de:	2045      	movs	r0, #69	; 0x45
 80016e0:	f7ff ff46 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_H_RAM_END_REG, DISPLAY_PIXEL_WIDTH - 1 );
 80016e4:	f240 113f 	movw	r1, #319	; 0x13f
 80016e8:	2046      	movs	r0, #70	; 0x46
 80016ea:	f7ff ff41 	bl	8001570 <SSD2119_WriteReg>

  SSD2119_WriteReg( SSD2119_X_RAM_ADDR_REG, aX );
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4619      	mov	r1, r3
 80016f2:	204e      	movs	r0, #78	; 0x4e
 80016f4:	f7ff ff3c 	bl	8001570 <SSD2119_WriteReg>
  SSD2119_WriteReg( SSD2119_Y_RAM_ADDR_REG, aY );
 80016f8:	88bb      	ldrh	r3, [r7, #4]
 80016fa:	4619      	mov	r1, r3
 80016fc:	204f      	movs	r0, #79	; 0x4f
 80016fe:	f7ff ff37 	bl	8001570 <SSD2119_WriteReg>

  /* set command to make subsequent data transfers */
  *SSD2119_Cmnd = SSD2119_RAM_DATA_REG;
 8001702:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001706:	2222      	movs	r2, #34	; 0x22
 8001708:	801a      	strh	r2, [r3, #0]
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <Lcd_SetPoint>:
  *SSD2119_Data = aData;
}


void Lcd_SetPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
 800171e:	460b      	mov	r3, r1
 8001720:	80bb      	strh	r3, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	807b      	strh	r3, [r7, #2]
	SSD2119_SetDataPosition( x, y );
 8001726:	88ba      	ldrh	r2, [r7, #4]
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ffc8 	bl	80016c2 <SSD2119_SetDataPosition>
	*SSD2119_Cmnd = 0x0022;
 8001732:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001736:	2222      	movs	r2, #34	; 0x22
 8001738:	801a      	strh	r2, [r3, #0]
	*SSD2119_Data = color;
 800173a:	4a03      	ldr	r2, [pc, #12]	; (8001748 <Lcd_SetPoint+0x34>)
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	8013      	strh	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	60100000 	.word	0x60100000

0800174c <LCD_FillRect>:
	LCD_DrawLine1(x+w, y+h, x, y+h, color);
	LCD_DrawLine1(x+w, y+h, x+w, y, color);
}

void LCD_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	4604      	mov	r4, r0
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4623      	mov	r3, r4
 800175c:	80fb      	strh	r3, [r7, #6]
 800175e:	4603      	mov	r3, r0
 8001760:	80bb      	strh	r3, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	807b      	strh	r3, [r7, #2]
 8001766:	4613      	mov	r3, r2
 8001768:	803b      	strh	r3, [r7, #0]
	uint16_t x_index, y_index;

	if (x > MAX_X)
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001770:	d902      	bls.n	8001778 <LCD_FillRect+0x2c>
		x = MAX_X;
 8001772:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001776:	80fb      	strh	r3, [r7, #6]
	if (y > MAX_Y)
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	2bf0      	cmp	r3, #240	; 0xf0
 800177c:	d901      	bls.n	8001782 <LCD_FillRect+0x36>
		y = MAX_Y;
 800177e:	23f0      	movs	r3, #240	; 0xf0
 8001780:	80bb      	strh	r3, [r7, #4]

	if ((x+w) > MAX_X)
 8001782:	88fa      	ldrh	r2, [r7, #6]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	4413      	add	r3, r2
 8001788:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800178c:	dd03      	ble.n	8001796 <LCD_FillRect+0x4a>
		w = MAX_X - x;
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001794:	807b      	strh	r3, [r7, #2]

	if ((y+h) > MAX_Y)
 8001796:	88ba      	ldrh	r2, [r7, #4]
 8001798:	883b      	ldrh	r3, [r7, #0]
 800179a:	4413      	add	r3, r2
 800179c:	2bf0      	cmp	r3, #240	; 0xf0
 800179e:	dd03      	ble.n	80017a8 <LCD_FillRect+0x5c>
		h = MAX_Y - y;
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80017a6:	803b      	strh	r3, [r7, #0]

	for(x_index = x; x_index < x+w; x_index++)
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	81fb      	strh	r3, [r7, #14]
 80017ac:	e014      	b.n	80017d8 <LCD_FillRect+0x8c>
	{
		for(y_index = y; y_index < y+h; y_index++)
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	81bb      	strh	r3, [r7, #12]
 80017b2:	e008      	b.n	80017c6 <LCD_FillRect+0x7a>
		{
			Lcd_SetPoint(x_index, y_index, color);
 80017b4:	8c3a      	ldrh	r2, [r7, #32]
 80017b6:	89b9      	ldrh	r1, [r7, #12]
 80017b8:	89fb      	ldrh	r3, [r7, #14]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffaa 	bl	8001714 <Lcd_SetPoint>
		for(y_index = y; y_index < y+h; y_index++)
 80017c0:	89bb      	ldrh	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	81bb      	strh	r3, [r7, #12]
 80017c6:	89ba      	ldrh	r2, [r7, #12]
 80017c8:	88b9      	ldrh	r1, [r7, #4]
 80017ca:	883b      	ldrh	r3, [r7, #0]
 80017cc:	440b      	add	r3, r1
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dbf0      	blt.n	80017b4 <LCD_FillRect+0x68>
	for(x_index = x; x_index < x+w; x_index++)
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	3301      	adds	r3, #1
 80017d6:	81fb      	strh	r3, [r7, #14]
 80017d8:	89fa      	ldrh	r2, [r7, #14]
 80017da:	88f9      	ldrh	r1, [r7, #6]
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	440b      	add	r3, r1
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbe4      	blt.n	80017ae <LCD_FillRect+0x62>
		}
	}

}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
	...

080017f0 <LCD_Clear>:
}



void LCD_Clear(uint16_t color)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]

	uint32_t i;
	*SSD2119_Cmnd = 0x0022;
 80017fa:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80017fe:	2222      	movs	r2, #34	; 0x22
 8001800:	801a      	strh	r2, [r3, #0]
	for(i=0;i<76800;i++)
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e005      	b.n	8001814 <LCD_Clear+0x24>
	{
		*SSD2119_Data = color;
 8001808:	4a08      	ldr	r2, [pc, #32]	; (800182c <LCD_Clear+0x3c>)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	8013      	strh	r3, [r2, #0]
	for(i=0;i<76800;i++)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3301      	adds	r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800181a:	d3f5      	bcc.n	8001808 <LCD_Clear+0x18>
	}

}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	60100000 	.word	0x60100000

08001830 <LCD_SetFont>:


/* msy */

void LCD_SetFont(sFONT *fonts)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <LCD_SetFont+0x1c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000310 	.word	0x20000310

08001850 <LCD_SetColors>:

void LCD_SetColors(uint16_t _TextColor, uint16_t _BackColor)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	80fb      	strh	r3, [r7, #6]
 800185c:	4613      	mov	r3, r2
 800185e:	80bb      	strh	r3, [r7, #4]
  TextColor = _TextColor;
 8001860:	4a05      	ldr	r2, [pc, #20]	; (8001878 <LCD_SetColors+0x28>)
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	8013      	strh	r3, [r2, #0]
  BackColor = _BackColor;
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <LCD_SetColors+0x2c>)
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	8013      	strh	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	20000314 	.word	0x20000314
 800187c:	20000020 	.word	0x20000020

08001880 <LCD_SetTextColor>:
{
  *_TextColor = TextColor; *_BackColor = BackColor;
}

void LCD_SetTextColor(uint16_t Color)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
  TextColor = Color;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <LCD_SetTextColor+0x1c>)
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	8013      	strh	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	20000314 	.word	0x20000314

080018a0 <LCD_SetBackColor>:

void LCD_SetBackColor(uint16_t Color)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  BackColor = Color;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <LCD_SetBackColor+0x1c>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	8013      	strh	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	20000020 	.word	0x20000020

080018c0 <LCD_WriteRAM_Prepare>:


void LCD_WriteRAM_Prepare(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	*SSD2119_Cmnd = SSD2119_RAM_DATA_REG;
 80018c4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80018c8:	2222      	movs	r2, #34	; 0x22
 80018ca:	801a      	strh	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <LCD_WriteRAM>:

void LCD_WriteRAM(uint16_t RGB_Code)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit GRAM Reg */
  *SSD2119_Data = RGB_Code;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <LCD_WriteRAM+0x1c>)
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	8013      	strh	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	60100000 	.word	0x60100000

080018f8 <LCD_WriteReg>:

void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	80fb      	strh	r3, [r7, #6]
 8001904:	4613      	mov	r3, r2
 8001906:	80bb      	strh	r3, [r7, #4]
  /* Write 16-bit Index, then Write Reg */
  *SSD2119_Cmnd = LCD_Reg;
 8001908:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	8013      	strh	r3, [r2, #0]
  /* Write 16-bit Reg */
  *SSD2119_Data = LCD_RegValue;
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <LCD_WriteReg+0x2c>)
 8001912:	88bb      	ldrh	r3, [r7, #4]
 8001914:	8013      	strh	r3, [r2, #0]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	60100000 	.word	0x60100000

08001928 <LCD_SetCursor>:

void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	80fb      	strh	r3, [r7, #6]
 8001934:	4613      	mov	r3, r2
 8001936:	80bb      	strh	r3, [r7, #4]
  /* Set the X address of the display cursor.*/
  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, Xpos);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4619      	mov	r1, r3
 800193c:	204e      	movs	r0, #78	; 0x4e
 800193e:	f7ff ffdb 	bl	80018f8 <LCD_WriteReg>

  /* Set the Y address of the display cursor.*/
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, Ypos);
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	204f      	movs	r0, #79	; 0x4f
 8001948:	f7ff ffd6 	bl	80018f8 <LCD_WriteReg>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <LCD_DrawLine>:

void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4623      	mov	r3, r4
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	4603      	mov	r3, r0
 8001968:	80bb      	strh	r3, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	707b      	strb	r3, [r7, #1]
  uint32_t i = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]

  LCD_SetCursor(Xpos, Ypos);
 8001976:	88ba      	ldrh	r2, [r7, #4]
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffd3 	bl	8001928 <LCD_SetCursor>
  if(Direction == LCD_DIR_HORIZONTAL)
 8001982:	787b      	ldrb	r3, [r7, #1]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d112      	bne.n	80019ae <LCD_DrawLine+0x5a>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001988:	f7ff ff9a 	bl	80018c0 <LCD_WriteRAM_Prepare>
    for(i = 0; i < Length; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e008      	b.n	80019a4 <LCD_DrawLine+0x50>
    {
      LCD_WriteRAM(TextColor);
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <LCD_DrawLine+0x98>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff9d 	bl	80018d8 <LCD_WriteRAM>
    for(i = 0; i < Length; i++)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3f2      	bcc.n	8001992 <LCD_DrawLine+0x3e>
      LCD_WriteRAM(TextColor);
      Ypos++;
      LCD_SetCursor(Xpos, Ypos);
    }
  }
}
 80019ac:	e01a      	b.n	80019e4 <LCD_DrawLine+0x90>
    for(i = 0; i < Length; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e013      	b.n	80019dc <LCD_DrawLine+0x88>
      LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80019b4:	f7ff ff84 	bl	80018c0 <LCD_WriteRAM_Prepare>
      LCD_WriteRAM(TextColor);
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LCD_DrawLine+0x98>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff8a 	bl	80018d8 <LCD_WriteRAM>
      Ypos++;
 80019c4:	88bb      	ldrh	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	80bb      	strh	r3, [r7, #4]
      LCD_SetCursor(Xpos, Ypos);
 80019ca:	88ba      	ldrh	r2, [r7, #4]
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ffa9 	bl	8001928 <LCD_SetCursor>
    for(i = 0; i < Length; i++)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d3e7      	bcc.n	80019b4 <LCD_DrawLine+0x60>
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd90      	pop	{r4, r7, pc}
 80019ec:	20000314 	.word	0x20000314

080019f0 <LCD_DrawFullRectFill>:

void LCD_DrawFullRectFill(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height, uint8_t Fill)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4604      	mov	r4, r0
 80019f8:	4608      	mov	r0, r1
 80019fa:	4611      	mov	r1, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	4623      	mov	r3, r4
 8001a00:	80fb      	strh	r3, [r7, #6]
 8001a02:	4603      	mov	r3, r0
 8001a04:	80bb      	strh	r3, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	803b      	strh	r3, [r7, #0]
  uint16_t color_bkp = TextColor;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <LCD_DrawFullRectFill+0xbc>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	81fb      	strh	r3, [r7, #14]

  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8001a14:	887a      	ldrh	r2, [r7, #2]
 8001a16:	88b9      	ldrh	r1, [r7, #4]
 8001a18:	88f8      	ldrh	r0, [r7, #6]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f7ff ff9a 	bl	8001954 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+Height), Width, LCD_DIR_HORIZONTAL);
 8001a20:	88ba      	ldrh	r2, [r7, #4]
 8001a22:	883b      	ldrh	r3, [r7, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	b299      	uxth	r1, r3
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	88f8      	ldrh	r0, [r7, #6]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f7ff ff91 	bl	8001954 <LCD_DrawLine>

  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8001a32:	883a      	ldrh	r2, [r7, #0]
 8001a34:	88b9      	ldrh	r1, [r7, #4]
 8001a36:	88f8      	ldrh	r0, [r7, #6]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f7ff ff8b 	bl	8001954 <LCD_DrawLine>
  LCD_DrawLine((Xpos+Width-1), Ypos, Height, LCD_DIR_VERTICAL);
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	4413      	add	r3, r2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b298      	uxth	r0, r3
 8001a4a:	883a      	ldrh	r2, [r7, #0]
 8001a4c:	88b9      	ldrh	r1, [r7, #4]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f7ff ff80 	bl	8001954 <LCD_DrawLine>

  Height--;
 8001a54:	883b      	ldrh	r3, [r7, #0]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	803b      	strh	r3, [r7, #0]
  Ypos++;
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	80bb      	strh	r3, [r7, #4]
  Xpos++;
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	3301      	adds	r3, #1
 8001a64:	80fb      	strh	r3, [r7, #6]
  Width-=2;
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	3b02      	subs	r3, #2
 8001a6a:	807b      	strh	r3, [r7, #2]

  if (0 == Fill)
 8001a6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10e      	bne.n	8001a92 <LCD_DrawFullRectFill+0xa2>
    LCD_SetTextColor(BackColor);
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <LCD_DrawFullRectFill+0xc0>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff00 	bl	8001880 <LCD_SetTextColor>

  while(Height--)
 8001a80:	e007      	b.n	8001a92 <LCD_DrawFullRectFill+0xa2>
  {
    LCD_DrawLine(Xpos, Ypos++, Width, LCD_DIR_HORIZONTAL);
 8001a82:	88b9      	ldrh	r1, [r7, #4]
 8001a84:	1c4b      	adds	r3, r1, #1
 8001a86:	80bb      	strh	r3, [r7, #4]
 8001a88:	887a      	ldrh	r2, [r7, #2]
 8001a8a:	88f8      	ldrh	r0, [r7, #6]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f7ff ff61 	bl	8001954 <LCD_DrawLine>
  while(Height--)
 8001a92:	883b      	ldrh	r3, [r7, #0]
 8001a94:	1e5a      	subs	r2, r3, #1
 8001a96:	803a      	strh	r2, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f2      	bne.n	8001a82 <LCD_DrawFullRectFill+0x92>
  }

  LCD_SetTextColor(color_bkp);
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff feee 	bl	8001880 <LCD_SetTextColor>
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	20000314 	.word	0x20000314
 8001ab0:	20000020 	.word	0x20000020

08001ab4 <LCD_DrawCircle>:

void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	80bb      	strh	r3, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	807b      	strh	r3, [r7, #2]
  int32_t  D;/* Decision Variable */
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */

  D = 3 - (Radius << 1);
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	f1c3 0303 	rsb	r3, r3, #3
 8001ace:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001ad8:	e0bf      	b.n	8001c5a <LCD_DrawCircle+0x1a6>
  {
    LCD_SetCursor(Xpos + CurX, Ypos + CurY);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b298      	uxth	r0, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff ff1a 	bl	8001928 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001af4:	f7ff fee4 	bl	80018c0 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001af8:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <LCD_DrawCircle+0x1bc>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff feea 	bl	80018d8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurX, Ypos - CurY);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b298      	uxth	r0, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff ff05 	bl	8001928 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001b1e:	f7ff fecf 	bl	80018c0 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001b22:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <LCD_DrawCircle+0x1bc>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fed5 	bl	80018d8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	88fa      	ldrh	r2, [r7, #6]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b298      	uxth	r0, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	88bb      	ldrh	r3, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff fef0 	bl	8001928 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001b48:	f7ff feba 	bl	80018c0 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <LCD_DrawCircle+0x1bc>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fec0 	bl	80018d8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	88fa      	ldrh	r2, [r7, #6]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b298      	uxth	r0, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	88ba      	ldrh	r2, [r7, #4]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff fedb 	bl	8001928 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001b72:	f7ff fea5 	bl	80018c0 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <LCD_DrawCircle+0x1bc>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff feab 	bl	80018d8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff fec6 	bl	8001928 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001b9c:	f7ff fe90 	bl	80018c0 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001ba0:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <LCD_DrawCircle+0x1bc>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe96 	bl	80018d8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos - CurX);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	88ba      	ldrh	r2, [r7, #4]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff feb1 	bl	8001928 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001bc6:	f7ff fe7b 	bl	80018c0 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <LCD_DrawCircle+0x1bc>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe81 	bl	80018d8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos + CurX);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	b298      	uxth	r0, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	88bb      	ldrh	r3, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff fe9c 	bl	8001928 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001bf0:	f7ff fe66 	bl	80018c0 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <LCD_DrawCircle+0x1bc>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fe6c 	bl	80018d8 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos - CurX);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	88fa      	ldrh	r2, [r7, #6]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	b298      	uxth	r0, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	88ba      	ldrh	r2, [r7, #4]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7ff fe87 	bl	8001928 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001c1a:	f7ff fe51 	bl	80018c0 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <LCD_DrawCircle+0x1bc>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fe57 	bl	80018d8 <LCD_WriteRAM>
    if (D < 0)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da06      	bge.n	8001c3e <LCD_DrawCircle+0x18a>
    {
      D += (CurX << 2) + 6;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	009a      	lsls	r2, r3, #2
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4413      	add	r3, r2
 8001c38:	3306      	adds	r3, #6
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e00a      	b.n	8001c54 <LCD_DrawCircle+0x1a0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	009a      	lsls	r2, r3, #2
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	4413      	add	r3, r2
 8001c4a:	330a      	adds	r3, #10
 8001c4c:	617b      	str	r3, [r7, #20]
      CurY--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	3301      	adds	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	f67f af3b 	bls.w	8001ada <LCD_DrawCircle+0x26>
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000314 	.word	0x20000314

08001c74 <LCD_DrawFullCircleFill>:


void LCD_DrawFullCircleFill(uint16_t Xpos, uint16_t Ypos, uint16_t Radius, uint8_t Fill)
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4623      	mov	r3, r4
 8001c84:	80fb      	strh	r3, [r7, #6]
 8001c86:	4603      	mov	r3, r0
 8001c88:	80bb      	strh	r3, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	807b      	strh	r3, [r7, #2]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	707b      	strb	r3, [r7, #1]
  int32_t  D;    /* Decision Variable */
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */
  uint16_t color_bkp = TextColor;
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <LCD_DrawFullCircleFill+0x138>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	817b      	strh	r3, [r7, #10]

  D = 3 - (Radius << 1);
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	f1c3 0303 	rsb	r3, r3, #3
 8001ca0:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	60fb      	str	r3, [r7, #12]

  if (0 == Fill)
 8001caa:	787b      	ldrb	r3, [r7, #1]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d168      	bne.n	8001d82 <LCD_DrawFullCircleFill+0x10e>
  {
      LCD_SetTextColor(BackColor);
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <LCD_DrawFullCircleFill+0x13c>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fde2 	bl	8001880 <LCD_SetTextColor>
  }

  while (CurX <= CurY)
 8001cbc:	e061      	b.n	8001d82 <LCD_DrawFullCircleFill+0x10e>
  {
    if(CurY > 0)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d021      	beq.n	8001d08 <LCD_DrawFullCircleFill+0x94>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	88fa      	ldrh	r2, [r7, #6]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b298      	uxth	r0, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	88ba      	ldrh	r2, [r7, #4]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f7ff fe37 	bl	8001954 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	4413      	add	r3, r2
 8001cee:	b298      	uxth	r0, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	88ba      	ldrh	r2, [r7, #4]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b299      	uxth	r1, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	2301      	movs	r3, #1
 8001d04:	f7ff fe26 	bl	8001954 <LCD_DrawLine>
    }

    if(CurX > 0)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d021      	beq.n	8001d52 <LCD_DrawFullCircleFill+0xde>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	b298      	uxth	r0, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	88ba      	ldrh	r2, [r7, #4]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	b299      	uxth	r1, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f7ff fe12 	bl	8001954 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	4413      	add	r3, r2
 8001d38:	b298      	uxth	r0, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	88ba      	ldrh	r2, [r7, #4]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	b299      	uxth	r1, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f7ff fe01 	bl	8001954 <LCD_DrawLine>
    }
    if (D < 0)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	da06      	bge.n	8001d66 <LCD_DrawFullCircleFill+0xf2>
    {
      D += (CurX << 2) + 6;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	009a      	lsls	r2, r3, #2
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	4413      	add	r3, r2
 8001d60:	3306      	adds	r3, #6
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e00a      	b.n	8001d7c <LCD_DrawFullCircleFill+0x108>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	009a      	lsls	r2, r3, #2
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	4413      	add	r3, r2
 8001d72:	330a      	adds	r3, #10
 8001d74:	617b      	str	r3, [r7, #20]
      CurY--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d999      	bls.n	8001cbe <LCD_DrawFullCircleFill+0x4a>
  }

  LCD_SetTextColor(color_bkp);
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fd77 	bl	8001880 <LCD_SetTextColor>
  if (0 == Fill)
 8001d92:	787b      	ldrb	r3, [r7, #1]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <LCD_DrawFullCircleFill+0x130>
  {
	  LCD_DrawCircle(Xpos, Ypos, Radius);
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	88b9      	ldrh	r1, [r7, #4]
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fe88 	bl	8001ab4 <LCD_DrawCircle>
  }
}
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	20000314 	.word	0x20000314
 8001db0:	20000020 	.word	0x20000020

08001db4 <LCD_DrawFullCircle>:

void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	807b      	strh	r3, [r7, #2]
	LCD_DrawFullCircleFill(Xpos, Ypos, Radius, 0);
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	88b9      	ldrh	r1, [r7, #4]
 8001dca:	88f8      	ldrh	r0, [r7, #6]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f7ff ff51 	bl	8001c74 <LCD_DrawFullCircleFill>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <LCD_GetFont>:

sFONT *LCD_GetFont(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <LCD_GetFont+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000310 	.word	0x20000310

08001df4 <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	603a      	str	r2, [r7, #0]
 8001dfe:	80fb      	strh	r3, [r7, #6]
 8001e00:	460b      	mov	r3, r1
 8001e02:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, i = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  uint16_t  Xaddress = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	81fb      	strh	r3, [r7, #14]
  Xaddress = Xpos;
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	81fb      	strh	r3, [r7, #14]

  LCD_SetCursor(Ypos, Xaddress);
 8001e14:	89fa      	ldrh	r2, [r7, #14]
 8001e16:	88bb      	ldrh	r3, [r7, #4]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fd84 	bl	8001928 <LCD_SetCursor>

  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e055      	b.n	8001ed2 <LCD_DrawChar+0xde>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001e26:	f7ff fd4b 	bl	80018c0 <LCD_WriteRAM_Prepare>
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e03d      	b.n	8001eac <LCD_DrawChar+0xb8>
    {

      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <LCD_DrawChar+0xf8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	889b      	ldrh	r3, [r3, #4]
 8001e42:	4a2b      	ldr	r2, [pc, #172]	; (8001ef0 <LCD_DrawChar+0xfc>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	fa42 f303 	asr.w	r3, r2, r3
 8001e58:	400b      	ands	r3, r1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d104      	bne.n	8001e68 <LCD_DrawChar+0x74>
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <LCD_DrawChar+0xf8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d911      	bls.n	8001e8c <LCD_DrawChar+0x98>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	fa42 f303 	asr.w	r3, r2, r3
 8001e7a:	f003 0301 	and.w	r3, r3, #1
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <LCD_DrawChar+0xa6>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <LCD_DrawChar+0xf8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	889b      	ldrh	r3, [r3, #4]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d906      	bls.n	8001e9a <LCD_DrawChar+0xa6>

      {
        LCD_WriteRAM(BackColor);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <LCD_DrawChar+0x100>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fd20 	bl	80018d8 <LCD_WriteRAM>
 8001e98:	e005      	b.n	8001ea6 <LCD_DrawChar+0xb2>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <LCD_DrawChar+0x104>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fd19 	bl	80018d8 <LCD_WriteRAM>
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <LCD_DrawChar+0xf8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d3ba      	bcc.n	8001e30 <LCD_DrawChar+0x3c>
      }
    }
    Xaddress++;
 8001eba:	89fb      	ldrh	r3, [r7, #14]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	81fb      	strh	r3, [r7, #14]
    LCD_SetCursor(Ypos, Xaddress);
 8001ec0:	89fa      	ldrh	r2, [r7, #14]
 8001ec2:	88bb      	ldrh	r3, [r7, #4]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fd2e 	bl	8001928 <LCD_SetCursor>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <LCD_DrawChar+0xf8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	88db      	ldrh	r3, [r3, #6]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d3a2      	bcc.n	8001e26 <LCD_DrawChar+0x32>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000310 	.word	0x20000310
 8001ef0:	aaaaaaab 	.word	0xaaaaaaab
 8001ef4:	20000020 	.word	0x20000020
 8001ef8:	20000314 	.word	0x20000314

08001efc <LCD_DisplayChar>:

void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
 8001f06:	460b      	mov	r3, r1
 8001f08:	80bb      	strh	r3, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	3b20      	subs	r3, #32
 8001f12:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <LCD_DisplayChar+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <LCD_DisplayChar+0x40>)
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	88c9      	ldrh	r1, [r1, #6]
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	441a      	add	r2, r3
 8001f2a:	88b9      	ldrh	r1, [r7, #4]
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff60 	bl	8001df4 <LCD_DrawChar>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000310 	.word	0x20000310

08001f40 <LCD_DisplayString>:


void LCD_DisplayString(uint16_t Line, uint16_t Column, uint8_t *ptr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	603a      	str	r2, [r7, #0]
 8001f4a:	80fb      	strh	r3, [r7, #6]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	80bb      	strh	r3, [r7, #4]
  uint16_t refcolumn = Column;
 8001f50:	88bb      	ldrh	r3, [r7, #4]
 8001f52:	81fb      	strh	r3, [r7, #14]

  /* Send the string character by character on lCD */
  while (*ptr != 0)
 8001f54:	e013      	b.n	8001f7e <LCD_DisplayString+0x3e>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	89f9      	ldrh	r1, [r7, #14]
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ffcc 	bl	8001efc <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <LCD_DisplayString+0x54>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	889a      	ldrh	r2, [r3, #4]
 8001f6a:	89fb      	ldrh	r3, [r7, #14]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	81fb      	strh	r3, [r7, #14]
	if (refcolumn >= LCD_PIXEL_WIDTH) {
 8001f70:	89fb      	ldrh	r3, [r7, #14]
 8001f72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f76:	d207      	bcs.n	8001f88 <LCD_DisplayString+0x48>
		break;
	}
    /* Point on the next character */
    ptr++;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	603b      	str	r3, [r7, #0]
  while (*ptr != 0)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e7      	bne.n	8001f56 <LCD_DisplayString+0x16>
  }
}
 8001f86:	e000      	b.n	8001f8a <LCD_DisplayString+0x4a>
		break;
 8001f88:	bf00      	nop
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000310 	.word	0x20000310

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fd6:	2007      	movs	r0, #7
 8001fd8:	f000 fa88 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_I2C_MspInit+0x84>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12c      	bne.n	8002064 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_I2C_MspInit+0x88>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_I2C_MspInit+0x88>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_I2C_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202c:	2312      	movs	r3, #18
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002038:	2304      	movs	r3, #4
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	480c      	ldr	r0, [pc, #48]	; (8002074 <HAL_I2C_MspInit+0x8c>)
 8002044:	f000 fa86 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_I2C_MspInit+0x88>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_I2C_MspInit+0x88>)
 8002052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_I2C_MspInit+0x88>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40005400 	.word	0x40005400
 8002070:	40023800 	.word	0x40023800
 8002074:	40020400 	.word	0x40020400

08002078 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_FSMC_MspInit+0x88>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d131      	bne.n	80020f8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_FSMC_MspInit+0x88>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_FSMC_MspInit+0x8c>)
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	4a18      	ldr	r2, [pc, #96]	; (8002104 <HAL_FSMC_MspInit+0x8c>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6393      	str	r3, [r2, #56]	; 0x38
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <HAL_FSMC_MspInit+0x8c>)
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80020b6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80020ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80020c8:	230c      	movs	r3, #12
 80020ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <HAL_FSMC_MspInit+0x90>)
 80020d2:	f000 fa3f 	bl	8002554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80020d6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80020da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80020e8:	230c      	movs	r3, #12
 80020ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	4619      	mov	r1, r3
 80020f0:	4806      	ldr	r0, [pc, #24]	; (800210c <HAL_FSMC_MspInit+0x94>)
 80020f2:	f000 fa2f 	bl	8002554 <HAL_GPIO_Init>
 80020f6:	e000      	b.n	80020fa <HAL_FSMC_MspInit+0x82>
    return;
 80020f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000318 	.word	0x20000318
 8002104:	40023800 	.word	0x40023800
 8002108:	40021000 	.word	0x40021000
 800210c:	40020c00 	.word	0x40020c00

08002110 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002118:	f7ff ffae 	bl	8002078 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler+0x4>

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <MemManage_Handler+0x4>

08002136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler+0x4>

08002142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002170:	f000 f8c6 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f002 f8c4 	bl	8004334 <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20020000 	.word	0x20020000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	2000031c 	.word	0x2000031c
 80021e0:	20000338 	.word	0x20000338

080021e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <SystemInit+0x20>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <SystemInit+0x20>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopFillZerobss+0x12>
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <LoopFillZerobss+0x16>)
 800220e:	490e      	ldr	r1, [pc, #56]	; (8002248 <LoopFillZerobss+0x1a>)
 8002210:	4a0e      	ldr	r2, [pc, #56]	; (800224c <LoopFillZerobss+0x1e>)
 8002212:	2300      	movs	r3, #0
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:
 8002216:	58d4      	ldr	r4, [r2, r3]
 8002218:	50c4      	str	r4, [r0, r3]
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:
 800221c:	18c4      	adds	r4, r0, r3
 800221e:	428c      	cmp	r4, r1
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <LoopFillZerobss+0x22>)
 8002224:	4c0b      	ldr	r4, [pc, #44]	; (8002254 <LoopFillZerobss+0x26>)
 8002226:	2300      	movs	r3, #0
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:
 800222e:	42a2      	cmp	r2, r4
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>
 8002232:	f7ff ffd7 	bl	80021e4 <SystemInit>
 8002236:	f002 f883 	bl	8004340 <__libc_init_array>
 800223a:	f7fe fa59 	bl	80006f0 <main>
 800223e:	4770      	bx	lr
 8002240:	20020000 	.word	0x20020000
 8002244:	20000000 	.word	0x20000000
 8002248:	20000094 	.word	0x20000094
 800224c:	08006838 	.word	0x08006838
 8002250:	20000094 	.word	0x20000094
 8002254:	20000334 	.word	0x20000334

08002258 <ADC_IRQHandler>:
 8002258:	e7fe      	b.n	8002258 <ADC_IRQHandler>
	...

0800225c <HAL_Init>:
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_Init+0x40>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <HAL_Init+0x40>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_Init+0x40>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f931 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>
 800228a:	2000      	movs	r0, #0
 800228c:	f000 f808 	bl	80022a0 <HAL_InitTick>
 8002290:	f7ff fe82 	bl	8001f98 <HAL_MspInit>
 8002294:	2300      	movs	r3, #0
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_InitTick>:
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_InitTick+0x54>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_InitTick+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f93b 	bl	800253a <HAL_SYSTICK_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_InitTick+0x2e>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00e      	b.n	80022ec <HAL_InitTick+0x4c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d80a      	bhi.n	80022ea <HAL_InitTick+0x4a>
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f000 f911 	bl	8002502 <HAL_NVIC_SetPriority>
 80022e0:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_InitTick+0x5c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x4c>
 80022ea:	2301      	movs	r3, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000024 	.word	0x20000024
 80022f8:	2000002c 	.word	0x2000002c
 80022fc:	20000028 	.word	0x20000028

08002300 <HAL_IncTick>:
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	2000002c 	.word	0x2000002c
 8002324:	20000320 	.word	0x20000320

08002328 <HAL_GetTick>:
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000320 	.word	0x20000320

08002340 <HAL_Delay>:
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000002c 	.word	0x2000002c

08002388 <__NVIC_SetPriorityGrouping>:
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_SetPriority>:
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
 8002498:	4313      	orrs	r3, r2
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	2300      	movs	r3, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff47 	bl	8002388 <__NVIC_SetPriorityGrouping>
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	f7ff ff5c 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffb0 	bl	80024a8 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e16b      	b.n	8002848 <HAL_GPIO_Init+0x2f4>
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 815a 	bne.w	8002842 <HAL_GPIO_Init+0x2ee>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80b4 	beq.w	8002842 <HAL_GPIO_Init+0x2ee>
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b60      	ldr	r3, [pc, #384]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_GPIO_Init+0x310>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_GPIO_Init+0x314>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x226>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a51      	ldr	r2, [pc, #324]	; (800286c <HAL_GPIO_Init+0x318>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a50      	ldr	r2, [pc, #320]	; (8002870 <HAL_GPIO_Init+0x31c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4f      	ldr	r2, [pc, #316]	; (8002874 <HAL_GPIO_Init+0x320>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_GPIO_Init+0x324>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x216>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4d      	ldr	r2, [pc, #308]	; (800287c <HAL_GPIO_Init+0x328>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <HAL_GPIO_Init+0x32c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x20e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4b      	ldr	r2, [pc, #300]	; (8002884 <HAL_GPIO_Init+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x20a>
 800275a:	2307      	movs	r3, #7
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x228>
 800275e:	2308      	movs	r3, #8
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x228>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <HAL_GPIO_Init+0x310>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_GPIO_Init+0x334>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x26a>
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6093      	str	r3, [r2, #8]
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x294>
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	60d3      	str	r3, [r2, #12]
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2be>
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x334>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6053      	str	r3, [r2, #4]
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x334>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2e8>
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_GPIO_Init+0x334>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae90 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_I2C_Init>:
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e12b      	b.n	8002b2a <HAL_I2C_Init+0x26a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_I2C_Init+0x2c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fb7e 	bl	8001fe8 <HAL_I2C_MspInit>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	f001 fbd2 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a81      	ldr	r2, [pc, #516]	; (8002b34 <HAL_I2C_Init+0x274>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d807      	bhi.n	8002944 <HAL_I2C_Init+0x84>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <HAL_I2C_Init+0x278>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e006      	b.n	8002952 <HAL_I2C_Init+0x92>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a7d      	ldr	r2, [pc, #500]	; (8002b3c <HAL_I2C_Init+0x27c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Init+0x9a>
 8002956:	2301      	movs	r3, #1
 8002958:	e0e7      	b.n	8002b2a <HAL_I2C_Init+0x26a>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a78      	ldr	r2, [pc, #480]	; (8002b40 <HAL_I2C_Init+0x280>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0c9b      	lsrs	r3, r3, #18
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_I2C_Init+0x274>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d802      	bhi.n	8002994 <HAL_I2C_Init+0xd4>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3301      	adds	r3, #1
 8002992:	e009      	b.n	80029a8 <HAL_I2C_Init+0xe8>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	4a69      	ldr	r2, [pc, #420]	; (8002b44 <HAL_I2C_Init+0x284>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	3301      	adds	r3, #1
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	495c      	ldr	r1, [pc, #368]	; (8002b34 <HAL_I2C_Init+0x274>)
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d819      	bhi.n	80029fc <HAL_I2C_Init+0x13c>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e59      	subs	r1, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029dc:	400b      	ands	r3, r1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_I2C_Init+0x138>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e59      	subs	r1, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	e051      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e04f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d111      	bne.n	8002a28 <HAL_I2C_Init+0x168>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e012      	b.n	8002a4e <HAL_I2C_Init+0x18e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	0099      	lsls	r1, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Init+0x196>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e022      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <HAL_I2C_Init+0x1bc>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e58      	subs	r0, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	440b      	add	r3, r1
 8002a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	6809      	ldr	r1, [r1, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61cb      	str	r3, [r1, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6911      	ldr	r1, [r2, #16]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68d2      	ldr	r2, [r2, #12]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b28:	2300      	movs	r3, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	000186a0 	.word	0x000186a0
 8002b38:	001e847f 	.word	0x001e847f
 8002b3c:	003d08ff 	.word	0x003d08ff
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <HAL_I2C_Master_Transmit>:
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	813b      	strh	r3, [r7, #8]
 8002b5c:	f7ff fbe4 	bl	8002328 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 80e0 	bne.w	8002d30 <HAL_I2C_Master_Transmit+0x1e8>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2319      	movs	r3, #25
 8002b76:	2201      	movs	r2, #1
 8002b78:	4970      	ldr	r1, [pc, #448]	; (8002d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fc58 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0x42>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0d3      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2C_Master_Transmit+0x50>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d007      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x76>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2221      	movs	r2, #33	; 0x21
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	893a      	ldrh	r2, [r7, #8]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fac2 	bl	8003190 <I2C_MasterRequestWrite>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0xce>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e08d      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	e066      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fcd2 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x112>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Master_Transmit+0x10e>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	6a39      	ldr	r1, [r7, #32]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fcc2 	bl	800365e <I2C_WaitOnBTFFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d107      	bne.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b0>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01a      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d194      	bne.n	8002c2e <HAL_I2C_Master_Transmit+0xe6>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002d30:	2302      	movs	r3, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <HAL_I2C_Master_Receive>:
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
 8002d58:	f7ff fae6 	bl	8002328 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	; 0x24
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	f040 820b 	bne.w	8003182 <HAL_I2C_Master_Receive+0x43e>
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2319      	movs	r3, #25
 8002d72:	2201      	movs	r2, #1
 8002d74:	497c      	ldr	r1, [pc, #496]	; (8002f68 <HAL_I2C_Master_Receive+0x224>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fb5a 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x42>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e1fe      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2C_Master_Receive+0x50>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e1f7      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d007      	beq.n	8002dba <HAL_I2C_Master_Receive+0x76>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2222      	movs	r2, #34	; 0x22
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a5c      	ldr	r2, [pc, #368]	; (8002f6c <HAL_I2C_Master_Receive+0x228>)
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfc:	8979      	ldrh	r1, [r7, #10]
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fa46 	bl	8003294 <I2C_MasterRequestRead>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Master_Receive+0xce>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1b8      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <HAL_I2C_Master_Receive+0xfe>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	623b      	str	r3, [r7, #32]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e18c      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d11b      	bne.n	8002e82 <HAL_I2C_Master_Receive+0x13e>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e16c      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d11b      	bne.n	8002ec2 <HAL_I2C_Master_Receive+0x17e>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	e14c      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	e138      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	f200 80f1 	bhi.w	80030d6 <HAL_I2C_Master_Receive+0x392>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d123      	bne.n	8002f44 <HAL_I2C_Master_Receive+0x200>
 8002efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fbed 	bl	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_I2C_Master_Receive+0x1cc>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e139      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	; 0x28
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f42:	e10b      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d14e      	bne.n	8002fea <HAL_I2C_Master_Receive+0x2a6>
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	2200      	movs	r2, #0
 8002f54:	4906      	ldr	r1, [pc, #24]	; (8002f70 <HAL_I2C_Master_Receive+0x22c>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa6a 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_I2C_Master_Receive+0x230>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e10e      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8002f66:	bf00      	nop
 8002f68:	00100002 	.word	0x00100002
 8002f6c:	ffff0000 	.word	0xffff0000
 8002f70:	00010004 	.word	0x00010004
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	; 0x28
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe8:	e0b8      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4966      	ldr	r1, [pc, #408]	; (800318c <HAL_I2C_Master_Receive+0x448>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fa1b 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Master_Receive+0x2c0>
 8003000:	2301      	movs	r3, #1
 8003002:	e0bf      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	2200      	movs	r2, #0
 800304e:	494f      	ldr	r1, [pc, #316]	; (800318c <HAL_I2C_Master_Receive+0x448>)
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f9ed 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Master_Receive+0x31c>
 800305c:	2301      	movs	r3, #1
 800305e:	e091      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d4:	e042      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fb00 	bl	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Master_Receive+0x3a6>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e04c      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b04      	cmp	r3, #4
 8003128:	d118      	bne.n	800315c <HAL_I2C_Master_Receive+0x418>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	f47f aec2 	bne.w	8002eea <HAL_I2C_Master_Receive+0x1a6>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8003182:	2302      	movs	r3, #2
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	00010004 	.word	0x00010004

08003190 <I2C_MasterRequestWrite>:
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d006      	beq.n	80031ba <I2C_MasterRequestWrite+0x2a>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d003      	beq.n	80031ba <I2C_MasterRequestWrite+0x2a>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031b8:	d108      	bne.n	80031cc <I2C_MasterRequestWrite+0x3c>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e00b      	b.n	80031e4 <I2C_MasterRequestWrite+0x54>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	2b12      	cmp	r3, #18
 80031d2:	d107      	bne.n	80031e4 <I2C_MasterRequestWrite+0x54>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f91d 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <I2C_MasterRequestWrite+0x88>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320a:	d103      	bne.n	8003214 <I2C_MasterRequestWrite+0x84>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
 8003214:	2303      	movs	r3, #3
 8003216:	e035      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003220:	d108      	bne.n	8003234 <I2C_MasterRequestWrite+0xa4>
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003230:	611a      	str	r2, [r3, #16]
 8003232:	e01b      	b.n	800326c <I2C_MasterRequestWrite+0xdc>
 8003234:	897b      	ldrh	r3, [r7, #10]
 8003236:	11db      	asrs	r3, r3, #7
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 0306 	and.w	r3, r3, #6
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f063 030f 	orn	r3, r3, #15
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	611a      	str	r2, [r3, #16]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	490e      	ldr	r1, [pc, #56]	; (800328c <I2C_MasterRequestWrite+0xfc>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f943 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_MasterRequestWrite+0xd2>
 800325e:	2301      	movs	r3, #1
 8003260:	e010      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4907      	ldr	r1, [pc, #28]	; (8003290 <I2C_MasterRequestWrite+0x100>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f933 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_MasterRequestWrite+0xf2>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
 8003282:	2300      	movs	r3, #0
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	00010008 	.word	0x00010008
 8003290:	00010002 	.word	0x00010002

08003294 <I2C_MasterRequestRead>:
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	460b      	mov	r3, r1
 80032a2:	817b      	strh	r3, [r7, #10]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d006      	beq.n	80032ce <I2C_MasterRequestRead+0x3a>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d003      	beq.n	80032ce <I2C_MasterRequestRead+0x3a>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032cc:	d108      	bne.n	80032e0 <I2C_MasterRequestRead+0x4c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e00b      	b.n	80032f8 <I2C_MasterRequestRead+0x64>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	2b11      	cmp	r3, #17
 80032e6:	d107      	bne.n	80032f8 <I2C_MasterRequestRead+0x64>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f893 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <I2C_MasterRequestRead+0x98>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d103      	bne.n	8003328 <I2C_MasterRequestRead+0x94>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
 8003328:	2303      	movs	r3, #3
 800332a:	e079      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003334:	d108      	bne.n	8003348 <I2C_MasterRequestRead+0xb4>
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	e05f      	b.n	8003408 <I2C_MasterRequestRead+0x174>
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	11db      	asrs	r3, r3, #7
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0306 	and.w	r3, r3, #6
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f063 030f 	orn	r3, r3, #15
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4930      	ldr	r1, [pc, #192]	; (8003428 <I2C_MasterRequestRead+0x194>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f8b9 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_MasterRequestRead+0xe2>
 8003372:	2301      	movs	r3, #1
 8003374:	e054      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4929      	ldr	r1, [pc, #164]	; (800342c <I2C_MasterRequestRead+0x198>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f8a9 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_MasterRequestRead+0x102>
 8003392:	2301      	movs	r3, #1
 8003394:	e044      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f831 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <I2C_MasterRequestRead+0x15c>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e2:	d103      	bne.n	80033ec <I2C_MasterRequestRead+0x158>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
 80033ec:	2303      	movs	r3, #3
 80033ee:	e017      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
 80033f0:	897b      	ldrh	r3, [r7, #10]
 80033f2:	11db      	asrs	r3, r3, #7
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 0306 	and.w	r3, r3, #6
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f063 030e 	orn	r3, r3, #14
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4907      	ldr	r1, [pc, #28]	; (800342c <I2C_MasterRequestRead+0x198>)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f865 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_MasterRequestRead+0x18a>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
 800341e:	2300      	movs	r3, #0
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	00010008 	.word	0x00010008
 800342c:	00010002 	.word	0x00010002

08003430 <I2C_WaitOnFlagUntilTimeout>:
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
 8003440:	e025      	b.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d021      	beq.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
 800344a:	f7fe ff6d 	bl	8002328 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d116      	bne.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800348a:	2301      	movs	r3, #1
 800348c:	e023      	b.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10d      	bne.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4013      	ands	r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	e00c      	b.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d0b6      	beq.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x12>
 80034d4:	2300      	movs	r3, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	e051      	b.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fc:	d123      	bne.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003516:	615a      	str	r2, [r3, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003542:	2301      	movs	r3, #1
 8003544:	e046      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d021      	beq.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800354e:	f7fe feeb 	bl	8002328 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800358e:	2301      	movs	r3, #1
 8003590:	e020      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10c      	bne.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e00b      	b.n	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	43da      	mvns	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d18d      	bne.n	80034ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80035d2:	2300      	movs	r3, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_WaitOnTXEFlagUntilTimeout>:
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	e02d      	b.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f8ce 	bl	800378c <I2C_IsAcknowledgeFailed>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e02d      	b.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d021      	beq.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003602:	f7fe fe91 	bl	8002328 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d116      	bne.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003642:	2301      	movs	r3, #1
 8003644:	e007      	b.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d1ca      	bne.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8003654:	2300      	movs	r3, #0
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_WaitOnBTFFlagUntilTimeout>:
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	e02d      	b.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f88d 	bl	800378c <I2C_IsAcknowledgeFailed>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8003678:	2301      	movs	r3, #1
 800367a:	e02d      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d021      	beq.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003684:	f7fe fe50 	bl	8002328 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d116      	bne.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d1ca      	bne.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80036d6:	2300      	movs	r3, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	e042      	b.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d119      	bne.n	8003730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0210 	mvn.w	r2, #16
 8003704:	615a      	str	r2, [r3, #20]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800372c:	2301      	movs	r3, #1
 800372e:	e029      	b.n	8003784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8003730:	f7fe fdfa 	bl	8002328 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d302      	bcc.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003770:	2301      	movs	r3, #1
 8003772:	e007      	b.n	8003784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d1b5      	bne.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8003782:	2300      	movs	r3, #0
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2C_IsAcknowledgeFailed>:
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d11b      	bne.n	80037dc <I2C_IsAcknowledgeFailed+0x50>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ac:	615a      	str	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <I2C_IsAcknowledgeFailed+0x52>
 80037dc:	2300      	movs	r3, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_RCC_OscConfig>:
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x12>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e267      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d075      	beq.n	80038f6 <HAL_RCC_OscConfig+0x10a>
 800380a:	4b88      	ldr	r3, [pc, #544]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b04      	cmp	r3, #4
 8003814:	d00c      	beq.n	8003830 <HAL_RCC_OscConfig+0x44>
 8003816:	4b85      	ldr	r3, [pc, #532]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d112      	bne.n	8003848 <HAL_RCC_OscConfig+0x5c>
 8003822:	4b82      	ldr	r3, [pc, #520]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382e:	d10b      	bne.n	8003848 <HAL_RCC_OscConfig+0x5c>
 8003830:	4b7e      	ldr	r3, [pc, #504]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05b      	beq.n	80038f4 <HAL_RCC_OscConfig+0x108>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d157      	bne.n	80038f4 <HAL_RCC_OscConfig+0x108>
 8003844:	2301      	movs	r3, #1
 8003846:	e242      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x74>
 8003852:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a75      	ldr	r2, [pc, #468]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xb0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x98>
 800386a:	4b70      	ldr	r3, [pc, #448]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6f      	ldr	r2, [pc, #444]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b6d      	ldr	r3, [pc, #436]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6c      	ldr	r2, [pc, #432]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xb0>
 8003884:	4b69      	ldr	r3, [pc, #420]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a68      	ldr	r2, [pc, #416]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0xe0>
 80038a4:	f7fe fd40 	bl	8002328 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xd2>
 80038ac:	f7fe fd3c 	bl	8002328 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xd2>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e207      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 80038be:	4b5b      	ldr	r3, [pc, #364]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xc0>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x10a>
 80038cc:	f7fe fd2c 	bl	8002328 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0xfa>
 80038d4:	f7fe fd28 	bl	8002328 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xfa>
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1f3      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 80038e6:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0xe8>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x10a>
 80038f4:	bf00      	nop
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d063      	beq.n	80039ca <HAL_RCC_OscConfig+0x1de>
 8003902:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_RCC_OscConfig+0x13a>
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d11c      	bne.n	8003954 <HAL_RCC_OscConfig+0x168>
 800391a:	4b44      	ldr	r3, [pc, #272]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d116      	bne.n	8003954 <HAL_RCC_OscConfig+0x168>
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_RCC_OscConfig+0x152>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d001      	beq.n	800393e <HAL_RCC_OscConfig+0x152>
 800393a:	2301      	movs	r3, #1
 800393c:	e1c7      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 800393e:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4937      	ldr	r1, [pc, #220]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
 8003952:	e03a      	b.n	80039ca <HAL_RCC_OscConfig+0x1de>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_OscConfig+0x1b2>
 800395c:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <HAL_RCC_OscConfig+0x244>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f7fe fce1 	bl	8002328 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x190>
 800396a:	f7fe fcdd 	bl	8002328 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x190>
 8003978:	2303      	movs	r3, #3
 800397a:	e1a8      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 800397c:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x17e>
 8003988:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4925      	ldr	r1, [pc, #148]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
 800399c:	e015      	b.n	80039ca <HAL_RCC_OscConfig+0x1de>
 800399e:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <HAL_RCC_OscConfig+0x244>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f7fe fcc0 	bl	8002328 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x1d2>
 80039ac:	f7fe fcbc 	bl	8002328 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x1d2>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e187      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x1c0>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d036      	beq.n	8003a44 <HAL_RCC_OscConfig+0x258>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d016      	beq.n	8003a0c <HAL_RCC_OscConfig+0x220>
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_RCC_OscConfig+0x248>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f7fe fca0 	bl	8002328 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x212>
 80039ec:	f7fe fc9c 	bl	8002328 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x212>
 80039fa:	2303      	movs	r3, #3
 80039fc:	e167      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x200>
 8003a0a:	e01b      	b.n	8003a44 <HAL_RCC_OscConfig+0x258>
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_OscConfig+0x248>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f7fe fc89 	bl	8002328 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]
 8003a18:	e00e      	b.n	8003a38 <HAL_RCC_OscConfig+0x24c>
 8003a1a:	f7fe fc85 	bl	8002328 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d907      	bls.n	8003a38 <HAL_RCC_OscConfig+0x24c>
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e150      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	42470000 	.word	0x42470000
 8003a34:	42470e80 	.word	0x42470e80
 8003a38:	4b88      	ldr	r3, [pc, #544]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ea      	bne.n	8003a1a <HAL_RCC_OscConfig+0x22e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8097 	beq.w	8003b80 <HAL_RCC_OscConfig+0x394>
 8003a52:	2300      	movs	r3, #0
 8003a54:	75fb      	strb	r3, [r7, #23]
 8003a56:	4b81      	ldr	r3, [pc, #516]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <HAL_RCC_OscConfig+0x296>
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	4b7d      	ldr	r3, [pc, #500]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	4a7c      	ldr	r2, [pc, #496]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a70:	6413      	str	r3, [r2, #64]	; 0x40
 8003a72:	4b7a      	ldr	r3, [pc, #488]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
 8003a82:	4b77      	ldr	r3, [pc, #476]	; (8003c60 <HAL_RCC_OscConfig+0x474>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d118      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2d4>
 8003a8e:	4b74      	ldr	r3, [pc, #464]	; (8003c60 <HAL_RCC_OscConfig+0x474>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a73      	ldr	r2, [pc, #460]	; (8003c60 <HAL_RCC_OscConfig+0x474>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	f7fe fc45 	bl	8002328 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2c8>
 8003aa2:	f7fe fc41 	bl	8002328 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x2c8>
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e10c      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0x474>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2b6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2ea>
 8003ac8:	4b64      	ldr	r3, [pc, #400]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	4a63      	ldr	r2, [pc, #396]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad4:	e01c      	b.n	8003b10 <HAL_RCC_OscConfig+0x324>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x30c>
 8003ade:	4b5f      	ldr	r3, [pc, #380]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a5e      	ldr	r2, [pc, #376]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003ae4:	f043 0304 	orr.w	r3, r3, #4
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	4b5c      	ldr	r3, [pc, #368]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a5b      	ldr	r2, [pc, #364]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
 8003af6:	e00b      	b.n	8003b10 <HAL_RCC_OscConfig+0x324>
 8003af8:	4b58      	ldr	r3, [pc, #352]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a57      	ldr	r2, [pc, #348]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
 8003b04:	4b55      	ldr	r3, [pc, #340]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a54      	ldr	r2, [pc, #336]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f023 0304 	bic.w	r3, r3, #4
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <HAL_RCC_OscConfig+0x358>
 8003b18:	f7fe fc06 	bl	8002328 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_OscConfig+0x34a>
 8003b20:	f7fe fc02 	bl	8002328 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x34a>
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0cb      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003b36:	4b49      	ldr	r3, [pc, #292]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ee      	beq.n	8003b20 <HAL_RCC_OscConfig+0x334>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x382>
 8003b44:	f7fe fbf0 	bl	8002328 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_OscConfig+0x376>
 8003b4c:	f7fe fbec 	bl	8002328 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x376>
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0b5      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003b62:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ee      	bne.n	8003b4c <HAL_RCC_OscConfig+0x360>
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCC_OscConfig+0x394>
 8003b74:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	4a38      	ldr	r2, [pc, #224]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a1 	beq.w	8003ccc <HAL_RCC_OscConfig+0x4e0>
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d05c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x464>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d141      	bne.n	8003c22 <HAL_RCC_OscConfig+0x436>
 8003b9e:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <HAL_RCC_OscConfig+0x478>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f7fe fbc0 	bl	8002328 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x3d2>
 8003bac:	f7fe fbbc 	bl	8002328 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x3d2>
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e087      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003bbe:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x3c0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	3b01      	subs	r3, #1
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	491b      	ldr	r1, [pc, #108]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_RCC_OscConfig+0x478>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f7fe fb95 	bl	8002328 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x428>
 8003c02:	f7fe fb91 	bl	8002328 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x428>
 8003c10:	2303      	movs	r3, #3
 8003c12:	e05c      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x416>
 8003c20:	e054      	b.n	8003ccc <HAL_RCC_OscConfig+0x4e0>
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <HAL_RCC_OscConfig+0x478>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f7fe fb7e 	bl	8002328 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x456>
 8003c30:	f7fe fb7a 	bl	8002328 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x456>
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e045      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x444>
 8003c4e:	e03d      	b.n	8003ccc <HAL_RCC_OscConfig+0x4e0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x47c>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e038      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40007000 	.word	0x40007000
 8003c64:	42470060 	.word	0x42470060
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x4ec>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d028      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d121      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d11a      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c98:	4013      	ands	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c9e:	0192      	lsls	r2, r2, #6
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d111      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4e0>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800

08003cdc <HAL_RCC_ClockConfig>:
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x14>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0cc      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
 8003cf0:	4b68      	ldr	r3, [pc, #416]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d90c      	bls.n	8003d18 <HAL_RCC_ClockConfig+0x3c>
 8003cfe:	4b65      	ldr	r3, [pc, #404]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	4b63      	ldr	r3, [pc, #396]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x3c>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0b8      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x8a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x60>
 8003d30:	4b59      	ldr	r3, [pc, #356]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a58      	ldr	r2, [pc, #352]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d3a:	6093      	str	r3, [r2, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x78>
 8003d48:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4a52      	ldr	r2, [pc, #328]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d52:	6093      	str	r3, [r2, #8]
 8003d54:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	494d      	ldr	r1, [pc, #308]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d044      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x120>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xae>
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d119      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e07f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_ClockConfig+0xbe>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xce>
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e06f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
 8003daa:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e067      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4934      	ldr	r1, [pc, #208]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]
 8003dcc:	f7fe faac 	bl	8002328 <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_ClockConfig+0x10e>
 8003dd4:	f7fe faa8 	bl	8002328 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_ClockConfig+0x10e>
 8003de6:	2303      	movs	r3, #3
 8003de8:	e04f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
 8003dea:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 020c 	and.w	r2, r3, #12
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d1eb      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xf8>
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d20c      	bcs.n	8003e24 <HAL_RCC_ClockConfig+0x148>
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x148>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e032      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x166>
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4916      	ldr	r1, [pc, #88]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x186>
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	490e      	ldr	r1, [pc, #56]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
 8003e62:	f000 f821 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003e66:	4602      	mov	r2, r0
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	490a      	ldr	r1, [pc, #40]	; (8003e9c <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	5ccb      	ldrb	r3, [r1, r3]
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fa0c 	bl	80022a0 <HAL_InitTick>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023c00 	.word	0x40023c00
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	080067dc 	.word	0x080067dc
 8003ea0:	20000024 	.word	0x20000024
 8003ea4:	20000028 	.word	0x20000028

08003ea8 <HAL_RCC_GetSysClockFreq>:
 8003ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eac:	b094      	sub	sp, #80	; 0x50
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb8:	2300      	movs	r3, #0
 8003eba:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec0:	4b79      	ldr	r3, [pc, #484]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d00d      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	f200 80e1 	bhi.w	8004094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x34>
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eda:	e0db      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003edc:	4b73      	ldr	r3, [pc, #460]	; (80040ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee0:	e0db      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x1f2>
 8003ee2:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee6:	e0d8      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x1f2>
 8003ee8:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef2:	4b6d      	ldr	r3, [pc, #436]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d063      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x11e>
 8003efe:	4b6a      	ldr	r3, [pc, #424]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	099b      	lsrs	r3, r3, #6
 8003f04:	2200      	movs	r2, #0
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	633b      	str	r3, [r7, #48]	; 0x30
 8003f12:	2300      	movs	r3, #0
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
 8003f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	f04f 0000 	mov.w	r0, #0
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	0159      	lsls	r1, r3, #5
 8003f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f2c:	0150      	lsls	r0, r2, #5
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4621      	mov	r1, r4
 8003f34:	1a51      	subs	r1, r2, r1
 8003f36:	6139      	str	r1, [r7, #16]
 8003f38:	4629      	mov	r1, r5
 8003f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	018b      	lsls	r3, r1, #6
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f56:	4651      	mov	r1, sl
 8003f58:	018a      	lsls	r2, r1, #6
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f60:	4659      	mov	r1, fp
 8003f62:	eb63 0901 	sbc.w	r9, r3, r1
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7a:	4690      	mov	r8, r2
 8003f7c:	4699      	mov	r9, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	eb18 0303 	adds.w	r3, r8, r3
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	462b      	mov	r3, r5
 8003f88:	eb49 0303 	adc.w	r3, r9, r3
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	024b      	lsls	r3, r1, #9
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	024a      	lsls	r2, r1, #9
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fae:	2200      	movs	r2, #0
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fb8:	f7fc f95a 	bl	8000270 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc4:	e058      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x1d0>
 8003fc6:	4b38      	ldr	r3, [pc, #224]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
 8003fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	f04f 0000 	mov.w	r0, #0
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	0159      	lsls	r1, r3, #5
 8003fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff2:	0150      	lsls	r0, r2, #5
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ffe:	4649      	mov	r1, r9
 8004000:	eb63 0b01 	sbc.w	fp, r3, r1
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004018:	ebb2 040a 	subs.w	r4, r2, sl
 800401c:	eb63 050b 	sbc.w	r5, r3, fp
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	00eb      	lsls	r3, r5, #3
 800402a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402e:	00e2      	lsls	r2, r4, #3
 8004030:	4614      	mov	r4, r2
 8004032:	461d      	mov	r5, r3
 8004034:	4643      	mov	r3, r8
 8004036:	18e3      	adds	r3, r4, r3
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	464b      	mov	r3, r9
 800403c:	eb45 0303 	adc.w	r3, r5, r3
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800404e:	4629      	mov	r1, r5
 8004050:	028b      	lsls	r3, r1, #10
 8004052:	4621      	mov	r1, r4
 8004054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004058:	4621      	mov	r1, r4
 800405a:	028a      	lsls	r2, r1, #10
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004062:	2200      	movs	r2, #0
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	61fa      	str	r2, [r7, #28]
 8004068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800406c:	f7fc f900 	bl	8000270 <__aeabi_uldivmod>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4613      	mov	r3, r2
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	3301      	adds	r3, #1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	643b      	str	r3, [r7, #64]	; 0x40
 8004088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800408a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	64bb      	str	r3, [r7, #72]	; 0x48
 8004092:	e002      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x1f2>
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004096:	64bb      	str	r3, [r7, #72]	; 0x48
 8004098:	bf00      	nop
 800409a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409c:	4618      	mov	r0, r3
 800409e:	3750      	adds	r7, #80	; 0x50
 80040a0:	46bd      	mov	sp, r7
 80040a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	007a1200 	.word	0x007a1200

080040b4 <HAL_RCC_GetHCLKFreq>:
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000024 	.word	0x20000024

080040cc <HAL_RCC_GetPCLK1Freq>:
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	f7ff fff0 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0a9b      	lsrs	r3, r3, #10
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4903      	ldr	r1, [pc, #12]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	080067ec 	.word	0x080067ec

080040f4 <HAL_SRAM_Init>:
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_SRAM_Init+0x16>
 8004106:	2301      	movs	r3, #1
 8004108:	e038      	b.n	800417c <HAL_SRAM_Init+0x88>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_SRAM_Init+0x30>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7fd fff6 	bl	8002110 <HAL_SRAM_MspInit>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3308      	adds	r3, #8
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 f828 	bl	8004184 <FSMC_NORSRAM_Init>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	461a      	mov	r2, r3
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	f000 f88a 	bl	8004258 <FSMC_NORSRAM_Timing_Init>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6858      	ldr	r0, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	f000 f8b7 	bl	80042c4 <FSMC_NORSRAM_Extended_Timing_Init>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	6892      	ldr	r2, [r2, #8]
 800415e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	6892      	ldr	r2, [r2, #8]
 800416a:	f041 0101 	orr.w	r1, r1, #1
 800416e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800417a:	2300      	movs	r3, #0
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <FSMC_NORSRAM_Init>:
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	f023 0101 	bic.w	r1, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d102      	bne.n	80041b4 <FSMC_NORSRAM_Init+0x30>
 80041ae:	2340      	movs	r3, #64	; 0x40
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e001      	b.n	80041b8 <FSMC_NORSRAM_Init+0x34>
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	431a      	orrs	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	431a      	orrs	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	431a      	orrs	r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	431a      	orrs	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	431a      	orrs	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <FSMC_NORSRAM_Init+0xd0>)
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	43db      	mvns	r3, r3
 8004234:	ea02 0103 	and.w	r1, r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4319      	orrs	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004246:	2300      	movs	r3, #0
 8004248:	4618      	mov	r0, r3
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	0008fb7f 	.word	0x0008fb7f

08004258 <FSMC_NORSRAM_Timing_Init>:
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	431a      	orrs	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	431a      	orrs	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	3b01      	subs	r3, #1
 8004294:	051b      	lsls	r3, r3, #20
 8004296:	431a      	orrs	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	3b02      	subs	r3, #2
 800429e:	061b      	lsls	r3, r3, #24
 80042a0:	431a      	orrs	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	3201      	adds	r2, #1
 80042ac:	4319      	orrs	r1, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80042b4:	2300      	movs	r3, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <FSMC_NORSRAM_Extended_Timing_Init>:
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d8:	d11d      	bne.n	8004316 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042e2:	4b13      	ldr	r3, [pc, #76]	; (8004330 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	6811      	ldr	r1, [r2, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	6852      	ldr	r2, [r2, #4]
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	4311      	orrs	r1, r2
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	6892      	ldr	r2, [r2, #8]
 80042f6:	0212      	lsls	r2, r2, #8
 80042f8:	4311      	orrs	r1, r2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	6992      	ldr	r2, [r2, #24]
 80042fe:	4311      	orrs	r1, r2
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	68d2      	ldr	r2, [r2, #12]
 8004304:	0412      	lsls	r2, r2, #16
 8004306:	430a      	orrs	r2, r1
 8004308:	ea43 0102 	orr.w	r1, r3, r2
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004314:	e005      	b.n	8004322 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800431e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004322:	2300      	movs	r3, #0
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	cff00000 	.word	0xcff00000

08004334 <__errno>:
 8004334:	4b01      	ldr	r3, [pc, #4]	; (800433c <__errno+0x8>)
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000030 	.word	0x20000030

08004340 <__libc_init_array>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4d0d      	ldr	r5, [pc, #52]	; (8004378 <__libc_init_array+0x38>)
 8004344:	4c0d      	ldr	r4, [pc, #52]	; (800437c <__libc_init_array+0x3c>)
 8004346:	1b64      	subs	r4, r4, r5
 8004348:	10a4      	asrs	r4, r4, #2
 800434a:	2600      	movs	r6, #0
 800434c:	42a6      	cmp	r6, r4
 800434e:	d109      	bne.n	8004364 <__libc_init_array+0x24>
 8004350:	4d0b      	ldr	r5, [pc, #44]	; (8004380 <__libc_init_array+0x40>)
 8004352:	4c0c      	ldr	r4, [pc, #48]	; (8004384 <__libc_init_array+0x44>)
 8004354:	f000 fc8e 	bl	8004c74 <_init>
 8004358:	1b64      	subs	r4, r4, r5
 800435a:	10a4      	asrs	r4, r4, #2
 800435c:	2600      	movs	r6, #0
 800435e:	42a6      	cmp	r6, r4
 8004360:	d105      	bne.n	800436e <__libc_init_array+0x2e>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	f855 3b04 	ldr.w	r3, [r5], #4
 8004368:	4798      	blx	r3
 800436a:	3601      	adds	r6, #1
 800436c:	e7ee      	b.n	800434c <__libc_init_array+0xc>
 800436e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004372:	4798      	blx	r3
 8004374:	3601      	adds	r6, #1
 8004376:	e7f2      	b.n	800435e <__libc_init_array+0x1e>
 8004378:	08006830 	.word	0x08006830
 800437c:	08006830 	.word	0x08006830
 8004380:	08006830 	.word	0x08006830
 8004384:	08006834 	.word	0x08006834

08004388 <memcpy>:
 8004388:	440a      	add	r2, r1
 800438a:	4291      	cmp	r1, r2
 800438c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004390:	d100      	bne.n	8004394 <memcpy+0xc>
 8004392:	4770      	bx	lr
 8004394:	b510      	push	{r4, lr}
 8004396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800439a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800439e:	4291      	cmp	r1, r2
 80043a0:	d1f9      	bne.n	8004396 <memcpy+0xe>
 80043a2:	bd10      	pop	{r4, pc}

080043a4 <memset>:
 80043a4:	4402      	add	r2, r0
 80043a6:	4603      	mov	r3, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <siprintf>:
 80043b4:	b40e      	push	{r1, r2, r3}
 80043b6:	b500      	push	{lr}
 80043b8:	b09c      	sub	sp, #112	; 0x70
 80043ba:	ab1d      	add	r3, sp, #116	; 0x74
 80043bc:	9002      	str	r0, [sp, #8]
 80043be:	9006      	str	r0, [sp, #24]
 80043c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043c4:	4809      	ldr	r0, [pc, #36]	; (80043ec <siprintf+0x38>)
 80043c6:	9107      	str	r1, [sp, #28]
 80043c8:	9104      	str	r1, [sp, #16]
 80043ca:	4909      	ldr	r1, [pc, #36]	; (80043f0 <siprintf+0x3c>)
 80043cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80043d0:	9105      	str	r1, [sp, #20]
 80043d2:	6800      	ldr	r0, [r0, #0]
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	a902      	add	r1, sp, #8
 80043d8:	f000 f868 	bl	80044ac <_svfiprintf_r>
 80043dc:	9b02      	ldr	r3, [sp, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	b01c      	add	sp, #112	; 0x70
 80043e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e8:	b003      	add	sp, #12
 80043ea:	4770      	bx	lr
 80043ec:	20000030 	.word	0x20000030
 80043f0:	ffff0208 	.word	0xffff0208

080043f4 <__ssputs_r>:
 80043f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	688e      	ldr	r6, [r1, #8]
 80043fa:	429e      	cmp	r6, r3
 80043fc:	4682      	mov	sl, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	4690      	mov	r8, r2
 8004402:	461f      	mov	r7, r3
 8004404:	d838      	bhi.n	8004478 <__ssputs_r+0x84>
 8004406:	898a      	ldrh	r2, [r1, #12]
 8004408:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800440c:	d032      	beq.n	8004474 <__ssputs_r+0x80>
 800440e:	6825      	ldr	r5, [r4, #0]
 8004410:	6909      	ldr	r1, [r1, #16]
 8004412:	eba5 0901 	sub.w	r9, r5, r1
 8004416:	6965      	ldr	r5, [r4, #20]
 8004418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800441c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004420:	3301      	adds	r3, #1
 8004422:	444b      	add	r3, r9
 8004424:	106d      	asrs	r5, r5, #1
 8004426:	429d      	cmp	r5, r3
 8004428:	bf38      	it	cc
 800442a:	461d      	movcc	r5, r3
 800442c:	0553      	lsls	r3, r2, #21
 800442e:	d531      	bpl.n	8004494 <__ssputs_r+0xa0>
 8004430:	4629      	mov	r1, r5
 8004432:	f000 fb55 	bl	8004ae0 <_malloc_r>
 8004436:	4606      	mov	r6, r0
 8004438:	b950      	cbnz	r0, 8004450 <__ssputs_r+0x5c>
 800443a:	230c      	movs	r3, #12
 800443c:	f8ca 3000 	str.w	r3, [sl]
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004446:	81a3      	strh	r3, [r4, #12]
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	6921      	ldr	r1, [r4, #16]
 8004452:	464a      	mov	r2, r9
 8004454:	f7ff ff98 	bl	8004388 <memcpy>
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	6126      	str	r6, [r4, #16]
 8004466:	6165      	str	r5, [r4, #20]
 8004468:	444e      	add	r6, r9
 800446a:	eba5 0509 	sub.w	r5, r5, r9
 800446e:	6026      	str	r6, [r4, #0]
 8004470:	60a5      	str	r5, [r4, #8]
 8004472:	463e      	mov	r6, r7
 8004474:	42be      	cmp	r6, r7
 8004476:	d900      	bls.n	800447a <__ssputs_r+0x86>
 8004478:	463e      	mov	r6, r7
 800447a:	6820      	ldr	r0, [r4, #0]
 800447c:	4632      	mov	r2, r6
 800447e:	4641      	mov	r1, r8
 8004480:	f000 faa8 	bl	80049d4 <memmove>
 8004484:	68a3      	ldr	r3, [r4, #8]
 8004486:	1b9b      	subs	r3, r3, r6
 8004488:	60a3      	str	r3, [r4, #8]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	4433      	add	r3, r6
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	2000      	movs	r0, #0
 8004492:	e7db      	b.n	800444c <__ssputs_r+0x58>
 8004494:	462a      	mov	r2, r5
 8004496:	f000 fb97 	bl	8004bc8 <_realloc_r>
 800449a:	4606      	mov	r6, r0
 800449c:	2800      	cmp	r0, #0
 800449e:	d1e1      	bne.n	8004464 <__ssputs_r+0x70>
 80044a0:	6921      	ldr	r1, [r4, #16]
 80044a2:	4650      	mov	r0, sl
 80044a4:	f000 fab0 	bl	8004a08 <_free_r>
 80044a8:	e7c7      	b.n	800443a <__ssputs_r+0x46>
	...

080044ac <_svfiprintf_r>:
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	4698      	mov	r8, r3
 80044b2:	898b      	ldrh	r3, [r1, #12]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	b09d      	sub	sp, #116	; 0x74
 80044b8:	4607      	mov	r7, r0
 80044ba:	460d      	mov	r5, r1
 80044bc:	4614      	mov	r4, r2
 80044be:	d50e      	bpl.n	80044de <_svfiprintf_r+0x32>
 80044c0:	690b      	ldr	r3, [r1, #16]
 80044c2:	b963      	cbnz	r3, 80044de <_svfiprintf_r+0x32>
 80044c4:	2140      	movs	r1, #64	; 0x40
 80044c6:	f000 fb0b 	bl	8004ae0 <_malloc_r>
 80044ca:	6028      	str	r0, [r5, #0]
 80044cc:	6128      	str	r0, [r5, #16]
 80044ce:	b920      	cbnz	r0, 80044da <_svfiprintf_r+0x2e>
 80044d0:	230c      	movs	r3, #12
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	e0d1      	b.n	800467e <_svfiprintf_r+0x1d2>
 80044da:	2340      	movs	r3, #64	; 0x40
 80044dc:	616b      	str	r3, [r5, #20]
 80044de:	2300      	movs	r3, #0
 80044e0:	9309      	str	r3, [sp, #36]	; 0x24
 80044e2:	2320      	movs	r3, #32
 80044e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ec:	2330      	movs	r3, #48	; 0x30
 80044ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004698 <_svfiprintf_r+0x1ec>
 80044f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044f6:	f04f 0901 	mov.w	r9, #1
 80044fa:	4623      	mov	r3, r4
 80044fc:	469a      	mov	sl, r3
 80044fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004502:	b10a      	cbz	r2, 8004508 <_svfiprintf_r+0x5c>
 8004504:	2a25      	cmp	r2, #37	; 0x25
 8004506:	d1f9      	bne.n	80044fc <_svfiprintf_r+0x50>
 8004508:	ebba 0b04 	subs.w	fp, sl, r4
 800450c:	d00b      	beq.n	8004526 <_svfiprintf_r+0x7a>
 800450e:	465b      	mov	r3, fp
 8004510:	4622      	mov	r2, r4
 8004512:	4629      	mov	r1, r5
 8004514:	4638      	mov	r0, r7
 8004516:	f7ff ff6d 	bl	80043f4 <__ssputs_r>
 800451a:	3001      	adds	r0, #1
 800451c:	f000 80aa 	beq.w	8004674 <_svfiprintf_r+0x1c8>
 8004520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004522:	445a      	add	r2, fp
 8004524:	9209      	str	r2, [sp, #36]	; 0x24
 8004526:	f89a 3000 	ldrb.w	r3, [sl]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a2 	beq.w	8004674 <_svfiprintf_r+0x1c8>
 8004530:	2300      	movs	r3, #0
 8004532:	f04f 32ff 	mov.w	r2, #4294967295
 8004536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800453a:	f10a 0a01 	add.w	sl, sl, #1
 800453e:	9304      	str	r3, [sp, #16]
 8004540:	9307      	str	r3, [sp, #28]
 8004542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004546:	931a      	str	r3, [sp, #104]	; 0x68
 8004548:	4654      	mov	r4, sl
 800454a:	2205      	movs	r2, #5
 800454c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004550:	4851      	ldr	r0, [pc, #324]	; (8004698 <_svfiprintf_r+0x1ec>)
 8004552:	f7fb fe3d 	bl	80001d0 <memchr>
 8004556:	9a04      	ldr	r2, [sp, #16]
 8004558:	b9d8      	cbnz	r0, 8004592 <_svfiprintf_r+0xe6>
 800455a:	06d0      	lsls	r0, r2, #27
 800455c:	bf44      	itt	mi
 800455e:	2320      	movmi	r3, #32
 8004560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004564:	0711      	lsls	r1, r2, #28
 8004566:	bf44      	itt	mi
 8004568:	232b      	movmi	r3, #43	; 0x2b
 800456a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800456e:	f89a 3000 	ldrb.w	r3, [sl]
 8004572:	2b2a      	cmp	r3, #42	; 0x2a
 8004574:	d015      	beq.n	80045a2 <_svfiprintf_r+0xf6>
 8004576:	9a07      	ldr	r2, [sp, #28]
 8004578:	4654      	mov	r4, sl
 800457a:	2000      	movs	r0, #0
 800457c:	f04f 0c0a 	mov.w	ip, #10
 8004580:	4621      	mov	r1, r4
 8004582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004586:	3b30      	subs	r3, #48	; 0x30
 8004588:	2b09      	cmp	r3, #9
 800458a:	d94e      	bls.n	800462a <_svfiprintf_r+0x17e>
 800458c:	b1b0      	cbz	r0, 80045bc <_svfiprintf_r+0x110>
 800458e:	9207      	str	r2, [sp, #28]
 8004590:	e014      	b.n	80045bc <_svfiprintf_r+0x110>
 8004592:	eba0 0308 	sub.w	r3, r0, r8
 8004596:	fa09 f303 	lsl.w	r3, r9, r3
 800459a:	4313      	orrs	r3, r2
 800459c:	9304      	str	r3, [sp, #16]
 800459e:	46a2      	mov	sl, r4
 80045a0:	e7d2      	b.n	8004548 <_svfiprintf_r+0x9c>
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	1d19      	adds	r1, r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	9103      	str	r1, [sp, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfbb      	ittet	lt
 80045ae:	425b      	neglt	r3, r3
 80045b0:	f042 0202 	orrlt.w	r2, r2, #2
 80045b4:	9307      	strge	r3, [sp, #28]
 80045b6:	9307      	strlt	r3, [sp, #28]
 80045b8:	bfb8      	it	lt
 80045ba:	9204      	strlt	r2, [sp, #16]
 80045bc:	7823      	ldrb	r3, [r4, #0]
 80045be:	2b2e      	cmp	r3, #46	; 0x2e
 80045c0:	d10c      	bne.n	80045dc <_svfiprintf_r+0x130>
 80045c2:	7863      	ldrb	r3, [r4, #1]
 80045c4:	2b2a      	cmp	r3, #42	; 0x2a
 80045c6:	d135      	bne.n	8004634 <_svfiprintf_r+0x188>
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	9203      	str	r2, [sp, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfb8      	it	lt
 80045d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80045d8:	3402      	adds	r4, #2
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046a8 <_svfiprintf_r+0x1fc>
 80045e0:	7821      	ldrb	r1, [r4, #0]
 80045e2:	2203      	movs	r2, #3
 80045e4:	4650      	mov	r0, sl
 80045e6:	f7fb fdf3 	bl	80001d0 <memchr>
 80045ea:	b140      	cbz	r0, 80045fe <_svfiprintf_r+0x152>
 80045ec:	2340      	movs	r3, #64	; 0x40
 80045ee:	eba0 000a 	sub.w	r0, r0, sl
 80045f2:	fa03 f000 	lsl.w	r0, r3, r0
 80045f6:	9b04      	ldr	r3, [sp, #16]
 80045f8:	4303      	orrs	r3, r0
 80045fa:	3401      	adds	r4, #1
 80045fc:	9304      	str	r3, [sp, #16]
 80045fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004602:	4826      	ldr	r0, [pc, #152]	; (800469c <_svfiprintf_r+0x1f0>)
 8004604:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004608:	2206      	movs	r2, #6
 800460a:	f7fb fde1 	bl	80001d0 <memchr>
 800460e:	2800      	cmp	r0, #0
 8004610:	d038      	beq.n	8004684 <_svfiprintf_r+0x1d8>
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <_svfiprintf_r+0x1f4>)
 8004614:	bb1b      	cbnz	r3, 800465e <_svfiprintf_r+0x1b2>
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	3307      	adds	r3, #7
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	3308      	adds	r3, #8
 8004620:	9303      	str	r3, [sp, #12]
 8004622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004624:	4433      	add	r3, r6
 8004626:	9309      	str	r3, [sp, #36]	; 0x24
 8004628:	e767      	b.n	80044fa <_svfiprintf_r+0x4e>
 800462a:	fb0c 3202 	mla	r2, ip, r2, r3
 800462e:	460c      	mov	r4, r1
 8004630:	2001      	movs	r0, #1
 8004632:	e7a5      	b.n	8004580 <_svfiprintf_r+0xd4>
 8004634:	2300      	movs	r3, #0
 8004636:	3401      	adds	r4, #1
 8004638:	9305      	str	r3, [sp, #20]
 800463a:	4619      	mov	r1, r3
 800463c:	f04f 0c0a 	mov.w	ip, #10
 8004640:	4620      	mov	r0, r4
 8004642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004646:	3a30      	subs	r2, #48	; 0x30
 8004648:	2a09      	cmp	r2, #9
 800464a:	d903      	bls.n	8004654 <_svfiprintf_r+0x1a8>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0c5      	beq.n	80045dc <_svfiprintf_r+0x130>
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	e7c3      	b.n	80045dc <_svfiprintf_r+0x130>
 8004654:	fb0c 2101 	mla	r1, ip, r1, r2
 8004658:	4604      	mov	r4, r0
 800465a:	2301      	movs	r3, #1
 800465c:	e7f0      	b.n	8004640 <_svfiprintf_r+0x194>
 800465e:	ab03      	add	r3, sp, #12
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	462a      	mov	r2, r5
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <_svfiprintf_r+0x1f8>)
 8004666:	a904      	add	r1, sp, #16
 8004668:	4638      	mov	r0, r7
 800466a:	f3af 8000 	nop.w
 800466e:	1c42      	adds	r2, r0, #1
 8004670:	4606      	mov	r6, r0
 8004672:	d1d6      	bne.n	8004622 <_svfiprintf_r+0x176>
 8004674:	89ab      	ldrh	r3, [r5, #12]
 8004676:	065b      	lsls	r3, r3, #25
 8004678:	f53f af2c 	bmi.w	80044d4 <_svfiprintf_r+0x28>
 800467c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800467e:	b01d      	add	sp, #116	; 0x74
 8004680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004684:	ab03      	add	r3, sp, #12
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	462a      	mov	r2, r5
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <_svfiprintf_r+0x1f8>)
 800468c:	a904      	add	r1, sp, #16
 800468e:	4638      	mov	r0, r7
 8004690:	f000 f87a 	bl	8004788 <_printf_i>
 8004694:	e7eb      	b.n	800466e <_svfiprintf_r+0x1c2>
 8004696:	bf00      	nop
 8004698:	080067f4 	.word	0x080067f4
 800469c:	080067fe 	.word	0x080067fe
 80046a0:	00000000 	.word	0x00000000
 80046a4:	080043f5 	.word	0x080043f5
 80046a8:	080067fa 	.word	0x080067fa

080046ac <_printf_common>:
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	4616      	mov	r6, r2
 80046b2:	4699      	mov	r9, r3
 80046b4:	688a      	ldr	r2, [r1, #8]
 80046b6:	690b      	ldr	r3, [r1, #16]
 80046b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046bc:	4293      	cmp	r3, r2
 80046be:	bfb8      	it	lt
 80046c0:	4613      	movlt	r3, r2
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046c8:	4607      	mov	r7, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	b10a      	cbz	r2, 80046d2 <_printf_common+0x26>
 80046ce:	3301      	adds	r3, #1
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	6833      	ldrmi	r3, [r6, #0]
 80046da:	3302      	addmi	r3, #2
 80046dc:	6033      	strmi	r3, [r6, #0]
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	f015 0506 	ands.w	r5, r5, #6
 80046e4:	d106      	bne.n	80046f4 <_printf_common+0x48>
 80046e6:	f104 0a19 	add.w	sl, r4, #25
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	6832      	ldr	r2, [r6, #0]
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dc26      	bgt.n	8004742 <_printf_common+0x96>
 80046f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046f8:	1e13      	subs	r3, r2, #0
 80046fa:	6822      	ldr	r2, [r4, #0]
 80046fc:	bf18      	it	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	0692      	lsls	r2, r2, #26
 8004702:	d42b      	bmi.n	800475c <_printf_common+0xb0>
 8004704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004708:	4649      	mov	r1, r9
 800470a:	4638      	mov	r0, r7
 800470c:	47c0      	blx	r8
 800470e:	3001      	adds	r0, #1
 8004710:	d01e      	beq.n	8004750 <_printf_common+0xa4>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	68e5      	ldr	r5, [r4, #12]
 8004716:	6832      	ldr	r2, [r6, #0]
 8004718:	f003 0306 	and.w	r3, r3, #6
 800471c:	2b04      	cmp	r3, #4
 800471e:	bf08      	it	eq
 8004720:	1aad      	subeq	r5, r5, r2
 8004722:	68a3      	ldr	r3, [r4, #8]
 8004724:	6922      	ldr	r2, [r4, #16]
 8004726:	bf0c      	ite	eq
 8004728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800472c:	2500      	movne	r5, #0
 800472e:	4293      	cmp	r3, r2
 8004730:	bfc4      	itt	gt
 8004732:	1a9b      	subgt	r3, r3, r2
 8004734:	18ed      	addgt	r5, r5, r3
 8004736:	2600      	movs	r6, #0
 8004738:	341a      	adds	r4, #26
 800473a:	42b5      	cmp	r5, r6
 800473c:	d11a      	bne.n	8004774 <_printf_common+0xc8>
 800473e:	2000      	movs	r0, #0
 8004740:	e008      	b.n	8004754 <_printf_common+0xa8>
 8004742:	2301      	movs	r3, #1
 8004744:	4652      	mov	r2, sl
 8004746:	4649      	mov	r1, r9
 8004748:	4638      	mov	r0, r7
 800474a:	47c0      	blx	r8
 800474c:	3001      	adds	r0, #1
 800474e:	d103      	bne.n	8004758 <_printf_common+0xac>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004758:	3501      	adds	r5, #1
 800475a:	e7c6      	b.n	80046ea <_printf_common+0x3e>
 800475c:	18e1      	adds	r1, r4, r3
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	2030      	movs	r0, #48	; 0x30
 8004762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004766:	4422      	add	r2, r4
 8004768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800476c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004770:	3302      	adds	r3, #2
 8004772:	e7c7      	b.n	8004704 <_printf_common+0x58>
 8004774:	2301      	movs	r3, #1
 8004776:	4622      	mov	r2, r4
 8004778:	4649      	mov	r1, r9
 800477a:	4638      	mov	r0, r7
 800477c:	47c0      	blx	r8
 800477e:	3001      	adds	r0, #1
 8004780:	d0e6      	beq.n	8004750 <_printf_common+0xa4>
 8004782:	3601      	adds	r6, #1
 8004784:	e7d9      	b.n	800473a <_printf_common+0x8e>
	...

08004788 <_printf_i>:
 8004788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	7e0f      	ldrb	r7, [r1, #24]
 800478e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004790:	2f78      	cmp	r7, #120	; 0x78
 8004792:	4691      	mov	r9, r2
 8004794:	4680      	mov	r8, r0
 8004796:	460c      	mov	r4, r1
 8004798:	469a      	mov	sl, r3
 800479a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800479e:	d807      	bhi.n	80047b0 <_printf_i+0x28>
 80047a0:	2f62      	cmp	r7, #98	; 0x62
 80047a2:	d80a      	bhi.n	80047ba <_printf_i+0x32>
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	f000 80d8 	beq.w	800495a <_printf_i+0x1d2>
 80047aa:	2f58      	cmp	r7, #88	; 0x58
 80047ac:	f000 80a3 	beq.w	80048f6 <_printf_i+0x16e>
 80047b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047b8:	e03a      	b.n	8004830 <_printf_i+0xa8>
 80047ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047be:	2b15      	cmp	r3, #21
 80047c0:	d8f6      	bhi.n	80047b0 <_printf_i+0x28>
 80047c2:	a101      	add	r1, pc, #4	; (adr r1, 80047c8 <_printf_i+0x40>)
 80047c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004835 	.word	0x08004835
 80047d0:	080047b1 	.word	0x080047b1
 80047d4:	080047b1 	.word	0x080047b1
 80047d8:	080047b1 	.word	0x080047b1
 80047dc:	080047b1 	.word	0x080047b1
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080047b1 	.word	0x080047b1
 80047e8:	080047b1 	.word	0x080047b1
 80047ec:	080047b1 	.word	0x080047b1
 80047f0:	080047b1 	.word	0x080047b1
 80047f4:	08004941 	.word	0x08004941
 80047f8:	08004865 	.word	0x08004865
 80047fc:	08004923 	.word	0x08004923
 8004800:	080047b1 	.word	0x080047b1
 8004804:	080047b1 	.word	0x080047b1
 8004808:	08004963 	.word	0x08004963
 800480c:	080047b1 	.word	0x080047b1
 8004810:	08004865 	.word	0x08004865
 8004814:	080047b1 	.word	0x080047b1
 8004818:	080047b1 	.word	0x080047b1
 800481c:	0800492b 	.word	0x0800492b
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	1d1a      	adds	r2, r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800482c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004830:	2301      	movs	r3, #1
 8004832:	e0a3      	b.n	800497c <_printf_i+0x1f4>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	6829      	ldr	r1, [r5, #0]
 8004838:	0606      	lsls	r6, r0, #24
 800483a:	f101 0304 	add.w	r3, r1, #4
 800483e:	d50a      	bpl.n	8004856 <_printf_i+0xce>
 8004840:	680e      	ldr	r6, [r1, #0]
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	2e00      	cmp	r6, #0
 8004846:	da03      	bge.n	8004850 <_printf_i+0xc8>
 8004848:	232d      	movs	r3, #45	; 0x2d
 800484a:	4276      	negs	r6, r6
 800484c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004850:	485e      	ldr	r0, [pc, #376]	; (80049cc <_printf_i+0x244>)
 8004852:	230a      	movs	r3, #10
 8004854:	e019      	b.n	800488a <_printf_i+0x102>
 8004856:	680e      	ldr	r6, [r1, #0]
 8004858:	602b      	str	r3, [r5, #0]
 800485a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800485e:	bf18      	it	ne
 8004860:	b236      	sxthne	r6, r6
 8004862:	e7ef      	b.n	8004844 <_printf_i+0xbc>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	6820      	ldr	r0, [r4, #0]
 8004868:	1d19      	adds	r1, r3, #4
 800486a:	6029      	str	r1, [r5, #0]
 800486c:	0601      	lsls	r1, r0, #24
 800486e:	d501      	bpl.n	8004874 <_printf_i+0xec>
 8004870:	681e      	ldr	r6, [r3, #0]
 8004872:	e002      	b.n	800487a <_printf_i+0xf2>
 8004874:	0646      	lsls	r6, r0, #25
 8004876:	d5fb      	bpl.n	8004870 <_printf_i+0xe8>
 8004878:	881e      	ldrh	r6, [r3, #0]
 800487a:	4854      	ldr	r0, [pc, #336]	; (80049cc <_printf_i+0x244>)
 800487c:	2f6f      	cmp	r7, #111	; 0x6f
 800487e:	bf0c      	ite	eq
 8004880:	2308      	moveq	r3, #8
 8004882:	230a      	movne	r3, #10
 8004884:	2100      	movs	r1, #0
 8004886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800488a:	6865      	ldr	r5, [r4, #4]
 800488c:	60a5      	str	r5, [r4, #8]
 800488e:	2d00      	cmp	r5, #0
 8004890:	bfa2      	ittt	ge
 8004892:	6821      	ldrge	r1, [r4, #0]
 8004894:	f021 0104 	bicge.w	r1, r1, #4
 8004898:	6021      	strge	r1, [r4, #0]
 800489a:	b90e      	cbnz	r6, 80048a0 <_printf_i+0x118>
 800489c:	2d00      	cmp	r5, #0
 800489e:	d04d      	beq.n	800493c <_printf_i+0x1b4>
 80048a0:	4615      	mov	r5, r2
 80048a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048a6:	fb03 6711 	mls	r7, r3, r1, r6
 80048aa:	5dc7      	ldrb	r7, [r0, r7]
 80048ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048b0:	4637      	mov	r7, r6
 80048b2:	42bb      	cmp	r3, r7
 80048b4:	460e      	mov	r6, r1
 80048b6:	d9f4      	bls.n	80048a2 <_printf_i+0x11a>
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d10b      	bne.n	80048d4 <_printf_i+0x14c>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	07de      	lsls	r6, r3, #31
 80048c0:	d508      	bpl.n	80048d4 <_printf_i+0x14c>
 80048c2:	6923      	ldr	r3, [r4, #16]
 80048c4:	6861      	ldr	r1, [r4, #4]
 80048c6:	4299      	cmp	r1, r3
 80048c8:	bfde      	ittt	le
 80048ca:	2330      	movle	r3, #48	; 0x30
 80048cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048d4:	1b52      	subs	r2, r2, r5
 80048d6:	6122      	str	r2, [r4, #16]
 80048d8:	f8cd a000 	str.w	sl, [sp]
 80048dc:	464b      	mov	r3, r9
 80048de:	aa03      	add	r2, sp, #12
 80048e0:	4621      	mov	r1, r4
 80048e2:	4640      	mov	r0, r8
 80048e4:	f7ff fee2 	bl	80046ac <_printf_common>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d14c      	bne.n	8004986 <_printf_i+0x1fe>
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	b004      	add	sp, #16
 80048f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f6:	4835      	ldr	r0, [pc, #212]	; (80049cc <_printf_i+0x244>)
 80048f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048fc:	6829      	ldr	r1, [r5, #0]
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f851 6b04 	ldr.w	r6, [r1], #4
 8004904:	6029      	str	r1, [r5, #0]
 8004906:	061d      	lsls	r5, r3, #24
 8004908:	d514      	bpl.n	8004934 <_printf_i+0x1ac>
 800490a:	07df      	lsls	r7, r3, #31
 800490c:	bf44      	itt	mi
 800490e:	f043 0320 	orrmi.w	r3, r3, #32
 8004912:	6023      	strmi	r3, [r4, #0]
 8004914:	b91e      	cbnz	r6, 800491e <_printf_i+0x196>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f023 0320 	bic.w	r3, r3, #32
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	2310      	movs	r3, #16
 8004920:	e7b0      	b.n	8004884 <_printf_i+0xfc>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f043 0320 	orr.w	r3, r3, #32
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	2378      	movs	r3, #120	; 0x78
 800492c:	4828      	ldr	r0, [pc, #160]	; (80049d0 <_printf_i+0x248>)
 800492e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004932:	e7e3      	b.n	80048fc <_printf_i+0x174>
 8004934:	0659      	lsls	r1, r3, #25
 8004936:	bf48      	it	mi
 8004938:	b2b6      	uxthmi	r6, r6
 800493a:	e7e6      	b.n	800490a <_printf_i+0x182>
 800493c:	4615      	mov	r5, r2
 800493e:	e7bb      	b.n	80048b8 <_printf_i+0x130>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	6826      	ldr	r6, [r4, #0]
 8004944:	6961      	ldr	r1, [r4, #20]
 8004946:	1d18      	adds	r0, r3, #4
 8004948:	6028      	str	r0, [r5, #0]
 800494a:	0635      	lsls	r5, r6, #24
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	d501      	bpl.n	8004954 <_printf_i+0x1cc>
 8004950:	6019      	str	r1, [r3, #0]
 8004952:	e002      	b.n	800495a <_printf_i+0x1d2>
 8004954:	0670      	lsls	r0, r6, #25
 8004956:	d5fb      	bpl.n	8004950 <_printf_i+0x1c8>
 8004958:	8019      	strh	r1, [r3, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	6123      	str	r3, [r4, #16]
 800495e:	4615      	mov	r5, r2
 8004960:	e7ba      	b.n	80048d8 <_printf_i+0x150>
 8004962:	682b      	ldr	r3, [r5, #0]
 8004964:	1d1a      	adds	r2, r3, #4
 8004966:	602a      	str	r2, [r5, #0]
 8004968:	681d      	ldr	r5, [r3, #0]
 800496a:	6862      	ldr	r2, [r4, #4]
 800496c:	2100      	movs	r1, #0
 800496e:	4628      	mov	r0, r5
 8004970:	f7fb fc2e 	bl	80001d0 <memchr>
 8004974:	b108      	cbz	r0, 800497a <_printf_i+0x1f2>
 8004976:	1b40      	subs	r0, r0, r5
 8004978:	6060      	str	r0, [r4, #4]
 800497a:	6863      	ldr	r3, [r4, #4]
 800497c:	6123      	str	r3, [r4, #16]
 800497e:	2300      	movs	r3, #0
 8004980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004984:	e7a8      	b.n	80048d8 <_printf_i+0x150>
 8004986:	6923      	ldr	r3, [r4, #16]
 8004988:	462a      	mov	r2, r5
 800498a:	4649      	mov	r1, r9
 800498c:	4640      	mov	r0, r8
 800498e:	47d0      	blx	sl
 8004990:	3001      	adds	r0, #1
 8004992:	d0ab      	beq.n	80048ec <_printf_i+0x164>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	079b      	lsls	r3, r3, #30
 8004998:	d413      	bmi.n	80049c2 <_printf_i+0x23a>
 800499a:	68e0      	ldr	r0, [r4, #12]
 800499c:	9b03      	ldr	r3, [sp, #12]
 800499e:	4298      	cmp	r0, r3
 80049a0:	bfb8      	it	lt
 80049a2:	4618      	movlt	r0, r3
 80049a4:	e7a4      	b.n	80048f0 <_printf_i+0x168>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4632      	mov	r2, r6
 80049aa:	4649      	mov	r1, r9
 80049ac:	4640      	mov	r0, r8
 80049ae:	47d0      	blx	sl
 80049b0:	3001      	adds	r0, #1
 80049b2:	d09b      	beq.n	80048ec <_printf_i+0x164>
 80049b4:	3501      	adds	r5, #1
 80049b6:	68e3      	ldr	r3, [r4, #12]
 80049b8:	9903      	ldr	r1, [sp, #12]
 80049ba:	1a5b      	subs	r3, r3, r1
 80049bc:	42ab      	cmp	r3, r5
 80049be:	dcf2      	bgt.n	80049a6 <_printf_i+0x21e>
 80049c0:	e7eb      	b.n	800499a <_printf_i+0x212>
 80049c2:	2500      	movs	r5, #0
 80049c4:	f104 0619 	add.w	r6, r4, #25
 80049c8:	e7f5      	b.n	80049b6 <_printf_i+0x22e>
 80049ca:	bf00      	nop
 80049cc:	08006805 	.word	0x08006805
 80049d0:	08006816 	.word	0x08006816

080049d4 <memmove>:
 80049d4:	4288      	cmp	r0, r1
 80049d6:	b510      	push	{r4, lr}
 80049d8:	eb01 0402 	add.w	r4, r1, r2
 80049dc:	d902      	bls.n	80049e4 <memmove+0x10>
 80049de:	4284      	cmp	r4, r0
 80049e0:	4623      	mov	r3, r4
 80049e2:	d807      	bhi.n	80049f4 <memmove+0x20>
 80049e4:	1e43      	subs	r3, r0, #1
 80049e6:	42a1      	cmp	r1, r4
 80049e8:	d008      	beq.n	80049fc <memmove+0x28>
 80049ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049f2:	e7f8      	b.n	80049e6 <memmove+0x12>
 80049f4:	4402      	add	r2, r0
 80049f6:	4601      	mov	r1, r0
 80049f8:	428a      	cmp	r2, r1
 80049fa:	d100      	bne.n	80049fe <memmove+0x2a>
 80049fc:	bd10      	pop	{r4, pc}
 80049fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a06:	e7f7      	b.n	80049f8 <memmove+0x24>

08004a08 <_free_r>:
 8004a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	d044      	beq.n	8004a98 <_free_r+0x90>
 8004a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a12:	9001      	str	r0, [sp, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f1a1 0404 	sub.w	r4, r1, #4
 8004a1a:	bfb8      	it	lt
 8004a1c:	18e4      	addlt	r4, r4, r3
 8004a1e:	f000 f913 	bl	8004c48 <__malloc_lock>
 8004a22:	4a1e      	ldr	r2, [pc, #120]	; (8004a9c <_free_r+0x94>)
 8004a24:	9801      	ldr	r0, [sp, #4]
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	b933      	cbnz	r3, 8004a38 <_free_r+0x30>
 8004a2a:	6063      	str	r3, [r4, #4]
 8004a2c:	6014      	str	r4, [r2, #0]
 8004a2e:	b003      	add	sp, #12
 8004a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a34:	f000 b90e 	b.w	8004c54 <__malloc_unlock>
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d908      	bls.n	8004a4e <_free_r+0x46>
 8004a3c:	6825      	ldr	r5, [r4, #0]
 8004a3e:	1961      	adds	r1, r4, r5
 8004a40:	428b      	cmp	r3, r1
 8004a42:	bf01      	itttt	eq
 8004a44:	6819      	ldreq	r1, [r3, #0]
 8004a46:	685b      	ldreq	r3, [r3, #4]
 8004a48:	1949      	addeq	r1, r1, r5
 8004a4a:	6021      	streq	r1, [r4, #0]
 8004a4c:	e7ed      	b.n	8004a2a <_free_r+0x22>
 8004a4e:	461a      	mov	r2, r3
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b10b      	cbz	r3, 8004a58 <_free_r+0x50>
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d9fa      	bls.n	8004a4e <_free_r+0x46>
 8004a58:	6811      	ldr	r1, [r2, #0]
 8004a5a:	1855      	adds	r5, r2, r1
 8004a5c:	42a5      	cmp	r5, r4
 8004a5e:	d10b      	bne.n	8004a78 <_free_r+0x70>
 8004a60:	6824      	ldr	r4, [r4, #0]
 8004a62:	4421      	add	r1, r4
 8004a64:	1854      	adds	r4, r2, r1
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	d1e0      	bne.n	8004a2e <_free_r+0x26>
 8004a6c:	681c      	ldr	r4, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	6053      	str	r3, [r2, #4]
 8004a72:	4421      	add	r1, r4
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	e7da      	b.n	8004a2e <_free_r+0x26>
 8004a78:	d902      	bls.n	8004a80 <_free_r+0x78>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	6003      	str	r3, [r0, #0]
 8004a7e:	e7d6      	b.n	8004a2e <_free_r+0x26>
 8004a80:	6825      	ldr	r5, [r4, #0]
 8004a82:	1961      	adds	r1, r4, r5
 8004a84:	428b      	cmp	r3, r1
 8004a86:	bf04      	itt	eq
 8004a88:	6819      	ldreq	r1, [r3, #0]
 8004a8a:	685b      	ldreq	r3, [r3, #4]
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	bf04      	itt	eq
 8004a90:	1949      	addeq	r1, r1, r5
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	6054      	str	r4, [r2, #4]
 8004a96:	e7ca      	b.n	8004a2e <_free_r+0x26>
 8004a98:	b003      	add	sp, #12
 8004a9a:	bd30      	pop	{r4, r5, pc}
 8004a9c:	20000324 	.word	0x20000324

08004aa0 <sbrk_aligned>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4e0e      	ldr	r6, [pc, #56]	; (8004adc <sbrk_aligned+0x3c>)
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	6831      	ldr	r1, [r6, #0]
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	b911      	cbnz	r1, 8004ab2 <sbrk_aligned+0x12>
 8004aac:	f000 f8bc 	bl	8004c28 <_sbrk_r>
 8004ab0:	6030      	str	r0, [r6, #0]
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f8b7 	bl	8004c28 <_sbrk_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d00a      	beq.n	8004ad4 <sbrk_aligned+0x34>
 8004abe:	1cc4      	adds	r4, r0, #3
 8004ac0:	f024 0403 	bic.w	r4, r4, #3
 8004ac4:	42a0      	cmp	r0, r4
 8004ac6:	d007      	beq.n	8004ad8 <sbrk_aligned+0x38>
 8004ac8:	1a21      	subs	r1, r4, r0
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 f8ac 	bl	8004c28 <_sbrk_r>
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d101      	bne.n	8004ad8 <sbrk_aligned+0x38>
 8004ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ad8:	4620      	mov	r0, r4
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	20000328 	.word	0x20000328

08004ae0 <_malloc_r>:
 8004ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae4:	1ccd      	adds	r5, r1, #3
 8004ae6:	f025 0503 	bic.w	r5, r5, #3
 8004aea:	3508      	adds	r5, #8
 8004aec:	2d0c      	cmp	r5, #12
 8004aee:	bf38      	it	cc
 8004af0:	250c      	movcc	r5, #12
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	4607      	mov	r7, r0
 8004af6:	db01      	blt.n	8004afc <_malloc_r+0x1c>
 8004af8:	42a9      	cmp	r1, r5
 8004afa:	d905      	bls.n	8004b08 <_malloc_r+0x28>
 8004afc:	230c      	movs	r3, #12
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	2600      	movs	r6, #0
 8004b02:	4630      	mov	r0, r6
 8004b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b08:	4e2e      	ldr	r6, [pc, #184]	; (8004bc4 <_malloc_r+0xe4>)
 8004b0a:	f000 f89d 	bl	8004c48 <__malloc_lock>
 8004b0e:	6833      	ldr	r3, [r6, #0]
 8004b10:	461c      	mov	r4, r3
 8004b12:	bb34      	cbnz	r4, 8004b62 <_malloc_r+0x82>
 8004b14:	4629      	mov	r1, r5
 8004b16:	4638      	mov	r0, r7
 8004b18:	f7ff ffc2 	bl	8004aa0 <sbrk_aligned>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	4604      	mov	r4, r0
 8004b20:	d14d      	bne.n	8004bbe <_malloc_r+0xde>
 8004b22:	6834      	ldr	r4, [r6, #0]
 8004b24:	4626      	mov	r6, r4
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	d140      	bne.n	8004bac <_malloc_r+0xcc>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	4638      	mov	r0, r7
 8004b30:	eb04 0803 	add.w	r8, r4, r3
 8004b34:	f000 f878 	bl	8004c28 <_sbrk_r>
 8004b38:	4580      	cmp	r8, r0
 8004b3a:	d13a      	bne.n	8004bb2 <_malloc_r+0xd2>
 8004b3c:	6821      	ldr	r1, [r4, #0]
 8004b3e:	3503      	adds	r5, #3
 8004b40:	1a6d      	subs	r5, r5, r1
 8004b42:	f025 0503 	bic.w	r5, r5, #3
 8004b46:	3508      	adds	r5, #8
 8004b48:	2d0c      	cmp	r5, #12
 8004b4a:	bf38      	it	cc
 8004b4c:	250c      	movcc	r5, #12
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4638      	mov	r0, r7
 8004b52:	f7ff ffa5 	bl	8004aa0 <sbrk_aligned>
 8004b56:	3001      	adds	r0, #1
 8004b58:	d02b      	beq.n	8004bb2 <_malloc_r+0xd2>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	442b      	add	r3, r5
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	e00e      	b.n	8004b80 <_malloc_r+0xa0>
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	1b52      	subs	r2, r2, r5
 8004b66:	d41e      	bmi.n	8004ba6 <_malloc_r+0xc6>
 8004b68:	2a0b      	cmp	r2, #11
 8004b6a:	d916      	bls.n	8004b9a <_malloc_r+0xba>
 8004b6c:	1961      	adds	r1, r4, r5
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	6025      	str	r5, [r4, #0]
 8004b72:	bf18      	it	ne
 8004b74:	6059      	strne	r1, [r3, #4]
 8004b76:	6863      	ldr	r3, [r4, #4]
 8004b78:	bf08      	it	eq
 8004b7a:	6031      	streq	r1, [r6, #0]
 8004b7c:	5162      	str	r2, [r4, r5]
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	4638      	mov	r0, r7
 8004b82:	f104 060b 	add.w	r6, r4, #11
 8004b86:	f000 f865 	bl	8004c54 <__malloc_unlock>
 8004b8a:	f026 0607 	bic.w	r6, r6, #7
 8004b8e:	1d23      	adds	r3, r4, #4
 8004b90:	1af2      	subs	r2, r6, r3
 8004b92:	d0b6      	beq.n	8004b02 <_malloc_r+0x22>
 8004b94:	1b9b      	subs	r3, r3, r6
 8004b96:	50a3      	str	r3, [r4, r2]
 8004b98:	e7b3      	b.n	8004b02 <_malloc_r+0x22>
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	bf0c      	ite	eq
 8004ba0:	6032      	streq	r2, [r6, #0]
 8004ba2:	605a      	strne	r2, [r3, #4]
 8004ba4:	e7ec      	b.n	8004b80 <_malloc_r+0xa0>
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	6864      	ldr	r4, [r4, #4]
 8004baa:	e7b2      	b.n	8004b12 <_malloc_r+0x32>
 8004bac:	4634      	mov	r4, r6
 8004bae:	6876      	ldr	r6, [r6, #4]
 8004bb0:	e7b9      	b.n	8004b26 <_malloc_r+0x46>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f000 f84c 	bl	8004c54 <__malloc_unlock>
 8004bbc:	e7a1      	b.n	8004b02 <_malloc_r+0x22>
 8004bbe:	6025      	str	r5, [r4, #0]
 8004bc0:	e7de      	b.n	8004b80 <_malloc_r+0xa0>
 8004bc2:	bf00      	nop
 8004bc4:	20000324 	.word	0x20000324

08004bc8 <_realloc_r>:
 8004bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bcc:	4680      	mov	r8, r0
 8004bce:	4614      	mov	r4, r2
 8004bd0:	460e      	mov	r6, r1
 8004bd2:	b921      	cbnz	r1, 8004bde <_realloc_r+0x16>
 8004bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd8:	4611      	mov	r1, r2
 8004bda:	f7ff bf81 	b.w	8004ae0 <_malloc_r>
 8004bde:	b92a      	cbnz	r2, 8004bec <_realloc_r+0x24>
 8004be0:	f7ff ff12 	bl	8004a08 <_free_r>
 8004be4:	4625      	mov	r5, r4
 8004be6:	4628      	mov	r0, r5
 8004be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bec:	f000 f838 	bl	8004c60 <_malloc_usable_size_r>
 8004bf0:	4284      	cmp	r4, r0
 8004bf2:	4607      	mov	r7, r0
 8004bf4:	d802      	bhi.n	8004bfc <_realloc_r+0x34>
 8004bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bfa:	d812      	bhi.n	8004c22 <_realloc_r+0x5a>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4640      	mov	r0, r8
 8004c00:	f7ff ff6e 	bl	8004ae0 <_malloc_r>
 8004c04:	4605      	mov	r5, r0
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d0ed      	beq.n	8004be6 <_realloc_r+0x1e>
 8004c0a:	42bc      	cmp	r4, r7
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	4631      	mov	r1, r6
 8004c10:	bf28      	it	cs
 8004c12:	463a      	movcs	r2, r7
 8004c14:	f7ff fbb8 	bl	8004388 <memcpy>
 8004c18:	4631      	mov	r1, r6
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	f7ff fef4 	bl	8004a08 <_free_r>
 8004c20:	e7e1      	b.n	8004be6 <_realloc_r+0x1e>
 8004c22:	4635      	mov	r5, r6
 8004c24:	e7df      	b.n	8004be6 <_realloc_r+0x1e>
	...

08004c28 <_sbrk_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4d06      	ldr	r5, [pc, #24]	; (8004c44 <_sbrk_r+0x1c>)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	f7fd faa0 	bl	8002178 <_sbrk>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_sbrk_r+0x1a>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_sbrk_r+0x1a>
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	2000032c 	.word	0x2000032c

08004c48 <__malloc_lock>:
 8004c48:	4801      	ldr	r0, [pc, #4]	; (8004c50 <__malloc_lock+0x8>)
 8004c4a:	f000 b811 	b.w	8004c70 <__retarget_lock_acquire_recursive>
 8004c4e:	bf00      	nop
 8004c50:	20000330 	.word	0x20000330

08004c54 <__malloc_unlock>:
 8004c54:	4801      	ldr	r0, [pc, #4]	; (8004c5c <__malloc_unlock+0x8>)
 8004c56:	f000 b80c 	b.w	8004c72 <__retarget_lock_release_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20000330 	.word	0x20000330

08004c60 <_malloc_usable_size_r>:
 8004c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c64:	1f18      	subs	r0, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfbc      	itt	lt
 8004c6a:	580b      	ldrlt	r3, [r1, r0]
 8004c6c:	18c0      	addlt	r0, r0, r3
 8004c6e:	4770      	bx	lr

08004c70 <__retarget_lock_acquire_recursive>:
 8004c70:	4770      	bx	lr

08004c72 <__retarget_lock_release_recursive>:
 8004c72:	4770      	bx	lr

08004c74 <_init>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr

08004c80 <_fini>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr
