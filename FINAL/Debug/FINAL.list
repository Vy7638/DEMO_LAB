
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e444  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000db670  0800e5d8  0800e5d8  0001e5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e9c48  080e9c48  00100118  2**0
                  CONTENTS
  4 .ARM          00000008  080e9c48  080e9c48  000f9c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080e9c50  080e9c50  00100118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e9c50  080e9c50  000f9c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e9c54  080e9c54  000f9c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080e9c58  00100000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00100118  2**0
                  CONTENTS
 10 .bss          000005bc  20000118  20000118  00100118  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006d4  200006d4  00100118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00100118  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00100148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c415  00000000  00000000  0010018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004da3  00000000  00000000  0011c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab8  00000000  00000000  00121348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001478  00000000  00000000  00122e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029077  00000000  00000000  00124278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000287e8  00000000  00000000  0014d2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2677  00000000  00000000  00175ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a6c  00000000  00000000  00258150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0025fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e5bc 	.word	0x0800e5bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	0800e5bc 	.word	0x0800e5bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <MX_ADC1_Init+0x108>)
 8000f98:	4a3d      	ldr	r2, [pc, #244]	; (8001090 <MX_ADC1_Init+0x10c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	; (800108c <MX_ADC1_Init+0x108>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <MX_ADC1_Init+0x108>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <MX_ADC1_Init+0x108>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fae:	4b37      	ldr	r3, [pc, #220]	; (800108c <MX_ADC1_Init+0x108>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <MX_ADC1_Init+0x108>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <MX_ADC1_Init+0x108>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <MX_ADC1_Init+0x108>)
 8000fc4:	4a33      	ldr	r2, [pc, #204]	; (8001094 <MX_ADC1_Init+0x110>)
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <MX_ADC1_Init+0x108>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <MX_ADC1_Init+0x108>)
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <MX_ADC1_Init+0x108>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_ADC1_Init+0x108>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe2:	482a      	ldr	r0, [pc, #168]	; (800108c <MX_ADC1_Init+0x108>)
 8000fe4:	f005 fd08 	bl	80069f8 <HAL_ADC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f003 fc05 	bl	80047fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <MX_ADC1_Init+0x108>)
 8001004:	f005 fe6a 	bl	8006cdc <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100e:	f003 fbf5 	bl	80047fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001012:	2309      	movs	r3, #9
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <MX_ADC1_Init+0x108>)
 8001020:	f005 fe5c 	bl	8006cdc <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800102a:	f003 fbe7 	bl	80047fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800102e:	230a      	movs	r3, #10
 8001030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001032:	2303      	movs	r3, #3
 8001034:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4814      	ldr	r0, [pc, #80]	; (800108c <MX_ADC1_Init+0x108>)
 800103c:	f005 fe4e 	bl	8006cdc <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001046:	f003 fbd9 	bl	80047fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800104a:	230b      	movs	r3, #11
 800104c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800104e:	2304      	movs	r3, #4
 8001050:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_ADC1_Init+0x108>)
 8001058:	f005 fe40 	bl	8006cdc <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001062:	f003 fbcb 	bl	80047fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001066:	230c      	movs	r3, #12
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800106a:	2305      	movs	r3, #5
 800106c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <MX_ADC1_Init+0x108>)
 8001074:	f005 fe32 	bl	8006cdc <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800107e:	f003 fbbd 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000134 	.word	0x20000134
 8001090:	40012000 	.word	0x40012000
 8001094:	0f000001 	.word	0x0f000001

08001098 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	at24c_Check();
 800109c:	f000 f83c 	bl	8001118 <at24c_Check>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010b2:	88fa      	ldrh	r2, [r7, #6]
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030f 	add.w	r3, r7, #15
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2310      	movs	r3, #16
 80010c4:	21a0      	movs	r1, #160	; 0xa0
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <at24c_ReadOneByte+0x34>)
 80010c8:	f007 f9c8 	bl	800845c <HAL_I2C_Mem_Read>
	return temp;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200002e0 	.word	0x200002e0

080010dc <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	4613      	mov	r3, r2
 80010ea:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80010ec:	88fa      	ldrh	r2, [r7, #6]
 80010ee:	230a      	movs	r3, #10
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	1d7b      	adds	r3, r7, #5
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2310      	movs	r3, #16
 80010fc:	21a0      	movs	r1, #160	; 0xa0
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <at24c_WriteOneByte+0x38>)
 8001100:	f007 f8b2 	bl	8008268 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001104:	2005      	movs	r0, #5
 8001106:	f005 fc53 	bl	80069b0 <HAL_Delay>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002e0 	.word	0x200002e0

08001118 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800111e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001122:	f7ff ffbf 	bl	80010a4 <at24c_ReadOneByte>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b55      	cmp	r3, #85	; 0x55
 800112e:	d101      	bne.n	8001134 <at24c_Check+0x1c>
 8001130:	2300      	movs	r3, #0
 8001132:	e010      	b.n	8001156 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001134:	2155      	movs	r1, #85	; 0x55
 8001136:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800113a:	f7ff ffcf 	bl	80010dc <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800113e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001142:	f7ff ffaf 	bl	80010a4 <at24c_ReadOneByte>
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b55      	cmp	r3, #85	; 0x55
 800114e:	d101      	bne.n	8001154 <at24c_Check+0x3c>
 8001150:	2300      	movs	r3, #0
 8001152:	e000      	b.n	8001156 <at24c_Check+0x3e>
	}
	return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800115e:	b590      	push	{r4, r7, lr}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	6039      	str	r1, [r7, #0]
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800116e:	e00d      	b.n	800118c <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	80fa      	strh	r2, [r7, #6]
 8001176:	683c      	ldr	r4, [r7, #0]
 8001178:	1c62      	adds	r2, r4, #1
 800117a:	603a      	str	r2, [r7, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff91 	bl	80010a4 <at24c_ReadOneByte>
 8001182:	4603      	mov	r3, r0
 8001184:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	3b01      	subs	r3, #1
 800118a:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1ee      	bne.n	8001170 <at24c_Read+0x12>
	}
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	80fb      	strh	r3, [r7, #6]
 80011a8:	4613      	mov	r3, r2
 80011aa:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011ac:	e00c      	b.n	80011c8 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff90 	bl	80010dc <at24c_WriteOneByte>
		WriteAddr++;
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	3301      	adds	r3, #1
 80011c0:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	80ba      	strh	r2, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ed      	bne.n	80011ae <at24c_Write+0x12>
	}
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2108      	movs	r1, #8
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <button_init+0x14>)
 80011e6:	f006 fee1 	bl	8007fac <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020c00 	.word	0x40020c00

080011f4 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2108      	movs	r1, #8
 80011fe:	482f      	ldr	r0, [pc, #188]	; (80012bc <button_Scan+0xc8>)
 8001200:	f006 fed4 	bl	8007fac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	2108      	movs	r1, #8
 8001208:	482c      	ldr	r0, [pc, #176]	; (80012bc <button_Scan+0xc8>)
 800120a:	f006 fecf 	bl	8007fac <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800120e:	230a      	movs	r3, #10
 8001210:	2202      	movs	r2, #2
 8001212:	492b      	ldr	r1, [pc, #172]	; (80012c0 <button_Scan+0xcc>)
 8001214:	482b      	ldr	r0, [pc, #172]	; (80012c4 <button_Scan+0xd0>)
 8001216:	f008 fd00 	bl	8009c1a <HAL_SPI_Receive>
	  int button_index = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800121e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001222:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	e03f      	b.n	80012aa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db06      	blt.n	800123e <button_Scan+0x4a>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b03      	cmp	r3, #3
 8001234:	dc03      	bgt.n	800123e <button_Scan+0x4a>
			  button_index = i + 4;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e018      	b.n	8001270 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b03      	cmp	r3, #3
 8001242:	dd07      	ble.n	8001254 <button_Scan+0x60>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b07      	cmp	r3, #7
 8001248:	dc04      	bgt.n	8001254 <button_Scan+0x60>
			  button_index = 7 - i;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f1c3 0307 	rsb	r3, r3, #7
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e00d      	b.n	8001270 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b07      	cmp	r3, #7
 8001258:	dd06      	ble.n	8001268 <button_Scan+0x74>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0b      	cmp	r3, #11
 800125e:	dc03      	bgt.n	8001268 <button_Scan+0x74>
			  button_index = i + 4;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3304      	adds	r3, #4
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e003      	b.n	8001270 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f1c3 0317 	rsb	r3, r3, #23
 800126e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <button_Scan+0xcc>)
 8001272:	881a      	ldrh	r2, [r3, #0]
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	4013      	ands	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <button_Scan+0x96>
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <button_Scan+0xd4>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2100      	movs	r1, #0
 8001284:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001288:	e009      	b.n	800129e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <button_Scan+0xd4>)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001292:	3301      	adds	r3, #1
 8001294:	b299      	uxth	r1, r3
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <button_Scan+0xd4>)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800129e:	897b      	ldrh	r3, [r7, #10]
 80012a0:	085b      	lsrs	r3, r3, #1
 80012a2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3301      	adds	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	ddbc      	ble.n	800122a <button_Scan+0x36>
	  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	2000019c 	.word	0x2000019c
 80012c4:	200003c0 	.word	0x200003c0
 80012c8:	2000017c 	.word	0x2000017c

080012cc <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_DMA_Init+0x3c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <MX_DMA_Init+0x3c>)
 80012dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_DMA_Init+0x3c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2038      	movs	r0, #56	; 0x38
 80012f4:	f006 f86d 	bl	80073d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f8:	2038      	movs	r0, #56	; 0x38
 80012fa:	f006 f886 	bl	800740a <HAL_NVIC_EnableIRQ>

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <clr_confirm>:

#include "fsm.h"

uint8_t confirm[4] = {0, 0, 0, 0};

void clr_confirm(){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	e007      	b.n	8001328 <clr_confirm+0x1c>
		confirm[i] = 0;
 8001318:	4a08      	ldr	r2, [pc, #32]	; (800133c <clr_confirm+0x30>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b03      	cmp	r3, #3
 800132c:	ddf4      	ble.n	8001318 <clr_confirm+0xc>
	}
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200001a0 	.word	0x200001a0

08001340 <temp_game>:

void temp_game(){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	tempFlag = 1;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <temp_game+0x2c>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
	tempStatus = status;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <temp_game+0x30>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <temp_game+0x34>)
 8001350:	6013      	str	r3, [r2, #0]
	tempMove = move;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <temp_game+0x38>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <temp_game+0x3c>)
 8001358:	6013      	str	r3, [r2, #0]
	flag_user = FLAG_PAUSE;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <temp_game+0x40>)
 800135c:	2203      	movs	r2, #3
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200002ac 	.word	0x200002ac
 8001370:	2000029c 	.word	0x2000029c
 8001374:	200002b0 	.word	0x200002b0
 8001378:	200002a0 	.word	0x200002a0
 800137c:	200002b4 	.word	0x200002b4
 8001380:	20000294 	.word	0x20000294

08001384 <continue_game>:

void continue_game(){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	if(tempFlag == 1){
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <continue_game+0x38>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d113      	bne.n	80013b8 <continue_game+0x34>
		status = tempStatus;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <continue_game+0x3c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <continue_game+0x40>)
 8001396:	6013      	str	r3, [r2, #0]
		move = tempMove;
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <continue_game+0x44>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <continue_game+0x48>)
 800139e:	6013      	str	r3, [r2, #0]
		reDraw_snake();
 80013a0:	f003 fc36 	bl	8004c10 <reDraw_snake>
		point_food_lcd(food);
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <continue_game+0x4c>)
 80013a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013aa:	f002 f8a2 	bl	80034f2 <point_food_lcd>
		score_lcd();
 80013ae:	f001 fb5d 	bl	8002a6c <score_lcd>
		flag_user = FLAG_PLAYING;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <continue_game+0x50>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
	}
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200002ac 	.word	0x200002ac
 80013c0:	200002b0 	.word	0x200002b0
 80013c4:	2000029c 	.word	0x2000029c
 80013c8:	200002b4 	.word	0x200002b4
 80013cc:	200002a0 	.word	0x200002a0
 80013d0:	20000050 	.word	0x20000050
 80013d4:	20000294 	.word	0x20000294

080013d8 <input_inGame>:

void input_inGame(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	if((is_touch_right() == 1 || button_count[6] == 1) && move != LEFT){
 80013dc:	f000 fd50 	bl	8001e80 <is_touch_right>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d003      	beq.n	80013ee <input_inGame+0x16>
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <input_inGame+0xb8>)
 80013e8:	899b      	ldrh	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <input_inGame+0x26>
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <input_inGame+0xbc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d003      	beq.n	80013fe <input_inGame+0x26>
		move = RIGHT;
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <input_inGame+0xbc>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e046      	b.n	800148c <input_inGame+0xb4>
	}else if((is_touch_left() == 1 || button_count[4] == 1) && move != RIGHT){
 80013fe:	f000 fd63 	bl	8001ec8 <is_touch_left>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d003      	beq.n	8001410 <input_inGame+0x38>
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <input_inGame+0xb8>)
 800140a:	891b      	ldrh	r3, [r3, #8]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <input_inGame+0x48>
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <input_inGame+0xbc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d003      	beq.n	8001420 <input_inGame+0x48>
		move = LEFT;
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <input_inGame+0xbc>)
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e035      	b.n	800148c <input_inGame+0xb4>
	}else if((is_touch_up() == 1 || button_count[1] == 1) && move != DOWN){
 8001420:	f000 fd76 	bl	8001f10 <is_touch_up>
 8001424:	4603      	mov	r3, r0
 8001426:	2b01      	cmp	r3, #1
 8001428:	d003      	beq.n	8001432 <input_inGame+0x5a>
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <input_inGame+0xb8>)
 800142c:	885b      	ldrh	r3, [r3, #2]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <input_inGame+0x6a>
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <input_inGame+0xbc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b04      	cmp	r3, #4
 8001438:	d003      	beq.n	8001442 <input_inGame+0x6a>
		move = UP;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <input_inGame+0xbc>)
 800143c:	2203      	movs	r2, #3
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e024      	b.n	800148c <input_inGame+0xb4>
	}else if((is_touch_down() == 1 || button_count[9] == 1) && move != UP){
 8001442:	f000 fd87 	bl	8001f54 <is_touch_down>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d003      	beq.n	8001454 <input_inGame+0x7c>
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <input_inGame+0xb8>)
 800144e:	8a5b      	ldrh	r3, [r3, #18]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d107      	bne.n	8001464 <input_inGame+0x8c>
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <input_inGame+0xbc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d003      	beq.n	8001464 <input_inGame+0x8c>
		move = DOWN;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <input_inGame+0xbc>)
 800145e:	2204      	movs	r2, #4
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e013      	b.n	800148c <input_inGame+0xb4>
	}else if(is_touch_pause() == 1 || button_count[5] == 1){
 8001464:	f000 fe01 	bl	800206a <is_touch_pause>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d003      	beq.n	8001476 <input_inGame+0x9e>
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <input_inGame+0xb8>)
 8001470:	895b      	ldrh	r3, [r3, #10]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d10a      	bne.n	800148c <input_inGame+0xb4>
		temp_game();
 8001476:	f7ff ff63 	bl	8001340 <temp_game>
		status = PAUSE;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <input_inGame+0xc0>)
 800147c:	220f      	movs	r2, #15
 800147e:	601a      	str	r2, [r3, #0]
		move = NOT;
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <input_inGame+0xbc>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
		pause_lcd();
 8001486:	f001 fb09 	bl	8002a9c <pause_lcd>
	}
}
 800148a:	e7ff      	b.n	800148c <input_inGame+0xb4>
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000017c 	.word	0x2000017c
 8001494:	200002a0 	.word	0x200002a0
 8001498:	2000029c 	.word	0x2000029c

0800149c <input_enterName>:

void input_enterName(){
 800149c:	b598      	push	{r3, r4, r7, lr}
 800149e:	af00      	add	r7, sp, #0
	flag_change = 1;
 80014a0:	4b8a      	ldr	r3, [pc, #552]	; (80016cc <input_enterName+0x230>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
	if(is_touch_char() == 1){
 80014a6:	f000 fed1 	bl	800224c <is_touch_char>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d11a      	bne.n	80014e6 <input_enterName+0x4a>
		index_r = (touch_GetY() - POS_Y_CHAR)/CHAR_HEIGHT;
 80014b0:	f005 f8b8 	bl	8006624 <touch_GetY>
 80014b4:	4603      	mov	r3, r0
 80014b6:	3b7c      	subs	r3, #124	; 0x7c
 80014b8:	4a85      	ldr	r2, [pc, #532]	; (80016d0 <input_enterName+0x234>)
 80014ba:	fb82 1203 	smull	r1, r2, r2, r3
 80014be:	1112      	asrs	r2, r2, #4
 80014c0:	17db      	asrs	r3, r3, #31
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <input_enterName+0x238>)
 80014c8:	701a      	strb	r2, [r3, #0]
		index_c = (touch_GetX() - POS_X_CHAR)/CHAR_WIDTH;
 80014ca:	f005 f89f 	bl	800660c <touch_GetX>
 80014ce:	4603      	mov	r3, r0
 80014d0:	3b06      	subs	r3, #6
 80014d2:	4a7f      	ldr	r2, [pc, #508]	; (80016d0 <input_enterName+0x234>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	1112      	asrs	r2, r2, #4
 80014da:	17db      	asrs	r3, r3, #31
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b7d      	ldr	r3, [pc, #500]	; (80016d8 <input_enterName+0x23c>)
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e04b      	b.n	800157e <input_enterName+0xe2>
	}else{
		if(button_count[1] == 1){
 80014e6:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <input_enterName+0x240>)
 80014e8:	885b      	ldrh	r3, [r3, #2]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10a      	bne.n	8001504 <input_enterName+0x68>
			if(index_r > 0) index_r--;
 80014ee:	4b79      	ldr	r3, [pc, #484]	; (80016d4 <input_enterName+0x238>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d043      	beq.n	800157e <input_enterName+0xe2>
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <input_enterName+0x238>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b75      	ldr	r3, [pc, #468]	; (80016d4 <input_enterName+0x238>)
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e03c      	b.n	800157e <input_enterName+0xe2>
		}else if(button_count[9] == 1){
 8001504:	4b75      	ldr	r3, [pc, #468]	; (80016dc <input_enterName+0x240>)
 8001506:	8a5b      	ldrh	r3, [r3, #18]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10a      	bne.n	8001522 <input_enterName+0x86>
			if(index_r < CHAR_ROW - 1) index_r++;
 800150c:	4b71      	ldr	r3, [pc, #452]	; (80016d4 <input_enterName+0x238>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d834      	bhi.n	800157e <input_enterName+0xe2>
 8001514:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <input_enterName+0x238>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <input_enterName+0x238>)
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e02d      	b.n	800157e <input_enterName+0xe2>
		}else if(button_count[4] == 1){
 8001522:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <input_enterName+0x240>)
 8001524:	891b      	ldrh	r3, [r3, #8]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d10a      	bne.n	8001540 <input_enterName+0xa4>
			if(index_c > 0) index_c--;
 800152a:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <input_enterName+0x23c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d025      	beq.n	800157e <input_enterName+0xe2>
 8001532:	4b69      	ldr	r3, [pc, #420]	; (80016d8 <input_enterName+0x23c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <input_enterName+0x23c>)
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e01e      	b.n	800157e <input_enterName+0xe2>
		}else if(button_count[6] == 1){
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <input_enterName+0x240>)
 8001542:	899b      	ldrh	r3, [r3, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d10a      	bne.n	800155e <input_enterName+0xc2>
			if(index_c < CHAR_COL - 1) index_c++;
 8001548:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <input_enterName+0x23c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b04      	cmp	r3, #4
 800154e:	d816      	bhi.n	800157e <input_enterName+0xe2>
 8001550:	4b61      	ldr	r3, [pc, #388]	; (80016d8 <input_enterName+0x23c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b5f      	ldr	r3, [pc, #380]	; (80016d8 <input_enterName+0x23c>)
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e00f      	b.n	800157e <input_enterName+0xe2>
		}else if(button_count[5] == 1){
 800155e:	4b5f      	ldr	r3, [pc, #380]	; (80016dc <input_enterName+0x240>)
 8001560:	895b      	ldrh	r3, [r3, #10]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d108      	bne.n	8001578 <input_enterName+0xdc>
			index_r = index_r_old;
 8001566:	4b5e      	ldr	r3, [pc, #376]	; (80016e0 <input_enterName+0x244>)
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <input_enterName+0x238>)
 800156c:	701a      	strb	r2, [r3, #0]
			index_c = index_c_old;
 800156e:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <input_enterName+0x248>)
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <input_enterName+0x23c>)
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e002      	b.n	800157e <input_enterName+0xe2>
		}else{
			flag_change = 0;
 8001578:	4b54      	ldr	r3, [pc, #336]	; (80016cc <input_enterName+0x230>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(flag_change == 1){
 800157e:	4b53      	ldr	r3, [pc, #332]	; (80016cc <input_enterName+0x230>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f040 80a1 	bne.w	80016ca <input_enterName+0x22e>
		if(index_r == index_r_old && index_c == index_c_old){
 8001588:	4b52      	ldr	r3, [pc, #328]	; (80016d4 <input_enterName+0x238>)
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <input_enterName+0x244>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 8098 	bne.w	80016c6 <input_enterName+0x22a>
 8001596:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <input_enterName+0x23c>)
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <input_enterName+0x248>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	f040 8091 	bne.w	80016c6 <input_enterName+0x22a>
			if(index_r == IDX_R_UPPER && index_c == IDX_C_UPPER){
 80015a4:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <input_enterName+0x238>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d113      	bne.n	80015d4 <input_enterName+0x138>
 80015ac:	4b4a      	ldr	r3, [pc, #296]	; (80016d8 <input_enterName+0x23c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10f      	bne.n	80015d4 <input_enterName+0x138>
				if(flag_uppercase == 1){
 80015b4:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <input_enterName+0x24c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <input_enterName+0x12c>
					flag_uppercase = 0;
 80015bc:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <input_enterName+0x24c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
					lowercase_lcd();
 80015c2:	f001 fc5d 	bl	8002e80 <lowercase_lcd>
				if(flag_uppercase == 1){
 80015c6:	e07e      	b.n	80016c6 <input_enterName+0x22a>
				}else{
					flag_uppercase = 1;
 80015c8:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <input_enterName+0x24c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
					uppercase_lcd();
 80015ce:	f001 fc0f 	bl	8002df0 <uppercase_lcd>
				if(flag_uppercase == 1){
 80015d2:	e078      	b.n	80016c6 <input_enterName+0x22a>
				}
			}else if(index_r == IDX_R_DEL && index_c == IDX_C_DEL){
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <input_enterName+0x238>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d116      	bne.n	800160a <input_enterName+0x16e>
 80015dc:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <input_enterName+0x23c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d112      	bne.n	800160a <input_enterName+0x16e>
				if(name_length > 0){
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <input_enterName+0x250>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d06c      	beq.n	80016c6 <input_enterName+0x22a>
					name_length--;
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <input_enterName+0x250>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <input_enterName+0x250>)
 80015f6:	701a      	strb	r2, [r3, #0]
					name[name_length] = '\0';
 80015f8:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <input_enterName+0x250>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <input_enterName+0x254>)
 8001600:	2100      	movs	r1, #0
 8001602:	5499      	strb	r1, [r3, r2]
					displayName_lcd();
 8001604:	f001 fd08 	bl	8003018 <displayName_lcd>
				if(name_length > 0){
 8001608:	e05d      	b.n	80016c6 <input_enterName+0x22a>
				}
			}else if(index_r == IDX_R_ENTR && index_c == IDX_C_ENTR){
 800160a:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <input_enterName+0x238>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b04      	cmp	r3, #4
 8001610:	d122      	bne.n	8001658 <input_enterName+0x1bc>
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <input_enterName+0x23c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d11e      	bne.n	8001658 <input_enterName+0x1bc>
				if(name_length > 0){
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <input_enterName+0x250>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d051      	beq.n	80016c6 <input_enterName+0x22a>
					status = tempStatus;
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <input_enterName+0x258>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <input_enterName+0x25c>)
 8001628:	6013      	str	r3, [r2, #0]
					setTimer3(500);
 800162a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162e:	f003 fb3d 	bl	8004cac <setTimer3>
					game_lcd();					// Hien thi man hinh choi game
 8001632:	f001 f931 	bl	8002898 <game_lcd>
					mode_7seg();				// Ham hien thi che do choi tren led 7seg
 8001636:	f001 ff83 	bl	8003540 <mode_7seg>
					reDraw_snake();				// Ham goi ve con ran
 800163a:	f003 fae9 	bl	8004c10 <reDraw_snake>
					point_food_lcd(food);
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <input_enterName+0x260>)
 8001640:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001644:	f001 ff55 	bl	80034f2 <point_food_lcd>
					environment_lcd();			// Ham moi truong
 8001648:	f001 f9d8 	bl	80029fc <environment_lcd>
					score_lcd();				// Ham diem so
 800164c:	f001 fa0e 	bl	8002a6c <score_lcd>
					flag_user = FLAG_PLAYING;
 8001650:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <input_enterName+0x264>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
					return;
 8001656:	e038      	b.n	80016ca <input_enterName+0x22e>
				}
			}else if(name_length < 10){
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <input_enterName+0x250>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b09      	cmp	r3, #9
 800165e:	d832      	bhi.n	80016c6 <input_enterName+0x22a>
				if(flag_uppercase == 1){
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <input_enterName+0x24c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d113      	bne.n	8001690 <input_enterName+0x1f4>
					name[name_length] = char_upper[index_r][index_c];
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <input_enterName+0x238>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <input_enterName+0x23c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461c      	mov	r4, r3
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <input_enterName+0x250>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <input_enterName+0x268>)
 800167c:	460b      	mov	r3, r1
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	440b      	add	r3, r1
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	4423      	add	r3, r4
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <input_enterName+0x254>)
 800168c:	541a      	strb	r2, [r3, r0]
 800168e:	e012      	b.n	80016b6 <input_enterName+0x21a>
				}else{
					name[name_length] = char_lower[index_r][index_c];
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <input_enterName+0x238>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <input_enterName+0x23c>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461c      	mov	r4, r3
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <input_enterName+0x250>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	4a19      	ldr	r2, [pc, #100]	; (8001708 <input_enterName+0x26c>)
 80016a4:	460b      	mov	r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	4423      	add	r3, r4
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <input_enterName+0x254>)
 80016b4:	541a      	strb	r2, [r3, r0]
				}
				name_length++;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <input_enterName+0x250>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <input_enterName+0x250>)
 80016c0:	701a      	strb	r2, [r3, #0]
				displayName_lcd();
 80016c2:	f001 fca9 	bl	8003018 <displayName_lcd>
			}
		}
		selectbox_lcd();
 80016c6:	f001 fc23 	bl	8002f10 <selectbox_lcd>
	}
}
 80016ca:	bd98      	pop	{r3, r4, r7, pc}
 80016cc:	20000295 	.word	0x20000295
 80016d0:	6bca1af3 	.word	0x6bca1af3
 80016d4:	20000297 	.word	0x20000297
 80016d8:	20000298 	.word	0x20000298
 80016dc:	2000017c 	.word	0x2000017c
 80016e0:	20000299 	.word	0x20000299
 80016e4:	2000029a 	.word	0x2000029a
 80016e8:	20000296 	.word	0x20000296
 80016ec:	2000028f 	.word	0x2000028f
 80016f0:	20000284 	.word	0x20000284
 80016f4:	200002b0 	.word	0x200002b0
 80016f8:	2000029c 	.word	0x2000029c
 80016fc:	20000050 	.word	0x20000050
 8001700:	20000294 	.word	0x20000294
 8001704:	2000000c 	.word	0x2000000c
 8001708:	2000002c 	.word	0x2000002c

0800170c <input_process>:

void input_process(){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	switch(status){
 8001710:	4ba3      	ldr	r3, [pc, #652]	; (80019a0 <input_process+0x294>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b12      	cmp	r3, #18
 8001716:	f200 8187 	bhi.w	8001a28 <input_process+0x31c>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <input_process+0x14>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	0800176d 	.word	0x0800176d
 8001724:	0800182d 	.word	0x0800182d
 8001728:	08001a29 	.word	0x08001a29
 800172c:	08001927 	.word	0x08001927
 8001730:	08001a29 	.word	0x08001a29
 8001734:	08001a29 	.word	0x08001a29
 8001738:	08001a29 	.word	0x08001a29
 800173c:	08001a29 	.word	0x08001a29
 8001740:	08001a29 	.word	0x08001a29
 8001744:	08001a29 	.word	0x08001a29
 8001748:	08001a29 	.word	0x08001a29
 800174c:	08001945 	.word	0x08001945
 8001750:	0800194b 	.word	0x0800194b
 8001754:	08001951 	.word	0x08001951
 8001758:	08001a29 	.word	0x08001a29
 800175c:	080019b5 	.word	0x080019b5
 8001760:	08001957 	.word	0x08001957
 8001764:	08001979 	.word	0x08001979
 8001768:	0800199b 	.word	0x0800199b
		case HOME:
			if(is_touch_newGame() == 1 || button_count[3] == 1){
 800176c:	f000 fca1 	bl	80020b2 <is_touch_newGame>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d003      	beq.n	800177e <input_process+0x72>
 8001776:	4b8b      	ldr	r3, [pc, #556]	; (80019a4 <input_process+0x298>)
 8001778:	88db      	ldrh	r3, [r3, #6]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d117      	bne.n	80017ae <input_process+0xa2>
				if(confirm[1] == 1){
 800177e:	4b8a      	ldr	r3, [pc, #552]	; (80019a8 <input_process+0x29c>)
 8001780:	785b      	ldrb	r3, [r3, #1]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d10b      	bne.n	800179e <input_process+0x92>
					clr_confirm();
 8001786:	f7ff fdc1 	bl	800130c <clr_confirm>
					status = MODE;
 800178a:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <input_process+0x294>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]
					user_init();
 8001790:	f004 ffc6 	bl	8006720 <user_init>
					snake_init();
 8001794:	f003 f88a 	bl	80048ac <snake_init>
					mode_game_lcd();
 8001798:	f000 ff30 	bl	80025fc <mode_game_lcd>
				if(confirm[1] == 1){
 800179c:	e045      	b.n	800182a <input_process+0x11e>
				}else{
					clr_confirm();
 800179e:	f7ff fdb5 	bl	800130c <clr_confirm>
					confirm[1] = 1;
 80017a2:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <input_process+0x29c>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	705a      	strb	r2, [r3, #1]
					home_second_lcd();
 80017a8:	f001 fd36 	bl	8003218 <home_second_lcd>
				if(confirm[1] == 1){
 80017ac:	e03d      	b.n	800182a <input_process+0x11e>
				}
			}else if(is_touch_continue() == 1 || button_count[7] == 1){
 80017ae:	f000 fca2 	bl	80020f6 <is_touch_continue>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d003      	beq.n	80017c0 <input_process+0xb4>
 80017b8:	4b7a      	ldr	r3, [pc, #488]	; (80019a4 <input_process+0x298>)
 80017ba:	89db      	ldrh	r3, [r3, #14]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d116      	bne.n	80017ee <input_process+0xe2>
				if(confirm[2] == 1 && tempFlag == 1){
 80017c0:	4b79      	ldr	r3, [pc, #484]	; (80019a8 <input_process+0x29c>)
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10a      	bne.n	80017de <input_process+0xd2>
 80017c8:	4b78      	ldr	r3, [pc, #480]	; (80019ac <input_process+0x2a0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d106      	bne.n	80017de <input_process+0xd2>
					clr_confirm();
 80017d0:	f7ff fd9c 	bl	800130c <clr_confirm>
					game_lcd();
 80017d4:	f001 f860 	bl	8002898 <game_lcd>
					continue_game();
 80017d8:	f7ff fdd4 	bl	8001384 <continue_game>
				if(confirm[2] == 1 && tempFlag == 1){
 80017dc:	e025      	b.n	800182a <input_process+0x11e>
				}else{
					clr_confirm();
 80017de:	f7ff fd95 	bl	800130c <clr_confirm>
					confirm[2] = 1;
 80017e2:	4b71      	ldr	r3, [pc, #452]	; (80019a8 <input_process+0x29c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	709a      	strb	r2, [r3, #2]
					home_third_lcd();
 80017e8:	f001 fd2e 	bl	8003248 <home_third_lcd>
				if(confirm[2] == 1 && tempFlag == 1){
 80017ec:	e01d      	b.n	800182a <input_process+0x11e>
				}
			}else if(is_touch_highScore() == 1 || button_count[11] == 1){
 80017ee:	f000 fca4 	bl	800213a <is_touch_highScore>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d004      	beq.n	8001802 <input_process+0xf6>
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <input_process+0x298>)
 80017fa:	8adb      	ldrh	r3, [r3, #22]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f040 8115 	bne.w	8001a2c <input_process+0x320>
				if(confirm[3] == 1){
 8001802:	4b69      	ldr	r3, [pc, #420]	; (80019a8 <input_process+0x29c>)
 8001804:	78db      	ldrb	r3, [r3, #3]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <input_process+0x10e>
					clr_confirm();
 800180a:	f7ff fd7f 	bl	800130c <clr_confirm>
					status = HIGHSCORE;
 800180e:	4b64      	ldr	r3, [pc, #400]	; (80019a0 <input_process+0x294>)
 8001810:	2203      	movs	r2, #3
 8001812:	601a      	str	r2, [r3, #0]
					highscore_lcd();
 8001814:	f000 ff6a 	bl	80026ec <highscore_lcd>
					clr_confirm();
					confirm[3] = 1;
					home_forth_lcd();
				}
			}
			break;
 8001818:	e108      	b.n	8001a2c <input_process+0x320>
					clr_confirm();
 800181a:	f7ff fd77 	bl	800130c <clr_confirm>
					confirm[3] = 1;
 800181e:	4b62      	ldr	r3, [pc, #392]	; (80019a8 <input_process+0x29c>)
 8001820:	2201      	movs	r2, #1
 8001822:	70da      	strb	r2, [r3, #3]
					home_forth_lcd();
 8001824:	f001 fd28 	bl	8003278 <home_forth_lcd>
			break;
 8001828:	e100      	b.n	8001a2c <input_process+0x320>
 800182a:	e0ff      	b.n	8001a2c <input_process+0x320>
		case MODE:
			if(is_touch_classic() == 1 || button_count[3] == 1){
 800182c:	f000 fca8 	bl	8002180 <is_touch_classic>
 8001830:	4603      	mov	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d003      	beq.n	800183e <input_process+0x132>
 8001836:	4b5b      	ldr	r3, [pc, #364]	; (80019a4 <input_process+0x298>)
 8001838:	88db      	ldrh	r3, [r3, #6]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d116      	bne.n	800186c <input_process+0x160>
				if(confirm[0] == 1){
 800183e:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <input_process+0x29c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10a      	bne.n	800185c <input_process+0x150>
					clr_confirm();
 8001846:	f7ff fd61 	bl	800130c <clr_confirm>
					tempStatus = CLASSIC;
 800184a:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <input_process+0x2a4>)
 800184c:	220b      	movs	r2, #11
 800184e:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <input_process+0x294>)
 8001852:	2212      	movs	r2, #18
 8001854:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001856:	f001 fc2b 	bl	80030b0 <entername_lcd>
				if(confirm[0] == 1){
 800185a:	e046      	b.n	80018ea <input_process+0x1de>
				}else{
					clr_confirm();
 800185c:	f7ff fd56 	bl	800130c <clr_confirm>
					confirm[0] = 1;
 8001860:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <input_process+0x29c>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
					mode_first_lcd();
 8001866:	f001 fd21 	bl	80032ac <mode_first_lcd>
				if(confirm[0] == 1){
 800186a:	e03e      	b.n	80018ea <input_process+0x1de>
				}
			}else if(is_touch_speed() == 1 || button_count[7] == 1){
 800186c:	f000 fcaa 	bl	80021c4 <is_touch_speed>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d003      	beq.n	800187e <input_process+0x172>
 8001876:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <input_process+0x298>)
 8001878:	89db      	ldrh	r3, [r3, #14]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d116      	bne.n	80018ac <input_process+0x1a0>
				if(confirm[1] == 1){
 800187e:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <input_process+0x29c>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10a      	bne.n	800189c <input_process+0x190>
					clr_confirm();
 8001886:	f7ff fd41 	bl	800130c <clr_confirm>
					tempStatus = SPEED;
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <input_process+0x2a4>)
 800188c:	220c      	movs	r2, #12
 800188e:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001890:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <input_process+0x294>)
 8001892:	2212      	movs	r2, #18
 8001894:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001896:	f001 fc0b 	bl	80030b0 <entername_lcd>
				if(confirm[1] == 1){
 800189a:	e026      	b.n	80018ea <input_process+0x1de>
				}else{
					clr_confirm();
 800189c:	f7ff fd36 	bl	800130c <clr_confirm>
					confirm[1] = 1;
 80018a0:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <input_process+0x29c>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	705a      	strb	r2, [r3, #1]
					mode_second_lcd();
 80018a6:	f001 fd19 	bl	80032dc <mode_second_lcd>
				if(confirm[1] == 1){
 80018aa:	e01e      	b.n	80018ea <input_process+0x1de>
				}
			}else if(is_touch_time() == 1 || button_count[11] == 1){
 80018ac:	f000 fcac 	bl	8002208 <is_touch_time>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d003      	beq.n	80018be <input_process+0x1b2>
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <input_process+0x298>)
 80018b8:	8adb      	ldrh	r3, [r3, #22]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d115      	bne.n	80018ea <input_process+0x1de>
				if(confirm[2] == 1){
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <input_process+0x29c>)
 80018c0:	789b      	ldrb	r3, [r3, #2]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d10a      	bne.n	80018dc <input_process+0x1d0>
					clr_confirm();
 80018c6:	f7ff fd21 	bl	800130c <clr_confirm>
					tempStatus = TIME;
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <input_process+0x2a4>)
 80018cc:	220d      	movs	r2, #13
 80018ce:	601a      	str	r2, [r3, #0]
					status = NAME;
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <input_process+0x294>)
 80018d2:	2212      	movs	r2, #18
 80018d4:	601a      	str	r2, [r3, #0]
					entername_lcd();
 80018d6:	f001 fbeb 	bl	80030b0 <entername_lcd>
 80018da:	e006      	b.n	80018ea <input_process+0x1de>
				}else{
					clr_confirm();
 80018dc:	f7ff fd16 	bl	800130c <clr_confirm>
					confirm[2] = 1;
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <input_process+0x29c>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	709a      	strb	r2, [r3, #2]
					mode_third_lcd();
 80018e6:	f001 fd13 	bl	8003310 <mode_third_lcd>
				}
			}
			if(is_touch_quit() == 1 || button_count[15] == 1){
 80018ea:	f000 fb57 	bl	8001f9c <is_touch_quit>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d004      	beq.n	80018fe <input_process+0x1f2>
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <input_process+0x298>)
 80018f6:	8bdb      	ldrh	r3, [r3, #30]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 8099 	bne.w	8001a30 <input_process+0x324>
				if(confirm[3] == 1){
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <input_process+0x29c>)
 8001900:	78db      	ldrb	r3, [r3, #3]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <input_process+0x20a>
					clr_confirm();
 8001906:	f7ff fd01 	bl	800130c <clr_confirm>
					status = HOME;
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <input_process+0x294>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
					home_lcd();
 8001910:	f000 fe1c 	bl	800254c <home_lcd>
					clr_confirm();
					confirm[3] = 1;
					mode_forth_lcd();
				}
			}
			break;
 8001914:	e08c      	b.n	8001a30 <input_process+0x324>
					clr_confirm();
 8001916:	f7ff fcf9 	bl	800130c <clr_confirm>
					confirm[3] = 1;
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <input_process+0x29c>)
 800191c:	2201      	movs	r2, #1
 800191e:	70da      	strb	r2, [r3, #3]
					mode_forth_lcd();
 8001920:	f001 fd10 	bl	8003344 <mode_forth_lcd>
			break;
 8001924:	e084      	b.n	8001a30 <input_process+0x324>
		case HIGHSCORE:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001926:	f000 fb39 	bl	8001f9c <is_touch_quit>
 800192a:	4603      	mov	r3, r0
 800192c:	2b01      	cmp	r3, #1
 800192e:	d003      	beq.n	8001938 <input_process+0x22c>
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <input_process+0x298>)
 8001932:	88db      	ldrh	r3, [r3, #6]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d17d      	bne.n	8001a34 <input_process+0x328>
				status = HOME;
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <input_process+0x294>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
				home_lcd();
 800193e:	f000 fe05 	bl	800254c <home_lcd>
			}
			break;
 8001942:	e077      	b.n	8001a34 <input_process+0x328>
		case CLASSIC:
			input_inGame();
 8001944:	f7ff fd48 	bl	80013d8 <input_inGame>
			break;
 8001948:	e07b      	b.n	8001a42 <input_process+0x336>
		case SPEED:
			input_inGame();
 800194a:	f7ff fd45 	bl	80013d8 <input_inGame>
			break;
 800194e:	e078      	b.n	8001a42 <input_process+0x336>
		case TIME:
			input_inGame();
 8001950:	f7ff fd42 	bl	80013d8 <input_inGame>
			break;
 8001954:	e075      	b.n	8001a42 <input_process+0x336>
		case GAMEOVER:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001956:	f000 fb21 	bl	8001f9c <is_touch_quit>
 800195a:	4603      	mov	r3, r0
 800195c:	2b01      	cmp	r3, #1
 800195e:	d003      	beq.n	8001968 <input_process+0x25c>
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <input_process+0x298>)
 8001962:	88db      	ldrh	r3, [r3, #6]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d167      	bne.n	8001a38 <input_process+0x32c>
				status = HOME;
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <input_process+0x294>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
				home_lcd();
 800196e:	f000 fded 	bl	800254c <home_lcd>
				reset_7seg();				// Thoat che do choi game led 7 se quay tro ve 0
 8001972:	f001 fe09 	bl	8003588 <reset_7seg>
			}
			break;
 8001976:	e05f      	b.n	8001a38 <input_process+0x32c>
		case WIN:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001978:	f000 fb10 	bl	8001f9c <is_touch_quit>
 800197c:	4603      	mov	r3, r0
 800197e:	2b01      	cmp	r3, #1
 8001980:	d003      	beq.n	800198a <input_process+0x27e>
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <input_process+0x298>)
 8001984:	88db      	ldrh	r3, [r3, #6]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d158      	bne.n	8001a3c <input_process+0x330>
				status = HOME;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <input_process+0x294>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001990:	f000 fddc 	bl	800254c <home_lcd>
				reset_7seg();
 8001994:	f001 fdf8 	bl	8003588 <reset_7seg>
			}
			break;
 8001998:	e050      	b.n	8001a3c <input_process+0x330>
		case NAME:
			input_enterName();
 800199a:	f7ff fd7f 	bl	800149c <input_enterName>
			break;
 800199e:	e050      	b.n	8001a42 <input_process+0x336>
 80019a0:	2000029c 	.word	0x2000029c
 80019a4:	2000017c 	.word	0x2000017c
 80019a8:	200001a0 	.word	0x200001a0
 80019ac:	200002ac 	.word	0x200002ac
 80019b0:	200002b0 	.word	0x200002b0
		case PAUSE:
			if(is_touch_quit_end() == 1 || button_count[7] == 1){
 80019b4:	f000 fb15 	bl	8001fe2 <is_touch_quit_end>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d003      	beq.n	80019c6 <input_process+0x2ba>
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <input_process+0x33c>)
 80019c0:	89db      	ldrh	r3, [r3, #14]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d113      	bne.n	80019ee <input_process+0x2e2>
				if(confirm[2] == 1){
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <input_process+0x340>)
 80019c8:	789b      	ldrb	r3, [r3, #2]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <input_process+0x2d2>
					clr_confirm();
 80019ce:	f7ff fc9d 	bl	800130c <clr_confirm>
					status = HOME;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <input_process+0x344>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
					home_lcd();
 80019d8:	f000 fdb8 	bl	800254c <home_lcd>
				if(confirm[2] == 1){
 80019dc:	e023      	b.n	8001a26 <input_process+0x31a>
				}else{
					clr_confirm();
 80019de:	f7ff fc95 	bl	800130c <clr_confirm>
					confirm[2] = 1;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <input_process+0x340>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	709a      	strb	r2, [r3, #2]
					pause_third_lcd();
 80019e8:	f001 fcee 	bl	80033c8 <pause_third_lcd>
				if(confirm[2] == 1){
 80019ec:	e01b      	b.n	8001a26 <input_process+0x31a>
				}
			}else if(is_touch_resume() == 1 || button_count[3] == 1){
 80019ee:	f000 fb1a 	bl	8002026 <is_touch_resume>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d003      	beq.n	8001a00 <input_process+0x2f4>
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <input_process+0x33c>)
 80019fa:	88db      	ldrh	r3, [r3, #6]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d11f      	bne.n	8001a40 <input_process+0x334>
				if(confirm[1] == 1){
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <input_process+0x340>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d106      	bne.n	8001a16 <input_process+0x30a>
					clr_confirm();
 8001a08:	f7ff fc80 	bl	800130c <clr_confirm>
					game_lcd();
 8001a0c:	f000 ff44 	bl	8002898 <game_lcd>
					continue_game();
 8001a10:	f7ff fcb8 	bl	8001384 <continue_game>
					clr_confirm();
					confirm[1] = 1;
					pause_second_lcd();
				}
			}
			break;
 8001a14:	e014      	b.n	8001a40 <input_process+0x334>
					clr_confirm();
 8001a16:	f7ff fc79 	bl	800130c <clr_confirm>
					confirm[1] = 1;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <input_process+0x340>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	705a      	strb	r2, [r3, #1]
					pause_second_lcd();
 8001a20:	f001 fcaa 	bl	8003378 <pause_second_lcd>
			break;
 8001a24:	e00c      	b.n	8001a40 <input_process+0x334>
 8001a26:	e00b      	b.n	8001a40 <input_process+0x334>
		default:
			break;
 8001a28:	bf00      	nop
 8001a2a:	e00a      	b.n	8001a42 <input_process+0x336>
			break;
 8001a2c:	bf00      	nop
 8001a2e:	e008      	b.n	8001a42 <input_process+0x336>
			break;
 8001a30:	bf00      	nop
 8001a32:	e006      	b.n	8001a42 <input_process+0x336>
			break;
 8001a34:	bf00      	nop
 8001a36:	e004      	b.n	8001a42 <input_process+0x336>
			break;
 8001a38:	bf00      	nop
 8001a3a:	e002      	b.n	8001a42 <input_process+0x336>
			break;
 8001a3c:	bf00      	nop
 8001a3e:	e000      	b.n	8001a42 <input_process+0x336>
			break;
 8001a40:	bf00      	nop
	}
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000017c 	.word	0x2000017c
 8001a4c:	200001a0 	.word	0x200001a0
 8001a50:	2000029c 	.word	0x2000029c
 8001a54:	00000000 	.word	0x00000000

08001a58 <environment_cal>:

// Cap nhat thong tin moi truong
void environment_cal(){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	sensor_Read();
 8001a5c:	f002 fee2 	bl	8004824 <sensor_Read>
	current_temp = sensor_GetTemperature();
 8001a60:	f002 ff06 	bl	8004870 <sensor_GetTemperature>
 8001a64:	eef0 7a40 	vmov.f32	s15, s0
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <environment_cal+0x80>)
 8001a6a:	edc3 7a00 	vstr	s15, [r3]
	current_hum = ((float)sensor_GetPotentiometer() / 4095.0) * 100;
 8001a6e:	f002 fef3 	bl	8004858 <sensor_GetPotentiometer>
 8001a72:	4603      	mov	r3, r0
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ee17 0a90 	vmov	r0, s15
 8001a80:	f7fe fd62 	bl	8000548 <__aeabi_f2d>
 8001a84:	a312      	add	r3, pc, #72	; (adr r3, 8001ad0 <environment_cal+0x78>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fedf 	bl	800084c <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <environment_cal+0x84>)
 8001a9c:	f7fe fdac 	bl	80005f8 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f87e 	bl	8000ba8 <__aeabi_d2uiz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <environment_cal+0x88>)
 8001ab2:	801a      	strh	r2, [r3, #0]
	current_light = 4095 - sensor_GetLight();
 8001ab4:	f002 fec4 	bl	8004840 <sensor_GetLight>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001abe:	330f      	adds	r3, #15
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <environment_cal+0x8c>)
 8001ac4:	801a      	strh	r2, [r3, #0]
	environment_lcd();
 8001ac6:	f000 ff99 	bl	80029fc <environment_lcd>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	40affe00 	.word	0x40affe00
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	40590000 	.word	0x40590000
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	2000000a 	.word	0x2000000a

08001ae8 <score_cal>:

// Tinh toan cap nhat diem so
void score_cal(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	current_score = current_score + (400 / counter_time_score) * 5 + 5;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <score_cal+0x30>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	441a      	add	r2, r3
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <score_cal+0x34>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	3305      	adds	r3, #5
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <score_cal+0x34>)
 8001b08:	6013      	str	r3, [r2, #0]
	counter_time_score = 0;
 8001b0a:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <score_cal+0x30>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
	score_lcd();
 8001b10:	f000 ffac 	bl	8002a6c <score_lcd>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200002a4 	.word	0x200002a4
 8001b1c:	20000000 	.word	0x20000000

08001b20 <inGame>:

void inGame(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	if(move != NOT){
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <inGame+0x6c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <inGame+0x10>
		move_snake();
 8001b2c:	f003 f80e 	bl	8004b4c <move_snake>
	}
	if(is_collision() == 1){
 8001b30:	f002 ff3c 	bl	80049ac <is_collision>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d109      	bne.n	8001b4e <inGame+0x2e>
		status = GAMEOVER;
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <inGame+0x70>)
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	601a      	str	r2, [r3, #0]
		game_over_lcd();
 8001b40:	f000 fff6 	bl	8002b30 <game_over_lcd>
		user_history();
 8001b44:	f004 fe1c 	bl	8006780 <user_history>
		snake_init();
 8001b48:	f002 feb0 	bl	80048ac <snake_init>
		status = WIN;
		youwin_lcd();
		user_history();
		snake_init();
	}
}
 8001b4c:	e01b      	b.n	8001b86 <inGame+0x66>
	}else if(is_eat() == 1){
 8001b4e:	f002 ff6b 	bl	8004a28 <is_eat>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d109      	bne.n	8001b6c <inGame+0x4c>
		length++;
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <inGame+0x74>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <inGame+0x74>)
 8001b60:	6013      	str	r3, [r2, #0]
		score_cal();
 8001b62:	f7ff ffc1 	bl	8001ae8 <score_cal>
		rand_food();
 8001b66:	f002 ffbf 	bl	8004ae8 <rand_food>
}
 8001b6a:	e00c      	b.n	8001b86 <inGame+0x66>
	}else if(length == MAX_LENGTH_SNAKE){
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <inGame+0x74>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d108      	bne.n	8001b86 <inGame+0x66>
		status = WIN;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <inGame+0x70>)
 8001b76:	2211      	movs	r2, #17
 8001b78:	601a      	str	r2, [r3, #0]
		youwin_lcd();
 8001b7a:	f001 f889 	bl	8002c90 <youwin_lcd>
		user_history();
 8001b7e:	f004 fdff 	bl	8006780 <user_history>
		snake_init();
 8001b82:	f002 fe93 	bl	80048ac <snake_init>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200002a0 	.word	0x200002a0
 8001b90:	2000029c 	.word	0x2000029c
 8001b94:	2000004c 	.word	0x2000004c

08001b98 <fsm_ingame>:

void fsm_ingame(){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	switch(status){
 8001b9c:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <fsm_ingame+0x138>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b0d      	cmp	r3, #13
 8001ba2:	d04e      	beq.n	8001c42 <fsm_ingame+0xaa>
 8001ba4:	2b0d      	cmp	r3, #13
 8001ba6:	f300 8089 	bgt.w	8001cbc <fsm_ingame+0x124>
 8001baa:	2b0b      	cmp	r3, #11
 8001bac:	d002      	beq.n	8001bb4 <fsm_ingame+0x1c>
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d018      	beq.n	8001be4 <fsm_ingame+0x4c>
					snake_init();
				}
			}
			break;
		default:
			break;
 8001bb2:	e083      	b.n	8001cbc <fsm_ingame+0x124>
			counter_time_score++;
 8001bb4:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <fsm_ingame+0x13c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <fsm_ingame+0x13c>)
 8001bbc:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <fsm_ingame+0x140>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d104      	bne.n	8001bd0 <fsm_ingame+0x38>
				flag_timer4 = 0;
 8001bc6:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <fsm_ingame+0x140>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001bcc:	f7ff ff44 	bl	8001a58 <environment_cal>
			if(flag_timer3 == 1){
 8001bd0:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <fsm_ingame+0x144>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d173      	bne.n	8001cc0 <fsm_ingame+0x128>
				flag_timer3 = 0;
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <fsm_ingame+0x144>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	801a      	strh	r2, [r3, #0]
				inGame();
 8001bde:	f7ff ff9f 	bl	8001b20 <inGame>
			break;
 8001be2:	e06d      	b.n	8001cc0 <fsm_ingame+0x128>
			counter_time_score++;
 8001be4:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <fsm_ingame+0x13c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <fsm_ingame+0x13c>)
 8001bec:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <fsm_ingame+0x140>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d104      	bne.n	8001c00 <fsm_ingame+0x68>
				flag_timer4 = 0;
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <fsm_ingame+0x140>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001bfc:	f7ff ff2c 	bl	8001a58 <environment_cal>
			if(flag_timer3 == 1){
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <fsm_ingame+0x144>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d15d      	bne.n	8001cc4 <fsm_ingame+0x12c>
				flag_timer3 = 0;
 8001c08:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <fsm_ingame+0x144>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	801a      	strh	r2, [r3, #0]
				inGame();
 8001c0e:	f7ff ff87 	bl	8001b20 <inGame>
				if(length == 5){
 8001c12:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <fsm_ingame+0x148>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d103      	bne.n	8001c22 <fsm_ingame+0x8a>
					setTimer3(200);
 8001c1a:	20c8      	movs	r0, #200	; 0xc8
 8001c1c:	f003 f846 	bl	8004cac <setTimer3>
			break;
 8001c20:	e050      	b.n	8001cc4 <fsm_ingame+0x12c>
				}else if(length == 10){
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <fsm_ingame+0x148>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d103      	bne.n	8001c32 <fsm_ingame+0x9a>
					setTimer3(100);
 8001c2a:	2064      	movs	r0, #100	; 0x64
 8001c2c:	f003 f83e 	bl	8004cac <setTimer3>
			break;
 8001c30:	e048      	b.n	8001cc4 <fsm_ingame+0x12c>
				}else if(length == 15){
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <fsm_ingame+0x148>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b0f      	cmp	r3, #15
 8001c38:	d144      	bne.n	8001cc4 <fsm_ingame+0x12c>
					setTimer3(50);
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f003 f836 	bl	8004cac <setTimer3>
			break;
 8001c40:	e040      	b.n	8001cc4 <fsm_ingame+0x12c>
			counter_time_score++;
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <fsm_ingame+0x13c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <fsm_ingame+0x13c>)
 8001c4a:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <fsm_ingame+0x140>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d104      	bne.n	8001c5e <fsm_ingame+0xc6>
				flag_timer4 = 0;
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <fsm_ingame+0x140>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001c5a:	f7ff fefd 	bl	8001a58 <environment_cal>
			if(flag_timer3 == 1){
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <fsm_ingame+0x144>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d130      	bne.n	8001cc8 <fsm_ingame+0x130>
				flag_timer3 = 0;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <fsm_ingame+0x144>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	801a      	strh	r2, [r3, #0]
				inGame();
 8001c6c:	f7ff ff58 	bl	8001b20 <inGame>
				if(counter_time == 50){
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <fsm_ingame+0x14c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b32      	cmp	r3, #50	; 0x32
 8001c76:	d103      	bne.n	8001c80 <fsm_ingame+0xe8>
					setTimer3(200);
 8001c78:	20c8      	movs	r0, #200	; 0xc8
 8001c7a:	f003 f817 	bl	8004cac <setTimer3>
			break;
 8001c7e:	e023      	b.n	8001cc8 <fsm_ingame+0x130>
				}else if(counter_time == 35){
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <fsm_ingame+0x14c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b23      	cmp	r3, #35	; 0x23
 8001c86:	d103      	bne.n	8001c90 <fsm_ingame+0xf8>
					setTimer3(100);
 8001c88:	2064      	movs	r0, #100	; 0x64
 8001c8a:	f003 f80f 	bl	8004cac <setTimer3>
			break;
 8001c8e:	e01b      	b.n	8001cc8 <fsm_ingame+0x130>
				}else if(counter_time == 20){
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <fsm_ingame+0x14c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b14      	cmp	r3, #20
 8001c96:	d103      	bne.n	8001ca0 <fsm_ingame+0x108>
					setTimer3(50);
 8001c98:	2032      	movs	r0, #50	; 0x32
 8001c9a:	f003 f807 	bl	8004cac <setTimer3>
			break;
 8001c9e:	e013      	b.n	8001cc8 <fsm_ingame+0x130>
				}else if(counter_time <= 0){
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <fsm_ingame+0x14c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	dc0f      	bgt.n	8001cc8 <fsm_ingame+0x130>
					status = WIN;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <fsm_ingame+0x138>)
 8001caa:	2211      	movs	r2, #17
 8001cac:	601a      	str	r2, [r3, #0]
					youwin_lcd();
 8001cae:	f000 ffef 	bl	8002c90 <youwin_lcd>
					user_history();
 8001cb2:	f004 fd65 	bl	8006780 <user_history>
					snake_init();
 8001cb6:	f002 fdf9 	bl	80048ac <snake_init>
			break;
 8001cba:	e005      	b.n	8001cc8 <fsm_ingame+0x130>
			break;
 8001cbc:	bf00      	nop
 8001cbe:	e004      	b.n	8001cca <fsm_ingame+0x132>
			break;
 8001cc0:	bf00      	nop
 8001cc2:	e002      	b.n	8001cca <fsm_ingame+0x132>
			break;
 8001cc4:	bf00      	nop
 8001cc6:	e000      	b.n	8001cca <fsm_ingame+0x132>
			break;
 8001cc8:	bf00      	nop
	}
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000029c 	.word	0x2000029c
 8001cd4:	200002a4 	.word	0x200002a4
 8001cd8:	200003b2 	.word	0x200003b2
 8001cdc:	200003ac 	.word	0x200003ac
 8001ce0:	2000004c 	.word	0x2000004c
 8001ce4:	200002a8 	.word	0x200002a8

08001ce8 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	; 0x38
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	615a      	str	r2, [r3, #20]
 8001d12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001d14:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d16:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001d1a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d1e:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <MX_FSMC_Init+0xf0>)
 8001d20:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d36:	2210      	movs	r2, #16
 8001d38:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001d7a:	230f      	movs	r3, #15
 8001d7c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001d7e:	230f      	movs	r3, #15
 8001d80:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001d82:	233c      	movs	r3, #60	; 0x3c
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001d8e:	2311      	movs	r3, #17
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001d92:	2300      	movs	r3, #0
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001d96:	2308      	movs	r3, #8
 8001d98:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001d9a:	230f      	movs	r3, #15
 8001d9c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001d9e:	2309      	movs	r3, #9
 8001da0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001da6:	2310      	movs	r3, #16
 8001da8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001daa:	2311      	movs	r3, #17
 8001dac:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001db2:	463a      	mov	r2, r7
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <MX_FSMC_Init+0xec>)
 8001dbc:	f008 fb10 	bl	800a3e0 <HAL_SRAM_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001dc6:	f002 fd19 	bl	80047fc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001dca:	bf00      	nop
 8001dcc:	3738      	adds	r7, #56	; 0x38
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001a4 	.word	0x200001a4
 8001dd8:	a0000104 	.word	0xa0000104
 8001ddc:	00000000 	.word	0x00000000

08001de0 <distance_of_two_point>:
 */

#include "fun_touch.h"

// Tinh khoang cach hai diem
float distance_of_two_point(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4604      	mov	r4, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	4603      	mov	r3, r0
 8001df4:	80bb      	strh	r3, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	803b      	strh	r3, [r7, #0]
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001e78 <distance_of_two_point+0x98>
 8001e12:	ec43 2b10 	vmov	d0, r2, r3
 8001e16:	f00b fc6b 	bl	800d6f0 <pow>
 8001e1a:	ec55 4b10 	vmov	r4, r5, d0
 8001e1e:	88ba      	ldrh	r2, [r7, #4]
 8001e20:	883b      	ldrh	r3, [r7, #0]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb7d 	bl	8000524 <__aeabi_i2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001e78 <distance_of_two_point+0x98>
 8001e32:	ec43 2b10 	vmov	d0, r2, r3
 8001e36:	f00b fc5b 	bl	800d6f0 <pow>
 8001e3a:	ec53 2b10 	vmov	r2, r3, d0
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4629      	mov	r1, r5
 8001e42:	f7fe fa23 	bl	800028c <__adddf3>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	ec43 2b17 	vmov	d7, r2, r3
 8001e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e52:	eef0 0a67 	vmov.f32	s1, s15
 8001e56:	f00b fcbb 	bl	800d7d0 <sqrt>
 8001e5a:	ec53 2b10 	vmov	r2, r3, d0
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fec1 	bl	8000be8 <__aeabi_d2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	ee07 3a90 	vmov	s15, r3
}
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bdb0      	pop	{r4, r5, r7, pc}
 8001e76:	bf00      	nop
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40000000 	.word	0x40000000

08001e80 <is_touch_right>:

int is_touch_right(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001e84:	f004 fbb0 	bl	80065e8 <touch_IsTouched>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <is_touch_right+0x12>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e018      	b.n	8001ec4 <is_touch_right+0x44>
	return (touch_GetX() > POS_X_RIGHT
 8001e92:	f004 fbbb 	bl	800660c <touch_GetX>
 8001e96:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
			&& touch_GetY() > POS_Y_RIGHT
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001e98:	2ba5      	cmp	r3, #165	; 0xa5
 8001e9a:	d912      	bls.n	8001ec2 <is_touch_right+0x42>
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
 8001e9c:	f004 fbb6 	bl	800660c <touch_GetX>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2bea      	cmp	r3, #234	; 0xea
 8001ea4:	d80d      	bhi.n	8001ec2 <is_touch_right+0x42>
			&& touch_GetY() > POS_Y_RIGHT
 8001ea6:	f004 fbbd 	bl	8006624 <touch_GetY>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001eb0:	d307      	bcc.n	8001ec2 <is_touch_right+0x42>
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001eb2:	f004 fbb7 	bl	8006624 <touch_GetY>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001ebc:	d801      	bhi.n	8001ec2 <is_touch_right+0x42>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <is_touch_right+0x44>
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <is_touch_left>:

int is_touch_left(){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001ecc:	f004 fb8c 	bl	80065e8 <touch_IsTouched>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <is_touch_left+0x12>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e018      	b.n	8001f0c <is_touch_left+0x44>
	return (touch_GetX() > POS_X_LEFT
 8001eda:	f004 fb97 	bl	800660c <touch_GetX>
 8001ede:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
			&& touch_GetY() > POS_Y_LEFT
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d912      	bls.n	8001f0a <is_touch_left+0x42>
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
 8001ee4:	f004 fb92 	bl	800660c <touch_GetX>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b4a      	cmp	r3, #74	; 0x4a
 8001eec:	d80d      	bhi.n	8001f0a <is_touch_left+0x42>
			&& touch_GetY() > POS_Y_LEFT
 8001eee:	f004 fb99 	bl	8006624 <touch_GetY>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001ef8:	d307      	bcc.n	8001f0a <is_touch_left+0x42>
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001efa:	f004 fb93 	bl	8006624 <touch_GetY>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001f04:	d801      	bhi.n	8001f0a <is_touch_left+0x42>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <is_touch_left+0x44>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <is_touch_up>:

int is_touch_up(){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001f14:	f004 fb68 	bl	80065e8 <touch_IsTouched>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <is_touch_up+0x12>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e016      	b.n	8001f50 <is_touch_up+0x40>
	return (touch_GetX() > POS_X_UP
 8001f22:	f004 fb73 	bl	800660c <touch_GetX>
 8001f26:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
			&& touch_GetY() > POS_Y_UP
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001f28:	2b55      	cmp	r3, #85	; 0x55
 8001f2a:	d910      	bls.n	8001f4e <is_touch_up+0x3e>
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
 8001f2c:	f004 fb6e 	bl	800660c <touch_GetX>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b9a      	cmp	r3, #154	; 0x9a
 8001f34:	d80b      	bhi.n	8001f4e <is_touch_up+0x3e>
			&& touch_GetY() > POS_Y_UP
 8001f36:	f004 fb75 	bl	8006624 <touch_GetY>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2bcd      	cmp	r3, #205	; 0xcd
 8001f3e:	d906      	bls.n	8001f4e <is_touch_up+0x3e>
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001f40:	f004 fb70 	bl	8006624 <touch_GetY>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2bfe      	cmp	r3, #254	; 0xfe
 8001f48:	d801      	bhi.n	8001f4e <is_touch_up+0x3e>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <is_touch_up+0x40>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <is_touch_down>:

int is_touch_down(){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001f58:	f004 fb46 	bl	80065e8 <touch_IsTouched>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <is_touch_down+0x12>
 8001f62:	2300      	movs	r3, #0
 8001f64:	e018      	b.n	8001f98 <is_touch_down+0x44>
	return (touch_GetX() > POS_X_DOWN
 8001f66:	f004 fb51 	bl	800660c <touch_GetX>
 8001f6a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
			&& touch_GetY() > POS_Y_DOWN
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001f6c:	2b55      	cmp	r3, #85	; 0x55
 8001f6e:	d912      	bls.n	8001f96 <is_touch_down+0x42>
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
 8001f70:	f004 fb4c 	bl	800660c <touch_GetX>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b9a      	cmp	r3, #154	; 0x9a
 8001f78:	d80d      	bhi.n	8001f96 <is_touch_down+0x42>
			&& touch_GetY() > POS_Y_DOWN
 8001f7a:	f004 fb53 	bl	8006624 <touch_GetY>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001f84:	d307      	bcc.n	8001f96 <is_touch_down+0x42>
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001f86:	f004 fb4d 	bl	8006624 <touch_GetY>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001f90:	d801      	bhi.n	8001f96 <is_touch_down+0x42>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <is_touch_down+0x44>
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <is_touch_quit>:

int is_touch_quit(){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001fa0:	f004 fb22 	bl	80065e8 <touch_IsTouched>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <is_touch_quit+0x12>
 8001faa:	2300      	movs	r3, #0
 8001fac:	e017      	b.n	8001fde <is_touch_quit+0x42>
	return (touch_GetX() > POS_X_FORTH
 8001fae:	f004 fb2d 	bl	800660c <touch_GetX>
 8001fb2:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001fb4:	2b41      	cmp	r3, #65	; 0x41
 8001fb6:	d911      	bls.n	8001fdc <is_touch_quit+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8001fb8:	f004 fb28 	bl	800660c <touch_GetX>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2bb8      	cmp	r3, #184	; 0xb8
 8001fc0:	d80c      	bhi.n	8001fdc <is_touch_quit+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8001fc2:	f004 fb2f 	bl	8006624 <touch_GetY>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2bfa      	cmp	r3, #250	; 0xfa
 8001fca:	d907      	bls.n	8001fdc <is_touch_quit+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001fcc:	f004 fb2a 	bl	8006624 <touch_GetY>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001fd6:	d801      	bhi.n	8001fdc <is_touch_quit+0x40>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <is_touch_quit+0x42>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <is_touch_quit_end>:

int is_touch_quit_end(){
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001fe6:	f004 faff 	bl	80065e8 <touch_IsTouched>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <is_touch_quit_end+0x12>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e016      	b.n	8002022 <is_touch_quit_end+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001ff4:	f004 fb0a 	bl	800660c <touch_GetX>
 8001ff8:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001ffa:	2b41      	cmp	r3, #65	; 0x41
 8001ffc:	d910      	bls.n	8002020 <is_touch_quit_end+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001ffe:	f004 fb05 	bl	800660c <touch_GetX>
 8002002:	4603      	mov	r3, r0
 8002004:	2bb8      	cmp	r3, #184	; 0xb8
 8002006:	d80b      	bhi.n	8002020 <is_touch_quit_end+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8002008:	f004 fb0c 	bl	8006624 <touch_GetY>
 800200c:	4603      	mov	r3, r0
 800200e:	2bc8      	cmp	r3, #200	; 0xc8
 8002010:	d906      	bls.n	8002020 <is_touch_quit_end+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002012:	f004 fb07 	bl	8006624 <touch_GetY>
 8002016:	4603      	mov	r3, r0
 8002018:	2bea      	cmp	r3, #234	; 0xea
 800201a:	d801      	bhi.n	8002020 <is_touch_quit_end+0x3e>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <is_touch_quit_end+0x40>
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	bd80      	pop	{r7, pc}

08002026 <is_touch_resume>:

int is_touch_resume(){
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800202a:	f004 fadd 	bl	80065e8 <touch_IsTouched>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <is_touch_resume+0x12>
 8002034:	2300      	movs	r3, #0
 8002036:	e016      	b.n	8002066 <is_touch_resume+0x40>
	return (touch_GetX() > POS_X_SECOND
 8002038:	f004 fae8 	bl	800660c <touch_GetX>
 800203c:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 800203e:	2b41      	cmp	r3, #65	; 0x41
 8002040:	d910      	bls.n	8002064 <is_touch_resume+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8002042:	f004 fae3 	bl	800660c <touch_GetX>
 8002046:	4603      	mov	r3, r0
 8002048:	2bb8      	cmp	r3, #184	; 0xb8
 800204a:	d80b      	bhi.n	8002064 <is_touch_resume+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 800204c:	f004 faea 	bl	8006624 <touch_GetY>
 8002050:	4603      	mov	r3, r0
 8002052:	2b96      	cmp	r3, #150	; 0x96
 8002054:	d906      	bls.n	8002064 <is_touch_resume+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8002056:	f004 fae5 	bl	8006624 <touch_GetY>
 800205a:	4603      	mov	r3, r0
 800205c:	2bb8      	cmp	r3, #184	; 0xb8
 800205e:	d801      	bhi.n	8002064 <is_touch_resume+0x3e>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <is_touch_resume+0x40>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <is_touch_pause>:

int is_touch_pause(){
 800206a:	b598      	push	{r3, r4, r7, lr}
 800206c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800206e:	f004 fabb 	bl	80065e8 <touch_IsTouched>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <is_touch_pause+0x12>
 8002078:	2300      	movs	r3, #0
 800207a:	e018      	b.n	80020ae <is_touch_pause+0x44>
	return distance_of_two_point(touch_GetX(), touch_GetY(), POS_X_PAUSE, POS_Y_PAUSE) < BTN_HEIGHT / 2;
 800207c:	f004 fac6 	bl	800660c <touch_GetX>
 8002080:	4603      	mov	r3, r0
 8002082:	461c      	mov	r4, r3
 8002084:	f004 face 	bl	8006624 <touch_GetY>
 8002088:	4603      	mov	r3, r0
 800208a:	4619      	mov	r1, r3
 800208c:	23e6      	movs	r3, #230	; 0xe6
 800208e:	22c8      	movs	r2, #200	; 0xc8
 8002090:	4620      	mov	r0, r4
 8002092:	f7ff fea5 	bl	8001de0 <distance_of_two_point>
 8002096:	eef0 7a40 	vmov.f32	s15, s0
 800209a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800209e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a6:	bf4c      	ite	mi
 80020a8:	2301      	movmi	r3, #1
 80020aa:	2300      	movpl	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd98      	pop	{r3, r4, r7, pc}

080020b2 <is_touch_newGame>:

int is_touch_newGame(){
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80020b6:	f004 fa97 	bl	80065e8 <touch_IsTouched>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <is_touch_newGame+0x12>
 80020c0:	2300      	movs	r3, #0
 80020c2:	e016      	b.n	80020f2 <is_touch_newGame+0x40>
	return (touch_GetX() > POS_X_SECOND
 80020c4:	f004 faa2 	bl	800660c <touch_GetX>
 80020c8:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80020ca:	2b41      	cmp	r3, #65	; 0x41
 80020cc:	d910      	bls.n	80020f0 <is_touch_newGame+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 80020ce:	f004 fa9d 	bl	800660c <touch_GetX>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2bb8      	cmp	r3, #184	; 0xb8
 80020d6:	d80b      	bhi.n	80020f0 <is_touch_newGame+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 80020d8:	f004 faa4 	bl	8006624 <touch_GetY>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b96      	cmp	r3, #150	; 0x96
 80020e0:	d906      	bls.n	80020f0 <is_touch_newGame+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80020e2:	f004 fa9f 	bl	8006624 <touch_GetY>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2bb8      	cmp	r3, #184	; 0xb8
 80020ea:	d801      	bhi.n	80020f0 <is_touch_newGame+0x3e>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <is_touch_newGame+0x40>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <is_touch_continue>:

int is_touch_continue(){
 80020f6:	b580      	push	{r7, lr}
 80020f8:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80020fa:	f004 fa75 	bl	80065e8 <touch_IsTouched>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <is_touch_continue+0x12>
 8002104:	2300      	movs	r3, #0
 8002106:	e016      	b.n	8002136 <is_touch_continue+0x40>
	return (touch_GetX() > POS_X_THIRD
 8002108:	f004 fa80 	bl	800660c <touch_GetX>
 800210c:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 800210e:	2b41      	cmp	r3, #65	; 0x41
 8002110:	d910      	bls.n	8002134 <is_touch_continue+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8002112:	f004 fa7b 	bl	800660c <touch_GetX>
 8002116:	4603      	mov	r3, r0
 8002118:	2bb8      	cmp	r3, #184	; 0xb8
 800211a:	d80b      	bhi.n	8002134 <is_touch_continue+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 800211c:	f004 fa82 	bl	8006624 <touch_GetY>
 8002120:	4603      	mov	r3, r0
 8002122:	2bc8      	cmp	r3, #200	; 0xc8
 8002124:	d906      	bls.n	8002134 <is_touch_continue+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002126:	f004 fa7d 	bl	8006624 <touch_GetY>
 800212a:	4603      	mov	r3, r0
 800212c:	2bea      	cmp	r3, #234	; 0xea
 800212e:	d801      	bhi.n	8002134 <is_touch_continue+0x3e>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <is_touch_continue+0x40>
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}

0800213a <is_touch_highScore>:

int is_touch_highScore(){
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800213e:	f004 fa53 	bl	80065e8 <touch_IsTouched>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <is_touch_highScore+0x12>
 8002148:	2300      	movs	r3, #0
 800214a:	e017      	b.n	800217c <is_touch_highScore+0x42>
	return (touch_GetX() > POS_X_FORTH
 800214c:	f004 fa5e 	bl	800660c <touch_GetX>
 8002150:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8002152:	2b41      	cmp	r3, #65	; 0x41
 8002154:	d911      	bls.n	800217a <is_touch_highScore+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8002156:	f004 fa59 	bl	800660c <touch_GetX>
 800215a:	4603      	mov	r3, r0
 800215c:	2bb8      	cmp	r3, #184	; 0xb8
 800215e:	d80c      	bhi.n	800217a <is_touch_highScore+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8002160:	f004 fa60 	bl	8006624 <touch_GetY>
 8002164:	4603      	mov	r3, r0
 8002166:	2bfa      	cmp	r3, #250	; 0xfa
 8002168:	d907      	bls.n	800217a <is_touch_highScore+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 800216a:	f004 fa5b 	bl	8006624 <touch_GetY>
 800216e:	4603      	mov	r3, r0
 8002170:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8002174:	d801      	bhi.n	800217a <is_touch_highScore+0x40>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <is_touch_highScore+0x42>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}

08002180 <is_touch_classic>:

int is_touch_classic(){
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002184:	f004 fa30 	bl	80065e8 <touch_IsTouched>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <is_touch_classic+0x12>
 800218e:	2300      	movs	r3, #0
 8002190:	e016      	b.n	80021c0 <is_touch_classic+0x40>
	return (touch_GetX() > POS_X_FIRST
 8002192:	f004 fa3b 	bl	800660c <touch_GetX>
 8002196:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8002198:	2b41      	cmp	r3, #65	; 0x41
 800219a:	d910      	bls.n	80021be <is_touch_classic+0x3e>
			&& touch_GetX() < POS_X_FIRST + WIDTH
 800219c:	f004 fa36 	bl	800660c <touch_GetX>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2bb8      	cmp	r3, #184	; 0xb8
 80021a4:	d80b      	bhi.n	80021be <is_touch_classic+0x3e>
			&& touch_GetY() > POS_Y_FIRST
 80021a6:	f004 fa3d 	bl	8006624 <touch_GetY>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b64      	cmp	r3, #100	; 0x64
 80021ae:	d906      	bls.n	80021be <is_touch_classic+0x3e>
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 80021b0:	f004 fa38 	bl	8006624 <touch_GetY>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b86      	cmp	r3, #134	; 0x86
 80021b8:	d801      	bhi.n	80021be <is_touch_classic+0x3e>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <is_touch_classic+0x40>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <is_touch_speed>:

int is_touch_speed(){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80021c8:	f004 fa0e 	bl	80065e8 <touch_IsTouched>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <is_touch_speed+0x12>
 80021d2:	2300      	movs	r3, #0
 80021d4:	e016      	b.n	8002204 <is_touch_speed+0x40>
	return (touch_GetX() > POS_X_SECOND
 80021d6:	f004 fa19 	bl	800660c <touch_GetX>
 80021da:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80021dc:	2b41      	cmp	r3, #65	; 0x41
 80021de:	d910      	bls.n	8002202 <is_touch_speed+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 80021e0:	f004 fa14 	bl	800660c <touch_GetX>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2bb8      	cmp	r3, #184	; 0xb8
 80021e8:	d80b      	bhi.n	8002202 <is_touch_speed+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 80021ea:	f004 fa1b 	bl	8006624 <touch_GetY>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b96      	cmp	r3, #150	; 0x96
 80021f2:	d906      	bls.n	8002202 <is_touch_speed+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80021f4:	f004 fa16 	bl	8006624 <touch_GetY>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2bb8      	cmp	r3, #184	; 0xb8
 80021fc:	d801      	bhi.n	8002202 <is_touch_speed+0x3e>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <is_touch_speed+0x40>
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}

08002208 <is_touch_time>:

int is_touch_time(){
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800220c:	f004 f9ec 	bl	80065e8 <touch_IsTouched>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <is_touch_time+0x12>
 8002216:	2300      	movs	r3, #0
 8002218:	e016      	b.n	8002248 <is_touch_time+0x40>
	return (touch_GetX() > POS_X_THIRD
 800221a:	f004 f9f7 	bl	800660c <touch_GetX>
 800221e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002220:	2b41      	cmp	r3, #65	; 0x41
 8002222:	d910      	bls.n	8002246 <is_touch_time+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8002224:	f004 f9f2 	bl	800660c <touch_GetX>
 8002228:	4603      	mov	r3, r0
 800222a:	2bb8      	cmp	r3, #184	; 0xb8
 800222c:	d80b      	bhi.n	8002246 <is_touch_time+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 800222e:	f004 f9f9 	bl	8006624 <touch_GetY>
 8002232:	4603      	mov	r3, r0
 8002234:	2bc8      	cmp	r3, #200	; 0xc8
 8002236:	d906      	bls.n	8002246 <is_touch_time+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002238:	f004 f9f4 	bl	8006624 <touch_GetY>
 800223c:	4603      	mov	r3, r0
 800223e:	2bea      	cmp	r3, #234	; 0xea
 8002240:	d801      	bhi.n	8002246 <is_touch_time+0x3e>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <is_touch_time+0x40>
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}

0800224c <is_touch_char>:

int is_touch_char(){
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002250:	f004 f9ca 	bl	80065e8 <touch_IsTouched>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <is_touch_char+0x12>
 800225a:	2300      	movs	r3, #0
 800225c:	e017      	b.n	800228e <is_touch_char+0x42>
	return (touch_GetX() > POS_X_CHAR
 800225e:	f004 f9d5 	bl	800660c <touch_GetX>
 8002262:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_CHAR + CHAR_COL*CHAR_WIDTH
			&& touch_GetY() > POS_Y_CHAR
			&& touch_GetY() < POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT);
 8002264:	2b06      	cmp	r3, #6
 8002266:	d911      	bls.n	800228c <is_touch_char+0x40>
			&& touch_GetX() < POS_X_CHAR + CHAR_COL*CHAR_WIDTH
 8002268:	f004 f9d0 	bl	800660c <touch_GetX>
 800226c:	4603      	mov	r3, r0
 800226e:	2be9      	cmp	r3, #233	; 0xe9
 8002270:	d80c      	bhi.n	800228c <is_touch_char+0x40>
			&& touch_GetY() > POS_Y_CHAR
 8002272:	f004 f9d7 	bl	8006624 <touch_GetY>
 8002276:	4603      	mov	r3, r0
 8002278:	2b7c      	cmp	r3, #124	; 0x7c
 800227a:	d907      	bls.n	800228c <is_touch_char+0x40>
			&& touch_GetY() < POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT);
 800227c:	f004 f9d2 	bl	8006624 <touch_GetY>
 8002280:	4603      	mov	r3, r0
 8002282:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8002286:	d201      	bcs.n	800228c <is_touch_char+0x40>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <is_touch_char+0x42>
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	; 0x38
 8002298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
 80022ae:	4b89      	ldr	r3, [pc, #548]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a88      	ldr	r2, [pc, #544]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022b4:	f043 0310 	orr.w	r3, r3, #16
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b86      	ldr	r3, [pc, #536]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	4b82      	ldr	r3, [pc, #520]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a81      	ldr	r2, [pc, #516]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b7f      	ldr	r3, [pc, #508]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	4b7b      	ldr	r3, [pc, #492]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a7a      	ldr	r2, [pc, #488]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022ec:	f043 0320 	orr.w	r3, r3, #32
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b78      	ldr	r3, [pc, #480]	; (80024d4 <MX_GPIO_Init+0x240>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	4b74      	ldr	r3, [pc, #464]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a73      	ldr	r2, [pc, #460]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b71      	ldr	r3, [pc, #452]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a6c      	ldr	r2, [pc, #432]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <MX_GPIO_Init+0x240>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <MX_GPIO_Init+0x240>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a5e      	ldr	r2, [pc, #376]	; (80024d4 <MX_GPIO_Init+0x240>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	4b58      	ldr	r3, [pc, #352]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a57      	ldr	r2, [pc, #348]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <MX_GPIO_Init+0x240>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	2110      	movs	r1, #16
 800238e:	4852      	ldr	r0, [pc, #328]	; (80024d8 <MX_GPIO_Init+0x244>)
 8002390:	f005 fe0c 	bl	8007fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800239a:	4850      	ldr	r0, [pc, #320]	; (80024dc <MX_GPIO_Init+0x248>)
 800239c:	f005 fe06 	bl	8007fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023a6:	484e      	ldr	r0, [pc, #312]	; (80024e0 <MX_GPIO_Init+0x24c>)
 80023a8:	f005 fe00 	bl	8007fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80023ac:	2200      	movs	r2, #0
 80023ae:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80023b2:	484c      	ldr	r0, [pc, #304]	; (80024e4 <MX_GPIO_Init+0x250>)
 80023b4:	f005 fdfa 	bl	8007fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80023b8:	2200      	movs	r2, #0
 80023ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023be:	484a      	ldr	r0, [pc, #296]	; (80024e8 <MX_GPIO_Init+0x254>)
 80023c0:	f005 fdf4 	bl	8007fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2108      	movs	r1, #8
 80023c8:	4848      	ldr	r0, [pc, #288]	; (80024ec <MX_GPIO_Init+0x258>)
 80023ca:	f005 fdef 	bl	8007fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 80023ce:	2310      	movs	r3, #16
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	4619      	mov	r1, r3
 80023e4:	483c      	ldr	r0, [pc, #240]	; (80024d8 <MX_GPIO_Init+0x244>)
 80023e6:	f005 fc2d 	bl	8007c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80023ea:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002400:	4619      	mov	r1, r3
 8002402:	4836      	ldr	r0, [pc, #216]	; (80024dc <MX_GPIO_Init+0x248>)
 8002404:	f005 fc1e 	bl	8007c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 8002408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241a:	4619      	mov	r1, r3
 800241c:	4830      	ldr	r0, [pc, #192]	; (80024e0 <MX_GPIO_Init+0x24c>)
 800241e:	f005 fc11 	bl	8007c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 8002422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	4619      	mov	r1, r3
 800243a:	4829      	ldr	r0, [pc, #164]	; (80024e0 <MX_GPIO_Init+0x24c>)
 800243c:	f005 fc02 	bl	8007c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002440:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	4619      	mov	r1, r3
 8002458:	4822      	ldr	r0, [pc, #136]	; (80024e4 <MX_GPIO_Init+0x250>)
 800245a:	f005 fbf3 	bl	8007c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 800245e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002468:	2301      	movs	r3, #1
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002470:	4619      	mov	r1, r3
 8002472:	481a      	ldr	r0, [pc, #104]	; (80024dc <MX_GPIO_Init+0x248>)
 8002474:	f005 fbe6 	bl	8007c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248e:	4619      	mov	r1, r3
 8002490:	4815      	ldr	r0, [pc, #84]	; (80024e8 <MX_GPIO_Init+0x254>)
 8002492:	f005 fbd7 	bl	8007c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8002496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	4619      	mov	r1, r3
 80024aa:	480c      	ldr	r0, [pc, #48]	; (80024dc <MX_GPIO_Init+0x248>)
 80024ac:	f005 fbca 	bl	8007c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80024b0:	2308      	movs	r3, #8
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80024c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c4:	4619      	mov	r1, r3
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <MX_GPIO_Init+0x258>)
 80024c8:	f005 fbbc 	bl	8007c44 <HAL_GPIO_Init>

}
 80024cc:	bf00      	nop
 80024ce:	3738      	adds	r7, #56	; 0x38
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40021800 	.word	0x40021800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020c00 	.word	0x40020c00

080024f0 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <MX_I2C1_Init+0x50>)
 80024f6:	4a13      	ldr	r2, [pc, #76]	; (8002544 <MX_I2C1_Init+0x54>)
 80024f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_I2C1_Init+0x50>)
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <MX_I2C1_Init+0x58>)
 80024fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <MX_I2C1_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_I2C1_Init+0x50>)
 8002508:	2200      	movs	r2, #0
 800250a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <MX_I2C1_Init+0x50>)
 800250e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002512:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <MX_I2C1_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <MX_I2C1_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <MX_I2C1_Init+0x50>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_I2C1_Init+0x50>)
 8002528:	2200      	movs	r2, #0
 800252a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800252c:	4804      	ldr	r0, [pc, #16]	; (8002540 <MX_I2C1_Init+0x50>)
 800252e:	f005 fd57 	bl	8007fe0 <HAL_I2C_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002538:	f002 f960 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200002e0 	.word	0x200002e0
 8002544:	40005400 	.word	0x40005400
 8002548:	000186a0 	.word	0x000186a0

0800254c <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <home_lcd+0xa0>)
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800255a:	22f0      	movs	r2, #240	; 0xf0
 800255c:	2100      	movs	r1, #0
 800255e:	2000      	movs	r0, #0
 8002560:	f001 fc7e 	bl	8003e60 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002564:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	23b9      	movs	r3, #185	; 0xb9
 800256c:	22b9      	movs	r2, #185	; 0xb9
 800256e:	2196      	movs	r1, #150	; 0x96
 8002570:	2041      	movs	r0, #65	; 0x41
 8002572:	f001 f96b 	bl	800384c <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002576:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	23eb      	movs	r3, #235	; 0xeb
 800257e:	22b9      	movs	r2, #185	; 0xb9
 8002580:	21c8      	movs	r1, #200	; 0xc8
 8002582:	2041      	movs	r0, #65	; 0x41
 8002584:	f001 f962 	bl	800384c <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002588:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	f240 131d 	movw	r3, #285	; 0x11d
 8002592:	22b9      	movs	r2, #185	; 0xb9
 8002594:	21fa      	movs	r1, #250	; 0xfa
 8002596:	2041      	movs	r0, #65	; 0x41
 8002598:	f001 f958 	bl	800384c <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 800259c:	2301      	movs	r3, #1
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	2318      	movs	r3, #24
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	2300      	movs	r3, #0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <home_lcd+0xa4>)
 80025ac:	219b      	movs	r1, #155	; 0x9b
 80025ae:	2054      	movs	r0, #84	; 0x54
 80025b0:	f001 ff27 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 80025b4:	2301      	movs	r3, #1
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	2318      	movs	r3, #24
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	2300      	movs	r3, #0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2300      	movs	r3, #0
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <home_lcd+0xa8>)
 80025c4:	21cd      	movs	r1, #205	; 0xcd
 80025c6:	204d      	movs	r0, #77	; 0x4d
 80025c8:	f001 ff1b 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 80025cc:	2301      	movs	r3, #1
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	2318      	movs	r3, #24
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	2300      	movs	r3, #0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2300      	movs	r3, #0
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <home_lcd+0xac>)
 80025dc:	21ff      	movs	r1, #255	; 0xff
 80025de:	2048      	movs	r0, #72	; 0x48
 80025e0:	f001 ff0f 	bl	8004402 <lcd_ShowStr>
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	08011b50 	.word	0x08011b50
 80025f0:	0800e5d8 	.word	0x0800e5d8
 80025f4:	0800e5e0 	.word	0x0800e5e0
 80025f8:	0800e5ec 	.word	0x0800e5ec

080025fc <mode_game_lcd>:

void mode_game_lcd(){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 8002602:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <mode_game_lcd+0xd8>)
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800260a:	22f0      	movs	r2, #240	; 0xf0
 800260c:	2100      	movs	r1, #0
 800260e:	2000      	movs	r0, #0
 8002610:	f001 fc26 	bl	8003e60 <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 78, gImage_mode);
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <mode_game_lcd+0xdc>)
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	234e      	movs	r3, #78	; 0x4e
 800261a:	22f0      	movs	r2, #240	; 0xf0
 800261c:	2100      	movs	r1, #0
 800261e:	2000      	movs	r0, #0
 8002620:	f001 fc1e 	bl	8003e60 <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 8002624:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2387      	movs	r3, #135	; 0x87
 800262c:	22b9      	movs	r2, #185	; 0xb9
 800262e:	2164      	movs	r1, #100	; 0x64
 8002630:	2041      	movs	r0, #65	; 0x41
 8002632:	f001 f90b 	bl	800384c <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002636:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	23b9      	movs	r3, #185	; 0xb9
 800263e:	22b9      	movs	r2, #185	; 0xb9
 8002640:	2196      	movs	r1, #150	; 0x96
 8002642:	2041      	movs	r0, #65	; 0x41
 8002644:	f001 f902 	bl	800384c <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002648:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	23eb      	movs	r3, #235	; 0xeb
 8002650:	22b9      	movs	r2, #185	; 0xb9
 8002652:	21c8      	movs	r1, #200	; 0xc8
 8002654:	2041      	movs	r0, #65	; 0x41
 8002656:	f001 f8f9 	bl	800384c <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 800265a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f240 131d 	movw	r3, #285	; 0x11d
 8002664:	22b9      	movs	r2, #185	; 0xb9
 8002666:	21fa      	movs	r1, #250	; 0xfa
 8002668:	2041      	movs	r0, #65	; 0x41
 800266a:	f001 f8ef 	bl	800384c <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 800266e:	2301      	movs	r3, #1
 8002670:	9302      	str	r3, [sp, #8]
 8002672:	2318      	movs	r3, #24
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2300      	movs	r3, #0
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <mode_game_lcd+0xe0>)
 800267e:	2169      	movs	r1, #105	; 0x69
 8002680:	2054      	movs	r0, #84	; 0x54
 8002682:	f001 febe 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 8002686:	2301      	movs	r3, #1
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	2318      	movs	r3, #24
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2300      	movs	r3, #0
 8002694:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <mode_game_lcd+0xe4>)
 8002696:	219b      	movs	r1, #155	; 0x9b
 8002698:	2060      	movs	r0, #96	; 0x60
 800269a:	f001 feb2 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 800269e:	2301      	movs	r3, #1
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	2318      	movs	r3, #24
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	2300      	movs	r3, #0
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2300      	movs	r3, #0
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <mode_game_lcd+0xe8>)
 80026ae:	21cd      	movs	r1, #205	; 0xcd
 80026b0:	2060      	movs	r0, #96	; 0x60
 80026b2:	f001 fea6 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 80026b6:	2301      	movs	r3, #1
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	2318      	movs	r3, #24
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2300      	movs	r3, #0
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2300      	movs	r3, #0
 80026c4:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <mode_game_lcd+0xec>)
 80026c6:	21ff      	movs	r1, #255	; 0xff
 80026c8:	2064      	movs	r0, #100	; 0x64
 80026ca:	f001 fe9a 	bl	8004402 <lcd_ShowStr>
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	08037350 	.word	0x08037350
 80026d8:	0805cb50 	.word	0x0805cb50
 80026dc:	0800e5f8 	.word	0x0800e5f8
 80026e0:	0800e600 	.word	0x0800e600
 80026e4:	0800e608 	.word	0x0800e608
 80026e8:	0800e610 	.word	0x0800e610

080026ec <highscore_lcd>:

void highscore_lcd(){
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 80026f2:	4b61      	ldr	r3, [pc, #388]	; (8002878 <highscore_lcd+0x18c>)
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026fa:	22f0      	movs	r2, #240	; 0xf0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2000      	movs	r0, #0
 8002700:	f001 fbae 	bl	8003e60 <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 81, gImage_highscore);
 8002704:	4b5d      	ldr	r3, [pc, #372]	; (800287c <highscore_lcd+0x190>)
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2351      	movs	r3, #81	; 0x51
 800270a:	22f0      	movs	r2, #240	; 0xf0
 800270c:	2100      	movs	r1, #0
 800270e:	2000      	movs	r0, #0
 8002710:	f001 fba6 	bl	8003e60 <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 8002714:	2301      	movs	r3, #1
 8002716:	9302      	str	r3, [sp, #8]
 8002718:	2310      	movs	r3, #16
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2300      	movs	r3, #0
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2300      	movs	r3, #0
 8002722:	4a57      	ldr	r2, [pc, #348]	; (8002880 <highscore_lcd+0x194>)
 8002724:	2150      	movs	r1, #80	; 0x50
 8002726:	200a      	movs	r0, #10
 8002728:	f001 fe6b 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 800272c:	2301      	movs	r3, #1
 800272e:	9302      	str	r3, [sp, #8]
 8002730:	2310      	movs	r3, #16
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2300      	movs	r3, #0
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	4a52      	ldr	r2, [pc, #328]	; (8002884 <highscore_lcd+0x198>)
 800273c:	2150      	movs	r1, #80	; 0x50
 800273e:	203c      	movs	r0, #60	; 0x3c
 8002740:	f001 fe5f 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 8002744:	2301      	movs	r3, #1
 8002746:	9302      	str	r3, [sp, #8]
 8002748:	2310      	movs	r3, #16
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2300      	movs	r3, #0
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <highscore_lcd+0x19c>)
 8002754:	2150      	movs	r1, #80	; 0x50
 8002756:	20a0      	movs	r0, #160	; 0xa0
 8002758:	f001 fe53 	bl	8004402 <lcd_ShowStr>
	char c[10] = "";
 800275c:	2300      	movs	r3, #0
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	e051      	b.n	8002814 <highscore_lcd+0x128>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	3305      	adds	r3, #5
 8002774:	b29b      	uxth	r3, r3
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	b29c      	uxth	r4, r3
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	1d39      	adds	r1, r7, #4
 800277e:	220a      	movs	r2, #10
 8002780:	4618      	mov	r0, r3
 8002782:	f009 ff83 	bl	800c68c <itoa>
 8002786:	4602      	mov	r2, r0
 8002788:	2301      	movs	r3, #1
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2310      	movs	r3, #16
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2300      	movs	r3, #0
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	4621      	mov	r1, r4
 8002798:	200a      	movs	r0, #10
 800279a:	f001 fe32 	bl	8004402 <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	3305      	adds	r3, #5
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	b299      	uxth	r1, r3
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4a35      	ldr	r2, [pc, #212]	; (800288c <highscore_lcd+0x1a0>)
 80027b6:	441a      	add	r2, r3
 80027b8:	2301      	movs	r3, #1
 80027ba:	9302      	str	r3, [sp, #8]
 80027bc:	2310      	movs	r3, #16
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2300      	movs	r3, #0
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	203c      	movs	r0, #60	; 0x3c
 80027c8:	f001 fe1b 	bl	8004402 <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	3305      	adds	r3, #5
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	b29c      	uxth	r4, r3
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	492c      	ldr	r1, [pc, #176]	; (800288c <highscore_lcd+0x1a0>)
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	440b      	add	r3, r1
 80027e6:	330c      	adds	r3, #12
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	220a      	movs	r2, #10
 80027f0:	4619      	mov	r1, r3
 80027f2:	f009 ff4b 	bl	800c68c <itoa>
 80027f6:	4602      	mov	r2, r0
 80027f8:	2301      	movs	r3, #1
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	2310      	movs	r3, #16
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2300      	movs	r3, #0
 8002806:	4621      	mov	r1, r4
 8002808:	20a0      	movs	r0, #160	; 0xa0
 800280a:	f001 fdfa 	bl	8004402 <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	3301      	adds	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <highscore_lcd+0x1a4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	429a      	cmp	r2, r3
 800281c:	d9a8      	bls.n	8002770 <highscore_lcd+0x84>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 800281e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f240 131d 	movw	r3, #285	; 0x11d
 8002828:	22b9      	movs	r2, #185	; 0xb9
 800282a:	21fa      	movs	r1, #250	; 0xfa
 800282c:	2041      	movs	r0, #65	; 0x41
 800282e:	f001 f80d 	bl	800384c <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002832:	2301      	movs	r3, #1
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	2318      	movs	r3, #24
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2300      	movs	r3, #0
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <highscore_lcd+0x1a8>)
 8002842:	21ff      	movs	r1, #255	; 0xff
 8002844:	2064      	movs	r0, #100	; 0x64
 8002846:	f001 fddc 	bl	8004402 <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 800284a:	2300      	movs	r3, #0
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	f240 131d 	movw	r3, #285	; 0x11d
 8002852:	22b9      	movs	r2, #185	; 0xb9
 8002854:	21fa      	movs	r1, #250	; 0xfa
 8002856:	2041      	movs	r0, #65	; 0x41
 8002858:	f001 f8c9 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002864:	22b8      	movs	r2, #184	; 0xb8
 8002866:	21fb      	movs	r1, #251	; 0xfb
 8002868:	2042      	movs	r0, #66	; 0x42
 800286a:	f001 f8c0 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bd90      	pop	{r4, r7, pc}
 8002876:	bf00      	nop
 8002878:	08037350 	.word	0x08037350
 800287c:	08065d90 	.word	0x08065d90
 8002880:	0800e618 	.word	0x0800e618
 8002884:	0800e620 	.word	0x0800e620
 8002888:	0800e628 	.word	0x0800e628
 800288c:	200001f4 	.word	0x200001f4
 8002890:	20000280 	.word	0x20000280
 8002894:	0800e610 	.word	0x0800e610

08002898 <game_lcd>:

void game_lcd(){
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 800289e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028a2:	f000 ffa1 	bl	80037e8 <lcd_Clear>
	lcd_Fill(0, 0, 239, POS_Y_MIN - 1, LGRAYBLUE);
 80028a6:	f24a 6351 	movw	r3, #42577	; 0xa651
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2311      	movs	r3, #17
 80028ae:	22ef      	movs	r2, #239	; 0xef
 80028b0:	2100      	movs	r1, #0
 80028b2:	2000      	movs	r0, #0
 80028b4:	f000 ffca 	bl	800384c <lcd_Fill>
	lcd_Fill(0, POS_Y_MAX + 1, 239, 319, LGRAYBLUE);
 80028b8:	f24a 6351 	movw	r3, #42577	; 0xa651
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f240 133f 	movw	r3, #319	; 0x13f
 80028c2:	22ef      	movs	r2, #239	; 0xef
 80028c4:	21c8      	movs	r1, #200	; 0xc8
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 ffc0 	bl	800384c <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 80028cc:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	f240 133b 	movw	r3, #315	; 0x13b
 80028d6:	224b      	movs	r2, #75	; 0x4b
 80028d8:	f240 1109 	movw	r1, #265	; 0x109
 80028dc:	2005      	movs	r0, #5
 80028de:	f000 ffb5 	bl	800384c <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 80028e2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f240 133b 	movw	r3, #315	; 0x13b
 80028ec:	22eb      	movs	r2, #235	; 0xeb
 80028ee:	f240 1109 	movw	r1, #265	; 0x109
 80028f2:	20a5      	movs	r0, #165	; 0xa5
 80028f4:	f000 ffaa 	bl	800384c <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 80028f8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	23ff      	movs	r3, #255	; 0xff
 8002900:	229b      	movs	r2, #155	; 0x9b
 8002902:	21cd      	movs	r1, #205	; 0xcd
 8002904:	2055      	movs	r0, #85	; 0x55
 8002906:	f000 ffa1 	bl	800384c <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 800290a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	f240 133b 	movw	r3, #315	; 0x13b
 8002914:	229b      	movs	r2, #155	; 0x9b
 8002916:	f240 1109 	movw	r1, #265	; 0x109
 800291a:	2055      	movs	r0, #85	; 0x55
 800291c:	f000 ff96 	bl	800384c <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 8002920:	2301      	movs	r3, #1
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800292a:	21e6      	movs	r1, #230	; 0xe6
 800292c:	20c8      	movs	r0, #200	; 0xc8
 800292e:	f001 fcfc 	bl	800432a <lcd_DrawCircle>
	lcd_ShowStr(POS_X_TEMP, POS_Y_TEMP, "TEMP:", BLACK, BLACK, 12, 1);
 8002932:	2301      	movs	r3, #1
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	230c      	movs	r3, #12
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2300      	movs	r3, #0
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <game_lcd+0x148>)
 8002942:	2103      	movs	r1, #3
 8002944:	200a      	movs	r0, #10
 8002946:	f001 fd5c 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_TEMP + 65, POS_Y_TEMP, "oC", BLACK, BLACK, 12, 1);
 800294a:	2301      	movs	r3, #1
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	230c      	movs	r3, #12
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2300      	movs	r3, #0
 8002958:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <game_lcd+0x14c>)
 800295a:	2103      	movs	r1, #3
 800295c:	204b      	movs	r0, #75	; 0x4b
 800295e:	f001 fd50 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM, POS_Y_TEMP, "HUM:", BLACK, BLACK, 12, 1);
 8002962:	2301      	movs	r3, #1
 8002964:	9302      	str	r3, [sp, #8]
 8002966:	230c      	movs	r3, #12
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2300      	movs	r3, #0
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2300      	movs	r3, #0
 8002970:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <game_lcd+0x150>)
 8002972:	2103      	movs	r1, #3
 8002974:	206e      	movs	r0, #110	; 0x6e
 8002976:	f001 fd44 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM + 40, POS_Y_TEMP, "%", BLACK, BLACK, 12, 1);
 800297a:	2301      	movs	r3, #1
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	230c      	movs	r3, #12
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	2300      	movs	r3, #0
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2300      	movs	r3, #0
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <game_lcd+0x154>)
 800298a:	2103      	movs	r1, #3
 800298c:	2096      	movs	r0, #150	; 0x96
 800298e:	f001 fd38 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_LIGHT, POS_Y_TEMP, "LIGHT:", BLACK, BLACK, 12, 1);
 8002992:	2301      	movs	r3, #1
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	230c      	movs	r3, #12
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2300      	movs	r3, #0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2300      	movs	r3, #0
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <game_lcd+0x158>)
 80029a2:	2103      	movs	r1, #3
 80029a4:	20aa      	movs	r0, #170	; 0xaa
 80029a6:	f001 fd2c 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 80029aa:	2301      	movs	r3, #1
 80029ac:	9302      	str	r3, [sp, #8]
 80029ae:	2310      	movs	r3, #16
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	2300      	movs	r3, #0
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2300      	movs	r3, #0
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <game_lcd+0x15c>)
 80029ba:	21de      	movs	r1, #222	; 0xde
 80029bc:	20b6      	movs	r0, #182	; 0xb6
 80029be:	f001 fd20 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 80029c2:	2301      	movs	r3, #1
 80029c4:	9302      	str	r3, [sp, #8]
 80029c6:	2310      	movs	r3, #16
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2300      	movs	r3, #0
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2300      	movs	r3, #0
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <game_lcd+0x160>)
 80029d2:	21cd      	movs	r1, #205	; 0xcd
 80029d4:	2005      	movs	r0, #5
 80029d6:	f001 fd14 	bl	8004402 <lcd_ShowStr>
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	0800e630 	.word	0x0800e630
 80029e4:	0800e638 	.word	0x0800e638
 80029e8:	0800e63c 	.word	0x0800e63c
 80029ec:	0800e644 	.word	0x0800e644
 80029f0:	0800e648 	.word	0x0800e648
 80029f4:	0800e650 	.word	0x0800e650
 80029f8:	0800e658 	.word	0x0800e658

080029fc <environment_lcd>:

void environment_lcd(){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af04      	add	r7, sp, #16
	lcd_ShowFloatNum(POS_X_TEMP + 30, POS_Y_TEMP, current_temp, 4, BLACK, LGRAYBLUE, 12);
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <environment_lcd+0x64>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	230c      	movs	r3, #12
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2300      	movs	r3, #0
 8002a14:	2204      	movs	r2, #4
 8002a16:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	2028      	movs	r0, #40	; 0x28
 8002a1e:	f001 f997 	bl	8003d50 <lcd_ShowFloatNum>
	lcd_ShowIntNum(POS_X_HUM + 25, POS_Y_TEMP, current_hum, 2, BLACK, LGRAYBLUE, 12);
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <environment_lcd+0x68>)
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	230c      	movs	r3, #12
 8002a28:	9302      	str	r3, [sp, #8]
 8002a2a:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2302      	movs	r3, #2
 8002a36:	2103      	movs	r1, #3
 8002a38:	2087      	movs	r0, #135	; 0x87
 8002a3a:	f001 f90b 	bl	8003c54 <lcd_ShowIntNum>
	lcd_ShowIntNum(POS_X_LIGHT + 37, POS_Y_TEMP, current_light, 4, BLACK, LGRAYBLUE, 12);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <environment_lcd+0x6c>)
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	230c      	movs	r3, #12
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2304      	movs	r3, #4
 8002a52:	2103      	movs	r1, #3
 8002a54:	20cf      	movs	r0, #207	; 0xcf
 8002a56:	f001 f8fd 	bl	8003c54 <lcd_ShowIntNum>
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000004 	.word	0x20000004
 8002a64:	20000008 	.word	0x20000008
 8002a68:	2000000a 	.word	0x2000000a

08002a6c <score_lcd>:

void score_lcd(){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <score_lcd+0x2c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	2310      	movs	r3, #16
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2305      	movs	r3, #5
 8002a88:	21dd      	movs	r1, #221	; 0xdd
 8002a8a:	2005      	movs	r0, #5
 8002a8c:	f001 f8e2 	bl	8003c54 <lcd_ShowIntNum>
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <pause_lcd>:

void pause_lcd(){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <pause_lcd+0x84>)
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002aaa:	22f0      	movs	r2, #240	; 0xf0
 8002aac:	2100      	movs	r1, #0
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f001 f9d6 	bl	8003e60 <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 84, gImage_pause);
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <pause_lcd+0x88>)
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2354      	movs	r3, #84	; 0x54
 8002aba:	22f0      	movs	r2, #240	; 0xf0
 8002abc:	2100      	movs	r1, #0
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f001 f9ce 	bl	8003e60 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002ac4:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	23b9      	movs	r3, #185	; 0xb9
 8002acc:	22b9      	movs	r2, #185	; 0xb9
 8002ace:	2196      	movs	r1, #150	; 0x96
 8002ad0:	2041      	movs	r0, #65	; 0x41
 8002ad2:	f000 febb 	bl	800384c <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002ad6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	23eb      	movs	r3, #235	; 0xeb
 8002ade:	22b9      	movs	r2, #185	; 0xb9
 8002ae0:	21c8      	movs	r1, #200	; 0xc8
 8002ae2:	2041      	movs	r0, #65	; 0x41
 8002ae4:	f000 feb2 	bl	800384c <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 8002ae8:	2301      	movs	r3, #1
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	2318      	movs	r3, #24
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2300      	movs	r3, #0
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <pause_lcd+0x8c>)
 8002af8:	219b      	movs	r1, #155	; 0x9b
 8002afa:	205a      	movs	r0, #90	; 0x5a
 8002afc:	f001 fc81 	bl	8004402 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002b00:	2301      	movs	r3, #1
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	2318      	movs	r3, #24
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <pause_lcd+0x90>)
 8002b10:	21cd      	movs	r1, #205	; 0xcd
 8002b12:	2064      	movs	r0, #100	; 0x64
 8002b14:	f001 fc75 	bl	8004402 <lcd_ShowStr>
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	08037350 	.word	0x08037350
 8002b24:	0806f570 	.word	0x0806f570
 8002b28:	0800e660 	.word	0x0800e660
 8002b2c:	0800e610 	.word	0x0800e610

08002b30 <game_over_lcd>:

void game_over_lcd(){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 8002b36:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <game_over_lcd+0x140>)
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b3e:	22f0      	movs	r2, #240	; 0xf0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2000      	movs	r0, #0
 8002b44:	f001 f98c 	bl	8003e60 <lcd_ShowPicture>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002b48:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	f240 131d 	movw	r3, #285	; 0x11d
 8002b52:	22b9      	movs	r2, #185	; 0xb9
 8002b54:	21fa      	movs	r1, #250	; 0xfa
 8002b56:	2041      	movs	r0, #65	; 0x41
 8002b58:	f000 fe78 	bl	800384c <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	f240 131d 	movw	r3, #285	; 0x11d
 8002b64:	22b9      	movs	r2, #185	; 0xb9
 8002b66:	21fa      	movs	r1, #250	; 0xfa
 8002b68:	2041      	movs	r0, #65	; 0x41
 8002b6a:	f000 ff40 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002b76:	22b8      	movs	r2, #184	; 0xb8
 8002b78:	21fb      	movs	r1, #251	; 0xfb
 8002b7a:	2042      	movs	r0, #66	; 0x42
 8002b7c:	f000 ff37 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002b80:	2301      	movs	r3, #1
 8002b82:	9302      	str	r3, [sp, #8]
 8002b84:	2318      	movs	r3, #24
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4a39      	ldr	r2, [pc, #228]	; (8002c74 <game_over_lcd+0x144>)
 8002b90:	21ff      	movs	r1, #255	; 0xff
 8002b92:	2064      	movs	r0, #100	; 0x64
 8002b94:	f001 fc35 	bl	8004402 <lcd_ShowStr>
	char c[10] = "";
 8002b98:	2300      	movs	r3, #0
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	f107 0308 	add.w	r3, r7, #8
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	809a      	strh	r2, [r3, #4]
	lcd_StrCenter(0, POS_Y_INFO, "USER", BLACK, BROWN, 16, 1);
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	9302      	str	r3, [sp, #8]
 8002baa:	2310      	movs	r3, #16
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	4a30      	ldr	r2, [pc, #192]	; (8002c78 <game_over_lcd+0x148>)
 8002bb8:	2164      	movs	r1, #100	; 0x64
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f001 fc70 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + SPACE_INFO, name, DARKBLUE, BROWN, 16, 1);
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <game_over_lcd+0x14c>)
 8002bd4:	2178      	movs	r1, #120	; 0x78
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f001 fc62 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 2 * SPACE_INFO, "SCORE", BLACK, BROWN, 16, 1);
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9302      	str	r3, [sp, #8]
 8002be0:	2310      	movs	r3, #16
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2300      	movs	r3, #0
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <game_over_lcd+0x150>)
 8002bee:	218c      	movs	r1, #140	; 0x8c
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f001 fc55 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 3 * SPACE_INFO, itoa(current_score, c, 10), DARKBLUE, BROWN, 16, 1);
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <game_over_lcd+0x154>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	220a      	movs	r2, #10
 8002c00:	4619      	mov	r1, r3
 8002c02:	f009 fd43 	bl	800c68c <itoa>
 8002c06:	4602      	mov	r2, r0
 8002c08:	2301      	movs	r3, #1
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002c1a:	21a0      	movs	r1, #160	; 0xa0
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f001 fc3f 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 4 * SPACE_INFO, "TIME PLAYED", BLACK, BROWN, 16, 1);
 8002c22:	2301      	movs	r3, #1
 8002c24:	9302      	str	r3, [sp, #8]
 8002c26:	2310      	movs	r3, #16
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2300      	movs	r3, #0
 8002c32:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <game_over_lcd+0x158>)
 8002c34:	21b4      	movs	r1, #180	; 0xb4
 8002c36:	2000      	movs	r0, #0
 8002c38:	f001 fc32 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 5 * SPACE_INFO, itoa(current_time, c, 10), DARKBLUE, BROWN, 16, 1);
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <game_over_lcd+0x15c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	220a      	movs	r2, #10
 8002c46:	4619      	mov	r1, r3
 8002c48:	f009 fd20 	bl	800c68c <itoa>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	2301      	movs	r3, #1
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	2310      	movs	r3, #16
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002c60:	21c8      	movs	r1, #200	; 0xc8
 8002c62:	2000      	movs	r0, #0
 8002c64:	f001 fc1c 	bl	80044a0 <lcd_StrCenter>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	080792f0 	.word	0x080792f0
 8002c74:	0800e610 	.word	0x0800e610
 8002c78:	0800e668 	.word	0x0800e668
 8002c7c:	20000284 	.word	0x20000284
 8002c80:	0800e628 	.word	0x0800e628
 8002c84:	20000000 	.word	0x20000000
 8002c88:	0800e670 	.word	0x0800e670
 8002c8c:	20000290 	.word	0x20000290

08002c90 <youwin_lcd>:

void youwin_lcd(){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 8002c96:	4b4e      	ldr	r3, [pc, #312]	; (8002dd0 <youwin_lcd+0x140>)
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c9e:	22f0      	movs	r2, #240	; 0xf0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f001 f8dc 	bl	8003e60 <lcd_ShowPicture>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002ca8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	f240 131d 	movw	r3, #285	; 0x11d
 8002cb2:	22b9      	movs	r2, #185	; 0xb9
 8002cb4:	21fa      	movs	r1, #250	; 0xfa
 8002cb6:	2041      	movs	r0, #65	; 0x41
 8002cb8:	f000 fdc8 	bl	800384c <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f240 131d 	movw	r3, #285	; 0x11d
 8002cc4:	22b9      	movs	r2, #185	; 0xb9
 8002cc6:	21fa      	movs	r1, #250	; 0xfa
 8002cc8:	2041      	movs	r0, #65	; 0x41
 8002cca:	f000 fe90 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002cd6:	22b8      	movs	r2, #184	; 0xb8
 8002cd8:	21fb      	movs	r1, #251	; 0xfb
 8002cda:	2042      	movs	r0, #66	; 0x42
 8002cdc:	f000 fe87 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	9302      	str	r3, [sp, #8]
 8002ce4:	2318      	movs	r3, #24
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <youwin_lcd+0x144>)
 8002cf0:	21ff      	movs	r1, #255	; 0xff
 8002cf2:	2064      	movs	r0, #100	; 0x64
 8002cf4:	f001 fb85 	bl	8004402 <lcd_ShowStr>
	char c[10] = "";
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	809a      	strh	r2, [r3, #4]
	lcd_StrCenter(0, POS_Y_INFO, "USER", BLACK, BROWN, 16, 1);
 8002d06:	2301      	movs	r3, #1
 8002d08:	9302      	str	r3, [sp, #8]
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2300      	movs	r3, #0
 8002d16:	4a30      	ldr	r2, [pc, #192]	; (8002dd8 <youwin_lcd+0x148>)
 8002d18:	2164      	movs	r1, #100	; 0x64
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f001 fbc0 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + SPACE_INFO, name, DARKBLUE, BROWN, 16, 1);
 8002d20:	2301      	movs	r3, #1
 8002d22:	9302      	str	r3, [sp, #8]
 8002d24:	2310      	movs	r3, #16
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002d32:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <youwin_lcd+0x14c>)
 8002d34:	2178      	movs	r1, #120	; 0x78
 8002d36:	2000      	movs	r0, #0
 8002d38:	f001 fbb2 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 2 * SPACE_INFO, "SCORE", BLACK, BROWN, 16, 1);
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	9302      	str	r3, [sp, #8]
 8002d40:	2310      	movs	r3, #16
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <youwin_lcd+0x150>)
 8002d4e:	218c      	movs	r1, #140	; 0x8c
 8002d50:	2000      	movs	r0, #0
 8002d52:	f001 fba5 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 3 * SPACE_INFO, itoa(current_score, c, 10), DARKBLUE, BROWN, 16, 1);
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <youwin_lcd+0x154>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	220a      	movs	r2, #10
 8002d60:	4619      	mov	r1, r3
 8002d62:	f009 fc93 	bl	800c68c <itoa>
 8002d66:	4602      	mov	r2, r0
 8002d68:	2301      	movs	r3, #1
 8002d6a:	9302      	str	r3, [sp, #8]
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002d7a:	21a0      	movs	r1, #160	; 0xa0
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f001 fb8f 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 4 * SPACE_INFO, "TIME PLAYED", BLACK, BROWN, 16, 1);
 8002d82:	2301      	movs	r3, #1
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	2310      	movs	r3, #16
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2300      	movs	r3, #0
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <youwin_lcd+0x158>)
 8002d94:	21b4      	movs	r1, #180	; 0xb4
 8002d96:	2000      	movs	r0, #0
 8002d98:	f001 fb82 	bl	80044a0 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 5 * SPACE_INFO, itoa(current_time, c, 10), DARKBLUE, BROWN, 16, 1);
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <youwin_lcd+0x15c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	220a      	movs	r2, #10
 8002da6:	4619      	mov	r1, r3
 8002da8:	f009 fc70 	bl	800c68c <itoa>
 8002dac:	4602      	mov	r2, r0
 8002dae:	2301      	movs	r3, #1
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	2310      	movs	r3, #16
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002dc0:	21c8      	movs	r1, #200	; 0xc8
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f001 fb6c 	bl	80044a0 <lcd_StrCenter>
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	0809eaf0 	.word	0x0809eaf0
 8002dd4:	0800e610 	.word	0x0800e610
 8002dd8:	0800e668 	.word	0x0800e668
 8002ddc:	20000284 	.word	0x20000284
 8002de0:	0800e628 	.word	0x0800e628
 8002de4:	20000000 	.word	0x20000000
 8002de8:	0800e670 	.word	0x0800e670
 8002dec:	20000290 	.word	0x20000290

08002df0 <uppercase_lcd>:

void uppercase_lcd(){
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002df6:	2300      	movs	r3, #0
 8002df8:	71fb      	strb	r3, [r7, #7]
 8002dfa:	e036      	b.n	8002e6a <uppercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	71bb      	strb	r3, [r7, #6]
 8002e00:	e02d      	b.n	8002e5e <uppercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_upper[i][j], BLACK, BROWN, 16, 0);
 8002e02:	79bb      	ldrb	r3, [r7, #6]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	00d2      	lsls	r2, r2, #3
 8002e0a:	441a      	add	r2, r3
 8002e0c:	0052      	lsls	r2, r2, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3316      	adds	r3, #22
 8002e16:	b298      	uxth	r0, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	00d2      	lsls	r2, r2, #3
 8002e20:	441a      	add	r2, r3
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3386      	adds	r3, #134	; 0x86
 8002e2c:	b29c      	uxth	r4, r3
 8002e2e:	79fa      	ldrb	r2, [r7, #7]
 8002e30:	79b9      	ldrb	r1, [r7, #6]
 8002e32:	4d12      	ldr	r5, [pc, #72]	; (8002e7c <uppercase_lcd+0x8c>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	442b      	add	r3, r5
 8002e3e:	440b      	add	r3, r1
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9302      	str	r3, [sp, #8]
 8002e46:	2310      	movs	r3, #16
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2300      	movs	r3, #0
 8002e52:	4621      	mov	r1, r4
 8002e54:	f000 fe02 	bl	8003a5c <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002e58:	79bb      	ldrb	r3, [r7, #6]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	71bb      	strb	r3, [r7, #6]
 8002e5e:	79bb      	ldrb	r3, [r7, #6]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d9ce      	bls.n	8002e02 <uppercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	3301      	adds	r3, #1
 8002e68:	71fb      	strb	r3, [r7, #7]
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d9c5      	bls.n	8002dfc <uppercase_lcd+0xc>
		}
	}
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000000c 	.word	0x2000000c

08002e80 <lowercase_lcd>:

void lowercase_lcd(){
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002e86:	2300      	movs	r3, #0
 8002e88:	71fb      	strb	r3, [r7, #7]
 8002e8a:	e036      	b.n	8002efa <lowercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	71bb      	strb	r3, [r7, #6]
 8002e90:	e02d      	b.n	8002eee <lowercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_lower[i][j], BLACK, BROWN, 16, 0);
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	00d2      	lsls	r2, r2, #3
 8002e9a:	441a      	add	r2, r3
 8002e9c:	0052      	lsls	r2, r2, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3316      	adds	r3, #22
 8002ea6:	b298      	uxth	r0, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	00d2      	lsls	r2, r2, #3
 8002eb0:	441a      	add	r2, r3
 8002eb2:	0052      	lsls	r2, r2, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3386      	adds	r3, #134	; 0x86
 8002ebc:	b29c      	uxth	r4, r3
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	79b9      	ldrb	r1, [r7, #6]
 8002ec2:	4d12      	ldr	r5, [pc, #72]	; (8002f0c <lowercase_lcd+0x8c>)
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	442b      	add	r3, r5
 8002ece:	440b      	add	r3, r1
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9302      	str	r3, [sp, #8]
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	f000 fdba 	bl	8003a5c <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002ee8:	79bb      	ldrb	r3, [r7, #6]
 8002eea:	3301      	adds	r3, #1
 8002eec:	71bb      	strb	r3, [r7, #6]
 8002eee:	79bb      	ldrb	r3, [r7, #6]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d9ce      	bls.n	8002e92 <lowercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	71fb      	strb	r3, [r7, #7]
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d9c5      	bls.n	8002e8c <lowercase_lcd+0xc>
		}
	}
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bdb0      	pop	{r4, r5, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2000002c 	.word	0x2000002c

08002f10 <selectbox_lcd>:

void selectbox_lcd(){
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 8002f16:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <selectbox_lcd+0xf8>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	00d2      	lsls	r2, r2, #3
 8002f20:	441a      	add	r2, r3
 8002f22:	0052      	lsls	r2, r2, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3306      	adds	r3, #6
 8002f2c:	b298      	uxth	r0, r3
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <selectbox_lcd+0xfc>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	00d2      	lsls	r2, r2, #3
 8002f38:	441a      	add	r2, r3
 8002f3a:	0052      	lsls	r2, r2, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	337c      	adds	r3, #124	; 0x7c
 8002f44:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_c_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r_old + 1) * CHAR_HEIGHT, GRAY);
 8002f46:	4b30      	ldr	r3, [pc, #192]	; (8003008 <selectbox_lcd+0xf8>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	441a      	add	r2, r3
 8002f54:	0052      	lsls	r2, r2, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3306      	adds	r3, #6
 8002f5e:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_c_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r_old + 1) * CHAR_HEIGHT, GRAY);
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <selectbox_lcd+0xfc>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461c      	mov	r4, r3
 8002f6a:	00e4      	lsls	r4, r4, #3
 8002f6c:	441c      	add	r4, r3
 8002f6e:	0064      	lsls	r4, r4, #1
 8002f70:	4423      	add	r3, r4
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	337c      	adds	r3, #124	; 0x7c
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f248 4430 	movw	r4, #33840	; 0x8430
 8002f7e:	9400      	str	r4, [sp, #0]
 8002f80:	f000 fd35 	bl	80039ee <lcd_DrawRectangle>
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 8002f84:	4b22      	ldr	r3, [pc, #136]	; (8003010 <selectbox_lcd+0x100>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	00d2      	lsls	r2, r2, #3
 8002f8e:	441a      	add	r2, r3
 8002f90:	0052      	lsls	r2, r2, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3306      	adds	r3, #6
 8002f9a:	b298      	uxth	r0, r3
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <selectbox_lcd+0x104>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	00d2      	lsls	r2, r2, #3
 8002fa6:	441a      	add	r2, r3
 8002fa8:	0052      	lsls	r2, r2, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	337c      	adds	r3, #124	; 0x7c
 8002fb2:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_c + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r + 1) * CHAR_HEIGHT, BLACK);
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <selectbox_lcd+0x100>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	00d2      	lsls	r2, r2, #3
 8002fc0:	441a      	add	r2, r3
 8002fc2:	0052      	lsls	r2, r2, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3306      	adds	r3, #6
 8002fcc:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_c + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r + 1) * CHAR_HEIGHT, BLACK);
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <selectbox_lcd+0x104>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461c      	mov	r4, r3
 8002fd8:	00e4      	lsls	r4, r4, #3
 8002fda:	441c      	add	r4, r3
 8002fdc:	0064      	lsls	r4, r4, #1
 8002fde:	4423      	add	r3, r4
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	337c      	adds	r3, #124	; 0x7c
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2400      	movs	r4, #0
 8002fea:	9400      	str	r4, [sp, #0]
 8002fec:	f000 fcff 	bl	80039ee <lcd_DrawRectangle>
	index_r_old = index_r;
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <selectbox_lcd+0x104>)
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <selectbox_lcd+0xfc>)
 8002ff6:	701a      	strb	r2, [r3, #0]
	index_c_old = index_c;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <selectbox_lcd+0x100>)
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	4b02      	ldr	r3, [pc, #8]	; (8003008 <selectbox_lcd+0xf8>)
 8002ffe:	701a      	strb	r2, [r3, #0]
}
 8003000:	bf00      	nop
 8003002:	3704      	adds	r7, #4
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	2000029a 	.word	0x2000029a
 800300c:	20000299 	.word	0x20000299
 8003010:	20000298 	.word	0x20000298
 8003014:	20000297 	.word	0x20000297

08003018 <displayName_lcd>:

void displayName_lcd(){
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < name_length; i++){
 800301e:	2300      	movs	r3, #0
 8003020:	71fb      	strb	r3, [r7, #7]
 8003022:	e018      	b.n	8003056 <displayName_lcd+0x3e>
		lcd_ShowChar(POS_X_DISP + i * SPACE_DISP, POS_Y_DISP, name[i], BLACK, BROWN, 24, 0);
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	b29b      	uxth	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	b29b      	uxth	r3, r3
 8003030:	332f      	adds	r3, #47	; 0x2f
 8003032:	b298      	uxth	r0, r3
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <displayName_lcd+0x90>)
 8003038:	5cd2      	ldrb	r2, [r2, r3]
 800303a:	2300      	movs	r3, #0
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	2318      	movs	r3, #24
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2300      	movs	r3, #0
 800304a:	2150      	movs	r1, #80	; 0x50
 800304c:	f000 fd06 	bl	8003a5c <lcd_ShowChar>
	for(uint8_t i = 0; i < name_length; i++){
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	3301      	adds	r3, #1
 8003054:	71fb      	strb	r3, [r7, #7]
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <displayName_lcd+0x94>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	79fa      	ldrb	r2, [r7, #7]
 800305c:	429a      	cmp	r2, r3
 800305e:	d3e1      	bcc.n	8003024 <displayName_lcd+0xc>
	}
	for(uint8_t i = name_length; i < 10; i++){
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <displayName_lcd+0x94>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	71bb      	strb	r3, [r7, #6]
 8003066:	e016      	b.n	8003096 <displayName_lcd+0x7e>
		lcd_ShowChar(POS_X_DISP + i * SPACE_DISP, POS_Y_DISP, '_', BLACK, BROWN, 24, 0);
 8003068:	79bb      	ldrb	r3, [r7, #6]
 800306a:	b29b      	uxth	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	b29b      	uxth	r3, r3
 8003074:	332f      	adds	r3, #47	; 0x2f
 8003076:	b298      	uxth	r0, r3
 8003078:	2300      	movs	r3, #0
 800307a:	9302      	str	r3, [sp, #8]
 800307c:	2318      	movs	r3, #24
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	225f      	movs	r2, #95	; 0x5f
 800308a:	2150      	movs	r1, #80	; 0x50
 800308c:	f000 fce6 	bl	8003a5c <lcd_ShowChar>
	for(uint8_t i = name_length; i < 10; i++){
 8003090:	79bb      	ldrb	r3, [r7, #6]
 8003092:	3301      	adds	r3, #1
 8003094:	71bb      	strb	r3, [r7, #6]
 8003096:	79bb      	ldrb	r3, [r7, #6]
 8003098:	2b09      	cmp	r3, #9
 800309a:	d9e5      	bls.n	8003068 <displayName_lcd+0x50>
	}
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000284 	.word	0x20000284
 80030ac:	2000028f 	.word	0x2000028f

080030b0 <entername_lcd>:

void entername_lcd(){
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af02      	add	r7, sp, #8
	lcd_ShowPicture(0, 0, 240, 320, gImage_select);
 80030b6:	4b35      	ldr	r3, [pc, #212]	; (800318c <entername_lcd+0xdc>)
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030be:	22f0      	movs	r2, #240	; 0xf0
 80030c0:	2100      	movs	r1, #0
 80030c2:	2000      	movs	r0, #0
 80030c4:	f000 fecc 	bl	8003e60 <lcd_ShowPicture>
	lcd_Fill(POS_X_CHAR, POS_Y_CHAR,
 80030c8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f44f 739d 	mov.w	r3, #314	; 0x13a
 80030d2:	22ea      	movs	r2, #234	; 0xea
 80030d4:	217c      	movs	r1, #124	; 0x7c
 80030d6:	2006      	movs	r0, #6
 80030d8:	f000 fbb8 	bl	800384c <lcd_Fill>
			POS_X_CHAR + CHAR_COL*CHAR_WIDTH, POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT, BROWN);
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 80030dc:	2300      	movs	r3, #0
 80030de:	71fb      	strb	r3, [r7, #7]
 80030e0:	e03e      	b.n	8003160 <entername_lcd+0xb0>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 80030e2:	2300      	movs	r3, #0
 80030e4:	71bb      	strb	r3, [r7, #6]
 80030e6:	e035      	b.n	8003154 <entername_lcd+0xa4>
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	00d2      	lsls	r2, r2, #3
 80030f0:	441a      	add	r2, r3
 80030f2:	0052      	lsls	r2, r2, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3306      	adds	r3, #6
 80030fc:	b298      	uxth	r0, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	b29b      	uxth	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	00d2      	lsls	r2, r2, #3
 8003106:	441a      	add	r2, r3
 8003108:	0052      	lsls	r2, r2, #1
 800310a:	4413      	add	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	b29b      	uxth	r3, r3
 8003110:	337c      	adds	r3, #124	; 0x7c
 8003112:	b299      	uxth	r1, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 8003114:	79bb      	ldrb	r3, [r7, #6]
 8003116:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	00d2      	lsls	r2, r2, #3
 800311e:	441a      	add	r2, r3
 8003120:	0052      	lsls	r2, r2, #1
 8003122:	4413      	add	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	b29b      	uxth	r3, r3
 8003128:	3306      	adds	r3, #6
 800312a:	b29a      	uxth	r2, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8003130:	b29b      	uxth	r3, r3
 8003132:	461c      	mov	r4, r3
 8003134:	00e4      	lsls	r4, r4, #3
 8003136:	441c      	add	r4, r3
 8003138:	0064      	lsls	r4, r4, #1
 800313a:	4423      	add	r3, r4
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b29b      	uxth	r3, r3
 8003140:	337c      	adds	r3, #124	; 0x7c
 8003142:	b29b      	uxth	r3, r3
 8003144:	f248 4430 	movw	r4, #33840	; 0x8430
 8003148:	9400      	str	r4, [sp, #0]
 800314a:	f000 fc50 	bl	80039ee <lcd_DrawRectangle>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 800314e:	79bb      	ldrb	r3, [r7, #6]
 8003150:	3301      	adds	r3, #1
 8003152:	71bb      	strb	r3, [r7, #6]
 8003154:	79bb      	ldrb	r3, [r7, #6]
 8003156:	2b05      	cmp	r3, #5
 8003158:	d9c6      	bls.n	80030e8 <entername_lcd+0x38>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	3301      	adds	r3, #1
 800315e:	71fb      	strb	r3, [r7, #7]
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d9bd      	bls.n	80030e2 <entername_lcd+0x32>
		}
	}
	index_r = 0;
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <entername_lcd+0xe0>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
	index_c = 0;
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <entername_lcd+0xe4>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
	flag_uppercase = 0;
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <entername_lcd+0xe8>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
	lowercase_lcd();
 8003178:	f7ff fe82 	bl	8002e80 <lowercase_lcd>
	selectbox_lcd();
 800317c:	f7ff fec8 	bl	8002f10 <selectbox_lcd>
	displayName_lcd();
 8003180:	f7ff ff4a 	bl	8003018 <displayName_lcd>
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bd90      	pop	{r4, r7, pc}
 800318c:	080c42f0 	.word	0x080c42f0
 8003190:	20000297 	.word	0x20000297
 8003194:	20000298 	.word	0x20000298
 8003198:	20000296 	.word	0x20000296

0800319c <home_not_select>:

void home_not_select(){
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80031a2:	f248 4330 	movw	r3, #33840	; 0x8430
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	23b9      	movs	r3, #185	; 0xb9
 80031aa:	22b9      	movs	r2, #185	; 0xb9
 80031ac:	2196      	movs	r1, #150	; 0x96
 80031ae:	2041      	movs	r0, #65	; 0x41
 80031b0:	f000 fc1d 	bl	80039ee <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80031b4:	f248 4330 	movw	r3, #33840	; 0x8430
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	23b8      	movs	r3, #184	; 0xb8
 80031bc:	22b8      	movs	r2, #184	; 0xb8
 80031be:	2197      	movs	r1, #151	; 0x97
 80031c0:	2042      	movs	r0, #66	; 0x42
 80031c2:	f000 fc14 	bl	80039ee <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80031c6:	f248 4330 	movw	r3, #33840	; 0x8430
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	23eb      	movs	r3, #235	; 0xeb
 80031ce:	22b9      	movs	r2, #185	; 0xb9
 80031d0:	21c8      	movs	r1, #200	; 0xc8
 80031d2:	2041      	movs	r0, #65	; 0x41
 80031d4:	f000 fc0b 	bl	80039ee <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80031d8:	f248 4330 	movw	r3, #33840	; 0x8430
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	23ea      	movs	r3, #234	; 0xea
 80031e0:	22b8      	movs	r2, #184	; 0xb8
 80031e2:	21c9      	movs	r1, #201	; 0xc9
 80031e4:	2042      	movs	r0, #66	; 0x42
 80031e6:	f000 fc02 	bl	80039ee <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80031ea:	f248 4330 	movw	r3, #33840	; 0x8430
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	f240 131d 	movw	r3, #285	; 0x11d
 80031f4:	22b9      	movs	r2, #185	; 0xb9
 80031f6:	21fa      	movs	r1, #250	; 0xfa
 80031f8:	2041      	movs	r0, #65	; 0x41
 80031fa:	f000 fbf8 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80031fe:	f248 4330 	movw	r3, #33840	; 0x8430
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003208:	22b8      	movs	r2, #184	; 0xb8
 800320a:	21fb      	movs	r1, #251	; 0xfb
 800320c:	2042      	movs	r0, #66	; 0x42
 800320e:	f000 fbee 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <home_second_lcd>:

void home_second_lcd(){
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af02      	add	r7, sp, #8
	home_not_select();
 800321e:	f7ff ffbd 	bl	800319c <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8003222:	2300      	movs	r3, #0
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	23b9      	movs	r3, #185	; 0xb9
 8003228:	22b9      	movs	r2, #185	; 0xb9
 800322a:	2196      	movs	r1, #150	; 0x96
 800322c:	2041      	movs	r0, #65	; 0x41
 800322e:	f000 fbde 	bl	80039ee <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	23b8      	movs	r3, #184	; 0xb8
 8003238:	22b8      	movs	r2, #184	; 0xb8
 800323a:	2197      	movs	r1, #151	; 0x97
 800323c:	2042      	movs	r0, #66	; 0x42
 800323e:	f000 fbd6 	bl	80039ee <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <home_third_lcd>:

void home_third_lcd(){
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af02      	add	r7, sp, #8
	home_not_select();
 800324e:	f7ff ffa5 	bl	800319c <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8003252:	2300      	movs	r3, #0
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	23eb      	movs	r3, #235	; 0xeb
 8003258:	22b9      	movs	r2, #185	; 0xb9
 800325a:	21c8      	movs	r1, #200	; 0xc8
 800325c:	2041      	movs	r0, #65	; 0x41
 800325e:	f000 fbc6 	bl	80039ee <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	23ea      	movs	r3, #234	; 0xea
 8003268:	22b8      	movs	r2, #184	; 0xb8
 800326a:	21c9      	movs	r1, #201	; 0xc9
 800326c:	2042      	movs	r0, #66	; 0x42
 800326e:	f000 fbbe 	bl	80039ee <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <home_forth_lcd>:

void home_forth_lcd(){
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af02      	add	r7, sp, #8
	home_not_select();
 800327e:	f7ff ff8d 	bl	800319c <home_not_select>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8003282:	2300      	movs	r3, #0
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	f240 131d 	movw	r3, #285	; 0x11d
 800328a:	22b9      	movs	r2, #185	; 0xb9
 800328c:	21fa      	movs	r1, #250	; 0xfa
 800328e:	2041      	movs	r0, #65	; 0x41
 8003290:	f000 fbad 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800329c:	22b8      	movs	r2, #184	; 0xb8
 800329e:	21fb      	movs	r1, #251	; 0xfb
 80032a0:	2042      	movs	r0, #66	; 0x42
 80032a2:	f000 fba4 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <mode_first_lcd>:

void mode_first_lcd(){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80032b2:	2300      	movs	r3, #0
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2387      	movs	r3, #135	; 0x87
 80032b8:	22b9      	movs	r2, #185	; 0xb9
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	2041      	movs	r0, #65	; 0x41
 80032be:	f000 fb96 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2386      	movs	r3, #134	; 0x86
 80032c8:	22b8      	movs	r2, #184	; 0xb8
 80032ca:	2165      	movs	r1, #101	; 0x65
 80032cc:	2042      	movs	r0, #66	; 0x42
 80032ce:	f000 fb8e 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, BLACK);
	home_not_select();
 80032d2:	f7ff ff63 	bl	800319c <home_not_select>
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <mode_second_lcd>:

void mode_second_lcd(){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80032e2:	f248 4330 	movw	r3, #33840	; 0x8430
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2387      	movs	r3, #135	; 0x87
 80032ea:	22b9      	movs	r2, #185	; 0xb9
 80032ec:	2164      	movs	r1, #100	; 0x64
 80032ee:	2041      	movs	r0, #65	; 0x41
 80032f0:	f000 fb7d 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80032f4:	f248 4330 	movw	r3, #33840	; 0x8430
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2386      	movs	r3, #134	; 0x86
 80032fc:	22b8      	movs	r2, #184	; 0xb8
 80032fe:	2165      	movs	r1, #101	; 0x65
 8003300:	2042      	movs	r0, #66	; 0x42
 8003302:	f000 fb74 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_second_lcd();
 8003306:	f7ff ff87 	bl	8003218 <home_second_lcd>
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <mode_third_lcd>:

void mode_third_lcd(){
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 8003316:	f248 4330 	movw	r3, #33840	; 0x8430
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2387      	movs	r3, #135	; 0x87
 800331e:	22b9      	movs	r2, #185	; 0xb9
 8003320:	2164      	movs	r1, #100	; 0x64
 8003322:	2041      	movs	r0, #65	; 0x41
 8003324:	f000 fb63 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8003328:	f248 4330 	movw	r3, #33840	; 0x8430
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2386      	movs	r3, #134	; 0x86
 8003330:	22b8      	movs	r2, #184	; 0xb8
 8003332:	2165      	movs	r1, #101	; 0x65
 8003334:	2042      	movs	r0, #66	; 0x42
 8003336:	f000 fb5a 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_third_lcd();
 800333a:	f7ff ff85 	bl	8003248 <home_third_lcd>
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <mode_forth_lcd>:

void mode_forth_lcd(){
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800334a:	f248 4330 	movw	r3, #33840	; 0x8430
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2387      	movs	r3, #135	; 0x87
 8003352:	22b9      	movs	r2, #185	; 0xb9
 8003354:	2164      	movs	r1, #100	; 0x64
 8003356:	2041      	movs	r0, #65	; 0x41
 8003358:	f000 fb49 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 800335c:	f248 4330 	movw	r3, #33840	; 0x8430
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2386      	movs	r3, #134	; 0x86
 8003364:	22b8      	movs	r2, #184	; 0xb8
 8003366:	2165      	movs	r1, #101	; 0x65
 8003368:	2042      	movs	r0, #66	; 0x42
 800336a:	f000 fb40 	bl	80039ee <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_forth_lcd();
 800336e:	f7ff ff83 	bl	8003278 <home_forth_lcd>
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <pause_second_lcd>:

void pause_second_lcd(){
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	23b9      	movs	r3, #185	; 0xb9
 8003384:	22b9      	movs	r2, #185	; 0xb9
 8003386:	2196      	movs	r1, #150	; 0x96
 8003388:	2041      	movs	r0, #65	; 0x41
 800338a:	f000 fb30 	bl	80039ee <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 800338e:	2300      	movs	r3, #0
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	23b8      	movs	r3, #184	; 0xb8
 8003394:	22b8      	movs	r2, #184	; 0xb8
 8003396:	2197      	movs	r1, #151	; 0x97
 8003398:	2042      	movs	r0, #66	; 0x42
 800339a:	f000 fb28 	bl	80039ee <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800339e:	f248 4330 	movw	r3, #33840	; 0x8430
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	23eb      	movs	r3, #235	; 0xeb
 80033a6:	22b9      	movs	r2, #185	; 0xb9
 80033a8:	21c8      	movs	r1, #200	; 0xc8
 80033aa:	2041      	movs	r0, #65	; 0x41
 80033ac:	f000 fb1f 	bl	80039ee <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80033b0:	f248 4330 	movw	r3, #33840	; 0x8430
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	23ea      	movs	r3, #234	; 0xea
 80033b8:	22b8      	movs	r2, #184	; 0xb8
 80033ba:	21c9      	movs	r1, #201	; 0xc9
 80033bc:	2042      	movs	r0, #66	; 0x42
 80033be:	f000 fb16 	bl	80039ee <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <pause_third_lcd>:

void pause_third_lcd(){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80033ce:	f248 4330 	movw	r3, #33840	; 0x8430
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	23b9      	movs	r3, #185	; 0xb9
 80033d6:	22b9      	movs	r2, #185	; 0xb9
 80033d8:	2196      	movs	r1, #150	; 0x96
 80033da:	2041      	movs	r0, #65	; 0x41
 80033dc:	f000 fb07 	bl	80039ee <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80033e0:	f248 4330 	movw	r3, #33840	; 0x8430
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	23b8      	movs	r3, #184	; 0xb8
 80033e8:	22b8      	movs	r2, #184	; 0xb8
 80033ea:	2197      	movs	r1, #151	; 0x97
 80033ec:	2042      	movs	r0, #66	; 0x42
 80033ee:	f000 fafe 	bl	80039ee <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80033f2:	2300      	movs	r3, #0
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	23eb      	movs	r3, #235	; 0xeb
 80033f8:	22b9      	movs	r2, #185	; 0xb9
 80033fa:	21c8      	movs	r1, #200	; 0xc8
 80033fc:	2041      	movs	r0, #65	; 0x41
 80033fe:	f000 faf6 	bl	80039ee <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8003402:	2300      	movs	r3, #0
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	23ea      	movs	r3, #234	; 0xea
 8003408:	22b8      	movs	r2, #184	; 0xb8
 800340a:	21c9      	movs	r1, #201	; 0xc9
 800340c:	2042      	movs	r0, #66	; 0x42
 800340e:	f000 faee 	bl	80039ee <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <point_head_lcd>:

void point_head_lcd(struct Point head){
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af02      	add	r7, sp, #8
 800341e:	463b      	mov	r3, r7
 8003420:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(head.x, head.y, GREEN, RADIUS_SNAKE, 1);
 8003424:	6838      	ldr	r0, [r7, #0]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	2301      	movs	r3, #1
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2304      	movs	r3, #4
 800342e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003432:	f000 ff7a 	bl	800432a <lcd_DrawCircle>
	lcd_DrawCircle(head.x, head.y, BLACK, 1, 1);
 8003436:	6838      	ldr	r0, [r7, #0]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	2301      	movs	r3, #1
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2301      	movs	r3, #1
 8003440:	2200      	movs	r2, #0
 8003442:	f000 ff72 	bl	800432a <lcd_DrawCircle>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <point_snake_lcd>:

void point_snake_lcd(struct Point snake){
 800344e:	b590      	push	{r4, r7, lr}
 8003450:	b085      	sub	sp, #20
 8003452:	af02      	add	r7, sp, #8
 8003454:	463b      	mov	r3, r7
 8003456:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(snake.x, snake.y, GREEN, RADIUS_SNAKE, 1);
 800345a:	6838      	ldr	r0, [r7, #0]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	2301      	movs	r3, #1
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2304      	movs	r3, #4
 8003464:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003468:	f000 ff5f 	bl	800432a <lcd_DrawCircle>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b03      	subs	r3, #3
 8003472:	b298      	uxth	r0, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b03      	subs	r3, #3
 800347a:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 800347c:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 800347e:	b29b      	uxth	r3, r3
 8003480:	3304      	adds	r3, #4
 8003482:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8003484:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8003486:	b29b      	uxth	r3, r3
 8003488:	3304      	adds	r3, #4
 800348a:	b29b      	uxth	r3, r3
 800348c:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003490:	9400      	str	r4, [sp, #0]
 8003492:	f000 fa28 	bl	80038e6 <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b03      	subs	r3, #3
 800349c:	b298      	uxth	r0, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b02      	subs	r3, #2
 80034a4:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80034a6:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3303      	adds	r3, #3
 80034ac:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80034ae:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3304      	adds	r3, #4
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80034ba:	9400      	str	r4, [sp, #0]
 80034bc:	f000 fa13 	bl	80038e6 <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b02      	subs	r3, #2
 80034c6:	b298      	uxth	r0, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b03      	subs	r3, #3
 80034ce:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 80034d0:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3304      	adds	r3, #4
 80034d6:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 80034d8:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3303      	adds	r3, #3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80034e4:	9400      	str	r4, [sp, #0]
 80034e6:	f000 f9fe 	bl	80038e6 <lcd_DrawLine>
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd90      	pop	{r4, r7, pc}

080034f2 <point_food_lcd>:

void point_food_lcd(struct Point food){
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af02      	add	r7, sp, #8
 80034f8:	463b      	mov	r3, r7
 80034fa:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(food.x, food.y, RED, RADIUS_SNAKE, 1);
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	2301      	movs	r3, #1
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2304      	movs	r3, #4
 8003508:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800350c:	f000 ff0d 	bl	800432a <lcd_DrawCircle>
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <point_clr>:

void point_clr(struct Point clr){
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af02      	add	r7, sp, #8
 800351e:	463b      	mov	r3, r7
 8003520:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(clr.x, clr.y, WHITE, RADIUS_SNAKE, 1);
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	2301      	movs	r3, #1
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2304      	movs	r3, #4
 800352e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003532:	f000 fefa 	bl	800432a <lcd_DrawCircle>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <mode_7seg>:

void mode_7seg(){
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
	switch(status){
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <mode_7seg+0x44>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b0d      	cmp	r3, #13
 800354a:	d012      	beq.n	8003572 <mode_7seg+0x32>
 800354c:	2b0d      	cmp	r3, #13
 800354e:	dc16      	bgt.n	800357e <mode_7seg+0x3e>
 8003550:	2b0b      	cmp	r3, #11
 8003552:	d002      	beq.n	800355a <mode_7seg+0x1a>
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d006      	beq.n	8003566 <mode_7seg+0x26>
			break;
		case TIME:
			led7_SetDigit(3, 0, 1);
			break;
		default:
			break;
 8003558:	e011      	b.n	800357e <mode_7seg+0x3e>
			led7_SetDigit(1, 0, 1);
 800355a:	2201      	movs	r2, #1
 800355c:	2100      	movs	r1, #0
 800355e:	2001      	movs	r0, #1
 8003560:	f001 f868 	bl	8004634 <led7_SetDigit>
			break;
 8003564:	e00c      	b.n	8003580 <mode_7seg+0x40>
			led7_SetDigit(2, 0, 1);
 8003566:	2201      	movs	r2, #1
 8003568:	2100      	movs	r1, #0
 800356a:	2002      	movs	r0, #2
 800356c:	f001 f862 	bl	8004634 <led7_SetDigit>
			break;
 8003570:	e006      	b.n	8003580 <mode_7seg+0x40>
			led7_SetDigit(3, 0, 1);
 8003572:	2201      	movs	r2, #1
 8003574:	2100      	movs	r1, #0
 8003576:	2003      	movs	r0, #3
 8003578:	f001 f85c 	bl	8004634 <led7_SetDigit>
			break;
 800357c:	e000      	b.n	8003580 <mode_7seg+0x40>
			break;
 800357e:	bf00      	nop
	}
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	2000029c 	.word	0x2000029c

08003588 <reset_7seg>:

void reset_7seg(){
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
	led7_SetDigit(0, 0, 0);
 800358c:	2200      	movs	r2, #0
 800358e:	2100      	movs	r1, #0
 8003590:	2000      	movs	r0, #0
 8003592:	f001 f84f 	bl	8004634 <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2101      	movs	r1, #1
 800359a:	2000      	movs	r0, #0
 800359c:	f001 f84a 	bl	8004634 <led7_SetDigit>
	led7_SetDigit(0, 2, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2102      	movs	r1, #2
 80035a4:	2000      	movs	r0, #0
 80035a6:	f001 f845 	bl	8004634 <led7_SetDigit>
	led7_SetDigit(0, 3, 0);
 80035aa:	2200      	movs	r2, #0
 80035ac:	2103      	movs	r1, #3
 80035ae:	2000      	movs	r0, #0
 80035b0:	f001 f840 	bl	8004634 <led7_SetDigit>
}
 80035b4:	bf00      	nop
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <update_7seg_time>:

void update_7seg_time(){
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	if(flag_timer5 == 1 && flag_user == FLAG_PLAYING){
 80035bc:	4b43      	ldr	r3, [pc, #268]	; (80036cc <update_7seg_time+0x114>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f040 8081 	bne.w	80036c8 <update_7seg_time+0x110>
 80035c6:	4b42      	ldr	r3, [pc, #264]	; (80036d0 <update_7seg_time+0x118>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d17c      	bne.n	80036c8 <update_7seg_time+0x110>
		flag_timer5 = 0;
 80035ce:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <update_7seg_time+0x114>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	801a      	strh	r2, [r3, #0]
		current_time++;
 80035d4:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <update_7seg_time+0x11c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	4a3e      	ldr	r2, [pc, #248]	; (80036d4 <update_7seg_time+0x11c>)
 80035dc:	6013      	str	r3, [r2, #0]
		switch(status){
 80035de:	4b3e      	ldr	r3, [pc, #248]	; (80036d8 <update_7seg_time+0x120>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	dc02      	bgt.n	80035ec <update_7seg_time+0x34>
 80035e6:	2b0b      	cmp	r3, #11
 80035e8:	da03      	bge.n	80035f2 <update_7seg_time+0x3a>
				led7_SetDigit((counter_time % 100) / 10, 2, 0);
				led7_SetDigit(counter_time % 10, 3, 0);
				break;
		}
	}
}
 80035ea:	e06d      	b.n	80036c8 <update_7seg_time+0x110>
		switch(status){
 80035ec:	2b0d      	cmp	r3, #13
 80035ee:	d030      	beq.n	8003652 <update_7seg_time+0x9a>
}
 80035f0:	e06a      	b.n	80036c8 <update_7seg_time+0x110>
				led7_SetDigit(current_time / 100, 1, 0);
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <update_7seg_time+0x11c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a39      	ldr	r2, [pc, #228]	; (80036dc <update_7seg_time+0x124>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	2200      	movs	r2, #0
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f001 f816 	bl	8004634 <led7_SetDigit>
				led7_SetDigit((current_time % 100) / 10, 2, 0);
 8003608:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <update_7seg_time+0x11c>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <update_7seg_time+0x124>)
 800360e:	fba3 1302 	umull	r1, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2164      	movs	r1, #100	; 0x64
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	4a30      	ldr	r2, [pc, #192]	; (80036e0 <update_7seg_time+0x128>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	08db      	lsrs	r3, r3, #3
 8003624:	2200      	movs	r2, #0
 8003626:	2102      	movs	r1, #2
 8003628:	4618      	mov	r0, r3
 800362a:	f001 f803 	bl	8004634 <led7_SetDigit>
				led7_SetDigit(current_time % 10, 3, 0);
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <update_7seg_time+0x11c>)
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <update_7seg_time+0x128>)
 8003634:	fba3 2301 	umull	r2, r3, r3, r1
 8003638:	08da      	lsrs	r2, r3, #3
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	1aca      	subs	r2, r1, r3
 8003644:	4613      	mov	r3, r2
 8003646:	2200      	movs	r2, #0
 8003648:	2103      	movs	r1, #3
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fff2 	bl	8004634 <led7_SetDigit>
				break;
 8003650:	e03a      	b.n	80036c8 <update_7seg_time+0x110>
				counter_time--;
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <update_7seg_time+0x12c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3b01      	subs	r3, #1
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <update_7seg_time+0x12c>)
 800365a:	6013      	str	r3, [r2, #0]
				led7_SetDigit(counter_time / 100, 1, 0);
 800365c:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <update_7seg_time+0x12c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <update_7seg_time+0x124>)
 8003662:	fb82 1203 	smull	r1, r2, r2, r3
 8003666:	1152      	asrs	r2, r2, #5
 8003668:	17db      	asrs	r3, r3, #31
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2200      	movs	r2, #0
 800366e:	2101      	movs	r1, #1
 8003670:	4618      	mov	r0, r3
 8003672:	f000 ffdf 	bl	8004634 <led7_SetDigit>
				led7_SetDigit((counter_time % 100) / 10, 2, 0);
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <update_7seg_time+0x12c>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <update_7seg_time+0x124>)
 800367c:	fb83 1302 	smull	r1, r3, r3, r2
 8003680:	1159      	asrs	r1, r3, #5
 8003682:	17d3      	asrs	r3, r2, #31
 8003684:	1acb      	subs	r3, r1, r3
 8003686:	2164      	movs	r1, #100	; 0x64
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <update_7seg_time+0x130>)
 8003690:	fb82 1203 	smull	r1, r2, r2, r3
 8003694:	1092      	asrs	r2, r2, #2
 8003696:	17db      	asrs	r3, r3, #31
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2200      	movs	r2, #0
 800369c:	2102      	movs	r1, #2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 ffc8 	bl	8004634 <led7_SetDigit>
				led7_SetDigit(counter_time % 10, 3, 0);
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <update_7seg_time+0x12c>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <update_7seg_time+0x130>)
 80036aa:	fb83 1302 	smull	r1, r3, r3, r2
 80036ae:	1099      	asrs	r1, r3, #2
 80036b0:	17d3      	asrs	r3, r2, #31
 80036b2:	1ac8      	subs	r0, r1, r3
 80036b4:	4603      	mov	r3, r0
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4403      	add	r3, r0
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	1ad0      	subs	r0, r2, r3
 80036be:	2200      	movs	r2, #0
 80036c0:	2103      	movs	r1, #3
 80036c2:	f000 ffb7 	bl	8004634 <led7_SetDigit>
				break;
 80036c6:	bf00      	nop
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	200003b8 	.word	0x200003b8
 80036d0:	20000294 	.word	0x20000294
 80036d4:	20000290 	.word	0x20000290
 80036d8:	2000029c 	.word	0x2000029c
 80036dc:	51eb851f 	.word	0x51eb851f
 80036e0:	cccccccd 	.word	0xcccccccd
 80036e4:	200002a8 	.word	0x200002a8
 80036e8:	66666667 	.word	0x66666667

080036ec <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80036f6:	4a04      	ldr	r2, [pc, #16]	; (8003708 <LCD_WR_REG+0x1c>)
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	8013      	strh	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	600ffffe 	.word	0x600ffffe

0800370c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8003716:	4a04      	ldr	r2, [pc, #16]	; (8003728 <LCD_WR_DATA+0x1c>)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	8053      	strh	r3, [r2, #2]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	600ffffe 	.word	0x600ffffe

0800372c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <LCD_RD_DATA+0x20>)
 8003734:	885b      	ldrh	r3, [r3, #2]
 8003736:	b29b      	uxth	r3, r3
 8003738:	80fb      	strh	r3, [r7, #6]
	return ram;
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	b29b      	uxth	r3, r3
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	600ffffe 	.word	0x600ffffe

08003750 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4623      	mov	r3, r4
 8003760:	80fb      	strh	r3, [r7, #6]
 8003762:	4603      	mov	r3, r0
 8003764:	80bb      	strh	r3, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	807b      	strh	r3, [r7, #2]
 800376a:	4613      	mov	r3, r2
 800376c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800376e:	202a      	movs	r0, #42	; 0x2a
 8003770:	f7ff ffbc 	bl	80036ec <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ffc6 	bl	800370c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	b29b      	uxth	r3, r3
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ffc0 	bl	800370c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	b29b      	uxth	r3, r3
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ffba 	bl	800370c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	b29b      	uxth	r3, r3
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ffb4 	bl	800370c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80037a4:	202b      	movs	r0, #43	; 0x2b
 80037a6:	f7ff ffa1 	bl	80036ec <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80037aa:	88bb      	ldrh	r3, [r7, #4]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ffab 	bl	800370c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80037b6:	88bb      	ldrh	r3, [r7, #4]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ffa5 	bl	800370c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80037c2:	883b      	ldrh	r3, [r7, #0]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff9f 	bl	800370c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80037ce:	883b      	ldrh	r3, [r7, #0]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff99 	bl	800370c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80037da:	202c      	movs	r0, #44	; 0x2c
 80037dc:	f7ff ff86 	bl	80036ec <LCD_WR_REG>
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}

080037e8 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <lcd_Clear+0x60>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <lcd_Clear+0x60>)
 80037fc:	885b      	ldrh	r3, [r3, #2]
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29b      	uxth	r3, r3
 8003802:	2100      	movs	r1, #0
 8003804:	2000      	movs	r0, #0
 8003806:	f7ff ffa3 	bl	8003750 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800380a:	2300      	movs	r3, #0
 800380c:	81fb      	strh	r3, [r7, #14]
 800380e:	e011      	b.n	8003834 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8003810:	2300      	movs	r3, #0
 8003812:	81bb      	strh	r3, [r7, #12]
 8003814:	e006      	b.n	8003824 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff77 	bl	800370c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800381e:	89bb      	ldrh	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	81bb      	strh	r3, [r7, #12]
 8003824:	4b08      	ldr	r3, [pc, #32]	; (8003848 <lcd_Clear+0x60>)
 8003826:	885b      	ldrh	r3, [r3, #2]
 8003828:	89ba      	ldrh	r2, [r7, #12]
 800382a:	429a      	cmp	r2, r3
 800382c:	d3f3      	bcc.n	8003816 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800382e:	89fb      	ldrh	r3, [r7, #14]
 8003830:	3301      	adds	r3, #1
 8003832:	81fb      	strh	r3, [r7, #14]
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <lcd_Clear+0x60>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	89fa      	ldrh	r2, [r7, #14]
 800383a:	429a      	cmp	r2, r3
 800383c:	d3e8      	bcc.n	8003810 <lcd_Clear+0x28>
		}
	}
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000334 	.word	0x20000334

0800384c <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	4604      	mov	r4, r0
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4623      	mov	r3, r4
 800385c:	80fb      	strh	r3, [r7, #6]
 800385e:	4603      	mov	r3, r0
 8003860:	80bb      	strh	r3, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	807b      	strh	r3, [r7, #2]
 8003866:	4613      	mov	r3, r2
 8003868:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	883b      	ldrh	r3, [r7, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	b29b      	uxth	r3, r3
 8003876:	88b9      	ldrh	r1, [r7, #4]
 8003878:	88f8      	ldrh	r0, [r7, #6]
 800387a:	f7ff ff69 	bl	8003750 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800387e:	88bb      	ldrh	r3, [r7, #4]
 8003880:	81fb      	strh	r3, [r7, #14]
 8003882:	e010      	b.n	80038a6 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	81bb      	strh	r3, [r7, #12]
 8003888:	e006      	b.n	8003898 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800388a:	8c3b      	ldrh	r3, [r7, #32]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff3d 	bl	800370c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8003892:	89bb      	ldrh	r3, [r7, #12]
 8003894:	3301      	adds	r3, #1
 8003896:	81bb      	strh	r3, [r7, #12]
 8003898:	89ba      	ldrh	r2, [r7, #12]
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	429a      	cmp	r2, r3
 800389e:	d3f4      	bcc.n	800388a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80038a0:	89fb      	ldrh	r3, [r7, #14]
 80038a2:	3301      	adds	r3, #1
 80038a4:	81fb      	strh	r3, [r7, #14]
 80038a6:	89fa      	ldrh	r2, [r7, #14]
 80038a8:	883b      	ldrh	r3, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d3ea      	bcc.n	8003884 <lcd_Fill+0x38>
		}
	}
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}

080038b8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	80fb      	strh	r3, [r7, #6]
 80038c2:	460b      	mov	r3, r1
 80038c4:	80bb      	strh	r3, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80038ca:	88bb      	ldrh	r3, [r7, #4]
 80038cc:	88fa      	ldrh	r2, [r7, #6]
 80038ce:	88b9      	ldrh	r1, [r7, #4]
 80038d0:	88f8      	ldrh	r0, [r7, #6]
 80038d2:	f7ff ff3d 	bl	8003750 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff17 	bl	800370c <LCD_WR_DATA>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80038e6:	b590      	push	{r4, r7, lr}
 80038e8:	b08d      	sub	sp, #52	; 0x34
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4604      	mov	r4, r0
 80038ee:	4608      	mov	r0, r1
 80038f0:	4611      	mov	r1, r2
 80038f2:	461a      	mov	r2, r3
 80038f4:	4623      	mov	r3, r4
 80038f6:	80fb      	strh	r3, [r7, #6]
 80038f8:	4603      	mov	r3, r0
 80038fa:	80bb      	strh	r3, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8003904:	2300      	movs	r3, #0
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 800390c:	887a      	ldrh	r2, [r7, #2]
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8003914:	883a      	ldrh	r2, [r7, #0]
 8003916:	88bb      	ldrh	r3, [r7, #4]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8003920:	88bb      	ldrh	r3, [r7, #4]
 8003922:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2b00      	cmp	r3, #0
 8003928:	dd02      	ble.n	8003930 <lcd_DrawLine+0x4a>
 800392a:	2301      	movs	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e00b      	b.n	8003948 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <lcd_DrawLine+0x56>
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e005      	b.n	8003948 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	425b      	negs	r3, r3
 8003946:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	dd02      	ble.n	8003954 <lcd_DrawLine+0x6e>
 800394e:	2301      	movs	r3, #1
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e00b      	b.n	800396c <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <lcd_DrawLine+0x7a>
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e005      	b.n	800396c <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	425b      	negs	r3, r3
 800396a:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 800396c:	6a3a      	ldr	r2, [r7, #32]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	429a      	cmp	r2, r3
 8003972:	dd02      	ble.n	800397a <lcd_DrawLine+0x94>
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e001      	b.n	800397e <lcd_DrawLine+0x98>
	else distance=delta_y;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800397e:	2300      	movs	r3, #0
 8003980:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003982:	e02b      	b.n	80039dc <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	b29b      	uxth	r3, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	b291      	uxth	r1, r2
 800398c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff91 	bl	80038b8 <lcd_DrawPoint>
		xerr+=delta_x;
 8003996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	4413      	add	r3, r2
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800399e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80039a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	dd07      	ble.n	80039be <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80039ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	dd07      	ble.n	80039d6 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4413      	add	r3, r2
 80039d4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80039d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039d8:	3301      	adds	r3, #1
 80039da:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80039dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dacf      	bge.n	8003984 <lcd_DrawLine+0x9e>
		}
	}
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3734      	adds	r7, #52	; 0x34
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}

080039ee <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80039ee:	b590      	push	{r4, r7, lr}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	4604      	mov	r4, r0
 80039f6:	4608      	mov	r0, r1
 80039f8:	4611      	mov	r1, r2
 80039fa:	461a      	mov	r2, r3
 80039fc:	4623      	mov	r3, r4
 80039fe:	80fb      	strh	r3, [r7, #6]
 8003a00:	4603      	mov	r3, r0
 8003a02:	80bb      	strh	r3, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8003a0c:	88bc      	ldrh	r4, [r7, #4]
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	88b9      	ldrh	r1, [r7, #4]
 8003a12:	88f8      	ldrh	r0, [r7, #6]
 8003a14:	8b3b      	ldrh	r3, [r7, #24]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4623      	mov	r3, r4
 8003a1a:	f7ff ff64 	bl	80038e6 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8003a1e:	883c      	ldrh	r4, [r7, #0]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	88b9      	ldrh	r1, [r7, #4]
 8003a24:	88f8      	ldrh	r0, [r7, #6]
 8003a26:	8b3b      	ldrh	r3, [r7, #24]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	f7ff ff5b 	bl	80038e6 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8003a30:	883c      	ldrh	r4, [r7, #0]
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	8839      	ldrh	r1, [r7, #0]
 8003a36:	88f8      	ldrh	r0, [r7, #6]
 8003a38:	8b3b      	ldrh	r3, [r7, #24]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	f7ff ff52 	bl	80038e6 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8003a42:	883c      	ldrh	r4, [r7, #0]
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	88b9      	ldrh	r1, [r7, #4]
 8003a48:	8878      	ldrh	r0, [r7, #2]
 8003a4a:	8b3b      	ldrh	r3, [r7, #24]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4623      	mov	r3, r4
 8003a50:	f7ff ff49 	bl	80038e6 <lcd_DrawLine>
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}

08003a5c <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	4611      	mov	r1, r2
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	80fb      	strh	r3, [r7, #6]
 8003a6e:	4603      	mov	r3, r0
 8003a70:	80bb      	strh	r3, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
 8003a76:	4613      	mov	r3, r2
 8003a78:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8003a82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	08db      	lsrs	r3, r3, #3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	fb12 f303 	smulbb	r3, r2, r3
 8003ab2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	3b20      	subs	r3, #32
 8003ab8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29c      	uxth	r4, r3
 8003ac8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	88bb      	ldrh	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	88b9      	ldrh	r1, [r7, #4]
 8003ada:	88f8      	ldrh	r0, [r7, #6]
 8003adc:	4622      	mov	r2, r4
 8003ade:	f7ff fe37 	bl	8003750 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	827b      	strh	r3, [r7, #18]
 8003ae6:	e086      	b.n	8003bf6 <lcd_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[character][i];
 8003ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d10b      	bne.n	8003b08 <lcd_ShowChar+0xac>
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	8a79      	ldrh	r1, [r7, #18]
 8003af4:	4845      	ldr	r0, [pc, #276]	; (8003c0c <lcd_ShowChar+0x1b0>)
 8003af6:	4613      	mov	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4403      	add	r3, r0
 8003b00:	440b      	add	r3, r1
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	75fb      	strb	r3, [r7, #23]
 8003b06:	e028      	b.n	8003b5a <lcd_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[character][i];
 8003b08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d108      	bne.n	8003b22 <lcd_ShowChar+0xc6>
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	8a7b      	ldrh	r3, [r7, #18]
 8003b14:	493e      	ldr	r1, [pc, #248]	; (8003c10 <lcd_ShowChar+0x1b4>)
 8003b16:	0112      	lsls	r2, r2, #4
 8003b18:	440a      	add	r2, r1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	75fb      	strb	r3, [r7, #23]
 8003b20:	e01b      	b.n	8003b5a <lcd_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[character][i];
 8003b22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b26:	2b18      	cmp	r3, #24
 8003b28:	d10b      	bne.n	8003b42 <lcd_ShowChar+0xe6>
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	8a79      	ldrh	r1, [r7, #18]
 8003b2e:	4839      	ldr	r0, [pc, #228]	; (8003c14 <lcd_ShowChar+0x1b8>)
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	4403      	add	r3, r0
 8003b3a:	440b      	add	r3, r1
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	75fb      	strb	r3, [r7, #23]
 8003b40:	e00b      	b.n	8003b5a <lcd_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[character][i];
 8003b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d15b      	bne.n	8003c02 <lcd_ShowChar+0x1a6>
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	8a7b      	ldrh	r3, [r7, #18]
 8003b4e:	4932      	ldr	r1, [pc, #200]	; (8003c18 <lcd_ShowChar+0x1bc>)
 8003b50:	0192      	lsls	r2, r2, #6
 8003b52:	440a      	add	r2, r1
 8003b54:	4413      	add	r3, r2
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75bb      	strb	r3, [r7, #22]
 8003b5e:	e044      	b.n	8003bea <lcd_ShowChar+0x18e>
		{
			if(!mode)
 8003b60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d120      	bne.n	8003baa <lcd_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8003b68:	7dfa      	ldrb	r2, [r7, #23]
 8003b6a:	7dbb      	ldrb	r3, [r7, #22]
 8003b6c:	fa42 f303 	asr.w	r3, r2, r3
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <lcd_ShowChar+0x126>
 8003b78:	883b      	ldrh	r3, [r7, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fdc6 	bl	800370c <LCD_WR_DATA>
 8003b80:	e003      	b.n	8003b8a <lcd_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8003b82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fdc1 	bl	800370c <LCD_WR_DATA>
				m++;
 8003b8a:	7d7b      	ldrb	r3, [r7, #21]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8003b90:	7d7b      	ldrb	r3, [r7, #21]
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b98:	fb01 f202 	mul.w	r2, r1, r2
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11f      	bne.n	8003be4 <lcd_ShowChar+0x188>
				{
					m=0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	757b      	strb	r3, [r7, #21]
					break;
 8003ba8:	e022      	b.n	8003bf0 <lcd_ShowChar+0x194>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8003baa:	7dfa      	ldrb	r2, [r7, #23]
 8003bac:	7dbb      	ldrb	r3, [r7, #22]
 8003bae:	fa42 f303 	asr.w	r3, r2, r3
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <lcd_ShowChar+0x16a>
 8003bba:	883a      	ldrh	r2, [r7, #0]
 8003bbc:	88b9      	ldrh	r1, [r7, #4]
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fe79 	bl	80038b8 <lcd_DrawPoint>
				x++;
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	8a3b      	ldrh	r3, [r7, #16]
 8003bd0:	1ad2      	subs	r2, r2, r3
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d105      	bne.n	8003be4 <lcd_ShowChar+0x188>
				{
					x=x0;
 8003bd8:	8a3b      	ldrh	r3, [r7, #16]
 8003bda:	80fb      	strh	r3, [r7, #6]
					y++;
 8003bdc:	88bb      	ldrh	r3, [r7, #4]
 8003bde:	3301      	adds	r3, #1
 8003be0:	80bb      	strh	r3, [r7, #4]
					break;
 8003be2:	e005      	b.n	8003bf0 <lcd_ShowChar+0x194>
		for(t=0;t<8;t++)
 8003be4:	7dbb      	ldrb	r3, [r7, #22]
 8003be6:	3301      	adds	r3, #1
 8003be8:	75bb      	strb	r3, [r7, #22]
 8003bea:	7dbb      	ldrb	r3, [r7, #22]
 8003bec:	2b07      	cmp	r3, #7
 8003bee:	d9b7      	bls.n	8003b60 <lcd_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8003bf0:	8a7b      	ldrh	r3, [r7, #18]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	827b      	strh	r3, [r7, #18]
 8003bf6:	8a7a      	ldrh	r2, [r7, #18]
 8003bf8:	89bb      	ldrh	r3, [r7, #12]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	f4ff af74 	bcc.w	8003ae8 <lcd_ShowChar+0x8c>
 8003c00:	e000      	b.n	8003c04 <lcd_ShowChar+0x1a8>
		else return;
 8003c02:	bf00      	nop
				}
			}
		}
	}
}
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd90      	pop	{r4, r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	0800e75c 	.word	0x0800e75c
 8003c10:	0800ebd0 	.word	0x0800ebd0
 8003c14:	0800f1c0 	.word	0x0800f1c0
 8003c18:	08010390 	.word	0x08010390

08003c1c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	460a      	mov	r2, r1
 8003c26:	71fb      	strb	r3, [r7, #7]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8003c30:	e004      	b.n	8003c3c <mypow+0x20>
 8003c32:	79fa      	ldrb	r2, [r7, #7]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	79bb      	ldrb	r3, [r7, #6]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	71ba      	strb	r2, [r7, #6]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f5      	bne.n	8003c32 <mypow+0x16>
	return result;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af04      	add	r7, sp, #16
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	80fb      	strh	r3, [r7, #6]
 8003c66:	4603      	mov	r3, r0
 8003c68:	80bb      	strh	r3, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	807b      	strh	r3, [r7, #2]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8003c76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	e059      	b.n	8003d38 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8003c84:	887c      	ldrh	r4, [r7, #2]
 8003c86:	787a      	ldrb	r2, [r7, #1]
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	200a      	movs	r0, #10
 8003c96:	f7ff ffc1 	bl	8003c1c <mypow>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	fbb4 f1f3 	udiv	r1, r4, r3
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <lcd_ShowIntNum+0xf8>)
 8003ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	1aca      	subs	r2, r1, r3
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8003cb6:	7bbb      	ldrb	r3, [r7, #14]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d121      	bne.n	8003d00 <lcd_ShowIntNum+0xac>
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	787b      	ldrb	r3, [r7, #1]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	da1c      	bge.n	8003d00 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8003cc6:	7b3b      	ldrb	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d117      	bne.n	8003cfc <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	7b7b      	ldrb	r3, [r7, #13]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	fb12 f303 	smulbb	r3, r2, r3
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	4413      	add	r3, r2
 8003cde:	b298      	uxth	r0, r3
 8003ce0:	8c3a      	ldrh	r2, [r7, #32]
 8003ce2:	88b9      	ldrh	r1, [r7, #4]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9302      	str	r3, [sp, #8]
 8003ce8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f7ff feb1 	bl	8003a5c <lcd_ShowChar>
				continue;
 8003cfa:	e01a      	b.n	8003d32 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	7b7b      	ldrb	r3, [r7, #13]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	fb12 f303 	smulbb	r3, r2, r3
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	4413      	add	r3, r2
 8003d12:	b298      	uxth	r0, r3
 8003d14:	7b3b      	ldrb	r3, [r7, #12]
 8003d16:	3330      	adds	r3, #48	; 0x30
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	8c3c      	ldrh	r4, [r7, #32]
 8003d1c:	88b9      	ldrh	r1, [r7, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9302      	str	r3, [sp, #8]
 8003d22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	4623      	mov	r3, r4
 8003d2e:	f7ff fe95 	bl	8003a5c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	3301      	adds	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	787b      	ldrb	r3, [r7, #1]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3a1      	bcc.n	8003c84 <lcd_ShowIntNum+0x30>
	}
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	cccccccd 	.word	0xcccccccd

08003d50 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b08b      	sub	sp, #44	; 0x2c
 8003d54:	af04      	add	r7, sp, #16
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4623      	mov	r3, r4
 8003d64:	81fb      	strh	r3, [r7, #14]
 8003d66:	4603      	mov	r3, r0
 8003d68:	81bb      	strh	r3, [r7, #12]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	71fb      	strb	r3, [r7, #7]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8003d72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8003d7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d7e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003e58 <lcd_ShowFloatNum+0x108>
 8003d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d8a:	ee17 3a90 	vmov	r3, s15
 8003d8e:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	75fb      	strb	r3, [r7, #23]
 8003d94:	e057      	b.n	8003e46 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8003d96:	8abc      	ldrh	r4, [r7, #20]
 8003d98:	79fa      	ldrb	r2, [r7, #7]
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	4619      	mov	r1, r3
 8003da6:	200a      	movs	r0, #10
 8003da8:	f7ff ff38 	bl	8003c1c <mypow>
 8003dac:	4603      	mov	r3, r0
 8003dae:	fbb4 f1f3 	udiv	r1, r4, r3
 8003db2:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <lcd_ShowFloatNum+0x10c>)
 8003db4:	fba3 2301 	umull	r2, r3, r3, r1
 8003db8:	08da      	lsrs	r2, r3, #3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	1aca      	subs	r2, r1, r3
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8003dc8:	7dfa      	ldrb	r2, [r7, #23]
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	3b02      	subs	r3, #2
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d11d      	bne.n	8003e0e <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	3b02      	subs	r3, #2
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	7dbb      	ldrb	r3, [r7, #22]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	fb12 f303 	smulbb	r3, r2, r3
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	89fb      	ldrh	r3, [r7, #14]
 8003de4:	4413      	add	r3, r2
 8003de6:	b298      	uxth	r0, r3
 8003de8:	88ba      	ldrh	r2, [r7, #4]
 8003dea:	89b9      	ldrh	r1, [r7, #12]
 8003dec:	2300      	movs	r3, #0
 8003dee:	9302      	str	r3, [sp, #8]
 8003df0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	222e      	movs	r2, #46	; 0x2e
 8003dfe:	f7ff fe2d 	bl	8003a5c <lcd_ShowChar>
			t++;
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	3301      	adds	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	7dbb      	ldrb	r3, [r7, #22]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	fb12 f303 	smulbb	r3, r2, r3
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	89fb      	ldrh	r3, [r7, #14]
 8003e1e:	4413      	add	r3, r2
 8003e20:	b298      	uxth	r0, r3
 8003e22:	7cfb      	ldrb	r3, [r7, #19]
 8003e24:	3330      	adds	r3, #48	; 0x30
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	88bc      	ldrh	r4, [r7, #4]
 8003e2a:	89b9      	ldrh	r1, [r7, #12]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9302      	str	r3, [sp, #8]
 8003e30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	4623      	mov	r3, r4
 8003e3c:	f7ff fe0e 	bl	8003a5c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	3301      	adds	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
 8003e46:	7dfa      	ldrb	r2, [r7, #23]
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d3a3      	bcc.n	8003d96 <lcd_ShowFloatNum+0x46>
	}
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	42c80000 	.word	0x42c80000
 8003e5c:	cccccccd 	.word	0xcccccccd

08003e60 <lcd_ShowPicture>:

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4623      	mov	r3, r4
 8003e70:	80fb      	strh	r3, [r7, #6]
 8003e72:	4603      	mov	r3, r0
 8003e74:	80bb      	strh	r3, [r7, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	807b      	strh	r3, [r7, #2]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	887b      	ldrh	r3, [r7, #2]
 8003e86:	4413      	add	r3, r2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29c      	uxth	r4, r3
 8003e8e:	88ba      	ldrh	r2, [r7, #4]
 8003e90:	883b      	ldrh	r3, [r7, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	88b9      	ldrh	r1, [r7, #4]
 8003e9c:	88f8      	ldrh	r0, [r7, #6]
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	f7ff fc56 	bl	8003750 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	82fb      	strh	r3, [r7, #22]
 8003ea8:	e027      	b.n	8003efa <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	82bb      	strh	r3, [r7, #20]
 8003eae:	e01d      	b.n	8003eec <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb6:	4413      	add	r3, r2
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec4:	4413      	add	r3, r2
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	b21a      	sxth	r2, r3
 8003ed0:	7bbb      	ldrb	r3, [r7, #14]
 8003ed2:	b21b      	sxth	r3, r3
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b21b      	sxth	r3, r3
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fc16 	bl	800370c <LCD_WR_DATA>
			k++;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8003ee6:	8abb      	ldrh	r3, [r7, #20]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	82bb      	strh	r3, [r7, #20]
 8003eec:	8aba      	ldrh	r2, [r7, #20]
 8003eee:	883b      	ldrh	r3, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3dd      	bcc.n	8003eb0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8003ef4:	8afb      	ldrh	r3, [r7, #22]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	82fb      	strh	r3, [r7, #22]
 8003efa:	8afa      	ldrh	r2, [r7, #22]
 8003efc:	887b      	ldrh	r3, [r7, #2]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3d3      	bcc.n	8003eaa <lcd_ShowPicture+0x4a>
		}
	}
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd90      	pop	{r4, r7, pc}

08003f0c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <lcd_SetDir+0x44>)
 8003f28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f2c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <lcd_SetDir+0x44>)
 8003f30:	22f0      	movs	r2, #240	; 0xf0
 8003f32:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8003f34:	e006      	b.n	8003f44 <lcd_SetDir+0x38>
		lcddev.width=240;
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <lcd_SetDir+0x44>)
 8003f38:	22f0      	movs	r2, #240	; 0xf0
 8003f3a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <lcd_SetDir+0x44>)
 8003f3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f42:	805a      	strh	r2, [r3, #2]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	20000334 	.word	0x20000334

08003f54 <lcd_init>:


void lcd_init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f5e:	48aa      	ldr	r0, [pc, #680]	; (8004208 <lcd_init+0x2b4>)
 8003f60:	f004 f824 	bl	8007fac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003f64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f68:	f002 fd22 	bl	80069b0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f72:	48a5      	ldr	r0, [pc, #660]	; (8004208 <lcd_init+0x2b4>)
 8003f74:	f004 f81a 	bl	8007fac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003f78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f7c:	f002 fd18 	bl	80069b0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7ff ffc3 	bl	8003f0c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8003f86:	20d3      	movs	r0, #211	; 0xd3
 8003f88:	f7ff fbb0 	bl	80036ec <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8003f8c:	f7ff fbce 	bl	800372c <LCD_RD_DATA>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b9d      	ldr	r3, [pc, #628]	; (800420c <lcd_init+0x2b8>)
 8003f96:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8003f98:	f7ff fbc8 	bl	800372c <LCD_RD_DATA>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b9a      	ldr	r3, [pc, #616]	; (800420c <lcd_init+0x2b8>)
 8003fa2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8003fa4:	f7ff fbc2 	bl	800372c <LCD_RD_DATA>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b97      	ldr	r3, [pc, #604]	; (800420c <lcd_init+0x2b8>)
 8003fae:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8003fb0:	4b96      	ldr	r3, [pc, #600]	; (800420c <lcd_init+0x2b8>)
 8003fb2:	889b      	ldrh	r3, [r3, #4]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	4b94      	ldr	r3, [pc, #592]	; (800420c <lcd_init+0x2b8>)
 8003fba:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8003fbc:	f7ff fbb6 	bl	800372c <LCD_RD_DATA>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b91      	ldr	r3, [pc, #580]	; (800420c <lcd_init+0x2b8>)
 8003fc6:	889b      	ldrh	r3, [r3, #4]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	4b8f      	ldr	r3, [pc, #572]	; (800420c <lcd_init+0x2b8>)
 8003fce:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8003fd0:	20cf      	movs	r0, #207	; 0xcf
 8003fd2:	f7ff fb8b 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7ff fb98 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8003fdc:	20c1      	movs	r0, #193	; 0xc1
 8003fde:	f7ff fb95 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8003fe2:	2030      	movs	r0, #48	; 0x30
 8003fe4:	f7ff fb92 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8003fe8:	20ed      	movs	r0, #237	; 0xed
 8003fea:	f7ff fb7f 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8003fee:	2064      	movs	r0, #100	; 0x64
 8003ff0:	f7ff fb8c 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8003ff4:	2003      	movs	r0, #3
 8003ff6:	f7ff fb89 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8003ffa:	2012      	movs	r0, #18
 8003ffc:	f7ff fb86 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8004000:	2081      	movs	r0, #129	; 0x81
 8004002:	f7ff fb83 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8004006:	20e8      	movs	r0, #232	; 0xe8
 8004008:	f7ff fb70 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800400c:	2085      	movs	r0, #133	; 0x85
 800400e:	f7ff fb7d 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8004012:	2010      	movs	r0, #16
 8004014:	f7ff fb7a 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8004018:	207a      	movs	r0, #122	; 0x7a
 800401a:	f7ff fb77 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800401e:	20cb      	movs	r0, #203	; 0xcb
 8004020:	f7ff fb64 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8004024:	2039      	movs	r0, #57	; 0x39
 8004026:	f7ff fb71 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800402a:	202c      	movs	r0, #44	; 0x2c
 800402c:	f7ff fb6e 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004030:	2000      	movs	r0, #0
 8004032:	f7ff fb6b 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8004036:	2034      	movs	r0, #52	; 0x34
 8004038:	f7ff fb68 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800403c:	2002      	movs	r0, #2
 800403e:	f7ff fb65 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8004042:	20f7      	movs	r0, #247	; 0xf7
 8004044:	f7ff fb52 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8004048:	2020      	movs	r0, #32
 800404a:	f7ff fb5f 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800404e:	20ea      	movs	r0, #234	; 0xea
 8004050:	f7ff fb4c 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004054:	2000      	movs	r0, #0
 8004056:	f7ff fb59 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800405a:	2000      	movs	r0, #0
 800405c:	f7ff fb56 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8004060:	20c0      	movs	r0, #192	; 0xc0
 8004062:	f7ff fb43 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8004066:	201b      	movs	r0, #27
 8004068:	f7ff fb50 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800406c:	20c1      	movs	r0, #193	; 0xc1
 800406e:	f7ff fb3d 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8004072:	2001      	movs	r0, #1
 8004074:	f7ff fb4a 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8004078:	20c5      	movs	r0, #197	; 0xc5
 800407a:	f7ff fb37 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800407e:	2030      	movs	r0, #48	; 0x30
 8004080:	f7ff fb44 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8004084:	2030      	movs	r0, #48	; 0x30
 8004086:	f7ff fb41 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800408a:	20c7      	movs	r0, #199	; 0xc7
 800408c:	f7ff fb2e 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8004090:	20b7      	movs	r0, #183	; 0xb7
 8004092:	f7ff fb3b 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8004096:	2036      	movs	r0, #54	; 0x36
 8004098:	f7ff fb28 	bl	80036ec <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800409c:	2008      	movs	r0, #8
 800409e:	f7ff fb35 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80040a2:	203a      	movs	r0, #58	; 0x3a
 80040a4:	f7ff fb22 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80040a8:	2055      	movs	r0, #85	; 0x55
 80040aa:	f7ff fb2f 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80040ae:	20b1      	movs	r0, #177	; 0xb1
 80040b0:	f7ff fb1c 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80040b4:	2000      	movs	r0, #0
 80040b6:	f7ff fb29 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80040ba:	201a      	movs	r0, #26
 80040bc:	f7ff fb26 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80040c0:	20b6      	movs	r0, #182	; 0xb6
 80040c2:	f7ff fb13 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80040c6:	200a      	movs	r0, #10
 80040c8:	f7ff fb20 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80040cc:	20a2      	movs	r0, #162	; 0xa2
 80040ce:	f7ff fb1d 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80040d2:	20f2      	movs	r0, #242	; 0xf2
 80040d4:	f7ff fb0a 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80040d8:	2000      	movs	r0, #0
 80040da:	f7ff fb17 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80040de:	2026      	movs	r0, #38	; 0x26
 80040e0:	f7ff fb04 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80040e4:	2001      	movs	r0, #1
 80040e6:	f7ff fb11 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80040ea:	20e0      	movs	r0, #224	; 0xe0
 80040ec:	f7ff fafe 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80040f0:	200f      	movs	r0, #15
 80040f2:	f7ff fb0b 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80040f6:	202a      	movs	r0, #42	; 0x2a
 80040f8:	f7ff fb08 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80040fc:	2028      	movs	r0, #40	; 0x28
 80040fe:	f7ff fb05 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8004102:	2008      	movs	r0, #8
 8004104:	f7ff fb02 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8004108:	200e      	movs	r0, #14
 800410a:	f7ff faff 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800410e:	2008      	movs	r0, #8
 8004110:	f7ff fafc 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8004114:	2054      	movs	r0, #84	; 0x54
 8004116:	f7ff faf9 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800411a:	20a9      	movs	r0, #169	; 0xa9
 800411c:	f7ff faf6 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8004120:	2043      	movs	r0, #67	; 0x43
 8004122:	f7ff faf3 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8004126:	200a      	movs	r0, #10
 8004128:	f7ff faf0 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800412c:	200f      	movs	r0, #15
 800412e:	f7ff faed 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004132:	2000      	movs	r0, #0
 8004134:	f7ff faea 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004138:	2000      	movs	r0, #0
 800413a:	f7ff fae7 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800413e:	2000      	movs	r0, #0
 8004140:	f7ff fae4 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004144:	2000      	movs	r0, #0
 8004146:	f7ff fae1 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800414a:	20e1      	movs	r0, #225	; 0xe1
 800414c:	f7ff face 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004150:	2000      	movs	r0, #0
 8004152:	f7ff fadb 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8004156:	2015      	movs	r0, #21
 8004158:	f7ff fad8 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800415c:	2017      	movs	r0, #23
 800415e:	f7ff fad5 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8004162:	2007      	movs	r0, #7
 8004164:	f7ff fad2 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8004168:	2011      	movs	r0, #17
 800416a:	f7ff facf 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800416e:	2006      	movs	r0, #6
 8004170:	f7ff facc 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8004174:	202b      	movs	r0, #43	; 0x2b
 8004176:	f7ff fac9 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800417a:	2056      	movs	r0, #86	; 0x56
 800417c:	f7ff fac6 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8004180:	203c      	movs	r0, #60	; 0x3c
 8004182:	f7ff fac3 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8004186:	2005      	movs	r0, #5
 8004188:	f7ff fac0 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800418c:	2010      	movs	r0, #16
 800418e:	f7ff fabd 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8004192:	200f      	movs	r0, #15
 8004194:	f7ff faba 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8004198:	203f      	movs	r0, #63	; 0x3f
 800419a:	f7ff fab7 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800419e:	203f      	movs	r0, #63	; 0x3f
 80041a0:	f7ff fab4 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80041a4:	200f      	movs	r0, #15
 80041a6:	f7ff fab1 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80041aa:	202b      	movs	r0, #43	; 0x2b
 80041ac:	f7ff fa9e 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7ff faab 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7ff faa8 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80041bc:	2001      	movs	r0, #1
 80041be:	f7ff faa5 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80041c2:	203f      	movs	r0, #63	; 0x3f
 80041c4:	f7ff faa2 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80041c8:	202a      	movs	r0, #42	; 0x2a
 80041ca:	f7ff fa8f 	bl	80036ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7ff fa9c 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7ff fa99 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7ff fa96 	bl	800370c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80041e0:	20ef      	movs	r0, #239	; 0xef
 80041e2:	f7ff fa93 	bl	800370c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80041e6:	2011      	movs	r0, #17
 80041e8:	f7ff fa80 	bl	80036ec <LCD_WR_REG>
	HAL_Delay(120);
 80041ec:	2078      	movs	r0, #120	; 0x78
 80041ee:	f002 fbdf 	bl	80069b0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80041f2:	2029      	movs	r0, #41	; 0x29
 80041f4:	f7ff fa7a 	bl	80036ec <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80041f8:	2201      	movs	r2, #1
 80041fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041fe:	4804      	ldr	r0, [pc, #16]	; (8004210 <lcd_init+0x2bc>)
 8004200:	f003 fed4 	bl	8007fac <HAL_GPIO_WritePin>
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40020800 	.word	0x40020800
 800420c:	20000334 	.word	0x20000334
 8004210:	40020000 	.word	0x40020000

08004214 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	b29b      	uxth	r3, r3
 800422a:	4413      	add	r3, r2
 800422c:	b298      	uxth	r0, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	b29a      	uxth	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	4413      	add	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	8b3a      	ldrh	r2, [r7, #24]
 800423c:	4619      	mov	r1, r3
 800423e:	f7ff fb3b 	bl	80038b8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	b29b      	uxth	r3, r3
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	b298      	uxth	r0, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	b29a      	uxth	r2, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	4413      	add	r3, r2
 8004258:	b29b      	uxth	r3, r3
 800425a:	8b3a      	ldrh	r2, [r7, #24]
 800425c:	4619      	mov	r1, r3
 800425e:	f7ff fb2b 	bl	80038b8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	b29b      	uxth	r3, r3
 800426a:	4413      	add	r3, r2
 800426c:	b298      	uxth	r0, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	b29a      	uxth	r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	b29b      	uxth	r3, r3
 800427a:	8b3a      	ldrh	r2, [r7, #24]
 800427c:	4619      	mov	r1, r3
 800427e:	f7ff fb1b 	bl	80038b8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	b29b      	uxth	r3, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	b298      	uxth	r0, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	b29a      	uxth	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	b29b      	uxth	r3, r3
 800429a:	8b3a      	ldrh	r2, [r7, #24]
 800429c:	4619      	mov	r1, r3
 800429e:	f7ff fb0b 	bl	80038b8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	b298      	uxth	r0, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8b3a      	ldrh	r2, [r7, #24]
 80042bc:	4619      	mov	r1, r3
 80042be:	f7ff fafb 	bl	80038b8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	b298      	uxth	r0, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	b29b      	uxth	r3, r3
 80042da:	8b3a      	ldrh	r2, [r7, #24]
 80042dc:	4619      	mov	r1, r3
 80042de:	f7ff faeb 	bl	80038b8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	b298      	uxth	r0, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	8b3a      	ldrh	r2, [r7, #24]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7ff fadb 	bl	80038b8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	b29a      	uxth	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	b298      	uxth	r0, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	b29b      	uxth	r3, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	b29b      	uxth	r3, r3
 800431a:	8b3a      	ldrh	r2, [r7, #24]
 800431c:	4619      	mov	r1, r3
 800431e:	f7ff facb 	bl	80038b8 <lcd_DrawPoint>
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b08a      	sub	sp, #40	; 0x28
 800432e:	af02      	add	r7, sp, #8
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	f1c3 0303 	rsb	r3, r3, #3
 800434a:	613b      	str	r3, [r7, #16]


	if (fill)
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d04f      	beq.n	80043f2 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8004352:	e029      	b.n	80043a8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e00a      	b.n	8004370 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff ff55 	bl	8004214 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3301      	adds	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	429a      	cmp	r2, r3
 8004376:	ddf0      	ble.n	800435a <lcd_DrawCircle+0x30>

			if (d < 0) {
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	da06      	bge.n	800438c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	009a      	lsls	r2, r3, #2
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	3306      	adds	r3, #6
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	e00a      	b.n	80043a2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	330a      	adds	r3, #10
 800439a:	613b      	str	r3, [r7, #16]
				y--;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3b01      	subs	r3, #1
 80043a0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3301      	adds	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	ddd1      	ble.n	8004354 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80043b0:	e023      	b.n	80043fa <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff ff29 	bl	8004214 <_draw_circle_8>
			if (d < 0) {
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da06      	bge.n	80043d6 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	3306      	adds	r3, #6
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	e00a      	b.n	80043ec <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	009a      	lsls	r2, r3, #2
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4413      	add	r3, r2
 80043e2:	330a      	adds	r3, #10
 80043e4:	613b      	str	r3, [r7, #16]
				y--;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	61bb      	str	r3, [r7, #24]
			x++;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	dddb      	ble.n	80043b2 <lcd_DrawCircle+0x88>
}
 80043fa:	bf00      	nop
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8004402:	b590      	push	{r4, r7, lr}
 8004404:	b08b      	sub	sp, #44	; 0x2c
 8004406:	af04      	add	r7, sp, #16
 8004408:	60ba      	str	r2, [r7, #8]
 800440a:	461a      	mov	r2, r3
 800440c:	4603      	mov	r3, r0
 800440e:	81fb      	strh	r3, [r7, #14]
 8004410:	460b      	mov	r3, r1
 8004412:	81bb      	strh	r3, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8004418:	89fb      	ldrh	r3, [r7, #14]
 800441a:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800441c:	2300      	movs	r3, #0
 800441e:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8004420:	e034      	b.n	800448c <lcd_ShowStr+0x8a>
	{
		if(!bHz)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d131      	bne.n	800448c <lcd_ShowStr+0x8a>
		{
//			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
			if(*str>0x80)bHz=1;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d902      	bls.n	8004436 <lcd_ShowStr+0x34>
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
 8004434:	e02a      	b.n	800448c <lcd_ShowStr+0x8a>
			else
			{
				if(*str==0x0D)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b0d      	cmp	r3, #13
 800443c:	d10b      	bne.n	8004456 <lcd_ShowStr+0x54>
				{
					y+=sizey;
 800443e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004442:	b29a      	uxth	r2, r3
 8004444:	89bb      	ldrh	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800444a:	8abb      	ldrh	r3, [r7, #20]
 800444c:	81fb      	strh	r3, [r7, #14]
					str++;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3301      	adds	r3, #1
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	e017      	b.n	8004486 <lcd_ShowStr+0x84>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781a      	ldrb	r2, [r3, #0]
 800445a:	88fc      	ldrh	r4, [r7, #6]
 800445c:	89b9      	ldrh	r1, [r7, #12]
 800445e:	89f8      	ldrh	r0, [r7, #14]
 8004460:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004464:	9302      	str	r3, [sp, #8]
 8004466:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4623      	mov	r3, r4
 8004472:	f7ff faf3 	bl	8003a5c <lcd_ShowChar>
					x+=sizey/2;
 8004476:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	b29a      	uxth	r2, r3
 8004480:	89fb      	ldrh	r3, [r7, #14]
 8004482:	4413      	add	r3, r2
 8004484:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	3301      	adds	r3, #1
 800448a:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1c6      	bne.n	8004422 <lcd_ShowStr+0x20>
			}
		}
	}
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
	...

080044a0 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	60ba      	str	r2, [r7, #8]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	81fb      	strh	r3, [r7, #14]
 80044ae:	460b      	mov	r3, r1
 80044b0:	81bb      	strh	r3, [r7, #12]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80044b6:	68b8      	ldr	r0, [r7, #8]
 80044b8:	f7fb fe8a 	bl	80001d0 <strlen>
 80044bc:	4603      	mov	r3, r0
 80044be:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <lcd_StrCenter+0x60>)
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	8afb      	ldrh	r3, [r7, #22]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	0fda      	lsrs	r2, r3, #31
 80044ce:	4413      	add	r3, r2
 80044d0:	105b      	asrs	r3, r3, #1
 80044d2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80044d4:	89fa      	ldrh	r2, [r7, #14]
 80044d6:	8abb      	ldrh	r3, [r7, #20]
 80044d8:	4413      	add	r3, r2
 80044da:	b298      	uxth	r0, r3
 80044dc:	88fa      	ldrh	r2, [r7, #6]
 80044de:	89b9      	ldrh	r1, [r7, #12]
 80044e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044e4:	9302      	str	r3, [sp, #8]
 80044e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	8c3b      	ldrh	r3, [r7, #32]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	f7ff ff85 	bl	8004402 <lcd_ShowStr>
}
 80044f8:	bf00      	nop
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000334 	.word	0x20000334

08004504 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8004508:	2201      	movs	r2, #1
 800450a:	2140      	movs	r1, #64	; 0x40
 800450c:	4802      	ldr	r0, [pc, #8]	; (8004518 <led7_init+0x14>)
 800450e:	f003 fd4d 	bl	8007fac <HAL_GPIO_WritePin>
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021800 	.word	0x40021800

0800451c <led7_Scan>:

void led7_Scan(){
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8004520:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <led7_Scan+0x104>)
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	b29a      	uxth	r2, r3
 8004528:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <led7_Scan+0x104>)
 800452a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800452c:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <led7_Scan+0x108>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <led7_Scan+0x10c>)
 8004534:	5c9b      	ldrb	r3, [r3, r2]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	b21a      	sxth	r2, r3
 800453a:	4b39      	ldr	r3, [pc, #228]	; (8004620 <led7_Scan+0x104>)
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b21b      	sxth	r3, r3
 8004540:	4313      	orrs	r3, r2
 8004542:	b21b      	sxth	r3, r3
 8004544:	b29a      	uxth	r2, r3
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <led7_Scan+0x104>)
 8004548:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800454a:	4b36      	ldr	r3, [pc, #216]	; (8004624 <led7_Scan+0x108>)
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d846      	bhi.n	80045e0 <led7_Scan+0xc4>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <led7_Scan+0x3c>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	08004569 	.word	0x08004569
 800455c:	08004587 	.word	0x08004587
 8004560:	080045a5 	.word	0x080045a5
 8004564:	080045c3 	.word	0x080045c3
	case 0:
		spi_buffer |= 0x00b0;
 8004568:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <led7_Scan+0x104>)
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004570:	b29a      	uxth	r2, r3
 8004572:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <led7_Scan+0x104>)
 8004574:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8004576:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <led7_Scan+0x104>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457e:	b29a      	uxth	r2, r3
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <led7_Scan+0x104>)
 8004582:	801a      	strh	r2, [r3, #0]
		break;
 8004584:	e02d      	b.n	80045e2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8004586:	4b26      	ldr	r3, [pc, #152]	; (8004620 <led7_Scan+0x104>)
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800458e:	b29a      	uxth	r2, r3
 8004590:	4b23      	ldr	r3, [pc, #140]	; (8004620 <led7_Scan+0x104>)
 8004592:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8004594:	4b22      	ldr	r3, [pc, #136]	; (8004620 <led7_Scan+0x104>)
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	f023 0320 	bic.w	r3, r3, #32
 800459c:	b29a      	uxth	r2, r3
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <led7_Scan+0x104>)
 80045a0:	801a      	strh	r2, [r3, #0]
		break;
 80045a2:	e01e      	b.n	80045e2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80045a4:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <led7_Scan+0x104>)
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <led7_Scan+0x104>)
 80045b0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <led7_Scan+0x104>)
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	f023 0310 	bic.w	r3, r3, #16
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <led7_Scan+0x104>)
 80045be:	801a      	strh	r2, [r3, #0]
		break;
 80045c0:	e00f      	b.n	80045e2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <led7_Scan+0x104>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <led7_Scan+0x104>)
 80045ce:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <led7_Scan+0x104>)
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d8:	b29a      	uxth	r2, r3
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <led7_Scan+0x104>)
 80045dc:	801a      	strh	r2, [r3, #0]
		break;
 80045de:	e000      	b.n	80045e2 <led7_Scan+0xc6>
	default:
		break;
 80045e0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <led7_Scan+0x108>)
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	425a      	negs	r2, r3
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	f002 0203 	and.w	r2, r2, #3
 80045f2:	bf58      	it	pl
 80045f4:	4253      	negpl	r3, r2
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <led7_Scan+0x108>)
 80045fa:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80045fc:	2200      	movs	r2, #0
 80045fe:	2140      	movs	r1, #64	; 0x40
 8004600:	480a      	ldr	r0, [pc, #40]	; (800462c <led7_Scan+0x110>)
 8004602:	f003 fcd3 	bl	8007fac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8004606:	2301      	movs	r3, #1
 8004608:	2202      	movs	r2, #2
 800460a:	4905      	ldr	r1, [pc, #20]	; (8004620 <led7_Scan+0x104>)
 800460c:	4808      	ldr	r0, [pc, #32]	; (8004630 <led7_Scan+0x114>)
 800460e:	f005 f9c8 	bl	80099a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8004612:	2201      	movs	r2, #1
 8004614:	2140      	movs	r1, #64	; 0x40
 8004616:	4805      	ldr	r0, [pc, #20]	; (800462c <led7_Scan+0x110>)
 8004618:	f003 fcc8 	bl	8007fac <HAL_GPIO_WritePin>
}
 800461c:	bf00      	nop
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000066 	.word	0x20000066
 8004624:	2000033a 	.word	0x2000033a
 8004628:	20000058 	.word	0x20000058
 800462c:	40021800 	.word	0x40021800
 8004630:	200003c0 	.word	0x200003c0

08004634 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	db0e      	blt.n	8004666 <led7_SetDigit+0x32>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b09      	cmp	r3, #9
 800464c:	dc0b      	bgt.n	8004666 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <led7_SetDigit+0x40>)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	b2d9      	uxtb	r1, r3
 800465c:	4a06      	ldr	r2, [pc, #24]	; (8004678 <led7_SetDigit+0x44>)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4413      	add	r3, r2
 8004662:	460a      	mov	r2, r1
 8004664:	701a      	strb	r2, [r3, #0]
	}
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000005c 	.word	0x2000005c
 8004678:	20000058 	.word	0x20000058

0800467c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004680:	f002 f924 	bl	80068cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004684:	f000 f82c 	bl	80046e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004688:	f7fd fe04 	bl	8002294 <MX_GPIO_Init>
  MX_DMA_Init();
 800468c:	f7fc fe1e 	bl	80012cc <MX_DMA_Init>
  MX_ADC1_Init();
 8004690:	f7fc fc78 	bl	8000f84 <MX_ADC1_Init>
  MX_FSMC_Init();
 8004694:	f7fd fb28 	bl	8001ce8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8004698:	f7fd ff2a 	bl	80024f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800469c:	f000 fbf0 	bl	8004e80 <MX_SPI1_Init>
  MX_TIM2_Init();
 80046a0:	f001 f858 	bl	8005754 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80046a4:	f001 ffe8 	bl	8006678 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80046a8:	f001 f804 	bl	80056b4 <MX_TIM1_Init>
  MX_TIM13_Init();
 80046ac:	f001 f89e 	bl	80057ec <MX_TIM13_Init>
  MX_USART2_UART_Init();
 80046b0:	f002 f80c 	bl	80066cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80046b4:	f000 f87e 	bl	80047b4 <system_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Scan touch screen
	  // 50ms task
	  if(flag_timer2 == 1){
 80046b8:	4b08      	ldr	r3, [pc, #32]	; (80046dc <main+0x60>)
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d1fb      	bne.n	80046b8 <main+0x3c>
		  flag_timer2 = 0;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <main+0x60>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	801a      	strh	r2, [r3, #0]
//		  if(++counterTouch % 2 == 0){
//			  counterTouch = 0;
//			  touch_Scan();
//		  }
		  touch_Scan();
 80046c6:	f001 ff85 	bl	80065d4 <touch_Scan>
		  button_Scan();
 80046ca:	f7fc fd93 	bl	80011f4 <button_Scan>

		  input_process();
 80046ce:	f7fd f81d 	bl	800170c <input_process>
		  fsm_ingame();
 80046d2:	f7fd fa61 	bl	8001b98 <fsm_ingame>
		  update_7seg_time();
 80046d6:	f7fe ff6f 	bl	80035b8 <update_7seg_time>
	  if(flag_timer2 == 1){
 80046da:	e7ed      	b.n	80046b8 <main+0x3c>
 80046dc:	200003a6 	.word	0x200003a6

080046e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b094      	sub	sp, #80	; 0x50
 80046e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046e6:	f107 0320 	add.w	r3, r7, #32
 80046ea:	2230      	movs	r2, #48	; 0x30
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f008 f953 	bl	800c99a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046f4:	f107 030c 	add.w	r3, r7, #12
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004704:	2300      	movs	r3, #0
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	4b28      	ldr	r3, [pc, #160]	; (80047ac <SystemClock_Config+0xcc>)
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	4a27      	ldr	r2, [pc, #156]	; (80047ac <SystemClock_Config+0xcc>)
 800470e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004712:	6413      	str	r3, [r2, #64]	; 0x40
 8004714:	4b25      	ldr	r3, [pc, #148]	; (80047ac <SystemClock_Config+0xcc>)
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004720:	2300      	movs	r3, #0
 8004722:	607b      	str	r3, [r7, #4]
 8004724:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <SystemClock_Config+0xd0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <SystemClock_Config+0xd0>)
 800472a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <SystemClock_Config+0xd0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800473c:	2302      	movs	r3, #2
 800473e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004740:	2301      	movs	r3, #1
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004744:	2310      	movs	r3, #16
 8004746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004748:	2302      	movs	r3, #2
 800474a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800474c:	2300      	movs	r3, #0
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004750:	2308      	movs	r3, #8
 8004752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004754:	23a8      	movs	r3, #168	; 0xa8
 8004756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004758:	2302      	movs	r3, #2
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800475c:	2304      	movs	r3, #4
 800475e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004760:	f107 0320 	add.w	r3, r7, #32
 8004764:	4618      	mov	r0, r3
 8004766:	f004 fbfb 	bl	8008f60 <HAL_RCC_OscConfig>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004770:	f000 f844 	bl	80047fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004774:	230f      	movs	r3, #15
 8004776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004778:	2302      	movs	r3, #2
 800477a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800478a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800478c:	f107 030c 	add.w	r3, r7, #12
 8004790:	2105      	movs	r1, #5
 8004792:	4618      	mov	r0, r3
 8004794:	f004 fe5c 	bl	8009450 <HAL_RCC_ClockConfig>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800479e:	f000 f82d 	bl	80047fc <Error_Handler>
  }
}
 80047a2:	bf00      	nop
 80047a4:	3750      	adds	r7, #80	; 0x50
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000

080047b4 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
	  timer_init();
 80047b8:	f000 fa4e 	bl	8004c58 <timer_init>
	  button_init();
 80047bc:	f7fc fd0e 	bl	80011dc <button_init>
	  lcd_init();
 80047c0:	f7ff fbc8 	bl	8003f54 <lcd_init>
	  sensor_init();
 80047c4:	f000 f820 	bl	8004808 <sensor_init>
	  touch_init();
 80047c8:	f001 fef4 	bl	80065b4 <touch_init>
	  led7_init();
 80047cc:	f7ff fe9a 	bl	8004504 <led7_init>
	  //ds3231_init();
	  //uart_init_esp();

	  home_lcd();		// Hien thi man hinh vua moi dau
 80047d0:	f7fd febc 	bl	800254c <home_lcd>
	  snake_init();		// Khoi tao ran
 80047d4:	f000 f86a 	bl	80048ac <snake_init>
	  reset_7seg();
 80047d8:	f7fe fed6 	bl	8003588 <reset_7seg>

	  setTimer2(50);
 80047dc:	2032      	movs	r0, #50	; 0x32
 80047de:	f000 fa49 	bl	8004c74 <setTimer2>
	  setTimer3(50);
 80047e2:	2032      	movs	r0, #50	; 0x32
 80047e4:	f000 fa62 	bl	8004cac <setTimer3>
	  setTimer4(3000);
 80047e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80047ec:	f000 fa7a 	bl	8004ce4 <setTimer4>
	  setTimer5(1000);
 80047f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047f4:	f000 fa92 	bl	8004d1c <setTimer5>
}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}

080047fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004800:	b672      	cpsid	i
}
 8004802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004804:	e7fe      	b.n	8004804 <Error_Handler+0x8>
	...

08004808 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800480c:	2205      	movs	r2, #5
 800480e:	4903      	ldr	r1, [pc, #12]	; (800481c <sensor_init+0x14>)
 8004810:	4803      	ldr	r0, [pc, #12]	; (8004820 <sensor_init+0x18>)
 8004812:	f002 f935 	bl	8006a80 <HAL_ADC_Start_DMA>
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000039c 	.word	0x2000039c
 8004820:	20000134 	.word	0x20000134

08004824 <sensor_Read>:

void sensor_Read(){
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8004828:	2205      	movs	r2, #5
 800482a:	4903      	ldr	r1, [pc, #12]	; (8004838 <sensor_Read+0x14>)
 800482c:	4803      	ldr	r0, [pc, #12]	; (800483c <sensor_Read+0x18>)
 800482e:	f002 f927 	bl	8006a80 <HAL_ADC_Start_DMA>
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	2000039c 	.word	0x2000039c
 800483c:	20000134 	.word	0x20000134

08004840 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8004844:	4b03      	ldr	r3, [pc, #12]	; (8004854 <sensor_GetLight+0x14>)
 8004846:	889b      	ldrh	r3, [r3, #4]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000039c 	.word	0x2000039c

08004858 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
	return adc_receive[3];
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <sensor_GetPotentiometer+0x14>)
 800485e:	88db      	ldrh	r3, [r3, #6]
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2000039c 	.word	0x2000039c

08004870 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <sensor_GetTemperature+0x30>)
 8004876:	891b      	ldrh	r3, [r3, #8]
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004880:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80048a4 <sensor_GetTemperature+0x34>
 8004884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004888:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80048a8 <sensor_GetTemperature+0x38>
 800488c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004890:	eef0 7a66 	vmov.f32	s15, s13
}
 8004894:	eeb0 0a67 	vmov.f32	s0, s15
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	2000039c 	.word	0x2000039c
 80048a4:	43a50000 	.word	0x43a50000
 80048a8:	457ff000 	.word	0x457ff000

080048ac <snake_init>:
 *      Author: ADMIN
 */

#include "snake.h"

void snake_init(){
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
	snake[0].x = (POS_X_MAX - POS_X_MIN) / 2;
 80048b2:	4b19      	ldr	r3, [pc, #100]	; (8004918 <snake_init+0x6c>)
 80048b4:	2277      	movs	r2, #119	; 0x77
 80048b6:	601a      	str	r2, [r3, #0]
	snake[0].y = (POS_Y_MAX - POS_Y_MIN) / 2;
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <snake_init+0x6c>)
 80048ba:	225a      	movs	r2, #90	; 0x5a
 80048bc:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 80048be:	2301      	movs	r3, #1
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	e00d      	b.n	80048e0 <snake_init+0x34>
		snake[i].x = 0;
 80048c4:	4a14      	ldr	r2, [pc, #80]	; (8004918 <snake_init+0x6c>)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2100      	movs	r1, #0
 80048ca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <snake_init+0x6c>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	2200      	movs	r2, #0
 80048d8:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3301      	adds	r3, #1
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	ddee      	ble.n	80048c4 <snake_init+0x18>
	}
	move = UP;
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <snake_init+0x70>)
 80048e8:	2203      	movs	r2, #3
 80048ea:	601a      	str	r2, [r3, #0]
	length = 1;
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <snake_init+0x74>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
	current_score = 0;
 80048f2:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <snake_init+0x78>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
	counter_time_score = 0;
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <snake_init+0x7c>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
	counter_time = 60;
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <snake_init+0x80>)
 8004900:	223c      	movs	r2, #60	; 0x3c
 8004902:	601a      	str	r2, [r3, #0]
	tempFlag = 0;
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <snake_init+0x84>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	200002b8 	.word	0x200002b8
 800491c:	200002a0 	.word	0x200002a0
 8004920:	2000004c 	.word	0x2000004c
 8004924:	20000000 	.word	0x20000000
 8004928:	200002a4 	.word	0x200002a4
 800492c:	200002a8 	.word	0x200002a8
 8004930:	200002ac 	.word	0x200002ac

08004934 <is_collision_food>:

int is_collision_food(struct Point p){
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	463b      	mov	r3, r7
 800493c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	dd08      	ble.n	8004958 <is_collision_food+0x24>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2bee      	cmp	r3, #238	; 0xee
 800494a:	dc05      	bgt.n	8004958 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 800494c:	687b      	ldr	r3, [r7, #4]
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 800494e:	2b12      	cmp	r3, #18
 8004950:	dd02      	ble.n	8004958 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2bc6      	cmp	r3, #198	; 0xc6
 8004956:	dd01      	ble.n	800495c <is_collision_food+0x28>
		return 1;
 8004958:	2301      	movs	r3, #1
 800495a:	e01c      	b.n	8004996 <is_collision_food+0x62>
	}
	for (int i = 0; i < length; i++){
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e013      	b.n	800498a <is_collision_food+0x56>
		if (p.x == snake[i].x && p.y == snake[i].y)
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	490f      	ldr	r1, [pc, #60]	; (80049a4 <is_collision_food+0x70>)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800496c:	429a      	cmp	r2, r3
 800496e:	d109      	bne.n	8004984 <is_collision_food+0x50>
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	490c      	ldr	r1, [pc, #48]	; (80049a4 <is_collision_food+0x70>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	440b      	add	r3, r1
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	429a      	cmp	r2, r3
 800497e:	d101      	bne.n	8004984 <is_collision_food+0x50>
			return 1;
 8004980:	2301      	movs	r3, #1
 8004982:	e008      	b.n	8004996 <is_collision_food+0x62>
	for (int i = 0; i < length; i++){
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <is_collision_food+0x74>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d3e6      	bcc.n	8004962 <is_collision_food+0x2e>
	}
	return 0;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	200002b8 	.word	0x200002b8
 80049a8:	2000004c 	.word	0x2000004c

080049ac <is_collision>:

int is_collision(){
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <is_collision+0x74>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	dd0b      	ble.n	80049d2 <is_collision+0x26>
 80049ba:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <is_collision+0x74>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2bee      	cmp	r3, #238	; 0xee
 80049c0:	dc07      	bgt.n	80049d2 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 80049c2:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <is_collision+0x74>)
 80049c4:	685b      	ldr	r3, [r3, #4]
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 80049c6:	2b12      	cmp	r3, #18
 80049c8:	dd03      	ble.n	80049d2 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <is_collision+0x74>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2bc6      	cmp	r3, #198	; 0xc6
 80049d0:	dd01      	ble.n	80049d6 <is_collision+0x2a>
		return 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01e      	b.n	8004a14 <is_collision+0x68>
	}
	for (int i = 1; i < length; i++){
 80049d6:	2301      	movs	r3, #1
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	e015      	b.n	8004a08 <is_collision+0x5c>
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <is_collision+0x74>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	490f      	ldr	r1, [pc, #60]	; (8004a20 <is_collision+0x74>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d10a      	bne.n	8004a02 <is_collision+0x56>
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <is_collision+0x74>)
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	490b      	ldr	r1, [pc, #44]	; (8004a20 <is_collision+0x74>)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d101      	bne.n	8004a02 <is_collision+0x56>
			return 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e008      	b.n	8004a14 <is_collision+0x68>
	for (int i = 1; i < length; i++){
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3301      	adds	r3, #1
 8004a06:	607b      	str	r3, [r7, #4]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <is_collision+0x78>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3e4      	bcc.n	80049dc <is_collision+0x30>
	}
	return 0;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	200002b8 	.word	0x200002b8
 8004a24:	2000004c 	.word	0x2000004c

08004a28 <is_eat>:

int is_eat(){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
	if (snake[0].x <= (food.x + 6) && snake[0].x >= (food.x - 6) &&
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <is_eat+0x54>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <is_eat+0x58>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3306      	adds	r3, #6
 8004a36:	429a      	cmp	r2, r3
 8004a38:	dc1d      	bgt.n	8004a76 <is_eat+0x4e>
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <is_eat+0x54>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <is_eat+0x58>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3b06      	subs	r3, #6
 8004a44:	429a      	cmp	r2, r3
 8004a46:	db16      	blt.n	8004a76 <is_eat+0x4e>
		snake[0].y <= (food.y + 6) && snake[0].y >= (food.y - 6) ){
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <is_eat+0x54>)
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <is_eat+0x58>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	3306      	adds	r3, #6
	if (snake[0].x <= (food.x + 6) && snake[0].x >= (food.x - 6) &&
 8004a52:	429a      	cmp	r2, r3
 8004a54:	dc0f      	bgt.n	8004a76 <is_eat+0x4e>
		snake[0].y <= (food.y + 6) && snake[0].y >= (food.y - 6) ){
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <is_eat+0x54>)
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <is_eat+0x58>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	3b06      	subs	r3, #6
 8004a60:	429a      	cmp	r2, r3
 8004a62:	db08      	blt.n	8004a76 <is_eat+0x4e>
		point_clr(food);
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <is_eat+0x58>)
 8004a66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a6a:	f7fe fd55 	bl	8003518 <point_clr>
		reDraw_snake();
 8004a6e:	f000 f8cf 	bl	8004c10 <reDraw_snake>
		return 1;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <is_eat+0x50>
	}
	return 0;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	200002b8 	.word	0x200002b8
 8004a80:	20000050 	.word	0x20000050

08004a84 <get_rand>:

int get_rand(int max){
 8004a84:	b5b0      	push	{r4, r5, r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	return 0 + (int)(rand()*(max - 0 + 1.0)/(1.0 + RAND_MAX));
 8004a8c:	f007 fe00 	bl	800c690 <rand>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb fd46 	bl	8000524 <__aeabi_i2d>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fb fd41 	bl	8000524 <__aeabi_i2d>
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <get_rand+0x5c>)
 8004aa8:	f7fb fbf0 	bl	800028c <__adddf3>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f7fb fda0 	bl	80005f8 <__aeabi_dmul>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <get_rand+0x60>)
 8004ac6:	f7fb fec1 	bl	800084c <__aeabi_ddiv>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f7fc f841 	bl	8000b58 <__aeabi_d2iz>
 8004ad6:	4603      	mov	r3, r0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae0:	3ff00000 	.word	0x3ff00000
 8004ae4:	41e00000 	.word	0x41e00000

08004ae8 <rand_food>:

void rand_food(){
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
	struct Point p;
	p.x = get_rand(POS_X_MAX);
 8004aee:	20ef      	movs	r0, #239	; 0xef
 8004af0:	f7ff ffc8 	bl	8004a84 <get_rand>
 8004af4:	4603      	mov	r3, r0
 8004af6:	603b      	str	r3, [r7, #0]
	p.y = get_rand(POS_Y_MAX);
 8004af8:	20c7      	movs	r0, #199	; 0xc7
 8004afa:	f7ff ffc3 	bl	8004a84 <get_rand>
 8004afe:	4603      	mov	r3, r0
 8004b00:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004b02:	e009      	b.n	8004b18 <rand_food+0x30>
		p.x = get_rand(POS_X_MAX);
 8004b04:	20ef      	movs	r0, #239	; 0xef
 8004b06:	f7ff ffbd 	bl	8004a84 <get_rand>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	603b      	str	r3, [r7, #0]
		p.y = get_rand(POS_Y_MAX);
 8004b0e:	20c7      	movs	r0, #199	; 0xc7
 8004b10:	f7ff ffb8 	bl	8004a84 <get_rand>
 8004b14:	4603      	mov	r3, r0
 8004b16:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004b18:	463b      	mov	r3, r7
 8004b1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b1e:	f7ff ff09 	bl	8004934 <is_collision_food>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d0ed      	beq.n	8004b04 <rand_food+0x1c>
	}
	food = p;
 8004b28:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <rand_food+0x60>)
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b32:	e882 0003 	stmia.w	r2, {r0, r1}
	point_food_lcd(food);
 8004b36:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <rand_food+0x60>)
 8004b38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b3c:	f7fe fcd9 	bl	80034f2 <point_food_lcd>
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000050 	.word	0x20000050

08004b4c <move_snake>:

void move_snake(){
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
	point_clr(snake[length - 1]);
 8004b52:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <move_snake+0xb8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	4a2b      	ldr	r2, [pc, #172]	; (8004c08 <move_snake+0xbc>)
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b62:	f7fe fcd9 	bl	8003518 <point_clr>
	for (int i = length - 1; i > 0; i--){
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <move_snake+0xb8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	e016      	b.n	8004b9e <move_snake+0x52>
		snake[i].x = snake[i-1].x;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <move_snake+0xbc>)
 8004b76:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004b7a:	4923      	ldr	r1, [pc, #140]	; (8004c08 <move_snake+0xbc>)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[i].y = snake[i-1].y;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	4a20      	ldr	r2, [pc, #128]	; (8004c08 <move_snake+0xbc>)
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	491e      	ldr	r1, [pc, #120]	; (8004c08 <move_snake+0xbc>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	440b      	add	r3, r1
 8004b96:	605a      	str	r2, [r3, #4]
	for (int i = length - 1; i > 0; i--){
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dce5      	bgt.n	8004b70 <move_snake+0x24>
	}
	switch (move) {
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <move_snake+0xc0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d822      	bhi.n	8004bf4 <move_snake+0xa8>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <move_snake+0x68>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bd1 	.word	0x08004bd1
 8004bbc:	08004bdd 	.word	0x08004bdd
 8004bc0:	08004be9 	.word	0x08004be9
		case RIGHT:
			snake[0].x += 7;
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <move_snake+0xbc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3307      	adds	r3, #7
 8004bca:	4a0f      	ldr	r2, [pc, #60]	; (8004c08 <move_snake+0xbc>)
 8004bcc:	6013      	str	r3, [r2, #0]
			break;
 8004bce:	e012      	b.n	8004bf6 <move_snake+0xaa>
		case LEFT:
			snake[0].x -= 7;
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <move_snake+0xbc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3b07      	subs	r3, #7
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <move_snake+0xbc>)
 8004bd8:	6013      	str	r3, [r2, #0]
			break;
 8004bda:	e00c      	b.n	8004bf6 <move_snake+0xaa>
		case UP:
			snake[0].y -= 7;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <move_snake+0xbc>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	3b07      	subs	r3, #7
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <move_snake+0xbc>)
 8004be4:	6053      	str	r3, [r2, #4]
			break;
 8004be6:	e006      	b.n	8004bf6 <move_snake+0xaa>
		case DOWN:
			snake[0].y += 7;
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <move_snake+0xbc>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	3307      	adds	r3, #7
 8004bee:	4a06      	ldr	r2, [pc, #24]	; (8004c08 <move_snake+0xbc>)
 8004bf0:	6053      	str	r3, [r2, #4]
			break;
 8004bf2:	e000      	b.n	8004bf6 <move_snake+0xaa>
		default:
			break;
 8004bf4:	bf00      	nop
	}
	reDraw_snake();
 8004bf6:	f000 f80b 	bl	8004c10 <reDraw_snake>
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	2000004c 	.word	0x2000004c
 8004c08:	200002b8 	.word	0x200002b8
 8004c0c:	200002a0 	.word	0x200002a0

08004c10 <reDraw_snake>:

void reDraw_snake(){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
	point_head_lcd(snake[0]);
 8004c16:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <reDraw_snake+0x40>)
 8004c18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c1c:	f7fe fbfc 	bl	8003418 <point_head_lcd>
	for (int i = 1; i < length; i++){
 8004c20:	2301      	movs	r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	e00a      	b.n	8004c3c <reDraw_snake+0x2c>
		point_snake_lcd(snake[i]);
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <reDraw_snake+0x40>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c32:	f7fe fc0c 	bl	800344e <point_snake_lcd>
	for (int i = 1; i < length; i++){
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <reDraw_snake+0x44>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d3ef      	bcc.n	8004c26 <reDraw_snake+0x16>
	}
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200002b8 	.word	0x200002b8
 8004c54:	2000004c 	.word	0x2000004c

08004c58 <timer_init>:

uint16_t flag_timer5 = 0;
uint16_t timer5_counter = 0;
uint16_t timer5_MUL = 0;

void timer_init(){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004c5c:	4803      	ldr	r0, [pc, #12]	; (8004c6c <timer_init+0x14>)
 8004c5e:	f005 fcbb 	bl	800a5d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8004c62:	4803      	ldr	r0, [pc, #12]	; (8004c70 <timer_init+0x18>)
 8004c64:	f005 fc50 	bl	800a508 <HAL_TIM_Base_Start>
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000468 	.word	0x20000468
 8004c70:	20000420 	.word	0x20000420

08004c74 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8004c7e:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <setTimer2+0x2c>)
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8004c84:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <setTimer2+0x2c>)
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <setTimer2+0x30>)
 8004c8a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <setTimer2+0x34>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	801a      	strh	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	200003aa 	.word	0x200003aa
 8004ca4:	200003a8 	.word	0x200003a8
 8004ca8:	200003a6 	.word	0x200003a6

08004cac <setTimer3>:

void setTimer3(uint16_t duration){
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8004cb6:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <setTimer3+0x2c>)
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <setTimer3+0x2c>)
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <setTimer3+0x30>)
 8004cc2:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <setTimer3+0x34>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	801a      	strh	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	200003b0 	.word	0x200003b0
 8004cdc:	200003ae 	.word	0x200003ae
 8004ce0:	200003ac 	.word	0x200003ac

08004ce4 <setTimer4>:

void setTimer4(uint16_t duration){
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <setTimer4+0x2c>)
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <setTimer4+0x2c>)
 8004cf6:	881a      	ldrh	r2, [r3, #0]
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <setTimer4+0x30>)
 8004cfa:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <setTimer4+0x34>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	801a      	strh	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	200003b6 	.word	0x200003b6
 8004d14:	200003b4 	.word	0x200003b4
 8004d18:	200003b2 	.word	0x200003b2

08004d1c <setTimer5>:

void setTimer5(uint16_t duration){
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 8004d26:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <setTimer5+0x2c>)
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <setTimer5+0x2c>)
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <setTimer5+0x30>)
 8004d32:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 8004d34:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <setTimer5+0x34>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	801a      	strh	r2, [r3, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	200003bc 	.word	0x200003bc
 8004d4c:	200003ba 	.word	0x200003ba
 8004d50:	200003b8 	.word	0x200003b8

08004d54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d64:	d155      	bne.n	8004e12 <HAL_TIM_PeriodElapsedCallback+0xbe>
		if(timer2_counter > 0){
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d010      	beq.n	8004d90 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8004d6e:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004d78:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0){
 8004d7a:	4b28      	ldr	r3, [pc, #160]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004d82:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8004d88:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004d8a:	881a      	ldrh	r2, [r3, #0]
 8004d8c:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004d8e:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8004d98:	4b23      	ldr	r3, [pc, #140]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004da2:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0){
 8004da4:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8004dac:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004db2:	4b1f      	ldr	r3, [pc, #124]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004db4:	881a      	ldrh	r2, [r3, #0]
 8004db6:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004db8:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8004dba:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d010      	beq.n	8004de4 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8004dc2:	4b1c      	ldr	r3, [pc, #112]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004dcc:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0){
 8004dce:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8004ddc:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004dde:	881a      	ldrh	r2, [r3, #0]
 8004de0:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004de2:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8004de4:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004df6:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0){
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 8004e00:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004e0c:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8004e0e:	f7ff fb85 	bl	800451c <led7_Scan>
	}
}
 8004e12:	bf00      	nop
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200003a8 	.word	0x200003a8
 8004e20:	200003a6 	.word	0x200003a6
 8004e24:	200003aa 	.word	0x200003aa
 8004e28:	200003ae 	.word	0x200003ae
 8004e2c:	200003ac 	.word	0x200003ac
 8004e30:	200003b0 	.word	0x200003b0
 8004e34:	200003b4 	.word	0x200003b4
 8004e38:	200003b2 	.word	0x200003b2
 8004e3c:	200003b6 	.word	0x200003b6
 8004e40:	200003ba 	.word	0x200003ba
 8004e44:	200003b8 	.word	0x200003b8
 8004e48:	200003bc 	.word	0x200003bc

08004e4c <delay_us>:

void delay_us (uint16_t us){
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <delay_us+0x30>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8004e5e:	bf00      	nop
 8004e60:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <delay_us+0x30>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d3f9      	bcc.n	8004e60 <delay_us+0x14>
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000420 	.word	0x20000420

08004e80 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004e84:	4b17      	ldr	r3, [pc, #92]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <MX_SPI1_Init+0x68>)
 8004e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e8a:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e9e:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004ecc:	220a      	movs	r2, #10
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ed0:	4804      	ldr	r0, [pc, #16]	; (8004ee4 <MX_SPI1_Init+0x64>)
 8004ed2:	f004 fcdd 	bl	8009890 <HAL_SPI_Init>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004edc:	f7ff fc8e 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	200003c0 	.word	0x200003c0
 8004ee8:	40013000 	.word	0x40013000

08004eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <HAL_MspInit+0x4c>)
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	4a0f      	ldr	r2, [pc, #60]	; (8004f38 <HAL_MspInit+0x4c>)
 8004efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f00:	6453      	str	r3, [r2, #68]	; 0x44
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <HAL_MspInit+0x4c>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_MspInit+0x4c>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <HAL_MspInit+0x4c>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_MspInit+0x4c>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800

08004f3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a3c      	ldr	r2, [pc, #240]	; (800504c <HAL_ADC_MspInit+0x110>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d171      	bne.n	8005042 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	4b3b      	ldr	r3, [pc, #236]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	4a3a      	ldr	r2, [pc, #232]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f6e:	4b38      	ldr	r3, [pc, #224]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	4b34      	ldr	r3, [pc, #208]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4a33      	ldr	r2, [pc, #204]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b31      	ldr	r3, [pc, #196]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004fa0:	f043 0302 	orr.w	r3, r3, #2
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b2a      	ldr	r3, [pc, #168]	; (8005050 <HAL_ADC_MspInit+0x114>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004fb2:	2307      	movs	r3, #7
 8004fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4823      	ldr	r0, [pc, #140]	; (8005054 <HAL_ADC_MspInit+0x118>)
 8004fc6:	f002 fe3d 	bl	8007c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd6:	f107 0314 	add.w	r3, r7, #20
 8004fda:	4619      	mov	r1, r3
 8004fdc:	481e      	ldr	r0, [pc, #120]	; (8005058 <HAL_ADC_MspInit+0x11c>)
 8004fde:	f002 fe31 	bl	8007c44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	; (800505c <HAL_ADC_MspInit+0x120>)
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_ADC_MspInit+0x124>)
 8004fe6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <HAL_ADC_MspInit+0x120>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fee:	4b1b      	ldr	r3, [pc, #108]	; (800505c <HAL_ADC_MspInit+0x120>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_ADC_MspInit+0x120>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ffa:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_ADC_MspInit+0x120>)
 8004ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005000:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <HAL_ADC_MspInit+0x120>)
 8005004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005008:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800500a:	4b14      	ldr	r3, [pc, #80]	; (800505c <HAL_ADC_MspInit+0x120>)
 800500c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005010:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <HAL_ADC_MspInit+0x120>)
 8005014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005018:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800501a:	4b10      	ldr	r3, [pc, #64]	; (800505c <HAL_ADC_MspInit+0x120>)
 800501c:	2200      	movs	r2, #0
 800501e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005020:	4b0e      	ldr	r3, [pc, #56]	; (800505c <HAL_ADC_MspInit+0x120>)
 8005022:	2200      	movs	r2, #0
 8005024:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005026:	480d      	ldr	r0, [pc, #52]	; (800505c <HAL_ADC_MspInit+0x120>)
 8005028:	f002 fa0a 	bl	8007440 <HAL_DMA_Init>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8005032:	f7ff fbe3 	bl	80047fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <HAL_ADC_MspInit+0x120>)
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
 800503c:	4a07      	ldr	r2, [pc, #28]	; (800505c <HAL_ADC_MspInit+0x120>)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005042:	bf00      	nop
 8005044:	3728      	adds	r7, #40	; 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40012000 	.word	0x40012000
 8005050:	40023800 	.word	0x40023800
 8005054:	40020800 	.word	0x40020800
 8005058:	40020400 	.word	0x40020400
 800505c:	2000033c 	.word	0x2000033c
 8005060:	40026410 	.word	0x40026410

08005064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	f107 0314 	add.w	r3, r7, #20
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a19      	ldr	r2, [pc, #100]	; (80050e8 <HAL_I2C_MspInit+0x84>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d12b      	bne.n	80050de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	4b18      	ldr	r3, [pc, #96]	; (80050ec <HAL_I2C_MspInit+0x88>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	4a17      	ldr	r2, [pc, #92]	; (80050ec <HAL_I2C_MspInit+0x88>)
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	6313      	str	r3, [r2, #48]	; 0x30
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <HAL_I2C_MspInit+0x88>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050a2:	23c0      	movs	r3, #192	; 0xc0
 80050a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050a6:	2312      	movs	r3, #18
 80050a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ae:	2303      	movs	r3, #3
 80050b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050b2:	2304      	movs	r3, #4
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	4619      	mov	r1, r3
 80050bc:	480c      	ldr	r0, [pc, #48]	; (80050f0 <HAL_I2C_MspInit+0x8c>)
 80050be:	f002 fdc1 	bl	8007c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	4b09      	ldr	r3, [pc, #36]	; (80050ec <HAL_I2C_MspInit+0x88>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4a08      	ldr	r2, [pc, #32]	; (80050ec <HAL_I2C_MspInit+0x88>)
 80050cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_I2C_MspInit+0x88>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050de:	bf00      	nop
 80050e0:	3728      	adds	r7, #40	; 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40005400 	.word	0x40005400
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40020400 	.word	0x40020400

080050f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a19      	ldr	r2, [pc, #100]	; (8005178 <HAL_SPI_MspInit+0x84>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d12b      	bne.n	800516e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <HAL_SPI_MspInit+0x88>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <HAL_SPI_MspInit+0x88>)
 8005120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005124:	6453      	str	r3, [r2, #68]	; 0x44
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <HAL_SPI_MspInit+0x88>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_SPI_MspInit+0x88>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	4a10      	ldr	r2, [pc, #64]	; (800517c <HAL_SPI_MspInit+0x88>)
 800513c:	f043 0302 	orr.w	r3, r3, #2
 8005140:	6313      	str	r3, [r2, #48]	; 0x30
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <HAL_SPI_MspInit+0x88>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800514e:	2338      	movs	r3, #56	; 0x38
 8005150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005152:	2302      	movs	r3, #2
 8005154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800515a:	2303      	movs	r3, #3
 800515c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800515e:	2305      	movs	r3, #5
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005162:	f107 0314 	add.w	r3, r7, #20
 8005166:	4619      	mov	r1, r3
 8005168:	4805      	ldr	r0, [pc, #20]	; (8005180 <HAL_SPI_MspInit+0x8c>)
 800516a:	f002 fd6b 	bl	8007c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800516e:	bf00      	nop
 8005170:	3728      	adds	r7, #40	; 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40013000 	.word	0x40013000
 800517c:	40023800 	.word	0x40023800
 8005180:	40020400 	.word	0x40020400

08005184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a22      	ldr	r2, [pc, #136]	; (800521c <HAL_TIM_Base_MspInit+0x98>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10e      	bne.n	80051b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	4b21      	ldr	r3, [pc, #132]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	4a20      	ldr	r2, [pc, #128]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	6453      	str	r3, [r2, #68]	; 0x44
 80051a6:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80051b2:	e02e      	b.n	8005212 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d116      	bne.n	80051ec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	4a16      	ldr	r2, [pc, #88]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6413      	str	r3, [r2, #64]	; 0x40
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	201c      	movs	r0, #28
 80051e0:	f002 f8f7 	bl	80073d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051e4:	201c      	movs	r0, #28
 80051e6:	f002 f910 	bl	800740a <HAL_NVIC_EnableIRQ>
}
 80051ea:	e012      	b.n	8005212 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a0c      	ldr	r2, [pc, #48]	; (8005224 <HAL_TIM_Base_MspInit+0xa0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10d      	bne.n	8005212 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a08      	ldr	r2, [pc, #32]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 8005200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <HAL_TIM_Base_MspInit+0x9c>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	bf00      	nop
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40023800 	.word	0x40023800
 8005224:	40001c00 	.word	0x40001c00

08005228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005230:	f107 030c 	add.w	r3, r7, #12
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	605a      	str	r2, [r3, #4]
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a12      	ldr	r2, [pc, #72]	; (8005290 <HAL_TIM_MspPostInit+0x68>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d11e      	bne.n	8005288 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <HAL_TIM_MspPostInit+0x6c>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	4a10      	ldr	r2, [pc, #64]	; (8005294 <HAL_TIM_MspPostInit+0x6c>)
 8005254:	f043 0320 	orr.w	r3, r3, #32
 8005258:	6313      	str	r3, [r2, #48]	; 0x30
 800525a:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_TIM_MspPostInit+0x6c>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800526a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526c:	2302      	movs	r3, #2
 800526e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005274:	2300      	movs	r3, #0
 8005276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8005278:	2309      	movs	r3, #9
 800527a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800527c:	f107 030c 	add.w	r3, r7, #12
 8005280:	4619      	mov	r1, r3
 8005282:	4805      	ldr	r0, [pc, #20]	; (8005298 <HAL_TIM_MspPostInit+0x70>)
 8005284:	f002 fcde 	bl	8007c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8005288:	bf00      	nop
 800528a:	3720      	adds	r7, #32
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40001c00 	.word	0x40001c00
 8005294:	40023800 	.word	0x40023800
 8005298:	40021400 	.word	0x40021400

0800529c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a4:	f107 031c 	add.w	r3, r7, #28
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <HAL_UART_MspInit+0x108>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d135      	bne.n	800532a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	4b39      	ldr	r3, [pc, #228]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	4a38      	ldr	r2, [pc, #224]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 80052c8:	f043 0310 	orr.w	r3, r3, #16
 80052cc:	6453      	str	r3, [r2, #68]	; 0x44
 80052ce:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	4b32      	ldr	r3, [pc, #200]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4a31      	ldr	r2, [pc, #196]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ea:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80052fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fc:	2302      	movs	r3, #2
 80052fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	2300      	movs	r3, #0
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005304:	2303      	movs	r3, #3
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005308:	2307      	movs	r3, #7
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800530c:	f107 031c 	add.w	r3, r7, #28
 8005310:	4619      	mov	r1, r3
 8005312:	4826      	ldr	r0, [pc, #152]	; (80053ac <HAL_UART_MspInit+0x110>)
 8005314:	f002 fc96 	bl	8007c44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005318:	2200      	movs	r2, #0
 800531a:	2100      	movs	r1, #0
 800531c:	2025      	movs	r0, #37	; 0x25
 800531e:	f002 f858 	bl	80073d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005322:	2025      	movs	r0, #37	; 0x25
 8005324:	f002 f871 	bl	800740a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005328:	e038      	b.n	800539c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <HAL_UART_MspInit+0x114>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d133      	bne.n	800539c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 800533e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005342:	6413      	str	r3, [r2, #64]	; 0x40
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6313      	str	r3, [r2, #48]	; 0x30
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <HAL_UART_MspInit+0x10c>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800536c:	230c      	movs	r3, #12
 800536e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005370:	2302      	movs	r3, #2
 8005372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	2300      	movs	r3, #0
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005378:	2303      	movs	r3, #3
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800537c:	2307      	movs	r3, #7
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005380:	f107 031c 	add.w	r3, r7, #28
 8005384:	4619      	mov	r1, r3
 8005386:	4809      	ldr	r0, [pc, #36]	; (80053ac <HAL_UART_MspInit+0x110>)
 8005388:	f002 fc5c 	bl	8007c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800538c:	2200      	movs	r2, #0
 800538e:	2100      	movs	r1, #0
 8005390:	2026      	movs	r0, #38	; 0x26
 8005392:	f002 f81e 	bl	80073d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005396:	2026      	movs	r0, #38	; 0x26
 8005398:	f002 f837 	bl	800740a <HAL_NVIC_EnableIRQ>
}
 800539c:	bf00      	nop
 800539e:	3730      	adds	r7, #48	; 0x30
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40011000 	.word	0x40011000
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40020000 	.word	0x40020000
 80053b0:	40004400 	.word	0x40004400

080053b4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80053c8:	4b1c      	ldr	r3, [pc, #112]	; (800543c <HAL_FSMC_MspInit+0x88>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d131      	bne.n	8005434 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <HAL_FSMC_MspInit+0x88>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	4b19      	ldr	r3, [pc, #100]	; (8005440 <HAL_FSMC_MspInit+0x8c>)
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	4a18      	ldr	r2, [pc, #96]	; (8005440 <HAL_FSMC_MspInit+0x8c>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6393      	str	r3, [r2, #56]	; 0x38
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_FSMC_MspInit+0x8c>)
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80053f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80053f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f8:	2302      	movs	r3, #2
 80053fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005400:	2303      	movs	r3, #3
 8005402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005404:	230c      	movs	r3, #12
 8005406:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	4619      	mov	r1, r3
 800540c:	480d      	ldr	r0, [pc, #52]	; (8005444 <HAL_FSMC_MspInit+0x90>)
 800540e:	f002 fc19 	bl	8007c44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005412:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8005416:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005418:	2302      	movs	r3, #2
 800541a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005420:	2303      	movs	r3, #3
 8005422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005424:	230c      	movs	r3, #12
 8005426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005428:	1d3b      	adds	r3, r7, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4806      	ldr	r0, [pc, #24]	; (8005448 <HAL_FSMC_MspInit+0x94>)
 800542e:	f002 fc09 	bl	8007c44 <HAL_GPIO_Init>
 8005432:	e000      	b.n	8005436 <HAL_FSMC_MspInit+0x82>
    return;
 8005434:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000418 	.word	0x20000418
 8005440:	40023800 	.word	0x40023800
 8005444:	40021000 	.word	0x40021000
 8005448:	40020c00 	.word	0x40020c00

0800544c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005454:	f7ff ffae 	bl	80053b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005464:	e7fe      	b.n	8005464 <NMI_Handler+0x4>

08005466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005466:	b480      	push	{r7}
 8005468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800546a:	e7fe      	b.n	800546a <HardFault_Handler+0x4>

0800546c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005470:	e7fe      	b.n	8005470 <MemManage_Handler+0x4>

08005472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005472:	b480      	push	{r7}
 8005474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005476:	e7fe      	b.n	8005476 <BusFault_Handler+0x4>

08005478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800547c:	e7fe      	b.n	800547c <UsageFault_Handler+0x4>

0800547e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800547e:	b480      	push	{r7}
 8005480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005490:	bf00      	nop
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800549e:	bf00      	nop
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054ac:	f001 fa60 	bl	8006970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80054b8:	4802      	ldr	r0, [pc, #8]	; (80054c4 <TIM2_IRQHandler+0x10>)
 80054ba:	f005 f956 	bl	800a76a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000468 	.word	0x20000468

080054c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80054cc:	4802      	ldr	r0, [pc, #8]	; (80054d8 <USART1_IRQHandler+0x10>)
 80054ce:	f006 f891 	bl	800b5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	200004fc 	.word	0x200004fc

080054dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054e0:	4802      	ldr	r0, [pc, #8]	; (80054ec <USART2_IRQHandler+0x10>)
 80054e2:	f006 f887 	bl	800b5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000540 	.word	0x20000540

080054f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80054f4:	4802      	ldr	r0, [pc, #8]	; (8005500 <DMA2_Stream0_IRQHandler+0x10>)
 80054f6:	f002 f93b 	bl	8007770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	2000033c 	.word	0x2000033c

08005504 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
	return 1;
 8005508:	2301      	movs	r3, #1
}
 800550a:	4618      	mov	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <_kill>:

int _kill(int pid, int sig)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800551e:	f007 fa8b 	bl	800ca38 <__errno>
 8005522:	4603      	mov	r3, r0
 8005524:	2216      	movs	r2, #22
 8005526:	601a      	str	r2, [r3, #0]
	return -1;
 8005528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_exit>:

void _exit (int status)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800553c:	f04f 31ff 	mov.w	r1, #4294967295
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ffe7 	bl	8005514 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005546:	e7fe      	b.n	8005546 <_exit+0x12>

08005548 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e00a      	b.n	8005570 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800555a:	f3af 8000 	nop.w
 800555e:	4601      	mov	r1, r0
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	60ba      	str	r2, [r7, #8]
 8005566:	b2ca      	uxtb	r2, r1
 8005568:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	3301      	adds	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	dbf0      	blt.n	800555a <_read+0x12>
	}

return len;
 8005578:	687b      	ldr	r3, [r7, #4]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b086      	sub	sp, #24
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e009      	b.n	80055a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	60ba      	str	r2, [r7, #8]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	3301      	adds	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	dbf1      	blt.n	8005594 <_write+0x12>
	}
	return len;
 80055b0:	687b      	ldr	r3, [r7, #4]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <_close>:

int _close(int file)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
	return -1;
 80055c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055e2:	605a      	str	r2, [r3, #4]
	return 0;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <_isatty>:

int _isatty(int file)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
	return 1;
 80055fa:	2301      	movs	r3, #1
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
	return 0;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <_sbrk+0x5c>)
 800562e:	4b15      	ldr	r3, [pc, #84]	; (8005684 <_sbrk+0x60>)
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005638:	4b13      	ldr	r3, [pc, #76]	; (8005688 <_sbrk+0x64>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <_sbrk+0x64>)
 8005642:	4a12      	ldr	r2, [pc, #72]	; (800568c <_sbrk+0x68>)
 8005644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <_sbrk+0x64>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4413      	add	r3, r2
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	d207      	bcs.n	8005664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005654:	f007 f9f0 	bl	800ca38 <__errno>
 8005658:	4603      	mov	r3, r0
 800565a:	220c      	movs	r2, #12
 800565c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800565e:	f04f 33ff 	mov.w	r3, #4294967295
 8005662:	e009      	b.n	8005678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <_sbrk+0x64>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <_sbrk+0x64>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4413      	add	r3, r2
 8005672:	4a05      	ldr	r2, [pc, #20]	; (8005688 <_sbrk+0x64>)
 8005674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005676:	68fb      	ldr	r3, [r7, #12]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20020000 	.word	0x20020000
 8005684:	00000400 	.word	0x00000400
 8005688:	2000041c 	.word	0x2000041c
 800568c:	200006d8 	.word	0x200006d8

08005690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005694:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <SystemInit+0x20>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	4a05      	ldr	r2, [pc, #20]	; (80056b0 <SystemInit+0x20>)
 800569c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	e000ed00 	.word	0xe000ed00

080056b4 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	605a      	str	r2, [r3, #4]
 80056c4:	609a      	str	r2, [r3, #8]
 80056c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056c8:	463b      	mov	r3, r7
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80056d0:	4b1e      	ldr	r3, [pc, #120]	; (800574c <MX_TIM1_Init+0x98>)
 80056d2:	4a1f      	ldr	r2, [pc, #124]	; (8005750 <MX_TIM1_Init+0x9c>)
 80056d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <MX_TIM1_Init+0x98>)
 80056d8:	2253      	movs	r2, #83	; 0x53
 80056da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056dc:	4b1b      	ldr	r3, [pc, #108]	; (800574c <MX_TIM1_Init+0x98>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80056e2:	4b1a      	ldr	r3, [pc, #104]	; (800574c <MX_TIM1_Init+0x98>)
 80056e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056ea:	4b18      	ldr	r3, [pc, #96]	; (800574c <MX_TIM1_Init+0x98>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80056f0:	4b16      	ldr	r3, [pc, #88]	; (800574c <MX_TIM1_Init+0x98>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <MX_TIM1_Init+0x98>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80056fc:	4813      	ldr	r0, [pc, #76]	; (800574c <MX_TIM1_Init+0x98>)
 80056fe:	f004 feb3 	bl	800a468 <HAL_TIM_Base_Init>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005708:	f7ff f878 	bl	80047fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800570c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	4619      	mov	r1, r3
 8005718:	480c      	ldr	r0, [pc, #48]	; (800574c <MX_TIM1_Init+0x98>)
 800571a:	f005 f9f1 	bl	800ab00 <HAL_TIM_ConfigClockSource>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005724:	f7ff f86a 	bl	80047fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005728:	2300      	movs	r3, #0
 800572a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800572c:	2300      	movs	r3, #0
 800572e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005730:	463b      	mov	r3, r7
 8005732:	4619      	mov	r1, r3
 8005734:	4805      	ldr	r0, [pc, #20]	; (800574c <MX_TIM1_Init+0x98>)
 8005736:	f005 fdbd 	bl	800b2b4 <HAL_TIMEx_MasterConfigSynchronization>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005740:	f7ff f85c 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005744:	bf00      	nop
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000420 	.word	0x20000420
 8005750:	40010000 	.word	0x40010000

08005754 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800575a:	f107 0308 	add.w	r3, r7, #8
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	609a      	str	r2, [r3, #8]
 8005766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005768:	463b      	mov	r3, r7
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <MX_TIM2_Init+0x94>)
 8005772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <MX_TIM2_Init+0x94>)
 800577a:	f240 3247 	movw	r2, #839	; 0x347
 800577e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005780:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <MX_TIM2_Init+0x94>)
 8005782:	2200      	movs	r2, #0
 8005784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8005786:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <MX_TIM2_Init+0x94>)
 8005788:	2263      	movs	r2, #99	; 0x63
 800578a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800578c:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <MX_TIM2_Init+0x94>)
 800578e:	2200      	movs	r2, #0
 8005790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <MX_TIM2_Init+0x94>)
 8005794:	2200      	movs	r2, #0
 8005796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005798:	4813      	ldr	r0, [pc, #76]	; (80057e8 <MX_TIM2_Init+0x94>)
 800579a:	f004 fe65 	bl	800a468 <HAL_TIM_Base_Init>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80057a4:	f7ff f82a 	bl	80047fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057ae:	f107 0308 	add.w	r3, r7, #8
 80057b2:	4619      	mov	r1, r3
 80057b4:	480c      	ldr	r0, [pc, #48]	; (80057e8 <MX_TIM2_Init+0x94>)
 80057b6:	f005 f9a3 	bl	800ab00 <HAL_TIM_ConfigClockSource>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80057c0:	f7ff f81c 	bl	80047fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057c4:	2300      	movs	r3, #0
 80057c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057cc:	463b      	mov	r3, r7
 80057ce:	4619      	mov	r1, r3
 80057d0:	4805      	ldr	r0, [pc, #20]	; (80057e8 <MX_TIM2_Init+0x94>)
 80057d2:	f005 fd6f 	bl	800b2b4 <HAL_TIMEx_MasterConfigSynchronization>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80057dc:	f7ff f80e 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80057e0:	bf00      	nop
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000468 	.word	0x20000468

080057ec <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	605a      	str	r2, [r3, #4]
 80057fa:	609a      	str	r2, [r3, #8]
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	611a      	str	r2, [r3, #16]
 8005800:	615a      	str	r2, [r3, #20]
 8005802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005804:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <MX_TIM13_Init+0x94>)
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <MX_TIM13_Init+0x98>)
 8005808:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800580a:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <MX_TIM13_Init+0x94>)
 800580c:	f240 3247 	movw	r2, #839	; 0x347
 8005810:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <MX_TIM13_Init+0x94>)
 8005814:	2200      	movs	r2, #0
 8005816:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8005818:	4b19      	ldr	r3, [pc, #100]	; (8005880 <MX_TIM13_Init+0x94>)
 800581a:	2263      	movs	r2, #99	; 0x63
 800581c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800581e:	4b18      	ldr	r3, [pc, #96]	; (8005880 <MX_TIM13_Init+0x94>)
 8005820:	2200      	movs	r2, #0
 8005822:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <MX_TIM13_Init+0x94>)
 8005826:	2200      	movs	r2, #0
 8005828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800582a:	4815      	ldr	r0, [pc, #84]	; (8005880 <MX_TIM13_Init+0x94>)
 800582c:	f004 fe1c 	bl	800a468 <HAL_TIM_Base_Init>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8005836:	f7fe ffe1 	bl	80047fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800583a:	4811      	ldr	r0, [pc, #68]	; (8005880 <MX_TIM13_Init+0x94>)
 800583c:	f004 ff3c 	bl	800a6b8 <HAL_TIM_PWM_Init>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8005846:	f7fe ffd9 	bl	80047fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800584a:	2360      	movs	r3, #96	; 0x60
 800584c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800585a:	1d3b      	adds	r3, r7, #4
 800585c:	2200      	movs	r2, #0
 800585e:	4619      	mov	r1, r3
 8005860:	4807      	ldr	r0, [pc, #28]	; (8005880 <MX_TIM13_Init+0x94>)
 8005862:	f005 f88b 	bl	800a97c <HAL_TIM_PWM_ConfigChannel>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800586c:	f7fe ffc6 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8005870:	4803      	ldr	r0, [pc, #12]	; (8005880 <MX_TIM13_Init+0x94>)
 8005872:	f7ff fcd9 	bl	8005228 <HAL_TIM_MspPostInit>

}
 8005876:	bf00      	nop
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200004b0 	.word	0x200004b0
 8005884:	40001c00 	.word	0x40001c00

08005888 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
 800589a:	e025      	b.n	80058e8 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	da06      	bge.n	80058b2 <TP_Write_Byte+0x2a>
 80058a4:	2201      	movs	r2, #1
 80058a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058aa:	4813      	ldr	r0, [pc, #76]	; (80058f8 <TP_Write_Byte+0x70>)
 80058ac:	f002 fb7e 	bl	8007fac <HAL_GPIO_WritePin>
 80058b0:	e005      	b.n	80058be <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80058b2:	2200      	movs	r2, #0
 80058b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058b8:	480f      	ldr	r0, [pc, #60]	; (80058f8 <TP_Write_Byte+0x70>)
 80058ba:	f002 fb77 	bl	8007fac <HAL_GPIO_WritePin>
		num<<=1;
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80058c4:	2200      	movs	r2, #0
 80058c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058ca:	480c      	ldr	r0, [pc, #48]	; (80058fc <TP_Write_Byte+0x74>)
 80058cc:	f002 fb6e 	bl	8007fac <HAL_GPIO_WritePin>
		delay_us(1);
 80058d0:	2001      	movs	r0, #1
 80058d2:	f7ff fabb 	bl	8004e4c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80058d6:	2201      	movs	r2, #1
 80058d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058dc:	4807      	ldr	r0, [pc, #28]	; (80058fc <TP_Write_Byte+0x74>)
 80058de:	f002 fb65 	bl	8007fac <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	3301      	adds	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b07      	cmp	r3, #7
 80058ec:	d9d6      	bls.n	800589c <TP_Write_Byte+0x14>
	}
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40020800 	.word	0x40020800
 80058fc:	40021800 	.word	0x40021800

08005900 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 800590e:	2300      	movs	r3, #0
 8005910:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005912:	2200      	movs	r2, #0
 8005914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005918:	482f      	ldr	r0, [pc, #188]	; (80059d8 <TP_Read_AD+0xd8>)
 800591a:	f002 fb47 	bl	8007fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800591e:	2200      	movs	r2, #0
 8005920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005924:	482d      	ldr	r0, [pc, #180]	; (80059dc <TP_Read_AD+0xdc>)
 8005926:	f002 fb41 	bl	8007fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 800592a:	2200      	movs	r2, #0
 800592c:	2180      	movs	r1, #128	; 0x80
 800592e:	482a      	ldr	r0, [pc, #168]	; (80059d8 <TP_Read_AD+0xd8>)
 8005930:	f002 fb3c 	bl	8007fac <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ffa6 	bl	8005888 <TP_Write_Byte>
	delay_us(6);
 800593c:	2006      	movs	r0, #6
 800593e:	f7ff fa85 	bl	8004e4c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005942:	2200      	movs	r2, #0
 8005944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005948:	4823      	ldr	r0, [pc, #140]	; (80059d8 <TP_Read_AD+0xd8>)
 800594a:	f002 fb2f 	bl	8007fac <HAL_GPIO_WritePin>
	delay_us(1);
 800594e:	2001      	movs	r0, #1
 8005950:	f7ff fa7c 	bl	8004e4c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005954:	2201      	movs	r2, #1
 8005956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800595a:	481f      	ldr	r0, [pc, #124]	; (80059d8 <TP_Read_AD+0xd8>)
 800595c:	f002 fb26 	bl	8007fac <HAL_GPIO_WritePin>
	delay_us(1);
 8005960:	2001      	movs	r0, #1
 8005962:	f7ff fa73 	bl	8004e4c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005966:	2200      	movs	r2, #0
 8005968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800596c:	481a      	ldr	r0, [pc, #104]	; (80059d8 <TP_Read_AD+0xd8>)
 800596e:	f002 fb1d 	bl	8007fac <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	e01f      	b.n	80059b8 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8005978:	89bb      	ldrh	r3, [r7, #12]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800597e:	2200      	movs	r2, #0
 8005980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005984:	4814      	ldr	r0, [pc, #80]	; (80059d8 <TP_Read_AD+0xd8>)
 8005986:	f002 fb11 	bl	8007fac <HAL_GPIO_WritePin>
		delay_us(1);
 800598a:	2001      	movs	r0, #1
 800598c:	f7ff fa5e 	bl	8004e4c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005990:	2201      	movs	r2, #1
 8005992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005996:	4810      	ldr	r0, [pc, #64]	; (80059d8 <TP_Read_AD+0xd8>)
 8005998:	f002 fb08 	bl	8007fac <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 800599c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059a0:	480e      	ldr	r0, [pc, #56]	; (80059dc <TP_Read_AD+0xdc>)
 80059a2:	f002 faeb 	bl	8007f7c <HAL_GPIO_ReadPin>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <TP_Read_AD+0xb2>
 80059ac:	89bb      	ldrh	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	3301      	adds	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	d9dc      	bls.n	8005978 <TP_Read_AD+0x78>
	}
	Num>>=4;
 80059be:	89bb      	ldrh	r3, [r7, #12]
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 80059c4:	2201      	movs	r2, #1
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	4803      	ldr	r0, [pc, #12]	; (80059d8 <TP_Read_AD+0xd8>)
 80059ca:	f002 faef 	bl	8007fac <HAL_GPIO_WritePin>
	return(Num);
 80059ce:	89bb      	ldrh	r3, [r7, #12]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021800 	.word	0x40021800
 80059dc:	40020800 	.word	0x40020800

080059e0 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b089      	sub	sp, #36	; 0x24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 80059ee:	2300      	movs	r3, #0
 80059f0:	83fb      	strh	r3, [r7, #30]
 80059f2:	e00e      	b.n	8005a12 <TP_Read_XOY+0x32>
 80059f4:	8bfc      	ldrh	r4, [r7, #30]
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff81 	bl	8005900 <TP_Read_AD>
 80059fe:	4603      	mov	r3, r0
 8005a00:	461a      	mov	r2, r3
 8005a02:	0063      	lsls	r3, r4, #1
 8005a04:	3320      	adds	r3, #32
 8005a06:	443b      	add	r3, r7
 8005a08:	f823 2c14 	strh.w	r2, [r3, #-20]
 8005a0c:	8bfb      	ldrh	r3, [r7, #30]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	83fb      	strh	r3, [r7, #30]
 8005a12:	8bfb      	ldrh	r3, [r7, #30]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d9ed      	bls.n	80059f4 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	83fb      	strh	r3, [r7, #30]
 8005a1c:	e035      	b.n	8005a8a <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8005a1e:	8bfb      	ldrh	r3, [r7, #30]
 8005a20:	3301      	adds	r3, #1
 8005a22:	83bb      	strh	r3, [r7, #28]
 8005a24:	e02b      	b.n	8005a7e <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 8005a26:	8bfb      	ldrh	r3, [r7, #30]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	3320      	adds	r3, #32
 8005a2c:	443b      	add	r3, r7
 8005a2e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005a32:	8bbb      	ldrh	r3, [r7, #28]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	3320      	adds	r3, #32
 8005a38:	443b      	add	r3, r7
 8005a3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d91a      	bls.n	8005a78 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 8005a42:	8bfb      	ldrh	r3, [r7, #30]
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	3320      	adds	r3, #32
 8005a48:	443b      	add	r3, r7
 8005a4a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005a4e:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8005a50:	8bbb      	ldrh	r3, [r7, #28]
 8005a52:	8bfa      	ldrh	r2, [r7, #30]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	3320      	adds	r3, #32
 8005a58:	443b      	add	r3, r7
 8005a5a:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8005a5e:	0053      	lsls	r3, r2, #1
 8005a60:	3320      	adds	r3, #32
 8005a62:	443b      	add	r3, r7
 8005a64:	460a      	mov	r2, r1
 8005a66:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8005a6a:	8bbb      	ldrh	r3, [r7, #28]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	3320      	adds	r3, #32
 8005a70:	443b      	add	r3, r7
 8005a72:	8b3a      	ldrh	r2, [r7, #24]
 8005a74:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8005a78:	8bbb      	ldrh	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	83bb      	strh	r3, [r7, #28]
 8005a7e:	8bbb      	ldrh	r3, [r7, #28]
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d9d0      	bls.n	8005a26 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 8005a84:	8bfb      	ldrh	r3, [r7, #30]
 8005a86:	3301      	adds	r3, #1
 8005a88:	83fb      	strh	r3, [r7, #30]
 8005a8a:	8bfb      	ldrh	r3, [r7, #30]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d9c6      	bls.n	8005a1e <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8005a94:	2301      	movs	r3, #1
 8005a96:	83fb      	strh	r3, [r7, #30]
 8005a98:	e00b      	b.n	8005ab2 <TP_Read_XOY+0xd2>
 8005a9a:	8bfb      	ldrh	r3, [r7, #30]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	3320      	adds	r3, #32
 8005aa0:	443b      	add	r3, r7
 8005aa2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005aa6:	8b7b      	ldrh	r3, [r7, #26]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	837b      	strh	r3, [r7, #26]
 8005aac:	8bfb      	ldrh	r3, [r7, #30]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	83fb      	strh	r3, [r7, #30]
 8005ab2:	8bfb      	ldrh	r3, [r7, #30]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d9f0      	bls.n	8005a9a <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8005ab8:	8b7b      	ldrh	r3, [r7, #26]
 8005aba:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <TP_Read_XOY+0xf0>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	833b      	strh	r3, [r7, #24]
	return temp;
 8005ac4:	8b3b      	ldrh	r3, [r7, #24]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3724      	adds	r7, #36	; 0x24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd90      	pop	{r4, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	aaaaaaab 	.word	0xaaaaaaab

08005ad4 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <TP_Read_XY+0x3c>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff ff7c 	bl	80059e0 <TP_Read_XOY>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <TP_Read_XY+0x40>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ff75 	bl	80059e0 <TP_Read_XOY>
 8005af6:	4603      	mov	r3, r0
 8005af8:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	89fa      	ldrh	r2, [r7, #14]
 8005afe:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	89ba      	ldrh	r2, [r7, #12]
 8005b04:	801a      	strh	r2, [r3, #0]
	return 1;
 8005b06:	2301      	movs	r3, #1
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200000a0 	.word	0x200000a0
 8005b14:	200000a1 	.word	0x200000a1

08005b18 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8005b22:	f107 0212 	add.w	r2, r7, #18
 8005b26:	f107 0314 	add.w	r3, r7, #20
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff ffd1 	bl	8005ad4 <TP_Read_XY>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <TP_Read_XY2+0x28>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e049      	b.n	8005bd4 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8005b40:	f107 020e 	add.w	r2, r7, #14
 8005b44:	f107 0310 	add.w	r3, r7, #16
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff ffc2 	bl	8005ad4 <TP_Read_XY>
 8005b50:	4603      	mov	r3, r0
 8005b52:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <TP_Read_XY2+0x46>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e03a      	b.n	8005bd4 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8005b5e:	8a3a      	ldrh	r2, [r7, #16]
 8005b60:	8abb      	ldrh	r3, [r7, #20]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d804      	bhi.n	8005b70 <TP_Read_XY2+0x58>
 8005b66:	8a3b      	ldrh	r3, [r7, #16]
 8005b68:	3363      	adds	r3, #99	; 0x63
 8005b6a:	8aba      	ldrh	r2, [r7, #20]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	da08      	bge.n	8005b82 <TP_Read_XY2+0x6a>
 8005b70:	8aba      	ldrh	r2, [r7, #20]
 8005b72:	8a3b      	ldrh	r3, [r7, #16]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d82c      	bhi.n	8005bd2 <TP_Read_XY2+0xba>
 8005b78:	8abb      	ldrh	r3, [r7, #20]
 8005b7a:	3363      	adds	r3, #99	; 0x63
 8005b7c:	8a3a      	ldrh	r2, [r7, #16]
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	db27      	blt.n	8005bd2 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8005b82:	89fa      	ldrh	r2, [r7, #14]
 8005b84:	8a7b      	ldrh	r3, [r7, #18]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d804      	bhi.n	8005b94 <TP_Read_XY2+0x7c>
 8005b8a:	89fb      	ldrh	r3, [r7, #14]
 8005b8c:	3363      	adds	r3, #99	; 0x63
 8005b8e:	8a7a      	ldrh	r2, [r7, #18]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	da08      	bge.n	8005ba6 <TP_Read_XY2+0x8e>
 8005b94:	8a7a      	ldrh	r2, [r7, #18]
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d81a      	bhi.n	8005bd2 <TP_Read_XY2+0xba>
 8005b9c:	8a7b      	ldrh	r3, [r7, #18]
 8005b9e:	3363      	adds	r3, #99	; 0x63
 8005ba0:	89fa      	ldrh	r2, [r7, #14]
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	db15      	blt.n	8005bd2 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8005ba6:	8abb      	ldrh	r3, [r7, #20]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	8a3b      	ldrh	r3, [r7, #16]
 8005bac:	4413      	add	r3, r2
 8005bae:	0fda      	lsrs	r2, r3, #31
 8005bb0:	4413      	add	r3, r2
 8005bb2:	105b      	asrs	r3, r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8005bba:	8a7b      	ldrh	r3, [r7, #18]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	89fb      	ldrh	r3, [r7, #14]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	0fda      	lsrs	r2, r3, #31
 8005bc4:	4413      	add	r3, r2
 8005bc6:	105b      	asrs	r3, r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	801a      	strh	r2, [r3, #0]
		return 1;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <TP_Read_XY2+0xbc>
	}else return 0;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	4603      	mov	r3, r0
 8005be4:	80fb      	strh	r3, [r7, #6]
 8005be6:	460b      	mov	r3, r1
 8005be8:	80bb      	strh	r3, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	3b0c      	subs	r3, #12
 8005bf2:	b298      	uxth	r0, r3
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	330d      	adds	r3, #13
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	88bc      	ldrh	r4, [r7, #4]
 8005bfc:	88b9      	ldrh	r1, [r7, #4]
 8005bfe:	887b      	ldrh	r3, [r7, #2]
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	4623      	mov	r3, r4
 8005c04:	f7fd fe6f 	bl	80038e6 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8005c08:	88bb      	ldrh	r3, [r7, #4]
 8005c0a:	3b0c      	subs	r3, #12
 8005c0c:	b299      	uxth	r1, r3
 8005c0e:	88bb      	ldrh	r3, [r7, #4]
 8005c10:	330d      	adds	r3, #13
 8005c12:	b29c      	uxth	r4, r3
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	88f8      	ldrh	r0, [r7, #6]
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4623      	mov	r3, r4
 8005c1e:	f7fd fe62 	bl	80038e6 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	3301      	adds	r3, #1
 8005c26:	b298      	uxth	r0, r3
 8005c28:	88bb      	ldrh	r3, [r7, #4]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	887a      	ldrh	r2, [r7, #2]
 8005c30:	4619      	mov	r1, r3
 8005c32:	f7fd fe41 	bl	80038b8 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b298      	uxth	r0, r3
 8005c3c:	88bb      	ldrh	r3, [r7, #4]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	887a      	ldrh	r2, [r7, #2]
 8005c44:	4619      	mov	r1, r3
 8005c46:	f7fd fe37 	bl	80038b8 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	b298      	uxth	r0, r3
 8005c50:	88bb      	ldrh	r3, [r7, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	887a      	ldrh	r2, [r7, #2]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	f7fd fe2d 	bl	80038b8 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b298      	uxth	r0, r3
 8005c64:	88bb      	ldrh	r3, [r7, #4]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	887a      	ldrh	r2, [r7, #2]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f7fd fe23 	bl	80038b8 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8005c72:	88f8      	ldrh	r0, [r7, #6]
 8005c74:	88b9      	ldrh	r1, [r7, #4]
 8005c76:	887a      	ldrh	r2, [r7, #2]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	f7fe fb54 	bl	800432a <lcd_DrawCircle>
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd90      	pop	{r4, r7, pc}
	...

08005c8c <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8005c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c9a:	4843      	ldr	r0, [pc, #268]	; (8005da8 <TP_Scan+0x11c>)
 8005c9c:	f002 f96e 	bl	8007f7c <HAL_GPIO_ReadPin>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d157      	bne.n	8005d56 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <TP_Scan+0x2a>
 8005cac:	493f      	ldr	r1, [pc, #252]	; (8005dac <TP_Scan+0x120>)
 8005cae:	4840      	ldr	r0, [pc, #256]	; (8005db0 <TP_Scan+0x124>)
 8005cb0:	f7ff ff32 	bl	8005b18 <TP_Read_XY2>
 8005cb4:	e03c      	b.n	8005d30 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8005cb6:	493d      	ldr	r1, [pc, #244]	; (8005dac <TP_Scan+0x120>)
 8005cb8:	483d      	ldr	r0, [pc, #244]	; (8005db0 <TP_Scan+0x124>)
 8005cba:	f7ff ff2d 	bl	8005b18 <TP_Read_XY2>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d035      	beq.n	8005d30 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8005cc4:	4b3b      	ldr	r3, [pc, #236]	; (8005db4 <TP_Scan+0x128>)
 8005cc6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005cca:	4b3a      	ldr	r3, [pc, #232]	; (8005db4 <TP_Scan+0x128>)
 8005ccc:	899b      	ldrh	r3, [r3, #12]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cda:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <TP_Scan+0x128>)
 8005cdc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf0:	ee17 3a90 	vmov	r3, s15
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <TP_Scan+0x128>)
 8005cf8:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8005cfa:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <TP_Scan+0x128>)
 8005cfc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005d00:	4b2c      	ldr	r3, [pc, #176]	; (8005db4 <TP_Scan+0x128>)
 8005d02:	8adb      	ldrh	r3, [r3, #22]
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d10:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <TP_Scan+0x128>)
 8005d12:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d26:	ee17 3a90 	vmov	r3, s15
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	4b21      	ldr	r3, [pc, #132]	; (8005db4 <TP_Scan+0x128>)
 8005d2e:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8005d30:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <TP_Scan+0x128>)
 8005d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d36:	b25b      	sxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	db2a      	blt.n	8005d92 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8005d3c:	4b1d      	ldr	r3, [pc, #116]	; (8005db4 <TP_Scan+0x128>)
 8005d3e:	22c0      	movs	r2, #192	; 0xc0
 8005d40:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <TP_Scan+0x128>)
 8005d46:	899a      	ldrh	r2, [r3, #12]
 8005d48:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <TP_Scan+0x128>)
 8005d4a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8005d4c:	4b19      	ldr	r3, [pc, #100]	; (8005db4 <TP_Scan+0x128>)
 8005d4e:	8ada      	ldrh	r2, [r3, #22]
 8005d50:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <TP_Scan+0x128>)
 8005d52:	83da      	strh	r2, [r3, #30]
 8005d54:	e01d      	b.n	8005d92 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8005d56:	4b17      	ldr	r3, [pc, #92]	; (8005db4 <TP_Scan+0x128>)
 8005d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da09      	bge.n	8005d76 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8005d62:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <TP_Scan+0x128>)
 8005d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <TP_Scan+0x128>)
 8005d70:	f883 2020 	strb.w	r2, [r3, #32]
 8005d74:	e00d      	b.n	8005d92 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <TP_Scan+0x128>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8005d7c:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <TP_Scan+0x128>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8005d82:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <TP_Scan+0x128>)
 8005d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d88:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <TP_Scan+0x128>)
 8005d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d90:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8005d92:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <TP_Scan+0x128>)
 8005d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d9c:	b2db      	uxtb	r3, r3
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40020800 	.word	0x40020800
 8005dac:	20000082 	.word	0x20000082
 8005db0:	20000078 	.word	0x20000078
 8005db4:	2000006c 	.word	0x2000006c

08005db8 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005dbc:	220e      	movs	r2, #14
 8005dbe:	4905      	ldr	r1, [pc, #20]	; (8005dd4 <TP_Save_Adjdata+0x1c>)
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f7fb f9eb 	bl	800119c <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	200e      	movs	r0, #14
 8005dca:	f7fb f987 	bl	80010dc <at24c_WriteOneByte>
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000090 	.word	0x20000090

08005dd8 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8005de2:	200e      	movs	r0, #14
 8005de4:	f7fb f95e 	bl	80010a4 <at24c_ReadOneByte>
 8005de8:	4603      	mov	r3, r0
 8005dea:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005df2:	220e      	movs	r2, #14
 8005df4:	4905      	ldr	r1, [pc, #20]	; (8005e0c <TP_Get_Adjdata+0x34>)
 8005df6:	2000      	movs	r0, #0
 8005df8:	f7fb f9b1 	bl	800115e <at24c_Read>
		return 1;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000090 	.word	0x20000090

08005e10 <touch_Adjust>:


void touch_Adjust(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	; 0x38
 8005e14:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8005e22:	4b5f      	ldr	r3, [pc, #380]	; (8005fa0 <touch_Adjust+0x190>)
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	4b5e      	ldr	r3, [pc, #376]	; (8005fa0 <touch_Adjust+0x190>)
 8005e28:	885b      	ldrh	r3, [r3, #2]
 8005e2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e2e:	9100      	str	r1, [sp, #0]
 8005e30:	2100      	movs	r1, #0
 8005e32:	2000      	movs	r0, #0
 8005e34:	f7fd fd0a 	bl	800384c <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005e4a:	4a56      	ldr	r2, [pc, #344]	; (8005fa4 <touch_Adjust+0x194>)
 8005e4c:	2128      	movs	r1, #40	; 0x28
 8005e4e:	2005      	movs	r0, #5
 8005e50:	f7fe fad7 	bl	8004402 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8005e54:	2300      	movs	r3, #0
 8005e56:	9302      	str	r3, [sp, #8]
 8005e58:	2310      	movs	r3, #16
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005e66:	4a50      	ldr	r2, [pc, #320]	; (8005fa8 <touch_Adjust+0x198>)
 8005e68:	2141      	movs	r1, #65	; 0x41
 8005e6a:	2005      	movs	r0, #5
 8005e6c:	f7fe fac9 	bl	8004402 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8005e70:	2300      	movs	r3, #0
 8005e72:	9302      	str	r3, [sp, #8]
 8005e74:	2310      	movs	r3, #16
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005e82:	4a4a      	ldr	r2, [pc, #296]	; (8005fac <touch_Adjust+0x19c>)
 8005e84:	215a      	movs	r1, #90	; 0x5a
 8005e86:	2005      	movs	r0, #5
 8005e88:	f7fe fabb 	bl	8004402 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8005e8c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005e90:	2114      	movs	r1, #20
 8005e92:	2014      	movs	r0, #20
 8005e94:	f7ff fea2 	bl	8005bdc <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8005e98:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <touch_Adjust+0x1a0>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8005ea0:	4b43      	ldr	r3, [pc, #268]	; (8005fb0 <touch_Adjust+0x1a0>)
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8005ea8:	2032      	movs	r0, #50	; 0x32
 8005eaa:	f000 fd81 	bl	80069b0 <HAL_Delay>
		tp_dev.scan(1);
 8005eae:	4b40      	ldr	r3, [pc, #256]	; (8005fb0 <touch_Adjust+0x1a0>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8005eb6:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <touch_Adjust+0x1a0>)
 8005eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ebc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d1f1      	bne.n	8005ea8 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <touch_Adjust+0x1a0>)
 8005ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <touch_Adjust+0x1a0>)
 8005ed2:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8005ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eda:	4a35      	ldr	r2, [pc, #212]	; (8005fb0 <touch_Adjust+0x1a0>)
 8005edc:	8992      	ldrh	r2, [r2, #12]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	3328      	adds	r3, #40	; 0x28
 8005ee2:	443b      	add	r3, r7
 8005ee4:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8005ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eec:	4a30      	ldr	r2, [pc, #192]	; (8005fb0 <touch_Adjust+0x1a0>)
 8005eee:	8ad2      	ldrh	r2, [r2, #22]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	3328      	adds	r3, #40	; 0x28
 8005ef4:	443b      	add	r3, r7
 8005ef6:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8005efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005efe:	3301      	adds	r3, #1
 8005f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8005f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d8cc      	bhi.n	8005ea8 <touch_Adjust+0x98>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <touch_Adjust+0x104>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f25 	.word	0x08005f25
 8005f18:	08005f47 	.word	0x08005f47
 8005f1c:	08005f71 	.word	0x08005f71
 8005f20:	08005fb5 	.word	0x08005fb5
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8005f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f28:	2114      	movs	r1, #20
 8005f2a:	2014      	movs	r0, #20
 8005f2c:	f7ff fe56 	bl	8005bdc <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <touch_Adjust+0x190>)
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	3b14      	subs	r3, #20
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005f3c:	2114      	movs	r1, #20
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fe4c 	bl	8005bdc <TP_Drow_Touch_Point>
					break;
 8005f44:	e319      	b.n	800657a <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8005f46:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <touch_Adjust+0x190>)
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	3b14      	subs	r3, #20
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f52:	2114      	movs	r1, #20
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fe41 	bl	8005bdc <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <touch_Adjust+0x190>)
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	3b14      	subs	r3, #20
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005f66:	4619      	mov	r1, r3
 8005f68:	2014      	movs	r0, #20
 8005f6a:	f7ff fe37 	bl	8005bdc <TP_Drow_Touch_Point>
					break;
 8005f6e:	e304      	b.n	800657a <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <touch_Adjust+0x190>)
 8005f72:	885b      	ldrh	r3, [r3, #2]
 8005f74:	3b14      	subs	r3, #20
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	2014      	movs	r0, #20
 8005f80:	f7ff fe2c 	bl	8005bdc <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <touch_Adjust+0x190>)
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	3b14      	subs	r3, #20
 8005f8a:	b298      	uxth	r0, r3
 8005f8c:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <touch_Adjust+0x190>)
 8005f8e:	885b      	ldrh	r3, [r3, #2]
 8005f90:	3b14      	subs	r3, #20
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005f98:	4619      	mov	r1, r3
 8005f9a:	f7ff fe1f 	bl	8005bdc <TP_Drow_Touch_Point>
					break;
 8005f9e:	e2ec      	b.n	800657a <touch_Adjust+0x76a>
 8005fa0:	20000334 	.word	0x20000334
 8005fa4:	0800e67c 	.word	0x0800e67c
 8005fa8:	0800e698 	.word	0x0800e698
 8005fac:	0800e6b0 	.word	0x0800e6b0
 8005fb0:	2000006c 	.word	0x2000006c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8005fb4:	883b      	ldrh	r3, [r7, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	88bb      	ldrh	r3, [r7, #4]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bfb8      	it	lt
 8005fc0:	425b      	neglt	r3, r3
 8005fc2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8005fc4:	887b      	ldrh	r3, [r7, #2]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	bfb8      	it	lt
 8005fd0:	425b      	neglt	r3, r3
 8005fd2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	fb03 f303 	mul.w	r3, r3, r3
 8005fda:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	fb03 f303 	mul.w	r3, r3, r3
 8005fe2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fa fa8a 	bl	8000504 <__aeabi_ui2d>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	ec43 2b10 	vmov	d0, r2, r3
 8005ff8:	f007 fbea 	bl	800d7d0 <sqrt>
 8005ffc:	ec53 2b10 	vmov	r2, r3, d0
 8006000:	4610      	mov	r0, r2
 8006002:	4619      	mov	r1, r3
 8006004:	f7fa fdd0 	bl	8000ba8 <__aeabi_d2uiz>
 8006008:	4603      	mov	r3, r0
 800600a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 800600c:	893b      	ldrh	r3, [r7, #8]
 800600e:	461a      	mov	r2, r3
 8006010:	89bb      	ldrh	r3, [r7, #12]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	bfb8      	it	lt
 8006018:	425b      	neglt	r3, r3
 800601a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 800601c:	897b      	ldrh	r3, [r7, #10]
 800601e:	461a      	mov	r2, r3
 8006020:	89fb      	ldrh	r3, [r7, #14]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	bfb8      	it	lt
 8006028:	425b      	neglt	r3, r3
 800602a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	fb03 f303 	mul.w	r3, r3, r3
 8006032:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	fb03 f303 	mul.w	r3, r3, r3
 800603a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	4618      	mov	r0, r3
 8006044:	f7fa fa5e 	bl	8000504 <__aeabi_ui2d>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	ec43 2b10 	vmov	d0, r2, r3
 8006050:	f007 fbbe 	bl	800d7d0 <sqrt>
 8006054:	ec53 2b10 	vmov	r2, r3, d0
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	f7fa fda4 	bl	8000ba8 <__aeabi_d2uiz>
 8006060:	4603      	mov	r3, r0
 8006062:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8006064:	8b7b      	ldrh	r3, [r7, #26]
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800606e:	8b3b      	ldrh	r3, [r7, #24]
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006078:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800607c:	ee16 0a90 	vmov	r0, s13
 8006080:	f7fa fa62 	bl	8000548 <__aeabi_f2d>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 800608c:	a384      	add	r3, pc, #528	; (adr r3, 80062a0 <touch_Adjust+0x490>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006096:	f7fa fd21 	bl	8000adc <__aeabi_dcmplt>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10f      	bne.n	80060c0 <touch_Adjust+0x2b0>
 80060a0:	a381      	add	r3, pc, #516	; (adr r3, 80062a8 <touch_Adjust+0x498>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80060aa:	f7fa fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d105      	bne.n	80060c0 <touch_Adjust+0x2b0>
 80060b4:	8b7b      	ldrh	r3, [r7, #26]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <touch_Adjust+0x2b0>
 80060ba:	8b3b      	ldrh	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d136      	bne.n	800612e <touch_Adjust+0x31e>
					{
						cnt=0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80060c6:	4b7a      	ldr	r3, [pc, #488]	; (80062b0 <touch_Adjust+0x4a0>)
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	3b14      	subs	r3, #20
 80060cc:	b298      	uxth	r0, r3
 80060ce:	4b78      	ldr	r3, [pc, #480]	; (80062b0 <touch_Adjust+0x4a0>)
 80060d0:	885b      	ldrh	r3, [r3, #2]
 80060d2:	3b14      	subs	r3, #20
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060da:	4619      	mov	r1, r3
 80060dc:	f7ff fd7e 	bl	8005bdc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80060e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80060e4:	2114      	movs	r1, #20
 80060e6:	2014      	movs	r0, #20
 80060e8:	f7ff fd78 	bl	8005bdc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80060ec:	2300      	movs	r3, #0
 80060ee:	9302      	str	r3, [sp, #8]
 80060f0:	2310      	movs	r3, #16
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80060fe:	4a6d      	ldr	r2, [pc, #436]	; (80062b4 <touch_Adjust+0x4a4>)
 8006100:	2128      	movs	r1, #40	; 0x28
 8006102:	2005      	movs	r0, #5
 8006104:	f7fe f97d 	bl	8004402 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8006108:	2300      	movs	r3, #0
 800610a:	9302      	str	r3, [sp, #8]
 800610c:	2310      	movs	r3, #16
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800611a:	4a67      	ldr	r2, [pc, #412]	; (80062b8 <touch_Adjust+0x4a8>)
 800611c:	213c      	movs	r1, #60	; 0x3c
 800611e:	2005      	movs	r0, #5
 8006120:	f7fe f96f 	bl	8004402 <lcd_ShowStr>
						HAL_Delay(1000);
 8006124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006128:	f000 fc42 	bl	80069b0 <HAL_Delay>
 						continue;
 800612c:	e225      	b.n	800657a <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 800612e:	883b      	ldrh	r3, [r7, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	893b      	ldrh	r3, [r7, #8]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	bfb8      	it	lt
 800613a:	425b      	neglt	r3, r3
 800613c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 800613e:	887b      	ldrh	r3, [r7, #2]
 8006140:	461a      	mov	r2, r3
 8006142:	897b      	ldrh	r3, [r7, #10]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	bfb8      	it	lt
 800614a:	425b      	neglt	r3, r3
 800614c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	fb03 f303 	mul.w	r3, r3, r3
 8006154:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	fb03 f303 	mul.w	r3, r3, r3
 800615c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800615e:	6a3a      	ldr	r2, [r7, #32]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	4618      	mov	r0, r3
 8006166:	f7fa f9cd 	bl	8000504 <__aeabi_ui2d>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	ec43 2b10 	vmov	d0, r2, r3
 8006172:	f007 fb2d 	bl	800d7d0 <sqrt>
 8006176:	ec53 2b10 	vmov	r2, r3, d0
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	f7fa fd13 	bl	8000ba8 <__aeabi_d2uiz>
 8006182:	4603      	mov	r3, r0
 8006184:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8006186:	88bb      	ldrh	r3, [r7, #4]
 8006188:	461a      	mov	r2, r3
 800618a:	89bb      	ldrh	r3, [r7, #12]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfb8      	it	lt
 8006192:	425b      	neglt	r3, r3
 8006194:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	461a      	mov	r2, r3
 800619a:	89fb      	ldrh	r3, [r7, #14]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfb8      	it	lt
 80061a2:	425b      	neglt	r3, r3
 80061a4:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	fb03 f303 	mul.w	r3, r3, r3
 80061ac:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	fb03 f303 	mul.w	r3, r3, r3
 80061b4:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80061b6:	6a3a      	ldr	r2, [r7, #32]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fa f9a1 	bl	8000504 <__aeabi_ui2d>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	ec43 2b10 	vmov	d0, r2, r3
 80061ca:	f007 fb01 	bl	800d7d0 <sqrt>
 80061ce:	ec53 2b10 	vmov	r2, r3, d0
 80061d2:	4610      	mov	r0, r2
 80061d4:	4619      	mov	r1, r3
 80061d6:	f7fa fce7 	bl	8000ba8 <__aeabi_d2uiz>
 80061da:	4603      	mov	r3, r0
 80061dc:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80061de:	8b7b      	ldrh	r3, [r7, #26]
 80061e0:	ee07 3a90 	vmov	s15, r3
 80061e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061e8:	8b3b      	ldrh	r3, [r7, #24]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80061f6:	ee16 0a90 	vmov	r0, s13
 80061fa:	f7fa f9a5 	bl	8000548 <__aeabi_f2d>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8006206:	a326      	add	r3, pc, #152	; (adr r3, 80062a0 <touch_Adjust+0x490>)
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006210:	f7fa fc64 	bl	8000adc <__aeabi_dcmplt>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <touch_Adjust+0x41e>
 800621a:	a323      	add	r3, pc, #140	; (adr r3, 80062a8 <touch_Adjust+0x498>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006224:	f7fa fc78 	bl	8000b18 <__aeabi_dcmpgt>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d046      	beq.n	80062bc <touch_Adjust+0x4ac>
					{
						cnt=0;
 800622e:	2300      	movs	r3, #0
 8006230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8006234:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <touch_Adjust+0x4a0>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	3b14      	subs	r3, #20
 800623a:	b298      	uxth	r0, r3
 800623c:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <touch_Adjust+0x4a0>)
 800623e:	885b      	ldrh	r3, [r3, #2]
 8006240:	3b14      	subs	r3, #20
 8006242:	b29b      	uxth	r3, r3
 8006244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006248:	4619      	mov	r1, r3
 800624a:	f7ff fcc7 	bl	8005bdc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800624e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006252:	2114      	movs	r1, #20
 8006254:	2014      	movs	r0, #20
 8006256:	f7ff fcc1 	bl	8005bdc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800625a:	2300      	movs	r3, #0
 800625c:	9302      	str	r3, [sp, #8]
 800625e:	2310      	movs	r3, #16
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800626c:	4a11      	ldr	r2, [pc, #68]	; (80062b4 <touch_Adjust+0x4a4>)
 800626e:	2128      	movs	r1, #40	; 0x28
 8006270:	2005      	movs	r0, #5
 8006272:	f7fe f8c6 	bl	8004402 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8006276:	2300      	movs	r3, #0
 8006278:	9302      	str	r3, [sp, #8]
 800627a:	2310      	movs	r3, #16
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006288:	4a0b      	ldr	r2, [pc, #44]	; (80062b8 <touch_Adjust+0x4a8>)
 800628a:	213c      	movs	r1, #60	; 0x3c
 800628c:	2005      	movs	r0, #5
 800628e:	f7fe f8b8 	bl	8004402 <lcd_ShowStr>
						HAL_Delay(1000);
 8006292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006296:	f000 fb8b 	bl	80069b0 <HAL_Delay>
						continue;
 800629a:	e16e      	b.n	800657a <touch_Adjust+0x76a>
 800629c:	f3af 8000 	nop.w
 80062a0:	66666666 	.word	0x66666666
 80062a4:	3fee6666 	.word	0x3fee6666
 80062a8:	cccccccd 	.word	0xcccccccd
 80062ac:	3ff0cccc 	.word	0x3ff0cccc
 80062b0:	20000334 	.word	0x20000334
 80062b4:	0800e6c4 	.word	0x0800e6c4
 80062b8:	0800e6e4 	.word	0x0800e6e4
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 80062bc:	88bb      	ldrh	r3, [r7, #4]
 80062be:	461a      	mov	r2, r3
 80062c0:	893b      	ldrh	r3, [r7, #8]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bfb8      	it	lt
 80062c8:	425b      	neglt	r3, r3
 80062ca:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	461a      	mov	r2, r3
 80062d0:	897b      	ldrh	r3, [r7, #10]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bfb8      	it	lt
 80062d8:	425b      	neglt	r3, r3
 80062da:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	fb03 f303 	mul.w	r3, r3, r3
 80062e2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	fb03 f303 	mul.w	r3, r3, r3
 80062ea:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fa f906 	bl	8000504 <__aeabi_ui2d>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	ec43 2b10 	vmov	d0, r2, r3
 8006300:	f007 fa66 	bl	800d7d0 <sqrt>
 8006304:	ec53 2b10 	vmov	r2, r3, d0
 8006308:	4610      	mov	r0, r2
 800630a:	4619      	mov	r1, r3
 800630c:	f7fa fc4c 	bl	8000ba8 <__aeabi_d2uiz>
 8006310:	4603      	mov	r3, r0
 8006312:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8006314:	883b      	ldrh	r3, [r7, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	89bb      	ldrh	r3, [r7, #12]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	bfb8      	it	lt
 8006320:	425b      	neglt	r3, r3
 8006322:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	461a      	mov	r2, r3
 8006328:	89fb      	ldrh	r3, [r7, #14]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	bfb8      	it	lt
 8006330:	425b      	neglt	r3, r3
 8006332:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	fb03 f303 	mul.w	r3, r3, r3
 800633a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	fb03 f303 	mul.w	r3, r3, r3
 8006342:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8006344:	6a3a      	ldr	r2, [r7, #32]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa f8da 	bl	8000504 <__aeabi_ui2d>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	ec43 2b10 	vmov	d0, r2, r3
 8006358:	f007 fa3a 	bl	800d7d0 <sqrt>
 800635c:	ec53 2b10 	vmov	r2, r3, d0
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	f7fa fc20 	bl	8000ba8 <__aeabi_d2uiz>
 8006368:	4603      	mov	r3, r0
 800636a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800636c:	8b7b      	ldrh	r3, [r7, #26]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006376:	8b3b      	ldrh	r3, [r7, #24]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006380:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006384:	ee16 0a90 	vmov	r0, s13
 8006388:	f7fa f8de 	bl	8000548 <__aeabi_f2d>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8006394:	a383      	add	r3, pc, #524	; (adr r3, 80065a4 <touch_Adjust+0x794>)
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800639e:	f7fa fb9d 	bl	8000adc <__aeabi_dcmplt>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <touch_Adjust+0x5ac>
 80063a8:	a380      	add	r3, pc, #512	; (adr r3, 80065ac <touch_Adjust+0x79c>)
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063b2:	f7fa fbb1 	bl	8000b18 <__aeabi_dcmpgt>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d036      	beq.n	800642a <touch_Adjust+0x61a>
					{
						cnt=0;
 80063bc:	2300      	movs	r3, #0
 80063be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80063c2:	4b71      	ldr	r3, [pc, #452]	; (8006588 <touch_Adjust+0x778>)
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	3b14      	subs	r3, #20
 80063c8:	b298      	uxth	r0, r3
 80063ca:	4b6f      	ldr	r3, [pc, #444]	; (8006588 <touch_Adjust+0x778>)
 80063cc:	885b      	ldrh	r3, [r3, #2]
 80063ce:	3b14      	subs	r3, #20
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063d6:	4619      	mov	r1, r3
 80063d8:	f7ff fc00 	bl	8005bdc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80063dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80063e0:	2114      	movs	r1, #20
 80063e2:	2014      	movs	r0, #20
 80063e4:	f7ff fbfa 	bl	8005bdc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80063e8:	2300      	movs	r3, #0
 80063ea:	9302      	str	r3, [sp, #8]
 80063ec:	2310      	movs	r3, #16
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80063fa:	4a64      	ldr	r2, [pc, #400]	; (800658c <touch_Adjust+0x77c>)
 80063fc:	2128      	movs	r1, #40	; 0x28
 80063fe:	2005      	movs	r0, #5
 8006400:	f7fd ffff 	bl	8004402 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8006404:	2300      	movs	r3, #0
 8006406:	9302      	str	r3, [sp, #8]
 8006408:	2310      	movs	r3, #16
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006416:	4a5e      	ldr	r2, [pc, #376]	; (8006590 <touch_Adjust+0x780>)
 8006418:	213c      	movs	r1, #60	; 0x3c
 800641a:	2005      	movs	r0, #5
 800641c:	f7fd fff1 	bl	8004402 <lcd_ShowStr>

						HAL_Delay(1000);
 8006420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006424:	f000 fac4 	bl	80069b0 <HAL_Delay>
 							continue;
 8006428:	e0a7      	b.n	800657a <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 800642a:	4b57      	ldr	r3, [pc, #348]	; (8006588 <touch_Adjust+0x778>)
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	3b28      	subs	r3, #40	; 0x28
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006438:	88bb      	ldrh	r3, [r7, #4]
 800643a:	461a      	mov	r2, r3
 800643c:	883b      	ldrh	r3, [r7, #0]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644c:	4b51      	ldr	r3, [pc, #324]	; (8006594 <touch_Adjust+0x784>)
 800644e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8006452:	4b4d      	ldr	r3, [pc, #308]	; (8006588 <touch_Adjust+0x778>)
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800645e:	4b4d      	ldr	r3, [pc, #308]	; (8006594 <touch_Adjust+0x784>)
 8006460:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8006464:	88bb      	ldrh	r3, [r7, #4]
 8006466:	461a      	mov	r2, r3
 8006468:	883b      	ldrh	r3, [r7, #0]
 800646a:	4413      	add	r3, r2
 800646c:	ee07 3a90 	vmov	s15, r3
 8006470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800647c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006488:	ee17 3a90 	vmov	r3, s15
 800648c:	b21a      	sxth	r2, r3
 800648e:	4b41      	ldr	r3, [pc, #260]	; (8006594 <touch_Adjust+0x784>)
 8006490:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8006492:	4b3d      	ldr	r3, [pc, #244]	; (8006588 <touch_Adjust+0x778>)
 8006494:	885b      	ldrh	r3, [r3, #2]
 8006496:	3b28      	subs	r3, #40	; 0x28
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80064a0:	897b      	ldrh	r3, [r7, #10]
 80064a2:	461a      	mov	r2, r3
 80064a4:	887b      	ldrh	r3, [r7, #2]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	ee07 3a90 	vmov	s15, r3
 80064ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b4:	4b37      	ldr	r3, [pc, #220]	; (8006594 <touch_Adjust+0x784>)
 80064b6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 80064ba:	4b33      	ldr	r3, [pc, #204]	; (8006588 <touch_Adjust+0x778>)
 80064bc:	885b      	ldrh	r3, [r3, #2]
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064c6:	4b33      	ldr	r3, [pc, #204]	; (8006594 <touch_Adjust+0x784>)
 80064c8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80064cc:	897b      	ldrh	r3, [r7, #10]
 80064ce:	461a      	mov	r2, r3
 80064d0:	887b      	ldrh	r3, [r7, #2]
 80064d2:	4413      	add	r3, r2
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80064e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064f0:	ee17 3a90 	vmov	r3, s15
 80064f4:	b21a      	sxth	r2, r3
 80064f6:	4b27      	ldr	r3, [pc, #156]	; (8006594 <touch_Adjust+0x784>)
 80064f8:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80064fa:	4b23      	ldr	r3, [pc, #140]	; (8006588 <touch_Adjust+0x778>)
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	3b14      	subs	r3, #20
 8006500:	b298      	uxth	r0, r3
 8006502:	4b21      	ldr	r3, [pc, #132]	; (8006588 <touch_Adjust+0x778>)
 8006504:	885b      	ldrh	r3, [r3, #2]
 8006506:	3b14      	subs	r3, #20
 8006508:	b29b      	uxth	r3, r3
 800650a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800650e:	4619      	mov	r1, r3
 8006510:	f7ff fb64 	bl	8005bdc <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8006514:	2300      	movs	r3, #0
 8006516:	9302      	str	r3, [sp, #8]
 8006518:	2310      	movs	r3, #16
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006526:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <touch_Adjust+0x788>)
 8006528:	2128      	movs	r1, #40	; 0x28
 800652a:	2005      	movs	r0, #5
 800652c:	f7fd ff69 	bl	8004402 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8006530:	2300      	movs	r3, #0
 8006532:	9302      	str	r3, [sp, #8]
 8006534:	2310      	movs	r3, #16
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006542:	4a16      	ldr	r2, [pc, #88]	; (800659c <touch_Adjust+0x78c>)
 8006544:	213c      	movs	r1, #60	; 0x3c
 8006546:	2005      	movs	r0, #5
 8006548:	f7fd ff5b 	bl	8004402 <lcd_ShowStr>
					HAL_Delay(1000);
 800654c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006550:	f000 fa2e 	bl	80069b0 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8006554:	2300      	movs	r3, #0
 8006556:	9302      	str	r3, [sp, #8]
 8006558:	2310      	movs	r3, #16
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006566:	4a0e      	ldr	r2, [pc, #56]	; (80065a0 <touch_Adjust+0x790>)
 8006568:	2128      	movs	r1, #40	; 0x28
 800656a:	2005      	movs	r0, #5
 800656c:	f7fd ff49 	bl	8004402 <lcd_ShowStr>
					TP_Save_Adjdata();
 8006570:	f7ff fc22 	bl	8005db8 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8006574:	f7ff fc30 	bl	8005dd8 <TP_Get_Adjdata>
					return;
 8006578:	e000      	b.n	800657c <touch_Adjust+0x76c>
		HAL_Delay(50);
 800657a:	e495      	b.n	8005ea8 <touch_Adjust+0x98>
			}
		}
 	}
}
 800657c:	3728      	adds	r7, #40	; 0x28
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	f3af 8000 	nop.w
 8006588:	20000334 	.word	0x20000334
 800658c:	0800e6c4 	.word	0x0800e6c4
 8006590:	0800e6e4 	.word	0x0800e6e4
 8006594:	2000006c 	.word	0x2000006c
 8006598:	0800e704 	.word	0x0800e704
 800659c:	0800e724 	.word	0x0800e724
 80065a0:	0800e744 	.word	0x0800e744
 80065a4:	66666666 	.word	0x66666666
 80065a8:	3fee6666 	.word	0x3fee6666
 80065ac:	cccccccd 	.word	0xcccccccd
 80065b0:	3ff0cccc 	.word	0x3ff0cccc

080065b4 <touch_init>:

void touch_init(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 80065b8:	4904      	ldr	r1, [pc, #16]	; (80065cc <touch_init+0x18>)
 80065ba:	4805      	ldr	r0, [pc, #20]	; (80065d0 <touch_init+0x1c>)
 80065bc:	f7ff fa8a 	bl	8005ad4 <TP_Read_XY>
	at24c_init();
 80065c0:	f7fa fd6a 	bl	8001098 <at24c_init>
	TP_Get_Adjdata();
 80065c4:	f7ff fc08 	bl	8005dd8 <TP_Get_Adjdata>
}
 80065c8:	bf00      	nop
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20000082 	.word	0x20000082
 80065d0:	20000078 	.word	0x20000078

080065d4 <touch_Scan>:

void touch_Scan(){
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80065d8:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <touch_Scan+0x10>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2000      	movs	r0, #0
 80065de:	4798      	blx	r3
}
 80065e0:	bf00      	nop
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	2000006c 	.word	0x2000006c

080065e8 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 80065ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065f0:	4805      	ldr	r0, [pc, #20]	; (8006608 <touch_IsTouched+0x20>)
 80065f2:	f001 fcc3 	bl	8007f7c <HAL_GPIO_ReadPin>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
}
 8006602:	4618      	mov	r0, r3
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40020800 	.word	0x40020800

0800660c <touch_GetX>:

uint16_t touch_GetX(){
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8006610:	4b03      	ldr	r3, [pc, #12]	; (8006620 <touch_GetX+0x14>)
 8006612:	899b      	ldrh	r3, [r3, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	2000006c 	.word	0x2000006c

08006624 <touch_GetY>:

uint16_t touch_GetY(){
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8006628:	4b03      	ldr	r3, [pc, #12]	; (8006638 <touch_GetY+0x14>)
 800662a:	8adb      	ldrh	r3, [r3, #22]
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	2000006c 	.word	0x2000006c

0800663c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a08      	ldr	r2, [pc, #32]	; (800666c <HAL_UART_RxCpltCallback+0x30>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d10a      	bne.n	8006664 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800664e:	230a      	movs	r3, #10
 8006650:	2201      	movs	r2, #1
 8006652:	4907      	ldr	r1, [pc, #28]	; (8006670 <HAL_UART_RxCpltCallback+0x34>)
 8006654:	4807      	ldr	r0, [pc, #28]	; (8006674 <HAL_UART_RxCpltCallback+0x38>)
 8006656:	f004 ff0a 	bl	800b46e <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800665a:	2201      	movs	r2, #1
 800665c:	4904      	ldr	r1, [pc, #16]	; (8006670 <HAL_UART_RxCpltCallback+0x34>)
 800665e:	4805      	ldr	r0, [pc, #20]	; (8006674 <HAL_UART_RxCpltCallback+0x38>)
 8006660:	f004 ff97 	bl	800b592 <HAL_UART_Receive_IT>
	}
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40011000 	.word	0x40011000
 8006670:	200004f8 	.word	0x200004f8
 8006674:	200004fc 	.word	0x200004fc

08006678 <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 800667e:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <MX_USART1_UART_Init+0x50>)
 8006680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 8006684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800668a:	4b0e      	ldr	r3, [pc, #56]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 800668c:	2200      	movs	r2, #0
 800668e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006690:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 8006692:	2200      	movs	r2, #0
 8006694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 8006698:	2200      	movs	r2, #0
 800669a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 800669e:	220c      	movs	r2, #12
 80066a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80066ae:	4805      	ldr	r0, [pc, #20]	; (80066c4 <MX_USART1_UART_Init+0x4c>)
 80066b0:	f004 fe90 	bl	800b3d4 <HAL_UART_Init>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80066ba:	f7fe f89f 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	200004fc 	.word	0x200004fc
 80066c8:	40011000 	.word	0x40011000

080066cc <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066d2:	4a12      	ldr	r2, [pc, #72]	; (800671c <MX_USART2_UART_Init+0x50>)
 80066d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80066d6:	4b10      	ldr	r3, [pc, #64]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066de:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066f0:	4b09      	ldr	r3, [pc, #36]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066f2:	220c      	movs	r2, #12
 80066f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066f6:	4b08      	ldr	r3, [pc, #32]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006702:	4805      	ldr	r0, [pc, #20]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 8006704:	f004 fe66 	bl	800b3d4 <HAL_UART_Init>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800670e:	f7fe f875 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006712:	bf00      	nop
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000540 	.word	0x20000540
 800671c:	40004400 	.word	0x40004400

08006720 <user_init>:
 *      Author: Duyen
 */

#include "user.h"

void user_init(){
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
	memset(name, '\0', sizeof(name));	// Ten nguoi choi nhap vao
 8006724:	220b      	movs	r2, #11
 8006726:	2100      	movs	r1, #0
 8006728:	480d      	ldr	r0, [pc, #52]	; (8006760 <user_init+0x40>)
 800672a:	f006 f936 	bl	800c99a <memset>
	name_length = 0;					// Do dai ten nguoi choi
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <user_init+0x44>)
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
	current_score = 0;					// Diem hien tai cua nguoi choi
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <user_init+0x48>)
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
	current_temp = 0.0;					// Nhiet do hien tai
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <user_init+0x4c>)
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	601a      	str	r2, [r3, #0]
	current_hum = 0;					// Do am hien tai
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <user_init+0x50>)
 8006744:	2200      	movs	r2, #0
 8006746:	801a      	strh	r2, [r3, #0]
	current_light = 0;					// Anh sang hien tai
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <user_init+0x54>)
 800674a:	2200      	movs	r2, #0
 800674c:	801a      	strh	r2, [r3, #0]
	current_time = 0;					// Tong thoi gian choi hien tai
 800674e:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <user_init+0x58>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
	flag_user = FLAG_NOTSTART;			// Trang thai nguoi choi
 8006754:	4b09      	ldr	r3, [pc, #36]	; (800677c <user_init+0x5c>)
 8006756:	2200      	movs	r2, #0
 8006758:	701a      	strb	r2, [r3, #0]
}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000284 	.word	0x20000284
 8006764:	2000028f 	.word	0x2000028f
 8006768:	20000000 	.word	0x20000000
 800676c:	20000004 	.word	0x20000004
 8006770:	20000008 	.word	0x20000008
 8006774:	2000000a 	.word	0x2000000a
 8006778:	20000290 	.word	0x20000290
 800677c:	20000294 	.word	0x20000294

08006780 <user_history>:

void user_history(){
 8006780:	b590      	push	{r4, r7, lr}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
	flag_user = FLAG_END;
 8006786:	4b37      	ldr	r3, [pc, #220]	; (8006864 <user_history+0xe4>)
 8006788:	2202      	movs	r2, #2
 800678a:	701a      	strb	r2, [r3, #0]
	if(num_history == 0){
 800678c:	4b36      	ldr	r3, [pc, #216]	; (8006868 <user_history+0xe8>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10f      	bne.n	80067b4 <user_history+0x34>
		strcpy(history[0].name, name);
 8006794:	4935      	ldr	r1, [pc, #212]	; (800686c <user_history+0xec>)
 8006796:	4836      	ldr	r0, [pc, #216]	; (8006870 <user_history+0xf0>)
 8006798:	f006 f97b 	bl	800ca92 <strcpy>
		history[0].score = current_score;
 800679c:	4b35      	ldr	r3, [pc, #212]	; (8006874 <user_history+0xf4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	4b33      	ldr	r3, [pc, #204]	; (8006870 <user_history+0xf0>)
 80067a4:	819a      	strh	r2, [r3, #12]
		num_history++;
 80067a6:	4b30      	ldr	r3, [pc, #192]	; (8006868 <user_history+0xe8>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	3301      	adds	r3, #1
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b2e      	ldr	r3, [pc, #184]	; (8006868 <user_history+0xe8>)
 80067b0:	701a      	strb	r2, [r3, #0]
		return;
 80067b2:	e054      	b.n	800685e <user_history+0xde>
	}
	uint8_t i;
	for(i = num_history; i > 0; i--){
 80067b4:	4b2c      	ldr	r3, [pc, #176]	; (8006868 <user_history+0xe8>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	71fb      	strb	r3, [r7, #7]
 80067ba:	e029      	b.n	8006810 <user_history+0x90>
		if(history[i - 1].score < current_score){
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	1e5a      	subs	r2, r3, #1
 80067c0:	492b      	ldr	r1, [pc, #172]	; (8006870 <user_history+0xf0>)
 80067c2:	4613      	mov	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	440b      	add	r3, r1
 80067cc:	330c      	adds	r3, #12
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	4b28      	ldr	r3, [pc, #160]	; (8006874 <user_history+0xf4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d21e      	bcs.n	8006818 <user_history+0x98>
			history[i] = history[i - 1];
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	1e5a      	subs	r2, r3, #1
 80067de:	79f9      	ldrb	r1, [r7, #7]
 80067e0:	4823      	ldr	r0, [pc, #140]	; (8006870 <user_history+0xf0>)
 80067e2:	460b      	mov	r3, r1
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	1a5b      	subs	r3, r3, r1
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	4418      	add	r0, r3
 80067ec:	4920      	ldr	r1, [pc, #128]	; (8006870 <user_history+0xf0>)
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	18ca      	adds	r2, r1, r3
 80067f8:	4603      	mov	r3, r0
 80067fa:	6814      	ldr	r4, [r2, #0]
 80067fc:	6850      	ldr	r0, [r2, #4]
 80067fe:	6891      	ldr	r1, [r2, #8]
 8006800:	601c      	str	r4, [r3, #0]
 8006802:	6058      	str	r0, [r3, #4]
 8006804:	6099      	str	r1, [r3, #8]
 8006806:	8992      	ldrh	r2, [r2, #12]
 8006808:	819a      	strh	r2, [r3, #12]
	for(i = num_history; i > 0; i--){
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	3b01      	subs	r3, #1
 800680e:	71fb      	strb	r3, [r7, #7]
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1d2      	bne.n	80067bc <user_history+0x3c>
 8006816:	e000      	b.n	800681a <user_history+0x9a>
		}else{
			break;
 8006818:	bf00      	nop
		}
	}
	strcpy(history[i].name, name);
 800681a:	79fa      	ldrb	r2, [r7, #7]
 800681c:	4613      	mov	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	4a12      	ldr	r2, [pc, #72]	; (8006870 <user_history+0xf0>)
 8006826:	4413      	add	r3, r2
 8006828:	4910      	ldr	r1, [pc, #64]	; (800686c <user_history+0xec>)
 800682a:	4618      	mov	r0, r3
 800682c:	f006 f931 	bl	800ca92 <strcpy>
	history[i].score = current_score;
 8006830:	4b10      	ldr	r3, [pc, #64]	; (8006874 <user_history+0xf4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	79fa      	ldrb	r2, [r7, #7]
 8006836:	b298      	uxth	r0, r3
 8006838:	490d      	ldr	r1, [pc, #52]	; (8006870 <user_history+0xf0>)
 800683a:	4613      	mov	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	440b      	add	r3, r1
 8006844:	330c      	adds	r3, #12
 8006846:	4602      	mov	r2, r0
 8006848:	801a      	strh	r2, [r3, #0]
	if(num_history < MAX_HISTORY){
 800684a:	4b07      	ldr	r3, [pc, #28]	; (8006868 <user_history+0xe8>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b08      	cmp	r3, #8
 8006850:	d805      	bhi.n	800685e <user_history+0xde>
		num_history++;
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <user_history+0xe8>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	3301      	adds	r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <user_history+0xe8>)
 800685c:	701a      	strb	r2, [r3, #0]
	}
}
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	bd90      	pop	{r4, r7, pc}
 8006864:	20000294 	.word	0x20000294
 8006868:	20000280 	.word	0x20000280
 800686c:	20000284 	.word	0x20000284
 8006870:	200001f4 	.word	0x200001f4
 8006874:	20000000 	.word	0x20000000

08006878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800687c:	480d      	ldr	r0, [pc, #52]	; (80068b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800687e:	490e      	ldr	r1, [pc, #56]	; (80068b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006880:	4a0e      	ldr	r2, [pc, #56]	; (80068bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006884:	e002      	b.n	800688c <LoopCopyDataInit>

08006886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800688a:	3304      	adds	r3, #4

0800688c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800688c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800688e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006890:	d3f9      	bcc.n	8006886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006892:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006894:	4c0b      	ldr	r4, [pc, #44]	; (80068c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006898:	e001      	b.n	800689e <LoopFillZerobss>

0800689a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800689a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800689c:	3204      	adds	r2, #4

0800689e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800689e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068a0:	d3fb      	bcc.n	800689a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80068a2:	f7fe fef5 	bl	8005690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068a6:	f006 f8cd 	bl	800ca44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068aa:	f7fd fee7 	bl	800467c <main>
  bx  lr    
 80068ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80068b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80068b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068b8:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 80068bc:	080e9c58 	.word	0x080e9c58
  ldr r2, =_sbss
 80068c0:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80068c4:	200006d4 	.word	0x200006d4

080068c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068c8:	e7fe      	b.n	80068c8 <ADC_IRQHandler>
	...

080068cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068d0:	4b0e      	ldr	r3, [pc, #56]	; (800690c <HAL_Init+0x40>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a0d      	ldr	r2, [pc, #52]	; (800690c <HAL_Init+0x40>)
 80068d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <HAL_Init+0x40>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0a      	ldr	r2, [pc, #40]	; (800690c <HAL_Init+0x40>)
 80068e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <HAL_Init+0x40>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a07      	ldr	r2, [pc, #28]	; (800690c <HAL_Init+0x40>)
 80068ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068f4:	2003      	movs	r0, #3
 80068f6:	f000 fd61 	bl	80073bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068fa:	200f      	movs	r0, #15
 80068fc:	f000 f808 	bl	8006910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006900:	f7fe faf4 	bl	8004eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40023c00 	.word	0x40023c00

08006910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006918:	4b12      	ldr	r3, [pc, #72]	; (8006964 <HAL_InitTick+0x54>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b12      	ldr	r3, [pc, #72]	; (8006968 <HAL_InitTick+0x58>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006926:	fbb3 f3f1 	udiv	r3, r3, r1
 800692a:	fbb2 f3f3 	udiv	r3, r2, r3
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fd79 	bl	8007426 <HAL_SYSTICK_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e00e      	b.n	800695c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b0f      	cmp	r3, #15
 8006942:	d80a      	bhi.n	800695a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006944:	2200      	movs	r2, #0
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	f000 fd41 	bl	80073d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006950:	4a06      	ldr	r2, [pc, #24]	; (800696c <HAL_InitTick+0x5c>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e000      	b.n	800695c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000068 	.word	0x20000068
 8006968:	200000a8 	.word	0x200000a8
 800696c:	200000a4 	.word	0x200000a4

08006970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <HAL_IncTick+0x20>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <HAL_IncTick+0x24>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4413      	add	r3, r2
 8006980:	4a04      	ldr	r2, [pc, #16]	; (8006994 <HAL_IncTick+0x24>)
 8006982:	6013      	str	r3, [r2, #0]
}
 8006984:	bf00      	nop
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	200000a8 	.word	0x200000a8
 8006994:	20000584 	.word	0x20000584

08006998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  return uwTick;
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <HAL_GetTick+0x14>)
 800699e:	681b      	ldr	r3, [r3, #0]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000584 	.word	0x20000584

080069b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069b8:	f7ff ffee 	bl	8006998 <HAL_GetTick>
 80069bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d005      	beq.n	80069d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <HAL_Delay+0x44>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069d6:	bf00      	nop
 80069d8:	f7ff ffde 	bl	8006998 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d8f7      	bhi.n	80069d8 <HAL_Delay+0x28>
  {
  }
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200000a8 	.word	0x200000a8

080069f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e033      	b.n	8006a76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fe fa90 	bl	8004f3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d118      	bne.n	8006a68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a3e:	f023 0302 	bic.w	r3, r3, #2
 8006a42:	f043 0202 	orr.w	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa68 	bl	8006f20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	f043 0201 	orr.w	r2, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40
 8006a66:	e001      	b.n	8006a6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_ADC_Start_DMA+0x1e>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e0e9      	b.n	8006c72 <HAL_ADC_Start_DMA+0x1f2>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d018      	beq.n	8006ae6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006ac4:	4b6d      	ldr	r3, [pc, #436]	; (8006c7c <HAL_ADC_Start_DMA+0x1fc>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a6d      	ldr	r2, [pc, #436]	; (8006c80 <HAL_ADC_Start_DMA+0x200>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	0c9a      	lsrs	r2, r3, #18
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	4413      	add	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ad8:	e002      	b.n	8006ae0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f9      	bne.n	8006ada <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af4:	d107      	bne.n	8006b06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	f040 80a1 	bne.w	8006c58 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d007      	beq.n	8006b48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b54:	d106      	bne.n	8006b64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	f023 0206 	bic.w	r2, r3, #6
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44
 8006b62:	e002      	b.n	8006b6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b72:	4b44      	ldr	r3, [pc, #272]	; (8006c84 <HAL_ADC_Start_DMA+0x204>)
 8006b74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	4a43      	ldr	r2, [pc, #268]	; (8006c88 <HAL_ADC_Start_DMA+0x208>)
 8006b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	4a42      	ldr	r2, [pc, #264]	; (8006c8c <HAL_ADC_Start_DMA+0x20c>)
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	4a41      	ldr	r2, [pc, #260]	; (8006c90 <HAL_ADC_Start_DMA+0x210>)
 8006b8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006b96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006ba6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	334c      	adds	r3, #76	; 0x4c
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f000 fce8 	bl	800759c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d12a      	bne.n	8006c2e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a2d      	ldr	r2, [pc, #180]	; (8006c94 <HAL_ADC_Start_DMA+0x214>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d015      	beq.n	8006c0e <HAL_ADC_Start_DMA+0x18e>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2c      	ldr	r2, [pc, #176]	; (8006c98 <HAL_ADC_Start_DMA+0x218>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d105      	bne.n	8006bf8 <HAL_ADC_Start_DMA+0x178>
 8006bec:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <HAL_ADC_Start_DMA+0x204>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a27      	ldr	r2, [pc, #156]	; (8006c9c <HAL_ADC_Start_DMA+0x21c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d136      	bne.n	8006c70 <HAL_ADC_Start_DMA+0x1f0>
 8006c02:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <HAL_ADC_Start_DMA+0x204>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d130      	bne.n	8006c70 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d129      	bne.n	8006c70 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	e020      	b.n	8006c70 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a18      	ldr	r2, [pc, #96]	; (8006c94 <HAL_ADC_Start_DMA+0x214>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d11b      	bne.n	8006c70 <HAL_ADC_Start_DMA+0x1f0>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d114      	bne.n	8006c70 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c54:	609a      	str	r2, [r3, #8]
 8006c56:	e00b      	b.n	8006c70 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	f043 0210 	orr.w	r2, r3, #16
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c68:	f043 0201 	orr.w	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000068 	.word	0x20000068
 8006c80:	431bde83 	.word	0x431bde83
 8006c84:	40012300 	.word	0x40012300
 8006c88:	08007119 	.word	0x08007119
 8006c8c:	080071d3 	.word	0x080071d3
 8006c90:	080071ef 	.word	0x080071ef
 8006c94:	40012000 	.word	0x40012000
 8006c98:	40012100 	.word	0x40012100
 8006c9c:	40012200 	.word	0x40012200

08006ca0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_ADC_ConfigChannel+0x1c>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e105      	b.n	8006f04 <HAL_ADC_ConfigChannel+0x228>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b09      	cmp	r3, #9
 8006d06:	d925      	bls.n	8006d54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68d9      	ldr	r1, [r3, #12]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3b1e      	subs	r3, #30
 8006d1e:	2207      	movs	r2, #7
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	43da      	mvns	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	400a      	ands	r2, r1
 8006d2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68d9      	ldr	r1, [r3, #12]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	4618      	mov	r0, r3
 8006d40:	4603      	mov	r3, r0
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	4403      	add	r3, r0
 8006d46:	3b1e      	subs	r3, #30
 8006d48:	409a      	lsls	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	60da      	str	r2, [r3, #12]
 8006d52:	e022      	b.n	8006d9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6919      	ldr	r1, [r3, #16]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	4613      	mov	r3, r2
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	4413      	add	r3, r2
 8006d68:	2207      	movs	r2, #7
 8006d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6e:	43da      	mvns	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	400a      	ands	r2, r1
 8006d76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6919      	ldr	r1, [r3, #16]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	4618      	mov	r0, r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	4403      	add	r3, r0
 8006d90:	409a      	lsls	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b06      	cmp	r3, #6
 8006da0:	d824      	bhi.n	8006dec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	3b05      	subs	r3, #5
 8006db4:	221f      	movs	r2, #31
 8006db6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	400a      	ands	r2, r1
 8006dc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	3b05      	subs	r3, #5
 8006dde:	fa00 f203 	lsl.w	r2, r0, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	635a      	str	r2, [r3, #52]	; 0x34
 8006dea:	e04c      	b.n	8006e86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b0c      	cmp	r3, #12
 8006df2:	d824      	bhi.n	8006e3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	3b23      	subs	r3, #35	; 0x23
 8006e06:	221f      	movs	r2, #31
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	43da      	mvns	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	400a      	ands	r2, r1
 8006e14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	4618      	mov	r0, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3b23      	subs	r3, #35	; 0x23
 8006e30:	fa00 f203 	lsl.w	r2, r0, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e3c:	e023      	b.n	8006e86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3b41      	subs	r3, #65	; 0x41
 8006e50:	221f      	movs	r2, #31
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	43da      	mvns	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	3b41      	subs	r3, #65	; 0x41
 8006e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e86:	4b22      	ldr	r3, [pc, #136]	; (8006f10 <HAL_ADC_ConfigChannel+0x234>)
 8006e88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a21      	ldr	r2, [pc, #132]	; (8006f14 <HAL_ADC_ConfigChannel+0x238>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d109      	bne.n	8006ea8 <HAL_ADC_ConfigChannel+0x1cc>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b12      	cmp	r3, #18
 8006e9a:	d105      	bne.n	8006ea8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a19      	ldr	r2, [pc, #100]	; (8006f14 <HAL_ADC_ConfigChannel+0x238>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d123      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x21e>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d003      	beq.n	8006ec2 <HAL_ADC_ConfigChannel+0x1e6>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b11      	cmp	r3, #17
 8006ec0:	d11b      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d111      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <HAL_ADC_ConfigChannel+0x23c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a10      	ldr	r2, [pc, #64]	; (8006f1c <HAL_ADC_ConfigChannel+0x240>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	0c9a      	lsrs	r2, r3, #18
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006eec:	e002      	b.n	8006ef4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f9      	bne.n	8006eee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40012300 	.word	0x40012300
 8006f14:	40012000 	.word	0x40012000
 8006f18:	20000068 	.word	0x20000068
 8006f1c:	431bde83 	.word	0x431bde83

08006f20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f28:	4b79      	ldr	r3, [pc, #484]	; (8007110 <ADC_Init+0x1f0>)
 8006f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	021a      	lsls	r2, r3, #8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6899      	ldr	r1, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	4a58      	ldr	r2, [pc, #352]	; (8007114 <ADC_Init+0x1f4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6899      	ldr	r1, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6899      	ldr	r1, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	609a      	str	r2, [r3, #8]
 8006ffc:	e00f      	b.n	800701e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800700c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800701c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0202 	bic.w	r2, r2, #2
 800702c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6899      	ldr	r1, [r3, #8]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7e1b      	ldrb	r3, [r3, #24]
 8007038:	005a      	lsls	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01b      	beq.n	8007084 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800705a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800706a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6859      	ldr	r1, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	3b01      	subs	r3, #1
 8007078:	035a      	lsls	r2, r3, #13
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
 8007082:	e007      	b.n	8007094 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007092:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80070a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	051a      	lsls	r2, r3, #20
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6899      	ldr	r1, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070d6:	025a      	lsls	r2, r3, #9
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6899      	ldr	r1, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	029a      	lsls	r2, r3, #10
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	609a      	str	r2, [r3, #8]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	40012300 	.word	0x40012300
 8007114:	0f000001 	.word	0x0f000001

08007118 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800712e:	2b00      	cmp	r3, #0
 8007130:	d13c      	bne.n	80071ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d12b      	bne.n	80071a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007150:	2b00      	cmp	r3, #0
 8007152:	d127      	bne.n	80071a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800715e:	2b00      	cmp	r3, #0
 8007160:	d006      	beq.n	8007170 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800716c:	2b00      	cmp	r3, #0
 800716e:	d119      	bne.n	80071a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0220 	bic.w	r2, r2, #32
 800717e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	f043 0201 	orr.w	r2, r3, #1
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff fd7b 	bl	8006ca0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80071aa:	e00e      	b.n	80071ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fd85 	bl	8006cc8 <HAL_ADC_ErrorCallback>
}
 80071be:	e004      	b.n	80071ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff fd67 	bl	8006cb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2240      	movs	r2, #64	; 0x40
 8007200:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	f043 0204 	orr.w	r2, r3, #4
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff fd5a 	bl	8006cc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <__NVIC_SetPriorityGrouping+0x44>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007238:	4013      	ands	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800724e:	4a04      	ldr	r2, [pc, #16]	; (8007260 <__NVIC_SetPriorityGrouping+0x44>)
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	60d3      	str	r3, [r2, #12]
}
 8007254:	bf00      	nop
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	e000ed00 	.word	0xe000ed00

08007264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007264:	b480      	push	{r7}
 8007266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007268:	4b04      	ldr	r3, [pc, #16]	; (800727c <__NVIC_GetPriorityGrouping+0x18>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	f003 0307 	and.w	r3, r3, #7
}
 8007272:	4618      	mov	r0, r3
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	e000ed00 	.word	0xe000ed00

08007280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800728a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728e:	2b00      	cmp	r3, #0
 8007290:	db0b      	blt.n	80072aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	f003 021f 	and.w	r2, r3, #31
 8007298:	4907      	ldr	r1, [pc, #28]	; (80072b8 <__NVIC_EnableIRQ+0x38>)
 800729a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	2001      	movs	r0, #1
 80072a2:	fa00 f202 	lsl.w	r2, r0, r2
 80072a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	e000e100 	.word	0xe000e100

080072bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	6039      	str	r1, [r7, #0]
 80072c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	db0a      	blt.n	80072e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	490c      	ldr	r1, [pc, #48]	; (8007308 <__NVIC_SetPriority+0x4c>)
 80072d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072da:	0112      	lsls	r2, r2, #4
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	440b      	add	r3, r1
 80072e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072e4:	e00a      	b.n	80072fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	4908      	ldr	r1, [pc, #32]	; (800730c <__NVIC_SetPriority+0x50>)
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	3b04      	subs	r3, #4
 80072f4:	0112      	lsls	r2, r2, #4
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	440b      	add	r3, r1
 80072fa:	761a      	strb	r2, [r3, #24]
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	e000e100 	.word	0xe000e100
 800730c:	e000ed00 	.word	0xe000ed00

08007310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007310:	b480      	push	{r7}
 8007312:	b089      	sub	sp, #36	; 0x24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f1c3 0307 	rsb	r3, r3, #7
 800732a:	2b04      	cmp	r3, #4
 800732c:	bf28      	it	cs
 800732e:	2304      	movcs	r3, #4
 8007330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	3304      	adds	r3, #4
 8007336:	2b06      	cmp	r3, #6
 8007338:	d902      	bls.n	8007340 <NVIC_EncodePriority+0x30>
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	3b03      	subs	r3, #3
 800733e:	e000      	b.n	8007342 <NVIC_EncodePriority+0x32>
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007344:	f04f 32ff 	mov.w	r2, #4294967295
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	43da      	mvns	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	401a      	ands	r2, r3
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007358:	f04f 31ff 	mov.w	r1, #4294967295
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	fa01 f303 	lsl.w	r3, r1, r3
 8007362:	43d9      	mvns	r1, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007368:	4313      	orrs	r3, r2
         );
}
 800736a:	4618      	mov	r0, r3
 800736c:	3724      	adds	r7, #36	; 0x24
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
	...

08007378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3b01      	subs	r3, #1
 8007384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007388:	d301      	bcc.n	800738e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800738a:	2301      	movs	r3, #1
 800738c:	e00f      	b.n	80073ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800738e:	4a0a      	ldr	r2, [pc, #40]	; (80073b8 <SysTick_Config+0x40>)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3b01      	subs	r3, #1
 8007394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007396:	210f      	movs	r1, #15
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	f7ff ff8e 	bl	80072bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <SysTick_Config+0x40>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073a6:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <SysTick_Config+0x40>)
 80073a8:	2207      	movs	r2, #7
 80073aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	e000e010 	.word	0xe000e010

080073bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff ff29 	bl	800721c <__NVIC_SetPriorityGrouping>
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	4603      	mov	r3, r0
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
 80073de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073e4:	f7ff ff3e 	bl	8007264 <__NVIC_GetPriorityGrouping>
 80073e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	6978      	ldr	r0, [r7, #20]
 80073f0:	f7ff ff8e 	bl	8007310 <NVIC_EncodePriority>
 80073f4:	4602      	mov	r2, r0
 80073f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff ff5d 	bl	80072bc <__NVIC_SetPriority>
}
 8007402:	bf00      	nop
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	4603      	mov	r3, r0
 8007412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff ff31 	bl	8007280 <__NVIC_EnableIRQ>
}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff ffa2 	bl	8007378 <SysTick_Config>
 8007434:	4603      	mov	r3, r0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800744c:	f7ff faa4 	bl	8006998 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e099      	b.n	8007590 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800747c:	e00f      	b.n	800749e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800747e:	f7ff fa8b 	bl	8006998 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b05      	cmp	r3, #5
 800748a:	d908      	bls.n	800749e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2203      	movs	r2, #3
 8007496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e078      	b.n	8007590 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e8      	bne.n	800747e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4b38      	ldr	r3, [pc, #224]	; (8007598 <HAL_DMA_Init+0x158>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d107      	bne.n	8007508 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007500:	4313      	orrs	r3, r2
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	2b04      	cmp	r3, #4
 8007530:	d117      	bne.n	8007562 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00e      	beq.n	8007562 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fb01 	bl	8007b4c <DMA_CheckFifoParam>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2240      	movs	r2, #64	; 0x40
 8007554:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800755e:	2301      	movs	r3, #1
 8007560:	e016      	b.n	8007590 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fab8 	bl	8007ae0 <DMA_CalcBaseAndBitshift>
 8007570:	4603      	mov	r3, r0
 8007572:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007578:	223f      	movs	r2, #63	; 0x3f
 800757a:	409a      	lsls	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	f010803f 	.word	0xf010803f

0800759c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_DMA_Start_IT+0x26>
 80075be:	2302      	movs	r3, #2
 80075c0:	e040      	b.n	8007644 <HAL_DMA_Start_IT+0xa8>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d12f      	bne.n	8007636 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fa4a 	bl	8007a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f4:	223f      	movs	r2, #63	; 0x3f
 80075f6:	409a      	lsls	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0216 	orr.w	r2, r2, #22
 800760a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0208 	orr.w	r2, r2, #8
 8007622:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0201 	orr.w	r2, r2, #1
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	e005      	b.n	8007642 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800763e:	2302      	movs	r3, #2
 8007640:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007658:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800765a:	f7ff f99d 	bl	8006998 <HAL_GetTick>
 800765e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d008      	beq.n	800767e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2280      	movs	r2, #128	; 0x80
 8007670:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e052      	b.n	8007724 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0216 	bic.w	r2, r2, #22
 800768c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800769c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d103      	bne.n	80076ae <HAL_DMA_Abort+0x62>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0208 	bic.w	r2, r2, #8
 80076bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0201 	bic.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076ce:	e013      	b.n	80076f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076d0:	f7ff f962 	bl	8006998 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b05      	cmp	r3, #5
 80076dc:	d90c      	bls.n	80076f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2203      	movs	r2, #3
 80076e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e015      	b.n	8007724 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e4      	bne.n	80076d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800770a:	223f      	movs	r2, #63	; 0x3f
 800770c:	409a      	lsls	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d004      	beq.n	800774a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2280      	movs	r2, #128	; 0x80
 8007744:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e00c      	b.n	8007764 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2205      	movs	r2, #5
 800774e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0201 	bic.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800777c:	4b8e      	ldr	r3, [pc, #568]	; (80079b8 <HAL_DMA_IRQHandler+0x248>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a8e      	ldr	r2, [pc, #568]	; (80079bc <HAL_DMA_IRQHandler+0x24c>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	0a9b      	lsrs	r3, r3, #10
 8007788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779a:	2208      	movs	r2, #8
 800779c:	409a      	lsls	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4013      	ands	r3, r2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01a      	beq.n	80077dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d013      	beq.n	80077dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0204 	bic.w	r2, r2, #4
 80077c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c8:	2208      	movs	r2, #8
 80077ca:	409a      	lsls	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d4:	f043 0201 	orr.w	r2, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d012      	beq.n	8007812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00b      	beq.n	8007812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fe:	2201      	movs	r2, #1
 8007800:	409a      	lsls	r2, r3
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	f043 0202 	orr.w	r2, r3, #2
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007816:	2204      	movs	r2, #4
 8007818:	409a      	lsls	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4013      	ands	r3, r2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d012      	beq.n	8007848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007834:	2204      	movs	r2, #4
 8007836:	409a      	lsls	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	f043 0204 	orr.w	r2, r3, #4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800784c:	2210      	movs	r2, #16
 800784e:	409a      	lsls	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4013      	ands	r3, r2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d043      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d03c      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786a:	2210      	movs	r2, #16
 800786c:	409a      	lsls	r2, r3
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d018      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d024      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
 800789e:	e01f      	b.n	80078e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01b      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
 80078b0:	e016      	b.n	80078e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d107      	bne.n	80078d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0208 	bic.w	r2, r2, #8
 80078ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e4:	2220      	movs	r2, #32
 80078e6:	409a      	lsls	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 808f 	beq.w	8007a10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8087 	beq.w	8007a10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	2220      	movs	r2, #32
 8007908:	409a      	lsls	r2, r3
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b05      	cmp	r3, #5
 8007918:	d136      	bne.n	8007988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0216 	bic.w	r2, r2, #22
 8007928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d103      	bne.n	800794a <HAL_DMA_IRQHandler+0x1da>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0208 	bic.w	r2, r2, #8
 8007958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795e:	223f      	movs	r2, #63	; 0x3f
 8007960:	409a      	lsls	r2, r3
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	2b00      	cmp	r3, #0
 800797c:	d07e      	beq.n	8007a7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
        }
        return;
 8007986:	e079      	b.n	8007a7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01d      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10d      	bne.n	80079c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d031      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
 80079b4:	e02c      	b.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
 80079b6:	bf00      	nop
 80079b8:	20000068 	.word	0x20000068
 80079bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d023      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	e01e      	b.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10f      	bne.n	8007a00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0210 	bic.w	r2, r2, #16
 80079ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d032      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d022      	beq.n	8007a6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2205      	movs	r2, #5
 8007a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0201 	bic.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d307      	bcc.n	8007a58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1f2      	bne.n	8007a3c <HAL_DMA_IRQHandler+0x2cc>
 8007a56:	e000      	b.n	8007a5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007a58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
 8007a7a:	e000      	b.n	8007a7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8007a7c:	bf00      	nop
    }
  }
}
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b40      	cmp	r3, #64	; 0x40
 8007ab0:	d108      	bne.n	8007ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007ac2:	e007      	b.n	8007ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	3b10      	subs	r3, #16
 8007af0:	4a14      	ldr	r2, [pc, #80]	; (8007b44 <DMA_CalcBaseAndBitshift+0x64>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	091b      	lsrs	r3, r3, #4
 8007af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007afa:	4a13      	ldr	r2, [pc, #76]	; (8007b48 <DMA_CalcBaseAndBitshift+0x68>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d909      	bls.n	8007b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	1d1a      	adds	r2, r3, #4
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8007b20:	e007      	b.n	8007b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b2a:	f023 0303 	bic.w	r3, r3, #3
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	aaaaaaab 	.word	0xaaaaaaab
 8007b48:	080e9b08 	.word	0x080e9b08

08007b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d11f      	bne.n	8007ba6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d856      	bhi.n	8007c1a <DMA_CheckFifoParam+0xce>
 8007b6c:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <DMA_CheckFifoParam+0x28>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007b97 	.word	0x08007b97
 8007b7c:	08007b85 	.word	0x08007b85
 8007b80:	08007c1b 	.word	0x08007c1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d046      	beq.n	8007c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b94:	e043      	b.n	8007c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b9e:	d140      	bne.n	8007c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ba4:	e03d      	b.n	8007c22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bae:	d121      	bne.n	8007bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d837      	bhi.n	8007c26 <DMA_CheckFifoParam+0xda>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <DMA_CheckFifoParam+0x70>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bd3 	.word	0x08007bd3
 8007bc4:	08007bcd 	.word	0x08007bcd
 8007bc8:	08007be5 	.word	0x08007be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd0:	e030      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d025      	beq.n	8007c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007be2:	e022      	b.n	8007c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bec:	d11f      	bne.n	8007c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007bf2:	e01c      	b.n	8007c2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d903      	bls.n	8007c02 <DMA_CheckFifoParam+0xb6>
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d003      	beq.n	8007c08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007c00:	e018      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
      break;
 8007c06:	e015      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00e      	beq.n	8007c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
      break;
 8007c18:	e00b      	b.n	8007c32 <DMA_CheckFifoParam+0xe6>
      break;
 8007c1a:	bf00      	nop
 8007c1c:	e00a      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
      break;
 8007c1e:	bf00      	nop
 8007c20:	e008      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
      break;
 8007c22:	bf00      	nop
 8007c24:	e006      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
      break;
 8007c26:	bf00      	nop
 8007c28:	e004      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e002      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <DMA_CheckFifoParam+0xe8>
      break;
 8007c32:	bf00      	nop
    }
  } 
  
  return status; 
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop

08007c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b089      	sub	sp, #36	; 0x24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	e16b      	b.n	8007f38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c60:	2201      	movs	r2, #1
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	4013      	ands	r3, r2
 8007c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	f040 815a 	bne.w	8007f32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d005      	beq.n	8007c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d130      	bne.n	8007cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	2203      	movs	r2, #3
 8007ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca6:	43db      	mvns	r3, r3
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	4013      	ands	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ccc:	2201      	movs	r2, #1
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	f003 0201 	and.w	r2, r3, #1
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d017      	beq.n	8007d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	2203      	movs	r2, #3
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	43db      	mvns	r3, r3
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f003 0303 	and.w	r3, r3, #3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d123      	bne.n	8007d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	08da      	lsrs	r2, r3, #3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3208      	adds	r2, #8
 8007d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	220f      	movs	r2, #15
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4013      	ands	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	08da      	lsrs	r2, r3, #3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3208      	adds	r2, #8
 8007d82:	69b9      	ldr	r1, [r7, #24]
 8007d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	2203      	movs	r2, #3
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	43db      	mvns	r3, r3
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f003 0203 	and.w	r2, r3, #3
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 80b4 	beq.w	8007f32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	4b60      	ldr	r3, [pc, #384]	; (8007f50 <HAL_GPIO_Init+0x30c>)
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd2:	4a5f      	ldr	r2, [pc, #380]	; (8007f50 <HAL_GPIO_Init+0x30c>)
 8007dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8007dda:	4b5d      	ldr	r3, [pc, #372]	; (8007f50 <HAL_GPIO_Init+0x30c>)
 8007ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007de6:	4a5b      	ldr	r2, [pc, #364]	; (8007f54 <HAL_GPIO_Init+0x310>)
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	089b      	lsrs	r3, r3, #2
 8007dec:	3302      	adds	r3, #2
 8007dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	220f      	movs	r2, #15
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	43db      	mvns	r3, r3
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	4013      	ands	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a52      	ldr	r2, [pc, #328]	; (8007f58 <HAL_GPIO_Init+0x314>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d02b      	beq.n	8007e6a <HAL_GPIO_Init+0x226>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a51      	ldr	r2, [pc, #324]	; (8007f5c <HAL_GPIO_Init+0x318>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d025      	beq.n	8007e66 <HAL_GPIO_Init+0x222>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a50      	ldr	r2, [pc, #320]	; (8007f60 <HAL_GPIO_Init+0x31c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d01f      	beq.n	8007e62 <HAL_GPIO_Init+0x21e>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a4f      	ldr	r2, [pc, #316]	; (8007f64 <HAL_GPIO_Init+0x320>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d019      	beq.n	8007e5e <HAL_GPIO_Init+0x21a>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a4e      	ldr	r2, [pc, #312]	; (8007f68 <HAL_GPIO_Init+0x324>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d013      	beq.n	8007e5a <HAL_GPIO_Init+0x216>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a4d      	ldr	r2, [pc, #308]	; (8007f6c <HAL_GPIO_Init+0x328>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00d      	beq.n	8007e56 <HAL_GPIO_Init+0x212>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a4c      	ldr	r2, [pc, #304]	; (8007f70 <HAL_GPIO_Init+0x32c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d007      	beq.n	8007e52 <HAL_GPIO_Init+0x20e>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a4b      	ldr	r2, [pc, #300]	; (8007f74 <HAL_GPIO_Init+0x330>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d101      	bne.n	8007e4e <HAL_GPIO_Init+0x20a>
 8007e4a:	2307      	movs	r3, #7
 8007e4c:	e00e      	b.n	8007e6c <HAL_GPIO_Init+0x228>
 8007e4e:	2308      	movs	r3, #8
 8007e50:	e00c      	b.n	8007e6c <HAL_GPIO_Init+0x228>
 8007e52:	2306      	movs	r3, #6
 8007e54:	e00a      	b.n	8007e6c <HAL_GPIO_Init+0x228>
 8007e56:	2305      	movs	r3, #5
 8007e58:	e008      	b.n	8007e6c <HAL_GPIO_Init+0x228>
 8007e5a:	2304      	movs	r3, #4
 8007e5c:	e006      	b.n	8007e6c <HAL_GPIO_Init+0x228>
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e004      	b.n	8007e6c <HAL_GPIO_Init+0x228>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e002      	b.n	8007e6c <HAL_GPIO_Init+0x228>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <HAL_GPIO_Init+0x228>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	f002 0203 	and.w	r2, r2, #3
 8007e72:	0092      	lsls	r2, r2, #2
 8007e74:	4093      	lsls	r3, r2
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e7c:	4935      	ldr	r1, [pc, #212]	; (8007f54 <HAL_GPIO_Init+0x310>)
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	089b      	lsrs	r3, r3, #2
 8007e82:	3302      	adds	r3, #2
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e8a:	4b3b      	ldr	r3, [pc, #236]	; (8007f78 <HAL_GPIO_Init+0x334>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	43db      	mvns	r3, r3
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4013      	ands	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007eae:	4a32      	ldr	r2, [pc, #200]	; (8007f78 <HAL_GPIO_Init+0x334>)
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007eb4:	4b30      	ldr	r3, [pc, #192]	; (8007f78 <HAL_GPIO_Init+0x334>)
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ed8:	4a27      	ldr	r2, [pc, #156]	; (8007f78 <HAL_GPIO_Init+0x334>)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ede:	4b26      	ldr	r3, [pc, #152]	; (8007f78 <HAL_GPIO_Init+0x334>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	43db      	mvns	r3, r3
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	4013      	ands	r3, r2
 8007eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f02:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <HAL_GPIO_Init+0x334>)
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f08:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <HAL_GPIO_Init+0x334>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	43db      	mvns	r3, r3
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	4013      	ands	r3, r2
 8007f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f2c:	4a12      	ldr	r2, [pc, #72]	; (8007f78 <HAL_GPIO_Init+0x334>)
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	3301      	adds	r3, #1
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	2b0f      	cmp	r3, #15
 8007f3c:	f67f ae90 	bls.w	8007c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	3724      	adds	r7, #36	; 0x24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	40023800 	.word	0x40023800
 8007f54:	40013800 	.word	0x40013800
 8007f58:	40020000 	.word	0x40020000
 8007f5c:	40020400 	.word	0x40020400
 8007f60:	40020800 	.word	0x40020800
 8007f64:	40020c00 	.word	0x40020c00
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	40021400 	.word	0x40021400
 8007f70:	40021800 	.word	0x40021800
 8007f74:	40021c00 	.word	0x40021c00
 8007f78:	40013c00 	.word	0x40013c00

08007f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	887b      	ldrh	r3, [r7, #2]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
 8007f98:	e001      	b.n	8007f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	807b      	strh	r3, [r7, #2]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fbc:	787b      	ldrb	r3, [r7, #1]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fc2:	887a      	ldrh	r2, [r7, #2]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fc8:	e003      	b.n	8007fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fca:	887b      	ldrh	r3, [r7, #2]
 8007fcc:	041a      	lsls	r2, r3, #16
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	619a      	str	r2, [r3, #24]
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e12b      	b.n	800824a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fd f82c 	bl	8005064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2224      	movs	r2, #36	; 0x24
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0201 	bic.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008044:	f001 fbfc 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 8008048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4a81      	ldr	r2, [pc, #516]	; (8008254 <HAL_I2C_Init+0x274>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d807      	bhi.n	8008064 <HAL_I2C_Init+0x84>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4a80      	ldr	r2, [pc, #512]	; (8008258 <HAL_I2C_Init+0x278>)
 8008058:	4293      	cmp	r3, r2
 800805a:	bf94      	ite	ls
 800805c:	2301      	movls	r3, #1
 800805e:	2300      	movhi	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	e006      	b.n	8008072 <HAL_I2C_Init+0x92>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a7d      	ldr	r2, [pc, #500]	; (800825c <HAL_I2C_Init+0x27c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	bf94      	ite	ls
 800806c:	2301      	movls	r3, #1
 800806e:	2300      	movhi	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e0e7      	b.n	800824a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4a78      	ldr	r2, [pc, #480]	; (8008260 <HAL_I2C_Init+0x280>)
 800807e:	fba2 2303 	umull	r2, r3, r2, r3
 8008082:	0c9b      	lsrs	r3, r3, #18
 8008084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a6a      	ldr	r2, [pc, #424]	; (8008254 <HAL_I2C_Init+0x274>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d802      	bhi.n	80080b4 <HAL_I2C_Init+0xd4>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	3301      	adds	r3, #1
 80080b2:	e009      	b.n	80080c8 <HAL_I2C_Init+0xe8>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	4a69      	ldr	r2, [pc, #420]	; (8008264 <HAL_I2C_Init+0x284>)
 80080c0:	fba2 2303 	umull	r2, r3, r2, r3
 80080c4:	099b      	lsrs	r3, r3, #6
 80080c6:	3301      	adds	r3, #1
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6812      	ldr	r2, [r2, #0]
 80080cc:	430b      	orrs	r3, r1
 80080ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80080da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	495c      	ldr	r1, [pc, #368]	; (8008254 <HAL_I2C_Init+0x274>)
 80080e4:	428b      	cmp	r3, r1
 80080e6:	d819      	bhi.n	800811c <HAL_I2C_Init+0x13c>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	1e59      	subs	r1, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80080f6:	1c59      	adds	r1, r3, #1
 80080f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080fc:	400b      	ands	r3, r1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <HAL_I2C_Init+0x138>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1e59      	subs	r1, r3, #1
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008110:	3301      	adds	r3, #1
 8008112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008116:	e051      	b.n	80081bc <HAL_I2C_Init+0x1dc>
 8008118:	2304      	movs	r3, #4
 800811a:	e04f      	b.n	80081bc <HAL_I2C_Init+0x1dc>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d111      	bne.n	8008148 <HAL_I2C_Init+0x168>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	1e58      	subs	r0, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6859      	ldr	r1, [r3, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	440b      	add	r3, r1
 8008132:	fbb0 f3f3 	udiv	r3, r0, r3
 8008136:	3301      	adds	r3, #1
 8008138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800813c:	2b00      	cmp	r3, #0
 800813e:	bf0c      	ite	eq
 8008140:	2301      	moveq	r3, #1
 8008142:	2300      	movne	r3, #0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	e012      	b.n	800816e <HAL_I2C_Init+0x18e>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	1e58      	subs	r0, r3, #1
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6859      	ldr	r1, [r3, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	0099      	lsls	r1, r3, #2
 8008158:	440b      	add	r3, r1
 800815a:	fbb0 f3f3 	udiv	r3, r0, r3
 800815e:	3301      	adds	r3, #1
 8008160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008164:	2b00      	cmp	r3, #0
 8008166:	bf0c      	ite	eq
 8008168:	2301      	moveq	r3, #1
 800816a:	2300      	movne	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <HAL_I2C_Init+0x196>
 8008172:	2301      	movs	r3, #1
 8008174:	e022      	b.n	80081bc <HAL_I2C_Init+0x1dc>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10e      	bne.n	800819c <HAL_I2C_Init+0x1bc>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1e58      	subs	r0, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6859      	ldr	r1, [r3, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	440b      	add	r3, r1
 800818c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008190:	3301      	adds	r3, #1
 8008192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819a:	e00f      	b.n	80081bc <HAL_I2C_Init+0x1dc>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	1e58      	subs	r0, r3, #1
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6859      	ldr	r1, [r3, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	0099      	lsls	r1, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80081b2:	3301      	adds	r3, #1
 80081b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	6809      	ldr	r1, [r1, #0]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69da      	ldr	r2, [r3, #28]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6911      	ldr	r1, [r2, #16]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	68d2      	ldr	r2, [r2, #12]
 80081f6:	4311      	orrs	r1, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695a      	ldr	r2, [r3, #20]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0201 	orr.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	000186a0 	.word	0x000186a0
 8008258:	001e847f 	.word	0x001e847f
 800825c:	003d08ff 	.word	0x003d08ff
 8008260:	431bde83 	.word	0x431bde83
 8008264:	10624dd3 	.word	0x10624dd3

08008268 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	4608      	mov	r0, r1
 8008272:	4611      	mov	r1, r2
 8008274:	461a      	mov	r2, r3
 8008276:	4603      	mov	r3, r0
 8008278:	817b      	strh	r3, [r7, #10]
 800827a:	460b      	mov	r3, r1
 800827c:	813b      	strh	r3, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008282:	f7fe fb89 	bl	8006998 <HAL_GetTick>
 8008286:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b20      	cmp	r3, #32
 8008292:	f040 80d9 	bne.w	8008448 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	2319      	movs	r3, #25
 800829c:	2201      	movs	r2, #1
 800829e:	496d      	ldr	r1, [pc, #436]	; (8008454 <HAL_I2C_Mem_Write+0x1ec>)
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fc7f 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80082ac:	2302      	movs	r3, #2
 80082ae:	e0cc      	b.n	800844a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d101      	bne.n	80082be <HAL_I2C_Mem_Write+0x56>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e0c5      	b.n	800844a <HAL_I2C_Mem_Write+0x1e2>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d007      	beq.n	80082e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2221      	movs	r2, #33	; 0x21
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2240      	movs	r2, #64	; 0x40
 8008300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a3a      	ldr	r2, [r7, #32]
 800830e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831a:	b29a      	uxth	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4a4d      	ldr	r2, [pc, #308]	; (8008458 <HAL_I2C_Mem_Write+0x1f0>)
 8008324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008326:	88f8      	ldrh	r0, [r7, #6]
 8008328:	893a      	ldrh	r2, [r7, #8]
 800832a:	8979      	ldrh	r1, [r7, #10]
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	4603      	mov	r3, r0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 fab6 	bl	80088a8 <I2C_RequestMemoryWrite>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d052      	beq.n	80083e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e081      	b.n	800844a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 fd00 	bl	8008d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00d      	beq.n	8008372 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	2b04      	cmp	r3, #4
 800835c:	d107      	bne.n	800836e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e06b      	b.n	800844a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d11b      	bne.n	80083e8 <HAL_I2C_Mem_Write+0x180>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d017      	beq.n	80083e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	781a      	ldrb	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1aa      	bne.n	8008346 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fcec 	bl	8008dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00d      	beq.n	800841c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	2b04      	cmp	r3, #4
 8008406:	d107      	bne.n	8008418 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008416:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e016      	b.n	800844a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800842a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008448:	2302      	movs	r3, #2
  }
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	00100002 	.word	0x00100002
 8008458:	ffff0000 	.word	0xffff0000

0800845c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08c      	sub	sp, #48	; 0x30
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	461a      	mov	r2, r3
 800846a:	4603      	mov	r3, r0
 800846c:	817b      	strh	r3, [r7, #10]
 800846e:	460b      	mov	r3, r1
 8008470:	813b      	strh	r3, [r7, #8]
 8008472:	4613      	mov	r3, r2
 8008474:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008476:	f7fe fa8f 	bl	8006998 <HAL_GetTick>
 800847a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b20      	cmp	r3, #32
 8008486:	f040 8208 	bne.w	800889a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	2319      	movs	r3, #25
 8008490:	2201      	movs	r2, #1
 8008492:	497b      	ldr	r1, [pc, #492]	; (8008680 <HAL_I2C_Mem_Read+0x224>)
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fb85 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80084a0:	2302      	movs	r3, #2
 80084a2:	e1fb      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_I2C_Mem_Read+0x56>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e1f4      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d007      	beq.n	80084d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0201 	orr.w	r2, r2, #1
 80084d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2222      	movs	r2, #34	; 0x22
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2240      	movs	r2, #64	; 0x40
 80084f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008508:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4a5b      	ldr	r2, [pc, #364]	; (8008684 <HAL_I2C_Mem_Read+0x228>)
 8008518:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800851a:	88f8      	ldrh	r0, [r7, #6]
 800851c:	893a      	ldrh	r2, [r7, #8]
 800851e:	8979      	ldrh	r1, [r7, #10]
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4603      	mov	r3, r0
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fa52 	bl	80089d4 <I2C_RequestMemoryRead>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e1b0      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d113      	bne.n	800856a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008542:	2300      	movs	r3, #0
 8008544:	623b      	str	r3, [r7, #32]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	623b      	str	r3, [r7, #32]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	623b      	str	r3, [r7, #32]
 8008556:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	e184      	b.n	8008874 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800856e:	2b01      	cmp	r3, #1
 8008570:	d11b      	bne.n	80085aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	e164      	b.n	8008874 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d11b      	bne.n	80085ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085d2:	2300      	movs	r3, #0
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	61bb      	str	r3, [r7, #24]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	e144      	b.n	8008874 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008600:	e138      	b.n	8008874 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008606:	2b03      	cmp	r3, #3
 8008608:	f200 80f1 	bhi.w	80087ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008610:	2b01      	cmp	r3, #1
 8008612:	d123      	bne.n	800865c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fc1b 	bl	8008e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e139      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691a      	ldr	r2, [r3, #16]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	b2d2      	uxtb	r2, r2
 8008634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008650:	b29b      	uxth	r3, r3
 8008652:	3b01      	subs	r3, #1
 8008654:	b29a      	uxth	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	855a      	strh	r2, [r3, #42]	; 0x2a
 800865a:	e10b      	b.n	8008874 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008660:	2b02      	cmp	r3, #2
 8008662:	d14e      	bne.n	8008702 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	2200      	movs	r2, #0
 800866c:	4906      	ldr	r1, [pc, #24]	; (8008688 <HAL_I2C_Mem_Read+0x22c>)
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 fa98 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d008      	beq.n	800868c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e10e      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
 800867e:	bf00      	nop
 8008680:	00100002 	.word	0x00100002
 8008684:	ffff0000 	.word	0xffff0000
 8008688:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800869a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691a      	ldr	r2, [r3, #16]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008700:	e0b8      	b.n	8008874 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	2200      	movs	r2, #0
 800870a:	4966      	ldr	r1, [pc, #408]	; (80088a4 <HAL_I2C_Mem_Read+0x448>)
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fa49 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e0bf      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800872a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691a      	ldr	r2, [r3, #16]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	2200      	movs	r2, #0
 8008766:	494f      	ldr	r1, [pc, #316]	; (80088a4 <HAL_I2C_Mem_Read+0x448>)
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 fa1b 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e091      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691a      	ldr	r2, [r3, #16]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	b2d2      	uxtb	r2, r2
 80087c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b29a      	uxth	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	3b01      	subs	r3, #1
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087ec:	e042      	b.n	8008874 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fb2e 	bl	8008e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e04c      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	f003 0304 	and.w	r3, r3, #4
 800883e:	2b04      	cmp	r3, #4
 8008840:	d118      	bne.n	8008874 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691a      	ldr	r2, [r3, #16]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	b2d2      	uxtb	r2, r2
 800884e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800885e:	3b01      	subs	r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008878:	2b00      	cmp	r3, #0
 800887a:	f47f aec2 	bne.w	8008602 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	e000      	b.n	800889c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800889a:	2302      	movs	r3, #2
  }
}
 800889c:	4618      	mov	r0, r3
 800889e:	3728      	adds	r7, #40	; 0x28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	00010004 	.word	0x00010004

080088a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	4608      	mov	r0, r1
 80088b2:	4611      	mov	r1, r2
 80088b4:	461a      	mov	r2, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	817b      	strh	r3, [r7, #10]
 80088ba:	460b      	mov	r3, r1
 80088bc:	813b      	strh	r3, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	2200      	movs	r2, #0
 80088da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f960 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00d      	beq.n	8008906 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f8:	d103      	bne.n	8008902 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008900:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e05f      	b.n	80089c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008906:	897b      	ldrh	r3, [r7, #10]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008914:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	6a3a      	ldr	r2, [r7, #32]
 800891a:	492d      	ldr	r1, [pc, #180]	; (80089d0 <I2C_RequestMemoryWrite+0x128>)
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f998 	bl	8008c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e04c      	b.n	80089c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800892c:	2300      	movs	r3, #0
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008944:	6a39      	ldr	r1, [r7, #32]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fa02 	bl	8008d50 <I2C_WaitOnTXEFlagUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00d      	beq.n	800896e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	2b04      	cmp	r3, #4
 8008958:	d107      	bne.n	800896a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008968:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e02b      	b.n	80089c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d105      	bne.n	8008980 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008974:	893b      	ldrh	r3, [r7, #8]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	611a      	str	r2, [r3, #16]
 800897e:	e021      	b.n	80089c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008980:	893b      	ldrh	r3, [r7, #8]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	b29b      	uxth	r3, r3
 8008986:	b2da      	uxtb	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800898e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008990:	6a39      	ldr	r1, [r7, #32]
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 f9dc 	bl	8008d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00d      	beq.n	80089ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d107      	bne.n	80089b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e005      	b.n	80089c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089ba:	893b      	ldrh	r3, [r7, #8]
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	00010002 	.word	0x00010002

080089d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af02      	add	r7, sp, #8
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	4608      	mov	r0, r1
 80089de:	4611      	mov	r1, r2
 80089e0:	461a      	mov	r2, r3
 80089e2:	4603      	mov	r3, r0
 80089e4:	817b      	strh	r3, [r7, #10]
 80089e6:	460b      	mov	r3, r1
 80089e8:	813b      	strh	r3, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f8c2 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00d      	beq.n	8008a42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a34:	d103      	bne.n	8008a3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e0aa      	b.n	8008b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a42:	897b      	ldrh	r3, [r7, #10]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	6a3a      	ldr	r2, [r7, #32]
 8008a56:	4952      	ldr	r1, [pc, #328]	; (8008ba0 <I2C_RequestMemoryRead+0x1cc>)
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f8fa 	bl	8008c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e097      	b.n	8008b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a80:	6a39      	ldr	r1, [r7, #32]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f964 	bl	8008d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00d      	beq.n	8008aaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	d107      	bne.n	8008aa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e076      	b.n	8008b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d105      	bne.n	8008abc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ab0:	893b      	ldrh	r3, [r7, #8]
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	611a      	str	r2, [r3, #16]
 8008aba:	e021      	b.n	8008b00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008abc:	893b      	ldrh	r3, [r7, #8]
 8008abe:	0a1b      	lsrs	r3, r3, #8
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008acc:	6a39      	ldr	r1, [r7, #32]
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 f93e 	bl	8008d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00d      	beq.n	8008af6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d107      	bne.n	8008af2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e050      	b.n	8008b98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008af6:	893b      	ldrh	r3, [r7, #8]
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b02:	6a39      	ldr	r1, [r7, #32]
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f923 	bl	8008d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00d      	beq.n	8008b2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	d107      	bne.n	8008b28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e035      	b.n	8008b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f82b 	bl	8008ba4 <I2C_WaitOnFlagUntilTimeout>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00d      	beq.n	8008b70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b62:	d103      	bne.n	8008b6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e013      	b.n	8008b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008b70:	897b      	ldrh	r3, [r7, #10]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f043 0301 	orr.w	r3, r3, #1
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	6a3a      	ldr	r2, [r7, #32]
 8008b84:	4906      	ldr	r1, [pc, #24]	; (8008ba0 <I2C_RequestMemoryRead+0x1cc>)
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 f863 	bl	8008c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e000      	b.n	8008b98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	00010002 	.word	0x00010002

08008ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bb4:	e025      	b.n	8008c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbc:	d021      	beq.n	8008c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bbe:	f7fd feeb 	bl	8006998 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d302      	bcc.n	8008bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d116      	bne.n	8008c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	f043 0220 	orr.w	r2, r3, #32
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e023      	b.n	8008c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	0c1b      	lsrs	r3, r3, #16
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d10d      	bne.n	8008c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	43da      	mvns	r2, r3
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	4013      	ands	r3, r2
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bf0c      	ite	eq
 8008c1e:	2301      	moveq	r3, #1
 8008c20:	2300      	movne	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	e00c      	b.n	8008c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	43da      	mvns	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4013      	ands	r3, r2
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bf0c      	ite	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	2300      	movne	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d0b6      	beq.n	8008bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
 8008c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c60:	e051      	b.n	8008d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c70:	d123      	bne.n	8008cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	f043 0204 	orr.w	r2, r3, #4
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e046      	b.n	8008d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d021      	beq.n	8008d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc2:	f7fd fe69 	bl	8006998 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d116      	bne.n	8008d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	f043 0220 	orr.w	r2, r3, #32
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e020      	b.n	8008d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	0c1b      	lsrs	r3, r3, #16
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d10c      	bne.n	8008d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	43da      	mvns	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bf14      	ite	ne
 8008d22:	2301      	movne	r3, #1
 8008d24:	2300      	moveq	r3, #0
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	e00b      	b.n	8008d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	43da      	mvns	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	4013      	ands	r3, r2
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	bf14      	ite	ne
 8008d3c:	2301      	movne	r3, #1
 8008d3e:	2300      	moveq	r3, #0
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d18d      	bne.n	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d5c:	e02d      	b.n	8008dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f8ce 	bl	8008f00 <I2C_IsAcknowledgeFailed>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e02d      	b.n	8008dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d74:	d021      	beq.n	8008dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d76:	f7fd fe0f 	bl	8006998 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d302      	bcc.n	8008d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d116      	bne.n	8008dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da6:	f043 0220 	orr.w	r2, r3, #32
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e007      	b.n	8008dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc4:	2b80      	cmp	r3, #128	; 0x80
 8008dc6:	d1ca      	bne.n	8008d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008dde:	e02d      	b.n	8008e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f88d 	bl	8008f00 <I2C_IsAcknowledgeFailed>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e02d      	b.n	8008e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d021      	beq.n	8008e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008df8:	f7fd fdce 	bl	8006998 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d302      	bcc.n	8008e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d116      	bne.n	8008e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e28:	f043 0220 	orr.w	r2, r3, #32
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e007      	b.n	8008e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d1ca      	bne.n	8008de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e60:	e042      	b.n	8008ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b10      	cmp	r3, #16
 8008e6e:	d119      	bne.n	8008ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f06f 0210 	mvn.w	r2, #16
 8008e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e029      	b.n	8008ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ea4:	f7fd fd78 	bl	8006998 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d302      	bcc.n	8008eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d116      	bne.n	8008ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	f043 0220 	orr.w	r2, r3, #32
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e007      	b.n	8008ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef2:	2b40      	cmp	r3, #64	; 0x40
 8008ef4:	d1b5      	bne.n	8008e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f16:	d11b      	bne.n	8008f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3c:	f043 0204 	orr.w	r2, r3, #4
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e000      	b.n	8008f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
	...

08008f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e267      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d075      	beq.n	800906a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f7e:	4b88      	ldr	r3, [pc, #544]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 030c 	and.w	r3, r3, #12
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d00c      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f8a:	4b85      	ldr	r3, [pc, #532]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008f92:	2b08      	cmp	r3, #8
 8008f94:	d112      	bne.n	8008fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f96:	4b82      	ldr	r3, [pc, #520]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fa2:	d10b      	bne.n	8008fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fa4:	4b7e      	ldr	r3, [pc, #504]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d05b      	beq.n	8009068 <HAL_RCC_OscConfig+0x108>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d157      	bne.n	8009068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e242      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc4:	d106      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x74>
 8008fc6:	4b76      	ldr	r3, [pc, #472]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a75      	ldr	r2, [pc, #468]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	e01d      	b.n	8009010 <HAL_RCC_OscConfig+0xb0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fdc:	d10c      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x98>
 8008fde:	4b70      	ldr	r3, [pc, #448]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a6f      	ldr	r2, [pc, #444]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	4b6d      	ldr	r3, [pc, #436]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a6c      	ldr	r2, [pc, #432]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	e00b      	b.n	8009010 <HAL_RCC_OscConfig+0xb0>
 8008ff8:	4b69      	ldr	r3, [pc, #420]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a68      	ldr	r2, [pc, #416]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8008ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	4b66      	ldr	r3, [pc, #408]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a65      	ldr	r2, [pc, #404]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 800900a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800900e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d013      	beq.n	8009040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009018:	f7fd fcbe 	bl	8006998 <HAL_GetTick>
 800901c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800901e:	e008      	b.n	8009032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009020:	f7fd fcba 	bl	8006998 <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	2b64      	cmp	r3, #100	; 0x64
 800902c:	d901      	bls.n	8009032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e207      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009032:	4b5b      	ldr	r3, [pc, #364]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0f0      	beq.n	8009020 <HAL_RCC_OscConfig+0xc0>
 800903e:	e014      	b.n	800906a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009040:	f7fd fcaa 	bl	8006998 <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009048:	f7fd fca6 	bl	8006998 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b64      	cmp	r3, #100	; 0x64
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e1f3      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800905a:	4b51      	ldr	r3, [pc, #324]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f0      	bne.n	8009048 <HAL_RCC_OscConfig+0xe8>
 8009066:	e000      	b.n	800906a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d063      	beq.n	800913e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009076:	4b4a      	ldr	r3, [pc, #296]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 030c 	and.w	r3, r3, #12
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009082:	4b47      	ldr	r3, [pc, #284]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800908a:	2b08      	cmp	r3, #8
 800908c:	d11c      	bne.n	80090c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800908e:	4b44      	ldr	r3, [pc, #272]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d116      	bne.n	80090c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800909a:	4b41      	ldr	r3, [pc, #260]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d005      	beq.n	80090b2 <HAL_RCC_OscConfig+0x152>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d001      	beq.n	80090b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e1c7      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090b2:	4b3b      	ldr	r3, [pc, #236]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	4937      	ldr	r1, [pc, #220]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090c6:	e03a      	b.n	800913e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d020      	beq.n	8009112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090d0:	4b34      	ldr	r3, [pc, #208]	; (80091a4 <HAL_RCC_OscConfig+0x244>)
 80090d2:	2201      	movs	r2, #1
 80090d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d6:	f7fd fc5f 	bl	8006998 <HAL_GetTick>
 80090da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090dc:	e008      	b.n	80090f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090de:	f7fd fc5b 	bl	8006998 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d901      	bls.n	80090f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e1a8      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090f0:	4b2b      	ldr	r3, [pc, #172]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0f0      	beq.n	80090de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090fc:	4b28      	ldr	r3, [pc, #160]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	4925      	ldr	r1, [pc, #148]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 800910c:	4313      	orrs	r3, r2
 800910e:	600b      	str	r3, [r1, #0]
 8009110:	e015      	b.n	800913e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009112:	4b24      	ldr	r3, [pc, #144]	; (80091a4 <HAL_RCC_OscConfig+0x244>)
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009118:	f7fd fc3e 	bl	8006998 <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009120:	f7fd fc3a 	bl	8006998 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e187      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009132:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f0      	bne.n	8009120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0308 	and.w	r3, r3, #8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d036      	beq.n	80091b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d016      	beq.n	8009180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009152:	4b15      	ldr	r3, [pc, #84]	; (80091a8 <HAL_RCC_OscConfig+0x248>)
 8009154:	2201      	movs	r2, #1
 8009156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009158:	f7fd fc1e 	bl	8006998 <HAL_GetTick>
 800915c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800915e:	e008      	b.n	8009172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009160:	f7fd fc1a 	bl	8006998 <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	2b02      	cmp	r3, #2
 800916c:	d901      	bls.n	8009172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e167      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <HAL_RCC_OscConfig+0x240>)
 8009174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0f0      	beq.n	8009160 <HAL_RCC_OscConfig+0x200>
 800917e:	e01b      	b.n	80091b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009180:	4b09      	ldr	r3, [pc, #36]	; (80091a8 <HAL_RCC_OscConfig+0x248>)
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009186:	f7fd fc07 	bl	8006998 <HAL_GetTick>
 800918a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800918c:	e00e      	b.n	80091ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800918e:	f7fd fc03 	bl	8006998 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b02      	cmp	r3, #2
 800919a:	d907      	bls.n	80091ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e150      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
 80091a0:	40023800 	.word	0x40023800
 80091a4:	42470000 	.word	0x42470000
 80091a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091ac:	4b88      	ldr	r3, [pc, #544]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80091ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1ea      	bne.n	800918e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 8097 	beq.w	80092f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091c6:	2300      	movs	r3, #0
 80091c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091ca:	4b81      	ldr	r3, [pc, #516]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10f      	bne.n	80091f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d6:	2300      	movs	r3, #0
 80091d8:	60bb      	str	r3, [r7, #8]
 80091da:	4b7d      	ldr	r3, [pc, #500]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	4a7c      	ldr	r2, [pc, #496]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80091e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e4:	6413      	str	r3, [r2, #64]	; 0x40
 80091e6:	4b7a      	ldr	r3, [pc, #488]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091f2:	2301      	movs	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091f6:	4b77      	ldr	r3, [pc, #476]	; (80093d4 <HAL_RCC_OscConfig+0x474>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d118      	bne.n	8009234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009202:	4b74      	ldr	r3, [pc, #464]	; (80093d4 <HAL_RCC_OscConfig+0x474>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a73      	ldr	r2, [pc, #460]	; (80093d4 <HAL_RCC_OscConfig+0x474>)
 8009208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800920c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800920e:	f7fd fbc3 	bl	8006998 <HAL_GetTick>
 8009212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009214:	e008      	b.n	8009228 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009216:	f7fd fbbf 	bl	8006998 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	2b02      	cmp	r3, #2
 8009222:	d901      	bls.n	8009228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e10c      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009228:	4b6a      	ldr	r3, [pc, #424]	; (80093d4 <HAL_RCC_OscConfig+0x474>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009230:	2b00      	cmp	r3, #0
 8009232:	d0f0      	beq.n	8009216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d106      	bne.n	800924a <HAL_RCC_OscConfig+0x2ea>
 800923c:	4b64      	ldr	r3, [pc, #400]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 800923e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009240:	4a63      	ldr	r2, [pc, #396]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009242:	f043 0301 	orr.w	r3, r3, #1
 8009246:	6713      	str	r3, [r2, #112]	; 0x70
 8009248:	e01c      	b.n	8009284 <HAL_RCC_OscConfig+0x324>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	2b05      	cmp	r3, #5
 8009250:	d10c      	bne.n	800926c <HAL_RCC_OscConfig+0x30c>
 8009252:	4b5f      	ldr	r3, [pc, #380]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009256:	4a5e      	ldr	r2, [pc, #376]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009258:	f043 0304 	orr.w	r3, r3, #4
 800925c:	6713      	str	r3, [r2, #112]	; 0x70
 800925e:	4b5c      	ldr	r3, [pc, #368]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009262:	4a5b      	ldr	r2, [pc, #364]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009264:	f043 0301 	orr.w	r3, r3, #1
 8009268:	6713      	str	r3, [r2, #112]	; 0x70
 800926a:	e00b      	b.n	8009284 <HAL_RCC_OscConfig+0x324>
 800926c:	4b58      	ldr	r3, [pc, #352]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 800926e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009270:	4a57      	ldr	r2, [pc, #348]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009272:	f023 0301 	bic.w	r3, r3, #1
 8009276:	6713      	str	r3, [r2, #112]	; 0x70
 8009278:	4b55      	ldr	r3, [pc, #340]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 800927a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927c:	4a54      	ldr	r2, [pc, #336]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 800927e:	f023 0304 	bic.w	r3, r3, #4
 8009282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d015      	beq.n	80092b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800928c:	f7fd fb84 	bl	8006998 <HAL_GetTick>
 8009290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009292:	e00a      	b.n	80092aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009294:	f7fd fb80 	bl	8006998 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d901      	bls.n	80092aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e0cb      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092aa:	4b49      	ldr	r3, [pc, #292]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80092ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0ee      	beq.n	8009294 <HAL_RCC_OscConfig+0x334>
 80092b6:	e014      	b.n	80092e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092b8:	f7fd fb6e 	bl	8006998 <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092be:	e00a      	b.n	80092d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092c0:	f7fd fb6a 	bl	8006998 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d901      	bls.n	80092d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e0b5      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092d6:	4b3e      	ldr	r3, [pc, #248]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80092d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1ee      	bne.n	80092c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d105      	bne.n	80092f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092e8:	4b39      	ldr	r3, [pc, #228]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80092ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ec:	4a38      	ldr	r2, [pc, #224]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80092ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80a1 	beq.w	8009440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092fe:	4b34      	ldr	r3, [pc, #208]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f003 030c 	and.w	r3, r3, #12
 8009306:	2b08      	cmp	r3, #8
 8009308:	d05c      	beq.n	80093c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d141      	bne.n	8009396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009312:	4b31      	ldr	r3, [pc, #196]	; (80093d8 <HAL_RCC_OscConfig+0x478>)
 8009314:	2200      	movs	r2, #0
 8009316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009318:	f7fd fb3e 	bl	8006998 <HAL_GetTick>
 800931c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800931e:	e008      	b.n	8009332 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009320:	f7fd fb3a 	bl	8006998 <HAL_GetTick>
 8009324:	4602      	mov	r2, r0
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	2b02      	cmp	r3, #2
 800932c:	d901      	bls.n	8009332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e087      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009332:	4b27      	ldr	r3, [pc, #156]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1f0      	bne.n	8009320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69da      	ldr	r2, [r3, #28]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	431a      	orrs	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	019b      	lsls	r3, r3, #6
 800934e:	431a      	orrs	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009354:	085b      	lsrs	r3, r3, #1
 8009356:	3b01      	subs	r3, #1
 8009358:	041b      	lsls	r3, r3, #16
 800935a:	431a      	orrs	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	061b      	lsls	r3, r3, #24
 8009362:	491b      	ldr	r1, [pc, #108]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 8009364:	4313      	orrs	r3, r2
 8009366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009368:	4b1b      	ldr	r3, [pc, #108]	; (80093d8 <HAL_RCC_OscConfig+0x478>)
 800936a:	2201      	movs	r2, #1
 800936c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800936e:	f7fd fb13 	bl	8006998 <HAL_GetTick>
 8009372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009374:	e008      	b.n	8009388 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009376:	f7fd fb0f 	bl	8006998 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d901      	bls.n	8009388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e05c      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009388:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0f0      	beq.n	8009376 <HAL_RCC_OscConfig+0x416>
 8009394:	e054      	b.n	8009440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009396:	4b10      	ldr	r3, [pc, #64]	; (80093d8 <HAL_RCC_OscConfig+0x478>)
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800939c:	f7fd fafc 	bl	8006998 <HAL_GetTick>
 80093a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093a2:	e008      	b.n	80093b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093a4:	f7fd faf8 	bl	8006998 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d901      	bls.n	80093b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e045      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093b6:	4b06      	ldr	r3, [pc, #24]	; (80093d0 <HAL_RCC_OscConfig+0x470>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f0      	bne.n	80093a4 <HAL_RCC_OscConfig+0x444>
 80093c2:	e03d      	b.n	8009440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d107      	bne.n	80093dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e038      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
 80093d0:	40023800 	.word	0x40023800
 80093d4:	40007000 	.word	0x40007000
 80093d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80093dc:	4b1b      	ldr	r3, [pc, #108]	; (800944c <HAL_RCC_OscConfig+0x4ec>)
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d028      	beq.n	800943c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d121      	bne.n	800943c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009402:	429a      	cmp	r2, r3
 8009404:	d11a      	bne.n	800943c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800940c:	4013      	ands	r3, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009414:	4293      	cmp	r3, r2
 8009416:	d111      	bne.n	800943c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009422:	085b      	lsrs	r3, r3, #1
 8009424:	3b01      	subs	r3, #1
 8009426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009428:	429a      	cmp	r2, r3
 800942a:	d107      	bne.n	800943c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009438:	429a      	cmp	r2, r3
 800943a:	d001      	beq.n	8009440 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40023800 	.word	0x40023800

08009450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e0cc      	b.n	80095fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009464:	4b68      	ldr	r3, [pc, #416]	; (8009608 <HAL_RCC_ClockConfig+0x1b8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d90c      	bls.n	800948c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009472:	4b65      	ldr	r3, [pc, #404]	; (8009608 <HAL_RCC_ClockConfig+0x1b8>)
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800947a:	4b63      	ldr	r3, [pc, #396]	; (8009608 <HAL_RCC_ClockConfig+0x1b8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d001      	beq.n	800948c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e0b8      	b.n	80095fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d020      	beq.n	80094da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d005      	beq.n	80094b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094a4:	4b59      	ldr	r3, [pc, #356]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	4a58      	ldr	r2, [pc, #352]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80094aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80094ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094bc:	4b53      	ldr	r3, [pc, #332]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	4a52      	ldr	r2, [pc, #328]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80094c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094c8:	4b50      	ldr	r3, [pc, #320]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	494d      	ldr	r1, [pc, #308]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d044      	beq.n	8009570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d107      	bne.n	80094fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094ee:	4b47      	ldr	r3, [pc, #284]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d119      	bne.n	800952e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e07f      	b.n	80095fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	2b02      	cmp	r3, #2
 8009504:	d003      	beq.n	800950e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800950a:	2b03      	cmp	r3, #3
 800950c:	d107      	bne.n	800951e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800950e:	4b3f      	ldr	r3, [pc, #252]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e06f      	b.n	80095fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800951e:	4b3b      	ldr	r3, [pc, #236]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e067      	b.n	80095fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800952e:	4b37      	ldr	r3, [pc, #220]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f023 0203 	bic.w	r2, r3, #3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	4934      	ldr	r1, [pc, #208]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 800953c:	4313      	orrs	r3, r2
 800953e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009540:	f7fd fa2a 	bl	8006998 <HAL_GetTick>
 8009544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009546:	e00a      	b.n	800955e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009548:	f7fd fa26 	bl	8006998 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	f241 3288 	movw	r2, #5000	; 0x1388
 8009556:	4293      	cmp	r3, r2
 8009558:	d901      	bls.n	800955e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e04f      	b.n	80095fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800955e:	4b2b      	ldr	r3, [pc, #172]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f003 020c 	and.w	r2, r3, #12
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	429a      	cmp	r2, r3
 800956e:	d1eb      	bne.n	8009548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009570:	4b25      	ldr	r3, [pc, #148]	; (8009608 <HAL_RCC_ClockConfig+0x1b8>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0307 	and.w	r3, r3, #7
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d20c      	bcs.n	8009598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800957e:	4b22      	ldr	r3, [pc, #136]	; (8009608 <HAL_RCC_ClockConfig+0x1b8>)
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009586:	4b20      	ldr	r3, [pc, #128]	; (8009608 <HAL_RCC_ClockConfig+0x1b8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0307 	and.w	r3, r3, #7
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d001      	beq.n	8009598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e032      	b.n	80095fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d008      	beq.n	80095b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095a4:	4b19      	ldr	r3, [pc, #100]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	4916      	ldr	r1, [pc, #88]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0308 	and.w	r3, r3, #8
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d009      	beq.n	80095d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095c2:	4b12      	ldr	r3, [pc, #72]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	490e      	ldr	r1, [pc, #56]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80095d6:	f000 f821 	bl	800961c <HAL_RCC_GetSysClockFreq>
 80095da:	4602      	mov	r2, r0
 80095dc:	4b0b      	ldr	r3, [pc, #44]	; (800960c <HAL_RCC_ClockConfig+0x1bc>)
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	091b      	lsrs	r3, r3, #4
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	490a      	ldr	r1, [pc, #40]	; (8009610 <HAL_RCC_ClockConfig+0x1c0>)
 80095e8:	5ccb      	ldrb	r3, [r1, r3]
 80095ea:	fa22 f303 	lsr.w	r3, r2, r3
 80095ee:	4a09      	ldr	r2, [pc, #36]	; (8009614 <HAL_RCC_ClockConfig+0x1c4>)
 80095f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80095f2:	4b09      	ldr	r3, [pc, #36]	; (8009618 <HAL_RCC_ClockConfig+0x1c8>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fd f98a 	bl	8006910 <HAL_InitTick>

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	40023c00 	.word	0x40023c00
 800960c:	40023800 	.word	0x40023800
 8009610:	080e9af0 	.word	0x080e9af0
 8009614:	20000068 	.word	0x20000068
 8009618:	200000a4 	.word	0x200000a4

0800961c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800961c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009620:	b094      	sub	sp, #80	; 0x50
 8009622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	647b      	str	r3, [r7, #68]	; 0x44
 8009628:	2300      	movs	r3, #0
 800962a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800962c:	2300      	movs	r3, #0
 800962e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009634:	4b79      	ldr	r3, [pc, #484]	; (800981c <HAL_RCC_GetSysClockFreq+0x200>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f003 030c 	and.w	r3, r3, #12
 800963c:	2b08      	cmp	r3, #8
 800963e:	d00d      	beq.n	800965c <HAL_RCC_GetSysClockFreq+0x40>
 8009640:	2b08      	cmp	r3, #8
 8009642:	f200 80e1 	bhi.w	8009808 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <HAL_RCC_GetSysClockFreq+0x34>
 800964a:	2b04      	cmp	r3, #4
 800964c:	d003      	beq.n	8009656 <HAL_RCC_GetSysClockFreq+0x3a>
 800964e:	e0db      	b.n	8009808 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009650:	4b73      	ldr	r3, [pc, #460]	; (8009820 <HAL_RCC_GetSysClockFreq+0x204>)
 8009652:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009654:	e0db      	b.n	800980e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009656:	4b73      	ldr	r3, [pc, #460]	; (8009824 <HAL_RCC_GetSysClockFreq+0x208>)
 8009658:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800965a:	e0d8      	b.n	800980e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800965c:	4b6f      	ldr	r3, [pc, #444]	; (800981c <HAL_RCC_GetSysClockFreq+0x200>)
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009664:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009666:	4b6d      	ldr	r3, [pc, #436]	; (800981c <HAL_RCC_GetSysClockFreq+0x200>)
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d063      	beq.n	800973a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009672:	4b6a      	ldr	r3, [pc, #424]	; (800981c <HAL_RCC_GetSysClockFreq+0x200>)
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	099b      	lsrs	r3, r3, #6
 8009678:	2200      	movs	r2, #0
 800967a:	63bb      	str	r3, [r7, #56]	; 0x38
 800967c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009684:	633b      	str	r3, [r7, #48]	; 0x30
 8009686:	2300      	movs	r3, #0
 8009688:	637b      	str	r3, [r7, #52]	; 0x34
 800968a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800968e:	4622      	mov	r2, r4
 8009690:	462b      	mov	r3, r5
 8009692:	f04f 0000 	mov.w	r0, #0
 8009696:	f04f 0100 	mov.w	r1, #0
 800969a:	0159      	lsls	r1, r3, #5
 800969c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096a0:	0150      	lsls	r0, r2, #5
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4621      	mov	r1, r4
 80096a8:	1a51      	subs	r1, r2, r1
 80096aa:	6139      	str	r1, [r7, #16]
 80096ac:	4629      	mov	r1, r5
 80096ae:	eb63 0301 	sbc.w	r3, r3, r1
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	f04f 0300 	mov.w	r3, #0
 80096bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096c0:	4659      	mov	r1, fp
 80096c2:	018b      	lsls	r3, r1, #6
 80096c4:	4651      	mov	r1, sl
 80096c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80096ca:	4651      	mov	r1, sl
 80096cc:	018a      	lsls	r2, r1, #6
 80096ce:	4651      	mov	r1, sl
 80096d0:	ebb2 0801 	subs.w	r8, r2, r1
 80096d4:	4659      	mov	r1, fp
 80096d6:	eb63 0901 	sbc.w	r9, r3, r1
 80096da:	f04f 0200 	mov.w	r2, #0
 80096de:	f04f 0300 	mov.w	r3, #0
 80096e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096ee:	4690      	mov	r8, r2
 80096f0:	4699      	mov	r9, r3
 80096f2:	4623      	mov	r3, r4
 80096f4:	eb18 0303 	adds.w	r3, r8, r3
 80096f8:	60bb      	str	r3, [r7, #8]
 80096fa:	462b      	mov	r3, r5
 80096fc:	eb49 0303 	adc.w	r3, r9, r3
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	f04f 0200 	mov.w	r2, #0
 8009706:	f04f 0300 	mov.w	r3, #0
 800970a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800970e:	4629      	mov	r1, r5
 8009710:	024b      	lsls	r3, r1, #9
 8009712:	4621      	mov	r1, r4
 8009714:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009718:	4621      	mov	r1, r4
 800971a:	024a      	lsls	r2, r1, #9
 800971c:	4610      	mov	r0, r2
 800971e:	4619      	mov	r1, r3
 8009720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009722:	2200      	movs	r2, #0
 8009724:	62bb      	str	r3, [r7, #40]	; 0x28
 8009726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800972c:	f7f7 faac 	bl	8000c88 <__aeabi_uldivmod>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4613      	mov	r3, r2
 8009736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009738:	e058      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800973a:	4b38      	ldr	r3, [pc, #224]	; (800981c <HAL_RCC_GetSysClockFreq+0x200>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	099b      	lsrs	r3, r3, #6
 8009740:	2200      	movs	r2, #0
 8009742:	4618      	mov	r0, r3
 8009744:	4611      	mov	r1, r2
 8009746:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800974a:	623b      	str	r3, [r7, #32]
 800974c:	2300      	movs	r3, #0
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
 8009750:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009754:	4642      	mov	r2, r8
 8009756:	464b      	mov	r3, r9
 8009758:	f04f 0000 	mov.w	r0, #0
 800975c:	f04f 0100 	mov.w	r1, #0
 8009760:	0159      	lsls	r1, r3, #5
 8009762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009766:	0150      	lsls	r0, r2, #5
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4641      	mov	r1, r8
 800976e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009772:	4649      	mov	r1, r9
 8009774:	eb63 0b01 	sbc.w	fp, r3, r1
 8009778:	f04f 0200 	mov.w	r2, #0
 800977c:	f04f 0300 	mov.w	r3, #0
 8009780:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009784:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009788:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800978c:	ebb2 040a 	subs.w	r4, r2, sl
 8009790:	eb63 050b 	sbc.w	r5, r3, fp
 8009794:	f04f 0200 	mov.w	r2, #0
 8009798:	f04f 0300 	mov.w	r3, #0
 800979c:	00eb      	lsls	r3, r5, #3
 800979e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097a2:	00e2      	lsls	r2, r4, #3
 80097a4:	4614      	mov	r4, r2
 80097a6:	461d      	mov	r5, r3
 80097a8:	4643      	mov	r3, r8
 80097aa:	18e3      	adds	r3, r4, r3
 80097ac:	603b      	str	r3, [r7, #0]
 80097ae:	464b      	mov	r3, r9
 80097b0:	eb45 0303 	adc.w	r3, r5, r3
 80097b4:	607b      	str	r3, [r7, #4]
 80097b6:	f04f 0200 	mov.w	r2, #0
 80097ba:	f04f 0300 	mov.w	r3, #0
 80097be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097c2:	4629      	mov	r1, r5
 80097c4:	028b      	lsls	r3, r1, #10
 80097c6:	4621      	mov	r1, r4
 80097c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80097cc:	4621      	mov	r1, r4
 80097ce:	028a      	lsls	r2, r1, #10
 80097d0:	4610      	mov	r0, r2
 80097d2:	4619      	mov	r1, r3
 80097d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d6:	2200      	movs	r2, #0
 80097d8:	61bb      	str	r3, [r7, #24]
 80097da:	61fa      	str	r2, [r7, #28]
 80097dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097e0:	f7f7 fa52 	bl	8000c88 <__aeabi_uldivmod>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4613      	mov	r3, r2
 80097ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80097ec:	4b0b      	ldr	r3, [pc, #44]	; (800981c <HAL_RCC_GetSysClockFreq+0x200>)
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	0c1b      	lsrs	r3, r3, #16
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	3301      	adds	r3, #1
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80097fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009800:	fbb2 f3f3 	udiv	r3, r2, r3
 8009804:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009806:	e002      	b.n	800980e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009808:	4b05      	ldr	r3, [pc, #20]	; (8009820 <HAL_RCC_GetSysClockFreq+0x204>)
 800980a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800980c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800980e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009810:	4618      	mov	r0, r3
 8009812:	3750      	adds	r7, #80	; 0x50
 8009814:	46bd      	mov	sp, r7
 8009816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800981a:	bf00      	nop
 800981c:	40023800 	.word	0x40023800
 8009820:	00f42400 	.word	0x00f42400
 8009824:	007a1200 	.word	0x007a1200

08009828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800982c:	4b03      	ldr	r3, [pc, #12]	; (800983c <HAL_RCC_GetHCLKFreq+0x14>)
 800982e:	681b      	ldr	r3, [r3, #0]
}
 8009830:	4618      	mov	r0, r3
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	20000068 	.word	0x20000068

08009840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009844:	f7ff fff0 	bl	8009828 <HAL_RCC_GetHCLKFreq>
 8009848:	4602      	mov	r2, r0
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	0a9b      	lsrs	r3, r3, #10
 8009850:	f003 0307 	and.w	r3, r3, #7
 8009854:	4903      	ldr	r1, [pc, #12]	; (8009864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009856:	5ccb      	ldrb	r3, [r1, r3]
 8009858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800985c:	4618      	mov	r0, r3
 800985e:	bd80      	pop	{r7, pc}
 8009860:	40023800 	.word	0x40023800
 8009864:	080e9b00 	.word	0x080e9b00

08009868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800986c:	f7ff ffdc 	bl	8009828 <HAL_RCC_GetHCLKFreq>
 8009870:	4602      	mov	r2, r0
 8009872:	4b05      	ldr	r3, [pc, #20]	; (8009888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	0b5b      	lsrs	r3, r3, #13
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	4903      	ldr	r1, [pc, #12]	; (800988c <HAL_RCC_GetPCLK2Freq+0x24>)
 800987e:	5ccb      	ldrb	r3, [r1, r3]
 8009880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	40023800 	.word	0x40023800
 800988c:	080e9b00 	.word	0x080e9b00

08009890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e07b      	b.n	800999a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d108      	bne.n	80098bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098b2:	d009      	beq.n	80098c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	61da      	str	r2, [r3, #28]
 80098ba:	e005      	b.n	80098c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7fb fc06 	bl	80050f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800991a:	431a      	orrs	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	431a      	orrs	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	431a      	orrs	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009938:	431a      	orrs	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009942:	431a      	orrs	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994c:	ea42 0103 	orr.w	r1, r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009954:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	430a      	orrs	r2, r1
 800995e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	0c1b      	lsrs	r3, r3, #16
 8009966:	f003 0104 	and.w	r1, r3, #4
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	f003 0210 	and.w	r2, r3, #16
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	430a      	orrs	r2, r1
 8009978:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69da      	ldr	r2, [r3, #28]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009988:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b088      	sub	sp, #32
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	603b      	str	r3, [r7, #0]
 80099ae:	4613      	mov	r3, r2
 80099b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d101      	bne.n	80099c4 <HAL_SPI_Transmit+0x22>
 80099c0:	2302      	movs	r3, #2
 80099c2:	e126      	b.n	8009c12 <HAL_SPI_Transmit+0x270>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099cc:	f7fc ffe4 	bl	8006998 <HAL_GetTick>
 80099d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80099d2:	88fb      	ldrh	r3, [r7, #6]
 80099d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d002      	beq.n	80099e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80099e2:	2302      	movs	r3, #2
 80099e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099e6:	e10b      	b.n	8009c00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <HAL_SPI_Transmit+0x52>
 80099ee:	88fb      	ldrh	r3, [r7, #6]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099f8:	e102      	b.n	8009c00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2203      	movs	r2, #3
 80099fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	88fa      	ldrh	r2, [r7, #6]
 8009a12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	88fa      	ldrh	r2, [r7, #6]
 8009a18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a40:	d10f      	bne.n	8009a62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6c:	2b40      	cmp	r3, #64	; 0x40
 8009a6e:	d007      	beq.n	8009a80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a88:	d14b      	bne.n	8009b22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <HAL_SPI_Transmit+0xf6>
 8009a92:	8afb      	ldrh	r3, [r7, #22]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d13e      	bne.n	8009b16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9c:	881a      	ldrh	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa8:	1c9a      	adds	r2, r3, #2
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009abc:	e02b      	b.n	8009b16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d112      	bne.n	8009af2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad0:	881a      	ldrh	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009adc:	1c9a      	adds	r2, r3, #2
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	86da      	strh	r2, [r3, #54]	; 0x36
 8009af0:	e011      	b.n	8009b16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009af2:	f7fc ff51 	bl	8006998 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d803      	bhi.n	8009b0a <HAL_SPI_Transmit+0x168>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b08:	d102      	bne.n	8009b10 <HAL_SPI_Transmit+0x16e>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b14:	e074      	b.n	8009c00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1ce      	bne.n	8009abe <HAL_SPI_Transmit+0x11c>
 8009b20:	e04c      	b.n	8009bbc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <HAL_SPI_Transmit+0x18e>
 8009b2a:	8afb      	ldrh	r3, [r7, #22]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d140      	bne.n	8009bb2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	7812      	ldrb	r2, [r2, #0]
 8009b3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009b56:	e02c      	b.n	8009bb2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d113      	bne.n	8009b8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	330c      	adds	r3, #12
 8009b70:	7812      	ldrb	r2, [r2, #0]
 8009b72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b8c:	e011      	b.n	8009bb2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b8e:	f7fc ff03 	bl	8006998 <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d803      	bhi.n	8009ba6 <HAL_SPI_Transmit+0x204>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba4:	d102      	bne.n	8009bac <HAL_SPI_Transmit+0x20a>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009bb0:	e026      	b.n	8009c00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1cd      	bne.n	8009b58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fbcb 	bl	800a35c <SPI_EndRxTxTransaction>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10a      	bne.n	8009bf0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	613b      	str	r3, [r7, #16]
 8009bee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	77fb      	strb	r3, [r7, #31]
 8009bfc:	e000      	b.n	8009c00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3720      	adds	r7, #32
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b088      	sub	sp, #32
 8009c1e:	af02      	add	r7, sp, #8
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	603b      	str	r3, [r7, #0]
 8009c26:	4613      	mov	r3, r2
 8009c28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c36:	d112      	bne.n	8009c5e <HAL_SPI_Receive+0x44>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10e      	bne.n	8009c5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2204      	movs	r2, #4
 8009c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009c48:	88fa      	ldrh	r2, [r7, #6]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	68b9      	ldr	r1, [r7, #8]
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 f8f1 	bl	8009e3c <HAL_SPI_TransmitReceive>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	e0ea      	b.n	8009e34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d101      	bne.n	8009c6c <HAL_SPI_Receive+0x52>
 8009c68:	2302      	movs	r3, #2
 8009c6a:	e0e3      	b.n	8009e34 <HAL_SPI_Receive+0x21a>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c74:	f7fc fe90 	bl	8006998 <HAL_GetTick>
 8009c78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d002      	beq.n	8009c8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009c86:	2302      	movs	r3, #2
 8009c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c8a:	e0ca      	b.n	8009e22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <HAL_SPI_Receive+0x7e>
 8009c92:	88fb      	ldrh	r3, [r7, #6]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c9c:	e0c1      	b.n	8009e22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	88fa      	ldrh	r2, [r7, #6]
 8009cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	88fa      	ldrh	r2, [r7, #6]
 8009cbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce4:	d10f      	bne.n	8009d06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b40      	cmp	r3, #64	; 0x40
 8009d12:	d007      	beq.n	8009d24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d162      	bne.n	8009df2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009d2c:	e02e      	b.n	8009d8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d115      	bne.n	8009d68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f103 020c 	add.w	r2, r3, #12
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d48:	7812      	ldrb	r2, [r2, #0]
 8009d4a:	b2d2      	uxtb	r2, r2
 8009d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d66:	e011      	b.n	8009d8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d68:	f7fc fe16 	bl	8006998 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d803      	bhi.n	8009d80 <HAL_SPI_Receive+0x166>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7e:	d102      	bne.n	8009d86 <HAL_SPI_Receive+0x16c>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d102      	bne.n	8009d8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009d8a:	e04a      	b.n	8009e22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1cb      	bne.n	8009d2e <HAL_SPI_Receive+0x114>
 8009d96:	e031      	b.n	8009dfc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d113      	bne.n	8009dce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db0:	b292      	uxth	r2, r2
 8009db2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db8:	1c9a      	adds	r2, r3, #2
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dcc:	e011      	b.n	8009df2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dce:	f7fc fde3 	bl	8006998 <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d803      	bhi.n	8009de6 <HAL_SPI_Receive+0x1cc>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de4:	d102      	bne.n	8009dec <HAL_SPI_Receive+0x1d2>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009df0:	e017      	b.n	8009e22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1cd      	bne.n	8009d98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 fa45 	bl	800a290 <SPI_EndRxTransaction>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	75fb      	strb	r3, [r7, #23]
 8009e1e:	e000      	b.n	8009e22 <HAL_SPI_Receive+0x208>
  }

error :
 8009e20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08c      	sub	sp, #48	; 0x30
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_SPI_TransmitReceive+0x26>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e18a      	b.n	800a178 <HAL_SPI_TransmitReceive+0x33c>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e6a:	f7fc fd95 	bl	8006998 <HAL_GetTick>
 8009e6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009e80:	887b      	ldrh	r3, [r7, #2]
 8009e82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d00f      	beq.n	8009eac <HAL_SPI_TransmitReceive+0x70>
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e92:	d107      	bne.n	8009ea4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d103      	bne.n	8009ea4 <HAL_SPI_TransmitReceive+0x68>
 8009e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ea0:	2b04      	cmp	r3, #4
 8009ea2:	d003      	beq.n	8009eac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009eaa:	e15b      	b.n	800a164 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d005      	beq.n	8009ebe <HAL_SPI_TransmitReceive+0x82>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <HAL_SPI_TransmitReceive+0x82>
 8009eb8:	887b      	ldrh	r3, [r7, #2]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d103      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009ec4:	e14e      	b.n	800a164 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d003      	beq.n	8009eda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2205      	movs	r2, #5
 8009ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	887a      	ldrh	r2, [r7, #2]
 8009eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	887a      	ldrh	r2, [r7, #2]
 8009ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	887a      	ldrh	r2, [r7, #2]
 8009efc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	887a      	ldrh	r2, [r7, #2]
 8009f02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1a:	2b40      	cmp	r3, #64	; 0x40
 8009f1c:	d007      	beq.n	8009f2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f36:	d178      	bne.n	800a02a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <HAL_SPI_TransmitReceive+0x10a>
 8009f40:	8b7b      	ldrh	r3, [r7, #26]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d166      	bne.n	800a014 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4a:	881a      	ldrh	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	1c9a      	adds	r2, r3, #2
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	3b01      	subs	r3, #1
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f6a:	e053      	b.n	800a014 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d11b      	bne.n	8009fb2 <HAL_SPI_TransmitReceive+0x176>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d016      	beq.n	8009fb2 <HAL_SPI_TransmitReceive+0x176>
 8009f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d113      	bne.n	8009fb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8e:	881a      	ldrh	r2, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	1c9a      	adds	r2, r3, #2
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d119      	bne.n	8009ff4 <HAL_SPI_TransmitReceive+0x1b8>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d014      	beq.n	8009ff4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68da      	ldr	r2, [r3, #12]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd4:	b292      	uxth	r2, r2
 8009fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fdc:	1c9a      	adds	r2, r3, #2
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ff4:	f7fc fcd0 	bl	8006998 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a000:	429a      	cmp	r2, r3
 800a002:	d807      	bhi.n	800a014 <HAL_SPI_TransmitReceive+0x1d8>
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00a:	d003      	beq.n	800a014 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a012:	e0a7      	b.n	800a164 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a018:	b29b      	uxth	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1a6      	bne.n	8009f6c <HAL_SPI_TransmitReceive+0x130>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a022:	b29b      	uxth	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1a1      	bne.n	8009f6c <HAL_SPI_TransmitReceive+0x130>
 800a028:	e07c      	b.n	800a124 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <HAL_SPI_TransmitReceive+0x1fc>
 800a032:	8b7b      	ldrh	r3, [r7, #26]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d16b      	bne.n	800a110 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	330c      	adds	r3, #12
 800a042:	7812      	ldrb	r2, [r2, #0]
 800a044:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a054:	b29b      	uxth	r3, r3
 800a056:	3b01      	subs	r3, #1
 800a058:	b29a      	uxth	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a05e:	e057      	b.n	800a110 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d11c      	bne.n	800a0a8 <HAL_SPI_TransmitReceive+0x26c>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a072:	b29b      	uxth	r3, r3
 800a074:	2b00      	cmp	r3, #0
 800a076:	d017      	beq.n	800a0a8 <HAL_SPI_TransmitReceive+0x26c>
 800a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d114      	bne.n	800a0a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	330c      	adds	r3, #12
 800a088:	7812      	ldrb	r2, [r2, #0]
 800a08a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	3b01      	subs	r3, #1
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d119      	bne.n	800a0ea <HAL_SPI_TransmitReceive+0x2ae>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d014      	beq.n	800a0ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68da      	ldr	r2, [r3, #12]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ca:	b2d2      	uxtb	r2, r2
 800a0cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0ea:	f7fc fc55 	bl	8006998 <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d803      	bhi.n	800a102 <HAL_SPI_TransmitReceive+0x2c6>
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d102      	bne.n	800a108 <HAL_SPI_TransmitReceive+0x2cc>
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	2b00      	cmp	r3, #0
 800a106:	d103      	bne.n	800a110 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a10e:	e029      	b.n	800a164 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a114:	b29b      	uxth	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1a2      	bne.n	800a060 <HAL_SPI_TransmitReceive+0x224>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a11e:	b29b      	uxth	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	d19d      	bne.n	800a060 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 f917 	bl	800a35c <SPI_EndRxTxTransaction>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d006      	beq.n	800a142 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2220      	movs	r2, #32
 800a13e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a140:	e010      	b.n	800a164 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10b      	bne.n	800a162 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	617b      	str	r3, [r7, #20]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	617b      	str	r3, [r7, #20]
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	e000      	b.n	800a164 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3730      	adds	r7, #48	; 0x30
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	4613      	mov	r3, r2
 800a18e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a190:	f7fc fc02 	bl	8006998 <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	1a9b      	subs	r3, r3, r2
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	4413      	add	r3, r2
 800a19e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a1a0:	f7fc fbfa 	bl	8006998 <HAL_GetTick>
 800a1a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1a6:	4b39      	ldr	r3, [pc, #228]	; (800a28c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	015b      	lsls	r3, r3, #5
 800a1ac:	0d1b      	lsrs	r3, r3, #20
 800a1ae:	69fa      	ldr	r2, [r7, #28]
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1b6:	e054      	b.n	800a262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1be:	d050      	beq.n	800a262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1c0:	f7fc fbea 	bl	8006998 <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d902      	bls.n	800a1d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d13d      	bne.n	800a252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1ee:	d111      	bne.n	800a214 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1f8:	d004      	beq.n	800a204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a202:	d107      	bne.n	800a214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a21c:	d10f      	bne.n	800a23e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a23c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e017      	b.n	800a282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a258:	2300      	movs	r3, #0
 800a25a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	3b01      	subs	r3, #1
 800a260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4013      	ands	r3, r2
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	429a      	cmp	r2, r3
 800a270:	bf0c      	ite	eq
 800a272:	2301      	moveq	r3, #1
 800a274:	2300      	movne	r3, #0
 800a276:	b2db      	uxtb	r3, r3
 800a278:	461a      	mov	r2, r3
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d19b      	bne.n	800a1b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3720      	adds	r7, #32
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20000068 	.word	0x20000068

0800a290 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af02      	add	r7, sp, #8
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2a4:	d111      	bne.n	800a2ca <SPI_EndRxTransaction+0x3a>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ae:	d004      	beq.n	800a2ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2b8:	d107      	bne.n	800a2ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2d2:	d12a      	bne.n	800a32a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2dc:	d012      	beq.n	800a304 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2180      	movs	r1, #128	; 0x80
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7ff ff49 	bl	800a180 <SPI_WaitFlagStateUntilTimeout>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d02d      	beq.n	800a350 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f8:	f043 0220 	orr.w	r2, r3, #32
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e026      	b.n	800a352 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2200      	movs	r2, #0
 800a30c:	2101      	movs	r1, #1
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7ff ff36 	bl	800a180 <SPI_WaitFlagStateUntilTimeout>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d01a      	beq.n	800a350 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31e:	f043 0220 	orr.w	r2, r3, #32
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e013      	b.n	800a352 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2200      	movs	r2, #0
 800a332:	2101      	movs	r1, #1
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f7ff ff23 	bl	800a180 <SPI_WaitFlagStateUntilTimeout>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d007      	beq.n	800a350 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a344:	f043 0220 	orr.w	r2, r3, #32
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e000      	b.n	800a352 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af02      	add	r7, sp, #8
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a368:	4b1b      	ldr	r3, [pc, #108]	; (800a3d8 <SPI_EndRxTxTransaction+0x7c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a1b      	ldr	r2, [pc, #108]	; (800a3dc <SPI_EndRxTxTransaction+0x80>)
 800a36e:	fba2 2303 	umull	r2, r3, r2, r3
 800a372:	0d5b      	lsrs	r3, r3, #21
 800a374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a378:	fb02 f303 	mul.w	r3, r2, r3
 800a37c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a386:	d112      	bne.n	800a3ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2200      	movs	r2, #0
 800a390:	2180      	movs	r1, #128	; 0x80
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7ff fef4 	bl	800a180 <SPI_WaitFlagStateUntilTimeout>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d016      	beq.n	800a3cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a2:	f043 0220 	orr.w	r2, r3, #32
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e00f      	b.n	800a3ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00a      	beq.n	800a3ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c4:	2b80      	cmp	r3, #128	; 0x80
 800a3c6:	d0f2      	beq.n	800a3ae <SPI_EndRxTxTransaction+0x52>
 800a3c8:	e000      	b.n	800a3cc <SPI_EndRxTxTransaction+0x70>
        break;
 800a3ca:	bf00      	nop
  }

  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000068 	.word	0x20000068
 800a3dc:	165e9f81 	.word	0x165e9f81

0800a3e0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e034      	b.n	800a460 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7fb f81e 	bl	800544c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3308      	adds	r3, #8
 800a418:	4619      	mov	r1, r3
 800a41a:	4610      	mov	r0, r2
 800a41c:	f002 f84e 	bl	800c4bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6818      	ldr	r0, [r3, #0]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	461a      	mov	r2, r3
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	f002 f898 	bl	800c560 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6858      	ldr	r0, [r3, #4]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	f002 f8cd 	bl	800c5dc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	6892      	ldr	r2, [r2, #8]
 800a44a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	6892      	ldr	r2, [r2, #8]
 800a456:	f041 0101 	orr.w	r1, r1, #1
 800a45a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e041      	b.n	800a4fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7fa fe78 	bl	8005184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2202      	movs	r2, #2
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f000 fc1a 	bl	800ace0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d001      	beq.n	800a520 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e046      	b.n	800a5ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a23      	ldr	r2, [pc, #140]	; (800a5bc <HAL_TIM_Base_Start+0xb4>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d022      	beq.n	800a578 <HAL_TIM_Base_Start+0x70>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a53a:	d01d      	beq.n	800a578 <HAL_TIM_Base_Start+0x70>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a1f      	ldr	r2, [pc, #124]	; (800a5c0 <HAL_TIM_Base_Start+0xb8>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d018      	beq.n	800a578 <HAL_TIM_Base_Start+0x70>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a1e      	ldr	r2, [pc, #120]	; (800a5c4 <HAL_TIM_Base_Start+0xbc>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d013      	beq.n	800a578 <HAL_TIM_Base_Start+0x70>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a1c      	ldr	r2, [pc, #112]	; (800a5c8 <HAL_TIM_Base_Start+0xc0>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d00e      	beq.n	800a578 <HAL_TIM_Base_Start+0x70>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a1b      	ldr	r2, [pc, #108]	; (800a5cc <HAL_TIM_Base_Start+0xc4>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d009      	beq.n	800a578 <HAL_TIM_Base_Start+0x70>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a19      	ldr	r2, [pc, #100]	; (800a5d0 <HAL_TIM_Base_Start+0xc8>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d004      	beq.n	800a578 <HAL_TIM_Base_Start+0x70>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a18      	ldr	r2, [pc, #96]	; (800a5d4 <HAL_TIM_Base_Start+0xcc>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d111      	bne.n	800a59c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f003 0307 	and.w	r3, r3, #7
 800a582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b06      	cmp	r3, #6
 800a588:	d010      	beq.n	800a5ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f042 0201 	orr.w	r2, r2, #1
 800a598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a59a:	e007      	b.n	800a5ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0201 	orr.w	r2, r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40000400 	.word	0x40000400
 800a5c4:	40000800 	.word	0x40000800
 800a5c8:	40000c00 	.word	0x40000c00
 800a5cc:	40010400 	.word	0x40010400
 800a5d0:	40014000 	.word	0x40014000
 800a5d4:	40001800 	.word	0x40001800

0800a5d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d001      	beq.n	800a5f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e04e      	b.n	800a68e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0201 	orr.w	r2, r2, #1
 800a606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a23      	ldr	r2, [pc, #140]	; (800a69c <HAL_TIM_Base_Start_IT+0xc4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d022      	beq.n	800a658 <HAL_TIM_Base_Start_IT+0x80>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a61a:	d01d      	beq.n	800a658 <HAL_TIM_Base_Start_IT+0x80>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a1f      	ldr	r2, [pc, #124]	; (800a6a0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d018      	beq.n	800a658 <HAL_TIM_Base_Start_IT+0x80>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a1e      	ldr	r2, [pc, #120]	; (800a6a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d013      	beq.n	800a658 <HAL_TIM_Base_Start_IT+0x80>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a1c      	ldr	r2, [pc, #112]	; (800a6a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00e      	beq.n	800a658 <HAL_TIM_Base_Start_IT+0x80>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a1b      	ldr	r2, [pc, #108]	; (800a6ac <HAL_TIM_Base_Start_IT+0xd4>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d009      	beq.n	800a658 <HAL_TIM_Base_Start_IT+0x80>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a19      	ldr	r2, [pc, #100]	; (800a6b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d004      	beq.n	800a658 <HAL_TIM_Base_Start_IT+0x80>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a18      	ldr	r2, [pc, #96]	; (800a6b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d111      	bne.n	800a67c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2b06      	cmp	r3, #6
 800a668:	d010      	beq.n	800a68c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f042 0201 	orr.w	r2, r2, #1
 800a678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a67a:	e007      	b.n	800a68c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	40010000 	.word	0x40010000
 800a6a0:	40000400 	.word	0x40000400
 800a6a4:	40000800 	.word	0x40000800
 800a6a8:	40000c00 	.word	0x40000c00
 800a6ac:	40010400 	.word	0x40010400
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40001800 	.word	0x40001800

0800a6b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e041      	b.n	800a74e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f839 	bl	800a756 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	f000 faf2 	bl	800ace0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a75e:	bf00      	nop
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d122      	bne.n	800a7c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	f003 0302 	and.w	r3, r3, #2
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d11b      	bne.n	800a7c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f06f 0202 	mvn.w	r2, #2
 800a796:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	f003 0303 	and.w	r3, r3, #3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fa78 	bl	800aca2 <HAL_TIM_IC_CaptureCallback>
 800a7b2:	e005      	b.n	800a7c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fa6a 	bl	800ac8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fa7b 	bl	800acb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d122      	bne.n	800a81a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f003 0304 	and.w	r3, r3, #4
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d11b      	bne.n	800a81a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f06f 0204 	mvn.w	r2, #4
 800a7ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fa4e 	bl	800aca2 <HAL_TIM_IC_CaptureCallback>
 800a806:	e005      	b.n	800a814 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fa40 	bl	800ac8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fa51 	bl	800acb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	f003 0308 	and.w	r3, r3, #8
 800a824:	2b08      	cmp	r3, #8
 800a826:	d122      	bne.n	800a86e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f003 0308 	and.w	r3, r3, #8
 800a832:	2b08      	cmp	r3, #8
 800a834:	d11b      	bne.n	800a86e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f06f 0208 	mvn.w	r2, #8
 800a83e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2204      	movs	r2, #4
 800a844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	69db      	ldr	r3, [r3, #28]
 800a84c:	f003 0303 	and.w	r3, r3, #3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fa24 	bl	800aca2 <HAL_TIM_IC_CaptureCallback>
 800a85a:	e005      	b.n	800a868 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fa16 	bl	800ac8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa27 	bl	800acb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	f003 0310 	and.w	r3, r3, #16
 800a878:	2b10      	cmp	r3, #16
 800a87a:	d122      	bne.n	800a8c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	f003 0310 	and.w	r3, r3, #16
 800a886:	2b10      	cmp	r3, #16
 800a888:	d11b      	bne.n	800a8c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f06f 0210 	mvn.w	r2, #16
 800a892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2208      	movs	r2, #8
 800a898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d003      	beq.n	800a8b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f9fa 	bl	800aca2 <HAL_TIM_IC_CaptureCallback>
 800a8ae:	e005      	b.n	800a8bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f9ec 	bl	800ac8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f9fd 	bl	800acb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d10e      	bne.n	800a8ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d107      	bne.n	800a8ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f06f 0201 	mvn.w	r2, #1
 800a8e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7fa fa33 	bl	8004d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f8:	2b80      	cmp	r3, #128	; 0x80
 800a8fa:	d10e      	bne.n	800a91a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a906:	2b80      	cmp	r3, #128	; 0x80
 800a908:	d107      	bne.n	800a91a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fd53 	bl	800b3c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a924:	2b40      	cmp	r3, #64	; 0x40
 800a926:	d10e      	bne.n	800a946 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a932:	2b40      	cmp	r3, #64	; 0x40
 800a934:	d107      	bne.n	800a946 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f9c2 	bl	800acca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f003 0320 	and.w	r3, r3, #32
 800a950:	2b20      	cmp	r3, #32
 800a952:	d10e      	bne.n	800a972 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b20      	cmp	r3, #32
 800a960:	d107      	bne.n	800a972 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f06f 0220 	mvn.w	r2, #32
 800a96a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fd1d 	bl	800b3ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
	...

0800a97c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a992:	2b01      	cmp	r3, #1
 800a994:	d101      	bne.n	800a99a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a996:	2302      	movs	r3, #2
 800a998:	e0ae      	b.n	800aaf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b0c      	cmp	r3, #12
 800a9a6:	f200 809f 	bhi.w	800aae8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a9aa:	a201      	add	r2, pc, #4	; (adr r2, 800a9b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b0:	0800a9e5 	.word	0x0800a9e5
 800a9b4:	0800aae9 	.word	0x0800aae9
 800a9b8:	0800aae9 	.word	0x0800aae9
 800a9bc:	0800aae9 	.word	0x0800aae9
 800a9c0:	0800aa25 	.word	0x0800aa25
 800a9c4:	0800aae9 	.word	0x0800aae9
 800a9c8:	0800aae9 	.word	0x0800aae9
 800a9cc:	0800aae9 	.word	0x0800aae9
 800a9d0:	0800aa67 	.word	0x0800aa67
 800a9d4:	0800aae9 	.word	0x0800aae9
 800a9d8:	0800aae9 	.word	0x0800aae9
 800a9dc:	0800aae9 	.word	0x0800aae9
 800a9e0:	0800aaa7 	.word	0x0800aaa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68b9      	ldr	r1, [r7, #8]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 fa18 	bl	800ae20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	699a      	ldr	r2, [r3, #24]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f042 0208 	orr.w	r2, r2, #8
 800a9fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	699a      	ldr	r2, [r3, #24]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0204 	bic.w	r2, r2, #4
 800aa0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6999      	ldr	r1, [r3, #24]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	691a      	ldr	r2, [r3, #16]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	619a      	str	r2, [r3, #24]
      break;
 800aa22:	e064      	b.n	800aaee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fa68 	bl	800af00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699a      	ldr	r2, [r3, #24]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699a      	ldr	r2, [r3, #24]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6999      	ldr	r1, [r3, #24]
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	021a      	lsls	r2, r3, #8
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	619a      	str	r2, [r3, #24]
      break;
 800aa64:	e043      	b.n	800aaee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fabd 	bl	800afec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f042 0208 	orr.w	r2, r2, #8
 800aa80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	69da      	ldr	r2, [r3, #28]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f022 0204 	bic.w	r2, r2, #4
 800aa90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69d9      	ldr	r1, [r3, #28]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	691a      	ldr	r2, [r3, #16]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	61da      	str	r2, [r3, #28]
      break;
 800aaa4:	e023      	b.n	800aaee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68b9      	ldr	r1, [r7, #8]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 fb11 	bl	800b0d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69da      	ldr	r2, [r3, #28]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	69da      	ldr	r2, [r3, #28]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69d9      	ldr	r1, [r3, #28]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	021a      	lsls	r2, r3, #8
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	430a      	orrs	r2, r1
 800aae4:	61da      	str	r2, [r3, #28]
      break;
 800aae6:	e002      	b.n	800aaee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	75fb      	strb	r3, [r7, #23]
      break;
 800aaec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d101      	bne.n	800ab1c <HAL_TIM_ConfigClockSource+0x1c>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	e0b4      	b.n	800ac86 <HAL_TIM_ConfigClockSource+0x186>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2202      	movs	r2, #2
 800ab28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab54:	d03e      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0xd4>
 800ab56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab5a:	f200 8087 	bhi.w	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
 800ab5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab62:	f000 8086 	beq.w	800ac72 <HAL_TIM_ConfigClockSource+0x172>
 800ab66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab6a:	d87f      	bhi.n	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
 800ab6c:	2b70      	cmp	r3, #112	; 0x70
 800ab6e:	d01a      	beq.n	800aba6 <HAL_TIM_ConfigClockSource+0xa6>
 800ab70:	2b70      	cmp	r3, #112	; 0x70
 800ab72:	d87b      	bhi.n	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
 800ab74:	2b60      	cmp	r3, #96	; 0x60
 800ab76:	d050      	beq.n	800ac1a <HAL_TIM_ConfigClockSource+0x11a>
 800ab78:	2b60      	cmp	r3, #96	; 0x60
 800ab7a:	d877      	bhi.n	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
 800ab7c:	2b50      	cmp	r3, #80	; 0x50
 800ab7e:	d03c      	beq.n	800abfa <HAL_TIM_ConfigClockSource+0xfa>
 800ab80:	2b50      	cmp	r3, #80	; 0x50
 800ab82:	d873      	bhi.n	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
 800ab84:	2b40      	cmp	r3, #64	; 0x40
 800ab86:	d058      	beq.n	800ac3a <HAL_TIM_ConfigClockSource+0x13a>
 800ab88:	2b40      	cmp	r3, #64	; 0x40
 800ab8a:	d86f      	bhi.n	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
 800ab8c:	2b30      	cmp	r3, #48	; 0x30
 800ab8e:	d064      	beq.n	800ac5a <HAL_TIM_ConfigClockSource+0x15a>
 800ab90:	2b30      	cmp	r3, #48	; 0x30
 800ab92:	d86b      	bhi.n	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
 800ab94:	2b20      	cmp	r3, #32
 800ab96:	d060      	beq.n	800ac5a <HAL_TIM_ConfigClockSource+0x15a>
 800ab98:	2b20      	cmp	r3, #32
 800ab9a:	d867      	bhi.n	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d05c      	beq.n	800ac5a <HAL_TIM_ConfigClockSource+0x15a>
 800aba0:	2b10      	cmp	r3, #16
 800aba2:	d05a      	beq.n	800ac5a <HAL_TIM_ConfigClockSource+0x15a>
 800aba4:	e062      	b.n	800ac6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6818      	ldr	r0, [r3, #0]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	6899      	ldr	r1, [r3, #8]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	f000 fb5d 	bl	800b274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	609a      	str	r2, [r3, #8]
      break;
 800abd2:	e04f      	b.n	800ac74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	6899      	ldr	r1, [r3, #8]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	f000 fb46 	bl	800b274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689a      	ldr	r2, [r3, #8]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abf6:	609a      	str	r2, [r3, #8]
      break;
 800abf8:	e03c      	b.n	800ac74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	6859      	ldr	r1, [r3, #4]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	461a      	mov	r2, r3
 800ac08:	f000 faba 	bl	800b180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2150      	movs	r1, #80	; 0x50
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fb13 	bl	800b23e <TIM_ITRx_SetConfig>
      break;
 800ac18:	e02c      	b.n	800ac74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6818      	ldr	r0, [r3, #0]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	6859      	ldr	r1, [r3, #4]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	461a      	mov	r2, r3
 800ac28:	f000 fad9 	bl	800b1de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2160      	movs	r1, #96	; 0x60
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fb03 	bl	800b23e <TIM_ITRx_SetConfig>
      break;
 800ac38:	e01c      	b.n	800ac74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6859      	ldr	r1, [r3, #4]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	461a      	mov	r2, r3
 800ac48:	f000 fa9a 	bl	800b180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2140      	movs	r1, #64	; 0x40
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 faf3 	bl	800b23e <TIM_ITRx_SetConfig>
      break;
 800ac58:	e00c      	b.n	800ac74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f000 faea 	bl	800b23e <TIM_ITRx_SetConfig>
      break;
 800ac6a:	e003      	b.n	800ac74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac70:	e000      	b.n	800ac74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b083      	sub	sp, #12
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac96:	bf00      	nop
 800ac98:	370c      	adds	r7, #12
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acbe:	bf00      	nop
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acca:	b480      	push	{r7}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acd2:	bf00      	nop
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
	...

0800ace0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a40      	ldr	r2, [pc, #256]	; (800adf4 <TIM_Base_SetConfig+0x114>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d013      	beq.n	800ad20 <TIM_Base_SetConfig+0x40>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acfe:	d00f      	beq.n	800ad20 <TIM_Base_SetConfig+0x40>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a3d      	ldr	r2, [pc, #244]	; (800adf8 <TIM_Base_SetConfig+0x118>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00b      	beq.n	800ad20 <TIM_Base_SetConfig+0x40>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a3c      	ldr	r2, [pc, #240]	; (800adfc <TIM_Base_SetConfig+0x11c>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d007      	beq.n	800ad20 <TIM_Base_SetConfig+0x40>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a3b      	ldr	r2, [pc, #236]	; (800ae00 <TIM_Base_SetConfig+0x120>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d003      	beq.n	800ad20 <TIM_Base_SetConfig+0x40>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a3a      	ldr	r2, [pc, #232]	; (800ae04 <TIM_Base_SetConfig+0x124>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d108      	bne.n	800ad32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a2f      	ldr	r2, [pc, #188]	; (800adf4 <TIM_Base_SetConfig+0x114>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d02b      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad40:	d027      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a2c      	ldr	r2, [pc, #176]	; (800adf8 <TIM_Base_SetConfig+0x118>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d023      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a2b      	ldr	r2, [pc, #172]	; (800adfc <TIM_Base_SetConfig+0x11c>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d01f      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a2a      	ldr	r2, [pc, #168]	; (800ae00 <TIM_Base_SetConfig+0x120>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d01b      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a29      	ldr	r2, [pc, #164]	; (800ae04 <TIM_Base_SetConfig+0x124>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d017      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a28      	ldr	r2, [pc, #160]	; (800ae08 <TIM_Base_SetConfig+0x128>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d013      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a27      	ldr	r2, [pc, #156]	; (800ae0c <TIM_Base_SetConfig+0x12c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d00f      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a26      	ldr	r2, [pc, #152]	; (800ae10 <TIM_Base_SetConfig+0x130>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d00b      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a25      	ldr	r2, [pc, #148]	; (800ae14 <TIM_Base_SetConfig+0x134>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d007      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a24      	ldr	r2, [pc, #144]	; (800ae18 <TIM_Base_SetConfig+0x138>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d003      	beq.n	800ad92 <TIM_Base_SetConfig+0xb2>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a23      	ldr	r2, [pc, #140]	; (800ae1c <TIM_Base_SetConfig+0x13c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d108      	bne.n	800ada4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	4313      	orrs	r3, r2
 800adb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a0a      	ldr	r2, [pc, #40]	; (800adf4 <TIM_Base_SetConfig+0x114>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d003      	beq.n	800add8 <TIM_Base_SetConfig+0xf8>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a0c      	ldr	r2, [pc, #48]	; (800ae04 <TIM_Base_SetConfig+0x124>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d103      	bne.n	800ade0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	691a      	ldr	r2, [r3, #16]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	615a      	str	r2, [r3, #20]
}
 800ade6:	bf00      	nop
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40000400 	.word	0x40000400
 800adfc:	40000800 	.word	0x40000800
 800ae00:	40000c00 	.word	0x40000c00
 800ae04:	40010400 	.word	0x40010400
 800ae08:	40014000 	.word	0x40014000
 800ae0c:	40014400 	.word	0x40014400
 800ae10:	40014800 	.word	0x40014800
 800ae14:	40001800 	.word	0x40001800
 800ae18:	40001c00 	.word	0x40001c00
 800ae1c:	40002000 	.word	0x40002000

0800ae20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	f023 0201 	bic.w	r2, r3, #1
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 0303 	bic.w	r3, r3, #3
 800ae56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f023 0302 	bic.w	r3, r3, #2
 800ae68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a20      	ldr	r2, [pc, #128]	; (800aef8 <TIM_OC1_SetConfig+0xd8>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d003      	beq.n	800ae84 <TIM_OC1_SetConfig+0x64>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a1f      	ldr	r2, [pc, #124]	; (800aefc <TIM_OC1_SetConfig+0xdc>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d10c      	bne.n	800ae9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f023 0308 	bic.w	r3, r3, #8
 800ae8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f023 0304 	bic.w	r3, r3, #4
 800ae9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a15      	ldr	r2, [pc, #84]	; (800aef8 <TIM_OC1_SetConfig+0xd8>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d003      	beq.n	800aeae <TIM_OC1_SetConfig+0x8e>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a14      	ldr	r2, [pc, #80]	; (800aefc <TIM_OC1_SetConfig+0xdc>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d111      	bne.n	800aed2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	4313      	orrs	r3, r2
 800aed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	621a      	str	r2, [r3, #32]
}
 800aeec:	bf00      	nop
 800aeee:	371c      	adds	r7, #28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	40010000 	.word	0x40010000
 800aefc:	40010400 	.word	0x40010400

0800af00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af00:	b480      	push	{r7}
 800af02:	b087      	sub	sp, #28
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	f023 0210 	bic.w	r2, r3, #16
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	021b      	lsls	r3, r3, #8
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4313      	orrs	r3, r2
 800af42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f023 0320 	bic.w	r3, r3, #32
 800af4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	4313      	orrs	r3, r2
 800af56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a22      	ldr	r2, [pc, #136]	; (800afe4 <TIM_OC2_SetConfig+0xe4>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d003      	beq.n	800af68 <TIM_OC2_SetConfig+0x68>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a21      	ldr	r2, [pc, #132]	; (800afe8 <TIM_OC2_SetConfig+0xe8>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d10d      	bne.n	800af84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	011b      	lsls	r3, r3, #4
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	4313      	orrs	r3, r2
 800af7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <TIM_OC2_SetConfig+0xe4>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d003      	beq.n	800af94 <TIM_OC2_SetConfig+0x94>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a16      	ldr	r2, [pc, #88]	; (800afe8 <TIM_OC2_SetConfig+0xe8>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d113      	bne.n	800afbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	695b      	ldr	r3, [r3, #20]
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	4313      	orrs	r3, r2
 800afae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	4313      	orrs	r3, r2
 800afba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	621a      	str	r2, [r3, #32]
}
 800afd6:	bf00      	nop
 800afd8:	371c      	adds	r7, #28
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	40010000 	.word	0x40010000
 800afe8:	40010400 	.word	0x40010400

0800afec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b01a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	021b      	lsls	r3, r3, #8
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	4313      	orrs	r3, r2
 800b040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a21      	ldr	r2, [pc, #132]	; (800b0cc <TIM_OC3_SetConfig+0xe0>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d003      	beq.n	800b052 <TIM_OC3_SetConfig+0x66>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a20      	ldr	r2, [pc, #128]	; (800b0d0 <TIM_OC3_SetConfig+0xe4>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d10d      	bne.n	800b06e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	021b      	lsls	r3, r3, #8
 800b060:	697a      	ldr	r2, [r7, #20]
 800b062:	4313      	orrs	r3, r2
 800b064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b06c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a16      	ldr	r2, [pc, #88]	; (800b0cc <TIM_OC3_SetConfig+0xe0>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d003      	beq.n	800b07e <TIM_OC3_SetConfig+0x92>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a15      	ldr	r2, [pc, #84]	; (800b0d0 <TIM_OC3_SetConfig+0xe4>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d113      	bne.n	800b0a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b08c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	011b      	lsls	r3, r3, #4
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	4313      	orrs	r3, r2
 800b098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	011b      	lsls	r3, r3, #4
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	693a      	ldr	r2, [r7, #16]
 800b0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	697a      	ldr	r2, [r7, #20]
 800b0be:	621a      	str	r2, [r3, #32]
}
 800b0c0:	bf00      	nop
 800b0c2:	371c      	adds	r7, #28
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	40010000 	.word	0x40010000
 800b0d0:	40010400 	.word	0x40010400

0800b0d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b11e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	031b      	lsls	r3, r3, #12
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a12      	ldr	r2, [pc, #72]	; (800b178 <TIM_OC4_SetConfig+0xa4>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d003      	beq.n	800b13c <TIM_OC4_SetConfig+0x68>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a11      	ldr	r2, [pc, #68]	; (800b17c <TIM_OC4_SetConfig+0xa8>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d109      	bne.n	800b150 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	019b      	lsls	r3, r3, #6
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	621a      	str	r2, [r3, #32]
}
 800b16a:	bf00      	nop
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	40010000 	.word	0x40010000
 800b17c:	40010400 	.word	0x40010400

0800b180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b180:	b480      	push	{r7}
 800b182:	b087      	sub	sp, #28
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6a1b      	ldr	r3, [r3, #32]
 800b196:	f023 0201 	bic.w	r2, r3, #1
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	011b      	lsls	r3, r3, #4
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f023 030a 	bic.w	r3, r3, #10
 800b1bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	621a      	str	r2, [r3, #32]
}
 800b1d2:	bf00      	nop
 800b1d4:	371c      	adds	r7, #28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b087      	sub	sp, #28
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	f023 0210 	bic.w	r2, r3, #16
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	699b      	ldr	r3, [r3, #24]
 800b1fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	031b      	lsls	r3, r3, #12
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	4313      	orrs	r3, r2
 800b212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b21a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	011b      	lsls	r3, r3, #4
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	4313      	orrs	r3, r2
 800b224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	621a      	str	r2, [r3, #32]
}
 800b232:	bf00      	nop
 800b234:	371c      	adds	r7, #28
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b23e:	b480      	push	{r7}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	f043 0307 	orr.w	r3, r3, #7
 800b260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	609a      	str	r2, [r3, #8]
}
 800b268:	bf00      	nop
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b28e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	021a      	lsls	r2, r3, #8
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	431a      	orrs	r2, r3
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	609a      	str	r2, [r3, #8]
}
 800b2a8:	bf00      	nop
 800b2aa:	371c      	adds	r7, #28
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d101      	bne.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e05a      	b.n	800b382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a21      	ldr	r2, [pc, #132]	; (800b390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d022      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b318:	d01d      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a1d      	ldr	r2, [pc, #116]	; (800b394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d018      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a1b      	ldr	r2, [pc, #108]	; (800b398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d013      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a1a      	ldr	r2, [pc, #104]	; (800b39c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d00e      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a18      	ldr	r2, [pc, #96]	; (800b3a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d009      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a17      	ldr	r2, [pc, #92]	; (800b3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d004      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a15      	ldr	r2, [pc, #84]	; (800b3a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d10c      	bne.n	800b370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b35c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	4313      	orrs	r3, r2
 800b366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	40010000 	.word	0x40010000
 800b394:	40000400 	.word	0x40000400
 800b398:	40000800 	.word	0x40000800
 800b39c:	40000c00 	.word	0x40000c00
 800b3a0:	40010400 	.word	0x40010400
 800b3a4:	40014000 	.word	0x40014000
 800b3a8:	40001800 	.word	0x40001800

0800b3ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e03f      	b.n	800b466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7f9 ff4e 	bl	800529c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2224      	movs	r2, #36	; 0x24
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fddb 	bl	800bfd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	691a      	ldr	r2, [r3, #16]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b42c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	695a      	ldr	r2, [r3, #20]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b43c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68da      	ldr	r2, [r3, #12]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b44c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2220      	movs	r2, #32
 800b458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2220      	movs	r2, #32
 800b460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b08a      	sub	sp, #40	; 0x28
 800b472:	af02      	add	r7, sp, #8
 800b474:	60f8      	str	r0, [r7, #12]
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	603b      	str	r3, [r7, #0]
 800b47a:	4613      	mov	r3, r2
 800b47c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	2b20      	cmp	r3, #32
 800b48c:	d17c      	bne.n	800b588 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <HAL_UART_Transmit+0x2c>
 800b494:	88fb      	ldrh	r3, [r7, #6]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e075      	b.n	800b58a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d101      	bne.n	800b4ac <HAL_UART_Transmit+0x3e>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	e06e      	b.n	800b58a <HAL_UART_Transmit+0x11c>
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2221      	movs	r2, #33	; 0x21
 800b4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4c2:	f7fb fa69 	bl	8006998 <HAL_GetTick>
 800b4c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	88fa      	ldrh	r2, [r7, #6]
 800b4cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	88fa      	ldrh	r2, [r7, #6]
 800b4d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4dc:	d108      	bne.n	800b4f0 <HAL_UART_Transmit+0x82>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d104      	bne.n	800b4f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	61bb      	str	r3, [r7, #24]
 800b4ee:	e003      	b.n	800b4f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b500:	e02a      	b.n	800b558 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2200      	movs	r2, #0
 800b50a:	2180      	movs	r1, #128	; 0x80
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 fb1f 	bl	800bb50 <UART_WaitOnFlagUntilTimeout>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b518:	2303      	movs	r3, #3
 800b51a:	e036      	b.n	800b58a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10b      	bne.n	800b53a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	881b      	ldrh	r3, [r3, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b530:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	3302      	adds	r3, #2
 800b536:	61bb      	str	r3, [r7, #24]
 800b538:	e007      	b.n	800b54a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	781a      	ldrb	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	3301      	adds	r3, #1
 800b548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b54e:	b29b      	uxth	r3, r3
 800b550:	3b01      	subs	r3, #1
 800b552:	b29a      	uxth	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1cf      	bne.n	800b502 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2200      	movs	r2, #0
 800b56a:	2140      	movs	r1, #64	; 0x40
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 faef 	bl	800bb50 <UART_WaitOnFlagUntilTimeout>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e006      	b.n	800b58a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2220      	movs	r2, #32
 800b580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	e000      	b.n	800b58a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b588:	2302      	movs	r3, #2
  }
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3720      	adds	r7, #32
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	60f8      	str	r0, [r7, #12]
 800b59a:	60b9      	str	r1, [r7, #8]
 800b59c:	4613      	mov	r3, r2
 800b59e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b20      	cmp	r3, #32
 800b5aa:	d11d      	bne.n	800b5e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d002      	beq.n	800b5b8 <HAL_UART_Receive_IT+0x26>
 800b5b2:	88fb      	ldrh	r3, [r7, #6]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e016      	b.n	800b5ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d101      	bne.n	800b5ca <HAL_UART_Receive_IT+0x38>
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	e00f      	b.n	800b5ea <HAL_UART_Receive_IT+0x58>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b5d8:	88fb      	ldrh	r3, [r7, #6]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	68b9      	ldr	r1, [r7, #8]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 fb24 	bl	800bc2c <UART_Start_Receive_IT>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	e000      	b.n	800b5ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b5e8:	2302      	movs	r3, #2
  }
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b0ba      	sub	sp, #232	; 0xe8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b620:	2300      	movs	r3, #0
 800b622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b62a:	f003 030f 	and.w	r3, r3, #15
 800b62e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10f      	bne.n	800b65a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63e:	f003 0320 	and.w	r3, r3, #32
 800b642:	2b00      	cmp	r3, #0
 800b644:	d009      	beq.n	800b65a <HAL_UART_IRQHandler+0x66>
 800b646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b64a:	f003 0320 	and.w	r3, r3, #32
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fc03 	bl	800be5e <UART_Receive_IT>
      return;
 800b658:	e256      	b.n	800bb08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b65a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 80de 	beq.w	800b820 <HAL_UART_IRQHandler+0x22c>
 800b664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b674:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 80d1 	beq.w	800b820 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00b      	beq.n	800b6a2 <HAL_UART_IRQHandler+0xae>
 800b68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b68e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b692:	2b00      	cmp	r3, #0
 800b694:	d005      	beq.n	800b6a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69a:	f043 0201 	orr.w	r2, r3, #1
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a6:	f003 0304 	and.w	r3, r3, #4
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00b      	beq.n	800b6c6 <HAL_UART_IRQHandler+0xd2>
 800b6ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6be:	f043 0202 	orr.w	r2, r3, #2
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ca:	f003 0302 	and.w	r3, r3, #2
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00b      	beq.n	800b6ea <HAL_UART_IRQHandler+0xf6>
 800b6d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d005      	beq.n	800b6ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e2:	f043 0204 	orr.w	r2, r3, #4
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ee:	f003 0308 	and.w	r3, r3, #8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d011      	beq.n	800b71a <HAL_UART_IRQHandler+0x126>
 800b6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d105      	bne.n	800b70e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d005      	beq.n	800b71a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b712:	f043 0208 	orr.w	r2, r3, #8
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 81ed 	beq.w	800bafe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b728:	f003 0320 	and.w	r3, r3, #32
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d008      	beq.n	800b742 <HAL_UART_IRQHandler+0x14e>
 800b730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b734:	f003 0320 	and.w	r3, r3, #32
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fb8e 	bl	800be5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74c:	2b40      	cmp	r3, #64	; 0x40
 800b74e:	bf0c      	ite	eq
 800b750:	2301      	moveq	r3, #1
 800b752:	2300      	movne	r3, #0
 800b754:	b2db      	uxtb	r3, r3
 800b756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75e:	f003 0308 	and.w	r3, r3, #8
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <HAL_UART_IRQHandler+0x17a>
 800b766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d04f      	beq.n	800b80e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fa96 	bl	800bca0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	d141      	bne.n	800b806 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3314      	adds	r3, #20
 800b788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b790:	e853 3f00 	ldrex	r3, [r3]
 800b794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b79c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3314      	adds	r3, #20
 800b7aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b7b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7be:	e841 2300 	strex	r3, r2, [r1]
 800b7c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1d9      	bne.n	800b782 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d013      	beq.n	800b7fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7da:	4a7d      	ldr	r2, [pc, #500]	; (800b9d0 <HAL_UART_IRQHandler+0x3dc>)
 800b7dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fb ffa2 	bl	800772c <HAL_DMA_Abort_IT>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d016      	beq.n	800b81c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7fc:	e00e      	b.n	800b81c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f990 	bl	800bb24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b804:	e00a      	b.n	800b81c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f98c 	bl	800bb24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b80c:	e006      	b.n	800b81c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f988 	bl	800bb24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b81a:	e170      	b.n	800bafe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b81c:	bf00      	nop
    return;
 800b81e:	e16e      	b.n	800bafe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b824:	2b01      	cmp	r3, #1
 800b826:	f040 814a 	bne.w	800babe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b82e:	f003 0310 	and.w	r3, r3, #16
 800b832:	2b00      	cmp	r3, #0
 800b834:	f000 8143 	beq.w	800babe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b83c:	f003 0310 	and.w	r3, r3, #16
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 813c 	beq.w	800babe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b846:	2300      	movs	r3, #0
 800b848:	60bb      	str	r3, [r7, #8]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	60bb      	str	r3, [r7, #8]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	60bb      	str	r3, [r7, #8]
 800b85a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b866:	2b40      	cmp	r3, #64	; 0x40
 800b868:	f040 80b4 	bne.w	800b9d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b878:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 8140 	beq.w	800bb02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b88a:	429a      	cmp	r2, r3
 800b88c:	f080 8139 	bcs.w	800bb02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b896:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	f000 8088 	beq.w	800b9b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	330c      	adds	r3, #12
 800b8ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b8bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b8d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b8de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b8ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1d9      	bne.n	800b8a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3314      	adds	r3, #20
 800b8f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8fc:	e853 3f00 	ldrex	r3, [r3]
 800b900:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b904:	f023 0301 	bic.w	r3, r3, #1
 800b908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3314      	adds	r3, #20
 800b912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b916:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b91a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b91e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e1      	bne.n	800b8f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3314      	adds	r3, #20
 800b934:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b93e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3314      	adds	r3, #20
 800b94e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b952:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b954:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b956:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b95a:	e841 2300 	strex	r3, r2, [r1]
 800b95e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1e3      	bne.n	800b92e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2220      	movs	r2, #32
 800b96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	330c      	adds	r3, #12
 800b97a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b986:	f023 0310 	bic.w	r3, r3, #16
 800b98a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	330c      	adds	r3, #12
 800b994:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b998:	65ba      	str	r2, [r7, #88]	; 0x58
 800b99a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b99e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e3      	bne.n	800b974 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fb fe4b 	bl	800764c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f8b6 	bl	800bb38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9cc:	e099      	b.n	800bb02 <HAL_UART_IRQHandler+0x50e>
 800b9ce:	bf00      	nop
 800b9d0:	0800bd67 	.word	0x0800bd67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f000 808b 	beq.w	800bb06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b9f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 8086 	beq.w	800bb06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	330c      	adds	r3, #12
 800ba00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	e853 3f00 	ldrex	r3, [r3]
 800ba08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	330c      	adds	r3, #12
 800ba1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba1e:	647a      	str	r2, [r7, #68]	; 0x44
 800ba20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e3      	bne.n	800b9fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3314      	adds	r3, #20
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	e853 3f00 	ldrex	r3, [r3]
 800ba40:	623b      	str	r3, [r7, #32]
   return(result);
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	f023 0301 	bic.w	r3, r3, #1
 800ba48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3314      	adds	r3, #20
 800ba52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba56:	633a      	str	r2, [r7, #48]	; 0x30
 800ba58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba5e:	e841 2300 	strex	r3, r2, [r1]
 800ba62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1e3      	bne.n	800ba32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2220      	movs	r2, #32
 800ba6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	330c      	adds	r3, #12
 800ba7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	e853 3f00 	ldrex	r3, [r3]
 800ba86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f023 0310 	bic.w	r3, r3, #16
 800ba8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	330c      	adds	r3, #12
 800ba98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba9c:	61fa      	str	r2, [r7, #28]
 800ba9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa0:	69b9      	ldr	r1, [r7, #24]
 800baa2:	69fa      	ldr	r2, [r7, #28]
 800baa4:	e841 2300 	strex	r3, r2, [r1]
 800baa8:	617b      	str	r3, [r7, #20]
   return(result);
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e3      	bne.n	800ba78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f83e 	bl	800bb38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800babc:	e023      	b.n	800bb06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800babe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d009      	beq.n	800bade <HAL_UART_IRQHandler+0x4ea>
 800baca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f959 	bl	800bd8e <UART_Transmit_IT>
    return;
 800badc:	e014      	b.n	800bb08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00e      	beq.n	800bb08 <HAL_UART_IRQHandler+0x514>
 800baea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d008      	beq.n	800bb08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f999 	bl	800be2e <UART_EndTransmit_IT>
    return;
 800bafc:	e004      	b.n	800bb08 <HAL_UART_IRQHandler+0x514>
    return;
 800bafe:	bf00      	nop
 800bb00:	e002      	b.n	800bb08 <HAL_UART_IRQHandler+0x514>
      return;
 800bb02:	bf00      	nop
 800bb04:	e000      	b.n	800bb08 <HAL_UART_IRQHandler+0x514>
      return;
 800bb06:	bf00      	nop
  }
}
 800bb08:	37e8      	adds	r7, #232	; 0xe8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop

0800bb10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b090      	sub	sp, #64	; 0x40
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb60:	e050      	b.n	800bc04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb68:	d04c      	beq.n	800bc04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bb6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb70:	f7fa ff12 	bl	8006998 <HAL_GetTick>
 800bb74:	4602      	mov	r2, r0
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d241      	bcs.n	800bc04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	330c      	adds	r3, #12
 800bb86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8a:	e853 3f00 	ldrex	r3, [r3]
 800bb8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	330c      	adds	r3, #12
 800bb9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bba0:	637a      	str	r2, [r7, #52]	; 0x34
 800bba2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba8:	e841 2300 	strex	r3, r2, [r1]
 800bbac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1e5      	bne.n	800bb80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3314      	adds	r3, #20
 800bbba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	e853 3f00 	ldrex	r3, [r3]
 800bbc2:	613b      	str	r3, [r7, #16]
   return(result);
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	f023 0301 	bic.w	r3, r3, #1
 800bbca:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3314      	adds	r3, #20
 800bbd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd4:	623a      	str	r2, [r7, #32]
 800bbd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd8:	69f9      	ldr	r1, [r7, #28]
 800bbda:	6a3a      	ldr	r2, [r7, #32]
 800bbdc:	e841 2300 	strex	r3, r2, [r1]
 800bbe0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1e5      	bne.n	800bbb4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2220      	movs	r2, #32
 800bbec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2220      	movs	r2, #32
 800bbf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e00f      	b.n	800bc24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	bf0c      	ite	eq
 800bc14:	2301      	moveq	r3, #1
 800bc16:	2300      	movne	r3, #0
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d09f      	beq.n	800bb62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3740      	adds	r7, #64	; 0x40
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	4613      	mov	r3, r2
 800bc38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	88fa      	ldrh	r2, [r7, #6]
 800bc44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	88fa      	ldrh	r2, [r7, #6]
 800bc4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2222      	movs	r2, #34	; 0x22
 800bc56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68da      	ldr	r2, [r3, #12]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc70:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	695a      	ldr	r2, [r3, #20]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f042 0201 	orr.w	r2, r2, #1
 800bc80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68da      	ldr	r2, [r3, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f042 0220 	orr.w	r2, r2, #32
 800bc90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b095      	sub	sp, #84	; 0x54
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	330c      	adds	r3, #12
 800bcae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	330c      	adds	r3, #12
 800bcc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcc8:	643a      	str	r2, [r7, #64]	; 0x40
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e5      	bne.n	800bca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	3314      	adds	r3, #20
 800bce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	e853 3f00 	ldrex	r3, [r3]
 800bcea:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	f023 0301 	bic.w	r3, r3, #1
 800bcf2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3314      	adds	r3, #20
 800bcfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd04:	e841 2300 	strex	r3, r2, [r1]
 800bd08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1e5      	bne.n	800bcdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d119      	bne.n	800bd4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	330c      	adds	r3, #12
 800bd1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	e853 3f00 	ldrex	r3, [r3]
 800bd26:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f023 0310 	bic.w	r3, r3, #16
 800bd2e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	330c      	adds	r3, #12
 800bd36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd38:	61ba      	str	r2, [r7, #24]
 800bd3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	6979      	ldr	r1, [r7, #20]
 800bd3e:	69ba      	ldr	r2, [r7, #24]
 800bd40:	e841 2300 	strex	r3, r2, [r1]
 800bd44:	613b      	str	r3, [r7, #16]
   return(result);
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e5      	bne.n	800bd18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2220      	movs	r2, #32
 800bd50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bd5a:	bf00      	nop
 800bd5c:	3754      	adds	r7, #84	; 0x54
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f7ff fecf 	bl	800bb24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd86:	bf00      	nop
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b21      	cmp	r3, #33	; 0x21
 800bda0:	d13e      	bne.n	800be20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdaa:	d114      	bne.n	800bdd6 <UART_Transmit_IT+0x48>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d110      	bne.n	800bdd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a1b      	ldr	r3, [r3, #32]
 800bdce:	1c9a      	adds	r2, r3, #2
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	621a      	str	r2, [r3, #32]
 800bdd4:	e008      	b.n	800bde8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	1c59      	adds	r1, r3, #1
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	6211      	str	r1, [r2, #32]
 800bde0:	781a      	ldrb	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10f      	bne.n	800be1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68da      	ldr	r2, [r3, #12]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68da      	ldr	r2, [r3, #12]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	e000      	b.n	800be22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be20:	2302      	movs	r3, #2
  }
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68da      	ldr	r2, [r3, #12]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2220      	movs	r2, #32
 800be4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff fe5e 	bl	800bb10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b08c      	sub	sp, #48	; 0x30
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b22      	cmp	r3, #34	; 0x22
 800be70:	f040 80ab 	bne.w	800bfca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be7c:	d117      	bne.n	800beae <UART_Receive_IT+0x50>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d113      	bne.n	800beae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be86:	2300      	movs	r3, #0
 800be88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	b29b      	uxth	r3, r3
 800be98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea6:	1c9a      	adds	r2, r3, #2
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	629a      	str	r2, [r3, #40]	; 0x28
 800beac:	e026      	b.n	800befc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800beb4:	2300      	movs	r3, #0
 800beb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec0:	d007      	beq.n	800bed2 <UART_Receive_IT+0x74>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <UART_Receive_IT+0x82>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	e008      	b.n	800bef2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beec:	b2da      	uxtb	r2, r3
 800beee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	3b01      	subs	r3, #1
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d15a      	bne.n	800bfc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68da      	ldr	r2, [r3, #12]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f022 0220 	bic.w	r2, r2, #32
 800bf1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68da      	ldr	r2, [r3, #12]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	695a      	ldr	r2, [r3, #20]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f022 0201 	bic.w	r2, r2, #1
 800bf3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2220      	movs	r2, #32
 800bf44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d135      	bne.n	800bfbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	330c      	adds	r3, #12
 800bf5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	e853 3f00 	ldrex	r3, [r3]
 800bf64:	613b      	str	r3, [r7, #16]
   return(result);
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	f023 0310 	bic.w	r3, r3, #16
 800bf6c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	330c      	adds	r3, #12
 800bf74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf76:	623a      	str	r2, [r7, #32]
 800bf78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7a:	69f9      	ldr	r1, [r7, #28]
 800bf7c:	6a3a      	ldr	r2, [r7, #32]
 800bf7e:	e841 2300 	strex	r3, r2, [r1]
 800bf82:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e5      	bne.n	800bf56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0310 	and.w	r3, r3, #16
 800bf94:	2b10      	cmp	r3, #16
 800bf96:	d10a      	bne.n	800bfae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7ff fdbf 	bl	800bb38 <HAL_UARTEx_RxEventCallback>
 800bfba:	e002      	b.n	800bfc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7fa fb3d 	bl	800663c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e002      	b.n	800bfcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e000      	b.n	800bfcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bfca:	2302      	movs	r3, #2
  }
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3730      	adds	r7, #48	; 0x30
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfd8:	b0c0      	sub	sp, #256	; 0x100
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bfec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bff0:	68d9      	ldr	r1, [r3, #12]
 800bff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	ea40 0301 	orr.w	r3, r0, r1
 800bffc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c002:	689a      	ldr	r2, [r3, #8]
 800c004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	431a      	orrs	r2, r3
 800c00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	431a      	orrs	r2, r3
 800c014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c018:	69db      	ldr	r3, [r3, #28]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c02c:	f021 010c 	bic.w	r1, r1, #12
 800c030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c03a:	430b      	orrs	r3, r1
 800c03c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c04e:	6999      	ldr	r1, [r3, #24]
 800c050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	ea40 0301 	orr.w	r3, r0, r1
 800c05a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	4b8f      	ldr	r3, [pc, #572]	; (800c2a0 <UART_SetConfig+0x2cc>)
 800c064:	429a      	cmp	r2, r3
 800c066:	d005      	beq.n	800c074 <UART_SetConfig+0xa0>
 800c068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	4b8d      	ldr	r3, [pc, #564]	; (800c2a4 <UART_SetConfig+0x2d0>)
 800c070:	429a      	cmp	r2, r3
 800c072:	d104      	bne.n	800c07e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c074:	f7fd fbf8 	bl	8009868 <HAL_RCC_GetPCLK2Freq>
 800c078:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c07c:	e003      	b.n	800c086 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c07e:	f7fd fbdf 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800c082:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c090:	f040 810c 	bne.w	800c2ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c098:	2200      	movs	r2, #0
 800c09a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c09e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c0a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c0a6:	4622      	mov	r2, r4
 800c0a8:	462b      	mov	r3, r5
 800c0aa:	1891      	adds	r1, r2, r2
 800c0ac:	65b9      	str	r1, [r7, #88]	; 0x58
 800c0ae:	415b      	adcs	r3, r3
 800c0b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	eb12 0801 	adds.w	r8, r2, r1
 800c0bc:	4629      	mov	r1, r5
 800c0be:	eb43 0901 	adc.w	r9, r3, r1
 800c0c2:	f04f 0200 	mov.w	r2, #0
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c0ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c0d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c0d6:	4690      	mov	r8, r2
 800c0d8:	4699      	mov	r9, r3
 800c0da:	4623      	mov	r3, r4
 800c0dc:	eb18 0303 	adds.w	r3, r8, r3
 800c0e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0e4:	462b      	mov	r3, r5
 800c0e6:	eb49 0303 	adc.w	r3, r9, r3
 800c0ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c0ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c0fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c0fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c102:	460b      	mov	r3, r1
 800c104:	18db      	adds	r3, r3, r3
 800c106:	653b      	str	r3, [r7, #80]	; 0x50
 800c108:	4613      	mov	r3, r2
 800c10a:	eb42 0303 	adc.w	r3, r2, r3
 800c10e:	657b      	str	r3, [r7, #84]	; 0x54
 800c110:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c114:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c118:	f7f4 fdb6 	bl	8000c88 <__aeabi_uldivmod>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4b61      	ldr	r3, [pc, #388]	; (800c2a8 <UART_SetConfig+0x2d4>)
 800c122:	fba3 2302 	umull	r2, r3, r3, r2
 800c126:	095b      	lsrs	r3, r3, #5
 800c128:	011c      	lsls	r4, r3, #4
 800c12a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c12e:	2200      	movs	r2, #0
 800c130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c134:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c138:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c13c:	4642      	mov	r2, r8
 800c13e:	464b      	mov	r3, r9
 800c140:	1891      	adds	r1, r2, r2
 800c142:	64b9      	str	r1, [r7, #72]	; 0x48
 800c144:	415b      	adcs	r3, r3
 800c146:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c148:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c14c:	4641      	mov	r1, r8
 800c14e:	eb12 0a01 	adds.w	sl, r2, r1
 800c152:	4649      	mov	r1, r9
 800c154:	eb43 0b01 	adc.w	fp, r3, r1
 800c158:	f04f 0200 	mov.w	r2, #0
 800c15c:	f04f 0300 	mov.w	r3, #0
 800c160:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c164:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c168:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c16c:	4692      	mov	sl, r2
 800c16e:	469b      	mov	fp, r3
 800c170:	4643      	mov	r3, r8
 800c172:	eb1a 0303 	adds.w	r3, sl, r3
 800c176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c17a:	464b      	mov	r3, r9
 800c17c:	eb4b 0303 	adc.w	r3, fp, r3
 800c180:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c190:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c194:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c198:	460b      	mov	r3, r1
 800c19a:	18db      	adds	r3, r3, r3
 800c19c:	643b      	str	r3, [r7, #64]	; 0x40
 800c19e:	4613      	mov	r3, r2
 800c1a0:	eb42 0303 	adc.w	r3, r2, r3
 800c1a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c1a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c1aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c1ae:	f7f4 fd6b 	bl	8000c88 <__aeabi_uldivmod>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4611      	mov	r1, r2
 800c1b8:	4b3b      	ldr	r3, [pc, #236]	; (800c2a8 <UART_SetConfig+0x2d4>)
 800c1ba:	fba3 2301 	umull	r2, r3, r3, r1
 800c1be:	095b      	lsrs	r3, r3, #5
 800c1c0:	2264      	movs	r2, #100	; 0x64
 800c1c2:	fb02 f303 	mul.w	r3, r2, r3
 800c1c6:	1acb      	subs	r3, r1, r3
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c1ce:	4b36      	ldr	r3, [pc, #216]	; (800c2a8 <UART_SetConfig+0x2d4>)
 800c1d0:	fba3 2302 	umull	r2, r3, r3, r2
 800c1d4:	095b      	lsrs	r3, r3, #5
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c1dc:	441c      	add	r4, r3
 800c1de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c1ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c1f0:	4642      	mov	r2, r8
 800c1f2:	464b      	mov	r3, r9
 800c1f4:	1891      	adds	r1, r2, r2
 800c1f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c1f8:	415b      	adcs	r3, r3
 800c1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c200:	4641      	mov	r1, r8
 800c202:	1851      	adds	r1, r2, r1
 800c204:	6339      	str	r1, [r7, #48]	; 0x30
 800c206:	4649      	mov	r1, r9
 800c208:	414b      	adcs	r3, r1
 800c20a:	637b      	str	r3, [r7, #52]	; 0x34
 800c20c:	f04f 0200 	mov.w	r2, #0
 800c210:	f04f 0300 	mov.w	r3, #0
 800c214:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c218:	4659      	mov	r1, fp
 800c21a:	00cb      	lsls	r3, r1, #3
 800c21c:	4651      	mov	r1, sl
 800c21e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c222:	4651      	mov	r1, sl
 800c224:	00ca      	lsls	r2, r1, #3
 800c226:	4610      	mov	r0, r2
 800c228:	4619      	mov	r1, r3
 800c22a:	4603      	mov	r3, r0
 800c22c:	4642      	mov	r2, r8
 800c22e:	189b      	adds	r3, r3, r2
 800c230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c234:	464b      	mov	r3, r9
 800c236:	460a      	mov	r2, r1
 800c238:	eb42 0303 	adc.w	r3, r2, r3
 800c23c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c24c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c250:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c254:	460b      	mov	r3, r1
 800c256:	18db      	adds	r3, r3, r3
 800c258:	62bb      	str	r3, [r7, #40]	; 0x28
 800c25a:	4613      	mov	r3, r2
 800c25c:	eb42 0303 	adc.w	r3, r2, r3
 800c260:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c262:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c266:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c26a:	f7f4 fd0d 	bl	8000c88 <__aeabi_uldivmod>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	4b0d      	ldr	r3, [pc, #52]	; (800c2a8 <UART_SetConfig+0x2d4>)
 800c274:	fba3 1302 	umull	r1, r3, r3, r2
 800c278:	095b      	lsrs	r3, r3, #5
 800c27a:	2164      	movs	r1, #100	; 0x64
 800c27c:	fb01 f303 	mul.w	r3, r1, r3
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	3332      	adds	r3, #50	; 0x32
 800c286:	4a08      	ldr	r2, [pc, #32]	; (800c2a8 <UART_SetConfig+0x2d4>)
 800c288:	fba2 2303 	umull	r2, r3, r2, r3
 800c28c:	095b      	lsrs	r3, r3, #5
 800c28e:	f003 0207 	and.w	r2, r3, #7
 800c292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4422      	add	r2, r4
 800c29a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c29c:	e106      	b.n	800c4ac <UART_SetConfig+0x4d8>
 800c29e:	bf00      	nop
 800c2a0:	40011000 	.word	0x40011000
 800c2a4:	40011400 	.word	0x40011400
 800c2a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c2b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c2ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c2be:	4642      	mov	r2, r8
 800c2c0:	464b      	mov	r3, r9
 800c2c2:	1891      	adds	r1, r2, r2
 800c2c4:	6239      	str	r1, [r7, #32]
 800c2c6:	415b      	adcs	r3, r3
 800c2c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c2ce:	4641      	mov	r1, r8
 800c2d0:	1854      	adds	r4, r2, r1
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	eb43 0501 	adc.w	r5, r3, r1
 800c2d8:	f04f 0200 	mov.w	r2, #0
 800c2dc:	f04f 0300 	mov.w	r3, #0
 800c2e0:	00eb      	lsls	r3, r5, #3
 800c2e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c2e6:	00e2      	lsls	r2, r4, #3
 800c2e8:	4614      	mov	r4, r2
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	4643      	mov	r3, r8
 800c2ee:	18e3      	adds	r3, r4, r3
 800c2f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2f4:	464b      	mov	r3, r9
 800c2f6:	eb45 0303 	adc.w	r3, r5, r3
 800c2fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c30a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c30e:	f04f 0200 	mov.w	r2, #0
 800c312:	f04f 0300 	mov.w	r3, #0
 800c316:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c31a:	4629      	mov	r1, r5
 800c31c:	008b      	lsls	r3, r1, #2
 800c31e:	4621      	mov	r1, r4
 800c320:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c324:	4621      	mov	r1, r4
 800c326:	008a      	lsls	r2, r1, #2
 800c328:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c32c:	f7f4 fcac 	bl	8000c88 <__aeabi_uldivmod>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	4b60      	ldr	r3, [pc, #384]	; (800c4b8 <UART_SetConfig+0x4e4>)
 800c336:	fba3 2302 	umull	r2, r3, r3, r2
 800c33a:	095b      	lsrs	r3, r3, #5
 800c33c:	011c      	lsls	r4, r3, #4
 800c33e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c342:	2200      	movs	r2, #0
 800c344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c348:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c34c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c350:	4642      	mov	r2, r8
 800c352:	464b      	mov	r3, r9
 800c354:	1891      	adds	r1, r2, r2
 800c356:	61b9      	str	r1, [r7, #24]
 800c358:	415b      	adcs	r3, r3
 800c35a:	61fb      	str	r3, [r7, #28]
 800c35c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c360:	4641      	mov	r1, r8
 800c362:	1851      	adds	r1, r2, r1
 800c364:	6139      	str	r1, [r7, #16]
 800c366:	4649      	mov	r1, r9
 800c368:	414b      	adcs	r3, r1
 800c36a:	617b      	str	r3, [r7, #20]
 800c36c:	f04f 0200 	mov.w	r2, #0
 800c370:	f04f 0300 	mov.w	r3, #0
 800c374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c378:	4659      	mov	r1, fp
 800c37a:	00cb      	lsls	r3, r1, #3
 800c37c:	4651      	mov	r1, sl
 800c37e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c382:	4651      	mov	r1, sl
 800c384:	00ca      	lsls	r2, r1, #3
 800c386:	4610      	mov	r0, r2
 800c388:	4619      	mov	r1, r3
 800c38a:	4603      	mov	r3, r0
 800c38c:	4642      	mov	r2, r8
 800c38e:	189b      	adds	r3, r3, r2
 800c390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c394:	464b      	mov	r3, r9
 800c396:	460a      	mov	r2, r1
 800c398:	eb42 0303 	adc.w	r3, r2, r3
 800c39c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c3ac:	f04f 0200 	mov.w	r2, #0
 800c3b0:	f04f 0300 	mov.w	r3, #0
 800c3b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	008b      	lsls	r3, r1, #2
 800c3bc:	4641      	mov	r1, r8
 800c3be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3c2:	4641      	mov	r1, r8
 800c3c4:	008a      	lsls	r2, r1, #2
 800c3c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c3ca:	f7f4 fc5d 	bl	8000c88 <__aeabi_uldivmod>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	4b38      	ldr	r3, [pc, #224]	; (800c4b8 <UART_SetConfig+0x4e4>)
 800c3d6:	fba3 2301 	umull	r2, r3, r3, r1
 800c3da:	095b      	lsrs	r3, r3, #5
 800c3dc:	2264      	movs	r2, #100	; 0x64
 800c3de:	fb02 f303 	mul.w	r3, r2, r3
 800c3e2:	1acb      	subs	r3, r1, r3
 800c3e4:	011b      	lsls	r3, r3, #4
 800c3e6:	3332      	adds	r3, #50	; 0x32
 800c3e8:	4a33      	ldr	r2, [pc, #204]	; (800c4b8 <UART_SetConfig+0x4e4>)
 800c3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ee:	095b      	lsrs	r3, r3, #5
 800c3f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3f4:	441c      	add	r4, r3
 800c3f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	673b      	str	r3, [r7, #112]	; 0x70
 800c3fe:	677a      	str	r2, [r7, #116]	; 0x74
 800c400:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c404:	4642      	mov	r2, r8
 800c406:	464b      	mov	r3, r9
 800c408:	1891      	adds	r1, r2, r2
 800c40a:	60b9      	str	r1, [r7, #8]
 800c40c:	415b      	adcs	r3, r3
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c414:	4641      	mov	r1, r8
 800c416:	1851      	adds	r1, r2, r1
 800c418:	6039      	str	r1, [r7, #0]
 800c41a:	4649      	mov	r1, r9
 800c41c:	414b      	adcs	r3, r1
 800c41e:	607b      	str	r3, [r7, #4]
 800c420:	f04f 0200 	mov.w	r2, #0
 800c424:	f04f 0300 	mov.w	r3, #0
 800c428:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c42c:	4659      	mov	r1, fp
 800c42e:	00cb      	lsls	r3, r1, #3
 800c430:	4651      	mov	r1, sl
 800c432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c436:	4651      	mov	r1, sl
 800c438:	00ca      	lsls	r2, r1, #3
 800c43a:	4610      	mov	r0, r2
 800c43c:	4619      	mov	r1, r3
 800c43e:	4603      	mov	r3, r0
 800c440:	4642      	mov	r2, r8
 800c442:	189b      	adds	r3, r3, r2
 800c444:	66bb      	str	r3, [r7, #104]	; 0x68
 800c446:	464b      	mov	r3, r9
 800c448:	460a      	mov	r2, r1
 800c44a:	eb42 0303 	adc.w	r3, r2, r3
 800c44e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	663b      	str	r3, [r7, #96]	; 0x60
 800c45a:	667a      	str	r2, [r7, #100]	; 0x64
 800c45c:	f04f 0200 	mov.w	r2, #0
 800c460:	f04f 0300 	mov.w	r3, #0
 800c464:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c468:	4649      	mov	r1, r9
 800c46a:	008b      	lsls	r3, r1, #2
 800c46c:	4641      	mov	r1, r8
 800c46e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c472:	4641      	mov	r1, r8
 800c474:	008a      	lsls	r2, r1, #2
 800c476:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c47a:	f7f4 fc05 	bl	8000c88 <__aeabi_uldivmod>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4b0d      	ldr	r3, [pc, #52]	; (800c4b8 <UART_SetConfig+0x4e4>)
 800c484:	fba3 1302 	umull	r1, r3, r3, r2
 800c488:	095b      	lsrs	r3, r3, #5
 800c48a:	2164      	movs	r1, #100	; 0x64
 800c48c:	fb01 f303 	mul.w	r3, r1, r3
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	011b      	lsls	r3, r3, #4
 800c494:	3332      	adds	r3, #50	; 0x32
 800c496:	4a08      	ldr	r2, [pc, #32]	; (800c4b8 <UART_SetConfig+0x4e4>)
 800c498:	fba2 2303 	umull	r2, r3, r2, r3
 800c49c:	095b      	lsrs	r3, r3, #5
 800c49e:	f003 020f 	and.w	r2, r3, #15
 800c4a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4422      	add	r2, r4
 800c4aa:	609a      	str	r2, [r3, #8]
}
 800c4ac:	bf00      	nop
 800c4ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4b8:	51eb851f 	.word	0x51eb851f

0800c4bc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	4b20      	ldr	r3, [pc, #128]	; (800c55c <FSMC_NORSRAM_Init+0xa0>)
 800c4da:	4013      	ands	r3, r2
 800c4dc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c4e6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c4ec:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c4f2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c4f8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800c4fe:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800c504:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c50a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800c510:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800c516:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800c51c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800c522:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800c528:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	2b08      	cmp	r3, #8
 800c536:	d103      	bne.n	800c540 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c53e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68f9      	ldr	r1, [r7, #12]
 800c548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	fff00080 	.word	0xfff00080

0800c560 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c560:	b480      	push	{r7}
 800c562:	b087      	sub	sp, #28
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c582:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c58e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c596:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c59e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c5a8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	3b02      	subs	r3, #2
 800c5b0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c5b2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6979      	ldr	r1, [r7, #20]
 800c5c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	371c      	adds	r7, #28
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
	...

0800c5dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
 800c5e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5f4:	d122      	bne.n	800c63c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	4b15      	ldr	r3, [pc, #84]	; (800c658 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800c604:	4013      	ands	r3, r2
 800c606:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c612:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c61a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800c622:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c628:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6979      	ldr	r1, [r7, #20]
 800c636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c63a:	e005      	b.n	800c648 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	371c      	adds	r7, #28
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	cff00000 	.word	0xcff00000

0800c65c <__itoa>:
 800c65c:	1e93      	subs	r3, r2, #2
 800c65e:	2b22      	cmp	r3, #34	; 0x22
 800c660:	b510      	push	{r4, lr}
 800c662:	460c      	mov	r4, r1
 800c664:	d904      	bls.n	800c670 <__itoa+0x14>
 800c666:	2300      	movs	r3, #0
 800c668:	700b      	strb	r3, [r1, #0]
 800c66a:	461c      	mov	r4, r3
 800c66c:	4620      	mov	r0, r4
 800c66e:	bd10      	pop	{r4, pc}
 800c670:	2a0a      	cmp	r2, #10
 800c672:	d109      	bne.n	800c688 <__itoa+0x2c>
 800c674:	2800      	cmp	r0, #0
 800c676:	da07      	bge.n	800c688 <__itoa+0x2c>
 800c678:	232d      	movs	r3, #45	; 0x2d
 800c67a:	700b      	strb	r3, [r1, #0]
 800c67c:	4240      	negs	r0, r0
 800c67e:	2101      	movs	r1, #1
 800c680:	4421      	add	r1, r4
 800c682:	f000 f843 	bl	800c70c <__utoa>
 800c686:	e7f1      	b.n	800c66c <__itoa+0x10>
 800c688:	2100      	movs	r1, #0
 800c68a:	e7f9      	b.n	800c680 <__itoa+0x24>

0800c68c <itoa>:
 800c68c:	f7ff bfe6 	b.w	800c65c <__itoa>

0800c690 <rand>:
 800c690:	4b16      	ldr	r3, [pc, #88]	; (800c6ec <rand+0x5c>)
 800c692:	b510      	push	{r4, lr}
 800c694:	681c      	ldr	r4, [r3, #0]
 800c696:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c698:	b9b3      	cbnz	r3, 800c6c8 <rand+0x38>
 800c69a:	2018      	movs	r0, #24
 800c69c:	f000 fa6c 	bl	800cb78 <malloc>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	6320      	str	r0, [r4, #48]	; 0x30
 800c6a4:	b920      	cbnz	r0, 800c6b0 <rand+0x20>
 800c6a6:	4b12      	ldr	r3, [pc, #72]	; (800c6f0 <rand+0x60>)
 800c6a8:	4812      	ldr	r0, [pc, #72]	; (800c6f4 <rand+0x64>)
 800c6aa:	2152      	movs	r1, #82	; 0x52
 800c6ac:	f000 f9fa 	bl	800caa4 <__assert_func>
 800c6b0:	4911      	ldr	r1, [pc, #68]	; (800c6f8 <rand+0x68>)
 800c6b2:	4b12      	ldr	r3, [pc, #72]	; (800c6fc <rand+0x6c>)
 800c6b4:	e9c0 1300 	strd	r1, r3, [r0]
 800c6b8:	4b11      	ldr	r3, [pc, #68]	; (800c700 <rand+0x70>)
 800c6ba:	6083      	str	r3, [r0, #8]
 800c6bc:	230b      	movs	r3, #11
 800c6be:	8183      	strh	r3, [r0, #12]
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	2001      	movs	r0, #1
 800c6c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c6c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c6ca:	480e      	ldr	r0, [pc, #56]	; (800c704 <rand+0x74>)
 800c6cc:	690b      	ldr	r3, [r1, #16]
 800c6ce:	694c      	ldr	r4, [r1, #20]
 800c6d0:	4a0d      	ldr	r2, [pc, #52]	; (800c708 <rand+0x78>)
 800c6d2:	4358      	muls	r0, r3
 800c6d4:	fb02 0004 	mla	r0, r2, r4, r0
 800c6d8:	fba3 3202 	umull	r3, r2, r3, r2
 800c6dc:	3301      	adds	r3, #1
 800c6de:	eb40 0002 	adc.w	r0, r0, r2
 800c6e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c6e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c6ea:	bd10      	pop	{r4, pc}
 800c6ec:	20000104 	.word	0x20000104
 800c6f0:	080e9b10 	.word	0x080e9b10
 800c6f4:	080e9b27 	.word	0x080e9b27
 800c6f8:	abcd330e 	.word	0xabcd330e
 800c6fc:	e66d1234 	.word	0xe66d1234
 800c700:	0005deec 	.word	0x0005deec
 800c704:	5851f42d 	.word	0x5851f42d
 800c708:	4c957f2d 	.word	0x4c957f2d

0800c70c <__utoa>:
 800c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c70e:	4c1f      	ldr	r4, [pc, #124]	; (800c78c <__utoa+0x80>)
 800c710:	b08b      	sub	sp, #44	; 0x2c
 800c712:	4605      	mov	r5, r0
 800c714:	460b      	mov	r3, r1
 800c716:	466e      	mov	r6, sp
 800c718:	f104 0c20 	add.w	ip, r4, #32
 800c71c:	6820      	ldr	r0, [r4, #0]
 800c71e:	6861      	ldr	r1, [r4, #4]
 800c720:	4637      	mov	r7, r6
 800c722:	c703      	stmia	r7!, {r0, r1}
 800c724:	3408      	adds	r4, #8
 800c726:	4564      	cmp	r4, ip
 800c728:	463e      	mov	r6, r7
 800c72a:	d1f7      	bne.n	800c71c <__utoa+0x10>
 800c72c:	7921      	ldrb	r1, [r4, #4]
 800c72e:	7139      	strb	r1, [r7, #4]
 800c730:	1e91      	subs	r1, r2, #2
 800c732:	6820      	ldr	r0, [r4, #0]
 800c734:	6038      	str	r0, [r7, #0]
 800c736:	2922      	cmp	r1, #34	; 0x22
 800c738:	f04f 0100 	mov.w	r1, #0
 800c73c:	d904      	bls.n	800c748 <__utoa+0x3c>
 800c73e:	7019      	strb	r1, [r3, #0]
 800c740:	460b      	mov	r3, r1
 800c742:	4618      	mov	r0, r3
 800c744:	b00b      	add	sp, #44	; 0x2c
 800c746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c748:	1e58      	subs	r0, r3, #1
 800c74a:	4684      	mov	ip, r0
 800c74c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c750:	fb02 5617 	mls	r6, r2, r7, r5
 800c754:	3628      	adds	r6, #40	; 0x28
 800c756:	446e      	add	r6, sp
 800c758:	460c      	mov	r4, r1
 800c75a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c75e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c762:	462e      	mov	r6, r5
 800c764:	42b2      	cmp	r2, r6
 800c766:	f101 0101 	add.w	r1, r1, #1
 800c76a:	463d      	mov	r5, r7
 800c76c:	d9ee      	bls.n	800c74c <__utoa+0x40>
 800c76e:	2200      	movs	r2, #0
 800c770:	545a      	strb	r2, [r3, r1]
 800c772:	1919      	adds	r1, r3, r4
 800c774:	1aa5      	subs	r5, r4, r2
 800c776:	42aa      	cmp	r2, r5
 800c778:	dae3      	bge.n	800c742 <__utoa+0x36>
 800c77a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c77e:	780e      	ldrb	r6, [r1, #0]
 800c780:	7006      	strb	r6, [r0, #0]
 800c782:	3201      	adds	r2, #1
 800c784:	f801 5901 	strb.w	r5, [r1], #-1
 800c788:	e7f4      	b.n	800c774 <__utoa+0x68>
 800c78a:	bf00      	nop
 800c78c:	080e9b7f 	.word	0x080e9b7f

0800c790 <std>:
 800c790:	2300      	movs	r3, #0
 800c792:	b510      	push	{r4, lr}
 800c794:	4604      	mov	r4, r0
 800c796:	e9c0 3300 	strd	r3, r3, [r0]
 800c79a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c79e:	6083      	str	r3, [r0, #8]
 800c7a0:	8181      	strh	r1, [r0, #12]
 800c7a2:	6643      	str	r3, [r0, #100]	; 0x64
 800c7a4:	81c2      	strh	r2, [r0, #14]
 800c7a6:	6183      	str	r3, [r0, #24]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	2208      	movs	r2, #8
 800c7ac:	305c      	adds	r0, #92	; 0x5c
 800c7ae:	f000 f8f4 	bl	800c99a <memset>
 800c7b2:	4b0d      	ldr	r3, [pc, #52]	; (800c7e8 <std+0x58>)
 800c7b4:	6263      	str	r3, [r4, #36]	; 0x24
 800c7b6:	4b0d      	ldr	r3, [pc, #52]	; (800c7ec <std+0x5c>)
 800c7b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7ba:	4b0d      	ldr	r3, [pc, #52]	; (800c7f0 <std+0x60>)
 800c7bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7be:	4b0d      	ldr	r3, [pc, #52]	; (800c7f4 <std+0x64>)
 800c7c0:	6323      	str	r3, [r4, #48]	; 0x30
 800c7c2:	4b0d      	ldr	r3, [pc, #52]	; (800c7f8 <std+0x68>)
 800c7c4:	6224      	str	r4, [r4, #32]
 800c7c6:	429c      	cmp	r4, r3
 800c7c8:	d006      	beq.n	800c7d8 <std+0x48>
 800c7ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c7ce:	4294      	cmp	r4, r2
 800c7d0:	d002      	beq.n	800c7d8 <std+0x48>
 800c7d2:	33d0      	adds	r3, #208	; 0xd0
 800c7d4:	429c      	cmp	r4, r3
 800c7d6:	d105      	bne.n	800c7e4 <std+0x54>
 800c7d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7e0:	f000 b954 	b.w	800ca8c <__retarget_lock_init_recursive>
 800c7e4:	bd10      	pop	{r4, pc}
 800c7e6:	bf00      	nop
 800c7e8:	0800c915 	.word	0x0800c915
 800c7ec:	0800c937 	.word	0x0800c937
 800c7f0:	0800c96f 	.word	0x0800c96f
 800c7f4:	0800c993 	.word	0x0800c993
 800c7f8:	20000588 	.word	0x20000588

0800c7fc <stdio_exit_handler>:
 800c7fc:	4a02      	ldr	r2, [pc, #8]	; (800c808 <stdio_exit_handler+0xc>)
 800c7fe:	4903      	ldr	r1, [pc, #12]	; (800c80c <stdio_exit_handler+0x10>)
 800c800:	4803      	ldr	r0, [pc, #12]	; (800c810 <stdio_exit_handler+0x14>)
 800c802:	f000 b869 	b.w	800c8d8 <_fwalk_sglue>
 800c806:	bf00      	nop
 800c808:	200000ac 	.word	0x200000ac
 800c80c:	0800d10d 	.word	0x0800d10d
 800c810:	200000b8 	.word	0x200000b8

0800c814 <cleanup_stdio>:
 800c814:	6841      	ldr	r1, [r0, #4]
 800c816:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <cleanup_stdio+0x34>)
 800c818:	4299      	cmp	r1, r3
 800c81a:	b510      	push	{r4, lr}
 800c81c:	4604      	mov	r4, r0
 800c81e:	d001      	beq.n	800c824 <cleanup_stdio+0x10>
 800c820:	f000 fc74 	bl	800d10c <_fflush_r>
 800c824:	68a1      	ldr	r1, [r4, #8]
 800c826:	4b09      	ldr	r3, [pc, #36]	; (800c84c <cleanup_stdio+0x38>)
 800c828:	4299      	cmp	r1, r3
 800c82a:	d002      	beq.n	800c832 <cleanup_stdio+0x1e>
 800c82c:	4620      	mov	r0, r4
 800c82e:	f000 fc6d 	bl	800d10c <_fflush_r>
 800c832:	68e1      	ldr	r1, [r4, #12]
 800c834:	4b06      	ldr	r3, [pc, #24]	; (800c850 <cleanup_stdio+0x3c>)
 800c836:	4299      	cmp	r1, r3
 800c838:	d004      	beq.n	800c844 <cleanup_stdio+0x30>
 800c83a:	4620      	mov	r0, r4
 800c83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c840:	f000 bc64 	b.w	800d10c <_fflush_r>
 800c844:	bd10      	pop	{r4, pc}
 800c846:	bf00      	nop
 800c848:	20000588 	.word	0x20000588
 800c84c:	200005f0 	.word	0x200005f0
 800c850:	20000658 	.word	0x20000658

0800c854 <global_stdio_init.part.0>:
 800c854:	b510      	push	{r4, lr}
 800c856:	4b0b      	ldr	r3, [pc, #44]	; (800c884 <global_stdio_init.part.0+0x30>)
 800c858:	4c0b      	ldr	r4, [pc, #44]	; (800c888 <global_stdio_init.part.0+0x34>)
 800c85a:	4a0c      	ldr	r2, [pc, #48]	; (800c88c <global_stdio_init.part.0+0x38>)
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	4620      	mov	r0, r4
 800c860:	2200      	movs	r2, #0
 800c862:	2104      	movs	r1, #4
 800c864:	f7ff ff94 	bl	800c790 <std>
 800c868:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c86c:	2201      	movs	r2, #1
 800c86e:	2109      	movs	r1, #9
 800c870:	f7ff ff8e 	bl	800c790 <std>
 800c874:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c878:	2202      	movs	r2, #2
 800c87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c87e:	2112      	movs	r1, #18
 800c880:	f7ff bf86 	b.w	800c790 <std>
 800c884:	200006c0 	.word	0x200006c0
 800c888:	20000588 	.word	0x20000588
 800c88c:	0800c7fd 	.word	0x0800c7fd

0800c890 <__sfp_lock_acquire>:
 800c890:	4801      	ldr	r0, [pc, #4]	; (800c898 <__sfp_lock_acquire+0x8>)
 800c892:	f000 b8fc 	b.w	800ca8e <__retarget_lock_acquire_recursive>
 800c896:	bf00      	nop
 800c898:	200006c9 	.word	0x200006c9

0800c89c <__sfp_lock_release>:
 800c89c:	4801      	ldr	r0, [pc, #4]	; (800c8a4 <__sfp_lock_release+0x8>)
 800c89e:	f000 b8f7 	b.w	800ca90 <__retarget_lock_release_recursive>
 800c8a2:	bf00      	nop
 800c8a4:	200006c9 	.word	0x200006c9

0800c8a8 <__sinit>:
 800c8a8:	b510      	push	{r4, lr}
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	f7ff fff0 	bl	800c890 <__sfp_lock_acquire>
 800c8b0:	6a23      	ldr	r3, [r4, #32]
 800c8b2:	b11b      	cbz	r3, 800c8bc <__sinit+0x14>
 800c8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8b8:	f7ff bff0 	b.w	800c89c <__sfp_lock_release>
 800c8bc:	4b04      	ldr	r3, [pc, #16]	; (800c8d0 <__sinit+0x28>)
 800c8be:	6223      	str	r3, [r4, #32]
 800c8c0:	4b04      	ldr	r3, [pc, #16]	; (800c8d4 <__sinit+0x2c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1f5      	bne.n	800c8b4 <__sinit+0xc>
 800c8c8:	f7ff ffc4 	bl	800c854 <global_stdio_init.part.0>
 800c8cc:	e7f2      	b.n	800c8b4 <__sinit+0xc>
 800c8ce:	bf00      	nop
 800c8d0:	0800c815 	.word	0x0800c815
 800c8d4:	200006c0 	.word	0x200006c0

0800c8d8 <_fwalk_sglue>:
 800c8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8dc:	4607      	mov	r7, r0
 800c8de:	4688      	mov	r8, r1
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	2600      	movs	r6, #0
 800c8e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8e8:	f1b9 0901 	subs.w	r9, r9, #1
 800c8ec:	d505      	bpl.n	800c8fa <_fwalk_sglue+0x22>
 800c8ee:	6824      	ldr	r4, [r4, #0]
 800c8f0:	2c00      	cmp	r4, #0
 800c8f2:	d1f7      	bne.n	800c8e4 <_fwalk_sglue+0xc>
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8fa:	89ab      	ldrh	r3, [r5, #12]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d907      	bls.n	800c910 <_fwalk_sglue+0x38>
 800c900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c904:	3301      	adds	r3, #1
 800c906:	d003      	beq.n	800c910 <_fwalk_sglue+0x38>
 800c908:	4629      	mov	r1, r5
 800c90a:	4638      	mov	r0, r7
 800c90c:	47c0      	blx	r8
 800c90e:	4306      	orrs	r6, r0
 800c910:	3568      	adds	r5, #104	; 0x68
 800c912:	e7e9      	b.n	800c8e8 <_fwalk_sglue+0x10>

0800c914 <__sread>:
 800c914:	b510      	push	{r4, lr}
 800c916:	460c      	mov	r4, r1
 800c918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c91c:	f000 f868 	bl	800c9f0 <_read_r>
 800c920:	2800      	cmp	r0, #0
 800c922:	bfab      	itete	ge
 800c924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c926:	89a3      	ldrhlt	r3, [r4, #12]
 800c928:	181b      	addge	r3, r3, r0
 800c92a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c92e:	bfac      	ite	ge
 800c930:	6563      	strge	r3, [r4, #84]	; 0x54
 800c932:	81a3      	strhlt	r3, [r4, #12]
 800c934:	bd10      	pop	{r4, pc}

0800c936 <__swrite>:
 800c936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93a:	461f      	mov	r7, r3
 800c93c:	898b      	ldrh	r3, [r1, #12]
 800c93e:	05db      	lsls	r3, r3, #23
 800c940:	4605      	mov	r5, r0
 800c942:	460c      	mov	r4, r1
 800c944:	4616      	mov	r6, r2
 800c946:	d505      	bpl.n	800c954 <__swrite+0x1e>
 800c948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c94c:	2302      	movs	r3, #2
 800c94e:	2200      	movs	r2, #0
 800c950:	f000 f83c 	bl	800c9cc <_lseek_r>
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c95a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c95e:	81a3      	strh	r3, [r4, #12]
 800c960:	4632      	mov	r2, r6
 800c962:	463b      	mov	r3, r7
 800c964:	4628      	mov	r0, r5
 800c966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c96a:	f000 b853 	b.w	800ca14 <_write_r>

0800c96e <__sseek>:
 800c96e:	b510      	push	{r4, lr}
 800c970:	460c      	mov	r4, r1
 800c972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c976:	f000 f829 	bl	800c9cc <_lseek_r>
 800c97a:	1c43      	adds	r3, r0, #1
 800c97c:	89a3      	ldrh	r3, [r4, #12]
 800c97e:	bf15      	itete	ne
 800c980:	6560      	strne	r0, [r4, #84]	; 0x54
 800c982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c98a:	81a3      	strheq	r3, [r4, #12]
 800c98c:	bf18      	it	ne
 800c98e:	81a3      	strhne	r3, [r4, #12]
 800c990:	bd10      	pop	{r4, pc}

0800c992 <__sclose>:
 800c992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c996:	f000 b809 	b.w	800c9ac <_close_r>

0800c99a <memset>:
 800c99a:	4402      	add	r2, r0
 800c99c:	4603      	mov	r3, r0
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d100      	bne.n	800c9a4 <memset+0xa>
 800c9a2:	4770      	bx	lr
 800c9a4:	f803 1b01 	strb.w	r1, [r3], #1
 800c9a8:	e7f9      	b.n	800c99e <memset+0x4>
	...

0800c9ac <_close_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4d06      	ldr	r5, [pc, #24]	; (800c9c8 <_close_r+0x1c>)
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	602b      	str	r3, [r5, #0]
 800c9b8:	f7f8 fdff 	bl	80055ba <_close>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	d102      	bne.n	800c9c6 <_close_r+0x1a>
 800c9c0:	682b      	ldr	r3, [r5, #0]
 800c9c2:	b103      	cbz	r3, 800c9c6 <_close_r+0x1a>
 800c9c4:	6023      	str	r3, [r4, #0]
 800c9c6:	bd38      	pop	{r3, r4, r5, pc}
 800c9c8:	200006c4 	.word	0x200006c4

0800c9cc <_lseek_r>:
 800c9cc:	b538      	push	{r3, r4, r5, lr}
 800c9ce:	4d07      	ldr	r5, [pc, #28]	; (800c9ec <_lseek_r+0x20>)
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	4608      	mov	r0, r1
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	602a      	str	r2, [r5, #0]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	f7f8 fe14 	bl	8005608 <_lseek>
 800c9e0:	1c43      	adds	r3, r0, #1
 800c9e2:	d102      	bne.n	800c9ea <_lseek_r+0x1e>
 800c9e4:	682b      	ldr	r3, [r5, #0]
 800c9e6:	b103      	cbz	r3, 800c9ea <_lseek_r+0x1e>
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}
 800c9ec:	200006c4 	.word	0x200006c4

0800c9f0 <_read_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	4d07      	ldr	r5, [pc, #28]	; (800ca10 <_read_r+0x20>)
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	4608      	mov	r0, r1
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	602a      	str	r2, [r5, #0]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	f7f8 fda2 	bl	8005548 <_read>
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	d102      	bne.n	800ca0e <_read_r+0x1e>
 800ca08:	682b      	ldr	r3, [r5, #0]
 800ca0a:	b103      	cbz	r3, 800ca0e <_read_r+0x1e>
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	200006c4 	.word	0x200006c4

0800ca14 <_write_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4d07      	ldr	r5, [pc, #28]	; (800ca34 <_write_r+0x20>)
 800ca18:	4604      	mov	r4, r0
 800ca1a:	4608      	mov	r0, r1
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	2200      	movs	r2, #0
 800ca20:	602a      	str	r2, [r5, #0]
 800ca22:	461a      	mov	r2, r3
 800ca24:	f7f8 fdad 	bl	8005582 <_write>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_write_r+0x1e>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_write_r+0x1e>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	200006c4 	.word	0x200006c4

0800ca38 <__errno>:
 800ca38:	4b01      	ldr	r3, [pc, #4]	; (800ca40 <__errno+0x8>)
 800ca3a:	6818      	ldr	r0, [r3, #0]
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	20000104 	.word	0x20000104

0800ca44 <__libc_init_array>:
 800ca44:	b570      	push	{r4, r5, r6, lr}
 800ca46:	4d0d      	ldr	r5, [pc, #52]	; (800ca7c <__libc_init_array+0x38>)
 800ca48:	4c0d      	ldr	r4, [pc, #52]	; (800ca80 <__libc_init_array+0x3c>)
 800ca4a:	1b64      	subs	r4, r4, r5
 800ca4c:	10a4      	asrs	r4, r4, #2
 800ca4e:	2600      	movs	r6, #0
 800ca50:	42a6      	cmp	r6, r4
 800ca52:	d109      	bne.n	800ca68 <__libc_init_array+0x24>
 800ca54:	4d0b      	ldr	r5, [pc, #44]	; (800ca84 <__libc_init_array+0x40>)
 800ca56:	4c0c      	ldr	r4, [pc, #48]	; (800ca88 <__libc_init_array+0x44>)
 800ca58:	f001 fdb0 	bl	800e5bc <_init>
 800ca5c:	1b64      	subs	r4, r4, r5
 800ca5e:	10a4      	asrs	r4, r4, #2
 800ca60:	2600      	movs	r6, #0
 800ca62:	42a6      	cmp	r6, r4
 800ca64:	d105      	bne.n	800ca72 <__libc_init_array+0x2e>
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
 800ca68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca6c:	4798      	blx	r3
 800ca6e:	3601      	adds	r6, #1
 800ca70:	e7ee      	b.n	800ca50 <__libc_init_array+0xc>
 800ca72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca76:	4798      	blx	r3
 800ca78:	3601      	adds	r6, #1
 800ca7a:	e7f2      	b.n	800ca62 <__libc_init_array+0x1e>
 800ca7c:	080e9c50 	.word	0x080e9c50
 800ca80:	080e9c50 	.word	0x080e9c50
 800ca84:	080e9c50 	.word	0x080e9c50
 800ca88:	080e9c54 	.word	0x080e9c54

0800ca8c <__retarget_lock_init_recursive>:
 800ca8c:	4770      	bx	lr

0800ca8e <__retarget_lock_acquire_recursive>:
 800ca8e:	4770      	bx	lr

0800ca90 <__retarget_lock_release_recursive>:
 800ca90:	4770      	bx	lr

0800ca92 <strcpy>:
 800ca92:	4603      	mov	r3, r0
 800ca94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca98:	f803 2b01 	strb.w	r2, [r3], #1
 800ca9c:	2a00      	cmp	r2, #0
 800ca9e:	d1f9      	bne.n	800ca94 <strcpy+0x2>
 800caa0:	4770      	bx	lr
	...

0800caa4 <__assert_func>:
 800caa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caa6:	4614      	mov	r4, r2
 800caa8:	461a      	mov	r2, r3
 800caaa:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <__assert_func+0x2c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4605      	mov	r5, r0
 800cab0:	68d8      	ldr	r0, [r3, #12]
 800cab2:	b14c      	cbz	r4, 800cac8 <__assert_func+0x24>
 800cab4:	4b07      	ldr	r3, [pc, #28]	; (800cad4 <__assert_func+0x30>)
 800cab6:	9100      	str	r1, [sp, #0]
 800cab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cabc:	4906      	ldr	r1, [pc, #24]	; (800cad8 <__assert_func+0x34>)
 800cabe:	462b      	mov	r3, r5
 800cac0:	f000 fb4c 	bl	800d15c <fiprintf>
 800cac4:	f000 fb6c 	bl	800d1a0 <abort>
 800cac8:	4b04      	ldr	r3, [pc, #16]	; (800cadc <__assert_func+0x38>)
 800caca:	461c      	mov	r4, r3
 800cacc:	e7f3      	b.n	800cab6 <__assert_func+0x12>
 800cace:	bf00      	nop
 800cad0:	20000104 	.word	0x20000104
 800cad4:	080e9ba4 	.word	0x080e9ba4
 800cad8:	080e9bb1 	.word	0x080e9bb1
 800cadc:	080e9bdf 	.word	0x080e9bdf

0800cae0 <_free_r>:
 800cae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cae2:	2900      	cmp	r1, #0
 800cae4:	d044      	beq.n	800cb70 <_free_r+0x90>
 800cae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caea:	9001      	str	r0, [sp, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	f1a1 0404 	sub.w	r4, r1, #4
 800caf2:	bfb8      	it	lt
 800caf4:	18e4      	addlt	r4, r4, r3
 800caf6:	f000 f8e7 	bl	800ccc8 <__malloc_lock>
 800cafa:	4a1e      	ldr	r2, [pc, #120]	; (800cb74 <_free_r+0x94>)
 800cafc:	9801      	ldr	r0, [sp, #4]
 800cafe:	6813      	ldr	r3, [r2, #0]
 800cb00:	b933      	cbnz	r3, 800cb10 <_free_r+0x30>
 800cb02:	6063      	str	r3, [r4, #4]
 800cb04:	6014      	str	r4, [r2, #0]
 800cb06:	b003      	add	sp, #12
 800cb08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb0c:	f000 b8e2 	b.w	800ccd4 <__malloc_unlock>
 800cb10:	42a3      	cmp	r3, r4
 800cb12:	d908      	bls.n	800cb26 <_free_r+0x46>
 800cb14:	6825      	ldr	r5, [r4, #0]
 800cb16:	1961      	adds	r1, r4, r5
 800cb18:	428b      	cmp	r3, r1
 800cb1a:	bf01      	itttt	eq
 800cb1c:	6819      	ldreq	r1, [r3, #0]
 800cb1e:	685b      	ldreq	r3, [r3, #4]
 800cb20:	1949      	addeq	r1, r1, r5
 800cb22:	6021      	streq	r1, [r4, #0]
 800cb24:	e7ed      	b.n	800cb02 <_free_r+0x22>
 800cb26:	461a      	mov	r2, r3
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	b10b      	cbz	r3, 800cb30 <_free_r+0x50>
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	d9fa      	bls.n	800cb26 <_free_r+0x46>
 800cb30:	6811      	ldr	r1, [r2, #0]
 800cb32:	1855      	adds	r5, r2, r1
 800cb34:	42a5      	cmp	r5, r4
 800cb36:	d10b      	bne.n	800cb50 <_free_r+0x70>
 800cb38:	6824      	ldr	r4, [r4, #0]
 800cb3a:	4421      	add	r1, r4
 800cb3c:	1854      	adds	r4, r2, r1
 800cb3e:	42a3      	cmp	r3, r4
 800cb40:	6011      	str	r1, [r2, #0]
 800cb42:	d1e0      	bne.n	800cb06 <_free_r+0x26>
 800cb44:	681c      	ldr	r4, [r3, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	6053      	str	r3, [r2, #4]
 800cb4a:	440c      	add	r4, r1
 800cb4c:	6014      	str	r4, [r2, #0]
 800cb4e:	e7da      	b.n	800cb06 <_free_r+0x26>
 800cb50:	d902      	bls.n	800cb58 <_free_r+0x78>
 800cb52:	230c      	movs	r3, #12
 800cb54:	6003      	str	r3, [r0, #0]
 800cb56:	e7d6      	b.n	800cb06 <_free_r+0x26>
 800cb58:	6825      	ldr	r5, [r4, #0]
 800cb5a:	1961      	adds	r1, r4, r5
 800cb5c:	428b      	cmp	r3, r1
 800cb5e:	bf04      	itt	eq
 800cb60:	6819      	ldreq	r1, [r3, #0]
 800cb62:	685b      	ldreq	r3, [r3, #4]
 800cb64:	6063      	str	r3, [r4, #4]
 800cb66:	bf04      	itt	eq
 800cb68:	1949      	addeq	r1, r1, r5
 800cb6a:	6021      	streq	r1, [r4, #0]
 800cb6c:	6054      	str	r4, [r2, #4]
 800cb6e:	e7ca      	b.n	800cb06 <_free_r+0x26>
 800cb70:	b003      	add	sp, #12
 800cb72:	bd30      	pop	{r4, r5, pc}
 800cb74:	200006cc 	.word	0x200006cc

0800cb78 <malloc>:
 800cb78:	4b02      	ldr	r3, [pc, #8]	; (800cb84 <malloc+0xc>)
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	6818      	ldr	r0, [r3, #0]
 800cb7e:	f000 b823 	b.w	800cbc8 <_malloc_r>
 800cb82:	bf00      	nop
 800cb84:	20000104 	.word	0x20000104

0800cb88 <sbrk_aligned>:
 800cb88:	b570      	push	{r4, r5, r6, lr}
 800cb8a:	4e0e      	ldr	r6, [pc, #56]	; (800cbc4 <sbrk_aligned+0x3c>)
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	6831      	ldr	r1, [r6, #0]
 800cb90:	4605      	mov	r5, r0
 800cb92:	b911      	cbnz	r1, 800cb9a <sbrk_aligned+0x12>
 800cb94:	f000 faf4 	bl	800d180 <_sbrk_r>
 800cb98:	6030      	str	r0, [r6, #0]
 800cb9a:	4621      	mov	r1, r4
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	f000 faef 	bl	800d180 <_sbrk_r>
 800cba2:	1c43      	adds	r3, r0, #1
 800cba4:	d00a      	beq.n	800cbbc <sbrk_aligned+0x34>
 800cba6:	1cc4      	adds	r4, r0, #3
 800cba8:	f024 0403 	bic.w	r4, r4, #3
 800cbac:	42a0      	cmp	r0, r4
 800cbae:	d007      	beq.n	800cbc0 <sbrk_aligned+0x38>
 800cbb0:	1a21      	subs	r1, r4, r0
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	f000 fae4 	bl	800d180 <_sbrk_r>
 800cbb8:	3001      	adds	r0, #1
 800cbba:	d101      	bne.n	800cbc0 <sbrk_aligned+0x38>
 800cbbc:	f04f 34ff 	mov.w	r4, #4294967295
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	bd70      	pop	{r4, r5, r6, pc}
 800cbc4:	200006d0 	.word	0x200006d0

0800cbc8 <_malloc_r>:
 800cbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbcc:	1ccd      	adds	r5, r1, #3
 800cbce:	f025 0503 	bic.w	r5, r5, #3
 800cbd2:	3508      	adds	r5, #8
 800cbd4:	2d0c      	cmp	r5, #12
 800cbd6:	bf38      	it	cc
 800cbd8:	250c      	movcc	r5, #12
 800cbda:	2d00      	cmp	r5, #0
 800cbdc:	4607      	mov	r7, r0
 800cbde:	db01      	blt.n	800cbe4 <_malloc_r+0x1c>
 800cbe0:	42a9      	cmp	r1, r5
 800cbe2:	d905      	bls.n	800cbf0 <_malloc_r+0x28>
 800cbe4:	230c      	movs	r3, #12
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	2600      	movs	r6, #0
 800cbea:	4630      	mov	r0, r6
 800cbec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ccc4 <_malloc_r+0xfc>
 800cbf4:	f000 f868 	bl	800ccc8 <__malloc_lock>
 800cbf8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbfc:	461c      	mov	r4, r3
 800cbfe:	bb5c      	cbnz	r4, 800cc58 <_malloc_r+0x90>
 800cc00:	4629      	mov	r1, r5
 800cc02:	4638      	mov	r0, r7
 800cc04:	f7ff ffc0 	bl	800cb88 <sbrk_aligned>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	d155      	bne.n	800ccba <_malloc_r+0xf2>
 800cc0e:	f8d8 4000 	ldr.w	r4, [r8]
 800cc12:	4626      	mov	r6, r4
 800cc14:	2e00      	cmp	r6, #0
 800cc16:	d145      	bne.n	800cca4 <_malloc_r+0xdc>
 800cc18:	2c00      	cmp	r4, #0
 800cc1a:	d048      	beq.n	800ccae <_malloc_r+0xe6>
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4638      	mov	r0, r7
 800cc22:	eb04 0903 	add.w	r9, r4, r3
 800cc26:	f000 faab 	bl	800d180 <_sbrk_r>
 800cc2a:	4581      	cmp	r9, r0
 800cc2c:	d13f      	bne.n	800ccae <_malloc_r+0xe6>
 800cc2e:	6821      	ldr	r1, [r4, #0]
 800cc30:	1a6d      	subs	r5, r5, r1
 800cc32:	4629      	mov	r1, r5
 800cc34:	4638      	mov	r0, r7
 800cc36:	f7ff ffa7 	bl	800cb88 <sbrk_aligned>
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	d037      	beq.n	800ccae <_malloc_r+0xe6>
 800cc3e:	6823      	ldr	r3, [r4, #0]
 800cc40:	442b      	add	r3, r5
 800cc42:	6023      	str	r3, [r4, #0]
 800cc44:	f8d8 3000 	ldr.w	r3, [r8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d038      	beq.n	800ccbe <_malloc_r+0xf6>
 800cc4c:	685a      	ldr	r2, [r3, #4]
 800cc4e:	42a2      	cmp	r2, r4
 800cc50:	d12b      	bne.n	800ccaa <_malloc_r+0xe2>
 800cc52:	2200      	movs	r2, #0
 800cc54:	605a      	str	r2, [r3, #4]
 800cc56:	e00f      	b.n	800cc78 <_malloc_r+0xb0>
 800cc58:	6822      	ldr	r2, [r4, #0]
 800cc5a:	1b52      	subs	r2, r2, r5
 800cc5c:	d41f      	bmi.n	800cc9e <_malloc_r+0xd6>
 800cc5e:	2a0b      	cmp	r2, #11
 800cc60:	d917      	bls.n	800cc92 <_malloc_r+0xca>
 800cc62:	1961      	adds	r1, r4, r5
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	6025      	str	r5, [r4, #0]
 800cc68:	bf18      	it	ne
 800cc6a:	6059      	strne	r1, [r3, #4]
 800cc6c:	6863      	ldr	r3, [r4, #4]
 800cc6e:	bf08      	it	eq
 800cc70:	f8c8 1000 	streq.w	r1, [r8]
 800cc74:	5162      	str	r2, [r4, r5]
 800cc76:	604b      	str	r3, [r1, #4]
 800cc78:	4638      	mov	r0, r7
 800cc7a:	f104 060b 	add.w	r6, r4, #11
 800cc7e:	f000 f829 	bl	800ccd4 <__malloc_unlock>
 800cc82:	f026 0607 	bic.w	r6, r6, #7
 800cc86:	1d23      	adds	r3, r4, #4
 800cc88:	1af2      	subs	r2, r6, r3
 800cc8a:	d0ae      	beq.n	800cbea <_malloc_r+0x22>
 800cc8c:	1b9b      	subs	r3, r3, r6
 800cc8e:	50a3      	str	r3, [r4, r2]
 800cc90:	e7ab      	b.n	800cbea <_malloc_r+0x22>
 800cc92:	42a3      	cmp	r3, r4
 800cc94:	6862      	ldr	r2, [r4, #4]
 800cc96:	d1dd      	bne.n	800cc54 <_malloc_r+0x8c>
 800cc98:	f8c8 2000 	str.w	r2, [r8]
 800cc9c:	e7ec      	b.n	800cc78 <_malloc_r+0xb0>
 800cc9e:	4623      	mov	r3, r4
 800cca0:	6864      	ldr	r4, [r4, #4]
 800cca2:	e7ac      	b.n	800cbfe <_malloc_r+0x36>
 800cca4:	4634      	mov	r4, r6
 800cca6:	6876      	ldr	r6, [r6, #4]
 800cca8:	e7b4      	b.n	800cc14 <_malloc_r+0x4c>
 800ccaa:	4613      	mov	r3, r2
 800ccac:	e7cc      	b.n	800cc48 <_malloc_r+0x80>
 800ccae:	230c      	movs	r3, #12
 800ccb0:	603b      	str	r3, [r7, #0]
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	f000 f80e 	bl	800ccd4 <__malloc_unlock>
 800ccb8:	e797      	b.n	800cbea <_malloc_r+0x22>
 800ccba:	6025      	str	r5, [r4, #0]
 800ccbc:	e7dc      	b.n	800cc78 <_malloc_r+0xb0>
 800ccbe:	605b      	str	r3, [r3, #4]
 800ccc0:	deff      	udf	#255	; 0xff
 800ccc2:	bf00      	nop
 800ccc4:	200006cc 	.word	0x200006cc

0800ccc8 <__malloc_lock>:
 800ccc8:	4801      	ldr	r0, [pc, #4]	; (800ccd0 <__malloc_lock+0x8>)
 800ccca:	f7ff bee0 	b.w	800ca8e <__retarget_lock_acquire_recursive>
 800ccce:	bf00      	nop
 800ccd0:	200006c8 	.word	0x200006c8

0800ccd4 <__malloc_unlock>:
 800ccd4:	4801      	ldr	r0, [pc, #4]	; (800ccdc <__malloc_unlock+0x8>)
 800ccd6:	f7ff bedb 	b.w	800ca90 <__retarget_lock_release_recursive>
 800ccda:	bf00      	nop
 800ccdc:	200006c8 	.word	0x200006c8

0800cce0 <_printf_common>:
 800cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce4:	4616      	mov	r6, r2
 800cce6:	4699      	mov	r9, r3
 800cce8:	688a      	ldr	r2, [r1, #8]
 800ccea:	690b      	ldr	r3, [r1, #16]
 800ccec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	bfb8      	it	lt
 800ccf4:	4613      	movlt	r3, r2
 800ccf6:	6033      	str	r3, [r6, #0]
 800ccf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	460c      	mov	r4, r1
 800cd00:	b10a      	cbz	r2, 800cd06 <_printf_common+0x26>
 800cd02:	3301      	adds	r3, #1
 800cd04:	6033      	str	r3, [r6, #0]
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	0699      	lsls	r1, r3, #26
 800cd0a:	bf42      	ittt	mi
 800cd0c:	6833      	ldrmi	r3, [r6, #0]
 800cd0e:	3302      	addmi	r3, #2
 800cd10:	6033      	strmi	r3, [r6, #0]
 800cd12:	6825      	ldr	r5, [r4, #0]
 800cd14:	f015 0506 	ands.w	r5, r5, #6
 800cd18:	d106      	bne.n	800cd28 <_printf_common+0x48>
 800cd1a:	f104 0a19 	add.w	sl, r4, #25
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	6832      	ldr	r2, [r6, #0]
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	dc26      	bgt.n	800cd76 <_printf_common+0x96>
 800cd28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd2c:	1e13      	subs	r3, r2, #0
 800cd2e:	6822      	ldr	r2, [r4, #0]
 800cd30:	bf18      	it	ne
 800cd32:	2301      	movne	r3, #1
 800cd34:	0692      	lsls	r2, r2, #26
 800cd36:	d42b      	bmi.n	800cd90 <_printf_common+0xb0>
 800cd38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	4638      	mov	r0, r7
 800cd40:	47c0      	blx	r8
 800cd42:	3001      	adds	r0, #1
 800cd44:	d01e      	beq.n	800cd84 <_printf_common+0xa4>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	6922      	ldr	r2, [r4, #16]
 800cd4a:	f003 0306 	and.w	r3, r3, #6
 800cd4e:	2b04      	cmp	r3, #4
 800cd50:	bf02      	ittt	eq
 800cd52:	68e5      	ldreq	r5, [r4, #12]
 800cd54:	6833      	ldreq	r3, [r6, #0]
 800cd56:	1aed      	subeq	r5, r5, r3
 800cd58:	68a3      	ldr	r3, [r4, #8]
 800cd5a:	bf0c      	ite	eq
 800cd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd60:	2500      	movne	r5, #0
 800cd62:	4293      	cmp	r3, r2
 800cd64:	bfc4      	itt	gt
 800cd66:	1a9b      	subgt	r3, r3, r2
 800cd68:	18ed      	addgt	r5, r5, r3
 800cd6a:	2600      	movs	r6, #0
 800cd6c:	341a      	adds	r4, #26
 800cd6e:	42b5      	cmp	r5, r6
 800cd70:	d11a      	bne.n	800cda8 <_printf_common+0xc8>
 800cd72:	2000      	movs	r0, #0
 800cd74:	e008      	b.n	800cd88 <_printf_common+0xa8>
 800cd76:	2301      	movs	r3, #1
 800cd78:	4652      	mov	r2, sl
 800cd7a:	4649      	mov	r1, r9
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	47c0      	blx	r8
 800cd80:	3001      	adds	r0, #1
 800cd82:	d103      	bne.n	800cd8c <_printf_common+0xac>
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8c:	3501      	adds	r5, #1
 800cd8e:	e7c6      	b.n	800cd1e <_printf_common+0x3e>
 800cd90:	18e1      	adds	r1, r4, r3
 800cd92:	1c5a      	adds	r2, r3, #1
 800cd94:	2030      	movs	r0, #48	; 0x30
 800cd96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd9a:	4422      	add	r2, r4
 800cd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cda0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cda4:	3302      	adds	r3, #2
 800cda6:	e7c7      	b.n	800cd38 <_printf_common+0x58>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4622      	mov	r2, r4
 800cdac:	4649      	mov	r1, r9
 800cdae:	4638      	mov	r0, r7
 800cdb0:	47c0      	blx	r8
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d0e6      	beq.n	800cd84 <_printf_common+0xa4>
 800cdb6:	3601      	adds	r6, #1
 800cdb8:	e7d9      	b.n	800cd6e <_printf_common+0x8e>
	...

0800cdbc <_printf_i>:
 800cdbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc0:	7e0f      	ldrb	r7, [r1, #24]
 800cdc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdc4:	2f78      	cmp	r7, #120	; 0x78
 800cdc6:	4691      	mov	r9, r2
 800cdc8:	4680      	mov	r8, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	469a      	mov	sl, r3
 800cdce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdd2:	d807      	bhi.n	800cde4 <_printf_i+0x28>
 800cdd4:	2f62      	cmp	r7, #98	; 0x62
 800cdd6:	d80a      	bhi.n	800cdee <_printf_i+0x32>
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	f000 80d4 	beq.w	800cf86 <_printf_i+0x1ca>
 800cdde:	2f58      	cmp	r7, #88	; 0x58
 800cde0:	f000 80c0 	beq.w	800cf64 <_printf_i+0x1a8>
 800cde4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cde8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdec:	e03a      	b.n	800ce64 <_printf_i+0xa8>
 800cdee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdf2:	2b15      	cmp	r3, #21
 800cdf4:	d8f6      	bhi.n	800cde4 <_printf_i+0x28>
 800cdf6:	a101      	add	r1, pc, #4	; (adr r1, 800cdfc <_printf_i+0x40>)
 800cdf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdfc:	0800ce55 	.word	0x0800ce55
 800ce00:	0800ce69 	.word	0x0800ce69
 800ce04:	0800cde5 	.word	0x0800cde5
 800ce08:	0800cde5 	.word	0x0800cde5
 800ce0c:	0800cde5 	.word	0x0800cde5
 800ce10:	0800cde5 	.word	0x0800cde5
 800ce14:	0800ce69 	.word	0x0800ce69
 800ce18:	0800cde5 	.word	0x0800cde5
 800ce1c:	0800cde5 	.word	0x0800cde5
 800ce20:	0800cde5 	.word	0x0800cde5
 800ce24:	0800cde5 	.word	0x0800cde5
 800ce28:	0800cf6d 	.word	0x0800cf6d
 800ce2c:	0800ce95 	.word	0x0800ce95
 800ce30:	0800cf27 	.word	0x0800cf27
 800ce34:	0800cde5 	.word	0x0800cde5
 800ce38:	0800cde5 	.word	0x0800cde5
 800ce3c:	0800cf8f 	.word	0x0800cf8f
 800ce40:	0800cde5 	.word	0x0800cde5
 800ce44:	0800ce95 	.word	0x0800ce95
 800ce48:	0800cde5 	.word	0x0800cde5
 800ce4c:	0800cde5 	.word	0x0800cde5
 800ce50:	0800cf2f 	.word	0x0800cf2f
 800ce54:	682b      	ldr	r3, [r5, #0]
 800ce56:	1d1a      	adds	r2, r3, #4
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	602a      	str	r2, [r5, #0]
 800ce5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce64:	2301      	movs	r3, #1
 800ce66:	e09f      	b.n	800cfa8 <_printf_i+0x1ec>
 800ce68:	6820      	ldr	r0, [r4, #0]
 800ce6a:	682b      	ldr	r3, [r5, #0]
 800ce6c:	0607      	lsls	r7, r0, #24
 800ce6e:	f103 0104 	add.w	r1, r3, #4
 800ce72:	6029      	str	r1, [r5, #0]
 800ce74:	d501      	bpl.n	800ce7a <_printf_i+0xbe>
 800ce76:	681e      	ldr	r6, [r3, #0]
 800ce78:	e003      	b.n	800ce82 <_printf_i+0xc6>
 800ce7a:	0646      	lsls	r6, r0, #25
 800ce7c:	d5fb      	bpl.n	800ce76 <_printf_i+0xba>
 800ce7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce82:	2e00      	cmp	r6, #0
 800ce84:	da03      	bge.n	800ce8e <_printf_i+0xd2>
 800ce86:	232d      	movs	r3, #45	; 0x2d
 800ce88:	4276      	negs	r6, r6
 800ce8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce8e:	485a      	ldr	r0, [pc, #360]	; (800cff8 <_printf_i+0x23c>)
 800ce90:	230a      	movs	r3, #10
 800ce92:	e012      	b.n	800ceba <_printf_i+0xfe>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	6820      	ldr	r0, [r4, #0]
 800ce98:	1d19      	adds	r1, r3, #4
 800ce9a:	6029      	str	r1, [r5, #0]
 800ce9c:	0605      	lsls	r5, r0, #24
 800ce9e:	d501      	bpl.n	800cea4 <_printf_i+0xe8>
 800cea0:	681e      	ldr	r6, [r3, #0]
 800cea2:	e002      	b.n	800ceaa <_printf_i+0xee>
 800cea4:	0641      	lsls	r1, r0, #25
 800cea6:	d5fb      	bpl.n	800cea0 <_printf_i+0xe4>
 800cea8:	881e      	ldrh	r6, [r3, #0]
 800ceaa:	4853      	ldr	r0, [pc, #332]	; (800cff8 <_printf_i+0x23c>)
 800ceac:	2f6f      	cmp	r7, #111	; 0x6f
 800ceae:	bf0c      	ite	eq
 800ceb0:	2308      	moveq	r3, #8
 800ceb2:	230a      	movne	r3, #10
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ceba:	6865      	ldr	r5, [r4, #4]
 800cebc:	60a5      	str	r5, [r4, #8]
 800cebe:	2d00      	cmp	r5, #0
 800cec0:	bfa2      	ittt	ge
 800cec2:	6821      	ldrge	r1, [r4, #0]
 800cec4:	f021 0104 	bicge.w	r1, r1, #4
 800cec8:	6021      	strge	r1, [r4, #0]
 800ceca:	b90e      	cbnz	r6, 800ced0 <_printf_i+0x114>
 800cecc:	2d00      	cmp	r5, #0
 800cece:	d04b      	beq.n	800cf68 <_printf_i+0x1ac>
 800ced0:	4615      	mov	r5, r2
 800ced2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ced6:	fb03 6711 	mls	r7, r3, r1, r6
 800ceda:	5dc7      	ldrb	r7, [r0, r7]
 800cedc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cee0:	4637      	mov	r7, r6
 800cee2:	42bb      	cmp	r3, r7
 800cee4:	460e      	mov	r6, r1
 800cee6:	d9f4      	bls.n	800ced2 <_printf_i+0x116>
 800cee8:	2b08      	cmp	r3, #8
 800ceea:	d10b      	bne.n	800cf04 <_printf_i+0x148>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	07de      	lsls	r6, r3, #31
 800cef0:	d508      	bpl.n	800cf04 <_printf_i+0x148>
 800cef2:	6923      	ldr	r3, [r4, #16]
 800cef4:	6861      	ldr	r1, [r4, #4]
 800cef6:	4299      	cmp	r1, r3
 800cef8:	bfde      	ittt	le
 800cefa:	2330      	movle	r3, #48	; 0x30
 800cefc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf00:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf04:	1b52      	subs	r2, r2, r5
 800cf06:	6122      	str	r2, [r4, #16]
 800cf08:	f8cd a000 	str.w	sl, [sp]
 800cf0c:	464b      	mov	r3, r9
 800cf0e:	aa03      	add	r2, sp, #12
 800cf10:	4621      	mov	r1, r4
 800cf12:	4640      	mov	r0, r8
 800cf14:	f7ff fee4 	bl	800cce0 <_printf_common>
 800cf18:	3001      	adds	r0, #1
 800cf1a:	d14a      	bne.n	800cfb2 <_printf_i+0x1f6>
 800cf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf20:	b004      	add	sp, #16
 800cf22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	f043 0320 	orr.w	r3, r3, #32
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	4833      	ldr	r0, [pc, #204]	; (800cffc <_printf_i+0x240>)
 800cf30:	2778      	movs	r7, #120	; 0x78
 800cf32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	6829      	ldr	r1, [r5, #0]
 800cf3a:	061f      	lsls	r7, r3, #24
 800cf3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf40:	d402      	bmi.n	800cf48 <_printf_i+0x18c>
 800cf42:	065f      	lsls	r7, r3, #25
 800cf44:	bf48      	it	mi
 800cf46:	b2b6      	uxthmi	r6, r6
 800cf48:	07df      	lsls	r7, r3, #31
 800cf4a:	bf48      	it	mi
 800cf4c:	f043 0320 	orrmi.w	r3, r3, #32
 800cf50:	6029      	str	r1, [r5, #0]
 800cf52:	bf48      	it	mi
 800cf54:	6023      	strmi	r3, [r4, #0]
 800cf56:	b91e      	cbnz	r6, 800cf60 <_printf_i+0x1a4>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	f023 0320 	bic.w	r3, r3, #32
 800cf5e:	6023      	str	r3, [r4, #0]
 800cf60:	2310      	movs	r3, #16
 800cf62:	e7a7      	b.n	800ceb4 <_printf_i+0xf8>
 800cf64:	4824      	ldr	r0, [pc, #144]	; (800cff8 <_printf_i+0x23c>)
 800cf66:	e7e4      	b.n	800cf32 <_printf_i+0x176>
 800cf68:	4615      	mov	r5, r2
 800cf6a:	e7bd      	b.n	800cee8 <_printf_i+0x12c>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	6826      	ldr	r6, [r4, #0]
 800cf70:	6961      	ldr	r1, [r4, #20]
 800cf72:	1d18      	adds	r0, r3, #4
 800cf74:	6028      	str	r0, [r5, #0]
 800cf76:	0635      	lsls	r5, r6, #24
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	d501      	bpl.n	800cf80 <_printf_i+0x1c4>
 800cf7c:	6019      	str	r1, [r3, #0]
 800cf7e:	e002      	b.n	800cf86 <_printf_i+0x1ca>
 800cf80:	0670      	lsls	r0, r6, #25
 800cf82:	d5fb      	bpl.n	800cf7c <_printf_i+0x1c0>
 800cf84:	8019      	strh	r1, [r3, #0]
 800cf86:	2300      	movs	r3, #0
 800cf88:	6123      	str	r3, [r4, #16]
 800cf8a:	4615      	mov	r5, r2
 800cf8c:	e7bc      	b.n	800cf08 <_printf_i+0x14c>
 800cf8e:	682b      	ldr	r3, [r5, #0]
 800cf90:	1d1a      	adds	r2, r3, #4
 800cf92:	602a      	str	r2, [r5, #0]
 800cf94:	681d      	ldr	r5, [r3, #0]
 800cf96:	6862      	ldr	r2, [r4, #4]
 800cf98:	2100      	movs	r1, #0
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	f7f3 f920 	bl	80001e0 <memchr>
 800cfa0:	b108      	cbz	r0, 800cfa6 <_printf_i+0x1ea>
 800cfa2:	1b40      	subs	r0, r0, r5
 800cfa4:	6060      	str	r0, [r4, #4]
 800cfa6:	6863      	ldr	r3, [r4, #4]
 800cfa8:	6123      	str	r3, [r4, #16]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfb0:	e7aa      	b.n	800cf08 <_printf_i+0x14c>
 800cfb2:	6923      	ldr	r3, [r4, #16]
 800cfb4:	462a      	mov	r2, r5
 800cfb6:	4649      	mov	r1, r9
 800cfb8:	4640      	mov	r0, r8
 800cfba:	47d0      	blx	sl
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	d0ad      	beq.n	800cf1c <_printf_i+0x160>
 800cfc0:	6823      	ldr	r3, [r4, #0]
 800cfc2:	079b      	lsls	r3, r3, #30
 800cfc4:	d413      	bmi.n	800cfee <_printf_i+0x232>
 800cfc6:	68e0      	ldr	r0, [r4, #12]
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	4298      	cmp	r0, r3
 800cfcc:	bfb8      	it	lt
 800cfce:	4618      	movlt	r0, r3
 800cfd0:	e7a6      	b.n	800cf20 <_printf_i+0x164>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	4632      	mov	r2, r6
 800cfd6:	4649      	mov	r1, r9
 800cfd8:	4640      	mov	r0, r8
 800cfda:	47d0      	blx	sl
 800cfdc:	3001      	adds	r0, #1
 800cfde:	d09d      	beq.n	800cf1c <_printf_i+0x160>
 800cfe0:	3501      	adds	r5, #1
 800cfe2:	68e3      	ldr	r3, [r4, #12]
 800cfe4:	9903      	ldr	r1, [sp, #12]
 800cfe6:	1a5b      	subs	r3, r3, r1
 800cfe8:	42ab      	cmp	r3, r5
 800cfea:	dcf2      	bgt.n	800cfd2 <_printf_i+0x216>
 800cfec:	e7eb      	b.n	800cfc6 <_printf_i+0x20a>
 800cfee:	2500      	movs	r5, #0
 800cff0:	f104 0619 	add.w	r6, r4, #25
 800cff4:	e7f5      	b.n	800cfe2 <_printf_i+0x226>
 800cff6:	bf00      	nop
 800cff8:	080e9be0 	.word	0x080e9be0
 800cffc:	080e9bf1 	.word	0x080e9bf1

0800d000 <__sflush_r>:
 800d000:	898a      	ldrh	r2, [r1, #12]
 800d002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d006:	4605      	mov	r5, r0
 800d008:	0710      	lsls	r0, r2, #28
 800d00a:	460c      	mov	r4, r1
 800d00c:	d458      	bmi.n	800d0c0 <__sflush_r+0xc0>
 800d00e:	684b      	ldr	r3, [r1, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	dc05      	bgt.n	800d020 <__sflush_r+0x20>
 800d014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d016:	2b00      	cmp	r3, #0
 800d018:	dc02      	bgt.n	800d020 <__sflush_r+0x20>
 800d01a:	2000      	movs	r0, #0
 800d01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d022:	2e00      	cmp	r6, #0
 800d024:	d0f9      	beq.n	800d01a <__sflush_r+0x1a>
 800d026:	2300      	movs	r3, #0
 800d028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d02c:	682f      	ldr	r7, [r5, #0]
 800d02e:	6a21      	ldr	r1, [r4, #32]
 800d030:	602b      	str	r3, [r5, #0]
 800d032:	d032      	beq.n	800d09a <__sflush_r+0x9a>
 800d034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d036:	89a3      	ldrh	r3, [r4, #12]
 800d038:	075a      	lsls	r2, r3, #29
 800d03a:	d505      	bpl.n	800d048 <__sflush_r+0x48>
 800d03c:	6863      	ldr	r3, [r4, #4]
 800d03e:	1ac0      	subs	r0, r0, r3
 800d040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d042:	b10b      	cbz	r3, 800d048 <__sflush_r+0x48>
 800d044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d046:	1ac0      	subs	r0, r0, r3
 800d048:	2300      	movs	r3, #0
 800d04a:	4602      	mov	r2, r0
 800d04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d04e:	6a21      	ldr	r1, [r4, #32]
 800d050:	4628      	mov	r0, r5
 800d052:	47b0      	blx	r6
 800d054:	1c43      	adds	r3, r0, #1
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	d106      	bne.n	800d068 <__sflush_r+0x68>
 800d05a:	6829      	ldr	r1, [r5, #0]
 800d05c:	291d      	cmp	r1, #29
 800d05e:	d82b      	bhi.n	800d0b8 <__sflush_r+0xb8>
 800d060:	4a29      	ldr	r2, [pc, #164]	; (800d108 <__sflush_r+0x108>)
 800d062:	410a      	asrs	r2, r1
 800d064:	07d6      	lsls	r6, r2, #31
 800d066:	d427      	bmi.n	800d0b8 <__sflush_r+0xb8>
 800d068:	2200      	movs	r2, #0
 800d06a:	6062      	str	r2, [r4, #4]
 800d06c:	04d9      	lsls	r1, r3, #19
 800d06e:	6922      	ldr	r2, [r4, #16]
 800d070:	6022      	str	r2, [r4, #0]
 800d072:	d504      	bpl.n	800d07e <__sflush_r+0x7e>
 800d074:	1c42      	adds	r2, r0, #1
 800d076:	d101      	bne.n	800d07c <__sflush_r+0x7c>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	b903      	cbnz	r3, 800d07e <__sflush_r+0x7e>
 800d07c:	6560      	str	r0, [r4, #84]	; 0x54
 800d07e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d080:	602f      	str	r7, [r5, #0]
 800d082:	2900      	cmp	r1, #0
 800d084:	d0c9      	beq.n	800d01a <__sflush_r+0x1a>
 800d086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d08a:	4299      	cmp	r1, r3
 800d08c:	d002      	beq.n	800d094 <__sflush_r+0x94>
 800d08e:	4628      	mov	r0, r5
 800d090:	f7ff fd26 	bl	800cae0 <_free_r>
 800d094:	2000      	movs	r0, #0
 800d096:	6360      	str	r0, [r4, #52]	; 0x34
 800d098:	e7c0      	b.n	800d01c <__sflush_r+0x1c>
 800d09a:	2301      	movs	r3, #1
 800d09c:	4628      	mov	r0, r5
 800d09e:	47b0      	blx	r6
 800d0a0:	1c41      	adds	r1, r0, #1
 800d0a2:	d1c8      	bne.n	800d036 <__sflush_r+0x36>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d0c5      	beq.n	800d036 <__sflush_r+0x36>
 800d0aa:	2b1d      	cmp	r3, #29
 800d0ac:	d001      	beq.n	800d0b2 <__sflush_r+0xb2>
 800d0ae:	2b16      	cmp	r3, #22
 800d0b0:	d101      	bne.n	800d0b6 <__sflush_r+0xb6>
 800d0b2:	602f      	str	r7, [r5, #0]
 800d0b4:	e7b1      	b.n	800d01a <__sflush_r+0x1a>
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0bc:	81a3      	strh	r3, [r4, #12]
 800d0be:	e7ad      	b.n	800d01c <__sflush_r+0x1c>
 800d0c0:	690f      	ldr	r7, [r1, #16]
 800d0c2:	2f00      	cmp	r7, #0
 800d0c4:	d0a9      	beq.n	800d01a <__sflush_r+0x1a>
 800d0c6:	0793      	lsls	r3, r2, #30
 800d0c8:	680e      	ldr	r6, [r1, #0]
 800d0ca:	bf08      	it	eq
 800d0cc:	694b      	ldreq	r3, [r1, #20]
 800d0ce:	600f      	str	r7, [r1, #0]
 800d0d0:	bf18      	it	ne
 800d0d2:	2300      	movne	r3, #0
 800d0d4:	eba6 0807 	sub.w	r8, r6, r7
 800d0d8:	608b      	str	r3, [r1, #8]
 800d0da:	f1b8 0f00 	cmp.w	r8, #0
 800d0de:	dd9c      	ble.n	800d01a <__sflush_r+0x1a>
 800d0e0:	6a21      	ldr	r1, [r4, #32]
 800d0e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0e4:	4643      	mov	r3, r8
 800d0e6:	463a      	mov	r2, r7
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b0      	blx	r6
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	dc06      	bgt.n	800d0fe <__sflush_r+0xfe>
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f6:	81a3      	strh	r3, [r4, #12]
 800d0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fc:	e78e      	b.n	800d01c <__sflush_r+0x1c>
 800d0fe:	4407      	add	r7, r0
 800d100:	eba8 0800 	sub.w	r8, r8, r0
 800d104:	e7e9      	b.n	800d0da <__sflush_r+0xda>
 800d106:	bf00      	nop
 800d108:	dfbffffe 	.word	0xdfbffffe

0800d10c <_fflush_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	690b      	ldr	r3, [r1, #16]
 800d110:	4605      	mov	r5, r0
 800d112:	460c      	mov	r4, r1
 800d114:	b913      	cbnz	r3, 800d11c <_fflush_r+0x10>
 800d116:	2500      	movs	r5, #0
 800d118:	4628      	mov	r0, r5
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	b118      	cbz	r0, 800d126 <_fflush_r+0x1a>
 800d11e:	6a03      	ldr	r3, [r0, #32]
 800d120:	b90b      	cbnz	r3, 800d126 <_fflush_r+0x1a>
 800d122:	f7ff fbc1 	bl	800c8a8 <__sinit>
 800d126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d0f3      	beq.n	800d116 <_fflush_r+0xa>
 800d12e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d130:	07d0      	lsls	r0, r2, #31
 800d132:	d404      	bmi.n	800d13e <_fflush_r+0x32>
 800d134:	0599      	lsls	r1, r3, #22
 800d136:	d402      	bmi.n	800d13e <_fflush_r+0x32>
 800d138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d13a:	f7ff fca8 	bl	800ca8e <__retarget_lock_acquire_recursive>
 800d13e:	4628      	mov	r0, r5
 800d140:	4621      	mov	r1, r4
 800d142:	f7ff ff5d 	bl	800d000 <__sflush_r>
 800d146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d148:	07da      	lsls	r2, r3, #31
 800d14a:	4605      	mov	r5, r0
 800d14c:	d4e4      	bmi.n	800d118 <_fflush_r+0xc>
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	059b      	lsls	r3, r3, #22
 800d152:	d4e1      	bmi.n	800d118 <_fflush_r+0xc>
 800d154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d156:	f7ff fc9b 	bl	800ca90 <__retarget_lock_release_recursive>
 800d15a:	e7dd      	b.n	800d118 <_fflush_r+0xc>

0800d15c <fiprintf>:
 800d15c:	b40e      	push	{r1, r2, r3}
 800d15e:	b503      	push	{r0, r1, lr}
 800d160:	4601      	mov	r1, r0
 800d162:	ab03      	add	r3, sp, #12
 800d164:	4805      	ldr	r0, [pc, #20]	; (800d17c <fiprintf+0x20>)
 800d166:	f853 2b04 	ldr.w	r2, [r3], #4
 800d16a:	6800      	ldr	r0, [r0, #0]
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	f000 f847 	bl	800d200 <_vfiprintf_r>
 800d172:	b002      	add	sp, #8
 800d174:	f85d eb04 	ldr.w	lr, [sp], #4
 800d178:	b003      	add	sp, #12
 800d17a:	4770      	bx	lr
 800d17c:	20000104 	.word	0x20000104

0800d180 <_sbrk_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4d06      	ldr	r5, [pc, #24]	; (800d19c <_sbrk_r+0x1c>)
 800d184:	2300      	movs	r3, #0
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	602b      	str	r3, [r5, #0]
 800d18c:	f7f8 fa4a 	bl	8005624 <_sbrk>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_sbrk_r+0x1a>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_sbrk_r+0x1a>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	200006c4 	.word	0x200006c4

0800d1a0 <abort>:
 800d1a0:	b508      	push	{r3, lr}
 800d1a2:	2006      	movs	r0, #6
 800d1a4:	f000 fa04 	bl	800d5b0 <raise>
 800d1a8:	2001      	movs	r0, #1
 800d1aa:	f7f8 f9c3 	bl	8005534 <_exit>

0800d1ae <__sfputc_r>:
 800d1ae:	6893      	ldr	r3, [r2, #8]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	b410      	push	{r4}
 800d1b6:	6093      	str	r3, [r2, #8]
 800d1b8:	da08      	bge.n	800d1cc <__sfputc_r+0x1e>
 800d1ba:	6994      	ldr	r4, [r2, #24]
 800d1bc:	42a3      	cmp	r3, r4
 800d1be:	db01      	blt.n	800d1c4 <__sfputc_r+0x16>
 800d1c0:	290a      	cmp	r1, #10
 800d1c2:	d103      	bne.n	800d1cc <__sfputc_r+0x1e>
 800d1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1c8:	f000 b934 	b.w	800d434 <__swbuf_r>
 800d1cc:	6813      	ldr	r3, [r2, #0]
 800d1ce:	1c58      	adds	r0, r3, #1
 800d1d0:	6010      	str	r0, [r2, #0]
 800d1d2:	7019      	strb	r1, [r3, #0]
 800d1d4:	4608      	mov	r0, r1
 800d1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <__sfputs_r>:
 800d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1de:	4606      	mov	r6, r0
 800d1e0:	460f      	mov	r7, r1
 800d1e2:	4614      	mov	r4, r2
 800d1e4:	18d5      	adds	r5, r2, r3
 800d1e6:	42ac      	cmp	r4, r5
 800d1e8:	d101      	bne.n	800d1ee <__sfputs_r+0x12>
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	e007      	b.n	800d1fe <__sfputs_r+0x22>
 800d1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f2:	463a      	mov	r2, r7
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	f7ff ffda 	bl	800d1ae <__sfputc_r>
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	d1f3      	bne.n	800d1e6 <__sfputs_r+0xa>
 800d1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d200 <_vfiprintf_r>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	460d      	mov	r5, r1
 800d206:	b09d      	sub	sp, #116	; 0x74
 800d208:	4614      	mov	r4, r2
 800d20a:	4698      	mov	r8, r3
 800d20c:	4606      	mov	r6, r0
 800d20e:	b118      	cbz	r0, 800d218 <_vfiprintf_r+0x18>
 800d210:	6a03      	ldr	r3, [r0, #32]
 800d212:	b90b      	cbnz	r3, 800d218 <_vfiprintf_r+0x18>
 800d214:	f7ff fb48 	bl	800c8a8 <__sinit>
 800d218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d21a:	07d9      	lsls	r1, r3, #31
 800d21c:	d405      	bmi.n	800d22a <_vfiprintf_r+0x2a>
 800d21e:	89ab      	ldrh	r3, [r5, #12]
 800d220:	059a      	lsls	r2, r3, #22
 800d222:	d402      	bmi.n	800d22a <_vfiprintf_r+0x2a>
 800d224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d226:	f7ff fc32 	bl	800ca8e <__retarget_lock_acquire_recursive>
 800d22a:	89ab      	ldrh	r3, [r5, #12]
 800d22c:	071b      	lsls	r3, r3, #28
 800d22e:	d501      	bpl.n	800d234 <_vfiprintf_r+0x34>
 800d230:	692b      	ldr	r3, [r5, #16]
 800d232:	b99b      	cbnz	r3, 800d25c <_vfiprintf_r+0x5c>
 800d234:	4629      	mov	r1, r5
 800d236:	4630      	mov	r0, r6
 800d238:	f000 f93a 	bl	800d4b0 <__swsetup_r>
 800d23c:	b170      	cbz	r0, 800d25c <_vfiprintf_r+0x5c>
 800d23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d240:	07dc      	lsls	r4, r3, #31
 800d242:	d504      	bpl.n	800d24e <_vfiprintf_r+0x4e>
 800d244:	f04f 30ff 	mov.w	r0, #4294967295
 800d248:	b01d      	add	sp, #116	; 0x74
 800d24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24e:	89ab      	ldrh	r3, [r5, #12]
 800d250:	0598      	lsls	r0, r3, #22
 800d252:	d4f7      	bmi.n	800d244 <_vfiprintf_r+0x44>
 800d254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d256:	f7ff fc1b 	bl	800ca90 <__retarget_lock_release_recursive>
 800d25a:	e7f3      	b.n	800d244 <_vfiprintf_r+0x44>
 800d25c:	2300      	movs	r3, #0
 800d25e:	9309      	str	r3, [sp, #36]	; 0x24
 800d260:	2320      	movs	r3, #32
 800d262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d266:	f8cd 800c 	str.w	r8, [sp, #12]
 800d26a:	2330      	movs	r3, #48	; 0x30
 800d26c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d420 <_vfiprintf_r+0x220>
 800d270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d274:	f04f 0901 	mov.w	r9, #1
 800d278:	4623      	mov	r3, r4
 800d27a:	469a      	mov	sl, r3
 800d27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d280:	b10a      	cbz	r2, 800d286 <_vfiprintf_r+0x86>
 800d282:	2a25      	cmp	r2, #37	; 0x25
 800d284:	d1f9      	bne.n	800d27a <_vfiprintf_r+0x7a>
 800d286:	ebba 0b04 	subs.w	fp, sl, r4
 800d28a:	d00b      	beq.n	800d2a4 <_vfiprintf_r+0xa4>
 800d28c:	465b      	mov	r3, fp
 800d28e:	4622      	mov	r2, r4
 800d290:	4629      	mov	r1, r5
 800d292:	4630      	mov	r0, r6
 800d294:	f7ff ffa2 	bl	800d1dc <__sfputs_r>
 800d298:	3001      	adds	r0, #1
 800d29a:	f000 80a9 	beq.w	800d3f0 <_vfiprintf_r+0x1f0>
 800d29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2a0:	445a      	add	r2, fp
 800d2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 80a1 	beq.w	800d3f0 <_vfiprintf_r+0x1f0>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2b8:	f10a 0a01 	add.w	sl, sl, #1
 800d2bc:	9304      	str	r3, [sp, #16]
 800d2be:	9307      	str	r3, [sp, #28]
 800d2c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2c4:	931a      	str	r3, [sp, #104]	; 0x68
 800d2c6:	4654      	mov	r4, sl
 800d2c8:	2205      	movs	r2, #5
 800d2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ce:	4854      	ldr	r0, [pc, #336]	; (800d420 <_vfiprintf_r+0x220>)
 800d2d0:	f7f2 ff86 	bl	80001e0 <memchr>
 800d2d4:	9a04      	ldr	r2, [sp, #16]
 800d2d6:	b9d8      	cbnz	r0, 800d310 <_vfiprintf_r+0x110>
 800d2d8:	06d1      	lsls	r1, r2, #27
 800d2da:	bf44      	itt	mi
 800d2dc:	2320      	movmi	r3, #32
 800d2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2e2:	0713      	lsls	r3, r2, #28
 800d2e4:	bf44      	itt	mi
 800d2e6:	232b      	movmi	r3, #43	; 0x2b
 800d2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2f2:	d015      	beq.n	800d320 <_vfiprintf_r+0x120>
 800d2f4:	9a07      	ldr	r2, [sp, #28]
 800d2f6:	4654      	mov	r4, sl
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	f04f 0c0a 	mov.w	ip, #10
 800d2fe:	4621      	mov	r1, r4
 800d300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d304:	3b30      	subs	r3, #48	; 0x30
 800d306:	2b09      	cmp	r3, #9
 800d308:	d94d      	bls.n	800d3a6 <_vfiprintf_r+0x1a6>
 800d30a:	b1b0      	cbz	r0, 800d33a <_vfiprintf_r+0x13a>
 800d30c:	9207      	str	r2, [sp, #28]
 800d30e:	e014      	b.n	800d33a <_vfiprintf_r+0x13a>
 800d310:	eba0 0308 	sub.w	r3, r0, r8
 800d314:	fa09 f303 	lsl.w	r3, r9, r3
 800d318:	4313      	orrs	r3, r2
 800d31a:	9304      	str	r3, [sp, #16]
 800d31c:	46a2      	mov	sl, r4
 800d31e:	e7d2      	b.n	800d2c6 <_vfiprintf_r+0xc6>
 800d320:	9b03      	ldr	r3, [sp, #12]
 800d322:	1d19      	adds	r1, r3, #4
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	9103      	str	r1, [sp, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	bfbb      	ittet	lt
 800d32c:	425b      	neglt	r3, r3
 800d32e:	f042 0202 	orrlt.w	r2, r2, #2
 800d332:	9307      	strge	r3, [sp, #28]
 800d334:	9307      	strlt	r3, [sp, #28]
 800d336:	bfb8      	it	lt
 800d338:	9204      	strlt	r2, [sp, #16]
 800d33a:	7823      	ldrb	r3, [r4, #0]
 800d33c:	2b2e      	cmp	r3, #46	; 0x2e
 800d33e:	d10c      	bne.n	800d35a <_vfiprintf_r+0x15a>
 800d340:	7863      	ldrb	r3, [r4, #1]
 800d342:	2b2a      	cmp	r3, #42	; 0x2a
 800d344:	d134      	bne.n	800d3b0 <_vfiprintf_r+0x1b0>
 800d346:	9b03      	ldr	r3, [sp, #12]
 800d348:	1d1a      	adds	r2, r3, #4
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	9203      	str	r2, [sp, #12]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	bfb8      	it	lt
 800d352:	f04f 33ff 	movlt.w	r3, #4294967295
 800d356:	3402      	adds	r4, #2
 800d358:	9305      	str	r3, [sp, #20]
 800d35a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d430 <_vfiprintf_r+0x230>
 800d35e:	7821      	ldrb	r1, [r4, #0]
 800d360:	2203      	movs	r2, #3
 800d362:	4650      	mov	r0, sl
 800d364:	f7f2 ff3c 	bl	80001e0 <memchr>
 800d368:	b138      	cbz	r0, 800d37a <_vfiprintf_r+0x17a>
 800d36a:	9b04      	ldr	r3, [sp, #16]
 800d36c:	eba0 000a 	sub.w	r0, r0, sl
 800d370:	2240      	movs	r2, #64	; 0x40
 800d372:	4082      	lsls	r2, r0
 800d374:	4313      	orrs	r3, r2
 800d376:	3401      	adds	r4, #1
 800d378:	9304      	str	r3, [sp, #16]
 800d37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d37e:	4829      	ldr	r0, [pc, #164]	; (800d424 <_vfiprintf_r+0x224>)
 800d380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d384:	2206      	movs	r2, #6
 800d386:	f7f2 ff2b 	bl	80001e0 <memchr>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d03f      	beq.n	800d40e <_vfiprintf_r+0x20e>
 800d38e:	4b26      	ldr	r3, [pc, #152]	; (800d428 <_vfiprintf_r+0x228>)
 800d390:	bb1b      	cbnz	r3, 800d3da <_vfiprintf_r+0x1da>
 800d392:	9b03      	ldr	r3, [sp, #12]
 800d394:	3307      	adds	r3, #7
 800d396:	f023 0307 	bic.w	r3, r3, #7
 800d39a:	3308      	adds	r3, #8
 800d39c:	9303      	str	r3, [sp, #12]
 800d39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a0:	443b      	add	r3, r7
 800d3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3a4:	e768      	b.n	800d278 <_vfiprintf_r+0x78>
 800d3a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	2001      	movs	r0, #1
 800d3ae:	e7a6      	b.n	800d2fe <_vfiprintf_r+0xfe>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	3401      	adds	r4, #1
 800d3b4:	9305      	str	r3, [sp, #20]
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	f04f 0c0a 	mov.w	ip, #10
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3c2:	3a30      	subs	r2, #48	; 0x30
 800d3c4:	2a09      	cmp	r2, #9
 800d3c6:	d903      	bls.n	800d3d0 <_vfiprintf_r+0x1d0>
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d0c6      	beq.n	800d35a <_vfiprintf_r+0x15a>
 800d3cc:	9105      	str	r1, [sp, #20]
 800d3ce:	e7c4      	b.n	800d35a <_vfiprintf_r+0x15a>
 800d3d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e7f0      	b.n	800d3bc <_vfiprintf_r+0x1bc>
 800d3da:	ab03      	add	r3, sp, #12
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	462a      	mov	r2, r5
 800d3e0:	4b12      	ldr	r3, [pc, #72]	; (800d42c <_vfiprintf_r+0x22c>)
 800d3e2:	a904      	add	r1, sp, #16
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f3af 8000 	nop.w
 800d3ea:	4607      	mov	r7, r0
 800d3ec:	1c78      	adds	r0, r7, #1
 800d3ee:	d1d6      	bne.n	800d39e <_vfiprintf_r+0x19e>
 800d3f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3f2:	07d9      	lsls	r1, r3, #31
 800d3f4:	d405      	bmi.n	800d402 <_vfiprintf_r+0x202>
 800d3f6:	89ab      	ldrh	r3, [r5, #12]
 800d3f8:	059a      	lsls	r2, r3, #22
 800d3fa:	d402      	bmi.n	800d402 <_vfiprintf_r+0x202>
 800d3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3fe:	f7ff fb47 	bl	800ca90 <__retarget_lock_release_recursive>
 800d402:	89ab      	ldrh	r3, [r5, #12]
 800d404:	065b      	lsls	r3, r3, #25
 800d406:	f53f af1d 	bmi.w	800d244 <_vfiprintf_r+0x44>
 800d40a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d40c:	e71c      	b.n	800d248 <_vfiprintf_r+0x48>
 800d40e:	ab03      	add	r3, sp, #12
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	462a      	mov	r2, r5
 800d414:	4b05      	ldr	r3, [pc, #20]	; (800d42c <_vfiprintf_r+0x22c>)
 800d416:	a904      	add	r1, sp, #16
 800d418:	4630      	mov	r0, r6
 800d41a:	f7ff fccf 	bl	800cdbc <_printf_i>
 800d41e:	e7e4      	b.n	800d3ea <_vfiprintf_r+0x1ea>
 800d420:	080e9c02 	.word	0x080e9c02
 800d424:	080e9c0c 	.word	0x080e9c0c
 800d428:	00000000 	.word	0x00000000
 800d42c:	0800d1dd 	.word	0x0800d1dd
 800d430:	080e9c08 	.word	0x080e9c08

0800d434 <__swbuf_r>:
 800d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d436:	460e      	mov	r6, r1
 800d438:	4614      	mov	r4, r2
 800d43a:	4605      	mov	r5, r0
 800d43c:	b118      	cbz	r0, 800d446 <__swbuf_r+0x12>
 800d43e:	6a03      	ldr	r3, [r0, #32]
 800d440:	b90b      	cbnz	r3, 800d446 <__swbuf_r+0x12>
 800d442:	f7ff fa31 	bl	800c8a8 <__sinit>
 800d446:	69a3      	ldr	r3, [r4, #24]
 800d448:	60a3      	str	r3, [r4, #8]
 800d44a:	89a3      	ldrh	r3, [r4, #12]
 800d44c:	071a      	lsls	r2, r3, #28
 800d44e:	d525      	bpl.n	800d49c <__swbuf_r+0x68>
 800d450:	6923      	ldr	r3, [r4, #16]
 800d452:	b31b      	cbz	r3, 800d49c <__swbuf_r+0x68>
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	6922      	ldr	r2, [r4, #16]
 800d458:	1a98      	subs	r0, r3, r2
 800d45a:	6963      	ldr	r3, [r4, #20]
 800d45c:	b2f6      	uxtb	r6, r6
 800d45e:	4283      	cmp	r3, r0
 800d460:	4637      	mov	r7, r6
 800d462:	dc04      	bgt.n	800d46e <__swbuf_r+0x3a>
 800d464:	4621      	mov	r1, r4
 800d466:	4628      	mov	r0, r5
 800d468:	f7ff fe50 	bl	800d10c <_fflush_r>
 800d46c:	b9e0      	cbnz	r0, 800d4a8 <__swbuf_r+0x74>
 800d46e:	68a3      	ldr	r3, [r4, #8]
 800d470:	3b01      	subs	r3, #1
 800d472:	60a3      	str	r3, [r4, #8]
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	1c5a      	adds	r2, r3, #1
 800d478:	6022      	str	r2, [r4, #0]
 800d47a:	701e      	strb	r6, [r3, #0]
 800d47c:	6962      	ldr	r2, [r4, #20]
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	429a      	cmp	r2, r3
 800d482:	d004      	beq.n	800d48e <__swbuf_r+0x5a>
 800d484:	89a3      	ldrh	r3, [r4, #12]
 800d486:	07db      	lsls	r3, r3, #31
 800d488:	d506      	bpl.n	800d498 <__swbuf_r+0x64>
 800d48a:	2e0a      	cmp	r6, #10
 800d48c:	d104      	bne.n	800d498 <__swbuf_r+0x64>
 800d48e:	4621      	mov	r1, r4
 800d490:	4628      	mov	r0, r5
 800d492:	f7ff fe3b 	bl	800d10c <_fflush_r>
 800d496:	b938      	cbnz	r0, 800d4a8 <__swbuf_r+0x74>
 800d498:	4638      	mov	r0, r7
 800d49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d49c:	4621      	mov	r1, r4
 800d49e:	4628      	mov	r0, r5
 800d4a0:	f000 f806 	bl	800d4b0 <__swsetup_r>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d0d5      	beq.n	800d454 <__swbuf_r+0x20>
 800d4a8:	f04f 37ff 	mov.w	r7, #4294967295
 800d4ac:	e7f4      	b.n	800d498 <__swbuf_r+0x64>
	...

0800d4b0 <__swsetup_r>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	4b2a      	ldr	r3, [pc, #168]	; (800d55c <__swsetup_r+0xac>)
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	b118      	cbz	r0, 800d4c4 <__swsetup_r+0x14>
 800d4bc:	6a03      	ldr	r3, [r0, #32]
 800d4be:	b90b      	cbnz	r3, 800d4c4 <__swsetup_r+0x14>
 800d4c0:	f7ff f9f2 	bl	800c8a8 <__sinit>
 800d4c4:	89a3      	ldrh	r3, [r4, #12]
 800d4c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4ca:	0718      	lsls	r0, r3, #28
 800d4cc:	d422      	bmi.n	800d514 <__swsetup_r+0x64>
 800d4ce:	06d9      	lsls	r1, r3, #27
 800d4d0:	d407      	bmi.n	800d4e2 <__swsetup_r+0x32>
 800d4d2:	2309      	movs	r3, #9
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4da:	81a3      	strh	r3, [r4, #12]
 800d4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e0:	e034      	b.n	800d54c <__swsetup_r+0x9c>
 800d4e2:	0758      	lsls	r0, r3, #29
 800d4e4:	d512      	bpl.n	800d50c <__swsetup_r+0x5c>
 800d4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4e8:	b141      	cbz	r1, 800d4fc <__swsetup_r+0x4c>
 800d4ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4ee:	4299      	cmp	r1, r3
 800d4f0:	d002      	beq.n	800d4f8 <__swsetup_r+0x48>
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	f7ff faf4 	bl	800cae0 <_free_r>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	6363      	str	r3, [r4, #52]	; 0x34
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d502:	81a3      	strh	r3, [r4, #12]
 800d504:	2300      	movs	r3, #0
 800d506:	6063      	str	r3, [r4, #4]
 800d508:	6923      	ldr	r3, [r4, #16]
 800d50a:	6023      	str	r3, [r4, #0]
 800d50c:	89a3      	ldrh	r3, [r4, #12]
 800d50e:	f043 0308 	orr.w	r3, r3, #8
 800d512:	81a3      	strh	r3, [r4, #12]
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	b94b      	cbnz	r3, 800d52c <__swsetup_r+0x7c>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d522:	d003      	beq.n	800d52c <__swsetup_r+0x7c>
 800d524:	4621      	mov	r1, r4
 800d526:	4628      	mov	r0, r5
 800d528:	f000 f884 	bl	800d634 <__smakebuf_r>
 800d52c:	89a0      	ldrh	r0, [r4, #12]
 800d52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d532:	f010 0301 	ands.w	r3, r0, #1
 800d536:	d00a      	beq.n	800d54e <__swsetup_r+0x9e>
 800d538:	2300      	movs	r3, #0
 800d53a:	60a3      	str	r3, [r4, #8]
 800d53c:	6963      	ldr	r3, [r4, #20]
 800d53e:	425b      	negs	r3, r3
 800d540:	61a3      	str	r3, [r4, #24]
 800d542:	6923      	ldr	r3, [r4, #16]
 800d544:	b943      	cbnz	r3, 800d558 <__swsetup_r+0xa8>
 800d546:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d54a:	d1c4      	bne.n	800d4d6 <__swsetup_r+0x26>
 800d54c:	bd38      	pop	{r3, r4, r5, pc}
 800d54e:	0781      	lsls	r1, r0, #30
 800d550:	bf58      	it	pl
 800d552:	6963      	ldrpl	r3, [r4, #20]
 800d554:	60a3      	str	r3, [r4, #8]
 800d556:	e7f4      	b.n	800d542 <__swsetup_r+0x92>
 800d558:	2000      	movs	r0, #0
 800d55a:	e7f7      	b.n	800d54c <__swsetup_r+0x9c>
 800d55c:	20000104 	.word	0x20000104

0800d560 <_raise_r>:
 800d560:	291f      	cmp	r1, #31
 800d562:	b538      	push	{r3, r4, r5, lr}
 800d564:	4604      	mov	r4, r0
 800d566:	460d      	mov	r5, r1
 800d568:	d904      	bls.n	800d574 <_raise_r+0x14>
 800d56a:	2316      	movs	r3, #22
 800d56c:	6003      	str	r3, [r0, #0]
 800d56e:	f04f 30ff 	mov.w	r0, #4294967295
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d576:	b112      	cbz	r2, 800d57e <_raise_r+0x1e>
 800d578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d57c:	b94b      	cbnz	r3, 800d592 <_raise_r+0x32>
 800d57e:	4620      	mov	r0, r4
 800d580:	f000 f830 	bl	800d5e4 <_getpid_r>
 800d584:	462a      	mov	r2, r5
 800d586:	4601      	mov	r1, r0
 800d588:	4620      	mov	r0, r4
 800d58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d58e:	f000 b817 	b.w	800d5c0 <_kill_r>
 800d592:	2b01      	cmp	r3, #1
 800d594:	d00a      	beq.n	800d5ac <_raise_r+0x4c>
 800d596:	1c59      	adds	r1, r3, #1
 800d598:	d103      	bne.n	800d5a2 <_raise_r+0x42>
 800d59a:	2316      	movs	r3, #22
 800d59c:	6003      	str	r3, [r0, #0]
 800d59e:	2001      	movs	r0, #1
 800d5a0:	e7e7      	b.n	800d572 <_raise_r+0x12>
 800d5a2:	2400      	movs	r4, #0
 800d5a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	4798      	blx	r3
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	e7e0      	b.n	800d572 <_raise_r+0x12>

0800d5b0 <raise>:
 800d5b0:	4b02      	ldr	r3, [pc, #8]	; (800d5bc <raise+0xc>)
 800d5b2:	4601      	mov	r1, r0
 800d5b4:	6818      	ldr	r0, [r3, #0]
 800d5b6:	f7ff bfd3 	b.w	800d560 <_raise_r>
 800d5ba:	bf00      	nop
 800d5bc:	20000104 	.word	0x20000104

0800d5c0 <_kill_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d07      	ldr	r5, [pc, #28]	; (800d5e0 <_kill_r+0x20>)
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	4611      	mov	r1, r2
 800d5cc:	602b      	str	r3, [r5, #0]
 800d5ce:	f7f7 ffa1 	bl	8005514 <_kill>
 800d5d2:	1c43      	adds	r3, r0, #1
 800d5d4:	d102      	bne.n	800d5dc <_kill_r+0x1c>
 800d5d6:	682b      	ldr	r3, [r5, #0]
 800d5d8:	b103      	cbz	r3, 800d5dc <_kill_r+0x1c>
 800d5da:	6023      	str	r3, [r4, #0]
 800d5dc:	bd38      	pop	{r3, r4, r5, pc}
 800d5de:	bf00      	nop
 800d5e0:	200006c4 	.word	0x200006c4

0800d5e4 <_getpid_r>:
 800d5e4:	f7f7 bf8e 	b.w	8005504 <_getpid>

0800d5e8 <__swhatbuf_r>:
 800d5e8:	b570      	push	{r4, r5, r6, lr}
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	b096      	sub	sp, #88	; 0x58
 800d5f4:	4615      	mov	r5, r2
 800d5f6:	461e      	mov	r6, r3
 800d5f8:	da0d      	bge.n	800d616 <__swhatbuf_r+0x2e>
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d600:	f04f 0100 	mov.w	r1, #0
 800d604:	bf0c      	ite	eq
 800d606:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d60a:	2340      	movne	r3, #64	; 0x40
 800d60c:	2000      	movs	r0, #0
 800d60e:	6031      	str	r1, [r6, #0]
 800d610:	602b      	str	r3, [r5, #0]
 800d612:	b016      	add	sp, #88	; 0x58
 800d614:	bd70      	pop	{r4, r5, r6, pc}
 800d616:	466a      	mov	r2, sp
 800d618:	f000 f848 	bl	800d6ac <_fstat_r>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	dbec      	blt.n	800d5fa <__swhatbuf_r+0x12>
 800d620:	9901      	ldr	r1, [sp, #4]
 800d622:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d626:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d62a:	4259      	negs	r1, r3
 800d62c:	4159      	adcs	r1, r3
 800d62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d632:	e7eb      	b.n	800d60c <__swhatbuf_r+0x24>

0800d634 <__smakebuf_r>:
 800d634:	898b      	ldrh	r3, [r1, #12]
 800d636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d638:	079d      	lsls	r5, r3, #30
 800d63a:	4606      	mov	r6, r0
 800d63c:	460c      	mov	r4, r1
 800d63e:	d507      	bpl.n	800d650 <__smakebuf_r+0x1c>
 800d640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	6123      	str	r3, [r4, #16]
 800d648:	2301      	movs	r3, #1
 800d64a:	6163      	str	r3, [r4, #20]
 800d64c:	b002      	add	sp, #8
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	ab01      	add	r3, sp, #4
 800d652:	466a      	mov	r2, sp
 800d654:	f7ff ffc8 	bl	800d5e8 <__swhatbuf_r>
 800d658:	9900      	ldr	r1, [sp, #0]
 800d65a:	4605      	mov	r5, r0
 800d65c:	4630      	mov	r0, r6
 800d65e:	f7ff fab3 	bl	800cbc8 <_malloc_r>
 800d662:	b948      	cbnz	r0, 800d678 <__smakebuf_r+0x44>
 800d664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d668:	059a      	lsls	r2, r3, #22
 800d66a:	d4ef      	bmi.n	800d64c <__smakebuf_r+0x18>
 800d66c:	f023 0303 	bic.w	r3, r3, #3
 800d670:	f043 0302 	orr.w	r3, r3, #2
 800d674:	81a3      	strh	r3, [r4, #12]
 800d676:	e7e3      	b.n	800d640 <__smakebuf_r+0xc>
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	6020      	str	r0, [r4, #0]
 800d67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d680:	81a3      	strh	r3, [r4, #12]
 800d682:	9b00      	ldr	r3, [sp, #0]
 800d684:	6163      	str	r3, [r4, #20]
 800d686:	9b01      	ldr	r3, [sp, #4]
 800d688:	6120      	str	r0, [r4, #16]
 800d68a:	b15b      	cbz	r3, 800d6a4 <__smakebuf_r+0x70>
 800d68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d690:	4630      	mov	r0, r6
 800d692:	f000 f81d 	bl	800d6d0 <_isatty_r>
 800d696:	b128      	cbz	r0, 800d6a4 <__smakebuf_r+0x70>
 800d698:	89a3      	ldrh	r3, [r4, #12]
 800d69a:	f023 0303 	bic.w	r3, r3, #3
 800d69e:	f043 0301 	orr.w	r3, r3, #1
 800d6a2:	81a3      	strh	r3, [r4, #12]
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	431d      	orrs	r5, r3
 800d6a8:	81a5      	strh	r5, [r4, #12]
 800d6aa:	e7cf      	b.n	800d64c <__smakebuf_r+0x18>

0800d6ac <_fstat_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	4d07      	ldr	r5, [pc, #28]	; (800d6cc <_fstat_r+0x20>)
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	4611      	mov	r1, r2
 800d6b8:	602b      	str	r3, [r5, #0]
 800d6ba:	f7f7 ff8a 	bl	80055d2 <_fstat>
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	d102      	bne.n	800d6c8 <_fstat_r+0x1c>
 800d6c2:	682b      	ldr	r3, [r5, #0]
 800d6c4:	b103      	cbz	r3, 800d6c8 <_fstat_r+0x1c>
 800d6c6:	6023      	str	r3, [r4, #0]
 800d6c8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ca:	bf00      	nop
 800d6cc:	200006c4 	.word	0x200006c4

0800d6d0 <_isatty_r>:
 800d6d0:	b538      	push	{r3, r4, r5, lr}
 800d6d2:	4d06      	ldr	r5, [pc, #24]	; (800d6ec <_isatty_r+0x1c>)
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	4608      	mov	r0, r1
 800d6da:	602b      	str	r3, [r5, #0]
 800d6dc:	f7f7 ff89 	bl	80055f2 <_isatty>
 800d6e0:	1c43      	adds	r3, r0, #1
 800d6e2:	d102      	bne.n	800d6ea <_isatty_r+0x1a>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	b103      	cbz	r3, 800d6ea <_isatty_r+0x1a>
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	200006c4 	.word	0x200006c4

0800d6f0 <pow>:
 800d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f2:	ed2d 8b02 	vpush	{d8}
 800d6f6:	eeb0 8a40 	vmov.f32	s16, s0
 800d6fa:	eef0 8a60 	vmov.f32	s17, s1
 800d6fe:	ec55 4b11 	vmov	r4, r5, d1
 800d702:	f000 f979 	bl	800d9f8 <__ieee754_pow>
 800d706:	4622      	mov	r2, r4
 800d708:	462b      	mov	r3, r5
 800d70a:	4620      	mov	r0, r4
 800d70c:	4629      	mov	r1, r5
 800d70e:	ec57 6b10 	vmov	r6, r7, d0
 800d712:	f7f3 fa0b 	bl	8000b2c <__aeabi_dcmpun>
 800d716:	2800      	cmp	r0, #0
 800d718:	d13b      	bne.n	800d792 <pow+0xa2>
 800d71a:	ec51 0b18 	vmov	r0, r1, d8
 800d71e:	2200      	movs	r2, #0
 800d720:	2300      	movs	r3, #0
 800d722:	f7f3 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d726:	b1b8      	cbz	r0, 800d758 <pow+0x68>
 800d728:	2200      	movs	r2, #0
 800d72a:	2300      	movs	r3, #0
 800d72c:	4620      	mov	r0, r4
 800d72e:	4629      	mov	r1, r5
 800d730:	f7f3 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 800d734:	2800      	cmp	r0, #0
 800d736:	d146      	bne.n	800d7c6 <pow+0xd6>
 800d738:	ec45 4b10 	vmov	d0, r4, r5
 800d73c:	f000 f874 	bl	800d828 <finite>
 800d740:	b338      	cbz	r0, 800d792 <pow+0xa2>
 800d742:	2200      	movs	r2, #0
 800d744:	2300      	movs	r3, #0
 800d746:	4620      	mov	r0, r4
 800d748:	4629      	mov	r1, r5
 800d74a:	f7f3 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800d74e:	b300      	cbz	r0, 800d792 <pow+0xa2>
 800d750:	f7ff f972 	bl	800ca38 <__errno>
 800d754:	2322      	movs	r3, #34	; 0x22
 800d756:	e01b      	b.n	800d790 <pow+0xa0>
 800d758:	ec47 6b10 	vmov	d0, r6, r7
 800d75c:	f000 f864 	bl	800d828 <finite>
 800d760:	b9e0      	cbnz	r0, 800d79c <pow+0xac>
 800d762:	eeb0 0a48 	vmov.f32	s0, s16
 800d766:	eef0 0a68 	vmov.f32	s1, s17
 800d76a:	f000 f85d 	bl	800d828 <finite>
 800d76e:	b1a8      	cbz	r0, 800d79c <pow+0xac>
 800d770:	ec45 4b10 	vmov	d0, r4, r5
 800d774:	f000 f858 	bl	800d828 <finite>
 800d778:	b180      	cbz	r0, 800d79c <pow+0xac>
 800d77a:	4632      	mov	r2, r6
 800d77c:	463b      	mov	r3, r7
 800d77e:	4630      	mov	r0, r6
 800d780:	4639      	mov	r1, r7
 800d782:	f7f3 f9d3 	bl	8000b2c <__aeabi_dcmpun>
 800d786:	2800      	cmp	r0, #0
 800d788:	d0e2      	beq.n	800d750 <pow+0x60>
 800d78a:	f7ff f955 	bl	800ca38 <__errno>
 800d78e:	2321      	movs	r3, #33	; 0x21
 800d790:	6003      	str	r3, [r0, #0]
 800d792:	ecbd 8b02 	vpop	{d8}
 800d796:	ec47 6b10 	vmov	d0, r6, r7
 800d79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d79c:	2200      	movs	r2, #0
 800d79e:	2300      	movs	r3, #0
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	f7f3 f990 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d0f2      	beq.n	800d792 <pow+0xa2>
 800d7ac:	eeb0 0a48 	vmov.f32	s0, s16
 800d7b0:	eef0 0a68 	vmov.f32	s1, s17
 800d7b4:	f000 f838 	bl	800d828 <finite>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d0ea      	beq.n	800d792 <pow+0xa2>
 800d7bc:	ec45 4b10 	vmov	d0, r4, r5
 800d7c0:	f000 f832 	bl	800d828 <finite>
 800d7c4:	e7c3      	b.n	800d74e <pow+0x5e>
 800d7c6:	4f01      	ldr	r7, [pc, #4]	; (800d7cc <pow+0xdc>)
 800d7c8:	2600      	movs	r6, #0
 800d7ca:	e7e2      	b.n	800d792 <pow+0xa2>
 800d7cc:	3ff00000 	.word	0x3ff00000

0800d7d0 <sqrt>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	ed2d 8b02 	vpush	{d8}
 800d7d6:	ec55 4b10 	vmov	r4, r5, d0
 800d7da:	f000 f831 	bl	800d840 <__ieee754_sqrt>
 800d7de:	4622      	mov	r2, r4
 800d7e0:	462b      	mov	r3, r5
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	eeb0 8a40 	vmov.f32	s16, s0
 800d7ea:	eef0 8a60 	vmov.f32	s17, s1
 800d7ee:	f7f3 f99d 	bl	8000b2c <__aeabi_dcmpun>
 800d7f2:	b990      	cbnz	r0, 800d81a <sqrt+0x4a>
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	4629      	mov	r1, r5
 800d7fc:	f7f3 f96e 	bl	8000adc <__aeabi_dcmplt>
 800d800:	b158      	cbz	r0, 800d81a <sqrt+0x4a>
 800d802:	f7ff f919 	bl	800ca38 <__errno>
 800d806:	2321      	movs	r3, #33	; 0x21
 800d808:	6003      	str	r3, [r0, #0]
 800d80a:	2200      	movs	r2, #0
 800d80c:	2300      	movs	r3, #0
 800d80e:	4610      	mov	r0, r2
 800d810:	4619      	mov	r1, r3
 800d812:	f7f3 f81b 	bl	800084c <__aeabi_ddiv>
 800d816:	ec41 0b18 	vmov	d8, r0, r1
 800d81a:	eeb0 0a48 	vmov.f32	s0, s16
 800d81e:	eef0 0a68 	vmov.f32	s1, s17
 800d822:	ecbd 8b02 	vpop	{d8}
 800d826:	bd38      	pop	{r3, r4, r5, pc}

0800d828 <finite>:
 800d828:	b082      	sub	sp, #8
 800d82a:	ed8d 0b00 	vstr	d0, [sp]
 800d82e:	9801      	ldr	r0, [sp, #4]
 800d830:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d834:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d838:	0fc0      	lsrs	r0, r0, #31
 800d83a:	b002      	add	sp, #8
 800d83c:	4770      	bx	lr
	...

0800d840 <__ieee754_sqrt>:
 800d840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	ec55 4b10 	vmov	r4, r5, d0
 800d848:	4e67      	ldr	r6, [pc, #412]	; (800d9e8 <__ieee754_sqrt+0x1a8>)
 800d84a:	43ae      	bics	r6, r5
 800d84c:	ee10 0a10 	vmov	r0, s0
 800d850:	ee10 2a10 	vmov	r2, s0
 800d854:	4629      	mov	r1, r5
 800d856:	462b      	mov	r3, r5
 800d858:	d10d      	bne.n	800d876 <__ieee754_sqrt+0x36>
 800d85a:	f7f2 fecd 	bl	80005f8 <__aeabi_dmul>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4620      	mov	r0, r4
 800d864:	4629      	mov	r1, r5
 800d866:	f7f2 fd11 	bl	800028c <__adddf3>
 800d86a:	4604      	mov	r4, r0
 800d86c:	460d      	mov	r5, r1
 800d86e:	ec45 4b10 	vmov	d0, r4, r5
 800d872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d876:	2d00      	cmp	r5, #0
 800d878:	dc0b      	bgt.n	800d892 <__ieee754_sqrt+0x52>
 800d87a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d87e:	4326      	orrs	r6, r4
 800d880:	d0f5      	beq.n	800d86e <__ieee754_sqrt+0x2e>
 800d882:	b135      	cbz	r5, 800d892 <__ieee754_sqrt+0x52>
 800d884:	f7f2 fd00 	bl	8000288 <__aeabi_dsub>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	f7f2 ffde 	bl	800084c <__aeabi_ddiv>
 800d890:	e7eb      	b.n	800d86a <__ieee754_sqrt+0x2a>
 800d892:	1509      	asrs	r1, r1, #20
 800d894:	f000 808d 	beq.w	800d9b2 <__ieee754_sqrt+0x172>
 800d898:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d89c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d8a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8a4:	07c9      	lsls	r1, r1, #31
 800d8a6:	bf5c      	itt	pl
 800d8a8:	005b      	lslpl	r3, r3, #1
 800d8aa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d8ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d8b2:	bf58      	it	pl
 800d8b4:	0052      	lslpl	r2, r2, #1
 800d8b6:	2500      	movs	r5, #0
 800d8b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8bc:	1076      	asrs	r6, r6, #1
 800d8be:	0052      	lsls	r2, r2, #1
 800d8c0:	f04f 0e16 	mov.w	lr, #22
 800d8c4:	46ac      	mov	ip, r5
 800d8c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d8ca:	eb0c 0001 	add.w	r0, ip, r1
 800d8ce:	4298      	cmp	r0, r3
 800d8d0:	bfde      	ittt	le
 800d8d2:	1a1b      	suble	r3, r3, r0
 800d8d4:	eb00 0c01 	addle.w	ip, r0, r1
 800d8d8:	186d      	addle	r5, r5, r1
 800d8da:	005b      	lsls	r3, r3, #1
 800d8dc:	f1be 0e01 	subs.w	lr, lr, #1
 800d8e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d8e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8ec:	d1ed      	bne.n	800d8ca <__ieee754_sqrt+0x8a>
 800d8ee:	4674      	mov	r4, lr
 800d8f0:	2720      	movs	r7, #32
 800d8f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d8f6:	4563      	cmp	r3, ip
 800d8f8:	eb01 000e 	add.w	r0, r1, lr
 800d8fc:	dc02      	bgt.n	800d904 <__ieee754_sqrt+0xc4>
 800d8fe:	d113      	bne.n	800d928 <__ieee754_sqrt+0xe8>
 800d900:	4290      	cmp	r0, r2
 800d902:	d811      	bhi.n	800d928 <__ieee754_sqrt+0xe8>
 800d904:	2800      	cmp	r0, #0
 800d906:	eb00 0e01 	add.w	lr, r0, r1
 800d90a:	da57      	bge.n	800d9bc <__ieee754_sqrt+0x17c>
 800d90c:	f1be 0f00 	cmp.w	lr, #0
 800d910:	db54      	blt.n	800d9bc <__ieee754_sqrt+0x17c>
 800d912:	f10c 0801 	add.w	r8, ip, #1
 800d916:	eba3 030c 	sub.w	r3, r3, ip
 800d91a:	4290      	cmp	r0, r2
 800d91c:	bf88      	it	hi
 800d91e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d922:	1a12      	subs	r2, r2, r0
 800d924:	440c      	add	r4, r1
 800d926:	46c4      	mov	ip, r8
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	3f01      	subs	r7, #1
 800d92c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d930:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d934:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d938:	d1dd      	bne.n	800d8f6 <__ieee754_sqrt+0xb6>
 800d93a:	4313      	orrs	r3, r2
 800d93c:	d01b      	beq.n	800d976 <__ieee754_sqrt+0x136>
 800d93e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d9ec <__ieee754_sqrt+0x1ac>
 800d942:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d9f0 <__ieee754_sqrt+0x1b0>
 800d946:	e9da 0100 	ldrd	r0, r1, [sl]
 800d94a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d94e:	f7f2 fc9b 	bl	8000288 <__aeabi_dsub>
 800d952:	e9da 8900 	ldrd	r8, r9, [sl]
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4640      	mov	r0, r8
 800d95c:	4649      	mov	r1, r9
 800d95e:	f7f3 f8c7 	bl	8000af0 <__aeabi_dcmple>
 800d962:	b140      	cbz	r0, 800d976 <__ieee754_sqrt+0x136>
 800d964:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d968:	e9da 0100 	ldrd	r0, r1, [sl]
 800d96c:	e9db 2300 	ldrd	r2, r3, [fp]
 800d970:	d126      	bne.n	800d9c0 <__ieee754_sqrt+0x180>
 800d972:	3501      	adds	r5, #1
 800d974:	463c      	mov	r4, r7
 800d976:	106a      	asrs	r2, r5, #1
 800d978:	0863      	lsrs	r3, r4, #1
 800d97a:	07e9      	lsls	r1, r5, #31
 800d97c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d980:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d984:	bf48      	it	mi
 800d986:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d98a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d98e:	461c      	mov	r4, r3
 800d990:	e76d      	b.n	800d86e <__ieee754_sqrt+0x2e>
 800d992:	0ad3      	lsrs	r3, r2, #11
 800d994:	3815      	subs	r0, #21
 800d996:	0552      	lsls	r2, r2, #21
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d0fa      	beq.n	800d992 <__ieee754_sqrt+0x152>
 800d99c:	02dc      	lsls	r4, r3, #11
 800d99e:	d50a      	bpl.n	800d9b6 <__ieee754_sqrt+0x176>
 800d9a0:	f1c1 0420 	rsb	r4, r1, #32
 800d9a4:	fa22 f404 	lsr.w	r4, r2, r4
 800d9a8:	1e4d      	subs	r5, r1, #1
 800d9aa:	408a      	lsls	r2, r1
 800d9ac:	4323      	orrs	r3, r4
 800d9ae:	1b41      	subs	r1, r0, r5
 800d9b0:	e772      	b.n	800d898 <__ieee754_sqrt+0x58>
 800d9b2:	4608      	mov	r0, r1
 800d9b4:	e7f0      	b.n	800d998 <__ieee754_sqrt+0x158>
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	3101      	adds	r1, #1
 800d9ba:	e7ef      	b.n	800d99c <__ieee754_sqrt+0x15c>
 800d9bc:	46e0      	mov	r8, ip
 800d9be:	e7aa      	b.n	800d916 <__ieee754_sqrt+0xd6>
 800d9c0:	f7f2 fc64 	bl	800028c <__adddf3>
 800d9c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	4649      	mov	r1, r9
 800d9d0:	f7f3 f884 	bl	8000adc <__aeabi_dcmplt>
 800d9d4:	b120      	cbz	r0, 800d9e0 <__ieee754_sqrt+0x1a0>
 800d9d6:	1ca0      	adds	r0, r4, #2
 800d9d8:	bf08      	it	eq
 800d9da:	3501      	addeq	r5, #1
 800d9dc:	3402      	adds	r4, #2
 800d9de:	e7ca      	b.n	800d976 <__ieee754_sqrt+0x136>
 800d9e0:	3401      	adds	r4, #1
 800d9e2:	f024 0401 	bic.w	r4, r4, #1
 800d9e6:	e7c6      	b.n	800d976 <__ieee754_sqrt+0x136>
 800d9e8:	7ff00000 	.word	0x7ff00000
 800d9ec:	20000108 	.word	0x20000108
 800d9f0:	20000110 	.word	0x20000110
 800d9f4:	00000000 	.word	0x00000000

0800d9f8 <__ieee754_pow>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	ed2d 8b06 	vpush	{d8-d10}
 800da00:	b089      	sub	sp, #36	; 0x24
 800da02:	ed8d 1b00 	vstr	d1, [sp]
 800da06:	e9dd 2900 	ldrd	r2, r9, [sp]
 800da0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800da0e:	ea58 0102 	orrs.w	r1, r8, r2
 800da12:	ec57 6b10 	vmov	r6, r7, d0
 800da16:	d115      	bne.n	800da44 <__ieee754_pow+0x4c>
 800da18:	19b3      	adds	r3, r6, r6
 800da1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800da1e:	4152      	adcs	r2, r2
 800da20:	4299      	cmp	r1, r3
 800da22:	4b89      	ldr	r3, [pc, #548]	; (800dc48 <__ieee754_pow+0x250>)
 800da24:	4193      	sbcs	r3, r2
 800da26:	f080 84d1 	bcs.w	800e3cc <__ieee754_pow+0x9d4>
 800da2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da2e:	4630      	mov	r0, r6
 800da30:	4639      	mov	r1, r7
 800da32:	f7f2 fc2b 	bl	800028c <__adddf3>
 800da36:	ec41 0b10 	vmov	d0, r0, r1
 800da3a:	b009      	add	sp, #36	; 0x24
 800da3c:	ecbd 8b06 	vpop	{d8-d10}
 800da40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da44:	4b81      	ldr	r3, [pc, #516]	; (800dc4c <__ieee754_pow+0x254>)
 800da46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800da4a:	429c      	cmp	r4, r3
 800da4c:	ee10 aa10 	vmov	sl, s0
 800da50:	463d      	mov	r5, r7
 800da52:	dc06      	bgt.n	800da62 <__ieee754_pow+0x6a>
 800da54:	d101      	bne.n	800da5a <__ieee754_pow+0x62>
 800da56:	2e00      	cmp	r6, #0
 800da58:	d1e7      	bne.n	800da2a <__ieee754_pow+0x32>
 800da5a:	4598      	cmp	r8, r3
 800da5c:	dc01      	bgt.n	800da62 <__ieee754_pow+0x6a>
 800da5e:	d10f      	bne.n	800da80 <__ieee754_pow+0x88>
 800da60:	b172      	cbz	r2, 800da80 <__ieee754_pow+0x88>
 800da62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800da66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800da6a:	ea55 050a 	orrs.w	r5, r5, sl
 800da6e:	d1dc      	bne.n	800da2a <__ieee754_pow+0x32>
 800da70:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da74:	18db      	adds	r3, r3, r3
 800da76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800da7a:	4152      	adcs	r2, r2
 800da7c:	429d      	cmp	r5, r3
 800da7e:	e7d0      	b.n	800da22 <__ieee754_pow+0x2a>
 800da80:	2d00      	cmp	r5, #0
 800da82:	da3b      	bge.n	800dafc <__ieee754_pow+0x104>
 800da84:	4b72      	ldr	r3, [pc, #456]	; (800dc50 <__ieee754_pow+0x258>)
 800da86:	4598      	cmp	r8, r3
 800da88:	dc51      	bgt.n	800db2e <__ieee754_pow+0x136>
 800da8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800da8e:	4598      	cmp	r8, r3
 800da90:	f340 84ab 	ble.w	800e3ea <__ieee754_pow+0x9f2>
 800da94:	ea4f 5328 	mov.w	r3, r8, asr #20
 800da98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da9c:	2b14      	cmp	r3, #20
 800da9e:	dd0f      	ble.n	800dac0 <__ieee754_pow+0xc8>
 800daa0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800daa4:	fa22 f103 	lsr.w	r1, r2, r3
 800daa8:	fa01 f303 	lsl.w	r3, r1, r3
 800daac:	4293      	cmp	r3, r2
 800daae:	f040 849c 	bne.w	800e3ea <__ieee754_pow+0x9f2>
 800dab2:	f001 0101 	and.w	r1, r1, #1
 800dab6:	f1c1 0302 	rsb	r3, r1, #2
 800daba:	9304      	str	r3, [sp, #16]
 800dabc:	b182      	cbz	r2, 800dae0 <__ieee754_pow+0xe8>
 800dabe:	e05f      	b.n	800db80 <__ieee754_pow+0x188>
 800dac0:	2a00      	cmp	r2, #0
 800dac2:	d15b      	bne.n	800db7c <__ieee754_pow+0x184>
 800dac4:	f1c3 0314 	rsb	r3, r3, #20
 800dac8:	fa48 f103 	asr.w	r1, r8, r3
 800dacc:	fa01 f303 	lsl.w	r3, r1, r3
 800dad0:	4543      	cmp	r3, r8
 800dad2:	f040 8487 	bne.w	800e3e4 <__ieee754_pow+0x9ec>
 800dad6:	f001 0101 	and.w	r1, r1, #1
 800dada:	f1c1 0302 	rsb	r3, r1, #2
 800dade:	9304      	str	r3, [sp, #16]
 800dae0:	4b5c      	ldr	r3, [pc, #368]	; (800dc54 <__ieee754_pow+0x25c>)
 800dae2:	4598      	cmp	r8, r3
 800dae4:	d132      	bne.n	800db4c <__ieee754_pow+0x154>
 800dae6:	f1b9 0f00 	cmp.w	r9, #0
 800daea:	f280 8477 	bge.w	800e3dc <__ieee754_pow+0x9e4>
 800daee:	4959      	ldr	r1, [pc, #356]	; (800dc54 <__ieee754_pow+0x25c>)
 800daf0:	4632      	mov	r2, r6
 800daf2:	463b      	mov	r3, r7
 800daf4:	2000      	movs	r0, #0
 800daf6:	f7f2 fea9 	bl	800084c <__aeabi_ddiv>
 800dafa:	e79c      	b.n	800da36 <__ieee754_pow+0x3e>
 800dafc:	2300      	movs	r3, #0
 800dafe:	9304      	str	r3, [sp, #16]
 800db00:	2a00      	cmp	r2, #0
 800db02:	d13d      	bne.n	800db80 <__ieee754_pow+0x188>
 800db04:	4b51      	ldr	r3, [pc, #324]	; (800dc4c <__ieee754_pow+0x254>)
 800db06:	4598      	cmp	r8, r3
 800db08:	d1ea      	bne.n	800dae0 <__ieee754_pow+0xe8>
 800db0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800db0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800db12:	ea53 030a 	orrs.w	r3, r3, sl
 800db16:	f000 8459 	beq.w	800e3cc <__ieee754_pow+0x9d4>
 800db1a:	4b4f      	ldr	r3, [pc, #316]	; (800dc58 <__ieee754_pow+0x260>)
 800db1c:	429c      	cmp	r4, r3
 800db1e:	dd08      	ble.n	800db32 <__ieee754_pow+0x13a>
 800db20:	f1b9 0f00 	cmp.w	r9, #0
 800db24:	f2c0 8456 	blt.w	800e3d4 <__ieee754_pow+0x9dc>
 800db28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db2c:	e783      	b.n	800da36 <__ieee754_pow+0x3e>
 800db2e:	2302      	movs	r3, #2
 800db30:	e7e5      	b.n	800dafe <__ieee754_pow+0x106>
 800db32:	f1b9 0f00 	cmp.w	r9, #0
 800db36:	f04f 0000 	mov.w	r0, #0
 800db3a:	f04f 0100 	mov.w	r1, #0
 800db3e:	f6bf af7a 	bge.w	800da36 <__ieee754_pow+0x3e>
 800db42:	e9dd 0300 	ldrd	r0, r3, [sp]
 800db46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db4a:	e774      	b.n	800da36 <__ieee754_pow+0x3e>
 800db4c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800db50:	d106      	bne.n	800db60 <__ieee754_pow+0x168>
 800db52:	4632      	mov	r2, r6
 800db54:	463b      	mov	r3, r7
 800db56:	4630      	mov	r0, r6
 800db58:	4639      	mov	r1, r7
 800db5a:	f7f2 fd4d 	bl	80005f8 <__aeabi_dmul>
 800db5e:	e76a      	b.n	800da36 <__ieee754_pow+0x3e>
 800db60:	4b3e      	ldr	r3, [pc, #248]	; (800dc5c <__ieee754_pow+0x264>)
 800db62:	4599      	cmp	r9, r3
 800db64:	d10c      	bne.n	800db80 <__ieee754_pow+0x188>
 800db66:	2d00      	cmp	r5, #0
 800db68:	db0a      	blt.n	800db80 <__ieee754_pow+0x188>
 800db6a:	ec47 6b10 	vmov	d0, r6, r7
 800db6e:	b009      	add	sp, #36	; 0x24
 800db70:	ecbd 8b06 	vpop	{d8-d10}
 800db74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db78:	f7ff be62 	b.w	800d840 <__ieee754_sqrt>
 800db7c:	2300      	movs	r3, #0
 800db7e:	9304      	str	r3, [sp, #16]
 800db80:	ec47 6b10 	vmov	d0, r6, r7
 800db84:	f000 fc62 	bl	800e44c <fabs>
 800db88:	ec51 0b10 	vmov	r0, r1, d0
 800db8c:	f1ba 0f00 	cmp.w	sl, #0
 800db90:	d129      	bne.n	800dbe6 <__ieee754_pow+0x1ee>
 800db92:	b124      	cbz	r4, 800db9e <__ieee754_pow+0x1a6>
 800db94:	4b2f      	ldr	r3, [pc, #188]	; (800dc54 <__ieee754_pow+0x25c>)
 800db96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d123      	bne.n	800dbe6 <__ieee754_pow+0x1ee>
 800db9e:	f1b9 0f00 	cmp.w	r9, #0
 800dba2:	da05      	bge.n	800dbb0 <__ieee754_pow+0x1b8>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	2000      	movs	r0, #0
 800dbaa:	492a      	ldr	r1, [pc, #168]	; (800dc54 <__ieee754_pow+0x25c>)
 800dbac:	f7f2 fe4e 	bl	800084c <__aeabi_ddiv>
 800dbb0:	2d00      	cmp	r5, #0
 800dbb2:	f6bf af40 	bge.w	800da36 <__ieee754_pow+0x3e>
 800dbb6:	9b04      	ldr	r3, [sp, #16]
 800dbb8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dbbc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dbc0:	431c      	orrs	r4, r3
 800dbc2:	d108      	bne.n	800dbd6 <__ieee754_pow+0x1de>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	4610      	mov	r0, r2
 800dbca:	4619      	mov	r1, r3
 800dbcc:	f7f2 fb5c 	bl	8000288 <__aeabi_dsub>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	e78f      	b.n	800daf6 <__ieee754_pow+0xfe>
 800dbd6:	9b04      	ldr	r3, [sp, #16]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	f47f af2c 	bne.w	800da36 <__ieee754_pow+0x3e>
 800dbde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	e727      	b.n	800da36 <__ieee754_pow+0x3e>
 800dbe6:	0feb      	lsrs	r3, r5, #31
 800dbe8:	3b01      	subs	r3, #1
 800dbea:	9306      	str	r3, [sp, #24]
 800dbec:	9a06      	ldr	r2, [sp, #24]
 800dbee:	9b04      	ldr	r3, [sp, #16]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	d102      	bne.n	800dbfa <__ieee754_pow+0x202>
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	463b      	mov	r3, r7
 800dbf8:	e7e6      	b.n	800dbc8 <__ieee754_pow+0x1d0>
 800dbfa:	4b19      	ldr	r3, [pc, #100]	; (800dc60 <__ieee754_pow+0x268>)
 800dbfc:	4598      	cmp	r8, r3
 800dbfe:	f340 80fb 	ble.w	800ddf8 <__ieee754_pow+0x400>
 800dc02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dc06:	4598      	cmp	r8, r3
 800dc08:	4b13      	ldr	r3, [pc, #76]	; (800dc58 <__ieee754_pow+0x260>)
 800dc0a:	dd0c      	ble.n	800dc26 <__ieee754_pow+0x22e>
 800dc0c:	429c      	cmp	r4, r3
 800dc0e:	dc0f      	bgt.n	800dc30 <__ieee754_pow+0x238>
 800dc10:	f1b9 0f00 	cmp.w	r9, #0
 800dc14:	da0f      	bge.n	800dc36 <__ieee754_pow+0x23e>
 800dc16:	2000      	movs	r0, #0
 800dc18:	b009      	add	sp, #36	; 0x24
 800dc1a:	ecbd 8b06 	vpop	{d8-d10}
 800dc1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc22:	f000 bcc2 	b.w	800e5aa <__math_oflow>
 800dc26:	429c      	cmp	r4, r3
 800dc28:	dbf2      	blt.n	800dc10 <__ieee754_pow+0x218>
 800dc2a:	4b0a      	ldr	r3, [pc, #40]	; (800dc54 <__ieee754_pow+0x25c>)
 800dc2c:	429c      	cmp	r4, r3
 800dc2e:	dd19      	ble.n	800dc64 <__ieee754_pow+0x26c>
 800dc30:	f1b9 0f00 	cmp.w	r9, #0
 800dc34:	dcef      	bgt.n	800dc16 <__ieee754_pow+0x21e>
 800dc36:	2000      	movs	r0, #0
 800dc38:	b009      	add	sp, #36	; 0x24
 800dc3a:	ecbd 8b06 	vpop	{d8-d10}
 800dc3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc42:	f000 bca9 	b.w	800e598 <__math_uflow>
 800dc46:	bf00      	nop
 800dc48:	fff00000 	.word	0xfff00000
 800dc4c:	7ff00000 	.word	0x7ff00000
 800dc50:	433fffff 	.word	0x433fffff
 800dc54:	3ff00000 	.word	0x3ff00000
 800dc58:	3fefffff 	.word	0x3fefffff
 800dc5c:	3fe00000 	.word	0x3fe00000
 800dc60:	41e00000 	.word	0x41e00000
 800dc64:	4b60      	ldr	r3, [pc, #384]	; (800dde8 <__ieee754_pow+0x3f0>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	f7f2 fb0e 	bl	8000288 <__aeabi_dsub>
 800dc6c:	a354      	add	r3, pc, #336	; (adr r3, 800ddc0 <__ieee754_pow+0x3c8>)
 800dc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc72:	4604      	mov	r4, r0
 800dc74:	460d      	mov	r5, r1
 800dc76:	f7f2 fcbf 	bl	80005f8 <__aeabi_dmul>
 800dc7a:	a353      	add	r3, pc, #332	; (adr r3, 800ddc8 <__ieee754_pow+0x3d0>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	4606      	mov	r6, r0
 800dc82:	460f      	mov	r7, r1
 800dc84:	4620      	mov	r0, r4
 800dc86:	4629      	mov	r1, r5
 800dc88:	f7f2 fcb6 	bl	80005f8 <__aeabi_dmul>
 800dc8c:	4b57      	ldr	r3, [pc, #348]	; (800ddec <__ieee754_pow+0x3f4>)
 800dc8e:	4682      	mov	sl, r0
 800dc90:	468b      	mov	fp, r1
 800dc92:	2200      	movs	r2, #0
 800dc94:	4620      	mov	r0, r4
 800dc96:	4629      	mov	r1, r5
 800dc98:	f7f2 fcae 	bl	80005f8 <__aeabi_dmul>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	a14b      	add	r1, pc, #300	; (adr r1, 800ddd0 <__ieee754_pow+0x3d8>)
 800dca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dca6:	f7f2 faef 	bl	8000288 <__aeabi_dsub>
 800dcaa:	4622      	mov	r2, r4
 800dcac:	462b      	mov	r3, r5
 800dcae:	f7f2 fca3 	bl	80005f8 <__aeabi_dmul>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	494d      	ldr	r1, [pc, #308]	; (800ddf0 <__ieee754_pow+0x3f8>)
 800dcba:	f7f2 fae5 	bl	8000288 <__aeabi_dsub>
 800dcbe:	4622      	mov	r2, r4
 800dcc0:	4680      	mov	r8, r0
 800dcc2:	4689      	mov	r9, r1
 800dcc4:	462b      	mov	r3, r5
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	4629      	mov	r1, r5
 800dcca:	f7f2 fc95 	bl	80005f8 <__aeabi_dmul>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4640      	mov	r0, r8
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	f7f2 fc8f 	bl	80005f8 <__aeabi_dmul>
 800dcda:	a33f      	add	r3, pc, #252	; (adr r3, 800ddd8 <__ieee754_pow+0x3e0>)
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	f7f2 fc8a 	bl	80005f8 <__aeabi_dmul>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4650      	mov	r0, sl
 800dcea:	4659      	mov	r1, fp
 800dcec:	f7f2 facc 	bl	8000288 <__aeabi_dsub>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4680      	mov	r8, r0
 800dcf6:	4689      	mov	r9, r1
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	4639      	mov	r1, r7
 800dcfc:	f7f2 fac6 	bl	800028c <__adddf3>
 800dd00:	2000      	movs	r0, #0
 800dd02:	4632      	mov	r2, r6
 800dd04:	463b      	mov	r3, r7
 800dd06:	4604      	mov	r4, r0
 800dd08:	460d      	mov	r5, r1
 800dd0a:	f7f2 fabd 	bl	8000288 <__aeabi_dsub>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	4640      	mov	r0, r8
 800dd14:	4649      	mov	r1, r9
 800dd16:	f7f2 fab7 	bl	8000288 <__aeabi_dsub>
 800dd1a:	9b04      	ldr	r3, [sp, #16]
 800dd1c:	9a06      	ldr	r2, [sp, #24]
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	4313      	orrs	r3, r2
 800dd22:	4682      	mov	sl, r0
 800dd24:	468b      	mov	fp, r1
 800dd26:	f040 81e7 	bne.w	800e0f8 <__ieee754_pow+0x700>
 800dd2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800dde0 <__ieee754_pow+0x3e8>
 800dd2e:	eeb0 8a47 	vmov.f32	s16, s14
 800dd32:	eef0 8a67 	vmov.f32	s17, s15
 800dd36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dd3a:	2600      	movs	r6, #0
 800dd3c:	4632      	mov	r2, r6
 800dd3e:	463b      	mov	r3, r7
 800dd40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd44:	f7f2 faa0 	bl	8000288 <__aeabi_dsub>
 800dd48:	4622      	mov	r2, r4
 800dd4a:	462b      	mov	r3, r5
 800dd4c:	f7f2 fc54 	bl	80005f8 <__aeabi_dmul>
 800dd50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd54:	4680      	mov	r8, r0
 800dd56:	4689      	mov	r9, r1
 800dd58:	4650      	mov	r0, sl
 800dd5a:	4659      	mov	r1, fp
 800dd5c:	f7f2 fc4c 	bl	80005f8 <__aeabi_dmul>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	4640      	mov	r0, r8
 800dd66:	4649      	mov	r1, r9
 800dd68:	f7f2 fa90 	bl	800028c <__adddf3>
 800dd6c:	4632      	mov	r2, r6
 800dd6e:	463b      	mov	r3, r7
 800dd70:	4680      	mov	r8, r0
 800dd72:	4689      	mov	r9, r1
 800dd74:	4620      	mov	r0, r4
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 fc3e 	bl	80005f8 <__aeabi_dmul>
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	4604      	mov	r4, r0
 800dd80:	460d      	mov	r5, r1
 800dd82:	4602      	mov	r2, r0
 800dd84:	4649      	mov	r1, r9
 800dd86:	4640      	mov	r0, r8
 800dd88:	f7f2 fa80 	bl	800028c <__adddf3>
 800dd8c:	4b19      	ldr	r3, [pc, #100]	; (800ddf4 <__ieee754_pow+0x3fc>)
 800dd8e:	4299      	cmp	r1, r3
 800dd90:	ec45 4b19 	vmov	d9, r4, r5
 800dd94:	4606      	mov	r6, r0
 800dd96:	460f      	mov	r7, r1
 800dd98:	468b      	mov	fp, r1
 800dd9a:	f340 82f0 	ble.w	800e37e <__ieee754_pow+0x986>
 800dd9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dda2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dda6:	4303      	orrs	r3, r0
 800dda8:	f000 81e4 	beq.w	800e174 <__ieee754_pow+0x77c>
 800ddac:	ec51 0b18 	vmov	r0, r1, d8
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	f7f2 fe92 	bl	8000adc <__aeabi_dcmplt>
 800ddb8:	3800      	subs	r0, #0
 800ddba:	bf18      	it	ne
 800ddbc:	2001      	movne	r0, #1
 800ddbe:	e72b      	b.n	800dc18 <__ieee754_pow+0x220>
 800ddc0:	60000000 	.word	0x60000000
 800ddc4:	3ff71547 	.word	0x3ff71547
 800ddc8:	f85ddf44 	.word	0xf85ddf44
 800ddcc:	3e54ae0b 	.word	0x3e54ae0b
 800ddd0:	55555555 	.word	0x55555555
 800ddd4:	3fd55555 	.word	0x3fd55555
 800ddd8:	652b82fe 	.word	0x652b82fe
 800dddc:	3ff71547 	.word	0x3ff71547
 800dde0:	00000000 	.word	0x00000000
 800dde4:	bff00000 	.word	0xbff00000
 800dde8:	3ff00000 	.word	0x3ff00000
 800ddec:	3fd00000 	.word	0x3fd00000
 800ddf0:	3fe00000 	.word	0x3fe00000
 800ddf4:	408fffff 	.word	0x408fffff
 800ddf8:	4bd5      	ldr	r3, [pc, #852]	; (800e150 <__ieee754_pow+0x758>)
 800ddfa:	402b      	ands	r3, r5
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	b92b      	cbnz	r3, 800de0c <__ieee754_pow+0x414>
 800de00:	4bd4      	ldr	r3, [pc, #848]	; (800e154 <__ieee754_pow+0x75c>)
 800de02:	f7f2 fbf9 	bl	80005f8 <__aeabi_dmul>
 800de06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800de0a:	460c      	mov	r4, r1
 800de0c:	1523      	asrs	r3, r4, #20
 800de0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800de12:	4413      	add	r3, r2
 800de14:	9305      	str	r3, [sp, #20]
 800de16:	4bd0      	ldr	r3, [pc, #832]	; (800e158 <__ieee754_pow+0x760>)
 800de18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800de1c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800de20:	429c      	cmp	r4, r3
 800de22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800de26:	dd08      	ble.n	800de3a <__ieee754_pow+0x442>
 800de28:	4bcc      	ldr	r3, [pc, #816]	; (800e15c <__ieee754_pow+0x764>)
 800de2a:	429c      	cmp	r4, r3
 800de2c:	f340 8162 	ble.w	800e0f4 <__ieee754_pow+0x6fc>
 800de30:	9b05      	ldr	r3, [sp, #20]
 800de32:	3301      	adds	r3, #1
 800de34:	9305      	str	r3, [sp, #20]
 800de36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800de3a:	2400      	movs	r4, #0
 800de3c:	00e3      	lsls	r3, r4, #3
 800de3e:	9307      	str	r3, [sp, #28]
 800de40:	4bc7      	ldr	r3, [pc, #796]	; (800e160 <__ieee754_pow+0x768>)
 800de42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de46:	ed93 7b00 	vldr	d7, [r3]
 800de4a:	4629      	mov	r1, r5
 800de4c:	ec53 2b17 	vmov	r2, r3, d7
 800de50:	eeb0 9a47 	vmov.f32	s18, s14
 800de54:	eef0 9a67 	vmov.f32	s19, s15
 800de58:	4682      	mov	sl, r0
 800de5a:	f7f2 fa15 	bl	8000288 <__aeabi_dsub>
 800de5e:	4652      	mov	r2, sl
 800de60:	4606      	mov	r6, r0
 800de62:	460f      	mov	r7, r1
 800de64:	462b      	mov	r3, r5
 800de66:	ec51 0b19 	vmov	r0, r1, d9
 800de6a:	f7f2 fa0f 	bl	800028c <__adddf3>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	2000      	movs	r0, #0
 800de74:	49bb      	ldr	r1, [pc, #748]	; (800e164 <__ieee754_pow+0x76c>)
 800de76:	f7f2 fce9 	bl	800084c <__aeabi_ddiv>
 800de7a:	ec41 0b1a 	vmov	d10, r0, r1
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4630      	mov	r0, r6
 800de84:	4639      	mov	r1, r7
 800de86:	f7f2 fbb7 	bl	80005f8 <__aeabi_dmul>
 800de8a:	2300      	movs	r3, #0
 800de8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de90:	9302      	str	r3, [sp, #8]
 800de92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de96:	46ab      	mov	fp, r5
 800de98:	106d      	asrs	r5, r5, #1
 800de9a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800de9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dea2:	ec41 0b18 	vmov	d8, r0, r1
 800dea6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800deaa:	2200      	movs	r2, #0
 800deac:	4640      	mov	r0, r8
 800deae:	4649      	mov	r1, r9
 800deb0:	4614      	mov	r4, r2
 800deb2:	461d      	mov	r5, r3
 800deb4:	f7f2 fba0 	bl	80005f8 <__aeabi_dmul>
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	4630      	mov	r0, r6
 800debe:	4639      	mov	r1, r7
 800dec0:	f7f2 f9e2 	bl	8000288 <__aeabi_dsub>
 800dec4:	ec53 2b19 	vmov	r2, r3, d9
 800dec8:	4606      	mov	r6, r0
 800deca:	460f      	mov	r7, r1
 800decc:	4620      	mov	r0, r4
 800dece:	4629      	mov	r1, r5
 800ded0:	f7f2 f9da 	bl	8000288 <__aeabi_dsub>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4650      	mov	r0, sl
 800deda:	4659      	mov	r1, fp
 800dedc:	f7f2 f9d4 	bl	8000288 <__aeabi_dsub>
 800dee0:	4642      	mov	r2, r8
 800dee2:	464b      	mov	r3, r9
 800dee4:	f7f2 fb88 	bl	80005f8 <__aeabi_dmul>
 800dee8:	4602      	mov	r2, r0
 800deea:	460b      	mov	r3, r1
 800deec:	4630      	mov	r0, r6
 800deee:	4639      	mov	r1, r7
 800def0:	f7f2 f9ca 	bl	8000288 <__aeabi_dsub>
 800def4:	ec53 2b1a 	vmov	r2, r3, d10
 800def8:	f7f2 fb7e 	bl	80005f8 <__aeabi_dmul>
 800defc:	ec53 2b18 	vmov	r2, r3, d8
 800df00:	ec41 0b19 	vmov	d9, r0, r1
 800df04:	ec51 0b18 	vmov	r0, r1, d8
 800df08:	f7f2 fb76 	bl	80005f8 <__aeabi_dmul>
 800df0c:	a37c      	add	r3, pc, #496	; (adr r3, 800e100 <__ieee754_pow+0x708>)
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	4604      	mov	r4, r0
 800df14:	460d      	mov	r5, r1
 800df16:	f7f2 fb6f 	bl	80005f8 <__aeabi_dmul>
 800df1a:	a37b      	add	r3, pc, #492	; (adr r3, 800e108 <__ieee754_pow+0x710>)
 800df1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df20:	f7f2 f9b4 	bl	800028c <__adddf3>
 800df24:	4622      	mov	r2, r4
 800df26:	462b      	mov	r3, r5
 800df28:	f7f2 fb66 	bl	80005f8 <__aeabi_dmul>
 800df2c:	a378      	add	r3, pc, #480	; (adr r3, 800e110 <__ieee754_pow+0x718>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f9ab 	bl	800028c <__adddf3>
 800df36:	4622      	mov	r2, r4
 800df38:	462b      	mov	r3, r5
 800df3a:	f7f2 fb5d 	bl	80005f8 <__aeabi_dmul>
 800df3e:	a376      	add	r3, pc, #472	; (adr r3, 800e118 <__ieee754_pow+0x720>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f7f2 f9a2 	bl	800028c <__adddf3>
 800df48:	4622      	mov	r2, r4
 800df4a:	462b      	mov	r3, r5
 800df4c:	f7f2 fb54 	bl	80005f8 <__aeabi_dmul>
 800df50:	a373      	add	r3, pc, #460	; (adr r3, 800e120 <__ieee754_pow+0x728>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f7f2 f999 	bl	800028c <__adddf3>
 800df5a:	4622      	mov	r2, r4
 800df5c:	462b      	mov	r3, r5
 800df5e:	f7f2 fb4b 	bl	80005f8 <__aeabi_dmul>
 800df62:	a371      	add	r3, pc, #452	; (adr r3, 800e128 <__ieee754_pow+0x730>)
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	f7f2 f990 	bl	800028c <__adddf3>
 800df6c:	4622      	mov	r2, r4
 800df6e:	4606      	mov	r6, r0
 800df70:	460f      	mov	r7, r1
 800df72:	462b      	mov	r3, r5
 800df74:	4620      	mov	r0, r4
 800df76:	4629      	mov	r1, r5
 800df78:	f7f2 fb3e 	bl	80005f8 <__aeabi_dmul>
 800df7c:	4602      	mov	r2, r0
 800df7e:	460b      	mov	r3, r1
 800df80:	4630      	mov	r0, r6
 800df82:	4639      	mov	r1, r7
 800df84:	f7f2 fb38 	bl	80005f8 <__aeabi_dmul>
 800df88:	4642      	mov	r2, r8
 800df8a:	4604      	mov	r4, r0
 800df8c:	460d      	mov	r5, r1
 800df8e:	464b      	mov	r3, r9
 800df90:	ec51 0b18 	vmov	r0, r1, d8
 800df94:	f7f2 f97a 	bl	800028c <__adddf3>
 800df98:	ec53 2b19 	vmov	r2, r3, d9
 800df9c:	f7f2 fb2c 	bl	80005f8 <__aeabi_dmul>
 800dfa0:	4622      	mov	r2, r4
 800dfa2:	462b      	mov	r3, r5
 800dfa4:	f7f2 f972 	bl	800028c <__adddf3>
 800dfa8:	4642      	mov	r2, r8
 800dfaa:	4682      	mov	sl, r0
 800dfac:	468b      	mov	fp, r1
 800dfae:	464b      	mov	r3, r9
 800dfb0:	4640      	mov	r0, r8
 800dfb2:	4649      	mov	r1, r9
 800dfb4:	f7f2 fb20 	bl	80005f8 <__aeabi_dmul>
 800dfb8:	4b6b      	ldr	r3, [pc, #428]	; (800e168 <__ieee754_pow+0x770>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	460f      	mov	r7, r1
 800dfc0:	f7f2 f964 	bl	800028c <__adddf3>
 800dfc4:	4652      	mov	r2, sl
 800dfc6:	465b      	mov	r3, fp
 800dfc8:	f7f2 f960 	bl	800028c <__adddf3>
 800dfcc:	2000      	movs	r0, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	460d      	mov	r5, r1
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	4640      	mov	r0, r8
 800dfd8:	4649      	mov	r1, r9
 800dfda:	f7f2 fb0d 	bl	80005f8 <__aeabi_dmul>
 800dfde:	4b62      	ldr	r3, [pc, #392]	; (800e168 <__ieee754_pow+0x770>)
 800dfe0:	4680      	mov	r8, r0
 800dfe2:	4689      	mov	r9, r1
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	4629      	mov	r1, r5
 800dfea:	f7f2 f94d 	bl	8000288 <__aeabi_dsub>
 800dfee:	4632      	mov	r2, r6
 800dff0:	463b      	mov	r3, r7
 800dff2:	f7f2 f949 	bl	8000288 <__aeabi_dsub>
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4650      	mov	r0, sl
 800dffc:	4659      	mov	r1, fp
 800dffe:	f7f2 f943 	bl	8000288 <__aeabi_dsub>
 800e002:	ec53 2b18 	vmov	r2, r3, d8
 800e006:	f7f2 faf7 	bl	80005f8 <__aeabi_dmul>
 800e00a:	4622      	mov	r2, r4
 800e00c:	4606      	mov	r6, r0
 800e00e:	460f      	mov	r7, r1
 800e010:	462b      	mov	r3, r5
 800e012:	ec51 0b19 	vmov	r0, r1, d9
 800e016:	f7f2 faef 	bl	80005f8 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4630      	mov	r0, r6
 800e020:	4639      	mov	r1, r7
 800e022:	f7f2 f933 	bl	800028c <__adddf3>
 800e026:	4606      	mov	r6, r0
 800e028:	460f      	mov	r7, r1
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	4640      	mov	r0, r8
 800e030:	4649      	mov	r1, r9
 800e032:	f7f2 f92b 	bl	800028c <__adddf3>
 800e036:	a33e      	add	r3, pc, #248	; (adr r3, 800e130 <__ieee754_pow+0x738>)
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	2000      	movs	r0, #0
 800e03e:	4604      	mov	r4, r0
 800e040:	460d      	mov	r5, r1
 800e042:	f7f2 fad9 	bl	80005f8 <__aeabi_dmul>
 800e046:	4642      	mov	r2, r8
 800e048:	ec41 0b18 	vmov	d8, r0, r1
 800e04c:	464b      	mov	r3, r9
 800e04e:	4620      	mov	r0, r4
 800e050:	4629      	mov	r1, r5
 800e052:	f7f2 f919 	bl	8000288 <__aeabi_dsub>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	4630      	mov	r0, r6
 800e05c:	4639      	mov	r1, r7
 800e05e:	f7f2 f913 	bl	8000288 <__aeabi_dsub>
 800e062:	a335      	add	r3, pc, #212	; (adr r3, 800e138 <__ieee754_pow+0x740>)
 800e064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e068:	f7f2 fac6 	bl	80005f8 <__aeabi_dmul>
 800e06c:	a334      	add	r3, pc, #208	; (adr r3, 800e140 <__ieee754_pow+0x748>)
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	4606      	mov	r6, r0
 800e074:	460f      	mov	r7, r1
 800e076:	4620      	mov	r0, r4
 800e078:	4629      	mov	r1, r5
 800e07a:	f7f2 fabd 	bl	80005f8 <__aeabi_dmul>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4630      	mov	r0, r6
 800e084:	4639      	mov	r1, r7
 800e086:	f7f2 f901 	bl	800028c <__adddf3>
 800e08a:	9a07      	ldr	r2, [sp, #28]
 800e08c:	4b37      	ldr	r3, [pc, #220]	; (800e16c <__ieee754_pow+0x774>)
 800e08e:	4413      	add	r3, r2
 800e090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e094:	f7f2 f8fa 	bl	800028c <__adddf3>
 800e098:	4682      	mov	sl, r0
 800e09a:	9805      	ldr	r0, [sp, #20]
 800e09c:	468b      	mov	fp, r1
 800e09e:	f7f2 fa41 	bl	8000524 <__aeabi_i2d>
 800e0a2:	9a07      	ldr	r2, [sp, #28]
 800e0a4:	4b32      	ldr	r3, [pc, #200]	; (800e170 <__ieee754_pow+0x778>)
 800e0a6:	4413      	add	r3, r2
 800e0a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	460f      	mov	r7, r1
 800e0b0:	4652      	mov	r2, sl
 800e0b2:	465b      	mov	r3, fp
 800e0b4:	ec51 0b18 	vmov	r0, r1, d8
 800e0b8:	f7f2 f8e8 	bl	800028c <__adddf3>
 800e0bc:	4642      	mov	r2, r8
 800e0be:	464b      	mov	r3, r9
 800e0c0:	f7f2 f8e4 	bl	800028c <__adddf3>
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	463b      	mov	r3, r7
 800e0c8:	f7f2 f8e0 	bl	800028c <__adddf3>
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	4632      	mov	r2, r6
 800e0d0:	463b      	mov	r3, r7
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	460d      	mov	r5, r1
 800e0d6:	f7f2 f8d7 	bl	8000288 <__aeabi_dsub>
 800e0da:	4642      	mov	r2, r8
 800e0dc:	464b      	mov	r3, r9
 800e0de:	f7f2 f8d3 	bl	8000288 <__aeabi_dsub>
 800e0e2:	ec53 2b18 	vmov	r2, r3, d8
 800e0e6:	f7f2 f8cf 	bl	8000288 <__aeabi_dsub>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	4650      	mov	r0, sl
 800e0f0:	4659      	mov	r1, fp
 800e0f2:	e610      	b.n	800dd16 <__ieee754_pow+0x31e>
 800e0f4:	2401      	movs	r4, #1
 800e0f6:	e6a1      	b.n	800de3c <__ieee754_pow+0x444>
 800e0f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e148 <__ieee754_pow+0x750>
 800e0fc:	e617      	b.n	800dd2e <__ieee754_pow+0x336>
 800e0fe:	bf00      	nop
 800e100:	4a454eef 	.word	0x4a454eef
 800e104:	3fca7e28 	.word	0x3fca7e28
 800e108:	93c9db65 	.word	0x93c9db65
 800e10c:	3fcd864a 	.word	0x3fcd864a
 800e110:	a91d4101 	.word	0xa91d4101
 800e114:	3fd17460 	.word	0x3fd17460
 800e118:	518f264d 	.word	0x518f264d
 800e11c:	3fd55555 	.word	0x3fd55555
 800e120:	db6fabff 	.word	0xdb6fabff
 800e124:	3fdb6db6 	.word	0x3fdb6db6
 800e128:	33333303 	.word	0x33333303
 800e12c:	3fe33333 	.word	0x3fe33333
 800e130:	e0000000 	.word	0xe0000000
 800e134:	3feec709 	.word	0x3feec709
 800e138:	dc3a03fd 	.word	0xdc3a03fd
 800e13c:	3feec709 	.word	0x3feec709
 800e140:	145b01f5 	.word	0x145b01f5
 800e144:	be3e2fe0 	.word	0xbe3e2fe0
 800e148:	00000000 	.word	0x00000000
 800e14c:	3ff00000 	.word	0x3ff00000
 800e150:	7ff00000 	.word	0x7ff00000
 800e154:	43400000 	.word	0x43400000
 800e158:	0003988e 	.word	0x0003988e
 800e15c:	000bb679 	.word	0x000bb679
 800e160:	080e9c18 	.word	0x080e9c18
 800e164:	3ff00000 	.word	0x3ff00000
 800e168:	40080000 	.word	0x40080000
 800e16c:	080e9c38 	.word	0x080e9c38
 800e170:	080e9c28 	.word	0x080e9c28
 800e174:	a3b3      	add	r3, pc, #716	; (adr r3, 800e444 <__ieee754_pow+0xa4c>)
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	4640      	mov	r0, r8
 800e17c:	4649      	mov	r1, r9
 800e17e:	f7f2 f885 	bl	800028c <__adddf3>
 800e182:	4622      	mov	r2, r4
 800e184:	ec41 0b1a 	vmov	d10, r0, r1
 800e188:	462b      	mov	r3, r5
 800e18a:	4630      	mov	r0, r6
 800e18c:	4639      	mov	r1, r7
 800e18e:	f7f2 f87b 	bl	8000288 <__aeabi_dsub>
 800e192:	4602      	mov	r2, r0
 800e194:	460b      	mov	r3, r1
 800e196:	ec51 0b1a 	vmov	r0, r1, d10
 800e19a:	f7f2 fcbd 	bl	8000b18 <__aeabi_dcmpgt>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	f47f ae04 	bne.w	800ddac <__ieee754_pow+0x3b4>
 800e1a4:	4aa2      	ldr	r2, [pc, #648]	; (800e430 <__ieee754_pow+0xa38>)
 800e1a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	f340 8107 	ble.w	800e3be <__ieee754_pow+0x9c6>
 800e1b0:	151b      	asrs	r3, r3, #20
 800e1b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e1b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e1ba:	fa4a fa03 	asr.w	sl, sl, r3
 800e1be:	44da      	add	sl, fp
 800e1c0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e1c4:	489b      	ldr	r0, [pc, #620]	; (800e434 <__ieee754_pow+0xa3c>)
 800e1c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e1ca:	4108      	asrs	r0, r1
 800e1cc:	ea00 030a 	and.w	r3, r0, sl
 800e1d0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e1d4:	f1c1 0114 	rsb	r1, r1, #20
 800e1d8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e1dc:	fa4a fa01 	asr.w	sl, sl, r1
 800e1e0:	f1bb 0f00 	cmp.w	fp, #0
 800e1e4:	f04f 0200 	mov.w	r2, #0
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	4629      	mov	r1, r5
 800e1ec:	bfb8      	it	lt
 800e1ee:	f1ca 0a00 	rsblt	sl, sl, #0
 800e1f2:	f7f2 f849 	bl	8000288 <__aeabi_dsub>
 800e1f6:	ec41 0b19 	vmov	d9, r0, r1
 800e1fa:	4642      	mov	r2, r8
 800e1fc:	464b      	mov	r3, r9
 800e1fe:	ec51 0b19 	vmov	r0, r1, d9
 800e202:	f7f2 f843 	bl	800028c <__adddf3>
 800e206:	a37a      	add	r3, pc, #488	; (adr r3, 800e3f0 <__ieee754_pow+0x9f8>)
 800e208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20c:	2000      	movs	r0, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	460d      	mov	r5, r1
 800e212:	f7f2 f9f1 	bl	80005f8 <__aeabi_dmul>
 800e216:	ec53 2b19 	vmov	r2, r3, d9
 800e21a:	4606      	mov	r6, r0
 800e21c:	460f      	mov	r7, r1
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 f831 	bl	8000288 <__aeabi_dsub>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	4640      	mov	r0, r8
 800e22c:	4649      	mov	r1, r9
 800e22e:	f7f2 f82b 	bl	8000288 <__aeabi_dsub>
 800e232:	a371      	add	r3, pc, #452	; (adr r3, 800e3f8 <__ieee754_pow+0xa00>)
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f7f2 f9de 	bl	80005f8 <__aeabi_dmul>
 800e23c:	a370      	add	r3, pc, #448	; (adr r3, 800e400 <__ieee754_pow+0xa08>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	4680      	mov	r8, r0
 800e244:	4689      	mov	r9, r1
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 f9d5 	bl	80005f8 <__aeabi_dmul>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	4640      	mov	r0, r8
 800e254:	4649      	mov	r1, r9
 800e256:	f7f2 f819 	bl	800028c <__adddf3>
 800e25a:	4604      	mov	r4, r0
 800e25c:	460d      	mov	r5, r1
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	4630      	mov	r0, r6
 800e264:	4639      	mov	r1, r7
 800e266:	f7f2 f811 	bl	800028c <__adddf3>
 800e26a:	4632      	mov	r2, r6
 800e26c:	463b      	mov	r3, r7
 800e26e:	4680      	mov	r8, r0
 800e270:	4689      	mov	r9, r1
 800e272:	f7f2 f809 	bl	8000288 <__aeabi_dsub>
 800e276:	4602      	mov	r2, r0
 800e278:	460b      	mov	r3, r1
 800e27a:	4620      	mov	r0, r4
 800e27c:	4629      	mov	r1, r5
 800e27e:	f7f2 f803 	bl	8000288 <__aeabi_dsub>
 800e282:	4642      	mov	r2, r8
 800e284:	4606      	mov	r6, r0
 800e286:	460f      	mov	r7, r1
 800e288:	464b      	mov	r3, r9
 800e28a:	4640      	mov	r0, r8
 800e28c:	4649      	mov	r1, r9
 800e28e:	f7f2 f9b3 	bl	80005f8 <__aeabi_dmul>
 800e292:	a35d      	add	r3, pc, #372	; (adr r3, 800e408 <__ieee754_pow+0xa10>)
 800e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e298:	4604      	mov	r4, r0
 800e29a:	460d      	mov	r5, r1
 800e29c:	f7f2 f9ac 	bl	80005f8 <__aeabi_dmul>
 800e2a0:	a35b      	add	r3, pc, #364	; (adr r3, 800e410 <__ieee754_pow+0xa18>)
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	f7f1 ffef 	bl	8000288 <__aeabi_dsub>
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	f7f2 f9a3 	bl	80005f8 <__aeabi_dmul>
 800e2b2:	a359      	add	r3, pc, #356	; (adr r3, 800e418 <__ieee754_pow+0xa20>)
 800e2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b8:	f7f1 ffe8 	bl	800028c <__adddf3>
 800e2bc:	4622      	mov	r2, r4
 800e2be:	462b      	mov	r3, r5
 800e2c0:	f7f2 f99a 	bl	80005f8 <__aeabi_dmul>
 800e2c4:	a356      	add	r3, pc, #344	; (adr r3, 800e420 <__ieee754_pow+0xa28>)
 800e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ca:	f7f1 ffdd 	bl	8000288 <__aeabi_dsub>
 800e2ce:	4622      	mov	r2, r4
 800e2d0:	462b      	mov	r3, r5
 800e2d2:	f7f2 f991 	bl	80005f8 <__aeabi_dmul>
 800e2d6:	a354      	add	r3, pc, #336	; (adr r3, 800e428 <__ieee754_pow+0xa30>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	f7f1 ffd6 	bl	800028c <__adddf3>
 800e2e0:	4622      	mov	r2, r4
 800e2e2:	462b      	mov	r3, r5
 800e2e4:	f7f2 f988 	bl	80005f8 <__aeabi_dmul>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	f7f1 ffca 	bl	8000288 <__aeabi_dsub>
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	460d      	mov	r5, r1
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4640      	mov	r0, r8
 800e2fe:	4649      	mov	r1, r9
 800e300:	f7f2 f97a 	bl	80005f8 <__aeabi_dmul>
 800e304:	2200      	movs	r2, #0
 800e306:	ec41 0b19 	vmov	d9, r0, r1
 800e30a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e30e:	4620      	mov	r0, r4
 800e310:	4629      	mov	r1, r5
 800e312:	f7f1 ffb9 	bl	8000288 <__aeabi_dsub>
 800e316:	4602      	mov	r2, r0
 800e318:	460b      	mov	r3, r1
 800e31a:	ec51 0b19 	vmov	r0, r1, d9
 800e31e:	f7f2 fa95 	bl	800084c <__aeabi_ddiv>
 800e322:	4632      	mov	r2, r6
 800e324:	4604      	mov	r4, r0
 800e326:	460d      	mov	r5, r1
 800e328:	463b      	mov	r3, r7
 800e32a:	4640      	mov	r0, r8
 800e32c:	4649      	mov	r1, r9
 800e32e:	f7f2 f963 	bl	80005f8 <__aeabi_dmul>
 800e332:	4632      	mov	r2, r6
 800e334:	463b      	mov	r3, r7
 800e336:	f7f1 ffa9 	bl	800028c <__adddf3>
 800e33a:	4602      	mov	r2, r0
 800e33c:	460b      	mov	r3, r1
 800e33e:	4620      	mov	r0, r4
 800e340:	4629      	mov	r1, r5
 800e342:	f7f1 ffa1 	bl	8000288 <__aeabi_dsub>
 800e346:	4642      	mov	r2, r8
 800e348:	464b      	mov	r3, r9
 800e34a:	f7f1 ff9d 	bl	8000288 <__aeabi_dsub>
 800e34e:	460b      	mov	r3, r1
 800e350:	4602      	mov	r2, r0
 800e352:	4939      	ldr	r1, [pc, #228]	; (800e438 <__ieee754_pow+0xa40>)
 800e354:	2000      	movs	r0, #0
 800e356:	f7f1 ff97 	bl	8000288 <__aeabi_dsub>
 800e35a:	ec41 0b10 	vmov	d0, r0, r1
 800e35e:	ee10 3a90 	vmov	r3, s1
 800e362:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e36a:	da2b      	bge.n	800e3c4 <__ieee754_pow+0x9cc>
 800e36c:	4650      	mov	r0, sl
 800e36e:	f000 f877 	bl	800e460 <scalbn>
 800e372:	ec51 0b10 	vmov	r0, r1, d0
 800e376:	ec53 2b18 	vmov	r2, r3, d8
 800e37a:	f7ff bbee 	b.w	800db5a <__ieee754_pow+0x162>
 800e37e:	4b2f      	ldr	r3, [pc, #188]	; (800e43c <__ieee754_pow+0xa44>)
 800e380:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e384:	429e      	cmp	r6, r3
 800e386:	f77f af0d 	ble.w	800e1a4 <__ieee754_pow+0x7ac>
 800e38a:	4b2d      	ldr	r3, [pc, #180]	; (800e440 <__ieee754_pow+0xa48>)
 800e38c:	440b      	add	r3, r1
 800e38e:	4303      	orrs	r3, r0
 800e390:	d009      	beq.n	800e3a6 <__ieee754_pow+0x9ae>
 800e392:	ec51 0b18 	vmov	r0, r1, d8
 800e396:	2200      	movs	r2, #0
 800e398:	2300      	movs	r3, #0
 800e39a:	f7f2 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800e39e:	3800      	subs	r0, #0
 800e3a0:	bf18      	it	ne
 800e3a2:	2001      	movne	r0, #1
 800e3a4:	e448      	b.n	800dc38 <__ieee754_pow+0x240>
 800e3a6:	4622      	mov	r2, r4
 800e3a8:	462b      	mov	r3, r5
 800e3aa:	f7f1 ff6d 	bl	8000288 <__aeabi_dsub>
 800e3ae:	4642      	mov	r2, r8
 800e3b0:	464b      	mov	r3, r9
 800e3b2:	f7f2 fba7 	bl	8000b04 <__aeabi_dcmpge>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	f43f aef4 	beq.w	800e1a4 <__ieee754_pow+0x7ac>
 800e3bc:	e7e9      	b.n	800e392 <__ieee754_pow+0x99a>
 800e3be:	f04f 0a00 	mov.w	sl, #0
 800e3c2:	e71a      	b.n	800e1fa <__ieee754_pow+0x802>
 800e3c4:	ec51 0b10 	vmov	r0, r1, d0
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	e7d4      	b.n	800e376 <__ieee754_pow+0x97e>
 800e3cc:	491a      	ldr	r1, [pc, #104]	; (800e438 <__ieee754_pow+0xa40>)
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	f7ff bb31 	b.w	800da36 <__ieee754_pow+0x3e>
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	f7ff bb2d 	b.w	800da36 <__ieee754_pow+0x3e>
 800e3dc:	4630      	mov	r0, r6
 800e3de:	4639      	mov	r1, r7
 800e3e0:	f7ff bb29 	b.w	800da36 <__ieee754_pow+0x3e>
 800e3e4:	9204      	str	r2, [sp, #16]
 800e3e6:	f7ff bb7b 	b.w	800dae0 <__ieee754_pow+0xe8>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	f7ff bb65 	b.w	800daba <__ieee754_pow+0xc2>
 800e3f0:	00000000 	.word	0x00000000
 800e3f4:	3fe62e43 	.word	0x3fe62e43
 800e3f8:	fefa39ef 	.word	0xfefa39ef
 800e3fc:	3fe62e42 	.word	0x3fe62e42
 800e400:	0ca86c39 	.word	0x0ca86c39
 800e404:	be205c61 	.word	0xbe205c61
 800e408:	72bea4d0 	.word	0x72bea4d0
 800e40c:	3e663769 	.word	0x3e663769
 800e410:	c5d26bf1 	.word	0xc5d26bf1
 800e414:	3ebbbd41 	.word	0x3ebbbd41
 800e418:	af25de2c 	.word	0xaf25de2c
 800e41c:	3f11566a 	.word	0x3f11566a
 800e420:	16bebd93 	.word	0x16bebd93
 800e424:	3f66c16c 	.word	0x3f66c16c
 800e428:	5555553e 	.word	0x5555553e
 800e42c:	3fc55555 	.word	0x3fc55555
 800e430:	3fe00000 	.word	0x3fe00000
 800e434:	fff00000 	.word	0xfff00000
 800e438:	3ff00000 	.word	0x3ff00000
 800e43c:	4090cbff 	.word	0x4090cbff
 800e440:	3f6f3400 	.word	0x3f6f3400
 800e444:	652b82fe 	.word	0x652b82fe
 800e448:	3c971547 	.word	0x3c971547

0800e44c <fabs>:
 800e44c:	ec51 0b10 	vmov	r0, r1, d0
 800e450:	ee10 2a10 	vmov	r2, s0
 800e454:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e458:	ec43 2b10 	vmov	d0, r2, r3
 800e45c:	4770      	bx	lr
	...

0800e460 <scalbn>:
 800e460:	b570      	push	{r4, r5, r6, lr}
 800e462:	ec55 4b10 	vmov	r4, r5, d0
 800e466:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e46a:	4606      	mov	r6, r0
 800e46c:	462b      	mov	r3, r5
 800e46e:	b999      	cbnz	r1, 800e498 <scalbn+0x38>
 800e470:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e474:	4323      	orrs	r3, r4
 800e476:	d03f      	beq.n	800e4f8 <scalbn+0x98>
 800e478:	4b35      	ldr	r3, [pc, #212]	; (800e550 <scalbn+0xf0>)
 800e47a:	4629      	mov	r1, r5
 800e47c:	ee10 0a10 	vmov	r0, s0
 800e480:	2200      	movs	r2, #0
 800e482:	f7f2 f8b9 	bl	80005f8 <__aeabi_dmul>
 800e486:	4b33      	ldr	r3, [pc, #204]	; (800e554 <scalbn+0xf4>)
 800e488:	429e      	cmp	r6, r3
 800e48a:	4604      	mov	r4, r0
 800e48c:	460d      	mov	r5, r1
 800e48e:	da10      	bge.n	800e4b2 <scalbn+0x52>
 800e490:	a327      	add	r3, pc, #156	; (adr r3, 800e530 <scalbn+0xd0>)
 800e492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e496:	e01f      	b.n	800e4d8 <scalbn+0x78>
 800e498:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e49c:	4291      	cmp	r1, r2
 800e49e:	d10c      	bne.n	800e4ba <scalbn+0x5a>
 800e4a0:	ee10 2a10 	vmov	r2, s0
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	f7f1 fef0 	bl	800028c <__adddf3>
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	460d      	mov	r5, r1
 800e4b0:	e022      	b.n	800e4f8 <scalbn+0x98>
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e4b8:	3936      	subs	r1, #54	; 0x36
 800e4ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e4be:	4296      	cmp	r6, r2
 800e4c0:	dd0d      	ble.n	800e4de <scalbn+0x7e>
 800e4c2:	2d00      	cmp	r5, #0
 800e4c4:	a11c      	add	r1, pc, #112	; (adr r1, 800e538 <scalbn+0xd8>)
 800e4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4ca:	da02      	bge.n	800e4d2 <scalbn+0x72>
 800e4cc:	a11c      	add	r1, pc, #112	; (adr r1, 800e540 <scalbn+0xe0>)
 800e4ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4d2:	a319      	add	r3, pc, #100	; (adr r3, 800e538 <scalbn+0xd8>)
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	f7f2 f88e 	bl	80005f8 <__aeabi_dmul>
 800e4dc:	e7e6      	b.n	800e4ac <scalbn+0x4c>
 800e4de:	1872      	adds	r2, r6, r1
 800e4e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e4e4:	428a      	cmp	r2, r1
 800e4e6:	dcec      	bgt.n	800e4c2 <scalbn+0x62>
 800e4e8:	2a00      	cmp	r2, #0
 800e4ea:	dd08      	ble.n	800e4fe <scalbn+0x9e>
 800e4ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4f8:	ec45 4b10 	vmov	d0, r4, r5
 800e4fc:	bd70      	pop	{r4, r5, r6, pc}
 800e4fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e502:	da08      	bge.n	800e516 <scalbn+0xb6>
 800e504:	2d00      	cmp	r5, #0
 800e506:	a10a      	add	r1, pc, #40	; (adr r1, 800e530 <scalbn+0xd0>)
 800e508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e50c:	dac0      	bge.n	800e490 <scalbn+0x30>
 800e50e:	a10e      	add	r1, pc, #56	; (adr r1, 800e548 <scalbn+0xe8>)
 800e510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e514:	e7bc      	b.n	800e490 <scalbn+0x30>
 800e516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e51a:	3236      	adds	r2, #54	; 0x36
 800e51c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e524:	4620      	mov	r0, r4
 800e526:	4b0c      	ldr	r3, [pc, #48]	; (800e558 <scalbn+0xf8>)
 800e528:	2200      	movs	r2, #0
 800e52a:	e7d5      	b.n	800e4d8 <scalbn+0x78>
 800e52c:	f3af 8000 	nop.w
 800e530:	c2f8f359 	.word	0xc2f8f359
 800e534:	01a56e1f 	.word	0x01a56e1f
 800e538:	8800759c 	.word	0x8800759c
 800e53c:	7e37e43c 	.word	0x7e37e43c
 800e540:	8800759c 	.word	0x8800759c
 800e544:	fe37e43c 	.word	0xfe37e43c
 800e548:	c2f8f359 	.word	0xc2f8f359
 800e54c:	81a56e1f 	.word	0x81a56e1f
 800e550:	43500000 	.word	0x43500000
 800e554:	ffff3cb0 	.word	0xffff3cb0
 800e558:	3c900000 	.word	0x3c900000

0800e55c <with_errno>:
 800e55c:	b570      	push	{r4, r5, r6, lr}
 800e55e:	4604      	mov	r4, r0
 800e560:	460d      	mov	r5, r1
 800e562:	4616      	mov	r6, r2
 800e564:	f7fe fa68 	bl	800ca38 <__errno>
 800e568:	4629      	mov	r1, r5
 800e56a:	6006      	str	r6, [r0, #0]
 800e56c:	4620      	mov	r0, r4
 800e56e:	bd70      	pop	{r4, r5, r6, pc}

0800e570 <xflow>:
 800e570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e572:	4614      	mov	r4, r2
 800e574:	461d      	mov	r5, r3
 800e576:	b108      	cbz	r0, 800e57c <xflow+0xc>
 800e578:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e57c:	e9cd 2300 	strd	r2, r3, [sp]
 800e580:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e584:	4620      	mov	r0, r4
 800e586:	4629      	mov	r1, r5
 800e588:	f7f2 f836 	bl	80005f8 <__aeabi_dmul>
 800e58c:	2222      	movs	r2, #34	; 0x22
 800e58e:	b003      	add	sp, #12
 800e590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e594:	f7ff bfe2 	b.w	800e55c <with_errno>

0800e598 <__math_uflow>:
 800e598:	b508      	push	{r3, lr}
 800e59a:	2200      	movs	r2, #0
 800e59c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5a0:	f7ff ffe6 	bl	800e570 <xflow>
 800e5a4:	ec41 0b10 	vmov	d0, r0, r1
 800e5a8:	bd08      	pop	{r3, pc}

0800e5aa <__math_oflow>:
 800e5aa:	b508      	push	{r3, lr}
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e5b2:	f7ff ffdd 	bl	800e570 <xflow>
 800e5b6:	ec41 0b10 	vmov	d0, r0, r1
 800e5ba:	bd08      	pop	{r3, pc}

0800e5bc <_init>:
 800e5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5be:	bf00      	nop
 800e5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5c2:	bc08      	pop	{r3}
 800e5c4:	469e      	mov	lr, r3
 800e5c6:	4770      	bx	lr

0800e5c8 <_fini>:
 800e5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ca:	bf00      	nop
 800e5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ce:	bc08      	pop	{r3}
 800e5d0:	469e      	mov	lr, r3
 800e5d2:	4770      	bx	lr
