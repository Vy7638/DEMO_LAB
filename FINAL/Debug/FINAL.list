
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c594  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e42b0  0800c728  0800c728  0001c728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080f09d8  080f09d8  001100d0  2**0
                  CONTENTS
  4 .ARM          00000008  080f09d8  080f09d8  001009d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080f09e0  080f09e0  001100d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080f09e0  080f09e0  001009e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080f09e4  080f09e4  001009e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080f09e8  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  001100d0  2**0
                  CONTENTS
 10 .bss          00000760  200000d0  200000d0  001100d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000830  20000830  001100d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  001100d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ded  00000000  00000000  00110100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005031  00000000  00000000  00136eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  0013bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017a8  00000000  00000000  0013d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f4b  00000000  00000000  0013f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023c01  00000000  00000000  00167ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2274  00000000  00000000  0018bbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0026de70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076ac  00000000  00000000  0026dec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c70c 	.word	0x0800c70c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800c70c 	.word	0x0800c70c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f84:	4a3d      	ldr	r2, [pc, #244]	; (800107c <MX_ADC1_Init+0x10c>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <MX_ADC1_Init+0x108>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fb0:	4a33      	ldr	r2, [pc, #204]	; (8001080 <MX_ADC1_Init+0x110>)
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fce:	482a      	ldr	r0, [pc, #168]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fd0:	f004 faf6 	bl	80055c0 <HAL_ADC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f002 fb6f 	bl	80036bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4822      	ldr	r0, [pc, #136]	; (8001078 <MX_ADC1_Init+0x108>)
 8000ff0:	f004 fb2a 	bl	8005648 <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ffa:	f002 fb5f 	bl	80036bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ffe:	2309      	movs	r3, #9
 8001000:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <MX_ADC1_Init+0x108>)
 800100c:	f004 fb1c 	bl	8005648 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001016:	f002 fb51 	bl	80036bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800101e:	2303      	movs	r3, #3
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_ADC1_Init+0x108>)
 8001028:	f004 fb0e 	bl	8005648 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001032:	f002 fb43 	bl	80036bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001036:	230b      	movs	r3, #11
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800103a:	2304      	movs	r3, #4
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_ADC1_Init+0x108>)
 8001044:	f004 fb00 	bl	8005648 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800104e:	f002 fb35 	bl	80036bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001052:	230c      	movs	r3, #12
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001056:	2305      	movs	r3, #5
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC1_Init+0x108>)
 8001060:	f004 faf2 	bl	8005648 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800106a:	f002 fb27 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000130 	.word	0x20000130
 800107c:	40012000 	.word	0x40012000
 8001080:	0f000001 	.word	0x0f000001

08001084 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	at24c_Check();
 8001088:	f000 f83c 	bl	8001104 <at24c_Check>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	230a      	movs	r3, #10
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	2301      	movs	r3, #1
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	f107 030f 	add.w	r3, r7, #15
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2310      	movs	r3, #16
 80010b0:	21a0      	movs	r1, #160	; 0xa0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <at24c_ReadOneByte+0x34>)
 80010b4:	f005 fd9a 	bl	8006bec <HAL_I2C_Mem_Read>
	return temp;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000574 	.word	0x20000574

080010c8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	80fb      	strh	r3, [r7, #6]
 80010d4:	4613      	mov	r3, r2
 80010d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80010d8:	88fa      	ldrh	r2, [r7, #6]
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1d7b      	adds	r3, r7, #5
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2310      	movs	r3, #16
 80010e8:	21a0      	movs	r1, #160	; 0xa0
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <at24c_WriteOneByte+0x38>)
 80010ec:	f005 fc84 	bl	80069f8 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80010f0:	2005      	movs	r0, #5
 80010f2:	f004 fa41 	bl	8005578 <HAL_Delay>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000574 	.word	0x20000574

08001104 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800110a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800110e:	f7ff ffbf 	bl	8001090 <at24c_ReadOneByte>
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b55      	cmp	r3, #85	; 0x55
 800111a:	d101      	bne.n	8001120 <at24c_Check+0x1c>
 800111c:	2300      	movs	r3, #0
 800111e:	e010      	b.n	8001142 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001120:	2155      	movs	r1, #85	; 0x55
 8001122:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001126:	f7ff ffcf 	bl	80010c8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800112a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800112e:	f7ff ffaf 	bl	8001090 <at24c_ReadOneByte>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b55      	cmp	r3, #85	; 0x55
 800113a:	d101      	bne.n	8001140 <at24c_Check+0x3c>
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <at24c_Check+0x3e>
	}
	return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	80fb      	strh	r3, [r7, #6]
 8001156:	4613      	mov	r3, r2
 8001158:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800115a:	e00d      	b.n	8001178 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	80fa      	strh	r2, [r7, #6]
 8001162:	683c      	ldr	r4, [r7, #0]
 8001164:	1c62      	adds	r2, r4, #1
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff91 	bl	8001090 <at24c_ReadOneByte>
 800116e:	4603      	mov	r3, r0
 8001170:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	3b01      	subs	r3, #1
 8001176:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1ee      	bne.n	800115c <at24c_Read+0x12>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001198:	e00c      	b.n	80011b4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff90 	bl	80010c8 <at24c_WriteOneByte>
		WriteAddr++;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	3301      	adds	r3, #1
 80011ac:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	80ba      	strh	r2, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ed      	bne.n	800119a <at24c_Write+0x12>
	}
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2108      	movs	r1, #8
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <button_init+0x14>)
 80011d2:	f005 fa99 	bl	8006708 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_DMA_Init+0x3c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <MX_DMA_Init+0x3c>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_DMA_Init+0x3c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2038      	movs	r0, #56	; 0x38
 8001208:	f004 fd17 	bl	8005c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800120c:	2038      	movs	r0, #56	; 0x38
 800120e:	f004 fd30 	bl	8005c72 <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <temp_game>:

#include "fsm.h"

uint32_t counter = 0;

void temp_game(){
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	tempFlag = 1;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <temp_game+0x24>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
	tempStatus = status;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <temp_game+0x28>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <temp_game+0x2c>)
 8001230:	6013      	str	r3, [r2, #0]
	tempMove = move;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <temp_game+0x30>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <temp_game+0x34>)
 8001238:	6013      	str	r3, [r2, #0]
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	20000100 	.word	0x20000100
 8001248:	200000f0 	.word	0x200000f0
 800124c:	20000104 	.word	0x20000104
 8001250:	200000f4 	.word	0x200000f4
 8001254:	20000108 	.word	0x20000108

08001258 <continue_game>:

void continue_game(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	status = tempStatus;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <continue_game+0x1c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <continue_game+0x20>)
 8001262:	6013      	str	r3, [r2, #0]
	move = tempMove;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <continue_game+0x24>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a05      	ldr	r2, [pc, #20]	; (8001280 <continue_game+0x28>)
 800126a:	6013      	str	r3, [r2, #0]
	reDraw_snake();
 800126c:	f002 fbc2 	bl	80039f4 <reDraw_snake>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000104 	.word	0x20000104
 8001278:	200000f0 	.word	0x200000f0
 800127c:	20000108 	.word	0x20000108
 8001280:	200000f4 	.word	0x200000f4

08001284 <input_inGame>:

void input_inGame(){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	if (is_touch_right() == 1 && move != LEFT){
 8001288:	f000 fb06 	bl	8001898 <is_touch_right>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d107      	bne.n	80012a2 <input_inGame+0x1e>
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <input_inGame+0x8c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d003      	beq.n	80012a2 <input_inGame+0x1e>
		move = RIGHT;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <input_inGame+0x8c>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e033      	b.n	800130a <input_inGame+0x86>
	}
	else if (is_touch_left() == 1 && move != RIGHT){
 80012a2:	f000 fb1d 	bl	80018e0 <is_touch_left>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d107      	bne.n	80012bc <input_inGame+0x38>
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <input_inGame+0x8c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d003      	beq.n	80012bc <input_inGame+0x38>
		move = LEFT;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <input_inGame+0x8c>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e026      	b.n	800130a <input_inGame+0x86>
	}
	else if (is_touch_up() == 1 && move != DOWN){
 80012bc:	f000 fb34 	bl	8001928 <is_touch_up>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <input_inGame+0x52>
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <input_inGame+0x8c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d003      	beq.n	80012d6 <input_inGame+0x52>
		move = UP;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <input_inGame+0x8c>)
 80012d0:	2203      	movs	r2, #3
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e019      	b.n	800130a <input_inGame+0x86>
	}
	else if (is_touch_down() == 1 && move != UP){
 80012d6:	f000 fb49 	bl	800196c <is_touch_down>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d107      	bne.n	80012f0 <input_inGame+0x6c>
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <input_inGame+0x8c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d003      	beq.n	80012f0 <input_inGame+0x6c>
		move = DOWN;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <input_inGame+0x8c>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e00c      	b.n	800130a <input_inGame+0x86>
	}
	else if (is_touch_pause() == 1){
 80012f0:	f000 fbc7 	bl	8001a82 <is_touch_pause>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <input_inGame+0x86>
		temp_game();
 80012fa:	f7ff ff91 	bl	8001220 <temp_game>
		move = NOT;
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <input_inGame+0x8c>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
		pause_lcd();
 8001304:	f001 f818 	bl	8002338 <pause_lcd>
	}
}
 8001308:	e7ff      	b.n	800130a <input_inGame+0x86>
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000f4 	.word	0x200000f4

08001314 <input_process>:

void input_process(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	switch (status) {
 8001318:	4b7c      	ldr	r3, [pc, #496]	; (800150c <input_process+0x1f8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b17      	cmp	r3, #23
 800131e:	f200 80e5 	bhi.w	80014ec <input_process+0x1d8>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <input_process+0x14>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001389 	.word	0x08001389
 800132c:	080013e7 	.word	0x080013e7
 8001330:	080014ed 	.word	0x080014ed
 8001334:	0800146d 	.word	0x0800146d
 8001338:	080014ed 	.word	0x080014ed
 800133c:	080014ed 	.word	0x080014ed
 8001340:	080014ed 	.word	0x080014ed
 8001344:	080014ed 	.word	0x080014ed
 8001348:	080014ed 	.word	0x080014ed
 800134c:	080014ed 	.word	0x080014ed
 8001350:	080014ed 	.word	0x080014ed
 8001354:	08001483 	.word	0x08001483
 8001358:	08001489 	.word	0x08001489
 800135c:	0800148f 	.word	0x0800148f
 8001360:	080014ed 	.word	0x080014ed
 8001364:	080014ed 	.word	0x080014ed
 8001368:	080014ed 	.word	0x080014ed
 800136c:	080014ed 	.word	0x080014ed
 8001370:	080014ed 	.word	0x080014ed
 8001374:	080014ed 	.word	0x080014ed
 8001378:	080014ed 	.word	0x080014ed
 800137c:	080014c7 	.word	0x080014c7
 8001380:	0800149b 	.word	0x0800149b
 8001384:	080014b1 	.word	0x080014b1
		case HOME:
			if (is_touch_newGame() == 1 || button_count[0] == 1){
 8001388:	f000 fb9f 	bl	8001aca <is_touch_newGame>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d003      	beq.n	800139a <input_process+0x86>
 8001392:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <input_process+0x1fc>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10a      	bne.n	80013b0 <input_process+0x9c>
				tempFlag = 0;
 800139a:	4b5e      	ldr	r3, [pc, #376]	; (8001514 <input_process+0x200>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
				status = MODE;
 80013a0:	4b5a      	ldr	r3, [pc, #360]	; (800150c <input_process+0x1f8>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
				snake_init();
 80013a6:	f002 f98f 	bl	80036c8 <snake_init>
				mode_game_lcd();
 80013aa:	f000 fe0f 	bl	8001fcc <mode_game_lcd>
			}
			else if (is_touch_highScore() == 1){
				status = HIGHSCORE;
				highscore_lcd();
			}
			break;
 80013ae:	e09f      	b.n	80014f0 <input_process+0x1dc>
			else if (is_touch_continue() == 1){
 80013b0:	f000 fc36 	bl	8001c20 <is_touch_continue>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d109      	bne.n	80013ce <input_process+0xba>
				if (tempFlag == 1)
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <input_process+0x200>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d102      	bne.n	80013c8 <input_process+0xb4>
					continue_game();
 80013c2:	f7ff ff49 	bl	8001258 <continue_game>
			break;
 80013c6:	e093      	b.n	80014f0 <input_process+0x1dc>
					home_third_lcd();
 80013c8:	f001 f8a4 	bl	8002514 <home_third_lcd>
			break;
 80013cc:	e090      	b.n	80014f0 <input_process+0x1dc>
			else if (is_touch_highScore() == 1){
 80013ce:	f000 fb9e 	bl	8001b0e <is_touch_highScore>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	f040 808b 	bne.w	80014f0 <input_process+0x1dc>
				status = HIGHSCORE;
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <input_process+0x1f8>)
 80013dc:	2203      	movs	r2, #3
 80013de:	601a      	str	r2, [r3, #0]
				highscore_lcd();
 80013e0:	f000 fe62 	bl	80020a8 <highscore_lcd>
			break;
 80013e4:	e084      	b.n	80014f0 <input_process+0x1dc>
		case MODE:
			if (is_touch_classic() == 1){
 80013e6:	f000 fbb5 	bl	8001b54 <is_touch_classic>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10d      	bne.n	800140c <input_process+0xf8>
				status = CLASSIC;
 80013f0:	4b46      	ldr	r3, [pc, #280]	; (800150c <input_process+0x1f8>)
 80013f2:	220b      	movs	r2, #11
 80013f4:	601a      	str	r2, [r3, #0]
				setTimer3(500);
 80013f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013fa:	f002 fb49 	bl	8003a90 <setTimer3>
				game_lcd();
 80013fe:	f000 ff1f 	bl	8002240 <game_lcd>
				reDraw_snake();
 8001402:	f002 faf7 	bl	80039f4 <reDraw_snake>
				score_lcd();
 8001406:	f000 ff7f 	bl	8002308 <score_lcd>
 800140a:	e024      	b.n	8001456 <input_process+0x142>
			}
			else if (is_touch_speed() == 1){
 800140c:	f000 fbc4 	bl	8001b98 <is_touch_speed>
 8001410:	4603      	mov	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	d10d      	bne.n	8001432 <input_process+0x11e>
				status = SPEED;
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <input_process+0x1f8>)
 8001418:	220c      	movs	r2, #12
 800141a:	601a      	str	r2, [r3, #0]
				setTimer3(500);
 800141c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001420:	f002 fb36 	bl	8003a90 <setTimer3>
				game_lcd();
 8001424:	f000 ff0c 	bl	8002240 <game_lcd>
				reDraw_snake();
 8001428:	f002 fae4 	bl	80039f4 <reDraw_snake>
				score_lcd();
 800142c:	f000 ff6c 	bl	8002308 <score_lcd>
 8001430:	e011      	b.n	8001456 <input_process+0x142>
			}
			else if (is_touch_time() == 1){
 8001432:	f000 fbd3 	bl	8001bdc <is_touch_time>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	d10c      	bne.n	8001456 <input_process+0x142>
				status = TIME;
 800143c:	4b33      	ldr	r3, [pc, #204]	; (800150c <input_process+0x1f8>)
 800143e:	220d      	movs	r2, #13
 8001440:	601a      	str	r2, [r3, #0]
				setTimer3(500);
 8001442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001446:	f002 fb23 	bl	8003a90 <setTimer3>
				game_lcd();
 800144a:	f000 fef9 	bl	8002240 <game_lcd>
				reDraw_snake();
 800144e:	f002 fad1 	bl	80039f4 <reDraw_snake>
				score_lcd();
 8001452:	f000 ff59 	bl	8002308 <score_lcd>
			}
			if (is_touch_quit() == 1){
 8001456:	f000 faad 	bl	80019b4 <is_touch_quit>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d149      	bne.n	80014f4 <input_process+0x1e0>
				status = HOME;
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <input_process+0x1f8>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001466:	f000 fd59 	bl	8001f1c <home_lcd>
			}
			break;
 800146a:	e043      	b.n	80014f4 <input_process+0x1e0>
		case HIGHSCORE:
			if (is_touch_quit() == 1){
 800146c:	f000 faa2 	bl	80019b4 <is_touch_quit>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d140      	bne.n	80014f8 <input_process+0x1e4>
				status = HOME;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <input_process+0x1f8>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
				home_lcd();
 800147c:	f000 fd4e 	bl	8001f1c <home_lcd>
			}
			break;
 8001480:	e03a      	b.n	80014f8 <input_process+0x1e4>
		case CLASSIC:
			input_inGame();
 8001482:	f7ff feff 	bl	8001284 <input_inGame>
			break;
 8001486:	e03e      	b.n	8001506 <input_process+0x1f2>
		case SPEED:
			input_inGame();
 8001488:	f7ff fefc 	bl	8001284 <input_inGame>
			break;
 800148c:	e03b      	b.n	8001506 <input_process+0x1f2>
		case TIME:
			input_inGame();
 800148e:	f7ff fef9 	bl	8001284 <input_inGame>
			counter = 0;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <input_process+0x204>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
			break;
 8001498:	e035      	b.n	8001506 <input_process+0x1f2>
		case GAMEOVER:
			if (is_touch_quit_end() == 1){
 800149a:	f000 faae 	bl	80019fa <is_touch_quit_end>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d12b      	bne.n	80014fc <input_process+0x1e8>
				status = MODE;
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <input_process+0x1f8>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 80014aa:	f000 fd8f 	bl	8001fcc <mode_game_lcd>
			}
			break;
 80014ae:	e025      	b.n	80014fc <input_process+0x1e8>
		case WIN:
			if (is_touch_quit_end() == 1){
 80014b0:	f000 faa3 	bl	80019fa <is_touch_quit_end>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d122      	bne.n	8001500 <input_process+0x1ec>
				status = MODE;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <input_process+0x1f8>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 80014c0:	f000 fd84 	bl	8001fcc <mode_game_lcd>
			}
			break;
 80014c4:	e01c      	b.n	8001500 <input_process+0x1ec>
		case PAUSE:
			if (is_touch_quit_end() == 1){
 80014c6:	f000 fa98 	bl	80019fa <is_touch_quit_end>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <input_process+0x1c8>
				status = MODE;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <input_process+0x1f8>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 80014d6:	f000 fd79 	bl	8001fcc <mode_game_lcd>
			}
			else if (is_touch_resume() == 1){
				continue_game();
			}
			break;
 80014da:	e013      	b.n	8001504 <input_process+0x1f0>
			else if (is_touch_resume() == 1){
 80014dc:	f000 faaf 	bl	8001a3e <is_touch_resume>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10e      	bne.n	8001504 <input_process+0x1f0>
				continue_game();
 80014e6:	f7ff feb7 	bl	8001258 <continue_game>
			break;
 80014ea:	e00b      	b.n	8001504 <input_process+0x1f0>
		default:
			break;
 80014ec:	bf00      	nop
 80014ee:	e00a      	b.n	8001506 <input_process+0x1f2>
			break;
 80014f0:	bf00      	nop
 80014f2:	e008      	b.n	8001506 <input_process+0x1f2>
			break;
 80014f4:	bf00      	nop
 80014f6:	e006      	b.n	8001506 <input_process+0x1f2>
			break;
 80014f8:	bf00      	nop
 80014fa:	e004      	b.n	8001506 <input_process+0x1f2>
			break;
 80014fc:	bf00      	nop
 80014fe:	e002      	b.n	8001506 <input_process+0x1f2>
			break;
 8001500:	bf00      	nop
 8001502:	e000      	b.n	8001506 <input_process+0x1f2>
			break;
 8001504:	bf00      	nop
	}
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200000f0 	.word	0x200000f0
 8001510:	20000178 	.word	0x20000178
 8001514:	20000100 	.word	0x20000100
 8001518:	200000ec 	.word	0x200000ec

0800151c <score_cal>:
//tinh toan cap nhat diem so
void score_cal(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	current_score = current_score + (400 / counter_time_score) * 5 + 5;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <score_cal+0x30>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001528:	fbb2 f2f3 	udiv	r2, r2, r3
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	441a      	add	r2, r3
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <score_cal+0x34>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	3305      	adds	r3, #5
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <score_cal+0x34>)
 800153c:	6013      	str	r3, [r2, #0]
	counter_time_score = 0;
 800153e:	4b03      	ldr	r3, [pc, #12]	; (800154c <score_cal+0x30>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
	score_lcd();
 8001544:	f000 fee0 	bl	8002308 <score_lcd>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200000f8 	.word	0x200000f8
 8001550:	20000004 	.word	0x20000004

08001554 <inGame>:

void inGame(){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	move_snake();
 8001558:	f002 f9ec 	bl	8003934 <move_snake>
	if (is_collision() == 1){
 800155c:	f002 f92e 	bl	80037bc <is_collision>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <inGame+0x22>
		status = GAMEOVER;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <inGame+0x5c>)
 8001568:	2216      	movs	r2, #22
 800156a:	601a      	str	r2, [r3, #0]
		snake_init();
 800156c:	f002 f8ac 	bl	80036c8 <snake_init>
		game_over_lcd();
 8001570:	f000 ff22 	bl	80023b8 <game_over_lcd>
	else if (length == 100){
		status = WIN;
		youwin_lcd();
		snake_init();
	}
}
 8001574:	e019      	b.n	80015aa <inGame+0x56>
	else if (is_eat() == 1){
 8001576:	f002 f95f 	bl	8003838 <is_eat>
 800157a:	4603      	mov	r3, r0
 800157c:	2b01      	cmp	r3, #1
 800157e:	d109      	bne.n	8001594 <inGame+0x40>
		length++;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <inGame+0x60>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <inGame+0x60>)
 8001588:	6013      	str	r3, [r2, #0]
		score_cal();
 800158a:	f7ff ffc7 	bl	800151c <score_cal>
		rand_food();
 800158e:	f002 f99f 	bl	80038d0 <rand_food>
}
 8001592:	e00a      	b.n	80015aa <inGame+0x56>
	else if (length == 100){
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <inGame+0x60>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d106      	bne.n	80015aa <inGame+0x56>
		status = WIN;
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <inGame+0x5c>)
 800159e:	2217      	movs	r2, #23
 80015a0:	601a      	str	r2, [r3, #0]
		youwin_lcd();
 80015a2:	f000 ff41 	bl	8002428 <youwin_lcd>
		snake_init();
 80015a6:	f002 f88f 	bl	80036c8 <snake_init>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000f0 	.word	0x200000f0
 80015b4:	20000008 	.word	0x20000008

080015b8 <fsm_ingame>:

void fsm_ingame(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	switch (status) {
 80015bc:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <fsm_ingame+0x130>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b0d      	cmp	r3, #13
 80015c2:	d03c      	beq.n	800163e <fsm_ingame+0x86>
 80015c4:	2b0d      	cmp	r3, #13
 80015c6:	f300 8085 	bgt.w	80016d4 <fsm_ingame+0x11c>
 80015ca:	2b0b      	cmp	r3, #11
 80015cc:	d002      	beq.n	80015d4 <fsm_ingame+0x1c>
 80015ce:	2b0c      	cmp	r3, #12
 80015d0:	d00f      	beq.n	80015f2 <fsm_ingame+0x3a>
				game_over_lcd();
				snake_init();
			}
			break;
		default:
			break;
 80015d2:	e07f      	b.n	80016d4 <fsm_ingame+0x11c>
			counter_time_score++;
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <fsm_ingame+0x134>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a44      	ldr	r2, [pc, #272]	; (80016ec <fsm_ingame+0x134>)
 80015dc:	6013      	str	r3, [r2, #0]
			if (flag_timer3 == 1){
 80015de:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <fsm_ingame+0x138>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d178      	bne.n	80016d8 <fsm_ingame+0x120>
				flag_timer3 = 0;
 80015e6:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <fsm_ingame+0x138>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	801a      	strh	r2, [r3, #0]
				inGame();
 80015ec:	f7ff ffb2 	bl	8001554 <inGame>
			break;
 80015f0:	e072      	b.n	80016d8 <fsm_ingame+0x120>
			counter_time_score++;
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <fsm_ingame+0x134>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a3c      	ldr	r2, [pc, #240]	; (80016ec <fsm_ingame+0x134>)
 80015fa:	6013      	str	r3, [r2, #0]
			if (flag_timer3 == 1){
 80015fc:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <fsm_ingame+0x138>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d104      	bne.n	800160e <fsm_ingame+0x56>
				flag_timer3 = 0;
 8001604:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <fsm_ingame+0x138>)
 8001606:	2200      	movs	r2, #0
 8001608:	801a      	strh	r2, [r3, #0]
				inGame();
 800160a:	f7ff ffa3 	bl	8001554 <inGame>
			if (length == 5){
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <fsm_ingame+0x13c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d103      	bne.n	800161e <fsm_ingame+0x66>
				setTimer3(200);
 8001616:	20c8      	movs	r0, #200	; 0xc8
 8001618:	f002 fa3a 	bl	8003a90 <setTimer3>
			break;
 800161c:	e05e      	b.n	80016dc <fsm_ingame+0x124>
			else if (length == 10){
 800161e:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <fsm_ingame+0x13c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d103      	bne.n	800162e <fsm_ingame+0x76>
				setTimer3(100);
 8001626:	2064      	movs	r0, #100	; 0x64
 8001628:	f002 fa32 	bl	8003a90 <setTimer3>
			break;
 800162c:	e056      	b.n	80016dc <fsm_ingame+0x124>
			else if (length == 15){
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <fsm_ingame+0x13c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	d152      	bne.n	80016dc <fsm_ingame+0x124>
				setTimer3(50);
 8001636:	2032      	movs	r0, #50	; 0x32
 8001638:	f002 fa2a 	bl	8003a90 <setTimer3>
			break;
 800163c:	e04e      	b.n	80016dc <fsm_ingame+0x124>
			counter_time_score++;
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <fsm_ingame+0x134>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a29      	ldr	r2, [pc, #164]	; (80016ec <fsm_ingame+0x134>)
 8001646:	6013      	str	r3, [r2, #0]
			if (++counter % 20 == 0){
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <fsm_ingame+0x140>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <fsm_ingame+0x140>)
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <fsm_ingame+0x140>)
 8001654:	6819      	ldr	r1, [r3, #0]
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <fsm_ingame+0x144>)
 8001658:	fba3 2301 	umull	r2, r3, r3, r1
 800165c:	091a      	lsrs	r2, r3, #4
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	1aca      	subs	r2, r1, r3
 8001668:	2a00      	cmp	r2, #0
 800166a:	d106      	bne.n	800167a <fsm_ingame+0xc2>
				counter_time--;
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <fsm_ingame+0x148>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	4a23      	ldr	r2, [pc, #140]	; (8001700 <fsm_ingame+0x148>)
 8001674:	6013      	str	r3, [r2, #0]
				update_7seg_time();
 8001676:	f000 fff9 	bl	800266c <update_7seg_time>
			if (flag_timer3 == 1){
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <fsm_ingame+0x138>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d104      	bne.n	800168c <fsm_ingame+0xd4>
				flag_timer3 = 0;
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <fsm_ingame+0x138>)
 8001684:	2200      	movs	r2, #0
 8001686:	801a      	strh	r2, [r3, #0]
				inGame();
 8001688:	f7ff ff64 	bl	8001554 <inGame>
			if (counter_time <= 50){
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <fsm_ingame+0x148>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b32      	cmp	r3, #50	; 0x32
 8001692:	d803      	bhi.n	800169c <fsm_ingame+0xe4>
				setTimer3(200);
 8001694:	20c8      	movs	r0, #200	; 0xc8
 8001696:	f002 f9fb 	bl	8003a90 <setTimer3>
			break;
 800169a:	e021      	b.n	80016e0 <fsm_ingame+0x128>
			else if (counter_time <= 35){
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <fsm_ingame+0x148>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b23      	cmp	r3, #35	; 0x23
 80016a2:	d803      	bhi.n	80016ac <fsm_ingame+0xf4>
				setTimer3(100);
 80016a4:	2064      	movs	r0, #100	; 0x64
 80016a6:	f002 f9f3 	bl	8003a90 <setTimer3>
			break;
 80016aa:	e019      	b.n	80016e0 <fsm_ingame+0x128>
			else if (counter_time <= 20){
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <fsm_ingame+0x148>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b14      	cmp	r3, #20
 80016b2:	d803      	bhi.n	80016bc <fsm_ingame+0x104>
				setTimer3(50);
 80016b4:	2032      	movs	r0, #50	; 0x32
 80016b6:	f002 f9eb 	bl	8003a90 <setTimer3>
			break;
 80016ba:	e011      	b.n	80016e0 <fsm_ingame+0x128>
			else if (counter_time <= 0){
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <fsm_ingame+0x148>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10d      	bne.n	80016e0 <fsm_ingame+0x128>
				status = GAMEOVER;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <fsm_ingame+0x130>)
 80016c6:	2216      	movs	r2, #22
 80016c8:	601a      	str	r2, [r3, #0]
				game_over_lcd();
 80016ca:	f000 fe75 	bl	80023b8 <game_over_lcd>
				snake_init();
 80016ce:	f001 fffb 	bl	80036c8 <snake_init>
			break;
 80016d2:	e005      	b.n	80016e0 <fsm_ingame+0x128>
			break;
 80016d4:	bf00      	nop
 80016d6:	e004      	b.n	80016e2 <fsm_ingame+0x12a>
			break;
 80016d8:	bf00      	nop
 80016da:	e002      	b.n	80016e2 <fsm_ingame+0x12a>
			break;
 80016dc:	bf00      	nop
 80016de:	e000      	b.n	80016e2 <fsm_ingame+0x12a>
			break;
 80016e0:	bf00      	nop
	}
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000f0 	.word	0x200000f0
 80016ec:	200000f8 	.word	0x200000f8
 80016f0:	20000116 	.word	0x20000116
 80016f4:	20000008 	.word	0x20000008
 80016f8:	200000ec 	.word	0x200000ec
 80016fc:	cccccccd 	.word	0xcccccccd
 8001700:	200000fc 	.word	0x200000fc

08001704 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001732:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001736:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <MX_FSMC_Init+0xec>)
 800173a:	4a2e      	ldr	r2, [pc, #184]	; (80017f4 <MX_FSMC_Init+0xf0>)
 800173c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_FSMC_Init+0xec>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001752:	2210      	movs	r2, #16
 8001754:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <MX_FSMC_Init+0xec>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_FSMC_Init+0xec>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001778:	2200      	movs	r2, #0
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_FSMC_Init+0xec>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001786:	2200      	movs	r2, #0
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_FSMC_Init+0xec>)
 800178c:	2200      	movs	r2, #0
 800178e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_FSMC_Init+0xec>)
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001796:	230f      	movs	r3, #15
 8001798:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800179a:	230f      	movs	r3, #15
 800179c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800179e:	233c      	movs	r3, #60	; 0x3c
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80017a6:	2310      	movs	r3, #16
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80017aa:	2311      	movs	r3, #17
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80017b2:	2308      	movs	r3, #8
 80017b4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80017b6:	230f      	movs	r3, #15
 80017b8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80017ba:	2309      	movs	r3, #9
 80017bc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80017c2:	2310      	movs	r3, #16
 80017c4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80017c6:	2311      	movs	r3, #17
 80017c8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80017ce:	463a      	mov	r2, r7
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <MX_FSMC_Init+0xec>)
 80017d8:	f006 fe8e 	bl	80084f8 <HAL_SRAM_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80017e2:	f001 ff6b 	bl	80036bc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80017e6:	bf00      	nop
 80017e8:	3738      	adds	r7, #56	; 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000198 	.word	0x20000198
 80017f4:	a0000104 	.word	0xa0000104

080017f8 <distance_of_two_point>:

#include "fun_touch.h"

// Tinh khoang cach hai diem
float distance_of_two_point(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4604      	mov	r4, r0
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4623      	mov	r3, r4
 8001808:	80fb      	strh	r3, [r7, #6]
 800180a:	4603      	mov	r3, r0
 800180c:	80bb      	strh	r3, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	807b      	strh	r3, [r7, #2]
 8001812:	4613      	mov	r3, r2
 8001814:	803b      	strh	r3, [r7, #0]
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe79 	bl	8000514 <__aeabi_i2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001890 <distance_of_two_point+0x98>
 800182a:	ec43 2b10 	vmov	d0, r2, r3
 800182e:	f009 ff85 	bl	800b73c <pow>
 8001832:	ec55 4b10 	vmov	r4, r5, d0
 8001836:	88ba      	ldrh	r2, [r7, #4]
 8001838:	883b      	ldrh	r3, [r7, #0]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe69 	bl	8000514 <__aeabi_i2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001890 <distance_of_two_point+0x98>
 800184a:	ec43 2b10 	vmov	d0, r2, r3
 800184e:	f009 ff75 	bl	800b73c <pow>
 8001852:	ec53 2b10 	vmov	r2, r3, d0
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fd0f 	bl	800027c <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	ec43 2b17 	vmov	d7, r2, r3
 8001866:	eeb0 0a47 	vmov.f32	s0, s14
 800186a:	eef0 0a67 	vmov.f32	s1, s15
 800186e:	f00a f813 	bl	800b898 <sqrt>
 8001872:	ec53 2b10 	vmov	r2, r3, d0
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f9ad 	bl	8000bd8 <__aeabi_d2f>
 800187e:	4603      	mov	r3, r0
 8001880:	ee07 3a90 	vmov	s15, r3
}
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bdb0      	pop	{r4, r5, r7, pc}
 800188e:	bf00      	nop
 8001890:	00000000 	.word	0x00000000
 8001894:	40000000 	.word	0x40000000

08001898 <is_touch_right>:

int is_touch_right(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800189c:	f003 fd34 	bl	8005308 <touch_IsTouched>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <is_touch_right+0x12>
 80018a6:	2300      	movs	r3, #0
 80018a8:	e018      	b.n	80018dc <is_touch_right+0x44>
	return (touch_GetX() > POS_X_RIGHT
 80018aa:	f003 fd3f 	bl	800532c <touch_GetX>
 80018ae:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
			&& touch_GetY() > POS_Y_RIGHT
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 80018b0:	2ba5      	cmp	r3, #165	; 0xa5
 80018b2:	d912      	bls.n	80018da <is_touch_right+0x42>
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
 80018b4:	f003 fd3a 	bl	800532c <touch_GetX>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2bea      	cmp	r3, #234	; 0xea
 80018bc:	d80d      	bhi.n	80018da <is_touch_right+0x42>
			&& touch_GetY() > POS_Y_RIGHT
 80018be:	f003 fd41 	bl	8005344 <touch_GetY>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80018c8:	d307      	bcc.n	80018da <is_touch_right+0x42>
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 80018ca:	f003 fd3b 	bl	8005344 <touch_GetY>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80018d4:	d801      	bhi.n	80018da <is_touch_right+0x42>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <is_touch_right+0x44>
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}

080018e0 <is_touch_left>:

int is_touch_left()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80018e4:	f003 fd10 	bl	8005308 <touch_IsTouched>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <is_touch_left+0x12>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e018      	b.n	8001924 <is_touch_left+0x44>
	return (touch_GetX() > POS_X_LEFT
 80018f2:	f003 fd1b 	bl	800532c <touch_GetX>
 80018f6:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
			&& touch_GetY() > POS_Y_LEFT
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d912      	bls.n	8001922 <is_touch_left+0x42>
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
 80018fc:	f003 fd16 	bl	800532c <touch_GetX>
 8001900:	4603      	mov	r3, r0
 8001902:	2b4a      	cmp	r3, #74	; 0x4a
 8001904:	d80d      	bhi.n	8001922 <is_touch_left+0x42>
			&& touch_GetY() > POS_Y_LEFT
 8001906:	f003 fd1d 	bl	8005344 <touch_GetY>
 800190a:	4603      	mov	r3, r0
 800190c:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001910:	d307      	bcc.n	8001922 <is_touch_left+0x42>
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001912:	f003 fd17 	bl	8005344 <touch_GetY>
 8001916:	4603      	mov	r3, r0
 8001918:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800191c:	d801      	bhi.n	8001922 <is_touch_left+0x42>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <is_touch_left+0x44>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}

08001928 <is_touch_up>:

int is_touch_up()
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800192c:	f003 fcec 	bl	8005308 <touch_IsTouched>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <is_touch_up+0x12>
 8001936:	2300      	movs	r3, #0
 8001938:	e016      	b.n	8001968 <is_touch_up+0x40>
	return (touch_GetX() > POS_X_UP
 800193a:	f003 fcf7 	bl	800532c <touch_GetX>
 800193e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
			&& touch_GetY() > POS_Y_UP
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001940:	2b55      	cmp	r3, #85	; 0x55
 8001942:	d910      	bls.n	8001966 <is_touch_up+0x3e>
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
 8001944:	f003 fcf2 	bl	800532c <touch_GetX>
 8001948:	4603      	mov	r3, r0
 800194a:	2b9a      	cmp	r3, #154	; 0x9a
 800194c:	d80b      	bhi.n	8001966 <is_touch_up+0x3e>
			&& touch_GetY() > POS_Y_UP
 800194e:	f003 fcf9 	bl	8005344 <touch_GetY>
 8001952:	4603      	mov	r3, r0
 8001954:	2bcd      	cmp	r3, #205	; 0xcd
 8001956:	d906      	bls.n	8001966 <is_touch_up+0x3e>
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001958:	f003 fcf4 	bl	8005344 <touch_GetY>
 800195c:	4603      	mov	r3, r0
 800195e:	2bfe      	cmp	r3, #254	; 0xfe
 8001960:	d801      	bhi.n	8001966 <is_touch_up+0x3e>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <is_touch_up+0x40>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}

0800196c <is_touch_down>:

int is_touch_down()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001970:	f003 fcca 	bl	8005308 <touch_IsTouched>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <is_touch_down+0x12>
 800197a:	2300      	movs	r3, #0
 800197c:	e018      	b.n	80019b0 <is_touch_down+0x44>
	return (touch_GetX() > POS_X_DOWN
 800197e:	f003 fcd5 	bl	800532c <touch_GetX>
 8001982:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
			&& touch_GetY() > POS_Y_DOWN
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001984:	2b55      	cmp	r3, #85	; 0x55
 8001986:	d912      	bls.n	80019ae <is_touch_down+0x42>
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
 8001988:	f003 fcd0 	bl	800532c <touch_GetX>
 800198c:	4603      	mov	r3, r0
 800198e:	2b9a      	cmp	r3, #154	; 0x9a
 8001990:	d80d      	bhi.n	80019ae <is_touch_down+0x42>
			&& touch_GetY() > POS_Y_DOWN
 8001992:	f003 fcd7 	bl	8005344 <touch_GetY>
 8001996:	4603      	mov	r3, r0
 8001998:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800199c:	d307      	bcc.n	80019ae <is_touch_down+0x42>
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 800199e:	f003 fcd1 	bl	8005344 <touch_GetY>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80019a8:	d801      	bhi.n	80019ae <is_touch_down+0x42>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <is_touch_down+0x44>
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <is_touch_quit>:

int is_touch_quit()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80019b8:	f003 fca6 	bl	8005308 <touch_IsTouched>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <is_touch_quit+0x12>
 80019c2:	2300      	movs	r3, #0
 80019c4:	e017      	b.n	80019f6 <is_touch_quit+0x42>
	return (touch_GetX() > POS_X_FORTH
 80019c6:	f003 fcb1 	bl	800532c <touch_GetX>
 80019ca:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 80019cc:	2b41      	cmp	r3, #65	; 0x41
 80019ce:	d911      	bls.n	80019f4 <is_touch_quit+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 80019d0:	f003 fcac 	bl	800532c <touch_GetX>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2bb8      	cmp	r3, #184	; 0xb8
 80019d8:	d80c      	bhi.n	80019f4 <is_touch_quit+0x40>
			&& touch_GetY() > POS_Y_FORTH
 80019da:	f003 fcb3 	bl	8005344 <touch_GetY>
 80019de:	4603      	mov	r3, r0
 80019e0:	2bfa      	cmp	r3, #250	; 0xfa
 80019e2:	d907      	bls.n	80019f4 <is_touch_quit+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 80019e4:	f003 fcae 	bl	8005344 <touch_GetY>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80019ee:	d801      	bhi.n	80019f4 <is_touch_quit+0x40>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <is_touch_quit+0x42>
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}

080019fa <is_touch_quit_end>:

int is_touch_quit_end(){
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80019fe:	f003 fc83 	bl	8005308 <touch_IsTouched>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <is_touch_quit_end+0x12>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e016      	b.n	8001a3a <is_touch_quit_end+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001a0c:	f003 fc8e 	bl	800532c <touch_GetX>
 8001a10:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001a12:	2b41      	cmp	r3, #65	; 0x41
 8001a14:	d910      	bls.n	8001a38 <is_touch_quit_end+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001a16:	f003 fc89 	bl	800532c <touch_GetX>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2bb8      	cmp	r3, #184	; 0xb8
 8001a1e:	d80b      	bhi.n	8001a38 <is_touch_quit_end+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001a20:	f003 fc90 	bl	8005344 <touch_GetY>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2bc8      	cmp	r3, #200	; 0xc8
 8001a28:	d906      	bls.n	8001a38 <is_touch_quit_end+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001a2a:	f003 fc8b 	bl	8005344 <touch_GetY>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2bea      	cmp	r3, #234	; 0xea
 8001a32:	d801      	bhi.n	8001a38 <is_touch_quit_end+0x3e>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <is_touch_quit_end+0x40>
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <is_touch_resume>:

int is_touch_resume(){
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001a42:	f003 fc61 	bl	8005308 <touch_IsTouched>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <is_touch_resume+0x12>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e016      	b.n	8001a7e <is_touch_resume+0x40>
		return (touch_GetX() > POS_X_SECOND
 8001a50:	f003 fc6c 	bl	800532c <touch_GetX>
 8001a54:	4603      	mov	r3, r0
				&& touch_GetX() < POS_X_SECOND + WIDTH
				&& touch_GetY() > POS_Y_SECOND
				&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001a56:	2b41      	cmp	r3, #65	; 0x41
 8001a58:	d910      	bls.n	8001a7c <is_touch_resume+0x3e>
				&& touch_GetX() < POS_X_SECOND + WIDTH
 8001a5a:	f003 fc67 	bl	800532c <touch_GetX>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2bb8      	cmp	r3, #184	; 0xb8
 8001a62:	d80b      	bhi.n	8001a7c <is_touch_resume+0x3e>
				&& touch_GetY() > POS_Y_SECOND
 8001a64:	f003 fc6e 	bl	8005344 <touch_GetY>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b96      	cmp	r3, #150	; 0x96
 8001a6c:	d906      	bls.n	8001a7c <is_touch_resume+0x3e>
				&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001a6e:	f003 fc69 	bl	8005344 <touch_GetY>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2bb8      	cmp	r3, #184	; 0xb8
 8001a76:	d801      	bhi.n	8001a7c <is_touch_resume+0x3e>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <is_touch_resume+0x40>
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <is_touch_pause>:
int is_touch_pause()
{
 8001a82:	b598      	push	{r3, r4, r7, lr}
 8001a84:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001a86:	f003 fc3f 	bl	8005308 <touch_IsTouched>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <is_touch_pause+0x12>
 8001a90:	2300      	movs	r3, #0
 8001a92:	e018      	b.n	8001ac6 <is_touch_pause+0x44>
	return distance_of_two_point(touch_GetX(), touch_GetY(), POS_X_PAUSE, POS_Y_PAUSE) < BTN_HEIGHT / 2;
 8001a94:	f003 fc4a 	bl	800532c <touch_GetX>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461c      	mov	r4, r3
 8001a9c:	f003 fc52 	bl	8005344 <touch_GetY>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	23e6      	movs	r3, #230	; 0xe6
 8001aa6:	22c8      	movs	r2, #200	; 0xc8
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff fea5 	bl	80017f8 <distance_of_two_point>
 8001aae:	eef0 7a40 	vmov.f32	s15, s0
 8001ab2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	bf4c      	ite	mi
 8001ac0:	2301      	movmi	r3, #1
 8001ac2:	2300      	movpl	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd98      	pop	{r3, r4, r7, pc}

08001aca <is_touch_newGame>:

int is_touch_newGame()
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001ace:	f003 fc1b 	bl	8005308 <touch_IsTouched>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <is_touch_newGame+0x12>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e016      	b.n	8001b0a <is_touch_newGame+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001adc:	f003 fc26 	bl	800532c <touch_GetX>
 8001ae0:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001ae2:	2b41      	cmp	r3, #65	; 0x41
 8001ae4:	d910      	bls.n	8001b08 <is_touch_newGame+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001ae6:	f003 fc21 	bl	800532c <touch_GetX>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2bb8      	cmp	r3, #184	; 0xb8
 8001aee:	d80b      	bhi.n	8001b08 <is_touch_newGame+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001af0:	f003 fc28 	bl	8005344 <touch_GetY>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b96      	cmp	r3, #150	; 0x96
 8001af8:	d906      	bls.n	8001b08 <is_touch_newGame+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001afa:	f003 fc23 	bl	8005344 <touch_GetY>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2bb8      	cmp	r3, #184	; 0xb8
 8001b02:	d801      	bhi.n	8001b08 <is_touch_newGame+0x3e>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <is_touch_newGame+0x40>
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <is_touch_highScore>:

int is_touch_highScore()
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001b12:	f003 fbf9 	bl	8005308 <touch_IsTouched>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <is_touch_highScore+0x12>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e017      	b.n	8001b50 <is_touch_highScore+0x42>
	return (touch_GetX() > POS_X_FORTH
 8001b20:	f003 fc04 	bl	800532c <touch_GetX>
 8001b24:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001b26:	2b41      	cmp	r3, #65	; 0x41
 8001b28:	d911      	bls.n	8001b4e <is_touch_highScore+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8001b2a:	f003 fbff 	bl	800532c <touch_GetX>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2bb8      	cmp	r3, #184	; 0xb8
 8001b32:	d80c      	bhi.n	8001b4e <is_touch_highScore+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8001b34:	f003 fc06 	bl	8005344 <touch_GetY>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2bfa      	cmp	r3, #250	; 0xfa
 8001b3c:	d907      	bls.n	8001b4e <is_touch_highScore+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001b3e:	f003 fc01 	bl	8005344 <touch_GetY>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001b48:	d801      	bhi.n	8001b4e <is_touch_highScore+0x40>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <is_touch_highScore+0x42>
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <is_touch_classic>:

int is_touch_classic()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001b58:	f003 fbd6 	bl	8005308 <touch_IsTouched>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <is_touch_classic+0x12>
 8001b62:	2300      	movs	r3, #0
 8001b64:	e016      	b.n	8001b94 <is_touch_classic+0x40>
	return (touch_GetX() > POS_X_FIRST
 8001b66:	f003 fbe1 	bl	800532c <touch_GetX>
 8001b6a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8001b6c:	2b41      	cmp	r3, #65	; 0x41
 8001b6e:	d910      	bls.n	8001b92 <is_touch_classic+0x3e>
			&& touch_GetX() < POS_X_FIRST + WIDTH
 8001b70:	f003 fbdc 	bl	800532c <touch_GetX>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2bb8      	cmp	r3, #184	; 0xb8
 8001b78:	d80b      	bhi.n	8001b92 <is_touch_classic+0x3e>
			&& touch_GetY() > POS_Y_FIRST
 8001b7a:	f003 fbe3 	bl	8005344 <touch_GetY>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b64      	cmp	r3, #100	; 0x64
 8001b82:	d906      	bls.n	8001b92 <is_touch_classic+0x3e>
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8001b84:	f003 fbde 	bl	8005344 <touch_GetY>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b86      	cmp	r3, #134	; 0x86
 8001b8c:	d801      	bhi.n	8001b92 <is_touch_classic+0x3e>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <is_touch_classic+0x40>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <is_touch_speed>:

int is_touch_speed()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001b9c:	f003 fbb4 	bl	8005308 <touch_IsTouched>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <is_touch_speed+0x12>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e016      	b.n	8001bd8 <is_touch_speed+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001baa:	f003 fbbf 	bl	800532c <touch_GetX>
 8001bae:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001bb0:	2b41      	cmp	r3, #65	; 0x41
 8001bb2:	d910      	bls.n	8001bd6 <is_touch_speed+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001bb4:	f003 fbba 	bl	800532c <touch_GetX>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2bb8      	cmp	r3, #184	; 0xb8
 8001bbc:	d80b      	bhi.n	8001bd6 <is_touch_speed+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001bbe:	f003 fbc1 	bl	8005344 <touch_GetY>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b96      	cmp	r3, #150	; 0x96
 8001bc6:	d906      	bls.n	8001bd6 <is_touch_speed+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001bc8:	f003 fbbc 	bl	8005344 <touch_GetY>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2bb8      	cmp	r3, #184	; 0xb8
 8001bd0:	d801      	bhi.n	8001bd6 <is_touch_speed+0x3e>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <is_touch_speed+0x40>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <is_touch_time>:

int is_touch_time()
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001be0:	f003 fb92 	bl	8005308 <touch_IsTouched>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <is_touch_time+0x12>
 8001bea:	2300      	movs	r3, #0
 8001bec:	e016      	b.n	8001c1c <is_touch_time+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001bee:	f003 fb9d 	bl	800532c <touch_GetX>
 8001bf2:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001bf4:	2b41      	cmp	r3, #65	; 0x41
 8001bf6:	d910      	bls.n	8001c1a <is_touch_time+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001bf8:	f003 fb98 	bl	800532c <touch_GetX>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2bb8      	cmp	r3, #184	; 0xb8
 8001c00:	d80b      	bhi.n	8001c1a <is_touch_time+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001c02:	f003 fb9f 	bl	8005344 <touch_GetY>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2bc8      	cmp	r3, #200	; 0xc8
 8001c0a:	d906      	bls.n	8001c1a <is_touch_time+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001c0c:	f003 fb9a 	bl	8005344 <touch_GetY>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2bea      	cmp	r3, #234	; 0xea
 8001c14:	d801      	bhi.n	8001c1a <is_touch_time+0x3e>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <is_touch_time+0x40>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <is_touch_continue>:

int is_touch_continue()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001c24:	f003 fb70 	bl	8005308 <touch_IsTouched>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <is_touch_continue+0x12>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e016      	b.n	8001c60 <is_touch_continue+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001c32:	f003 fb7b 	bl	800532c <touch_GetX>
 8001c36:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001c38:	2b41      	cmp	r3, #65	; 0x41
 8001c3a:	d910      	bls.n	8001c5e <is_touch_continue+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001c3c:	f003 fb76 	bl	800532c <touch_GetX>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2bb8      	cmp	r3, #184	; 0xb8
 8001c44:	d80b      	bhi.n	8001c5e <is_touch_continue+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001c46:	f003 fb7d 	bl	8005344 <touch_GetY>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2bc8      	cmp	r3, #200	; 0xc8
 8001c4e:	d906      	bls.n	8001c5e <is_touch_continue+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001c50:	f003 fb78 	bl	8005344 <touch_GetY>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2bea      	cmp	r3, #234	; 0xea
 8001c58:	d801      	bhi.n	8001c5e <is_touch_continue+0x3e>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <is_touch_continue+0x40>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
 8001c7e:	4b89      	ldr	r3, [pc, #548]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a88      	ldr	r2, [pc, #544]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001c84:	f043 0310 	orr.w	r3, r3, #16
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b86      	ldr	r3, [pc, #536]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	4b82      	ldr	r3, [pc, #520]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a81      	ldr	r2, [pc, #516]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b7f      	ldr	r3, [pc, #508]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a7a      	ldr	r2, [pc, #488]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b78      	ldr	r3, [pc, #480]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	4b74      	ldr	r3, [pc, #464]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a73      	ldr	r2, [pc, #460]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b71      	ldr	r3, [pc, #452]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b6d      	ldr	r3, [pc, #436]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a6c      	ldr	r2, [pc, #432]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <MX_GPIO_Init+0x240>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	4852      	ldr	r0, [pc, #328]	; (8001ea8 <MX_GPIO_Init+0x244>)
 8001d60:	f004 fcd2 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001d6a:	4850      	ldr	r0, [pc, #320]	; (8001eac <MX_GPIO_Init+0x248>)
 8001d6c:	f004 fccc 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d76:	484e      	ldr	r0, [pc, #312]	; (8001eb0 <MX_GPIO_Init+0x24c>)
 8001d78:	f004 fcc6 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001d82:	484c      	ldr	r0, [pc, #304]	; (8001eb4 <MX_GPIO_Init+0x250>)
 8001d84:	f004 fcc0 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8e:	484a      	ldr	r0, [pc, #296]	; (8001eb8 <MX_GPIO_Init+0x254>)
 8001d90:	f004 fcba 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2108      	movs	r1, #8
 8001d98:	4848      	ldr	r0, [pc, #288]	; (8001ebc <MX_GPIO_Init+0x258>)
 8001d9a:	f004 fcb5 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001d9e:	2310      	movs	r3, #16
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	483c      	ldr	r0, [pc, #240]	; (8001ea8 <MX_GPIO_Init+0x244>)
 8001db6:	f004 faf3 	bl	80063a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001dba:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4836      	ldr	r0, [pc, #216]	; (8001eac <MX_GPIO_Init+0x248>)
 8001dd4:	f004 fae4 	bl	80063a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 8001dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	4619      	mov	r1, r3
 8001dec:	4830      	ldr	r0, [pc, #192]	; (8001eb0 <MX_GPIO_Init+0x24c>)
 8001dee:	f004 fad7 	bl	80063a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 8001df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4829      	ldr	r0, [pc, #164]	; (8001eb0 <MX_GPIO_Init+0x24c>)
 8001e0c:	f004 fac8 	bl	80063a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001e10:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	4619      	mov	r1, r3
 8001e28:	4822      	ldr	r0, [pc, #136]	; (8001eb4 <MX_GPIO_Init+0x250>)
 8001e2a:	f004 fab9 	bl	80063a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8001e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	4619      	mov	r1, r3
 8001e42:	481a      	ldr	r0, [pc, #104]	; (8001eac <MX_GPIO_Init+0x248>)
 8001e44:	f004 faac 	bl	80063a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4815      	ldr	r0, [pc, #84]	; (8001eb8 <MX_GPIO_Init+0x254>)
 8001e62:	f004 fa9d 	bl	80063a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <MX_GPIO_Init+0x248>)
 8001e7c:	f004 fa90 	bl	80063a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001e80:	2308      	movs	r3, #8
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4809      	ldr	r0, [pc, #36]	; (8001ebc <MX_GPIO_Init+0x258>)
 8001e98:	f004 fa82 	bl	80063a0 <HAL_GPIO_Init>

}
 8001e9c:	bf00      	nop
 8001e9e:	3738      	adds	r7, #56	; 0x38
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40021400 	.word	0x40021400
 8001eb4:	40021800 	.word	0x40021800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020c00 	.word	0x40020c00

08001ec0 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ec6:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <MX_I2C1_Init+0x54>)
 8001ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ecc:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <MX_I2C1_Init+0x58>)
 8001ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001efe:	f004 fc37 	bl	8006770 <HAL_I2C_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f08:	f001 fbd8 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000574 	.word	0x20000574
 8001f14:	40005400 	.word	0x40005400
 8001f18:	000186a0 	.word	0x000186a0

08001f1c <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <home_lcd+0xa0>)
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f2a:	22f0      	movs	r2, #240	; 0xf0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 fee2 	bl	8002cf8 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8001f34:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	23b9      	movs	r3, #185	; 0xb9
 8001f3c:	22b9      	movs	r2, #185	; 0xb9
 8001f3e:	2196      	movs	r1, #150	; 0x96
 8001f40:	2041      	movs	r0, #65	; 0x41
 8001f42:	f000 fc67 	bl	8002814 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8001f46:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	23eb      	movs	r3, #235	; 0xeb
 8001f4e:	22b9      	movs	r2, #185	; 0xb9
 8001f50:	21c8      	movs	r1, #200	; 0xc8
 8001f52:	2041      	movs	r0, #65	; 0x41
 8001f54:	f000 fc5e 	bl	8002814 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8001f58:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	f240 131d 	movw	r3, #285	; 0x11d
 8001f62:	22b9      	movs	r2, #185	; 0xb9
 8001f64:	21fa      	movs	r1, #250	; 0xfa
 8001f66:	2041      	movs	r0, #65	; 0x41
 8001f68:	f000 fc54 	bl	8002814 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	2318      	movs	r3, #24
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2300      	movs	r3, #0
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <home_lcd+0xa4>)
 8001f7c:	219b      	movs	r1, #155	; 0x9b
 8001f7e:	2054      	movs	r0, #84	; 0x54
 8001f80:	f001 f98c 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 8001f84:	2301      	movs	r3, #1
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	2318      	movs	r3, #24
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <home_lcd+0xa8>)
 8001f94:	21cd      	movs	r1, #205	; 0xcd
 8001f96:	204d      	movs	r0, #77	; 0x4d
 8001f98:	f001 f980 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9302      	str	r3, [sp, #8]
 8001fa0:	2318      	movs	r3, #24
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <home_lcd+0xac>)
 8001fac:	21ff      	movs	r1, #255	; 0xff
 8001fae:	2048      	movs	r0, #72	; 0x48
 8001fb0:	f001 f974 	bl	800329c <lcd_ShowStr>
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	0800f808 	.word	0x0800f808
 8001fc0:	0800c728 	.word	0x0800c728
 8001fc4:	0800c730 	.word	0x0800c730
 8001fc8:	0800c73c 	.word	0x0800c73c

08001fcc <mode_game_lcd>:

void mode_game_lcd(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_mode);
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <mode_game_lcd+0xc8>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001fda:	22f0      	movs	r2, #240	; 0xf0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 fe8a 	bl	8002cf8 <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 8001fe4:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2387      	movs	r3, #135	; 0x87
 8001fec:	22b9      	movs	r2, #185	; 0xb9
 8001fee:	2164      	movs	r1, #100	; 0x64
 8001ff0:	2041      	movs	r0, #65	; 0x41
 8001ff2:	f000 fc0f 	bl	8002814 <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8001ff6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	23b9      	movs	r3, #185	; 0xb9
 8001ffe:	22b9      	movs	r2, #185	; 0xb9
 8002000:	2196      	movs	r1, #150	; 0x96
 8002002:	2041      	movs	r0, #65	; 0x41
 8002004:	f000 fc06 	bl	8002814 <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002008:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	23eb      	movs	r3, #235	; 0xeb
 8002010:	22b9      	movs	r2, #185	; 0xb9
 8002012:	21c8      	movs	r1, #200	; 0xc8
 8002014:	2041      	movs	r0, #65	; 0x41
 8002016:	f000 fbfd 	bl	8002814 <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 800201a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f240 131d 	movw	r3, #285	; 0x11d
 8002024:	22b9      	movs	r2, #185	; 0xb9
 8002026:	21fa      	movs	r1, #250	; 0xfa
 8002028:	2041      	movs	r0, #65	; 0x41
 800202a:	f000 fbf3 	bl	8002814 <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 800202e:	2301      	movs	r3, #1
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	2318      	movs	r3, #24
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	2300      	movs	r3, #0
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2300      	movs	r3, #0
 800203c:	4a16      	ldr	r2, [pc, #88]	; (8002098 <mode_game_lcd+0xcc>)
 800203e:	2169      	movs	r1, #105	; 0x69
 8002040:	2054      	movs	r0, #84	; 0x54
 8002042:	f001 f92b 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 8002046:	2301      	movs	r3, #1
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	2318      	movs	r3, #24
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	2300      	movs	r3, #0
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2300      	movs	r3, #0
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <mode_game_lcd+0xd0>)
 8002056:	219b      	movs	r1, #155	; 0x9b
 8002058:	2060      	movs	r0, #96	; 0x60
 800205a:	f001 f91f 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 800205e:	2301      	movs	r3, #1
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	2318      	movs	r3, #24
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2300      	movs	r3, #0
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <mode_game_lcd+0xd4>)
 800206e:	21cd      	movs	r1, #205	; 0xcd
 8002070:	2060      	movs	r0, #96	; 0x60
 8002072:	f001 f913 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002076:	2301      	movs	r3, #1
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2318      	movs	r3, #24
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	2300      	movs	r3, #0
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <mode_game_lcd+0xd8>)
 8002086:	21ff      	movs	r1, #255	; 0xff
 8002088:	2064      	movs	r0, #100	; 0x64
 800208a:	f001 f907 	bl	800329c <lcd_ShowStr>
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	08035008 	.word	0x08035008
 8002098:	0800c748 	.word	0x0800c748
 800209c:	0800c750 	.word	0x0800c750
 80020a0:	0800c758 	.word	0x0800c758
 80020a4:	0800c760 	.word	0x0800c760

080020a8 <highscore_lcd>:

void highscore_lcd(){
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_highscore);
 80020ae:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <highscore_lcd+0x17c>)
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020b6:	22f0      	movs	r2, #240	; 0xf0
 80020b8:	2100      	movs	r1, #0
 80020ba:	2000      	movs	r0, #0
 80020bc:	f000 fe1c 	bl	8002cf8 <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 80020c0:	2301      	movs	r3, #1
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	2310      	movs	r3, #16
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	4a56      	ldr	r2, [pc, #344]	; (8002228 <highscore_lcd+0x180>)
 80020d0:	2150      	movs	r1, #80	; 0x50
 80020d2:	200a      	movs	r0, #10
 80020d4:	f001 f8e2 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 80020d8:	2301      	movs	r3, #1
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	2310      	movs	r3, #16
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2300      	movs	r3, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	4a51      	ldr	r2, [pc, #324]	; (800222c <highscore_lcd+0x184>)
 80020e8:	2150      	movs	r1, #80	; 0x50
 80020ea:	203c      	movs	r0, #60	; 0x3c
 80020ec:	f001 f8d6 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 80020f0:	2301      	movs	r3, #1
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	2310      	movs	r3, #16
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	2300      	movs	r3, #0
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	4a4c      	ldr	r2, [pc, #304]	; (8002230 <highscore_lcd+0x188>)
 8002100:	2150      	movs	r1, #80	; 0x50
 8002102:	20a0      	movs	r0, #160	; 0xa0
 8002104:	f001 f8ca 	bl	800329c <lcd_ShowStr>
	char c[10] = "";
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e051      	b.n	80021c0 <highscore_lcd+0x118>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	3305      	adds	r3, #5
 8002120:	b29b      	uxth	r3, r3
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	b29c      	uxth	r4, r3
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	1d39      	adds	r1, r7, #4
 800212a:	220a      	movs	r2, #10
 800212c:	4618      	mov	r0, r3
 800212e:	f008 fab7 	bl	800a6a0 <itoa>
 8002132:	4602      	mov	r2, r0
 8002134:	2301      	movs	r3, #1
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2310      	movs	r3, #16
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2300      	movs	r3, #0
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2300      	movs	r3, #0
 8002142:	4621      	mov	r1, r4
 8002144:	200a      	movs	r0, #10
 8002146:	f001 f8a9 	bl	800329c <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	3305      	adds	r3, #5
 800214e:	b29b      	uxth	r3, r3
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	b299      	uxth	r1, r3
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4a34      	ldr	r2, [pc, #208]	; (8002234 <highscore_lcd+0x18c>)
 8002162:	441a      	add	r2, r3
 8002164:	2301      	movs	r3, #1
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	2310      	movs	r3, #16
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	2300      	movs	r3, #0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2300      	movs	r3, #0
 8002172:	203c      	movs	r0, #60	; 0x3c
 8002174:	f001 f892 	bl	800329c <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	3305      	adds	r3, #5
 800217c:	b29b      	uxth	r3, r3
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	b29c      	uxth	r4, r3
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	492b      	ldr	r1, [pc, #172]	; (8002234 <highscore_lcd+0x18c>)
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	330a      	adds	r3, #10
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	220a      	movs	r2, #10
 800219c:	4619      	mov	r1, r3
 800219e:	f008 fa7f 	bl	800a6a0 <itoa>
 80021a2:	4602      	mov	r2, r0
 80021a4:	2301      	movs	r3, #1
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	2310      	movs	r3, #16
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	4621      	mov	r1, r4
 80021b4:	20a0      	movs	r0, #160	; 0xa0
 80021b6:	f001 f871 	bl	800329c <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	3301      	adds	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <highscore_lcd+0x190>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d9a8      	bls.n	800211c <highscore_lcd+0x74>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 80021ca:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f240 131d 	movw	r3, #285	; 0x11d
 80021d4:	22b9      	movs	r2, #185	; 0xb9
 80021d6:	21fa      	movs	r1, #250	; 0xfa
 80021d8:	2041      	movs	r0, #65	; 0x41
 80021da:	f000 fb1b 	bl	8002814 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 80021de:	2301      	movs	r3, #1
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	2318      	movs	r3, #24
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2300      	movs	r3, #0
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <highscore_lcd+0x194>)
 80021ee:	21ff      	movs	r1, #255	; 0xff
 80021f0:	2064      	movs	r0, #100	; 0x64
 80021f2:	f001 f853 	bl	800329c <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80021f6:	2300      	movs	r3, #0
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	f240 131d 	movw	r3, #285	; 0x11d
 80021fe:	22b9      	movs	r2, #185	; 0xb9
 8002200:	21fa      	movs	r1, #250	; 0xfa
 8002202:	2041      	movs	r0, #65	; 0x41
 8002204:	f000 fbd7 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002208:	2300      	movs	r3, #0
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002210:	22b8      	movs	r2, #184	; 0xb8
 8002212:	21fb      	movs	r1, #251	; 0xfb
 8002214:	2042      	movs	r0, #66	; 0x42
 8002216:	f000 fbce 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	bf00      	nop
 8002224:	0805a808 	.word	0x0805a808
 8002228:	0800c768 	.word	0x0800c768
 800222c:	0800c770 	.word	0x0800c770
 8002230:	0800c778 	.word	0x0800c778
 8002234:	20000508 	.word	0x20000508
 8002238:	20000000 	.word	0x20000000
 800223c:	0800c760 	.word	0x0800c760

08002240 <game_lcd>:

void game_lcd(){
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 8002246:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800224a:	f000 fab1 	bl	80027b0 <lcd_Clear>
	lcd_Fill(0, 200, 239, 319, LGRAYBLUE);
 800224e:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f240 133f 	movw	r3, #319	; 0x13f
 8002258:	22ef      	movs	r2, #239	; 0xef
 800225a:	21c8      	movs	r1, #200	; 0xc8
 800225c:	2000      	movs	r0, #0
 800225e:	f000 fad9 	bl	8002814 <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 8002262:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f240 133b 	movw	r3, #315	; 0x13b
 800226c:	224b      	movs	r2, #75	; 0x4b
 800226e:	f240 1109 	movw	r1, #265	; 0x109
 8002272:	2005      	movs	r0, #5
 8002274:	f000 face 	bl	8002814 <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 8002278:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	f240 133b 	movw	r3, #315	; 0x13b
 8002282:	22eb      	movs	r2, #235	; 0xeb
 8002284:	f240 1109 	movw	r1, #265	; 0x109
 8002288:	20a5      	movs	r0, #165	; 0xa5
 800228a:	f000 fac3 	bl	8002814 <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 800228e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	23ff      	movs	r3, #255	; 0xff
 8002296:	229b      	movs	r2, #155	; 0x9b
 8002298:	21cd      	movs	r1, #205	; 0xcd
 800229a:	2055      	movs	r0, #85	; 0x55
 800229c:	f000 faba 	bl	8002814 <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 80022a0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	f240 133b 	movw	r3, #315	; 0x13b
 80022aa:	229b      	movs	r2, #155	; 0x9b
 80022ac:	f240 1109 	movw	r1, #265	; 0x109
 80022b0:	2055      	movs	r0, #85	; 0x55
 80022b2:	f000 faaf 	bl	8002814 <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 80022b6:	2301      	movs	r3, #1
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2319      	movs	r3, #25
 80022bc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80022c0:	21e6      	movs	r1, #230	; 0xe6
 80022c2:	20c8      	movs	r0, #200	; 0xc8
 80022c4:	f000 ff7d 	bl	80031c2 <lcd_DrawCircle>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 80022c8:	2301      	movs	r3, #1
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2310      	movs	r3, #16
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	2300      	movs	r3, #0
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2300      	movs	r3, #0
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <game_lcd+0xc0>)
 80022d8:	21de      	movs	r1, #222	; 0xde
 80022da:	20b6      	movs	r0, #182	; 0xb6
 80022dc:	f000 ffde 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 80022e0:	2301      	movs	r3, #1
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2310      	movs	r3, #16
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	2300      	movs	r3, #0
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <game_lcd+0xc4>)
 80022f0:	21cd      	movs	r1, #205	; 0xcd
 80022f2:	2005      	movs	r0, #5
 80022f4:	f000 ffd2 	bl	800329c <lcd_ShowStr>
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800c780 	.word	0x0800c780
 8002304:	0800c788 	.word	0x0800c788

08002308 <score_lcd>:

void score_lcd(){
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <score_lcd+0x2c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29a      	uxth	r2, r3
 8002314:	2310      	movs	r3, #16
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	f24a 6351 	movw	r3, #42577	; 0xa651
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2300      	movs	r3, #0
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2305      	movs	r3, #5
 8002324:	21dd      	movs	r1, #221	; 0xdd
 8002326:	2005      	movs	r0, #5
 8002328:	f000 fc68 	bl	8002bfc <lcd_ShowIntNum>
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000004 	.word	0x20000004

08002338 <pause_lcd>:

void pause_lcd(){
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_pause);
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <pause_lcd+0x74>)
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002346:	22f0      	movs	r2, #240	; 0xf0
 8002348:	2100      	movs	r1, #0
 800234a:	2000      	movs	r0, #0
 800234c:	f000 fcd4 	bl	8002cf8 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002350:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	23b9      	movs	r3, #185	; 0xb9
 8002358:	22b9      	movs	r2, #185	; 0xb9
 800235a:	2196      	movs	r1, #150	; 0x96
 800235c:	2041      	movs	r0, #65	; 0x41
 800235e:	f000 fa59 	bl	8002814 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002362:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	23eb      	movs	r3, #235	; 0xeb
 800236a:	22b9      	movs	r2, #185	; 0xb9
 800236c:	21c8      	movs	r1, #200	; 0xc8
 800236e:	2041      	movs	r0, #65	; 0x41
 8002370:	f000 fa50 	bl	8002814 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 8002374:	2301      	movs	r3, #1
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	2318      	movs	r3, #24
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2300      	movs	r3, #0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2300      	movs	r3, #0
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <pause_lcd+0x78>)
 8002384:	219b      	movs	r1, #155	; 0x9b
 8002386:	205a      	movs	r0, #90	; 0x5a
 8002388:	f000 ff88 	bl	800329c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 800238c:	2301      	movs	r3, #1
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	2318      	movs	r3, #24
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2300      	movs	r3, #0
 800239a:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <pause_lcd+0x7c>)
 800239c:	21cd      	movs	r1, #205	; 0xcd
 800239e:	2064      	movs	r0, #100	; 0x64
 80023a0:	f000 ff7c 	bl	800329c <lcd_ShowStr>
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	08080008 	.word	0x08080008
 80023b0:	0800c790 	.word	0x0800c790
 80023b4:	0800c760 	.word	0x0800c760

080023b8 <game_over_lcd>:

void game_over_lcd(){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <game_over_lcd+0x68>)
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023c6:	22f0      	movs	r2, #240	; 0xf0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2000      	movs	r0, #0
 80023cc:	f000 fc94 	bl	8002cf8 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 80023d0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	23eb      	movs	r3, #235	; 0xeb
 80023d8:	22b9      	movs	r2, #185	; 0xb9
 80023da:	21c8      	movs	r1, #200	; 0xc8
 80023dc:	2041      	movs	r0, #65	; 0x41
 80023de:	f000 fa19 	bl	8002814 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80023e2:	2300      	movs	r3, #0
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	23eb      	movs	r3, #235	; 0xeb
 80023e8:	22b9      	movs	r2, #185	; 0xb9
 80023ea:	21c8      	movs	r1, #200	; 0xc8
 80023ec:	2041      	movs	r0, #65	; 0x41
 80023ee:	f000 fae2 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80023f2:	2300      	movs	r3, #0
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	23ea      	movs	r3, #234	; 0xea
 80023f8:	22b8      	movs	r2, #184	; 0xb8
 80023fa:	21c9      	movs	r1, #201	; 0xc9
 80023fc:	2042      	movs	r0, #66	; 0x42
 80023fe:	f000 fada 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002402:	2301      	movs	r3, #1
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	2318      	movs	r3, #24
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	2300      	movs	r3, #0
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2300      	movs	r3, #0
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <game_over_lcd+0x6c>)
 8002412:	21cd      	movs	r1, #205	; 0xcd
 8002414:	2064      	movs	r0, #100	; 0x64
 8002416:	f000 ff41 	bl	800329c <lcd_ShowStr>
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	080a5808 	.word	0x080a5808
 8002424:	0800c760 	.word	0x0800c760

08002428 <youwin_lcd>:

void youwin_lcd(){
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <youwin_lcd+0x68>)
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002436:	22f0      	movs	r2, #240	; 0xf0
 8002438:	2100      	movs	r1, #0
 800243a:	2000      	movs	r0, #0
 800243c:	f000 fc5c 	bl	8002cf8 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002440:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	23eb      	movs	r3, #235	; 0xeb
 8002448:	22b9      	movs	r2, #185	; 0xb9
 800244a:	21c8      	movs	r1, #200	; 0xc8
 800244c:	2041      	movs	r0, #65	; 0x41
 800244e:	f000 f9e1 	bl	8002814 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	23eb      	movs	r3, #235	; 0xeb
 8002458:	22b9      	movs	r2, #185	; 0xb9
 800245a:	21c8      	movs	r1, #200	; 0xc8
 800245c:	2041      	movs	r0, #65	; 0x41
 800245e:	f000 faaa 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	23ea      	movs	r3, #234	; 0xea
 8002468:	22b8      	movs	r2, #184	; 0xb8
 800246a:	21c9      	movs	r1, #201	; 0xc9
 800246c:	2042      	movs	r0, #66	; 0x42
 800246e:	f000 faa2 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002472:	2301      	movs	r3, #1
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	2318      	movs	r3, #24
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <youwin_lcd+0x6c>)
 8002482:	21cd      	movs	r1, #205	; 0xcd
 8002484:	2064      	movs	r0, #100	; 0x64
 8002486:	f000 ff09 	bl	800329c <lcd_ShowStr>
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	080cb008 	.word	0x080cb008
 8002494:	0800c760 	.word	0x0800c760

08002498 <home_not_select>:

void home_not_select(){
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 800249e:	f248 4330 	movw	r3, #33840	; 0x8430
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	23b9      	movs	r3, #185	; 0xb9
 80024a6:	22b9      	movs	r2, #185	; 0xb9
 80024a8:	2196      	movs	r1, #150	; 0x96
 80024aa:	2041      	movs	r0, #65	; 0x41
 80024ac:	f000 fa83 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80024b0:	f248 4330 	movw	r3, #33840	; 0x8430
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	23b8      	movs	r3, #184	; 0xb8
 80024b8:	22b8      	movs	r2, #184	; 0xb8
 80024ba:	2197      	movs	r1, #151	; 0x97
 80024bc:	2042      	movs	r0, #66	; 0x42
 80024be:	f000 fa7a 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80024c2:	f248 4330 	movw	r3, #33840	; 0x8430
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	23eb      	movs	r3, #235	; 0xeb
 80024ca:	22b9      	movs	r2, #185	; 0xb9
 80024cc:	21c8      	movs	r1, #200	; 0xc8
 80024ce:	2041      	movs	r0, #65	; 0x41
 80024d0:	f000 fa71 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80024d4:	f248 4330 	movw	r3, #33840	; 0x8430
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	23ea      	movs	r3, #234	; 0xea
 80024dc:	22b8      	movs	r2, #184	; 0xb8
 80024de:	21c9      	movs	r1, #201	; 0xc9
 80024e0:	2042      	movs	r0, #66	; 0x42
 80024e2:	f000 fa68 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80024e6:	f248 4330 	movw	r3, #33840	; 0x8430
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f240 131d 	movw	r3, #285	; 0x11d
 80024f0:	22b9      	movs	r2, #185	; 0xb9
 80024f2:	21fa      	movs	r1, #250	; 0xfa
 80024f4:	2041      	movs	r0, #65	; 0x41
 80024f6:	f000 fa5e 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80024fa:	f248 4330 	movw	r3, #33840	; 0x8430
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002504:	22b8      	movs	r2, #184	; 0xb8
 8002506:	21fb      	movs	r1, #251	; 0xfb
 8002508:	2042      	movs	r0, #66	; 0x42
 800250a:	f000 fa54 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <home_third_lcd>:
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}

void home_third_lcd(){
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af02      	add	r7, sp, #8
	home_not_select();
 800251a:	f7ff ffbd 	bl	8002498 <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	23eb      	movs	r3, #235	; 0xeb
 8002524:	22b9      	movs	r2, #185	; 0xb9
 8002526:	21c8      	movs	r1, #200	; 0xc8
 8002528:	2041      	movs	r0, #65	; 0x41
 800252a:	f000 fa44 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 800252e:	2300      	movs	r3, #0
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	23ea      	movs	r3, #234	; 0xea
 8002534:	22b8      	movs	r2, #184	; 0xb8
 8002536:	21c9      	movs	r1, #201	; 0xc9
 8002538:	2042      	movs	r0, #66	; 0x42
 800253a:	f000 fa3c 	bl	80029b6 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <point_head_lcd>:
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}

void point_head_lcd(struct Point head){
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af02      	add	r7, sp, #8
 800254a:	463b      	mov	r3, r7
 800254c:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(head.x, head.y, GREEN, RADIUS_SNAKE, 1);
 8002550:	6838      	ldr	r0, [r7, #0]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	2301      	movs	r3, #1
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2304      	movs	r3, #4
 800255a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800255e:	f000 fe30 	bl	80031c2 <lcd_DrawCircle>
	lcd_DrawCircle(head.x, head.y, BLACK, 1, 1);
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	2301      	movs	r3, #1
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2301      	movs	r3, #1
 800256c:	2200      	movs	r2, #0
 800256e:	f000 fe28 	bl	80031c2 <lcd_DrawCircle>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <point_snake_lcd>:

void point_snake_lcd(struct Point snake){
 800257a:	b590      	push	{r4, r7, lr}
 800257c:	b085      	sub	sp, #20
 800257e:	af02      	add	r7, sp, #8
 8002580:	463b      	mov	r3, r7
 8002582:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(snake.x, snake.y, GREEN, RADIUS_SNAKE, 1);
 8002586:	6838      	ldr	r0, [r7, #0]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	2301      	movs	r3, #1
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2304      	movs	r3, #4
 8002590:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002594:	f000 fe15 	bl	80031c2 <lcd_DrawCircle>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b03      	subs	r3, #3
 800259e:	b298      	uxth	r0, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b03      	subs	r3, #3
 80025a6:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80025a8:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3304      	adds	r3, #4
 80025ae:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80025b0:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3304      	adds	r3, #4
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80025bc:	9400      	str	r4, [sp, #0]
 80025be:	f000 f976 	bl	80028ae <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b03      	subs	r3, #3
 80025c8:	b298      	uxth	r0, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b02      	subs	r3, #2
 80025d0:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80025d2:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3303      	adds	r3, #3
 80025d8:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80025da:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3304      	adds	r3, #4
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80025e6:	9400      	str	r4, [sp, #0]
 80025e8:	f000 f961 	bl	80028ae <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b02      	subs	r3, #2
 80025f2:	b298      	uxth	r0, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b03      	subs	r3, #3
 80025fa:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 80025fc:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3304      	adds	r3, #4
 8002602:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 8002604:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8002606:	b29b      	uxth	r3, r3
 8002608:	3303      	adds	r3, #3
 800260a:	b29b      	uxth	r3, r3
 800260c:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8002610:	9400      	str	r4, [sp, #0]
 8002612:	f000 f94c 	bl	80028ae <lcd_DrawLine>
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}

0800261e <point_food_lcd>:

void point_food_lcd(struct Point food){
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af02      	add	r7, sp, #8
 8002624:	463b      	mov	r3, r7
 8002626:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(food.x, food.y, RED, RADIUS_SNAKE, 1);
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	2301      	movs	r3, #1
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2304      	movs	r3, #4
 8002634:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002638:	f000 fdc3 	bl	80031c2 <lcd_DrawCircle>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <point_clr>:

void point_clr(struct Point clr){
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af02      	add	r7, sp, #8
 800264a:	463b      	mov	r3, r7
 800264c:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(clr.x, clr.y, WHITE, RADIUS_SNAKE, 1);
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	2301      	movs	r3, #1
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2304      	movs	r3, #4
 800265a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800265e:	f000 fdb0 	bl	80031c2 <lcd_DrawCircle>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <update_7seg_time>:
		default:
			break;
	}
}

void update_7seg_time(){
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	led7_SetDigit(counter_time / 10, 3, 0);
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <update_7seg_time+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <update_7seg_time+0x44>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	08db      	lsrs	r3, r3, #3
 800267c:	2200      	movs	r2, #0
 800267e:	2103      	movs	r1, #3
 8002680:	4618      	mov	r0, r3
 8002682:	f000 ff07 	bl	8003494 <led7_SetDigit>
	led7_SetDigit(counter_time % 10, 4, 0);
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <update_7seg_time+0x40>)
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <update_7seg_time+0x44>)
 800268c:	fba3 2301 	umull	r2, r3, r3, r1
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	1aca      	subs	r2, r1, r3
 800269c:	4613      	mov	r3, r2
 800269e:	2200      	movs	r2, #0
 80026a0:	2104      	movs	r1, #4
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fef6 	bl	8003494 <led7_SetDigit>
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200000fc 	.word	0x200000fc
 80026b0:	cccccccd 	.word	0xcccccccd

080026b4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <LCD_WR_REG+0x1c>)
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	8013      	strh	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	600ffffe 	.word	0x600ffffe

080026d4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <LCD_WR_DATA+0x1c>)
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	8053      	strh	r3, [r2, #2]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	600ffffe 	.word	0x600ffffe

080026f4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <LCD_RD_DATA+0x20>)
 80026fc:	885b      	ldrh	r3, [r3, #2]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	b29b      	uxth	r3, r3
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	600ffffe 	.word	0x600ffffe

08002718 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4604      	mov	r4, r0
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4623      	mov	r3, r4
 8002728:	80fb      	strh	r3, [r7, #6]
 800272a:	4603      	mov	r3, r0
 800272c:	80bb      	strh	r3, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	807b      	strh	r3, [r7, #2]
 8002732:	4613      	mov	r3, r2
 8002734:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002736:	202a      	movs	r0, #42	; 0x2a
 8002738:	f7ff ffbc 	bl	80026b4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b29b      	uxth	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ffc6 	bl	80026d4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	b29b      	uxth	r3, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ffc0 	bl	80026d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	b29b      	uxth	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ffba 	bl	80026d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	b29b      	uxth	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ffb4 	bl	80026d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800276c:	202b      	movs	r0, #43	; 0x2b
 800276e:	f7ff ffa1 	bl	80026b4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002772:	88bb      	ldrh	r3, [r7, #4]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	b29b      	uxth	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ffab 	bl	80026d4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800277e:	88bb      	ldrh	r3, [r7, #4]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	b29b      	uxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ffa5 	bl	80026d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800278a:	883b      	ldrh	r3, [r7, #0]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	b29b      	uxth	r3, r3
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff9f 	bl	80026d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002796:	883b      	ldrh	r3, [r7, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff99 	bl	80026d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80027a2:	202c      	movs	r0, #44	; 0x2c
 80027a4:	f7ff ff86 	bl	80026b4 <LCD_WR_REG>
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <lcd_Clear+0x60>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <lcd_Clear+0x60>)
 80027c4:	885b      	ldrh	r3, [r3, #2]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2100      	movs	r1, #0
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7ff ffa3 	bl	8002718 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	81fb      	strh	r3, [r7, #14]
 80027d6:	e011      	b.n	80027fc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80027d8:	2300      	movs	r3, #0
 80027da:	81bb      	strh	r3, [r7, #12]
 80027dc:	e006      	b.n	80027ec <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff77 	bl	80026d4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80027e6:	89bb      	ldrh	r3, [r7, #12]
 80027e8:	3301      	adds	r3, #1
 80027ea:	81bb      	strh	r3, [r7, #12]
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <lcd_Clear+0x60>)
 80027ee:	885b      	ldrh	r3, [r3, #2]
 80027f0:	89ba      	ldrh	r2, [r7, #12]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3f3      	bcc.n	80027de <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80027f6:	89fb      	ldrh	r3, [r7, #14]
 80027f8:	3301      	adds	r3, #1
 80027fa:	81fb      	strh	r3, [r7, #14]
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <lcd_Clear+0x60>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	89fa      	ldrh	r2, [r7, #14]
 8002802:	429a      	cmp	r2, r3
 8002804:	d3e8      	bcc.n	80027d8 <lcd_Clear+0x28>
		}
	}
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200005c8 	.word	0x200005c8

08002814 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	4604      	mov	r4, r0
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4623      	mov	r3, r4
 8002824:	80fb      	strh	r3, [r7, #6]
 8002826:	4603      	mov	r3, r0
 8002828:	80bb      	strh	r3, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	807b      	strh	r3, [r7, #2]
 800282e:	4613      	mov	r3, r2
 8002830:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	883b      	ldrh	r3, [r7, #0]
 800283a:	3b01      	subs	r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	88b9      	ldrh	r1, [r7, #4]
 8002840:	88f8      	ldrh	r0, [r7, #6]
 8002842:	f7ff ff69 	bl	8002718 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002846:	88bb      	ldrh	r3, [r7, #4]
 8002848:	81fb      	strh	r3, [r7, #14]
 800284a:	e010      	b.n	800286e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	81bb      	strh	r3, [r7, #12]
 8002850:	e006      	b.n	8002860 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002852:	8c3b      	ldrh	r3, [r7, #32]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff3d 	bl	80026d4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800285a:	89bb      	ldrh	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	81bb      	strh	r3, [r7, #12]
 8002860:	89ba      	ldrh	r2, [r7, #12]
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	429a      	cmp	r2, r3
 8002866:	d3f4      	bcc.n	8002852 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	3301      	adds	r3, #1
 800286c:	81fb      	strh	r3, [r7, #14]
 800286e:	89fa      	ldrh	r2, [r7, #14]
 8002870:	883b      	ldrh	r3, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d3ea      	bcc.n	800284c <lcd_Fill+0x38>
		}
	}
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}

08002880 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
 800288a:	460b      	mov	r3, r1
 800288c:	80bb      	strh	r3, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002892:	88bb      	ldrh	r3, [r7, #4]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	88b9      	ldrh	r1, [r7, #4]
 8002898:	88f8      	ldrh	r0, [r7, #6]
 800289a:	f7ff ff3d 	bl	8002718 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff17 	bl	80026d4 <LCD_WR_DATA>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80028ae:	b590      	push	{r4, r7, lr}
 80028b0:	b08d      	sub	sp, #52	; 0x34
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4604      	mov	r4, r0
 80028b6:	4608      	mov	r0, r1
 80028b8:	4611      	mov	r1, r2
 80028ba:	461a      	mov	r2, r3
 80028bc:	4623      	mov	r3, r4
 80028be:	80fb      	strh	r3, [r7, #6]
 80028c0:	4603      	mov	r3, r0
 80028c2:	80bb      	strh	r3, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80028d4:	887a      	ldrh	r2, [r7, #2]
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80028dc:	883a      	ldrh	r2, [r7, #0]
 80028de:	88bb      	ldrh	r3, [r7, #4]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80028e8:	88bb      	ldrh	r3, [r7, #4]
 80028ea:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	dd02      	ble.n	80028f8 <lcd_DrawLine+0x4a>
 80028f2:	2301      	movs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e00b      	b.n	8002910 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <lcd_DrawLine+0x56>
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e005      	b.n	8002910 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	425b      	negs	r3, r3
 800290e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	dd02      	ble.n	800291c <lcd_DrawLine+0x6e>
 8002916:	2301      	movs	r3, #1
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e00b      	b.n	8002934 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <lcd_DrawLine+0x7a>
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e005      	b.n	8002934 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	425b      	negs	r3, r3
 8002932:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002934:	6a3a      	ldr	r2, [r7, #32]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	429a      	cmp	r2, r3
 800293a:	dd02      	ble.n	8002942 <lcd_DrawLine+0x94>
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e001      	b.n	8002946 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8002946:	2300      	movs	r3, #0
 8002948:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800294a:	e02b      	b.n	80029a4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	b29b      	uxth	r3, r3
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	b291      	uxth	r1, r2
 8002954:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff91 	bl	8002880 <lcd_DrawPoint>
		xerr+=delta_x;
 800295e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	4413      	add	r3, r2
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 800296e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	429a      	cmp	r2, r3
 8002974:	dd07      	ble.n	8002986 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8002976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	429a      	cmp	r2, r3
 800298c:	dd07      	ble.n	800299e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 800299e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029a0:	3301      	adds	r3, #1
 80029a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80029a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dacf      	bge.n	800294c <lcd_DrawLine+0x9e>
		}
	}
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3734      	adds	r7, #52	; 0x34
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}

080029b6 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80029b6:	b590      	push	{r4, r7, lr}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af02      	add	r7, sp, #8
 80029bc:	4604      	mov	r4, r0
 80029be:	4608      	mov	r0, r1
 80029c0:	4611      	mov	r1, r2
 80029c2:	461a      	mov	r2, r3
 80029c4:	4623      	mov	r3, r4
 80029c6:	80fb      	strh	r3, [r7, #6]
 80029c8:	4603      	mov	r3, r0
 80029ca:	80bb      	strh	r3, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 80029d4:	88bc      	ldrh	r4, [r7, #4]
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	88b9      	ldrh	r1, [r7, #4]
 80029da:	88f8      	ldrh	r0, [r7, #6]
 80029dc:	8b3b      	ldrh	r3, [r7, #24]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	4623      	mov	r3, r4
 80029e2:	f7ff ff64 	bl	80028ae <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 80029e6:	883c      	ldrh	r4, [r7, #0]
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	88b9      	ldrh	r1, [r7, #4]
 80029ec:	88f8      	ldrh	r0, [r7, #6]
 80029ee:	8b3b      	ldrh	r3, [r7, #24]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	4623      	mov	r3, r4
 80029f4:	f7ff ff5b 	bl	80028ae <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 80029f8:	883c      	ldrh	r4, [r7, #0]
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	8839      	ldrh	r1, [r7, #0]
 80029fe:	88f8      	ldrh	r0, [r7, #6]
 8002a00:	8b3b      	ldrh	r3, [r7, #24]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4623      	mov	r3, r4
 8002a06:	f7ff ff52 	bl	80028ae <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8002a0a:	883c      	ldrh	r4, [r7, #0]
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	88b9      	ldrh	r1, [r7, #4]
 8002a10:	8878      	ldrh	r0, [r7, #2]
 8002a12:	8b3b      	ldrh	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4623      	mov	r3, r4
 8002a18:	f7ff ff49 	bl	80028ae <lcd_DrawLine>
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}

08002a24 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4623      	mov	r3, r4
 8002a34:	80fb      	strh	r3, [r7, #6]
 8002a36:	4603      	mov	r3, r0
 8002a38:	80bb      	strh	r3, [r7, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	70fb      	strb	r3, [r7, #3]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8002a4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf14      	ite	ne
 8002a66:	2301      	movne	r3, #1
 8002a68:	2300      	moveq	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	fb12 f303 	smulbb	r3, r2, r3
 8002a7a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	3b20      	subs	r3, #32
 8002a80:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	4413      	add	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29c      	uxth	r4, r3
 8002a90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	88bb      	ldrh	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	88b9      	ldrh	r1, [r7, #4]
 8002aa2:	88f8      	ldrh	r0, [r7, #6]
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	f7ff fe37 	bl	8002718 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	827b      	strh	r3, [r7, #18]
 8002aae:	e07a      	b.n	8002ba6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002ab0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d028      	beq.n	8002b0a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8002ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d108      	bne.n	8002ad2 <lcd_ShowChar+0xae>
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	8a7b      	ldrh	r3, [r7, #18]
 8002ac4:	493c      	ldr	r1, [pc, #240]	; (8002bb8 <lcd_ShowChar+0x194>)
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	440a      	add	r2, r1
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	75fb      	strb	r3, [r7, #23]
 8002ad0:	e01b      	b.n	8002b0a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8002ad2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ad6:	2b18      	cmp	r3, #24
 8002ad8:	d10b      	bne.n	8002af2 <lcd_ShowChar+0xce>
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	8a79      	ldrh	r1, [r7, #18]
 8002ade:	4837      	ldr	r0, [pc, #220]	; (8002bbc <lcd_ShowChar+0x198>)
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4403      	add	r3, r0
 8002aea:	440b      	add	r3, r1
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	75fb      	strb	r3, [r7, #23]
 8002af0:	e00b      	b.n	8002b0a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8002af2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d15a      	bne.n	8002bb0 <lcd_ShowChar+0x18c>
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	8a7b      	ldrh	r3, [r7, #18]
 8002afe:	4930      	ldr	r1, [pc, #192]	; (8002bc0 <lcd_ShowChar+0x19c>)
 8002b00:	0192      	lsls	r2, r2, #6
 8002b02:	440a      	add	r2, r1
 8002b04:	4413      	add	r3, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75bb      	strb	r3, [r7, #22]
 8002b0e:	e044      	b.n	8002b9a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002b10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d120      	bne.n	8002b5a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002b18:	7dfa      	ldrb	r2, [r7, #23]
 8002b1a:	7dbb      	ldrb	r3, [r7, #22]
 8002b1c:	fa42 f303 	asr.w	r3, r2, r3
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <lcd_ShowChar+0x10e>
 8002b28:	883b      	ldrh	r3, [r7, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fdd2 	bl	80026d4 <LCD_WR_DATA>
 8002b30:	e003      	b.n	8002b3a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8002b32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fdcd 	bl	80026d4 <LCD_WR_DATA>
				m++;
 8002b3a:	7d7b      	ldrb	r3, [r7, #21]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002b40:	7d7b      	ldrb	r3, [r7, #21]
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b48:	fb02 f201 	mul.w	r2, r2, r1
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11f      	bne.n	8002b94 <lcd_ShowChar+0x170>
				{
					m=0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	757b      	strb	r3, [r7, #21]
					break;
 8002b58:	e022      	b.n	8002ba0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002b5a:	7dfa      	ldrb	r2, [r7, #23]
 8002b5c:	7dbb      	ldrb	r3, [r7, #22]
 8002b5e:	fa42 f303 	asr.w	r3, r2, r3
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <lcd_ShowChar+0x152>
 8002b6a:	883a      	ldrh	r2, [r7, #0]
 8002b6c:	88b9      	ldrh	r1, [r7, #4]
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fe85 	bl	8002880 <lcd_DrawPoint>
				x++;
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	8a3b      	ldrh	r3, [r7, #16]
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d105      	bne.n	8002b94 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002b88:	8a3b      	ldrh	r3, [r7, #16]
 8002b8a:	80fb      	strh	r3, [r7, #6]
					y++;
 8002b8c:	88bb      	ldrh	r3, [r7, #4]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	80bb      	strh	r3, [r7, #4]
					break;
 8002b92:	e005      	b.n	8002ba0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002b94:	7dbb      	ldrb	r3, [r7, #22]
 8002b96:	3301      	adds	r3, #1
 8002b98:	75bb      	strb	r3, [r7, #22]
 8002b9a:	7dbb      	ldrb	r3, [r7, #22]
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d9b7      	bls.n	8002b10 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002ba0:	8a7b      	ldrh	r3, [r7, #18]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	827b      	strh	r3, [r7, #18]
 8002ba6:	8a7a      	ldrh	r2, [r7, #18]
 8002ba8:	89bb      	ldrh	r3, [r7, #12]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d380      	bcc.n	8002ab0 <lcd_ShowChar+0x8c>
 8002bae:	e000      	b.n	8002bb2 <lcd_ShowChar+0x18e>
		else return;
 8002bb0:	bf00      	nop
				}
			}
		}
	}
}
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd90      	pop	{r4, r7, pc}
 8002bb8:	0800c888 	.word	0x0800c888
 8002bbc:	0800ce78 	.word	0x0800ce78
 8002bc0:	0800e048 	.word	0x0800e048

08002bc4 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	460a      	mov	r2, r1
 8002bce:	71fb      	strb	r3, [r7, #7]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002bd8:	e004      	b.n	8002be4 <mypow+0x20>
 8002bda:	79fa      	ldrb	r2, [r7, #7]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	79bb      	ldrb	r3, [r7, #6]
 8002be6:	1e5a      	subs	r2, r3, #1
 8002be8:	71ba      	strb	r2, [r7, #6]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f5      	bne.n	8002bda <mypow+0x16>
	return result;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af04      	add	r7, sp, #16
 8002c02:	4604      	mov	r4, r0
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	80fb      	strh	r3, [r7, #6]
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80bb      	strh	r3, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	807b      	strh	r3, [r7, #2]
 8002c16:	4613      	mov	r3, r2
 8002c18:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	e059      	b.n	8002ce0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002c2c:	887c      	ldrh	r4, [r7, #2]
 8002c2e:	787a      	ldrb	r2, [r7, #1]
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	200a      	movs	r0, #10
 8002c3e:	f7ff ffc1 	bl	8002bc4 <mypow>
 8002c42:	4603      	mov	r3, r0
 8002c44:	fbb4 f1f3 	udiv	r1, r4, r3
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <lcd_ShowIntNum+0xf8>)
 8002c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	1aca      	subs	r2, r1, r3
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8002c5e:	7bbb      	ldrb	r3, [r7, #14]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d121      	bne.n	8002ca8 <lcd_ShowIntNum+0xac>
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	787b      	ldrb	r3, [r7, #1]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	da1c      	bge.n	8002ca8 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002c6e:	7b3b      	ldrb	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d117      	bne.n	8002ca4 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	7b7b      	ldrb	r3, [r7, #13]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	fb12 f303 	smulbb	r3, r2, r3
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	4413      	add	r3, r2
 8002c86:	b298      	uxth	r0, r3
 8002c88:	8c3a      	ldrh	r2, [r7, #32]
 8002c8a:	88b9      	ldrh	r1, [r7, #4]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9302      	str	r3, [sp, #8]
 8002c90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f7ff fec1 	bl	8002a24 <lcd_ShowChar>
				continue;
 8002ca2:	e01a      	b.n	8002cda <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	7b7b      	ldrb	r3, [r7, #13]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	fb12 f303 	smulbb	r3, r2, r3
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	4413      	add	r3, r2
 8002cba:	b298      	uxth	r0, r3
 8002cbc:	7b3b      	ldrb	r3, [r7, #12]
 8002cbe:	3330      	adds	r3, #48	; 0x30
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	8c3c      	ldrh	r4, [r7, #32]
 8002cc4:	88b9      	ldrh	r1, [r7, #4]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9302      	str	r3, [sp, #8]
 8002cca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	f7ff fea5 	bl	8002a24 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	787b      	ldrb	r3, [r7, #1]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d3a1      	bcc.n	8002c2c <lcd_ShowIntNum+0x30>
	}
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	cccccccd 	.word	0xcccccccd

08002cf8 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4604      	mov	r4, r0
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4623      	mov	r3, r4
 8002d08:	80fb      	strh	r3, [r7, #6]
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80bb      	strh	r3, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	807b      	strh	r3, [r7, #2]
 8002d12:	4613      	mov	r3, r2
 8002d14:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29c      	uxth	r4, r3
 8002d26:	88ba      	ldrh	r2, [r7, #4]
 8002d28:	883b      	ldrh	r3, [r7, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	88b9      	ldrh	r1, [r7, #4]
 8002d34:	88f8      	ldrh	r0, [r7, #6]
 8002d36:	4622      	mov	r2, r4
 8002d38:	f7ff fcee 	bl	8002718 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	82fb      	strh	r3, [r7, #22]
 8002d40:	e027      	b.n	8002d92 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	82bb      	strh	r3, [r7, #20]
 8002d46:	e01d      	b.n	8002d84 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4e:	4413      	add	r3, r2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	3301      	adds	r3, #1
 8002d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	b21a      	sxth	r2, r3
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	b21b      	sxth	r3, r3
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fcae 	bl	80026d4 <LCD_WR_DATA>
			k++;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8002d7e:	8abb      	ldrh	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	82bb      	strh	r3, [r7, #20]
 8002d84:	8aba      	ldrh	r2, [r7, #20]
 8002d86:	883b      	ldrh	r3, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3dd      	bcc.n	8002d48 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	82fb      	strh	r3, [r7, #22]
 8002d92:	8afa      	ldrh	r2, [r7, #22]
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3d3      	bcc.n	8002d42 <lcd_ShowPicture+0x4a>
		}
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd90      	pop	{r4, r7, pc}

08002da4 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <lcd_SetDir+0x44>)
 8002dc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002dc4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <lcd_SetDir+0x44>)
 8002dc8:	22f0      	movs	r2, #240	; 0xf0
 8002dca:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002dcc:	e006      	b.n	8002ddc <lcd_SetDir+0x38>
		lcddev.width=240;
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <lcd_SetDir+0x44>)
 8002dd0:	22f0      	movs	r2, #240	; 0xf0
 8002dd2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <lcd_SetDir+0x44>)
 8002dd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002dda:	805a      	strh	r2, [r3, #2]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	200005c8 	.word	0x200005c8

08002dec <lcd_init>:


void lcd_init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df6:	48aa      	ldr	r0, [pc, #680]	; (80030a0 <lcd_init+0x2b4>)
 8002df8:	f003 fc86 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e00:	f002 fbba 	bl	8005578 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002e04:	2201      	movs	r2, #1
 8002e06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e0a:	48a5      	ldr	r0, [pc, #660]	; (80030a0 <lcd_init+0x2b4>)
 8002e0c:	f003 fc7c 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002e10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e14:	f002 fbb0 	bl	8005578 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7ff ffc3 	bl	8002da4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002e1e:	20d3      	movs	r0, #211	; 0xd3
 8002e20:	f7ff fc48 	bl	80026b4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002e24:	f7ff fc66 	bl	80026f4 <LCD_RD_DATA>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b9d      	ldr	r3, [pc, #628]	; (80030a4 <lcd_init+0x2b8>)
 8002e2e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002e30:	f7ff fc60 	bl	80026f4 <LCD_RD_DATA>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b9a      	ldr	r3, [pc, #616]	; (80030a4 <lcd_init+0x2b8>)
 8002e3a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002e3c:	f7ff fc5a 	bl	80026f4 <LCD_RD_DATA>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b97      	ldr	r3, [pc, #604]	; (80030a4 <lcd_init+0x2b8>)
 8002e46:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002e48:	4b96      	ldr	r3, [pc, #600]	; (80030a4 <lcd_init+0x2b8>)
 8002e4a:	889b      	ldrh	r3, [r3, #4]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	4b94      	ldr	r3, [pc, #592]	; (80030a4 <lcd_init+0x2b8>)
 8002e52:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002e54:	f7ff fc4e 	bl	80026f4 <LCD_RD_DATA>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b91      	ldr	r3, [pc, #580]	; (80030a4 <lcd_init+0x2b8>)
 8002e5e:	889b      	ldrh	r3, [r3, #4]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	4b8f      	ldr	r3, [pc, #572]	; (80030a4 <lcd_init+0x2b8>)
 8002e66:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002e68:	20cf      	movs	r0, #207	; 0xcf
 8002e6a:	f7ff fc23 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7ff fc30 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002e74:	20c1      	movs	r0, #193	; 0xc1
 8002e76:	f7ff fc2d 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002e7a:	2030      	movs	r0, #48	; 0x30
 8002e7c:	f7ff fc2a 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002e80:	20ed      	movs	r0, #237	; 0xed
 8002e82:	f7ff fc17 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002e86:	2064      	movs	r0, #100	; 0x64
 8002e88:	f7ff fc24 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002e8c:	2003      	movs	r0, #3
 8002e8e:	f7ff fc21 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002e92:	2012      	movs	r0, #18
 8002e94:	f7ff fc1e 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002e98:	2081      	movs	r0, #129	; 0x81
 8002e9a:	f7ff fc1b 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002e9e:	20e8      	movs	r0, #232	; 0xe8
 8002ea0:	f7ff fc08 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002ea4:	2085      	movs	r0, #133	; 0x85
 8002ea6:	f7ff fc15 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002eaa:	2010      	movs	r0, #16
 8002eac:	f7ff fc12 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002eb0:	207a      	movs	r0, #122	; 0x7a
 8002eb2:	f7ff fc0f 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002eb6:	20cb      	movs	r0, #203	; 0xcb
 8002eb8:	f7ff fbfc 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002ebc:	2039      	movs	r0, #57	; 0x39
 8002ebe:	f7ff fc09 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002ec2:	202c      	movs	r0, #44	; 0x2c
 8002ec4:	f7ff fc06 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7ff fc03 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002ece:	2034      	movs	r0, #52	; 0x34
 8002ed0:	f7ff fc00 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	f7ff fbfd 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002eda:	20f7      	movs	r0, #247	; 0xf7
 8002edc:	f7ff fbea 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002ee0:	2020      	movs	r0, #32
 8002ee2:	f7ff fbf7 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002ee6:	20ea      	movs	r0, #234	; 0xea
 8002ee8:	f7ff fbe4 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7ff fbf1 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7ff fbee 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002ef8:	20c0      	movs	r0, #192	; 0xc0
 8002efa:	f7ff fbdb 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002efe:	201b      	movs	r0, #27
 8002f00:	f7ff fbe8 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002f04:	20c1      	movs	r0, #193	; 0xc1
 8002f06:	f7ff fbd5 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f7ff fbe2 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002f10:	20c5      	movs	r0, #197	; 0xc5
 8002f12:	f7ff fbcf 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002f16:	2030      	movs	r0, #48	; 0x30
 8002f18:	f7ff fbdc 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002f1c:	2030      	movs	r0, #48	; 0x30
 8002f1e:	f7ff fbd9 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002f22:	20c7      	movs	r0, #199	; 0xc7
 8002f24:	f7ff fbc6 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002f28:	20b7      	movs	r0, #183	; 0xb7
 8002f2a:	f7ff fbd3 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002f2e:	2036      	movs	r0, #54	; 0x36
 8002f30:	f7ff fbc0 	bl	80026b4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002f34:	2008      	movs	r0, #8
 8002f36:	f7ff fbcd 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002f3a:	203a      	movs	r0, #58	; 0x3a
 8002f3c:	f7ff fbba 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002f40:	2055      	movs	r0, #85	; 0x55
 8002f42:	f7ff fbc7 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002f46:	20b1      	movs	r0, #177	; 0xb1
 8002f48:	f7ff fbb4 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff fbc1 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002f52:	201a      	movs	r0, #26
 8002f54:	f7ff fbbe 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002f58:	20b6      	movs	r0, #182	; 0xb6
 8002f5a:	f7ff fbab 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002f5e:	200a      	movs	r0, #10
 8002f60:	f7ff fbb8 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002f64:	20a2      	movs	r0, #162	; 0xa2
 8002f66:	f7ff fbb5 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002f6a:	20f2      	movs	r0, #242	; 0xf2
 8002f6c:	f7ff fba2 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7ff fbaf 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002f76:	2026      	movs	r0, #38	; 0x26
 8002f78:	f7ff fb9c 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f7ff fba9 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002f82:	20e0      	movs	r0, #224	; 0xe0
 8002f84:	f7ff fb96 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002f88:	200f      	movs	r0, #15
 8002f8a:	f7ff fba3 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002f8e:	202a      	movs	r0, #42	; 0x2a
 8002f90:	f7ff fba0 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002f94:	2028      	movs	r0, #40	; 0x28
 8002f96:	f7ff fb9d 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002f9a:	2008      	movs	r0, #8
 8002f9c:	f7ff fb9a 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002fa0:	200e      	movs	r0, #14
 8002fa2:	f7ff fb97 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002fa6:	2008      	movs	r0, #8
 8002fa8:	f7ff fb94 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002fac:	2054      	movs	r0, #84	; 0x54
 8002fae:	f7ff fb91 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002fb2:	20a9      	movs	r0, #169	; 0xa9
 8002fb4:	f7ff fb8e 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002fb8:	2043      	movs	r0, #67	; 0x43
 8002fba:	f7ff fb8b 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002fbe:	200a      	movs	r0, #10
 8002fc0:	f7ff fb88 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002fc4:	200f      	movs	r0, #15
 8002fc6:	f7ff fb85 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7ff fb82 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7ff fb7f 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff fb7c 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7ff fb79 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002fe2:	20e1      	movs	r0, #225	; 0xe1
 8002fe4:	f7ff fb66 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7ff fb73 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002fee:	2015      	movs	r0, #21
 8002ff0:	f7ff fb70 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002ff4:	2017      	movs	r0, #23
 8002ff6:	f7ff fb6d 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002ffa:	2007      	movs	r0, #7
 8002ffc:	f7ff fb6a 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8003000:	2011      	movs	r0, #17
 8003002:	f7ff fb67 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8003006:	2006      	movs	r0, #6
 8003008:	f7ff fb64 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800300c:	202b      	movs	r0, #43	; 0x2b
 800300e:	f7ff fb61 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8003012:	2056      	movs	r0, #86	; 0x56
 8003014:	f7ff fb5e 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8003018:	203c      	movs	r0, #60	; 0x3c
 800301a:	f7ff fb5b 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800301e:	2005      	movs	r0, #5
 8003020:	f7ff fb58 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8003024:	2010      	movs	r0, #16
 8003026:	f7ff fb55 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800302a:	200f      	movs	r0, #15
 800302c:	f7ff fb52 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003030:	203f      	movs	r0, #63	; 0x3f
 8003032:	f7ff fb4f 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003036:	203f      	movs	r0, #63	; 0x3f
 8003038:	f7ff fb4c 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800303c:	200f      	movs	r0, #15
 800303e:	f7ff fb49 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8003042:	202b      	movs	r0, #43	; 0x2b
 8003044:	f7ff fb36 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7ff fb43 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800304e:	2000      	movs	r0, #0
 8003050:	f7ff fb40 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8003054:	2001      	movs	r0, #1
 8003056:	f7ff fb3d 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800305a:	203f      	movs	r0, #63	; 0x3f
 800305c:	f7ff fb3a 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8003060:	202a      	movs	r0, #42	; 0x2a
 8003062:	f7ff fb27 	bl	80026b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7ff fb34 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff fb31 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7ff fb2e 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8003078:	20ef      	movs	r0, #239	; 0xef
 800307a:	f7ff fb2b 	bl	80026d4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800307e:	2011      	movs	r0, #17
 8003080:	f7ff fb18 	bl	80026b4 <LCD_WR_REG>
	HAL_Delay(120);
 8003084:	2078      	movs	r0, #120	; 0x78
 8003086:	f002 fa77 	bl	8005578 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800308a:	2029      	movs	r0, #41	; 0x29
 800308c:	f7ff fb12 	bl	80026b4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8003090:	2201      	movs	r2, #1
 8003092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003096:	4804      	ldr	r0, [pc, #16]	; (80030a8 <lcd_init+0x2bc>)
 8003098:	f003 fb36 	bl	8006708 <HAL_GPIO_WritePin>
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40020800 	.word	0x40020800
 80030a4:	200005c8 	.word	0x200005c8
 80030a8:	40020000 	.word	0x40020000

080030ac <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	b298      	uxth	r0, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	8b3a      	ldrh	r2, [r7, #24]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7ff fbd3 	bl	8002880 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b298      	uxth	r0, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	8b3a      	ldrh	r2, [r7, #24]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7ff fbc3 	bl	8002880 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	b29b      	uxth	r3, r3
 8003102:	4413      	add	r3, r2
 8003104:	b298      	uxth	r0, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	b29a      	uxth	r2, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	b29b      	uxth	r3, r3
 8003112:	8b3a      	ldrh	r2, [r7, #24]
 8003114:	4619      	mov	r1, r3
 8003116:	f7ff fbb3 	bl	8002880 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	b29b      	uxth	r3, r3
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	b298      	uxth	r0, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	b29a      	uxth	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	b29b      	uxth	r3, r3
 8003132:	8b3a      	ldrh	r2, [r7, #24]
 8003134:	4619      	mov	r1, r3
 8003136:	f7ff fba3 	bl	8002880 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	b29a      	uxth	r2, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	4413      	add	r3, r2
 8003144:	b298      	uxth	r0, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	b29b      	uxth	r3, r3
 800314e:	4413      	add	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	8b3a      	ldrh	r2, [r7, #24]
 8003154:	4619      	mov	r1, r3
 8003156:	f7ff fb93 	bl	8002880 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	b29a      	uxth	r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	b298      	uxth	r0, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	b29a      	uxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	b29b      	uxth	r3, r3
 800316e:	4413      	add	r3, r2
 8003170:	b29b      	uxth	r3, r3
 8003172:	8b3a      	ldrh	r2, [r7, #24]
 8003174:	4619      	mov	r1, r3
 8003176:	f7ff fb83 	bl	8002880 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	b29a      	uxth	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	4413      	add	r3, r2
 8003184:	b298      	uxth	r0, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	b29b      	uxth	r3, r3
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	8b3a      	ldrh	r2, [r7, #24]
 8003194:	4619      	mov	r1, r3
 8003196:	f7ff fb73 	bl	8002880 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	b29a      	uxth	r2, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b298      	uxth	r0, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8b3a      	ldrh	r2, [r7, #24]
 80031b4:	4619      	mov	r1, r3
 80031b6:	f7ff fb63 	bl	8002880 <lcd_DrawPoint>
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	; 0x28
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	f1c3 0303 	rsb	r3, r3, #3
 80031e2:	613b      	str	r3, [r7, #16]


	if (fill)
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d04f      	beq.n	800328a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80031ea:	e029      	b.n	8003240 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e00a      	b.n	8003208 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ff55 	bl	80030ac <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	429a      	cmp	r2, r3
 800320e:	ddf0      	ble.n	80031f2 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da06      	bge.n	8003224 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	009a      	lsls	r2, r3, #2
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	3306      	adds	r3, #6
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e00a      	b.n	800323a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	009a      	lsls	r2, r3, #2
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	330a      	adds	r3, #10
 8003232:	613b      	str	r3, [r7, #16]
				y--;
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	3b01      	subs	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3301      	adds	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	429a      	cmp	r2, r3
 8003246:	ddd1      	ble.n	80031ec <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8003248:	e023      	b.n	8003292 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff ff29 	bl	80030ac <_draw_circle_8>
			if (d < 0) {
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	da06      	bge.n	800326e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	3306      	adds	r3, #6
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e00a      	b.n	8003284 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	009a      	lsls	r2, r3, #2
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	330a      	adds	r3, #10
 800327c:	613b      	str	r3, [r7, #16]
				y--;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	3b01      	subs	r3, #1
 8003282:	61bb      	str	r3, [r7, #24]
			x++;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	3301      	adds	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	429a      	cmp	r2, r3
 8003290:	dddb      	ble.n	800324a <lcd_DrawCircle+0x88>
}
 8003292:	bf00      	nop
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b08b      	sub	sp, #44	; 0x2c
 80032a0:	af04      	add	r7, sp, #16
 80032a2:	60ba      	str	r2, [r7, #8]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	81fb      	strh	r3, [r7, #14]
 80032aa:	460b      	mov	r3, r1
 80032ac:	81bb      	strh	r3, [r7, #12]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80032ba:	e048      	b.n	800334e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d145      	bne.n	800334e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80032c2:	89fa      	ldrh	r2, [r7, #14]
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <lcd_ShowStr+0xc4>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	1acb      	subs	r3, r1, r3
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dc3f      	bgt.n	8003358 <lcd_ShowStr+0xbc>
 80032d8:	89ba      	ldrh	r2, [r7, #12]
 80032da:	4b21      	ldr	r3, [pc, #132]	; (8003360 <lcd_ShowStr+0xc4>)
 80032dc:	885b      	ldrh	r3, [r3, #2]
 80032de:	4619      	mov	r1, r3
 80032e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80032e4:	1acb      	subs	r3, r1, r3
 80032e6:	429a      	cmp	r2, r3
 80032e8:	dc36      	bgt.n	8003358 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b80      	cmp	r3, #128	; 0x80
 80032f0:	d902      	bls.n	80032f8 <lcd_ShowStr+0x5c>
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
 80032f6:	e02a      	b.n	800334e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b0d      	cmp	r3, #13
 80032fe:	d10b      	bne.n	8003318 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8003300:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003304:	b29a      	uxth	r2, r3
 8003306:	89bb      	ldrh	r3, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800330c:	8abb      	ldrh	r3, [r7, #20]
 800330e:	81fb      	strh	r3, [r7, #14]
					str++;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	3301      	adds	r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	e017      	b.n	8003348 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781a      	ldrb	r2, [r3, #0]
 800331c:	88fc      	ldrh	r4, [r7, #6]
 800331e:	89b9      	ldrh	r1, [r7, #12]
 8003320:	89f8      	ldrh	r0, [r7, #14]
 8003322:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003326:	9302      	str	r3, [sp, #8]
 8003328:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	4623      	mov	r3, r4
 8003334:	f7ff fb76 	bl	8002a24 <lcd_ShowChar>
					x+=sizey/2;
 8003338:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	b29a      	uxth	r2, r3
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	4413      	add	r3, r2
 8003346:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	3301      	adds	r3, #1
 800334c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1b2      	bne.n	80032bc <lcd_ShowStr+0x20>
 8003356:	e000      	b.n	800335a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003358:	bf00      	nop
			}
		}
	}
}
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}
 8003360:	200005c8 	.word	0x200005c8

08003364 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003368:	2201      	movs	r2, #1
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	4802      	ldr	r0, [pc, #8]	; (8003378 <led7_init+0x14>)
 800336e:	f003 f9cb 	bl	8006708 <HAL_GPIO_WritePin>
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40021800 	.word	0x40021800

0800337c <led7_Scan>:

void led7_Scan(){
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8003380:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <led7_Scan+0x104>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	b29a      	uxth	r2, r3
 8003388:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <led7_Scan+0x104>)
 800338a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800338c:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <led7_Scan+0x108>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <led7_Scan+0x10c>)
 8003394:	5c9b      	ldrb	r3, [r3, r2]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	b21a      	sxth	r2, r3
 800339a:	4b39      	ldr	r3, [pc, #228]	; (8003480 <led7_Scan+0x104>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b21b      	sxth	r3, r3
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	4b36      	ldr	r3, [pc, #216]	; (8003480 <led7_Scan+0x104>)
 80033a8:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <led7_Scan+0x108>)
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d846      	bhi.n	8003440 <led7_Scan+0xc4>
 80033b2:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <led7_Scan+0x3c>)
 80033b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033e7 	.word	0x080033e7
 80033c0:	08003405 	.word	0x08003405
 80033c4:	08003423 	.word	0x08003423
	case 0:
		spi_buffer |= 0x00b0;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <led7_Scan+0x104>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <led7_Scan+0x104>)
 80033d4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <led7_Scan+0x104>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033de:	b29a      	uxth	r2, r3
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <led7_Scan+0x104>)
 80033e2:	801a      	strh	r2, [r3, #0]
		break;
 80033e4:	e02d      	b.n	8003442 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <led7_Scan+0x104>)
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4b23      	ldr	r3, [pc, #140]	; (8003480 <led7_Scan+0x104>)
 80033f2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80033f4:	4b22      	ldr	r3, [pc, #136]	; (8003480 <led7_Scan+0x104>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	f023 0320 	bic.w	r3, r3, #32
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <led7_Scan+0x104>)
 8003400:	801a      	strh	r2, [r3, #0]
		break;
 8003402:	e01e      	b.n	8003442 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <led7_Scan+0x104>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800340c:	b29a      	uxth	r2, r3
 800340e:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <led7_Scan+0x104>)
 8003410:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <led7_Scan+0x104>)
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	f023 0310 	bic.w	r3, r3, #16
 800341a:	b29a      	uxth	r2, r3
 800341c:	4b18      	ldr	r3, [pc, #96]	; (8003480 <led7_Scan+0x104>)
 800341e:	801a      	strh	r2, [r3, #0]
		break;
 8003420:	e00f      	b.n	8003442 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <led7_Scan+0x104>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800342a:	b29a      	uxth	r2, r3
 800342c:	4b14      	ldr	r3, [pc, #80]	; (8003480 <led7_Scan+0x104>)
 800342e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <led7_Scan+0x104>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003438:	b29a      	uxth	r2, r3
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <led7_Scan+0x104>)
 800343c:	801a      	strh	r2, [r3, #0]
		break;
 800343e:	e000      	b.n	8003442 <led7_Scan+0xc6>
	default:
		break;
 8003440:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <led7_Scan+0x108>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	425a      	negs	r2, r3
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	bf58      	it	pl
 8003454:	4253      	negpl	r3, r2
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <led7_Scan+0x108>)
 800345a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	; 0x40
 8003460:	480a      	ldr	r0, [pc, #40]	; (800348c <led7_Scan+0x110>)
 8003462:	f003 f951 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8003466:	2301      	movs	r3, #1
 8003468:	2202      	movs	r2, #2
 800346a:	4905      	ldr	r1, [pc, #20]	; (8003480 <led7_Scan+0x104>)
 800346c:	4808      	ldr	r0, [pc, #32]	; (8003490 <led7_Scan+0x114>)
 800346e:	f004 fe3c 	bl	80080ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003472:	2201      	movs	r2, #1
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	4805      	ldr	r0, [pc, #20]	; (800348c <led7_Scan+0x110>)
 8003478:	f003 f946 	bl	8006708 <HAL_GPIO_WritePin>
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000022 	.word	0x20000022
 8003484:	2000010c 	.word	0x2000010c
 8003488:	20000014 	.word	0x20000014
 800348c:	40021800 	.word	0x40021800
 8003490:	20000664 	.word	0x20000664

08003494 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0e      	blt.n	80034c6 <led7_SetDigit+0x32>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b09      	cmp	r3, #9
 80034ac:	dc0b      	bgt.n	80034c6 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <led7_SetDigit+0x40>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	b2d9      	uxtb	r1, r3
 80034bc:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <led7_SetDigit+0x44>)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4413      	add	r3, r2
 80034c2:	460a      	mov	r2, r1
 80034c4:	701a      	strb	r2, [r3, #0]
	}
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000018 	.word	0x20000018
 80034d8:	20000014 	.word	0x20000014

080034dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034e0:	f001 ffd8 	bl	8005494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034e4:	f000 f82a 	bl	800353c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034e8:	f7fe fbbc 	bl	8001c64 <MX_GPIO_Init>
  MX_DMA_Init();
 80034ec:	f7fd fe78 	bl	80011e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80034f0:	f7fd fd3e 	bl	8000f70 <MX_ADC1_Init>
  MX_FSMC_Init();
 80034f4:	f7fe f906 	bl	8001704 <MX_FSMC_Init>
  MX_I2C1_Init();
 80034f8:	f7fe fce2 	bl	8001ec0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80034fc:	f000 fb44 	bl	8003b88 <MX_SPI1_Init>
  MX_TIM2_Init();
 8003500:	f000 ffac 	bl	800445c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003504:	f001 ff48 	bl	8005398 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8003508:	f000 ff58 	bl	80043bc <MX_TIM1_Init>
  MX_TIM13_Init();
 800350c:	f000 fff2 	bl	80044f4 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 8003510:	f001 ff6c 	bl	80053ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8003514:	f000 f87c 	bl	8003610 <system_init>
    /* USER CODE END WHILE*/
	  //scan touch screen


	  	  // 50ms task
	  	  if(flag_timer2 == 1){
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <main+0x5c>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d1fb      	bne.n	8003518 <main+0x3c>
	  		touch_Scan();
 8003520:	f001 fee8 	bl	80052f4 <touch_Scan>
	  		  flag_timer2 = 0;
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <main+0x5c>)
 8003526:	2200      	movs	r2, #0
 8003528:	801a      	strh	r2, [r3, #0]
	  		  //touchProcess();
	  		  input_process();
 800352a:	f7fd fef3 	bl	8001314 <input_process>
	  		  fsm_ingame();
 800352e:	f7fe f843 	bl	80015b8 <fsm_ingame>
	  		  test_led();
 8003532:	f000 f89d 	bl	8003670 <test_led>
	  	  if(flag_timer2 == 1){
 8003536:	e7ef      	b.n	8003518 <main+0x3c>
 8003538:	20000110 	.word	0x20000110

0800353c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b094      	sub	sp, #80	; 0x50
 8003540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003542:	f107 0320 	add.w	r3, r7, #32
 8003546:	2230      	movs	r2, #48	; 0x30
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f007 f8aa 	bl	800a6a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <SystemClock_Config+0xcc>)
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	4a27      	ldr	r2, [pc, #156]	; (8003608 <SystemClock_Config+0xcc>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356e:	6413      	str	r3, [r2, #64]	; 0x40
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <SystemClock_Config+0xcc>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800357c:	2300      	movs	r3, #0
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <SystemClock_Config+0xd0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a21      	ldr	r2, [pc, #132]	; (800360c <SystemClock_Config+0xd0>)
 8003586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <SystemClock_Config+0xd0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003598:	2302      	movs	r3, #2
 800359a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800359c:	2301      	movs	r3, #1
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035a0:	2310      	movs	r3, #16
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035a4:	2302      	movs	r3, #2
 80035a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80035ac:	2308      	movs	r3, #8
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80035b0:	23a8      	movs	r3, #168	; 0xa8
 80035b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035b4:	2302      	movs	r3, #2
 80035b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035b8:	2304      	movs	r3, #4
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035bc:	f107 0320 	add.w	r3, r7, #32
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 f895 	bl	80076f0 <HAL_RCC_OscConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035cc:	f000 f876 	bl	80036bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d0:	230f      	movs	r3, #15
 80035d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035d4:	2302      	movs	r3, #2
 80035d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80035e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	2105      	movs	r1, #5
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 faf6 	bl	8007be0 <HAL_RCC_ClockConfig>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80035fa:	f000 f85f 	bl	80036bc <Error_Handler>
  }
}
 80035fe:	bf00      	nop
 8003600:	3750      	adds	r7, #80	; 0x50
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000

08003610 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
	  timer_init();
 8003614:	f000 fa12 	bl	8003a3c <timer_init>
	  button_init();
 8003618:	f7fd fdd6 	bl	80011c8 <button_init>
	  lcd_init();
 800361c:	f7ff fbe6 	bl	8002dec <lcd_init>
	  touch_init();
 8003620:	f001 fe58 	bl	80052d4 <touch_init>
	  led7_init();
 8003624:	f7ff fe9e 	bl	8003364 <led7_init>

	  home_lcd();				//hien thi man hinh vua moi dau
 8003628:	f7fe fc78 	bl	8001f1c <home_lcd>
	  snake_init();				//khoi tao ran
 800362c:	f000 f84c 	bl	80036c8 <snake_init>

	  //ds3231_init();
	  //uart_init_esp();

	  strcpy(history[0].name, "abc");
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <system_init+0x50>)
 8003632:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <system_init+0x54>)
 8003634:	6810      	ldr	r0, [r2, #0]
 8003636:	6018      	str	r0, [r3, #0]
	  history[0].score = 1000;
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <system_init+0x50>)
 800363a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800363e:	815a      	strh	r2, [r3, #10]
	  strcpy(history[1].name, "def");
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <system_init+0x58>)
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <system_init+0x5c>)
 8003644:	6810      	ldr	r0, [r2, #0]
 8003646:	6018      	str	r0, [r3, #0]
	  history[1].score = 124;
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <system_init+0x50>)
 800364a:	227c      	movs	r2, #124	; 0x7c
 800364c:	82da      	strh	r2, [r3, #22]

	  setTimer3(50);
 800364e:	2032      	movs	r0, #50	; 0x32
 8003650:	f000 fa1e 	bl	8003a90 <setTimer3>
	  setTimer2(50);
 8003654:	2032      	movs	r0, #50	; 0x32
 8003656:	f000 f9ff 	bl	8003a58 <setTimer2>
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000508 	.word	0x20000508
 8003664:	0800c798 	.word	0x0800c798
 8003668:	20000514 	.word	0x20000514
 800366c:	0800c79c 	.word	0x0800c79c

08003670 <test_led>:
			break;
	}
}
uint8_t counter_led = 0;

void test_led(){
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	if (++counter_led % 20 == 0){
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <test_led+0x40>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	b2da      	uxtb	r2, r3
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <test_led+0x40>)
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <test_led+0x40>)
 8003682:	781a      	ldrb	r2, [r3, #0]
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <test_led+0x44>)
 8003686:	fba3 1302 	umull	r1, r3, r3, r2
 800368a:	0919      	lsrs	r1, r3, #4
 800368c:	460b      	mov	r3, r1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <test_led+0x3a>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800369c:	2110      	movs	r1, #16
 800369e:	4806      	ldr	r0, [pc, #24]	; (80036b8 <test_led+0x48>)
 80036a0:	f003 f84b 	bl	800673a <HAL_GPIO_TogglePin>
		counter_led = 0;
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <test_led+0x40>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
	}
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2000010e 	.word	0x2000010e
 80036b4:	cccccccd 	.word	0xcccccccd
 80036b8:	40021000 	.word	0x40021000

080036bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036c0:	b672      	cpsid	i
}
 80036c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036c4:	e7fe      	b.n	80036c4 <Error_Handler+0x8>
	...

080036c8 <snake_init>:
 *      Author: ADMIN
 */

#include "snake.h"

void snake_init(){
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
	snake[0].x = (POS_X_MAX - POS_X_MIN) / 2;
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <snake_init+0x64>)
 80036d0:	2277      	movs	r2, #119	; 0x77
 80036d2:	601a      	str	r2, [r3, #0]
	snake[0].y = (POS_Y_MAX - POS_Y_MIN) / 2;
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <snake_init+0x64>)
 80036d6:	2263      	movs	r2, #99	; 0x63
 80036d8:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 80036da:	2301      	movs	r3, #1
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	e00d      	b.n	80036fc <snake_init+0x34>
		snake[i].x = 0;
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <snake_init+0x64>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2100      	movs	r1, #0
 80036e6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <snake_init+0x64>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	2200      	movs	r2, #0
 80036f4:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3301      	adds	r3, #1
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b63      	cmp	r3, #99	; 0x63
 8003700:	ddee      	ble.n	80036e0 <snake_init+0x18>
	}
	length = 1;
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <snake_init+0x68>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
	current_score = 0;
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <snake_init+0x6c>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
	counter_time_score = 0;
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <snake_init+0x70>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
	counter_time = 60;
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <snake_init+0x74>)
 8003716:	223c      	movs	r2, #60	; 0x3c
 8003718:	601a      	str	r2, [r3, #0]
	tempFlag = 0;
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <snake_init+0x78>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	200001e8 	.word	0x200001e8
 8003730:	20000008 	.word	0x20000008
 8003734:	20000004 	.word	0x20000004
 8003738:	200000f8 	.word	0x200000f8
 800373c:	200000fc 	.word	0x200000fc
 8003740:	20000100 	.word	0x20000100

08003744 <is_collision_food>:

int is_collision_food(struct Point p){
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	463b      	mov	r3, r7
 800374c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	dd08      	ble.n	8003768 <is_collision_food+0x24>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2bee      	cmp	r3, #238	; 0xee
 800375a:	dc05      	bgt.n	8003768 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 800375c:	687b      	ldr	r3, [r7, #4]
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 800375e:	2b00      	cmp	r3, #0
 8003760:	dd02      	ble.n	8003768 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2bc6      	cmp	r3, #198	; 0xc6
 8003766:	dd01      	ble.n	800376c <is_collision_food+0x28>
		return 1;
 8003768:	2301      	movs	r3, #1
 800376a:	e01c      	b.n	80037a6 <is_collision_food+0x62>
	}
	for (int i = 0; i < length; i++){
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	e013      	b.n	800379a <is_collision_food+0x56>
		if (p.x == snake[i].x && p.y == snake[i].y)
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	490f      	ldr	r1, [pc, #60]	; (80037b4 <is_collision_food+0x70>)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800377c:	429a      	cmp	r2, r3
 800377e:	d109      	bne.n	8003794 <is_collision_food+0x50>
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	490c      	ldr	r1, [pc, #48]	; (80037b4 <is_collision_food+0x70>)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d101      	bne.n	8003794 <is_collision_food+0x50>
			return 1;
 8003790:	2301      	movs	r3, #1
 8003792:	e008      	b.n	80037a6 <is_collision_food+0x62>
	for (int i = 0; i < length; i++){
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <is_collision_food+0x74>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d3e6      	bcc.n	8003772 <is_collision_food+0x2e>
	}
	return 0;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	200001e8 	.word	0x200001e8
 80037b8:	20000008 	.word	0x20000008

080037bc <is_collision>:

int is_collision(){
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 80037c2:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <is_collision+0x74>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	dd0b      	ble.n	80037e2 <is_collision+0x26>
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <is_collision+0x74>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2bee      	cmp	r3, #238	; 0xee
 80037d0:	dc07      	bgt.n	80037e2 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <is_collision+0x74>)
 80037d4:	685b      	ldr	r3, [r3, #4]
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	dd03      	ble.n	80037e2 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <is_collision+0x74>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2bc6      	cmp	r3, #198	; 0xc6
 80037e0:	dd01      	ble.n	80037e6 <is_collision+0x2a>
		return 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e01e      	b.n	8003824 <is_collision+0x68>
	}
	for (int i = 1; i < length; i++){
 80037e6:	2301      	movs	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	e015      	b.n	8003818 <is_collision+0x5c>
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <is_collision+0x74>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	490f      	ldr	r1, [pc, #60]	; (8003830 <is_collision+0x74>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d10a      	bne.n	8003812 <is_collision+0x56>
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <is_collision+0x74>)
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	490b      	ldr	r1, [pc, #44]	; (8003830 <is_collision+0x74>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d101      	bne.n	8003812 <is_collision+0x56>
			return 1;
 800380e:	2301      	movs	r3, #1
 8003810:	e008      	b.n	8003824 <is_collision+0x68>
	for (int i = 1; i < length; i++){
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3301      	adds	r3, #1
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <is_collision+0x78>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3e4      	bcc.n	80037ec <is_collision+0x30>
	}
	return 0;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	200001e8 	.word	0x200001e8
 8003834:	20000008 	.word	0x20000008

08003838 <is_eat>:

int is_eat(){
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
	if (snake[0].x == food.x && snake[0].y == food.y) return 1;
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <is_eat+0x2c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <is_eat+0x30>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d107      	bne.n	8003858 <is_eat+0x20>
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <is_eat+0x2c>)
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <is_eat+0x30>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d101      	bne.n	8003858 <is_eat+0x20>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <is_eat+0x22>
	return 0;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	200001e8 	.word	0x200001e8
 8003868:	2000000c 	.word	0x2000000c

0800386c <get_rand>:

int get_rand(int max){
 800386c:	b5b0      	push	{r4, r5, r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	return 0 + (int)(rand()*(max - 0 + 1.0)/(1.0 + RAND_MAX));
 8003874:	f006 ff1e 	bl	800a6b4 <rand>
 8003878:	4603      	mov	r3, r0
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fe4a 	bl	8000514 <__aeabi_i2d>
 8003880:	4604      	mov	r4, r0
 8003882:	460d      	mov	r5, r1
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7fc fe45 	bl	8000514 <__aeabi_i2d>
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <get_rand+0x5c>)
 8003890:	f7fc fcf4 	bl	800027c <__adddf3>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4620      	mov	r0, r4
 800389a:	4629      	mov	r1, r5
 800389c:	f7fc fea4 	bl	80005e8 <__aeabi_dmul>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <get_rand+0x60>)
 80038ae:	f7fc ffc5 	bl	800083c <__aeabi_ddiv>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	f7fd f945 	bl	8000b48 <__aeabi_d2iz>
 80038be:	4603      	mov	r3, r0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bdb0      	pop	{r4, r5, r7, pc}
 80038c8:	3ff00000 	.word	0x3ff00000
 80038cc:	41e00000 	.word	0x41e00000

080038d0 <rand_food>:

void rand_food(){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
	struct Point p;
	p.x = get_rand(POS_X_MAX);
 80038d6:	20ef      	movs	r0, #239	; 0xef
 80038d8:	f7ff ffc8 	bl	800386c <get_rand>
 80038dc:	4603      	mov	r3, r0
 80038de:	603b      	str	r3, [r7, #0]
	p.y = get_rand(POS_Y_MAX);
 80038e0:	20c7      	movs	r0, #199	; 0xc7
 80038e2:	f7ff ffc3 	bl	800386c <get_rand>
 80038e6:	4603      	mov	r3, r0
 80038e8:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 80038ea:	e009      	b.n	8003900 <rand_food+0x30>
		p.x = get_rand(POS_X_MAX);
 80038ec:	20ef      	movs	r0, #239	; 0xef
 80038ee:	f7ff ffbd 	bl	800386c <get_rand>
 80038f2:	4603      	mov	r3, r0
 80038f4:	603b      	str	r3, [r7, #0]
		p.y = get_rand(POS_Y_MAX);
 80038f6:	20c7      	movs	r0, #199	; 0xc7
 80038f8:	f7ff ffb8 	bl	800386c <get_rand>
 80038fc:	4603      	mov	r3, r0
 80038fe:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8003900:	463b      	mov	r3, r7
 8003902:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003906:	f7ff ff1d 	bl	8003744 <is_collision_food>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d0ed      	beq.n	80038ec <rand_food+0x1c>
	}
	food = p;
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <rand_food+0x60>)
 8003912:	461a      	mov	r2, r3
 8003914:	463b      	mov	r3, r7
 8003916:	e893 0003 	ldmia.w	r3, {r0, r1}
 800391a:	e882 0003 	stmia.w	r2, {r0, r1}
	point_food_lcd(food);
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <rand_food+0x60>)
 8003920:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003924:	f7fe fe7b 	bl	800261e <point_food_lcd>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	2000000c 	.word	0x2000000c

08003934 <move_snake>:

void move_snake(){
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
	point_clr(snake[length - 1]);
 800393a:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <move_snake+0xb4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3b01      	subs	r3, #1
 8003940:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <move_snake+0xb8>)
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	e893 0003 	ldmia.w	r3, {r0, r1}
 800394a:	f7fe fe7b 	bl	8002644 <point_clr>
	for (int i = length - 1; i > 0; i--){
 800394e:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <move_snake+0xb4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3b01      	subs	r3, #1
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	e016      	b.n	8003986 <move_snake+0x52>
		snake[i].x = snake[i-1].x;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	4a23      	ldr	r2, [pc, #140]	; (80039ec <move_snake+0xb8>)
 800395e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003962:	4922      	ldr	r1, [pc, #136]	; (80039ec <move_snake+0xb8>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[i].y = snake[i-1].y;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3b01      	subs	r3, #1
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <move_snake+0xb8>)
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	491d      	ldr	r1, [pc, #116]	; (80039ec <move_snake+0xb8>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	440b      	add	r3, r1
 800397e:	605a      	str	r2, [r3, #4]
	for (int i = length - 1; i > 0; i--){
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	dce5      	bgt.n	8003958 <move_snake+0x24>
	}
	switch (move) {
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <move_snake+0xbc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3b01      	subs	r3, #1
 8003992:	2b03      	cmp	r3, #3
 8003994:	d822      	bhi.n	80039dc <move_snake+0xa8>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <move_snake+0x68>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039b9 	.word	0x080039b9
 80039a4:	080039c5 	.word	0x080039c5
 80039a8:	080039d1 	.word	0x080039d1
		case RIGHT:
			snake[0].x += 1;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <move_snake+0xb8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <move_snake+0xb8>)
 80039b4:	6013      	str	r3, [r2, #0]
			break;
 80039b6:	e012      	b.n	80039de <move_snake+0xaa>
		case LEFT:
			snake[0].x -= 1;
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <move_snake+0xb8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3b01      	subs	r3, #1
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <move_snake+0xb8>)
 80039c0:	6013      	str	r3, [r2, #0]
			break;
 80039c2:	e00c      	b.n	80039de <move_snake+0xaa>
		case UP:
			snake[0].y += 1;
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <move_snake+0xb8>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4a08      	ldr	r2, [pc, #32]	; (80039ec <move_snake+0xb8>)
 80039cc:	6053      	str	r3, [r2, #4]
			break;
 80039ce:	e006      	b.n	80039de <move_snake+0xaa>
		case DOWN:
			snake[0].y -= 1;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <move_snake+0xb8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <move_snake+0xb8>)
 80039d8:	6053      	str	r3, [r2, #4]
			break;
 80039da:	e000      	b.n	80039de <move_snake+0xaa>
		default:
			break;
 80039dc:	bf00      	nop
	}
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000008 	.word	0x20000008
 80039ec:	200001e8 	.word	0x200001e8
 80039f0:	200000f4 	.word	0x200000f4

080039f4 <reDraw_snake>:

void reDraw_snake(){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
	point_head_lcd(snake[0]);
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <reDraw_snake+0x40>)
 80039fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a00:	f7fe fda0 	bl	8002544 <point_head_lcd>
	for (int i = 1; i < length; i++){
 8003a04:	2301      	movs	r3, #1
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	e00a      	b.n	8003a20 <reDraw_snake+0x2c>
		point_snake_lcd(snake[i]);
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <reDraw_snake+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a16:	f7fe fdb0 	bl	800257a <point_snake_lcd>
	for (int i = 1; i < length; i++){
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <reDraw_snake+0x44>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3ef      	bcc.n	8003a0a <reDraw_snake+0x16>
	}
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	200001e8 	.word	0x200001e8
 8003a38:	20000008 	.word	0x20000008

08003a3c <timer_init>:

uint16_t flag_timer3 = 0;
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;

void timer_init(){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003a40:	4803      	ldr	r0, [pc, #12]	; (8003a50 <timer_init+0x14>)
 8003a42:	f004 fe55 	bl	80086f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8003a46:	4803      	ldr	r0, [pc, #12]	; (8003a54 <timer_init+0x18>)
 8003a48:	f004 fdea 	bl	8008620 <HAL_TIM_Base_Start>
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	2000074c 	.word	0x2000074c
 8003a54:	20000704 	.word	0x20000704

08003a58 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <setTimer2+0x2c>)
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <setTimer2+0x2c>)
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <setTimer2+0x30>)
 8003a6e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <setTimer2+0x34>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	801a      	strh	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000114 	.word	0x20000114
 8003a88:	20000112 	.word	0x20000112
 8003a8c:	20000110 	.word	0x20000110

08003a90 <setTimer3>:

void setTimer3(uint16_t duration){
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8003a9a:	4a08      	ldr	r2, [pc, #32]	; (8003abc <setTimer3+0x2c>)
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <setTimer3+0x2c>)
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <setTimer3+0x30>)
 8003aa6:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <setTimer3+0x34>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	801a      	strh	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	2000011a 	.word	0x2000011a
 8003ac0:	20000118 	.word	0x20000118
 8003ac4:	20000116 	.word	0x20000116

08003ac8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d12b      	bne.n	8003b32 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d010      	beq.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003aec:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b02:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b16:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b2c:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003b2e:	f7ff fc25 	bl	800337c <led7_Scan>
	}
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000112 	.word	0x20000112
 8003b40:	20000110 	.word	0x20000110
 8003b44:	20000114 	.word	0x20000114
 8003b48:	20000118 	.word	0x20000118
 8003b4c:	20000116 	.word	0x20000116
 8003b50:	2000011a 	.word	0x2000011a

08003b54 <delay_us>:

void delay_us (uint16_t us)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <delay_us+0x30>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8003b66:	bf00      	nop
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <delay_us+0x30>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d3f9      	bcc.n	8003b68 <delay_us+0x14>
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000704 	.word	0x20000704

08003b88 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <MX_SPI1_Init+0x64>)
 8003b8e:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <MX_SPI1_Init+0x68>)
 8003b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b92:	4b16      	ldr	r3, [pc, #88]	; (8003bec <MX_SPI1_Init+0x64>)
 8003b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <MX_SPI1_Init+0x64>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <MX_SPI1_Init+0x64>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <MX_SPI1_Init+0x64>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <MX_SPI1_Init+0x64>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <MX_SPI1_Init+0x64>)
 8003bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <MX_SPI1_Init+0x64>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <MX_SPI1_Init+0x64>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <MX_SPI1_Init+0x64>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <MX_SPI1_Init+0x64>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <MX_SPI1_Init+0x64>)
 8003bd4:	220a      	movs	r2, #10
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bd8:	4804      	ldr	r0, [pc, #16]	; (8003bec <MX_SPI1_Init+0x64>)
 8003bda:	f004 f9fd 	bl	8007fd8 <HAL_SPI_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003be4:	f7ff fd6a 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000664 	.word	0x20000664
 8003bf0:	40013000 	.word	0x40013000

08003bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_MspInit+0x4c>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4a0f      	ldr	r2, [pc, #60]	; (8003c40 <HAL_MspInit+0x4c>)
 8003c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c08:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <HAL_MspInit+0x4c>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	607b      	str	r3, [r7, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_MspInit+0x4c>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <HAL_MspInit+0x4c>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_MspInit+0x4c>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800

08003c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3c      	ldr	r2, [pc, #240]	; (8003d54 <HAL_ADC_MspInit+0x110>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d171      	bne.n	8003d4a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	4a3a      	ldr	r2, [pc, #232]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c74:	6453      	str	r3, [r2, #68]	; 0x44
 8003c76:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a33      	ldr	r2, [pc, #204]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a2c      	ldr	r2, [pc, #176]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003ca8:	f043 0302 	orr.w	r3, r3, #2
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <HAL_ADC_MspInit+0x114>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003cba:	2307      	movs	r3, #7
 8003cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4823      	ldr	r0, [pc, #140]	; (8003d5c <HAL_ADC_MspInit+0x118>)
 8003cce:	f002 fb67 	bl	80063a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cde:	f107 0314 	add.w	r3, r7, #20
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	481e      	ldr	r0, [pc, #120]	; (8003d60 <HAL_ADC_MspInit+0x11c>)
 8003ce6:	f002 fb5b 	bl	80063a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003cea:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_ADC_MspInit+0x124>)
 8003cee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d28:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d2e:	480d      	ldr	r0, [pc, #52]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d30:	f001 ffba 	bl	8005ca8 <HAL_DMA_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003d3a:	f7ff fcbf 	bl	80036bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38
 8003d44:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <HAL_ADC_MspInit+0x120>)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d4a:	bf00      	nop
 8003d4c:	3728      	adds	r7, #40	; 0x28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40012000 	.word	0x40012000
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40020800 	.word	0x40020800
 8003d60:	40020400 	.word	0x40020400
 8003d64:	20000604 	.word	0x20000604
 8003d68:	40026410 	.word	0x40026410

08003d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	f107 0314 	add.w	r3, r7, #20
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <HAL_I2C_MspInit+0x84>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d12b      	bne.n	8003de6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_I2C_MspInit+0x88>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <HAL_I2C_MspInit+0x88>)
 8003d98:	f043 0302 	orr.w	r3, r3, #2
 8003d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <HAL_I2C_MspInit+0x88>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003daa:	23c0      	movs	r3, #192	; 0xc0
 8003dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dae:	2312      	movs	r3, #18
 8003db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db6:	2303      	movs	r3, #3
 8003db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dba:	2304      	movs	r3, #4
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	480c      	ldr	r0, [pc, #48]	; (8003df8 <HAL_I2C_MspInit+0x8c>)
 8003dc6:	f002 faeb 	bl	80063a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_I2C_MspInit+0x88>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <HAL_I2C_MspInit+0x88>)
 8003dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_I2C_MspInit+0x88>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003de6:	bf00      	nop
 8003de8:	3728      	adds	r7, #40	; 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40005400 	.word	0x40005400
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40020400 	.word	0x40020400

08003dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_SPI_MspInit+0x84>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d12b      	bne.n	8003e76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <HAL_SPI_MspInit+0x88>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_SPI_MspInit+0x88>)
 8003e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_SPI_MspInit+0x88>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <HAL_SPI_MspInit+0x88>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <HAL_SPI_MspInit+0x88>)
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <HAL_SPI_MspInit+0x88>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003e56:	2338      	movs	r3, #56	; 0x38
 8003e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e62:	2303      	movs	r3, #3
 8003e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e66:	2305      	movs	r3, #5
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4805      	ldr	r0, [pc, #20]	; (8003e88 <HAL_SPI_MspInit+0x8c>)
 8003e72:	f002 fa95 	bl	80063a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e76:	bf00      	nop
 8003e78:	3728      	adds	r7, #40	; 0x28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40013000 	.word	0x40013000
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020400 	.word	0x40020400

08003e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_TIM_Base_MspInit+0x98>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	4a20      	ldr	r2, [pc, #128]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6453      	str	r3, [r2, #68]	; 0x44
 8003eae:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003eba:	e02e      	b.n	8003f1a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d116      	bne.n	8003ef4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	201c      	movs	r0, #28
 8003ee8:	f001 fea7 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003eec:	201c      	movs	r0, #28
 8003eee:	f001 fec0 	bl	8005c72 <HAL_NVIC_EnableIRQ>
}
 8003ef2:	e012      	b.n	8003f1a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <HAL_TIM_Base_MspInit+0xa0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10d      	bne.n	8003f1a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_TIM_Base_MspInit+0x9c>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
}
 8003f1a:	bf00      	nop
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40001c00 	.word	0x40001c00

08003f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_TIM_MspPostInit+0x68>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d11e      	bne.n	8003f90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_TIM_MspPostInit+0x6c>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <HAL_TIM_MspPostInit+0x6c>)
 8003f5c:	f043 0320 	orr.w	r3, r3, #32
 8003f60:	6313      	str	r3, [r2, #48]	; 0x30
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_TIM_MspPostInit+0x6c>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003f80:	2309      	movs	r3, #9
 8003f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f84:	f107 030c 	add.w	r3, r7, #12
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <HAL_TIM_MspPostInit+0x70>)
 8003f8c:	f002 fa08 	bl	80063a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003f90:	bf00      	nop
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40001c00 	.word	0x40001c00
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40021400 	.word	0x40021400

08003fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 031c 	add.w	r3, r7, #28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <HAL_UART_MspInit+0x108>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d135      	bne.n	8004032 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8003fd0:	f043 0310 	orr.w	r3, r3, #16
 8003fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd6:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a31      	ldr	r2, [pc, #196]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400c:	2303      	movs	r3, #3
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004010:	2307      	movs	r3, #7
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004014:	f107 031c 	add.w	r3, r7, #28
 8004018:	4619      	mov	r1, r3
 800401a:	4826      	ldr	r0, [pc, #152]	; (80040b4 <HAL_UART_MspInit+0x110>)
 800401c:	f002 f9c0 	bl	80063a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2100      	movs	r1, #0
 8004024:	2025      	movs	r0, #37	; 0x25
 8004026:	f001 fe08 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800402a:	2025      	movs	r0, #37	; 0x25
 800402c:	f001 fe21 	bl	8005c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004030:	e038      	b.n	80040a4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <HAL_UART_MspInit+0x114>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d133      	bne.n	80040a4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404a:	6413      	str	r3, [r2, #64]	; 0x40
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	6313      	str	r3, [r2, #48]	; 0x30
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_UART_MspInit+0x10c>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004074:	230c      	movs	r3, #12
 8004076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	2302      	movs	r3, #2
 800407a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	2300      	movs	r3, #0
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004080:	2303      	movs	r3, #3
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004084:	2307      	movs	r3, #7
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004088:	f107 031c 	add.w	r3, r7, #28
 800408c:	4619      	mov	r1, r3
 800408e:	4809      	ldr	r0, [pc, #36]	; (80040b4 <HAL_UART_MspInit+0x110>)
 8004090:	f002 f986 	bl	80063a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004094:	2200      	movs	r2, #0
 8004096:	2100      	movs	r1, #0
 8004098:	2026      	movs	r0, #38	; 0x26
 800409a:	f001 fdce 	bl	8005c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800409e:	2026      	movs	r0, #38	; 0x26
 80040a0:	f001 fde7 	bl	8005c72 <HAL_NVIC_EnableIRQ>
}
 80040a4:	bf00      	nop
 80040a6:	3730      	adds	r7, #48	; 0x30
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020000 	.word	0x40020000
 80040b8:	40004400 	.word	0x40004400

080040bc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	60da      	str	r2, [r3, #12]
 80040ce:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80040d0:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <HAL_FSMC_MspInit+0x88>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d131      	bne.n	800413c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <HAL_FSMC_MspInit+0x88>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_FSMC_MspInit+0x8c>)
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	4a18      	ldr	r2, [pc, #96]	; (8004148 <HAL_FSMC_MspInit+0x8c>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6393      	str	r3, [r2, #56]	; 0x38
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <HAL_FSMC_MspInit+0x8c>)
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80040fa:	f64f 7388 	movw	r3, #65416	; 0xff88
 80040fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004100:	2302      	movs	r3, #2
 8004102:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004108:	2303      	movs	r3, #3
 800410a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800410c:	230c      	movs	r3, #12
 800410e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	4619      	mov	r1, r3
 8004114:	480d      	ldr	r0, [pc, #52]	; (800414c <HAL_FSMC_MspInit+0x90>)
 8004116:	f002 f943 	bl	80063a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800411a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800411e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004120:	2302      	movs	r3, #2
 8004122:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004128:	2303      	movs	r3, #3
 800412a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800412c:	230c      	movs	r3, #12
 800412e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4806      	ldr	r0, [pc, #24]	; (8004150 <HAL_FSMC_MspInit+0x94>)
 8004136:	f002 f933 	bl	80063a0 <HAL_GPIO_Init>
 800413a:	e000      	b.n	800413e <HAL_FSMC_MspInit+0x82>
    return;
 800413c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	2000011c 	.word	0x2000011c
 8004148:	40023800 	.word	0x40023800
 800414c:	40021000 	.word	0x40021000
 8004150:	40020c00 	.word	0x40020c00

08004154 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800415c:	f7ff ffae 	bl	80040bc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800416c:	e7fe      	b.n	800416c <NMI_Handler+0x4>

0800416e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004172:	e7fe      	b.n	8004172 <HardFault_Handler+0x4>

08004174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004178:	e7fe      	b.n	8004178 <MemManage_Handler+0x4>

0800417a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800417e:	e7fe      	b.n	800417e <BusFault_Handler+0x4>

08004180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004184:	e7fe      	b.n	8004184 <UsageFault_Handler+0x4>

08004186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041a2:	b480      	push	{r7}
 80041a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041b4:	f001 f9c0 	bl	8005538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}

080041bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041c0:	4802      	ldr	r0, [pc, #8]	; (80041cc <TIM2_IRQHandler+0x10>)
 80041c2:	f004 fb5e 	bl	8008882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	2000074c 	.word	0x2000074c

080041d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041d4:	4802      	ldr	r0, [pc, #8]	; (80041e0 <USART1_IRQHandler+0x10>)
 80041d6:	f005 fa99 	bl	800970c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000794 	.word	0x20000794

080041e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041e8:	4802      	ldr	r0, [pc, #8]	; (80041f4 <USART2_IRQHandler+0x10>)
 80041ea:	f005 fa8f 	bl	800970c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200007d8 	.word	0x200007d8

080041f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <DMA2_Stream0_IRQHandler+0x10>)
 80041fe:	f001 fe93 	bl	8005f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000604 	.word	0x20000604

0800420c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
	return 1;
 8004210:	2301      	movs	r3, #1
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <_kill>:

int _kill(int pid, int sig)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004226:	f006 f9f9 	bl	800a61c <__errno>
 800422a:	4603      	mov	r3, r0
 800422c:	2216      	movs	r2, #22
 800422e:	601a      	str	r2, [r3, #0]
	return -1;
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_exit>:

void _exit (int status)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004244:	f04f 31ff 	mov.w	r1, #4294967295
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ffe7 	bl	800421c <_kill>
	while (1) {}		/* Make sure we hang here */
 800424e:	e7fe      	b.n	800424e <_exit+0x12>

08004250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e00a      	b.n	8004278 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004262:	f3af 8000 	nop.w
 8004266:	4601      	mov	r1, r0
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	60ba      	str	r2, [r7, #8]
 800426e:	b2ca      	uxtb	r2, r1
 8004270:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3301      	adds	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	dbf0      	blt.n	8004262 <_read+0x12>
	}

return len;
 8004280:	687b      	ldr	r3, [r7, #4]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b086      	sub	sp, #24
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	e009      	b.n	80042b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	60ba      	str	r2, [r7, #8]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	3301      	adds	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	dbf1      	blt.n	800429c <_write+0x12>
	}
	return len;
 80042b8:	687b      	ldr	r3, [r7, #4]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_close>:

int _close(int file)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
	return -1;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ea:	605a      	str	r2, [r3, #4]
	return 0;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <_isatty>:

int _isatty(int file)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
	return 1;
 8004302:	2301      	movs	r3, #1
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
	return 0;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <_sbrk+0x5c>)
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <_sbrk+0x60>)
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <_sbrk+0x64>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <_sbrk+0x64>)
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <_sbrk+0x68>)
 800434c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <_sbrk+0x64>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	429a      	cmp	r2, r3
 800435a:	d207      	bcs.n	800436c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800435c:	f006 f95e 	bl	800a61c <__errno>
 8004360:	4603      	mov	r3, r0
 8004362:	220c      	movs	r2, #12
 8004364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	e009      	b.n	8004380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <_sbrk+0x64>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <_sbrk+0x64>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <_sbrk+0x64>)
 800437c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20020000 	.word	0x20020000
 800438c:	00000400 	.word	0x00000400
 8004390:	20000120 	.word	0x20000120
 8004394:	20000830 	.word	0x20000830

08004398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <SystemInit+0x20>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <SystemInit+0x20>)
 80043a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d0:	463b      	mov	r3, r7
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <MX_TIM1_Init+0x98>)
 80043da:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <MX_TIM1_Init+0x9c>)
 80043dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <MX_TIM1_Init+0x98>)
 80043e0:	2253      	movs	r2, #83	; 0x53
 80043e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <MX_TIM1_Init+0x98>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <MX_TIM1_Init+0x98>)
 80043ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <MX_TIM1_Init+0x98>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043f8:	4b16      	ldr	r3, [pc, #88]	; (8004454 <MX_TIM1_Init+0x98>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <MX_TIM1_Init+0x98>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004404:	4813      	ldr	r0, [pc, #76]	; (8004454 <MX_TIM1_Init+0x98>)
 8004406:	f004 f8bb 	bl	8008580 <HAL_TIM_Base_Init>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004410:	f7ff f954 	bl	80036bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800441a:	f107 0308 	add.w	r3, r7, #8
 800441e:	4619      	mov	r1, r3
 8004420:	480c      	ldr	r0, [pc, #48]	; (8004454 <MX_TIM1_Init+0x98>)
 8004422:	f004 fbf9 	bl	8008c18 <HAL_TIM_ConfigClockSource>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800442c:	f7ff f946 	bl	80036bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004430:	2300      	movs	r3, #0
 8004432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004434:	2300      	movs	r3, #0
 8004436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004438:	463b      	mov	r3, r7
 800443a:	4619      	mov	r1, r3
 800443c:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_TIM1_Init+0x98>)
 800443e:	f004 ffc5 	bl	80093cc <HAL_TIMEx_MasterConfigSynchronization>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004448:	f7ff f938 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800444c:	bf00      	nop
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000704 	.word	0x20000704
 8004458:	40010000 	.word	0x40010000

0800445c <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004470:	463b      	mov	r3, r7
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <MX_TIM2_Init+0x94>)
 800447a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800447e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <MX_TIM2_Init+0x94>)
 8004482:	f240 3247 	movw	r2, #839	; 0x347
 8004486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <MX_TIM2_Init+0x94>)
 800448a:	2200      	movs	r2, #0
 800448c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800448e:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <MX_TIM2_Init+0x94>)
 8004490:	2263      	movs	r2, #99	; 0x63
 8004492:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <MX_TIM2_Init+0x94>)
 8004496:	2200      	movs	r2, #0
 8004498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <MX_TIM2_Init+0x94>)
 800449c:	2200      	movs	r2, #0
 800449e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044a0:	4813      	ldr	r0, [pc, #76]	; (80044f0 <MX_TIM2_Init+0x94>)
 80044a2:	f004 f86d 	bl	8008580 <HAL_TIM_Base_Init>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80044ac:	f7ff f906 	bl	80036bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4619      	mov	r1, r3
 80044bc:	480c      	ldr	r0, [pc, #48]	; (80044f0 <MX_TIM2_Init+0x94>)
 80044be:	f004 fbab 	bl	8008c18 <HAL_TIM_ConfigClockSource>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80044c8:	f7ff f8f8 	bl	80036bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044cc:	2300      	movs	r3, #0
 80044ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044d4:	463b      	mov	r3, r7
 80044d6:	4619      	mov	r1, r3
 80044d8:	4805      	ldr	r0, [pc, #20]	; (80044f0 <MX_TIM2_Init+0x94>)
 80044da:	f004 ff77 	bl	80093cc <HAL_TIMEx_MasterConfigSynchronization>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80044e4:	f7ff f8ea 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	2000074c 	.word	0x2000074c

080044f4 <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
 8004508:	615a      	str	r2, [r3, #20]
 800450a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <MX_TIM13_Init+0x94>)
 800450e:	4a1f      	ldr	r2, [pc, #124]	; (800458c <MX_TIM13_Init+0x98>)
 8004510:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8004512:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <MX_TIM13_Init+0x94>)
 8004514:	f240 3247 	movw	r2, #839	; 0x347
 8004518:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <MX_TIM13_Init+0x94>)
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <MX_TIM13_Init+0x94>)
 8004522:	2263      	movs	r2, #99	; 0x63
 8004524:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <MX_TIM13_Init+0x94>)
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <MX_TIM13_Init+0x94>)
 800452e:	2200      	movs	r2, #0
 8004530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004532:	4815      	ldr	r0, [pc, #84]	; (8004588 <MX_TIM13_Init+0x94>)
 8004534:	f004 f824 	bl	8008580 <HAL_TIM_Base_Init>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800453e:	f7ff f8bd 	bl	80036bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004542:	4811      	ldr	r0, [pc, #68]	; (8004588 <MX_TIM13_Init+0x94>)
 8004544:	f004 f944 	bl	80087d0 <HAL_TIM_PWM_Init>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800454e:	f7ff f8b5 	bl	80036bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004552:	2360      	movs	r3, #96	; 0x60
 8004554:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	2200      	movs	r2, #0
 8004566:	4619      	mov	r1, r3
 8004568:	4807      	ldr	r0, [pc, #28]	; (8004588 <MX_TIM13_Init+0x94>)
 800456a:	f004 fa93 	bl	8008a94 <HAL_TIM_PWM_ConfigChannel>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8004574:	f7ff f8a2 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004578:	4803      	ldr	r0, [pc, #12]	; (8004588 <MX_TIM13_Init+0x94>)
 800457a:	f7ff fcd9 	bl	8003f30 <HAL_TIM_MspPostInit>

}
 800457e:	bf00      	nop
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	200006bc 	.word	0x200006bc
 800458c:	40001c00 	.word	0x40001c00

08004590 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]
 80045a2:	e025      	b.n	80045f0 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 80045a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	da06      	bge.n	80045ba <TP_Write_Byte+0x2a>
 80045ac:	2201      	movs	r2, #1
 80045ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045b2:	4813      	ldr	r0, [pc, #76]	; (8004600 <TP_Write_Byte+0x70>)
 80045b4:	f002 f8a8 	bl	8006708 <HAL_GPIO_WritePin>
 80045b8:	e005      	b.n	80045c6 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045c0:	480f      	ldr	r0, [pc, #60]	; (8004600 <TP_Write_Byte+0x70>)
 80045c2:	f002 f8a1 	bl	8006708 <HAL_GPIO_WritePin>
		num<<=1;
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80045cc:	2200      	movs	r2, #0
 80045ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045d2:	480c      	ldr	r0, [pc, #48]	; (8004604 <TP_Write_Byte+0x74>)
 80045d4:	f002 f898 	bl	8006708 <HAL_GPIO_WritePin>
		delay_us(1);
 80045d8:	2001      	movs	r0, #1
 80045da:	f7ff fabb 	bl	8003b54 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80045de:	2201      	movs	r2, #1
 80045e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045e4:	4807      	ldr	r0, [pc, #28]	; (8004604 <TP_Write_Byte+0x74>)
 80045e6:	f002 f88f 	bl	8006708 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	3301      	adds	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b07      	cmp	r3, #7
 80045f4:	d9d6      	bls.n	80045a4 <TP_Write_Byte+0x14>
	}
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40020800 	.word	0x40020800
 8004604:	40021800 	.word	0x40021800

08004608 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8004616:	2300      	movs	r3, #0
 8004618:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800461a:	2200      	movs	r2, #0
 800461c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004620:	482f      	ldr	r0, [pc, #188]	; (80046e0 <TP_Read_AD+0xd8>)
 8004622:	f002 f871 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800462c:	482d      	ldr	r0, [pc, #180]	; (80046e4 <TP_Read_AD+0xdc>)
 800462e:	f002 f86b 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	482a      	ldr	r0, [pc, #168]	; (80046e0 <TP_Read_AD+0xd8>)
 8004638:	f002 f866 	bl	8006708 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ffa6 	bl	8004590 <TP_Write_Byte>
	delay_us(6);
 8004644:	2006      	movs	r0, #6
 8004646:	f7ff fa85 	bl	8003b54 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800464a:	2200      	movs	r2, #0
 800464c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004650:	4823      	ldr	r0, [pc, #140]	; (80046e0 <TP_Read_AD+0xd8>)
 8004652:	f002 f859 	bl	8006708 <HAL_GPIO_WritePin>
	delay_us(1);
 8004656:	2001      	movs	r0, #1
 8004658:	f7ff fa7c 	bl	8003b54 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800465c:	2201      	movs	r2, #1
 800465e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004662:	481f      	ldr	r0, [pc, #124]	; (80046e0 <TP_Read_AD+0xd8>)
 8004664:	f002 f850 	bl	8006708 <HAL_GPIO_WritePin>
	delay_us(1);
 8004668:	2001      	movs	r0, #1
 800466a:	f7ff fa73 	bl	8003b54 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800466e:	2200      	movs	r2, #0
 8004670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004674:	481a      	ldr	r0, [pc, #104]	; (80046e0 <TP_Read_AD+0xd8>)
 8004676:	f002 f847 	bl	8006708 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e01f      	b.n	80046c0 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8004680:	89bb      	ldrh	r3, [r7, #12]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800468c:	4814      	ldr	r0, [pc, #80]	; (80046e0 <TP_Read_AD+0xd8>)
 800468e:	f002 f83b 	bl	8006708 <HAL_GPIO_WritePin>
		delay_us(1);
 8004692:	2001      	movs	r0, #1
 8004694:	f7ff fa5e 	bl	8003b54 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8004698:	2201      	movs	r2, #1
 800469a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800469e:	4810      	ldr	r0, [pc, #64]	; (80046e0 <TP_Read_AD+0xd8>)
 80046a0:	f002 f832 	bl	8006708 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 80046a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046a8:	480e      	ldr	r0, [pc, #56]	; (80046e4 <TP_Read_AD+0xdc>)
 80046aa:	f002 f815 	bl	80066d8 <HAL_GPIO_ReadPin>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <TP_Read_AD+0xb2>
 80046b4:	89bb      	ldrh	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	3301      	adds	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b0f      	cmp	r3, #15
 80046c4:	d9dc      	bls.n	8004680 <TP_Read_AD+0x78>
	}
	Num>>=4;
 80046c6:	89bb      	ldrh	r3, [r7, #12]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 80046cc:	2201      	movs	r2, #1
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	4803      	ldr	r0, [pc, #12]	; (80046e0 <TP_Read_AD+0xd8>)
 80046d2:	f002 f819 	bl	8006708 <HAL_GPIO_WritePin>
	return(Num);
 80046d6:	89bb      	ldrh	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021800 	.word	0x40021800
 80046e4:	40020800 	.word	0x40020800

080046e8 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 80046f6:	2300      	movs	r3, #0
 80046f8:	83fb      	strh	r3, [r7, #30]
 80046fa:	e00f      	b.n	800471c <TP_Read_XOY+0x34>
 80046fc:	8bfc      	ldrh	r4, [r7, #30]
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff81 	bl	8004608 <TP_Read_AD>
 8004706:	4603      	mov	r3, r0
 8004708:	461a      	mov	r2, r3
 800470a:	0063      	lsls	r3, r4, #1
 800470c:	f107 0120 	add.w	r1, r7, #32
 8004710:	440b      	add	r3, r1
 8004712:	f823 2c14 	strh.w	r2, [r3, #-20]
 8004716:	8bfb      	ldrh	r3, [r7, #30]
 8004718:	3301      	adds	r3, #1
 800471a:	83fb      	strh	r3, [r7, #30]
 800471c:	8bfb      	ldrh	r3, [r7, #30]
 800471e:	2b04      	cmp	r3, #4
 8004720:	d9ec      	bls.n	80046fc <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8004722:	2300      	movs	r3, #0
 8004724:	83fb      	strh	r3, [r7, #30]
 8004726:	e03b      	b.n	80047a0 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8004728:	8bfb      	ldrh	r3, [r7, #30]
 800472a:	3301      	adds	r3, #1
 800472c:	83bb      	strh	r3, [r7, #28]
 800472e:	e031      	b.n	8004794 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8004730:	8bfb      	ldrh	r3, [r7, #30]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	f107 0220 	add.w	r2, r7, #32
 8004738:	4413      	add	r3, r2
 800473a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800473e:	8bbb      	ldrh	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	f107 0120 	add.w	r1, r7, #32
 8004746:	440b      	add	r3, r1
 8004748:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800474c:	429a      	cmp	r2, r3
 800474e:	d91e      	bls.n	800478e <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8004750:	8bfb      	ldrh	r3, [r7, #30]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	f107 0220 	add.w	r2, r7, #32
 8004758:	4413      	add	r3, r2
 800475a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800475e:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8004760:	8bbb      	ldrh	r3, [r7, #28]
 8004762:	8bfa      	ldrh	r2, [r7, #30]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	f107 0120 	add.w	r1, r7, #32
 800476a:	440b      	add	r3, r1
 800476c:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8004770:	0053      	lsls	r3, r2, #1
 8004772:	f107 0220 	add.w	r2, r7, #32
 8004776:	4413      	add	r3, r2
 8004778:	460a      	mov	r2, r1
 800477a:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 800477e:	8bbb      	ldrh	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	f107 0220 	add.w	r2, r7, #32
 8004786:	4413      	add	r3, r2
 8004788:	8b3a      	ldrh	r2, [r7, #24]
 800478a:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 800478e:	8bbb      	ldrh	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	83bb      	strh	r3, [r7, #28]
 8004794:	8bbb      	ldrh	r3, [r7, #28]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d9ca      	bls.n	8004730 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 800479a:	8bfb      	ldrh	r3, [r7, #30]
 800479c:	3301      	adds	r3, #1
 800479e:	83fb      	strh	r3, [r7, #30]
 80047a0:	8bfb      	ldrh	r3, [r7, #30]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d9c0      	bls.n	8004728 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 80047aa:	2301      	movs	r3, #1
 80047ac:	83fb      	strh	r3, [r7, #30]
 80047ae:	e00c      	b.n	80047ca <TP_Read_XOY+0xe2>
 80047b0:	8bfb      	ldrh	r3, [r7, #30]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	f107 0220 	add.w	r2, r7, #32
 80047b8:	4413      	add	r3, r2
 80047ba:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80047be:	8b7b      	ldrh	r3, [r7, #26]
 80047c0:	4413      	add	r3, r2
 80047c2:	837b      	strh	r3, [r7, #26]
 80047c4:	8bfb      	ldrh	r3, [r7, #30]
 80047c6:	3301      	adds	r3, #1
 80047c8:	83fb      	strh	r3, [r7, #30]
 80047ca:	8bfb      	ldrh	r3, [r7, #30]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d9ef      	bls.n	80047b0 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 80047d0:	8b7b      	ldrh	r3, [r7, #26]
 80047d2:	4a05      	ldr	r2, [pc, #20]	; (80047e8 <TP_Read_XOY+0x100>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	833b      	strh	r3, [r7, #24]
	return temp;
 80047dc:	8b3b      	ldrh	r3, [r7, #24]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3724      	adds	r7, #36	; 0x24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}
 80047e6:	bf00      	nop
 80047e8:	aaaaaaab 	.word	0xaaaaaaab

080047ec <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <TP_Read_XY+0x3c>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff ff74 	bl	80046e8 <TP_Read_XOY>
 8004800:	4603      	mov	r3, r0
 8004802:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <TP_Read_XY+0x40>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff6d 	bl	80046e8 <TP_Read_XOY>
 800480e:	4603      	mov	r3, r0
 8004810:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	89fa      	ldrh	r2, [r7, #14]
 8004816:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	89ba      	ldrh	r2, [r7, #12]
 800481c:	801a      	strh	r2, [r3, #0]
	return 1;
 800481e:	2301      	movs	r3, #1
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	2000005c 	.word	0x2000005c
 800482c:	2000005d 	.word	0x2000005d

08004830 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 800483a:	f107 0212 	add.w	r2, r7, #18
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ffd1 	bl	80047ec <TP_Read_XY>
 800484a:	4603      	mov	r3, r0
 800484c:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <TP_Read_XY2+0x28>
 8004854:	2300      	movs	r3, #0
 8004856:	e049      	b.n	80048ec <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8004858:	f107 020e 	add.w	r2, r7, #14
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff ffc2 	bl	80047ec <TP_Read_XY>
 8004868:	4603      	mov	r3, r0
 800486a:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <TP_Read_XY2+0x46>
 8004872:	2300      	movs	r3, #0
 8004874:	e03a      	b.n	80048ec <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8004876:	8a3a      	ldrh	r2, [r7, #16]
 8004878:	8abb      	ldrh	r3, [r7, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d804      	bhi.n	8004888 <TP_Read_XY2+0x58>
 800487e:	8a3b      	ldrh	r3, [r7, #16]
 8004880:	3363      	adds	r3, #99	; 0x63
 8004882:	8aba      	ldrh	r2, [r7, #20]
 8004884:	4293      	cmp	r3, r2
 8004886:	da08      	bge.n	800489a <TP_Read_XY2+0x6a>
 8004888:	8aba      	ldrh	r2, [r7, #20]
 800488a:	8a3b      	ldrh	r3, [r7, #16]
 800488c:	429a      	cmp	r2, r3
 800488e:	d82c      	bhi.n	80048ea <TP_Read_XY2+0xba>
 8004890:	8abb      	ldrh	r3, [r7, #20]
 8004892:	3363      	adds	r3, #99	; 0x63
 8004894:	8a3a      	ldrh	r2, [r7, #16]
 8004896:	4293      	cmp	r3, r2
 8004898:	db27      	blt.n	80048ea <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800489a:	89fa      	ldrh	r2, [r7, #14]
 800489c:	8a7b      	ldrh	r3, [r7, #18]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d804      	bhi.n	80048ac <TP_Read_XY2+0x7c>
 80048a2:	89fb      	ldrh	r3, [r7, #14]
 80048a4:	3363      	adds	r3, #99	; 0x63
 80048a6:	8a7a      	ldrh	r2, [r7, #18]
 80048a8:	4293      	cmp	r3, r2
 80048aa:	da08      	bge.n	80048be <TP_Read_XY2+0x8e>
 80048ac:	8a7a      	ldrh	r2, [r7, #18]
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d81a      	bhi.n	80048ea <TP_Read_XY2+0xba>
 80048b4:	8a7b      	ldrh	r3, [r7, #18]
 80048b6:	3363      	adds	r3, #99	; 0x63
 80048b8:	89fa      	ldrh	r2, [r7, #14]
 80048ba:	4293      	cmp	r3, r2
 80048bc:	db15      	blt.n	80048ea <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 80048be:	8abb      	ldrh	r3, [r7, #20]
 80048c0:	461a      	mov	r2, r3
 80048c2:	8a3b      	ldrh	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	0fda      	lsrs	r2, r3, #31
 80048c8:	4413      	add	r3, r2
 80048ca:	105b      	asrs	r3, r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 80048d2:	8a7b      	ldrh	r3, [r7, #18]
 80048d4:	461a      	mov	r2, r3
 80048d6:	89fb      	ldrh	r3, [r7, #14]
 80048d8:	4413      	add	r3, r2
 80048da:	0fda      	lsrs	r2, r3, #31
 80048dc:	4413      	add	r3, r2
 80048de:	105b      	asrs	r3, r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	801a      	strh	r2, [r3, #0]
		return 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <TP_Read_XY2+0xbc>
	}else return 0;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	4603      	mov	r3, r0
 80048fc:	80fb      	strh	r3, [r7, #6]
 80048fe:	460b      	mov	r3, r1
 8004900:	80bb      	strh	r3, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	3b0c      	subs	r3, #12
 800490a:	b298      	uxth	r0, r3
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	330d      	adds	r3, #13
 8004910:	b29a      	uxth	r2, r3
 8004912:	88bc      	ldrh	r4, [r7, #4]
 8004914:	88b9      	ldrh	r1, [r7, #4]
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	4623      	mov	r3, r4
 800491c:	f7fd ffc7 	bl	80028ae <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8004920:	88bb      	ldrh	r3, [r7, #4]
 8004922:	3b0c      	subs	r3, #12
 8004924:	b299      	uxth	r1, r3
 8004926:	88bb      	ldrh	r3, [r7, #4]
 8004928:	330d      	adds	r3, #13
 800492a:	b29c      	uxth	r4, r3
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	88f8      	ldrh	r0, [r7, #6]
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	4623      	mov	r3, r4
 8004936:	f7fd ffba 	bl	80028ae <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	3301      	adds	r3, #1
 800493e:	b298      	uxth	r0, r3
 8004940:	88bb      	ldrh	r3, [r7, #4]
 8004942:	3301      	adds	r3, #1
 8004944:	b29b      	uxth	r3, r3
 8004946:	887a      	ldrh	r2, [r7, #2]
 8004948:	4619      	mov	r1, r3
 800494a:	f7fd ff99 	bl	8002880 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	3b01      	subs	r3, #1
 8004952:	b298      	uxth	r0, r3
 8004954:	88bb      	ldrh	r3, [r7, #4]
 8004956:	3301      	adds	r3, #1
 8004958:	b29b      	uxth	r3, r3
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	4619      	mov	r1, r3
 800495e:	f7fd ff8f 	bl	8002880 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	3301      	adds	r3, #1
 8004966:	b298      	uxth	r0, r3
 8004968:	88bb      	ldrh	r3, [r7, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	b29b      	uxth	r3, r3
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	4619      	mov	r1, r3
 8004972:	f7fd ff85 	bl	8002880 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	3b01      	subs	r3, #1
 800497a:	b298      	uxth	r0, r3
 800497c:	88bb      	ldrh	r3, [r7, #4]
 800497e:	3b01      	subs	r3, #1
 8004980:	b29b      	uxth	r3, r3
 8004982:	887a      	ldrh	r2, [r7, #2]
 8004984:	4619      	mov	r1, r3
 8004986:	f7fd ff7b 	bl	8002880 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 800498a:	88f8      	ldrh	r0, [r7, #6]
 800498c:	88b9      	ldrh	r1, [r7, #4]
 800498e:	887a      	ldrh	r2, [r7, #2]
 8004990:	2300      	movs	r3, #0
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2306      	movs	r3, #6
 8004996:	f7fe fc14 	bl	80031c2 <lcd_DrawCircle>
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd90      	pop	{r4, r7, pc}
	...

080049a4 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 80049ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049b2:	4843      	ldr	r0, [pc, #268]	; (8004ac0 <TP_Scan+0x11c>)
 80049b4:	f001 fe90 	bl	80066d8 <HAL_GPIO_ReadPin>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d157      	bne.n	8004a6e <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <TP_Scan+0x2a>
 80049c4:	493f      	ldr	r1, [pc, #252]	; (8004ac4 <TP_Scan+0x120>)
 80049c6:	4840      	ldr	r0, [pc, #256]	; (8004ac8 <TP_Scan+0x124>)
 80049c8:	f7ff ff32 	bl	8004830 <TP_Read_XY2>
 80049cc:	e03c      	b.n	8004a48 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 80049ce:	493d      	ldr	r1, [pc, #244]	; (8004ac4 <TP_Scan+0x120>)
 80049d0:	483d      	ldr	r0, [pc, #244]	; (8004ac8 <TP_Scan+0x124>)
 80049d2:	f7ff ff2d 	bl	8004830 <TP_Read_XY2>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d035      	beq.n	8004a48 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 80049dc:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <TP_Scan+0x128>)
 80049de:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80049e2:	4b3a      	ldr	r3, [pc, #232]	; (8004acc <TP_Scan+0x128>)
 80049e4:	899b      	ldrh	r3, [r3, #12]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049f2:	4b36      	ldr	r3, [pc, #216]	; (8004acc <TP_Scan+0x128>)
 80049f4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a08:	ee17 3a90 	vmov	r3, s15
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <TP_Scan+0x128>)
 8004a10:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8004a12:	4b2e      	ldr	r3, [pc, #184]	; (8004acc <TP_Scan+0x128>)
 8004a14:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004a18:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <TP_Scan+0x128>)
 8004a1a:	8adb      	ldrh	r3, [r3, #22]
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a28:	4b28      	ldr	r3, [pc, #160]	; (8004acc <TP_Scan+0x128>)
 8004a2a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3e:	ee17 3a90 	vmov	r3, s15
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	4b21      	ldr	r3, [pc, #132]	; (8004acc <TP_Scan+0x128>)
 8004a46:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8004a48:	4b20      	ldr	r3, [pc, #128]	; (8004acc <TP_Scan+0x128>)
 8004a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4e:	b25b      	sxtb	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db2a      	blt.n	8004aaa <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <TP_Scan+0x128>)
 8004a56:	22c0      	movs	r2, #192	; 0xc0
 8004a58:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <TP_Scan+0x128>)
 8004a5e:	899a      	ldrh	r2, [r3, #12]
 8004a60:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <TP_Scan+0x128>)
 8004a62:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <TP_Scan+0x128>)
 8004a66:	8ada      	ldrh	r2, [r3, #22]
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <TP_Scan+0x128>)
 8004a6a:	83da      	strh	r2, [r3, #30]
 8004a6c:	e01d      	b.n	8004aaa <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <TP_Scan+0x128>)
 8004a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a74:	b25b      	sxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	da09      	bge.n	8004a8e <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <TP_Scan+0x128>)
 8004a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <TP_Scan+0x128>)
 8004a88:	f883 2020 	strb.w	r2, [r3, #32]
 8004a8c:	e00d      	b.n	8004aaa <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <TP_Scan+0x128>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <TP_Scan+0x128>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <TP_Scan+0x128>)
 8004a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aa0:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <TP_Scan+0x128>)
 8004aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aa8:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <TP_Scan+0x128>)
 8004aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ab0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ab4:	b2db      	uxtb	r3, r3
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40020800 	.word	0x40020800
 8004ac4:	2000003e 	.word	0x2000003e
 8004ac8:	20000034 	.word	0x20000034
 8004acc:	20000028 	.word	0x20000028

08004ad0 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004ad4:	220e      	movs	r2, #14
 8004ad6:	4905      	ldr	r1, [pc, #20]	; (8004aec <TP_Save_Adjdata+0x1c>)
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7fc fb55 	bl	8001188 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8004ade:	2100      	movs	r1, #0
 8004ae0:	200e      	movs	r0, #14
 8004ae2:	f7fc faf1 	bl	80010c8 <at24c_WriteOneByte>
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	2000004c 	.word	0x2000004c

08004af0 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8004afa:	200e      	movs	r0, #14
 8004afc:	f7fc fac8 	bl	8001090 <at24c_ReadOneByte>
 8004b00:	4603      	mov	r3, r0
 8004b02:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004b0a:	220e      	movs	r2, #14
 8004b0c:	4905      	ldr	r1, [pc, #20]	; (8004b24 <TP_Get_Adjdata+0x34>)
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fc fb1b 	bl	800114a <at24c_Read>
		return 1;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	2000004c 	.word	0x2000004c

08004b28 <touch_Adjust>:


void touch_Adjust(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08e      	sub	sp, #56	; 0x38
 8004b2c:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8004b3a:	4b61      	ldr	r3, [pc, #388]	; (8004cc0 <touch_Adjust+0x198>)
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	4b60      	ldr	r3, [pc, #384]	; (8004cc0 <touch_Adjust+0x198>)
 8004b40:	885b      	ldrh	r3, [r3, #2]
 8004b42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b46:	9100      	str	r1, [sp, #0]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fd fe62 	bl	8002814 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8004b50:	2300      	movs	r3, #0
 8004b52:	9302      	str	r3, [sp, #8]
 8004b54:	2310      	movs	r3, #16
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b62:	4a58      	ldr	r2, [pc, #352]	; (8004cc4 <touch_Adjust+0x19c>)
 8004b64:	2128      	movs	r1, #40	; 0x28
 8004b66:	2005      	movs	r0, #5
 8004b68:	f7fe fb98 	bl	800329c <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	2310      	movs	r3, #16
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b7e:	4a52      	ldr	r2, [pc, #328]	; (8004cc8 <touch_Adjust+0x1a0>)
 8004b80:	2141      	movs	r1, #65	; 0x41
 8004b82:	2005      	movs	r0, #5
 8004b84:	f7fe fb8a 	bl	800329c <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9302      	str	r3, [sp, #8]
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b9a:	4a4c      	ldr	r2, [pc, #304]	; (8004ccc <touch_Adjust+0x1a4>)
 8004b9c:	215a      	movs	r1, #90	; 0x5a
 8004b9e:	2005      	movs	r0, #5
 8004ba0:	f7fe fb7c 	bl	800329c <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8004ba4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004ba8:	2114      	movs	r1, #20
 8004baa:	2014      	movs	r0, #20
 8004bac:	f7ff fea2 	bl	80048f4 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8004bb0:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <touch_Adjust+0x1a8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8004bb8:	4b45      	ldr	r3, [pc, #276]	; (8004cd0 <touch_Adjust+0x1a8>)
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8004bc0:	2032      	movs	r0, #50	; 0x32
 8004bc2:	f000 fcd9 	bl	8005578 <HAL_Delay>
		tp_dev.scan(1);
 8004bc6:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <touch_Adjust+0x1a8>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2001      	movs	r0, #1
 8004bcc:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8004bce:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <touch_Adjust+0x1a8>)
 8004bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	f040 835e 	bne.w	800529a <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8004bde:	4b3c      	ldr	r3, [pc, #240]	; (8004cd0 <touch_Adjust+0x1a8>)
 8004be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <touch_Adjust+0x1a8>)
 8004bec:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8004bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf4:	4a36      	ldr	r2, [pc, #216]	; (8004cd0 <touch_Adjust+0x1a8>)
 8004bf6:	8992      	ldrh	r2, [r2, #12]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004bfe:	440b      	add	r3, r1
 8004c00:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8004c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c08:	4a31      	ldr	r2, [pc, #196]	; (8004cd0 <touch_Adjust+0x1a8>)
 8004c0a:	8ad2      	ldrh	r2, [r2, #22]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004c12:	440b      	add	r3, r1
 8004c14:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8004c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8004c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c26:	3b01      	subs	r3, #1
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d8c9      	bhi.n	8004bc0 <touch_Adjust+0x98>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <touch_Adjust+0x10c>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c45 	.word	0x08004c45
 8004c38:	08004c67 	.word	0x08004c67
 8004c3c:	08004c91 	.word	0x08004c91
 8004c40:	08004cd5 	.word	0x08004cd5
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8004c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c48:	2114      	movs	r1, #20
 8004c4a:	2014      	movs	r0, #20
 8004c4c:	f7ff fe52 	bl	80048f4 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8004c50:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <touch_Adjust+0x198>)
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	3b14      	subs	r3, #20
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c5c:	2114      	movs	r1, #20
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fe48 	bl	80048f4 <TP_Drow_Touch_Point>
					break;
 8004c64:	e31a      	b.n	800529c <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8004c66:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <touch_Adjust+0x198>)
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	3b14      	subs	r3, #20
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c72:	2114      	movs	r1, #20
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff fe3d 	bl	80048f4 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <touch_Adjust+0x198>)
 8004c7c:	885b      	ldrh	r3, [r3, #2]
 8004c7e:	3b14      	subs	r3, #20
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c86:	4619      	mov	r1, r3
 8004c88:	2014      	movs	r0, #20
 8004c8a:	f7ff fe33 	bl	80048f4 <TP_Drow_Touch_Point>
					break;
 8004c8e:	e305      	b.n	800529c <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <touch_Adjust+0x198>)
 8004c92:	885b      	ldrh	r3, [r3, #2]
 8004c94:	3b14      	subs	r3, #20
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	2014      	movs	r0, #20
 8004ca0:	f7ff fe28 	bl	80048f4 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <touch_Adjust+0x198>)
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	3b14      	subs	r3, #20
 8004caa:	b298      	uxth	r0, r3
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <touch_Adjust+0x198>)
 8004cae:	885b      	ldrh	r3, [r3, #2]
 8004cb0:	3b14      	subs	r3, #20
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f7ff fe1b 	bl	80048f4 <TP_Drow_Touch_Point>
					break;
 8004cbe:	e2ed      	b.n	800529c <touch_Adjust+0x774>
 8004cc0:	200005c8 	.word	0x200005c8
 8004cc4:	0800c7a8 	.word	0x0800c7a8
 8004cc8:	0800c7c4 	.word	0x0800c7c4
 8004ccc:	0800c7dc 	.word	0x0800c7dc
 8004cd0:	20000028 	.word	0x20000028
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8004cd4:	883b      	ldrh	r3, [r7, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	88bb      	ldrh	r3, [r7, #4]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bfb8      	it	lt
 8004ce0:	425b      	neglt	r3, r3
 8004ce2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8004ce4:	887b      	ldrh	r3, [r7, #2]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bfb8      	it	lt
 8004cf0:	425b      	neglt	r3, r3
 8004cf2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	fb03 f303 	mul.w	r3, r3, r3
 8004cfa:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	fb03 f303 	mul.w	r3, r3, r3
 8004d02:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004d04:	6a3a      	ldr	r2, [r7, #32]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fbf2 	bl	80004f4 <__aeabi_ui2d>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	ec43 2b10 	vmov	d0, r2, r3
 8004d18:	f006 fdbe 	bl	800b898 <sqrt>
 8004d1c:	ec53 2b10 	vmov	r2, r3, d0
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	f7fb ff38 	bl	8000b98 <__aeabi_d2uiz>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8004d2c:	893b      	ldrh	r3, [r7, #8]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	89bb      	ldrh	r3, [r7, #12]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bfb8      	it	lt
 8004d38:	425b      	neglt	r3, r3
 8004d3a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8004d3c:	897b      	ldrh	r3, [r7, #10]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bfb8      	it	lt
 8004d48:	425b      	neglt	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	fb03 f303 	mul.w	r3, r3, r3
 8004d52:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	fb03 f303 	mul.w	r3, r3, r3
 8004d5a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fb fbc6 	bl	80004f4 <__aeabi_ui2d>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	ec43 2b10 	vmov	d0, r2, r3
 8004d70:	f006 fd92 	bl	800b898 <sqrt>
 8004d74:	ec53 2b10 	vmov	r2, r3, d0
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	f7fb ff0c 	bl	8000b98 <__aeabi_d2uiz>
 8004d80:	4603      	mov	r3, r0
 8004d82:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004d84:	8b7b      	ldrh	r3, [r7, #26]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d8e:	8b3b      	ldrh	r3, [r7, #24]
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d9c:	ee16 0a90 	vmov	r0, s13
 8004da0:	f7fb fbca 	bl	8000538 <__aeabi_f2d>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8004dac:	a384      	add	r3, pc, #528	; (adr r3, 8004fc0 <touch_Adjust+0x498>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004db6:	f7fb fe89 	bl	8000acc <__aeabi_dcmplt>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <touch_Adjust+0x2b8>
 8004dc0:	a381      	add	r3, pc, #516	; (adr r3, 8004fc8 <touch_Adjust+0x4a0>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dca:	f7fb fe9d 	bl	8000b08 <__aeabi_dcmpgt>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <touch_Adjust+0x2b8>
 8004dd4:	8b7b      	ldrh	r3, [r7, #26]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <touch_Adjust+0x2b8>
 8004dda:	8b3b      	ldrh	r3, [r7, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d136      	bne.n	8004e4e <touch_Adjust+0x326>
					{
						cnt=0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004de6:	4b7a      	ldr	r3, [pc, #488]	; (8004fd0 <touch_Adjust+0x4a8>)
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	3b14      	subs	r3, #20
 8004dec:	b298      	uxth	r0, r3
 8004dee:	4b78      	ldr	r3, [pc, #480]	; (8004fd0 <touch_Adjust+0x4a8>)
 8004df0:	885b      	ldrh	r3, [r3, #2]
 8004df2:	3b14      	subs	r3, #20
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f7ff fd7a 	bl	80048f4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004e00:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004e04:	2114      	movs	r1, #20
 8004e06:	2014      	movs	r0, #20
 8004e08:	f7ff fd74 	bl	80048f4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9302      	str	r3, [sp, #8]
 8004e10:	2310      	movs	r3, #16
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e1e:	4a6d      	ldr	r2, [pc, #436]	; (8004fd4 <touch_Adjust+0x4ac>)
 8004e20:	2128      	movs	r1, #40	; 0x28
 8004e22:	2005      	movs	r0, #5
 8004e24:	f7fe fa3a 	bl	800329c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9302      	str	r3, [sp, #8]
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e3a:	4a67      	ldr	r2, [pc, #412]	; (8004fd8 <touch_Adjust+0x4b0>)
 8004e3c:	213c      	movs	r1, #60	; 0x3c
 8004e3e:	2005      	movs	r0, #5
 8004e40:	f7fe fa2c 	bl	800329c <lcd_ShowStr>
						HAL_Delay(1000);
 8004e44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e48:	f000 fb96 	bl	8005578 <HAL_Delay>
 						continue;
 8004e4c:	e226      	b.n	800529c <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8004e4e:	883b      	ldrh	r3, [r7, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	893b      	ldrh	r3, [r7, #8]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bfb8      	it	lt
 8004e5a:	425b      	neglt	r3, r3
 8004e5c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	461a      	mov	r2, r3
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bfb8      	it	lt
 8004e6a:	425b      	neglt	r3, r3
 8004e6c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	fb03 f303 	mul.w	r3, r3, r3
 8004e74:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	fb03 f303 	mul.w	r3, r3, r3
 8004e7c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004e7e:	6a3a      	ldr	r2, [r7, #32]
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fb35 	bl	80004f4 <__aeabi_ui2d>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	ec43 2b10 	vmov	d0, r2, r3
 8004e92:	f006 fd01 	bl	800b898 <sqrt>
 8004e96:	ec53 2b10 	vmov	r2, r3, d0
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f7fb fe7b 	bl	8000b98 <__aeabi_d2uiz>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8004ea6:	88bb      	ldrh	r3, [r7, #4]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	89bb      	ldrh	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bfb8      	it	lt
 8004eb2:	425b      	neglt	r3, r3
 8004eb4:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	89fb      	ldrh	r3, [r7, #14]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfb8      	it	lt
 8004ec2:	425b      	neglt	r3, r3
 8004ec4:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	fb03 f303 	mul.w	r3, r3, r3
 8004ecc:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	fb03 f303 	mul.w	r3, r3, r3
 8004ed4:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004ed6:	6a3a      	ldr	r2, [r7, #32]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fb fb09 	bl	80004f4 <__aeabi_ui2d>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	ec43 2b10 	vmov	d0, r2, r3
 8004eea:	f006 fcd5 	bl	800b898 <sqrt>
 8004eee:	ec53 2b10 	vmov	r2, r3, d0
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f7fb fe4f 	bl	8000b98 <__aeabi_d2uiz>
 8004efa:	4603      	mov	r3, r0
 8004efc:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004efe:	8b7b      	ldrh	r3, [r7, #26]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f08:	8b3b      	ldrh	r3, [r7, #24]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f16:	ee16 0a90 	vmov	r0, s13
 8004f1a:	f7fb fb0d 	bl	8000538 <__aeabi_f2d>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8004f26:	a326      	add	r3, pc, #152	; (adr r3, 8004fc0 <touch_Adjust+0x498>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f30:	f7fb fdcc 	bl	8000acc <__aeabi_dcmplt>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <touch_Adjust+0x426>
 8004f3a:	a323      	add	r3, pc, #140	; (adr r3, 8004fc8 <touch_Adjust+0x4a0>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f44:	f7fb fde0 	bl	8000b08 <__aeabi_dcmpgt>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d046      	beq.n	8004fdc <touch_Adjust+0x4b4>
					{
						cnt=0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004f54:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <touch_Adjust+0x4a8>)
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	3b14      	subs	r3, #20
 8004f5a:	b298      	uxth	r0, r3
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <touch_Adjust+0x4a8>)
 8004f5e:	885b      	ldrh	r3, [r3, #2]
 8004f60:	3b14      	subs	r3, #20
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f7ff fcc3 	bl	80048f4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004f6e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004f72:	2114      	movs	r1, #20
 8004f74:	2014      	movs	r0, #20
 8004f76:	f7ff fcbd 	bl	80048f4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9302      	str	r3, [sp, #8]
 8004f7e:	2310      	movs	r3, #16
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f8c:	4a11      	ldr	r2, [pc, #68]	; (8004fd4 <touch_Adjust+0x4ac>)
 8004f8e:	2128      	movs	r1, #40	; 0x28
 8004f90:	2005      	movs	r0, #5
 8004f92:	f7fe f983 	bl	800329c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8004f96:	2300      	movs	r3, #0
 8004f98:	9302      	str	r3, [sp, #8]
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fa8:	4a0b      	ldr	r2, [pc, #44]	; (8004fd8 <touch_Adjust+0x4b0>)
 8004faa:	213c      	movs	r1, #60	; 0x3c
 8004fac:	2005      	movs	r0, #5
 8004fae:	f7fe f975 	bl	800329c <lcd_ShowStr>
						HAL_Delay(1000);
 8004fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fb6:	f000 fadf 	bl	8005578 <HAL_Delay>
						continue;
 8004fba:	e16f      	b.n	800529c <touch_Adjust+0x774>
 8004fbc:	f3af 8000 	nop.w
 8004fc0:	66666666 	.word	0x66666666
 8004fc4:	3fee6666 	.word	0x3fee6666
 8004fc8:	cccccccd 	.word	0xcccccccd
 8004fcc:	3ff0cccc 	.word	0x3ff0cccc
 8004fd0:	200005c8 	.word	0x200005c8
 8004fd4:	0800c7f0 	.word	0x0800c7f0
 8004fd8:	0800c810 	.word	0x0800c810
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8004fdc:	88bb      	ldrh	r3, [r7, #4]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	893b      	ldrh	r3, [r7, #8]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bfb8      	it	lt
 8004fe8:	425b      	neglt	r3, r3
 8004fea:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	897b      	ldrh	r3, [r7, #10]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bfb8      	it	lt
 8004ff8:	425b      	neglt	r3, r3
 8004ffa:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	fb03 f303 	mul.w	r3, r3, r3
 8005002:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	fb03 f303 	mul.w	r3, r3, r3
 800500a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f7fb fa6e 	bl	80004f4 <__aeabi_ui2d>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	ec43 2b10 	vmov	d0, r2, r3
 8005020:	f006 fc3a 	bl	800b898 <sqrt>
 8005024:	ec53 2b10 	vmov	r2, r3, d0
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	f7fb fdb4 	bl	8000b98 <__aeabi_d2uiz>
 8005030:	4603      	mov	r3, r0
 8005032:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8005034:	883b      	ldrh	r3, [r7, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	89bb      	ldrh	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	bfb8      	it	lt
 8005040:	425b      	neglt	r3, r3
 8005042:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8005044:	887b      	ldrh	r3, [r7, #2]
 8005046:	461a      	mov	r2, r3
 8005048:	89fb      	ldrh	r3, [r7, #14]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	bfb8      	it	lt
 8005050:	425b      	neglt	r3, r3
 8005052:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	fb03 f303 	mul.w	r3, r3, r3
 800505a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	fb03 f303 	mul.w	r3, r3, r3
 8005062:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb fa42 	bl	80004f4 <__aeabi_ui2d>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	ec43 2b10 	vmov	d0, r2, r3
 8005078:	f006 fc0e 	bl	800b898 <sqrt>
 800507c:	ec53 2b10 	vmov	r2, r3, d0
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	f7fb fd88 	bl	8000b98 <__aeabi_d2uiz>
 8005088:	4603      	mov	r3, r0
 800508a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800508c:	8b7b      	ldrh	r3, [r7, #26]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005096:	8b3b      	ldrh	r3, [r7, #24]
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050a4:	ee16 0a90 	vmov	r0, s13
 80050a8:	f7fb fa46 	bl	8000538 <__aeabi_f2d>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80050b4:	a383      	add	r3, pc, #524	; (adr r3, 80052c4 <touch_Adjust+0x79c>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050be:	f7fb fd05 	bl	8000acc <__aeabi_dcmplt>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <touch_Adjust+0x5b4>
 80050c8:	a380      	add	r3, pc, #512	; (adr r3, 80052cc <touch_Adjust+0x7a4>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050d2:	f7fb fd19 	bl	8000b08 <__aeabi_dcmpgt>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d036      	beq.n	800514a <touch_Adjust+0x622>
					{
						cnt=0;
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80050e2:	4b71      	ldr	r3, [pc, #452]	; (80052a8 <touch_Adjust+0x780>)
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	3b14      	subs	r3, #20
 80050e8:	b298      	uxth	r0, r3
 80050ea:	4b6f      	ldr	r3, [pc, #444]	; (80052a8 <touch_Adjust+0x780>)
 80050ec:	885b      	ldrh	r3, [r3, #2]
 80050ee:	3b14      	subs	r3, #20
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050f6:	4619      	mov	r1, r3
 80050f8:	f7ff fbfc 	bl	80048f4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80050fc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005100:	2114      	movs	r1, #20
 8005102:	2014      	movs	r0, #20
 8005104:	f7ff fbf6 	bl	80048f4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005108:	2300      	movs	r3, #0
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	2310      	movs	r3, #16
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800511a:	4a64      	ldr	r2, [pc, #400]	; (80052ac <touch_Adjust+0x784>)
 800511c:	2128      	movs	r1, #40	; 0x28
 800511e:	2005      	movs	r0, #5
 8005120:	f7fe f8bc 	bl	800329c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005124:	2300      	movs	r3, #0
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	2310      	movs	r3, #16
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005136:	4a5e      	ldr	r2, [pc, #376]	; (80052b0 <touch_Adjust+0x788>)
 8005138:	213c      	movs	r1, #60	; 0x3c
 800513a:	2005      	movs	r0, #5
 800513c:	f7fe f8ae 	bl	800329c <lcd_ShowStr>

						HAL_Delay(1000);
 8005140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005144:	f000 fa18 	bl	8005578 <HAL_Delay>
 							continue;
 8005148:	e0a8      	b.n	800529c <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 800514a:	4b57      	ldr	r3, [pc, #348]	; (80052a8 <touch_Adjust+0x780>)
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	3b28      	subs	r3, #40	; 0x28
 8005150:	ee07 3a90 	vmov	s15, r3
 8005154:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005158:	88bb      	ldrh	r3, [r7, #4]
 800515a:	461a      	mov	r2, r3
 800515c:	883b      	ldrh	r3, [r7, #0]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516c:	4b51      	ldr	r3, [pc, #324]	; (80052b4 <touch_Adjust+0x78c>)
 800516e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8005172:	4b4d      	ldr	r3, [pc, #308]	; (80052a8 <touch_Adjust+0x780>)
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800517e:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <touch_Adjust+0x78c>)
 8005180:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005184:	88bb      	ldrh	r3, [r7, #4]
 8005186:	461a      	mov	r2, r3
 8005188:	883b      	ldrh	r3, [r7, #0]
 800518a:	4413      	add	r3, r2
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800519c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80051a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051a8:	ee17 3a90 	vmov	r3, s15
 80051ac:	b21a      	sxth	r2, r3
 80051ae:	4b41      	ldr	r3, [pc, #260]	; (80052b4 <touch_Adjust+0x78c>)
 80051b0:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 80051b2:	4b3d      	ldr	r3, [pc, #244]	; (80052a8 <touch_Adjust+0x780>)
 80051b4:	885b      	ldrh	r3, [r3, #2]
 80051b6:	3b28      	subs	r3, #40	; 0x28
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051c0:	897b      	ldrh	r3, [r7, #10]
 80051c2:	461a      	mov	r2, r3
 80051c4:	887b      	ldrh	r3, [r7, #2]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d4:	4b37      	ldr	r3, [pc, #220]	; (80052b4 <touch_Adjust+0x78c>)
 80051d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 80051da:	4b33      	ldr	r3, [pc, #204]	; (80052a8 <touch_Adjust+0x780>)
 80051dc:	885b      	ldrh	r3, [r3, #2]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e6:	4b33      	ldr	r3, [pc, #204]	; (80052b4 <touch_Adjust+0x78c>)
 80051e8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80051ec:	897b      	ldrh	r3, [r7, #10]
 80051ee:	461a      	mov	r2, r3
 80051f0:	887b      	ldrh	r3, [r7, #2]
 80051f2:	4413      	add	r3, r2
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005204:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800520c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005210:	ee17 3a90 	vmov	r3, s15
 8005214:	b21a      	sxth	r2, r3
 8005216:	4b27      	ldr	r3, [pc, #156]	; (80052b4 <touch_Adjust+0x78c>)
 8005218:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800521a:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <touch_Adjust+0x780>)
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	3b14      	subs	r3, #20
 8005220:	b298      	uxth	r0, r3
 8005222:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <touch_Adjust+0x780>)
 8005224:	885b      	ldrh	r3, [r3, #2]
 8005226:	3b14      	subs	r3, #20
 8005228:	b29b      	uxth	r3, r3
 800522a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522e:	4619      	mov	r1, r3
 8005230:	f7ff fb60 	bl	80048f4 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8005234:	2300      	movs	r3, #0
 8005236:	9302      	str	r3, [sp, #8]
 8005238:	2310      	movs	r3, #16
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005246:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <touch_Adjust+0x790>)
 8005248:	2128      	movs	r1, #40	; 0x28
 800524a:	2005      	movs	r0, #5
 800524c:	f7fe f826 	bl	800329c <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005250:	2300      	movs	r3, #0
 8005252:	9302      	str	r3, [sp, #8]
 8005254:	2310      	movs	r3, #16
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005262:	4a16      	ldr	r2, [pc, #88]	; (80052bc <touch_Adjust+0x794>)
 8005264:	213c      	movs	r1, #60	; 0x3c
 8005266:	2005      	movs	r0, #5
 8005268:	f7fe f818 	bl	800329c <lcd_ShowStr>
					HAL_Delay(1000);
 800526c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005270:	f000 f982 	bl	8005578 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8005274:	2300      	movs	r3, #0
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	2310      	movs	r3, #16
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005286:	4a0e      	ldr	r2, [pc, #56]	; (80052c0 <touch_Adjust+0x798>)
 8005288:	2128      	movs	r1, #40	; 0x28
 800528a:	2005      	movs	r0, #5
 800528c:	f7fe f806 	bl	800329c <lcd_ShowStr>
					TP_Save_Adjdata();
 8005290:	f7ff fc1e 	bl	8004ad0 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8005294:	f7ff fc2c 	bl	8004af0 <TP_Get_Adjdata>
					return;
 8005298:	e001      	b.n	800529e <touch_Adjust+0x776>
			}
		}
 800529a:	bf00      	nop
		HAL_Delay(50);
 800529c:	e490      	b.n	8004bc0 <touch_Adjust+0x98>
 	}
}
 800529e:	3728      	adds	r7, #40	; 0x28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	f3af 8000 	nop.w
 80052a8:	200005c8 	.word	0x200005c8
 80052ac:	0800c7f0 	.word	0x0800c7f0
 80052b0:	0800c810 	.word	0x0800c810
 80052b4:	20000028 	.word	0x20000028
 80052b8:	0800c830 	.word	0x0800c830
 80052bc:	0800c850 	.word	0x0800c850
 80052c0:	0800c870 	.word	0x0800c870
 80052c4:	66666666 	.word	0x66666666
 80052c8:	3fee6666 	.word	0x3fee6666
 80052cc:	cccccccd 	.word	0xcccccccd
 80052d0:	3ff0cccc 	.word	0x3ff0cccc

080052d4 <touch_init>:

void touch_init(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 80052d8:	4904      	ldr	r1, [pc, #16]	; (80052ec <touch_init+0x18>)
 80052da:	4805      	ldr	r0, [pc, #20]	; (80052f0 <touch_init+0x1c>)
 80052dc:	f7ff fa86 	bl	80047ec <TP_Read_XY>
	at24c_init();
 80052e0:	f7fb fed0 	bl	8001084 <at24c_init>
	TP_Get_Adjdata();
 80052e4:	f7ff fc04 	bl	8004af0 <TP_Get_Adjdata>
}
 80052e8:	bf00      	nop
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	2000003e 	.word	0x2000003e
 80052f0:	20000034 	.word	0x20000034

080052f4 <touch_Scan>:

void touch_Scan(){
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80052f8:	4b02      	ldr	r3, [pc, #8]	; (8005304 <touch_Scan+0x10>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2000      	movs	r0, #0
 80052fe:	4798      	blx	r3
}
 8005300:	bf00      	nop
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000028 	.word	0x20000028

08005308 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 800530c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005310:	4805      	ldr	r0, [pc, #20]	; (8005328 <touch_IsTouched+0x20>)
 8005312:	f001 f9e1 	bl	80066d8 <HAL_GPIO_ReadPin>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
}
 8005322:	4618      	mov	r0, r3
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40020800 	.word	0x40020800

0800532c <touch_GetX>:

uint16_t touch_GetX(){
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <touch_GetX+0x14>)
 8005332:	899b      	ldrh	r3, [r3, #12]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000028 	.word	0x20000028

08005344 <touch_GetY>:

uint16_t touch_GetY(){
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <touch_GetY+0x14>)
 800534a:	8adb      	ldrh	r3, [r3, #22]
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000028 	.word	0x20000028

0800535c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <HAL_UART_RxCpltCallback+0x30>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d10a      	bne.n	8005384 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800536e:	230a      	movs	r3, #10
 8005370:	2201      	movs	r2, #1
 8005372:	4907      	ldr	r1, [pc, #28]	; (8005390 <HAL_UART_RxCpltCallback+0x34>)
 8005374:	4807      	ldr	r0, [pc, #28]	; (8005394 <HAL_UART_RxCpltCallback+0x38>)
 8005376:	f004 f906 	bl	8009586 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800537a:	2201      	movs	r2, #1
 800537c:	4904      	ldr	r1, [pc, #16]	; (8005390 <HAL_UART_RxCpltCallback+0x34>)
 800537e:	4805      	ldr	r0, [pc, #20]	; (8005394 <HAL_UART_RxCpltCallback+0x38>)
 8005380:	f004 f993 	bl	80096aa <HAL_UART_Receive_IT>
	}
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40011000 	.word	0x40011000
 8005390:	20000124 	.word	0x20000124
 8005394:	20000794 	.word	0x20000794

08005398 <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 800539e:	4a12      	ldr	r2, [pc, #72]	; (80053e8 <MX_USART1_UART_Init+0x50>)
 80053a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80053a2:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 80053a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053b0:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053b6:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 80053be:	220c      	movs	r2, #12
 80053c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053ce:	4805      	ldr	r0, [pc, #20]	; (80053e4 <MX_USART1_UART_Init+0x4c>)
 80053d0:	f004 f88c 	bl	80094ec <HAL_UART_Init>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80053da:	f7fe f96f 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80053de:	bf00      	nop
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000794 	.word	0x20000794
 80053e8:	40011000 	.word	0x40011000

080053ec <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80053f0:	4b11      	ldr	r3, [pc, #68]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 80053f2:	4a12      	ldr	r2, [pc, #72]	; (800543c <MX_USART2_UART_Init+0x50>)
 80053f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 80053f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053fe:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 8005400:	2200      	movs	r2, #0
 8005402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 8005406:	2200      	movs	r2, #0
 8005408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 8005412:	220c      	movs	r2, #12
 8005414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005416:	4b08      	ldr	r3, [pc, #32]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 8005418:	2200      	movs	r2, #0
 800541a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 800541e:	2200      	movs	r2, #0
 8005420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005422:	4805      	ldr	r0, [pc, #20]	; (8005438 <MX_USART2_UART_Init+0x4c>)
 8005424:	f004 f862 	bl	80094ec <HAL_UART_Init>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800542e:	f7fe f945 	bl	80036bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200007d8 	.word	0x200007d8
 800543c:	40004400 	.word	0x40004400

08005440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005478 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005444:	480d      	ldr	r0, [pc, #52]	; (800547c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005446:	490e      	ldr	r1, [pc, #56]	; (8005480 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005448:	4a0e      	ldr	r2, [pc, #56]	; (8005484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800544a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800544c:	e002      	b.n	8005454 <LoopCopyDataInit>

0800544e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800544e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005452:	3304      	adds	r3, #4

08005454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005458:	d3f9      	bcc.n	800544e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800545a:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800545c:	4c0b      	ldr	r4, [pc, #44]	; (800548c <LoopFillZerobss+0x26>)
  movs r3, #0
 800545e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005460:	e001      	b.n	8005466 <LoopFillZerobss>

08005462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005464:	3204      	adds	r2, #4

08005466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005468:	d3fb      	bcc.n	8005462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800546a:	f7fe ff95 	bl	8004398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800546e:	f005 f8db 	bl	800a628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005472:	f7fe f833 	bl	80034dc <main>
  bx  lr    
 8005476:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800547c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005480:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005484:	080f09e8 	.word	0x080f09e8
  ldr r2, =_sbss
 8005488:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 800548c:	20000830 	.word	0x20000830

08005490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005490:	e7fe      	b.n	8005490 <ADC_IRQHandler>
	...

08005494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <HAL_Init+0x40>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <HAL_Init+0x40>)
 800549e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_Init+0x40>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <HAL_Init+0x40>)
 80054aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054b0:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <HAL_Init+0x40>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a07      	ldr	r2, [pc, #28]	; (80054d4 <HAL_Init+0x40>)
 80054b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054bc:	2003      	movs	r0, #3
 80054be:	f000 fbb1 	bl	8005c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054c2:	200f      	movs	r0, #15
 80054c4:	f000 f808 	bl	80054d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054c8:	f7fe fb94 	bl	8003bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023c00 	.word	0x40023c00

080054d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_InitTick+0x54>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b12      	ldr	r3, [pc, #72]	; (8005530 <HAL_InitTick+0x58>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80054f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fbc9 	bl	8005c8e <HAL_SYSTICK_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e00e      	b.n	8005524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b0f      	cmp	r3, #15
 800550a:	d80a      	bhi.n	8005522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800550c:	2200      	movs	r2, #0
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	f04f 30ff 	mov.w	r0, #4294967295
 8005514:	f000 fb91 	bl	8005c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005518:	4a06      	ldr	r2, [pc, #24]	; (8005534 <HAL_InitTick+0x5c>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e000      	b.n	8005524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000024 	.word	0x20000024
 8005530:	20000064 	.word	0x20000064
 8005534:	20000060 	.word	0x20000060

08005538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <HAL_IncTick+0x20>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <HAL_IncTick+0x24>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4413      	add	r3, r2
 8005548:	4a04      	ldr	r2, [pc, #16]	; (800555c <HAL_IncTick+0x24>)
 800554a:	6013      	str	r3, [r2, #0]
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000064 	.word	0x20000064
 800555c:	2000081c 	.word	0x2000081c

08005560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  return uwTick;
 8005564:	4b03      	ldr	r3, [pc, #12]	; (8005574 <HAL_GetTick+0x14>)
 8005566:	681b      	ldr	r3, [r3, #0]
}
 8005568:	4618      	mov	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	2000081c 	.word	0x2000081c

08005578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005580:	f7ff ffee 	bl	8005560 <HAL_GetTick>
 8005584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d005      	beq.n	800559e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005592:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <HAL_Delay+0x44>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800559e:	bf00      	nop
 80055a0:	f7ff ffde 	bl	8005560 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d8f7      	bhi.n	80055a0 <HAL_Delay+0x28>
  {
  }
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000064 	.word	0x20000064

080055c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e033      	b.n	800563e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fe fb30 	bl	8003c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d118      	bne.n	8005630 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005606:	f023 0302 	bic.w	r3, r3, #2
 800560a:	f043 0202 	orr.w	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f93a 	bl	800588c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	f043 0201 	orr.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
 800562e:	e001      	b.n	8005634 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x1c>
 8005660:	2302      	movs	r3, #2
 8005662:	e105      	b.n	8005870 <HAL_ADC_ConfigChannel+0x228>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b09      	cmp	r3, #9
 8005672:	d925      	bls.n	80056c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68d9      	ldr	r1, [r3, #12]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	4613      	mov	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4413      	add	r3, r2
 8005688:	3b1e      	subs	r3, #30
 800568a:	2207      	movs	r2, #7
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43da      	mvns	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	400a      	ands	r2, r1
 8005698:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68d9      	ldr	r1, [r3, #12]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4618      	mov	r0, r3
 80056ac:	4603      	mov	r3, r0
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4403      	add	r3, r0
 80056b2:	3b1e      	subs	r3, #30
 80056b4:	409a      	lsls	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	e022      	b.n	8005706 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6919      	ldr	r1, [r3, #16]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	4613      	mov	r3, r2
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	4413      	add	r3, r2
 80056d4:	2207      	movs	r2, #7
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43da      	mvns	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	400a      	ands	r2, r1
 80056e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6919      	ldr	r1, [r3, #16]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4618      	mov	r0, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4403      	add	r3, r0
 80056fc:	409a      	lsls	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b06      	cmp	r3, #6
 800570c:	d824      	bhi.n	8005758 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	3b05      	subs	r3, #5
 8005720:	221f      	movs	r2, #31
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	43da      	mvns	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	400a      	ands	r2, r1
 800572e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	4618      	mov	r0, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	3b05      	subs	r3, #5
 800574a:	fa00 f203 	lsl.w	r2, r0, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	635a      	str	r2, [r3, #52]	; 0x34
 8005756:	e04c      	b.n	80057f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d824      	bhi.n	80057aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	3b23      	subs	r3, #35	; 0x23
 8005772:	221f      	movs	r2, #31
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43da      	mvns	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	400a      	ands	r2, r1
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	4618      	mov	r0, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	3b23      	subs	r3, #35	; 0x23
 800579c:	fa00 f203 	lsl.w	r2, r0, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
 80057a8:	e023      	b.n	80057f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	3b41      	subs	r3, #65	; 0x41
 80057bc:	221f      	movs	r2, #31
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43da      	mvns	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	400a      	ands	r2, r1
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	4618      	mov	r0, r3
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	3b41      	subs	r3, #65	; 0x41
 80057e6:	fa00 f203 	lsl.w	r2, r0, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057f2:	4b22      	ldr	r3, [pc, #136]	; (800587c <HAL_ADC_ConfigChannel+0x234>)
 80057f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a21      	ldr	r2, [pc, #132]	; (8005880 <HAL_ADC_ConfigChannel+0x238>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d109      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x1cc>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b12      	cmp	r3, #18
 8005806:	d105      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a19      	ldr	r2, [pc, #100]	; (8005880 <HAL_ADC_ConfigChannel+0x238>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d123      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x21e>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b10      	cmp	r3, #16
 8005824:	d003      	beq.n	800582e <HAL_ADC_ConfigChannel+0x1e6>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b11      	cmp	r3, #17
 800582c:	d11b      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b10      	cmp	r3, #16
 8005840:	d111      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <HAL_ADC_ConfigChannel+0x23c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a10      	ldr	r2, [pc, #64]	; (8005888 <HAL_ADC_ConfigChannel+0x240>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	0c9a      	lsrs	r2, r3, #18
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005858:	e002      	b.n	8005860 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	3b01      	subs	r3, #1
 800585e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f9      	bne.n	800585a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40012300 	.word	0x40012300
 8005880:	40012000 	.word	0x40012000
 8005884:	20000024 	.word	0x20000024
 8005888:	431bde83 	.word	0x431bde83

0800588c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005894:	4b79      	ldr	r3, [pc, #484]	; (8005a7c <ADC_Init+0x1f0>)
 8005896:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6859      	ldr	r1, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	021a      	lsls	r2, r3, #8
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6899      	ldr	r1, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	4a58      	ldr	r2, [pc, #352]	; (8005a80 <ADC_Init+0x1f4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d022      	beq.n	800596a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005932:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6899      	ldr	r1, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	e00f      	b.n	800598a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005988:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0202 	bic.w	r2, r2, #2
 8005998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6899      	ldr	r1, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7e1b      	ldrb	r3, [r3, #24]
 80059a4:	005a      	lsls	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01b      	beq.n	80059f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	3b01      	subs	r3, #1
 80059e4:	035a      	lsls	r2, r3, #13
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
 80059ee:	e007      	b.n	8005a00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	051a      	lsls	r2, r3, #20
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6899      	ldr	r1, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a42:	025a      	lsls	r2, r3, #9
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6899      	ldr	r1, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	029a      	lsls	r2, r3, #10
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40012300 	.word	0x40012300
 8005a80:	0f000001 	.word	0x0f000001

08005a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ab6:	4a04      	ldr	r2, [pc, #16]	; (8005ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	60d3      	str	r3, [r2, #12]
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	e000ed00 	.word	0xe000ed00

08005acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 0307 	and.w	r3, r3, #7
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	db0b      	blt.n	8005b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	f003 021f 	and.w	r2, r3, #31
 8005b00:	4907      	ldr	r1, [pc, #28]	; (8005b20 <__NVIC_EnableIRQ+0x38>)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	2001      	movs	r0, #1
 8005b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000e100 	.word	0xe000e100

08005b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	6039      	str	r1, [r7, #0]
 8005b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	db0a      	blt.n	8005b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	490c      	ldr	r1, [pc, #48]	; (8005b70 <__NVIC_SetPriority+0x4c>)
 8005b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b42:	0112      	lsls	r2, r2, #4
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	440b      	add	r3, r1
 8005b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b4c:	e00a      	b.n	8005b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	4908      	ldr	r1, [pc, #32]	; (8005b74 <__NVIC_SetPriority+0x50>)
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	3b04      	subs	r3, #4
 8005b5c:	0112      	lsls	r2, r2, #4
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	440b      	add	r3, r1
 8005b62:	761a      	strb	r2, [r3, #24]
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	e000e100 	.word	0xe000e100
 8005b74:	e000ed00 	.word	0xe000ed00

08005b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b089      	sub	sp, #36	; 0x24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f1c3 0307 	rsb	r3, r3, #7
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	bf28      	it	cs
 8005b96:	2304      	movcs	r3, #4
 8005b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	2b06      	cmp	r3, #6
 8005ba0:	d902      	bls.n	8005ba8 <NVIC_EncodePriority+0x30>
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3b03      	subs	r3, #3
 8005ba6:	e000      	b.n	8005baa <NVIC_EncodePriority+0x32>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	401a      	ands	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bca:	43d9      	mvns	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bd0:	4313      	orrs	r3, r2
         );
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3724      	adds	r7, #36	; 0x24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bf0:	d301      	bcc.n	8005bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e00f      	b.n	8005c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <SysTick_Config+0x40>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bfe:	210f      	movs	r1, #15
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	f7ff ff8e 	bl	8005b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <SysTick_Config+0x40>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c0e:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <SysTick_Config+0x40>)
 8005c10:	2207      	movs	r2, #7
 8005c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	e000e010 	.word	0xe000e010

08005c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ff29 	bl	8005a84 <__NVIC_SetPriorityGrouping>
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	4603      	mov	r3, r0
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c4c:	f7ff ff3e 	bl	8005acc <__NVIC_GetPriorityGrouping>
 8005c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	6978      	ldr	r0, [r7, #20]
 8005c58:	f7ff ff8e 	bl	8005b78 <NVIC_EncodePriority>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ff5d 	bl	8005b24 <__NVIC_SetPriority>
}
 8005c6a:	bf00      	nop
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	4603      	mov	r3, r0
 8005c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff ff31 	bl	8005ae8 <__NVIC_EnableIRQ>
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff ffa2 	bl	8005be0 <SysTick_Config>
 8005c9c:	4603      	mov	r3, r0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005cb4:	f7ff fc54 	bl	8005560 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e099      	b.n	8005df8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ce4:	e00f      	b.n	8005d06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ce6:	f7ff fc3b 	bl	8005560 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b05      	cmp	r3, #5
 8005cf2:	d908      	bls.n	8005d06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e078      	b.n	8005df8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e8      	bne.n	8005ce6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4b38      	ldr	r3, [pc, #224]	; (8005e00 <HAL_DMA_Init+0x158>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d107      	bne.n	8005d70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 0307 	bic.w	r3, r3, #7
 8005d86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d117      	bne.n	8005dca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fa7b 	bl	80062a8 <DMA_CheckFifoParam>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2240      	movs	r2, #64	; 0x40
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e016      	b.n	8005df8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa32 	bl	800623c <DMA_CalcBaseAndBitshift>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de0:	223f      	movs	r2, #63	; 0x3f
 8005de2:	409a      	lsls	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	f010803f 	.word	0xf010803f

08005e04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e12:	f7ff fba5 	bl	8005560 <HAL_GetTick>
 8005e16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d008      	beq.n	8005e36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2280      	movs	r2, #128	; 0x80
 8005e28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e052      	b.n	8005edc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0216 	bic.w	r2, r2, #22
 8005e44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695a      	ldr	r2, [r3, #20]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <HAL_DMA_Abort+0x62>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0208 	bic.w	r2, r2, #8
 8005e74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e86:	e013      	b.n	8005eb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e88:	f7ff fb6a 	bl	8005560 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d90c      	bls.n	8005eb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e015      	b.n	8005edc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e4      	bne.n	8005e88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec2:	223f      	movs	r2, #63	; 0x3f
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d004      	beq.n	8005f02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e00c      	b.n	8005f1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2205      	movs	r2, #5
 8005f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f34:	4b92      	ldr	r3, [pc, #584]	; (8006180 <HAL_DMA_IRQHandler+0x258>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a92      	ldr	r2, [pc, #584]	; (8006184 <HAL_DMA_IRQHandler+0x25c>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	0a9b      	lsrs	r3, r3, #10
 8005f40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	2208      	movs	r2, #8
 8005f54:	409a      	lsls	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01a      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d013      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0204 	bic.w	r2, r2, #4
 8005f7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f80:	2208      	movs	r2, #8
 8005f82:	409a      	lsls	r2, r3
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	f043 0201 	orr.w	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f98:	2201      	movs	r2, #1
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d012      	beq.n	8005fca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fce:	2204      	movs	r2, #4
 8005fd0:	409a      	lsls	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d012      	beq.n	8006000 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fec:	2204      	movs	r2, #4
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff8:	f043 0204 	orr.w	r2, r3, #4
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006004:	2210      	movs	r2, #16
 8006006:	409a      	lsls	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d043      	beq.n	8006098 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d03c      	beq.n	8006098 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006022:	2210      	movs	r2, #16
 8006024:	409a      	lsls	r2, r3
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d018      	beq.n	800606a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d024      	beq.n	8006098 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
 8006056:	e01f      	b.n	8006098 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01b      	beq.n	8006098 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
 8006068:	e016      	b.n	8006098 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0208 	bic.w	r2, r2, #8
 8006086:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609c:	2220      	movs	r2, #32
 800609e:	409a      	lsls	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 808e 	beq.w	80061c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8086 	beq.w	80061c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	2220      	movs	r2, #32
 80060c0:	409a      	lsls	r2, r3
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d136      	bne.n	8006140 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0216 	bic.w	r2, r2, #22
 80060e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <HAL_DMA_IRQHandler+0x1da>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0208 	bic.w	r2, r2, #8
 8006110:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006116:	223f      	movs	r2, #63	; 0x3f
 8006118:	409a      	lsls	r2, r3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	2b00      	cmp	r3, #0
 8006134:	d07d      	beq.n	8006232 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
        }
        return;
 800613e:	e078      	b.n	8006232 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01c      	beq.n	8006188 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d108      	bne.n	800616e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006160:	2b00      	cmp	r3, #0
 8006162:	d030      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
 800616c:	e02b      	b.n	80061c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d027      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
 800617e:	e022      	b.n	80061c6 <HAL_DMA_IRQHandler+0x29e>
 8006180:	20000024 	.word	0x20000024
 8006184:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10f      	bne.n	80061b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0210 	bic.w	r2, r2, #16
 80061a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d032      	beq.n	8006234 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d022      	beq.n	8006220 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2205      	movs	r2, #5
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	3301      	adds	r3, #1
 80061f6:	60bb      	str	r3, [r7, #8]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d307      	bcc.n	800620e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f2      	bne.n	80061f2 <HAL_DMA_IRQHandler+0x2ca>
 800620c:	e000      	b.n	8006210 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800620e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
 8006230:	e000      	b.n	8006234 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006232:	bf00      	nop
    }
  }
}
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop

0800623c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	3b10      	subs	r3, #16
 800624c:	4a14      	ldr	r2, [pc, #80]	; (80062a0 <DMA_CalcBaseAndBitshift+0x64>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	091b      	lsrs	r3, r3, #4
 8006254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006256:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <DMA_CalcBaseAndBitshift+0x68>)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b03      	cmp	r3, #3
 8006268:	d909      	bls.n	800627e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006272:	f023 0303 	bic.w	r3, r3, #3
 8006276:	1d1a      	adds	r2, r3, #4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	659a      	str	r2, [r3, #88]	; 0x58
 800627c:	e007      	b.n	800628e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006286:	f023 0303 	bic.w	r3, r3, #3
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	aaaaaaab 	.word	0xaaaaaaab
 80062a4:	080f0820 	.word	0x080f0820

080062a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d11f      	bne.n	8006302 <DMA_CheckFifoParam+0x5a>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d856      	bhi.n	8006376 <DMA_CheckFifoParam+0xce>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <DMA_CheckFifoParam+0x28>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	080062f3 	.word	0x080062f3
 80062d8:	080062e1 	.word	0x080062e1
 80062dc:	08006377 	.word	0x08006377
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d046      	beq.n	800637a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f0:	e043      	b.n	800637a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062fa:	d140      	bne.n	800637e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006300:	e03d      	b.n	800637e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630a:	d121      	bne.n	8006350 <DMA_CheckFifoParam+0xa8>
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d837      	bhi.n	8006382 <DMA_CheckFifoParam+0xda>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <DMA_CheckFifoParam+0x70>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006329 	.word	0x08006329
 800631c:	0800632f 	.word	0x0800632f
 8006320:	08006329 	.word	0x08006329
 8006324:	08006341 	.word	0x08006341
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      break;
 800632c:	e030      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d025      	beq.n	8006386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800633e:	e022      	b.n	8006386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006348:	d11f      	bne.n	800638a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800634e:	e01c      	b.n	800638a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d903      	bls.n	800635e <DMA_CheckFifoParam+0xb6>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b03      	cmp	r3, #3
 800635a:	d003      	beq.n	8006364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800635c:	e018      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
      break;
 8006362:	e015      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00e      	beq.n	800638e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
      break;
 8006374:	e00b      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      break;
 8006376:	bf00      	nop
 8006378:	e00a      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
      break;
 800637a:	bf00      	nop
 800637c:	e008      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
      break;
 800637e:	bf00      	nop
 8006380:	e006      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
      break;
 8006382:	bf00      	nop
 8006384:	e004      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
      break;
 8006386:	bf00      	nop
 8006388:	e002      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
      break;   
 800638a:	bf00      	nop
 800638c:	e000      	b.n	8006390 <DMA_CheckFifoParam+0xe8>
      break;
 800638e:	bf00      	nop
    }
  } 
  
  return status; 
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop

080063a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b089      	sub	sp, #36	; 0x24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	e16b      	b.n	8006694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063bc:	2201      	movs	r2, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4013      	ands	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	f040 815a 	bne.w	800668e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d005      	beq.n	80063f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d130      	bne.n	8006454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	2203      	movs	r2, #3
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43db      	mvns	r3, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	4313      	orrs	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006428:	2201      	movs	r2, #1
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	43db      	mvns	r3, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4013      	ands	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 0201 	and.w	r2, r3, #1
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4313      	orrs	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	2b03      	cmp	r3, #3
 800645e:	d017      	beq.n	8006490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	2203      	movs	r2, #3
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 0303 	and.w	r3, r3, #3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d123      	bne.n	80064e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	08da      	lsrs	r2, r3, #3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3208      	adds	r2, #8
 80064a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	220f      	movs	r2, #15
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	43db      	mvns	r3, r3
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4013      	ands	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	08da      	lsrs	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3208      	adds	r2, #8
 80064de:	69b9      	ldr	r1, [r7, #24]
 80064e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	2203      	movs	r2, #3
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	43db      	mvns	r3, r3
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4013      	ands	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f003 0203 	and.w	r2, r3, #3
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4313      	orrs	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80b4 	beq.w	800668e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	4b60      	ldr	r3, [pc, #384]	; (80066ac <HAL_GPIO_Init+0x30c>)
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	4a5f      	ldr	r2, [pc, #380]	; (80066ac <HAL_GPIO_Init+0x30c>)
 8006530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006534:	6453      	str	r3, [r2, #68]	; 0x44
 8006536:	4b5d      	ldr	r3, [pc, #372]	; (80066ac <HAL_GPIO_Init+0x30c>)
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006542:	4a5b      	ldr	r2, [pc, #364]	; (80066b0 <HAL_GPIO_Init+0x310>)
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	089b      	lsrs	r3, r3, #2
 8006548:	3302      	adds	r3, #2
 800654a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800654e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	220f      	movs	r2, #15
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a52      	ldr	r2, [pc, #328]	; (80066b4 <HAL_GPIO_Init+0x314>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d02b      	beq.n	80065c6 <HAL_GPIO_Init+0x226>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a51      	ldr	r2, [pc, #324]	; (80066b8 <HAL_GPIO_Init+0x318>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d025      	beq.n	80065c2 <HAL_GPIO_Init+0x222>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a50      	ldr	r2, [pc, #320]	; (80066bc <HAL_GPIO_Init+0x31c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01f      	beq.n	80065be <HAL_GPIO_Init+0x21e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a4f      	ldr	r2, [pc, #316]	; (80066c0 <HAL_GPIO_Init+0x320>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d019      	beq.n	80065ba <HAL_GPIO_Init+0x21a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a4e      	ldr	r2, [pc, #312]	; (80066c4 <HAL_GPIO_Init+0x324>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <HAL_GPIO_Init+0x216>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a4d      	ldr	r2, [pc, #308]	; (80066c8 <HAL_GPIO_Init+0x328>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00d      	beq.n	80065b2 <HAL_GPIO_Init+0x212>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a4c      	ldr	r2, [pc, #304]	; (80066cc <HAL_GPIO_Init+0x32c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d007      	beq.n	80065ae <HAL_GPIO_Init+0x20e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a4b      	ldr	r2, [pc, #300]	; (80066d0 <HAL_GPIO_Init+0x330>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d101      	bne.n	80065aa <HAL_GPIO_Init+0x20a>
 80065a6:	2307      	movs	r3, #7
 80065a8:	e00e      	b.n	80065c8 <HAL_GPIO_Init+0x228>
 80065aa:	2308      	movs	r3, #8
 80065ac:	e00c      	b.n	80065c8 <HAL_GPIO_Init+0x228>
 80065ae:	2306      	movs	r3, #6
 80065b0:	e00a      	b.n	80065c8 <HAL_GPIO_Init+0x228>
 80065b2:	2305      	movs	r3, #5
 80065b4:	e008      	b.n	80065c8 <HAL_GPIO_Init+0x228>
 80065b6:	2304      	movs	r3, #4
 80065b8:	e006      	b.n	80065c8 <HAL_GPIO_Init+0x228>
 80065ba:	2303      	movs	r3, #3
 80065bc:	e004      	b.n	80065c8 <HAL_GPIO_Init+0x228>
 80065be:	2302      	movs	r3, #2
 80065c0:	e002      	b.n	80065c8 <HAL_GPIO_Init+0x228>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <HAL_GPIO_Init+0x228>
 80065c6:	2300      	movs	r3, #0
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	f002 0203 	and.w	r2, r2, #3
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	4093      	lsls	r3, r2
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065d8:	4935      	ldr	r1, [pc, #212]	; (80066b0 <HAL_GPIO_Init+0x310>)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	089b      	lsrs	r3, r3, #2
 80065de:	3302      	adds	r3, #2
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065e6:	4b3b      	ldr	r3, [pc, #236]	; (80066d4 <HAL_GPIO_Init+0x334>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4013      	ands	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800660a:	4a32      	ldr	r2, [pc, #200]	; (80066d4 <HAL_GPIO_Init+0x334>)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006610:	4b30      	ldr	r3, [pc, #192]	; (80066d4 <HAL_GPIO_Init+0x334>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006634:	4a27      	ldr	r2, [pc, #156]	; (80066d4 <HAL_GPIO_Init+0x334>)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800663a:	4b26      	ldr	r3, [pc, #152]	; (80066d4 <HAL_GPIO_Init+0x334>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	43db      	mvns	r3, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4013      	ands	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800665e:	4a1d      	ldr	r2, [pc, #116]	; (80066d4 <HAL_GPIO_Init+0x334>)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006664:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <HAL_GPIO_Init+0x334>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	43db      	mvns	r3, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006688:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <HAL_GPIO_Init+0x334>)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	3301      	adds	r3, #1
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	f67f ae90 	bls.w	80063bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3724      	adds	r7, #36	; 0x24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40013800 	.word	0x40013800
 80066b4:	40020000 	.word	0x40020000
 80066b8:	40020400 	.word	0x40020400
 80066bc:	40020800 	.word	0x40020800
 80066c0:	40020c00 	.word	0x40020c00
 80066c4:	40021000 	.word	0x40021000
 80066c8:	40021400 	.word	0x40021400
 80066cc:	40021800 	.word	0x40021800
 80066d0:	40021c00 	.word	0x40021c00
 80066d4:	40013c00 	.word	0x40013c00

080066d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	887b      	ldrh	r3, [r7, #2]
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
 80066f4:	e001      	b.n	80066fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	807b      	strh	r3, [r7, #2]
 8006714:	4613      	mov	r3, r2
 8006716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006718:	787b      	ldrb	r3, [r7, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800671e:	887a      	ldrh	r2, [r7, #2]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006724:	e003      	b.n	800672e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006726:	887b      	ldrh	r3, [r7, #2]
 8006728:	041a      	lsls	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	619a      	str	r2, [r3, #24]
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800674c:	887a      	ldrh	r2, [r7, #2]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4013      	ands	r3, r2
 8006752:	041a      	lsls	r2, r3, #16
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	43d9      	mvns	r1, r3
 8006758:	887b      	ldrh	r3, [r7, #2]
 800675a:	400b      	ands	r3, r1
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	619a      	str	r2, [r3, #24]
}
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e12b      	b.n	80069da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fd fae8 	bl	8003d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2224      	movs	r2, #36	; 0x24
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067d4:	f001 fbd8 	bl	8007f88 <HAL_RCC_GetPCLK1Freq>
 80067d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4a81      	ldr	r2, [pc, #516]	; (80069e4 <HAL_I2C_Init+0x274>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d807      	bhi.n	80067f4 <HAL_I2C_Init+0x84>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a80      	ldr	r2, [pc, #512]	; (80069e8 <HAL_I2C_Init+0x278>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	bf94      	ite	ls
 80067ec:	2301      	movls	r3, #1
 80067ee:	2300      	movhi	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e006      	b.n	8006802 <HAL_I2C_Init+0x92>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a7d      	ldr	r2, [pc, #500]	; (80069ec <HAL_I2C_Init+0x27c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	bf94      	ite	ls
 80067fc:	2301      	movls	r3, #1
 80067fe:	2300      	movhi	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e0e7      	b.n	80069da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4a78      	ldr	r2, [pc, #480]	; (80069f0 <HAL_I2C_Init+0x280>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	0c9b      	lsrs	r3, r3, #18
 8006814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	4a6a      	ldr	r2, [pc, #424]	; (80069e4 <HAL_I2C_Init+0x274>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d802      	bhi.n	8006844 <HAL_I2C_Init+0xd4>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	3301      	adds	r3, #1
 8006842:	e009      	b.n	8006858 <HAL_I2C_Init+0xe8>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800684a:	fb02 f303 	mul.w	r3, r2, r3
 800684e:	4a69      	ldr	r2, [pc, #420]	; (80069f4 <HAL_I2C_Init+0x284>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	099b      	lsrs	r3, r3, #6
 8006856:	3301      	adds	r3, #1
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	430b      	orrs	r3, r1
 800685e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800686a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	495c      	ldr	r1, [pc, #368]	; (80069e4 <HAL_I2C_Init+0x274>)
 8006874:	428b      	cmp	r3, r1
 8006876:	d819      	bhi.n	80068ac <HAL_I2C_Init+0x13c>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	1e59      	subs	r1, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	fbb1 f3f3 	udiv	r3, r1, r3
 8006886:	1c59      	adds	r1, r3, #1
 8006888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800688c:	400b      	ands	r3, r1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <HAL_I2C_Init+0x138>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	1e59      	subs	r1, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	fbb1 f3f3 	udiv	r3, r1, r3
 80068a0:	3301      	adds	r3, #1
 80068a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a6:	e051      	b.n	800694c <HAL_I2C_Init+0x1dc>
 80068a8:	2304      	movs	r3, #4
 80068aa:	e04f      	b.n	800694c <HAL_I2C_Init+0x1dc>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d111      	bne.n	80068d8 <HAL_I2C_Init+0x168>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	1e58      	subs	r0, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6859      	ldr	r1, [r3, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	440b      	add	r3, r1
 80068c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068c6:	3301      	adds	r3, #1
 80068c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e012      	b.n	80068fe <HAL_I2C_Init+0x18e>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	1e58      	subs	r0, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6859      	ldr	r1, [r3, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	0099      	lsls	r1, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ee:	3301      	adds	r3, #1
 80068f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_I2C_Init+0x196>
 8006902:	2301      	movs	r3, #1
 8006904:	e022      	b.n	800694c <HAL_I2C_Init+0x1dc>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10e      	bne.n	800692c <HAL_I2C_Init+0x1bc>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1e58      	subs	r0, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6859      	ldr	r1, [r3, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	440b      	add	r3, r1
 800691c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006920:	3301      	adds	r3, #1
 8006922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	e00f      	b.n	800694c <HAL_I2C_Init+0x1dc>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1e58      	subs	r0, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	0099      	lsls	r1, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006942:	3301      	adds	r3, #1
 8006944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	6809      	ldr	r1, [r1, #0]
 8006950:	4313      	orrs	r3, r2
 8006952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69da      	ldr	r2, [r3, #28]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800697a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6911      	ldr	r1, [r2, #16]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68d2      	ldr	r2, [r2, #12]
 8006986:	4311      	orrs	r1, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	430b      	orrs	r3, r1
 800698e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	000186a0 	.word	0x000186a0
 80069e8:	001e847f 	.word	0x001e847f
 80069ec:	003d08ff 	.word	0x003d08ff
 80069f0:	431bde83 	.word	0x431bde83
 80069f4:	10624dd3 	.word	0x10624dd3

080069f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	4608      	mov	r0, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	461a      	mov	r2, r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	817b      	strh	r3, [r7, #10]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	813b      	strh	r3, [r7, #8]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a12:	f7fe fda5 	bl	8005560 <HAL_GetTick>
 8006a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	f040 80d9 	bne.w	8006bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2319      	movs	r3, #25
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	496d      	ldr	r1, [pc, #436]	; (8006be4 <HAL_I2C_Mem_Write+0x1ec>)
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fc7f 	bl	8007334 <I2C_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e0cc      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_I2C_Mem_Write+0x56>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e0c5      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d007      	beq.n	8006a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2221      	movs	r2, #33	; 0x21
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2240      	movs	r2, #64	; 0x40
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a3a      	ldr	r2, [r7, #32]
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a4d      	ldr	r2, [pc, #308]	; (8006be8 <HAL_I2C_Mem_Write+0x1f0>)
 8006ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ab6:	88f8      	ldrh	r0, [r7, #6]
 8006ab8:	893a      	ldrh	r2, [r7, #8]
 8006aba:	8979      	ldrh	r1, [r7, #10]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fab6 	bl	8007038 <I2C_RequestMemoryWrite>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d052      	beq.n	8006b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e081      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fd00 	bl	80074e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d107      	bne.n	8006afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e06b      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	781a      	ldrb	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d11b      	bne.n	8006b78 <HAL_I2C_Mem_Write+0x180>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d017      	beq.n	8006b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1aa      	bne.n	8006ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fcec 	bl	8007562 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00d      	beq.n	8006bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d107      	bne.n	8006ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e016      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	00100002 	.word	0x00100002
 8006be8:	ffff0000 	.word	0xffff0000

08006bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08c      	sub	sp, #48	; 0x30
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	817b      	strh	r3, [r7, #10]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	813b      	strh	r3, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c06:	f7fe fcab 	bl	8005560 <HAL_GetTick>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	f040 8208 	bne.w	800702a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	2319      	movs	r3, #25
 8006c20:	2201      	movs	r2, #1
 8006c22:	497b      	ldr	r1, [pc, #492]	; (8006e10 <HAL_I2C_Mem_Read+0x224>)
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fb85 	bl	8007334 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c30:	2302      	movs	r3, #2
 8006c32:	e1fb      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_I2C_Mem_Read+0x56>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e1f4      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d007      	beq.n	8006c68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2222      	movs	r2, #34	; 0x22
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2240      	movs	r2, #64	; 0x40
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	; (8006e14 <HAL_I2C_Mem_Read+0x228>)
 8006ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006caa:	88f8      	ldrh	r0, [r7, #6]
 8006cac:	893a      	ldrh	r2, [r7, #8]
 8006cae:	8979      	ldrh	r1, [r7, #10]
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	4603      	mov	r3, r0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fa52 	bl	8007164 <I2C_RequestMemoryRead>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e1b0      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d113      	bne.n	8006cfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	623b      	str	r3, [r7, #32]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	623b      	str	r3, [r7, #32]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e184      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d11b      	bne.n	8006d3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	e164      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d11b      	bne.n	8006d7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d62:	2300      	movs	r3, #0
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	e144      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d90:	e138      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	f200 80f1 	bhi.w	8006f7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d123      	bne.n	8006dec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fc1b 	bl	80075e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e139      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dea:	e10b      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d14e      	bne.n	8006e92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4906      	ldr	r1, [pc, #24]	; (8006e18 <HAL_I2C_Mem_Read+0x22c>)
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fa98 	bl	8007334 <I2C_WaitOnFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d008      	beq.n	8006e1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e10e      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
 8006e0e:	bf00      	nop
 8006e10:	00100002 	.word	0x00100002
 8006e14:	ffff0000 	.word	0xffff0000
 8006e18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691a      	ldr	r2, [r3, #16]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e90:	e0b8      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4966      	ldr	r1, [pc, #408]	; (8007034 <HAL_I2C_Mem_Read+0x448>)
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fa49 	bl	8007334 <I2C_WaitOnFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0bf      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	494f      	ldr	r1, [pc, #316]	; (8007034 <HAL_I2C_Mem_Read+0x448>)
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fa1b 	bl	8007334 <I2C_WaitOnFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e091      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f7c:	e042      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 fb2e 	bl	80075e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e04c      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d118      	bne.n	8007004 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	f47f aec2 	bne.w	8006d92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	e000      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
  }
}
 800702c:	4618      	mov	r0, r3
 800702e:	3728      	adds	r7, #40	; 0x28
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	00010004 	.word	0x00010004

08007038 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af02      	add	r7, sp, #8
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	461a      	mov	r2, r3
 8007046:	4603      	mov	r3, r0
 8007048:	817b      	strh	r3, [r7, #10]
 800704a:	460b      	mov	r3, r1
 800704c:	813b      	strh	r3, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	2200      	movs	r2, #0
 800706a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f960 	bl	8007334 <I2C_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00d      	beq.n	8007096 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007088:	d103      	bne.n	8007092 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e05f      	b.n	8007156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007096:	897b      	ldrh	r3, [r7, #10]
 8007098:	b2db      	uxtb	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	492d      	ldr	r1, [pc, #180]	; (8007160 <I2C_RequestMemoryWrite+0x128>)
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f998 	bl	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e04c      	b.n	8007156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d4:	6a39      	ldr	r1, [r7, #32]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fa02 	bl	80074e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00d      	beq.n	80070fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d107      	bne.n	80070fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e02b      	b.n	8007156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d105      	bne.n	8007110 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007104:	893b      	ldrh	r3, [r7, #8]
 8007106:	b2da      	uxtb	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	611a      	str	r2, [r3, #16]
 800710e:	e021      	b.n	8007154 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007110:	893b      	ldrh	r3, [r7, #8]
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	b29b      	uxth	r3, r3
 8007116:	b2da      	uxtb	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800711e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007120:	6a39      	ldr	r1, [r7, #32]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f9dc 	bl	80074e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00d      	beq.n	800714a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	2b04      	cmp	r3, #4
 8007134:	d107      	bne.n	8007146 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e005      	b.n	8007156 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800714a:	893b      	ldrh	r3, [r7, #8]
 800714c:	b2da      	uxtb	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	00010002 	.word	0x00010002

08007164 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	461a      	mov	r2, r3
 8007172:	4603      	mov	r3, r0
 8007174:	817b      	strh	r3, [r7, #10]
 8007176:	460b      	mov	r3, r1
 8007178:	813b      	strh	r3, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800718c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800719c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f8c2 	bl	8007334 <I2C_WaitOnFlagUntilTimeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c4:	d103      	bne.n	80071ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e0aa      	b.n	8007328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071d2:	897b      	ldrh	r3, [r7, #10]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	461a      	mov	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	4952      	ldr	r1, [pc, #328]	; (8007330 <I2C_RequestMemoryRead+0x1cc>)
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f8fa 	bl	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e097      	b.n	8007328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800720e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007210:	6a39      	ldr	r1, [r7, #32]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 f964 	bl	80074e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00d      	beq.n	800723a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b04      	cmp	r3, #4
 8007224:	d107      	bne.n	8007236 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e076      	b.n	8007328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d105      	bne.n	800724c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007240:	893b      	ldrh	r3, [r7, #8]
 8007242:	b2da      	uxtb	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	611a      	str	r2, [r3, #16]
 800724a:	e021      	b.n	8007290 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800724c:	893b      	ldrh	r3, [r7, #8]
 800724e:	0a1b      	lsrs	r3, r3, #8
 8007250:	b29b      	uxth	r3, r3
 8007252:	b2da      	uxtb	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800725a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725c:	6a39      	ldr	r1, [r7, #32]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f93e 	bl	80074e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00d      	beq.n	8007286 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	2b04      	cmp	r3, #4
 8007270:	d107      	bne.n	8007282 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e050      	b.n	8007328 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007286:	893b      	ldrh	r3, [r7, #8]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007292:	6a39      	ldr	r1, [r7, #32]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f923 	bl	80074e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00d      	beq.n	80072bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d107      	bne.n	80072b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e035      	b.n	8007328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f82b 	bl	8007334 <I2C_WaitOnFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00d      	beq.n	8007300 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f2:	d103      	bne.n	80072fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e013      	b.n	8007328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007300:	897b      	ldrh	r3, [r7, #10]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	b2da      	uxtb	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	6a3a      	ldr	r2, [r7, #32]
 8007314:	4906      	ldr	r1, [pc, #24]	; (8007330 <I2C_RequestMemoryRead+0x1cc>)
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f863 	bl	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	00010002 	.word	0x00010002

08007334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	4613      	mov	r3, r2
 8007342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007344:	e025      	b.n	8007392 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d021      	beq.n	8007392 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800734e:	f7fe f907 	bl	8005560 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d302      	bcc.n	8007364 <I2C_WaitOnFlagUntilTimeout+0x30>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d116      	bne.n	8007392 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2220      	movs	r2, #32
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	f043 0220 	orr.w	r2, r3, #32
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e023      	b.n	80073da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	0c1b      	lsrs	r3, r3, #16
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b01      	cmp	r3, #1
 800739a:	d10d      	bne.n	80073b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	43da      	mvns	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4013      	ands	r3, r2
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bf0c      	ite	eq
 80073ae:	2301      	moveq	r3, #1
 80073b0:	2300      	movne	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	e00c      	b.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	43da      	mvns	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4013      	ands	r3, r2
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bf0c      	ite	eq
 80073ca:	2301      	moveq	r3, #1
 80073cc:	2300      	movne	r3, #0
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d0b6      	beq.n	8007346 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073f0:	e051      	b.n	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007400:	d123      	bne.n	800744a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007410:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800741a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f043 0204 	orr.w	r2, r3, #4
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e046      	b.n	80074d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d021      	beq.n	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007452:	f7fe f885 	bl	8005560 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	429a      	cmp	r2, r3
 8007460:	d302      	bcc.n	8007468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d116      	bne.n	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f043 0220 	orr.w	r2, r3, #32
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e020      	b.n	80074d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b01      	cmp	r3, #1
 800749e:	d10c      	bne.n	80074ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	43da      	mvns	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4013      	ands	r3, r2
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	e00b      	b.n	80074d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	43da      	mvns	r2, r3
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	4013      	ands	r3, r2
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bf14      	ite	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	2300      	moveq	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d18d      	bne.n	80073f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074ec:	e02d      	b.n	800754a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 f8ce 	bl	8007690 <I2C_IsAcknowledgeFailed>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e02d      	b.n	800755a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d021      	beq.n	800754a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007506:	f7fe f82b 	bl	8005560 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d116      	bne.n	800754a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f043 0220 	orr.w	r2, r3, #32
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e007      	b.n	800755a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007554:	2b80      	cmp	r3, #128	; 0x80
 8007556:	d1ca      	bne.n	80074ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800756e:	e02d      	b.n	80075cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f88d 	bl	8007690 <I2C_IsAcknowledgeFailed>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e02d      	b.n	80075dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007586:	d021      	beq.n	80075cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007588:	f7fd ffea 	bl	8005560 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	429a      	cmp	r2, r3
 8007596:	d302      	bcc.n	800759e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d116      	bne.n	80075cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	f043 0220 	orr.w	r2, r3, #32
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e007      	b.n	80075dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d1ca      	bne.n	8007570 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075f0:	e042      	b.n	8007678 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d119      	bne.n	8007634 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0210 	mvn.w	r2, #16
 8007608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e029      	b.n	8007688 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007634:	f7fd ff94 	bl	8005560 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	429a      	cmp	r2, r3
 8007642:	d302      	bcc.n	800764a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d116      	bne.n	8007678 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	f043 0220 	orr.w	r2, r3, #32
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e007      	b.n	8007688 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d1b5      	bne.n	80075f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a6:	d11b      	bne.n	80076e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	f043 0204 	orr.w	r2, r3, #4
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e264      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d075      	beq.n	80077fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800770e:	4ba3      	ldr	r3, [pc, #652]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 030c 	and.w	r3, r3, #12
 8007716:	2b04      	cmp	r3, #4
 8007718:	d00c      	beq.n	8007734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800771a:	4ba0      	ldr	r3, [pc, #640]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007722:	2b08      	cmp	r3, #8
 8007724:	d112      	bne.n	800774c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007726:	4b9d      	ldr	r3, [pc, #628]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800772e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007732:	d10b      	bne.n	800774c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007734:	4b99      	ldr	r3, [pc, #612]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d05b      	beq.n	80077f8 <HAL_RCC_OscConfig+0x108>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d157      	bne.n	80077f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e23f      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007754:	d106      	bne.n	8007764 <HAL_RCC_OscConfig+0x74>
 8007756:	4b91      	ldr	r3, [pc, #580]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a90      	ldr	r2, [pc, #576]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800775c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	e01d      	b.n	80077a0 <HAL_RCC_OscConfig+0xb0>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800776c:	d10c      	bne.n	8007788 <HAL_RCC_OscConfig+0x98>
 800776e:	4b8b      	ldr	r3, [pc, #556]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a8a      	ldr	r2, [pc, #552]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	4b88      	ldr	r3, [pc, #544]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a87      	ldr	r2, [pc, #540]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	e00b      	b.n	80077a0 <HAL_RCC_OscConfig+0xb0>
 8007788:	4b84      	ldr	r3, [pc, #528]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a83      	ldr	r2, [pc, #524]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800778e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	4b81      	ldr	r3, [pc, #516]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a80      	ldr	r2, [pc, #512]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800779a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d013      	beq.n	80077d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a8:	f7fd feda 	bl	8005560 <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077b0:	f7fd fed6 	bl	8005560 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b64      	cmp	r3, #100	; 0x64
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e204      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077c2:	4b76      	ldr	r3, [pc, #472]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0f0      	beq.n	80077b0 <HAL_RCC_OscConfig+0xc0>
 80077ce:	e014      	b.n	80077fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d0:	f7fd fec6 	bl	8005560 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077d8:	f7fd fec2 	bl	8005560 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b64      	cmp	r3, #100	; 0x64
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e1f0      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ea:	4b6c      	ldr	r3, [pc, #432]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0xe8>
 80077f6:	e000      	b.n	80077fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d063      	beq.n	80078ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007806:	4b65      	ldr	r3, [pc, #404]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007812:	4b62      	ldr	r3, [pc, #392]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800781a:	2b08      	cmp	r3, #8
 800781c:	d11c      	bne.n	8007858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800781e:	4b5f      	ldr	r3, [pc, #380]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d116      	bne.n	8007858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800782a:	4b5c      	ldr	r3, [pc, #368]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <HAL_RCC_OscConfig+0x152>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d001      	beq.n	8007842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e1c4      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007842:	4b56      	ldr	r3, [pc, #344]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	4952      	ldr	r1, [pc, #328]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007852:	4313      	orrs	r3, r2
 8007854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007856:	e03a      	b.n	80078ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d020      	beq.n	80078a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007860:	4b4f      	ldr	r3, [pc, #316]	; (80079a0 <HAL_RCC_OscConfig+0x2b0>)
 8007862:	2201      	movs	r2, #1
 8007864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007866:	f7fd fe7b 	bl	8005560 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800786c:	e008      	b.n	8007880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800786e:	f7fd fe77 	bl	8005560 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e1a5      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007880:	4b46      	ldr	r3, [pc, #280]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0f0      	beq.n	800786e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800788c:	4b43      	ldr	r3, [pc, #268]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	4940      	ldr	r1, [pc, #256]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800789c:	4313      	orrs	r3, r2
 800789e:	600b      	str	r3, [r1, #0]
 80078a0:	e015      	b.n	80078ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078a2:	4b3f      	ldr	r3, [pc, #252]	; (80079a0 <HAL_RCC_OscConfig+0x2b0>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fd fe5a 	bl	8005560 <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078b0:	f7fd fe56 	bl	8005560 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e184      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078c2:	4b36      	ldr	r3, [pc, #216]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d030      	beq.n	800793c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d016      	beq.n	8007910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078e2:	4b30      	ldr	r3, [pc, #192]	; (80079a4 <HAL_RCC_OscConfig+0x2b4>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e8:	f7fd fe3a 	bl	8005560 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078f0:	f7fd fe36 	bl	8005560 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e164      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007902:	4b26      	ldr	r3, [pc, #152]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f0      	beq.n	80078f0 <HAL_RCC_OscConfig+0x200>
 800790e:	e015      	b.n	800793c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007910:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <HAL_RCC_OscConfig+0x2b4>)
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007916:	f7fd fe23 	bl	8005560 <HAL_GetTick>
 800791a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800791c:	e008      	b.n	8007930 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800791e:	f7fd fe1f 	bl	8005560 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e14d      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007930:	4b1a      	ldr	r3, [pc, #104]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f0      	bne.n	800791e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 80a0 	beq.w	8007a8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800794a:	2300      	movs	r3, #0
 800794c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10f      	bne.n	800797a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	4a0e      	ldr	r2, [pc, #56]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 8007964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007968:	6413      	str	r3, [r2, #64]	; 0x40
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <HAL_RCC_OscConfig+0x2ac>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007972:	60bb      	str	r3, [r7, #8]
 8007974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007976:	2301      	movs	r3, #1
 8007978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800797a:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <HAL_RCC_OscConfig+0x2b8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007982:	2b00      	cmp	r3, #0
 8007984:	d121      	bne.n	80079ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007986:	4b08      	ldr	r3, [pc, #32]	; (80079a8 <HAL_RCC_OscConfig+0x2b8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a07      	ldr	r2, [pc, #28]	; (80079a8 <HAL_RCC_OscConfig+0x2b8>)
 800798c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007992:	f7fd fde5 	bl	8005560 <HAL_GetTick>
 8007996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007998:	e011      	b.n	80079be <HAL_RCC_OscConfig+0x2ce>
 800799a:	bf00      	nop
 800799c:	40023800 	.word	0x40023800
 80079a0:	42470000 	.word	0x42470000
 80079a4:	42470e80 	.word	0x42470e80
 80079a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ac:	f7fd fdd8 	bl	8005560 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e106      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079be:	4b85      	ldr	r3, [pc, #532]	; (8007bd4 <HAL_RCC_OscConfig+0x4e4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d106      	bne.n	80079e0 <HAL_RCC_OscConfig+0x2f0>
 80079d2:	4b81      	ldr	r3, [pc, #516]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d6:	4a80      	ldr	r2, [pc, #512]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079d8:	f043 0301 	orr.w	r3, r3, #1
 80079dc:	6713      	str	r3, [r2, #112]	; 0x70
 80079de:	e01c      	b.n	8007a1a <HAL_RCC_OscConfig+0x32a>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d10c      	bne.n	8007a02 <HAL_RCC_OscConfig+0x312>
 80079e8:	4b7b      	ldr	r3, [pc, #492]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ec:	4a7a      	ldr	r2, [pc, #488]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079ee:	f043 0304 	orr.w	r3, r3, #4
 80079f2:	6713      	str	r3, [r2, #112]	; 0x70
 80079f4:	4b78      	ldr	r3, [pc, #480]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f8:	4a77      	ldr	r2, [pc, #476]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 80079fa:	f043 0301 	orr.w	r3, r3, #1
 80079fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007a00:	e00b      	b.n	8007a1a <HAL_RCC_OscConfig+0x32a>
 8007a02:	4b75      	ldr	r3, [pc, #468]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	4a74      	ldr	r2, [pc, #464]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a08:	f023 0301 	bic.w	r3, r3, #1
 8007a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a0e:	4b72      	ldr	r3, [pc, #456]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	4a71      	ldr	r2, [pc, #452]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a14:	f023 0304 	bic.w	r3, r3, #4
 8007a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d015      	beq.n	8007a4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a22:	f7fd fd9d 	bl	8005560 <HAL_GetTick>
 8007a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a28:	e00a      	b.n	8007a40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a2a:	f7fd fd99 	bl	8005560 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e0c5      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a40:	4b65      	ldr	r3, [pc, #404]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0ee      	beq.n	8007a2a <HAL_RCC_OscConfig+0x33a>
 8007a4c:	e014      	b.n	8007a78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a4e:	f7fd fd87 	bl	8005560 <HAL_GetTick>
 8007a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a54:	e00a      	b.n	8007a6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a56:	f7fd fd83 	bl	8005560 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d901      	bls.n	8007a6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e0af      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a6c:	4b5a      	ldr	r3, [pc, #360]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ee      	bne.n	8007a56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d105      	bne.n	8007a8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a7e:	4b56      	ldr	r3, [pc, #344]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	4a55      	ldr	r2, [pc, #340]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 809b 	beq.w	8007bca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a94:	4b50      	ldr	r3, [pc, #320]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 030c 	and.w	r3, r3, #12
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d05c      	beq.n	8007b5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d141      	bne.n	8007b2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa8:	4b4c      	ldr	r3, [pc, #304]	; (8007bdc <HAL_RCC_OscConfig+0x4ec>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aae:	f7fd fd57 	bl	8005560 <HAL_GetTick>
 8007ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab4:	e008      	b.n	8007ac8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ab6:	f7fd fd53 	bl	8005560 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d901      	bls.n	8007ac8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e081      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac8:	4b43      	ldr	r3, [pc, #268]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1f0      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	019b      	lsls	r3, r3, #6
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	3b01      	subs	r3, #1
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	431a      	orrs	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	061b      	lsls	r3, r3, #24
 8007af8:	4937      	ldr	r1, [pc, #220]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007afe:	4b37      	ldr	r3, [pc, #220]	; (8007bdc <HAL_RCC_OscConfig+0x4ec>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b04:	f7fd fd2c 	bl	8005560 <HAL_GetTick>
 8007b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b0a:	e008      	b.n	8007b1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b0c:	f7fd fd28 	bl	8005560 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e056      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b1e:	4b2e      	ldr	r3, [pc, #184]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0f0      	beq.n	8007b0c <HAL_RCC_OscConfig+0x41c>
 8007b2a:	e04e      	b.n	8007bca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b2c:	4b2b      	ldr	r3, [pc, #172]	; (8007bdc <HAL_RCC_OscConfig+0x4ec>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b32:	f7fd fd15 	bl	8005560 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b38:	e008      	b.n	8007b4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b3a:	f7fd fd11 	bl	8005560 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d901      	bls.n	8007b4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e03f      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b4c:	4b22      	ldr	r3, [pc, #136]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1f0      	bne.n	8007b3a <HAL_RCC_OscConfig+0x44a>
 8007b58:	e037      	b.n	8007bca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e032      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b66:	4b1c      	ldr	r3, [pc, #112]	; (8007bd8 <HAL_RCC_OscConfig+0x4e8>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d028      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d121      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d11a      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b96:	4013      	ands	r3, r2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d111      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d107      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d001      	beq.n	8007bca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40007000 	.word	0x40007000
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	42470060 	.word	0x42470060

08007be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0cc      	b.n	8007d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bf4:	4b68      	ldr	r3, [pc, #416]	; (8007d98 <HAL_RCC_ClockConfig+0x1b8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d90c      	bls.n	8007c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c02:	4b65      	ldr	r3, [pc, #404]	; (8007d98 <HAL_RCC_ClockConfig+0x1b8>)
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c0a:	4b63      	ldr	r3, [pc, #396]	; (8007d98 <HAL_RCC_ClockConfig+0x1b8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d001      	beq.n	8007c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e0b8      	b.n	8007d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d020      	beq.n	8007c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c34:	4b59      	ldr	r3, [pc, #356]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	4a58      	ldr	r2, [pc, #352]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c4c:	4b53      	ldr	r3, [pc, #332]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	4a52      	ldr	r2, [pc, #328]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c58:	4b50      	ldr	r3, [pc, #320]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	494d      	ldr	r1, [pc, #308]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d044      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d107      	bne.n	8007c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c7e:	4b47      	ldr	r3, [pc, #284]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d119      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e07f      	b.n	8007d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d003      	beq.n	8007c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d107      	bne.n	8007cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c9e:	4b3f      	ldr	r3, [pc, #252]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d109      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e06f      	b.n	8007d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cae:	4b3b      	ldr	r3, [pc, #236]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e067      	b.n	8007d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cbe:	4b37      	ldr	r3, [pc, #220]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f023 0203 	bic.w	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	4934      	ldr	r1, [pc, #208]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cd0:	f7fd fc46 	bl	8005560 <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cd6:	e00a      	b.n	8007cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd8:	f7fd fc42 	bl	8005560 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e04f      	b.n	8007d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cee:	4b2b      	ldr	r3, [pc, #172]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 020c 	and.w	r2, r3, #12
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d1eb      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d00:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <HAL_RCC_ClockConfig+0x1b8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d20c      	bcs.n	8007d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0e:	4b22      	ldr	r3, [pc, #136]	; (8007d98 <HAL_RCC_ClockConfig+0x1b8>)
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d16:	4b20      	ldr	r3, [pc, #128]	; (8007d98 <HAL_RCC_ClockConfig+0x1b8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d001      	beq.n	8007d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e032      	b.n	8007d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d008      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d34:	4b19      	ldr	r3, [pc, #100]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	4916      	ldr	r1, [pc, #88]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0308 	and.w	r3, r3, #8
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d009      	beq.n	8007d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d52:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	490e      	ldr	r1, [pc, #56]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d66:	f000 f821 	bl	8007dac <HAL_RCC_GetSysClockFreq>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	091b      	lsrs	r3, r3, #4
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	490a      	ldr	r1, [pc, #40]	; (8007da0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d78:	5ccb      	ldrb	r3, [r1, r3]
 8007d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7e:	4a09      	ldr	r2, [pc, #36]	; (8007da4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d82:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <HAL_RCC_ClockConfig+0x1c8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fd fba6 	bl	80054d8 <HAL_InitTick>

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	40023c00 	.word	0x40023c00
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	080f0808 	.word	0x080f0808
 8007da4:	20000024 	.word	0x20000024
 8007da8:	20000060 	.word	0x20000060

08007dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	607b      	str	r3, [r7, #4]
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dc4:	4b67      	ldr	r3, [pc, #412]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 030c 	and.w	r3, r3, #12
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d00d      	beq.n	8007dec <HAL_RCC_GetSysClockFreq+0x40>
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	f200 80bd 	bhi.w	8007f50 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <HAL_RCC_GetSysClockFreq+0x34>
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d003      	beq.n	8007de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007dde:	e0b7      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007de0:	4b61      	ldr	r3, [pc, #388]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007de2:	60bb      	str	r3, [r7, #8]
       break;
 8007de4:	e0b7      	b.n	8007f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007de6:	4b61      	ldr	r3, [pc, #388]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007de8:	60bb      	str	r3, [r7, #8]
      break;
 8007dea:	e0b4      	b.n	8007f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dec:	4b5d      	ldr	r3, [pc, #372]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007df4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007df6:	4b5b      	ldr	r3, [pc, #364]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d04d      	beq.n	8007e9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e02:	4b58      	ldr	r3, [pc, #352]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e12:	f04f 0100 	mov.w	r1, #0
 8007e16:	ea02 0800 	and.w	r8, r2, r0
 8007e1a:	ea03 0901 	and.w	r9, r3, r1
 8007e1e:	4640      	mov	r0, r8
 8007e20:	4649      	mov	r1, r9
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	014b      	lsls	r3, r1, #5
 8007e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e30:	0142      	lsls	r2, r0, #5
 8007e32:	4610      	mov	r0, r2
 8007e34:	4619      	mov	r1, r3
 8007e36:	ebb0 0008 	subs.w	r0, r0, r8
 8007e3a:	eb61 0109 	sbc.w	r1, r1, r9
 8007e3e:	f04f 0200 	mov.w	r2, #0
 8007e42:	f04f 0300 	mov.w	r3, #0
 8007e46:	018b      	lsls	r3, r1, #6
 8007e48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e4c:	0182      	lsls	r2, r0, #6
 8007e4e:	1a12      	subs	r2, r2, r0
 8007e50:	eb63 0301 	sbc.w	r3, r3, r1
 8007e54:	f04f 0000 	mov.w	r0, #0
 8007e58:	f04f 0100 	mov.w	r1, #0
 8007e5c:	00d9      	lsls	r1, r3, #3
 8007e5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e62:	00d0      	lsls	r0, r2, #3
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	eb12 0208 	adds.w	r2, r2, r8
 8007e6c:	eb43 0309 	adc.w	r3, r3, r9
 8007e70:	f04f 0000 	mov.w	r0, #0
 8007e74:	f04f 0100 	mov.w	r1, #0
 8007e78:	0259      	lsls	r1, r3, #9
 8007e7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007e7e:	0250      	lsls	r0, r2, #9
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4610      	mov	r0, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	f7f8 fef2 	bl	8000c78 <__aeabi_uldivmod>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4613      	mov	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	e04a      	b.n	8007f34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e9e:	4b31      	ldr	r3, [pc, #196]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	099b      	lsrs	r3, r3, #6
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007eae:	f04f 0100 	mov.w	r1, #0
 8007eb2:	ea02 0400 	and.w	r4, r2, r0
 8007eb6:	ea03 0501 	and.w	r5, r3, r1
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	014b      	lsls	r3, r1, #5
 8007ec8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ecc:	0142      	lsls	r2, r0, #5
 8007ece:	4610      	mov	r0, r2
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	1b00      	subs	r0, r0, r4
 8007ed4:	eb61 0105 	sbc.w	r1, r1, r5
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	018b      	lsls	r3, r1, #6
 8007ee2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ee6:	0182      	lsls	r2, r0, #6
 8007ee8:	1a12      	subs	r2, r2, r0
 8007eea:	eb63 0301 	sbc.w	r3, r3, r1
 8007eee:	f04f 0000 	mov.w	r0, #0
 8007ef2:	f04f 0100 	mov.w	r1, #0
 8007ef6:	00d9      	lsls	r1, r3, #3
 8007ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007efc:	00d0      	lsls	r0, r2, #3
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	1912      	adds	r2, r2, r4
 8007f04:	eb45 0303 	adc.w	r3, r5, r3
 8007f08:	f04f 0000 	mov.w	r0, #0
 8007f0c:	f04f 0100 	mov.w	r1, #0
 8007f10:	0299      	lsls	r1, r3, #10
 8007f12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f16:	0290      	lsls	r0, r2, #10
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	f7f8 fea6 	bl	8000c78 <__aeabi_uldivmod>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4613      	mov	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f34:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	0c1b      	lsrs	r3, r3, #16
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	3301      	adds	r3, #1
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4c:	60bb      	str	r3, [r7, #8]
      break;
 8007f4e:	e002      	b.n	8007f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f52:	60bb      	str	r3, [r7, #8]
      break;
 8007f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f56:	68bb      	ldr	r3, [r7, #8]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007f62:	bf00      	nop
 8007f64:	40023800 	.word	0x40023800
 8007f68:	00f42400 	.word	0x00f42400
 8007f6c:	007a1200 	.word	0x007a1200

08007f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f74:	4b03      	ldr	r3, [pc, #12]	; (8007f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f76:	681b      	ldr	r3, [r3, #0]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20000024 	.word	0x20000024

08007f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f8c:	f7ff fff0 	bl	8007f70 <HAL_RCC_GetHCLKFreq>
 8007f90:	4602      	mov	r2, r0
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	0a9b      	lsrs	r3, r3, #10
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	4903      	ldr	r1, [pc, #12]	; (8007fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f9e:	5ccb      	ldrb	r3, [r1, r3]
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	40023800 	.word	0x40023800
 8007fac:	080f0818 	.word	0x080f0818

08007fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007fb4:	f7ff ffdc 	bl	8007f70 <HAL_RCC_GetHCLKFreq>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	0b5b      	lsrs	r3, r3, #13
 8007fc0:	f003 0307 	and.w	r3, r3, #7
 8007fc4:	4903      	ldr	r1, [pc, #12]	; (8007fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fc6:	5ccb      	ldrb	r3, [r1, r3]
 8007fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40023800 	.word	0x40023800
 8007fd4:	080f0818 	.word	0x080f0818

08007fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e07b      	b.n	80080e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d108      	bne.n	8008004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ffa:	d009      	beq.n	8008010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	61da      	str	r2, [r3, #28]
 8008002:	e005      	b.n	8008010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d106      	bne.n	8008030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7fb fee6 	bl	8003dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008062:	431a      	orrs	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	431a      	orrs	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008094:	ea42 0103 	orr.w	r1, r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	0c1b      	lsrs	r3, r3, #16
 80080ae:	f003 0104 	and.w	r1, r3, #4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	f003 0210 	and.w	r2, r3, #16
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69da      	ldr	r2, [r3, #28]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b088      	sub	sp, #32
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	603b      	str	r3, [r7, #0]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_SPI_Transmit+0x22>
 8008108:	2302      	movs	r3, #2
 800810a:	e126      	b.n	800835a <HAL_SPI_Transmit+0x270>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008114:	f7fd fa24 	bl	8005560 <HAL_GetTick>
 8008118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b01      	cmp	r3, #1
 8008128:	d002      	beq.n	8008130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800812a:	2302      	movs	r3, #2
 800812c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800812e:	e10b      	b.n	8008348 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_SPI_Transmit+0x52>
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d102      	bne.n	8008142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008140:	e102      	b.n	8008348 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2203      	movs	r2, #3
 8008146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	88fa      	ldrh	r2, [r7, #6]
 800815a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	88fa      	ldrh	r2, [r7, #6]
 8008160:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008188:	d10f      	bne.n	80081aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b40      	cmp	r3, #64	; 0x40
 80081b6:	d007      	beq.n	80081c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d0:	d14b      	bne.n	800826a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <HAL_SPI_Transmit+0xf6>
 80081da:	8afb      	ldrh	r3, [r7, #22]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d13e      	bne.n	800825e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	881a      	ldrh	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	1c9a      	adds	r2, r3, #2
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008204:	e02b      	b.n	800825e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b02      	cmp	r3, #2
 8008212:	d112      	bne.n	800823a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	881a      	ldrh	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008224:	1c9a      	adds	r2, r3, #2
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	86da      	strh	r2, [r3, #54]	; 0x36
 8008238:	e011      	b.n	800825e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800823a:	f7fd f991 	bl	8005560 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d803      	bhi.n	8008252 <HAL_SPI_Transmit+0x168>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008250:	d102      	bne.n	8008258 <HAL_SPI_Transmit+0x16e>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800825c:	e074      	b.n	8008348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1ce      	bne.n	8008206 <HAL_SPI_Transmit+0x11c>
 8008268:	e04c      	b.n	8008304 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <HAL_SPI_Transmit+0x18e>
 8008272:	8afb      	ldrh	r3, [r7, #22]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d140      	bne.n	80082fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	330c      	adds	r3, #12
 8008282:	7812      	ldrb	r2, [r2, #0]
 8008284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800829e:	e02c      	b.n	80082fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d113      	bne.n	80082d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	330c      	adds	r3, #12
 80082b8:	7812      	ldrb	r2, [r2, #0]
 80082ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80082d4:	e011      	b.n	80082fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082d6:	f7fd f943 	bl	8005560 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d803      	bhi.n	80082ee <HAL_SPI_Transmit+0x204>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d102      	bne.n	80082f4 <HAL_SPI_Transmit+0x20a>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082f8:	e026      	b.n	8008348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1cd      	bne.n	80082a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 f8b3 	bl	8008474 <SPI_EndRxTxTransaction>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008322:	2300      	movs	r3, #0
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	613b      	str	r3, [r7, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	613b      	str	r3, [r7, #16]
 8008336:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e000      	b.n	8008348 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008346:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008358:	7ffb      	ldrb	r3, [r7, #31]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008374:	f7fd f8f4 	bl	8005560 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	1a9b      	subs	r3, r3, r2
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	4413      	add	r3, r2
 8008382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008384:	f7fd f8ec 	bl	8005560 <HAL_GetTick>
 8008388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800838a:	4b39      	ldr	r3, [pc, #228]	; (8008470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	015b      	lsls	r3, r3, #5
 8008390:	0d1b      	lsrs	r3, r3, #20
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	fb02 f303 	mul.w	r3, r2, r3
 8008398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800839a:	e054      	b.n	8008446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a2:	d050      	beq.n	8008446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083a4:	f7fd f8dc 	bl	8005560 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	69fa      	ldr	r2, [r7, #28]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d902      	bls.n	80083ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d13d      	bne.n	8008436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083d2:	d111      	bne.n	80083f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083dc:	d004      	beq.n	80083e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e6:	d107      	bne.n	80083f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008400:	d10f      	bne.n	8008422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e017      	b.n	8008466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	3b01      	subs	r3, #1
 8008444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4013      	ands	r3, r2
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	429a      	cmp	r2, r3
 8008454:	bf0c      	ite	eq
 8008456:	2301      	moveq	r3, #1
 8008458:	2300      	movne	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	429a      	cmp	r2, r3
 8008462:	d19b      	bne.n	800839c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000024 	.word	0x20000024

08008474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af02      	add	r7, sp, #8
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008480:	4b1b      	ldr	r3, [pc, #108]	; (80084f0 <SPI_EndRxTxTransaction+0x7c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <SPI_EndRxTxTransaction+0x80>)
 8008486:	fba2 2303 	umull	r2, r3, r2, r3
 800848a:	0d5b      	lsrs	r3, r3, #21
 800848c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008490:	fb02 f303 	mul.w	r3, r2, r3
 8008494:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800849e:	d112      	bne.n	80084c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2200      	movs	r2, #0
 80084a8:	2180      	movs	r1, #128	; 0x80
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff ff5a 	bl	8008364 <SPI_WaitFlagStateUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d016      	beq.n	80084e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	f043 0220 	orr.w	r2, r3, #32
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e00f      	b.n	80084e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084dc:	2b80      	cmp	r3, #128	; 0x80
 80084de:	d0f2      	beq.n	80084c6 <SPI_EndRxTxTransaction+0x52>
 80084e0:	e000      	b.n	80084e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80084e2:	bf00      	nop
  }

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000024 	.word	0x20000024
 80084f4:	165e9f81 	.word	0x165e9f81

080084f8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e034      	b.n	8008578 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7fb fe16 	bl	8004154 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3308      	adds	r3, #8
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f001 ffa2 	bl	800a47c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	461a      	mov	r2, r3
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	f001 ffec 	bl	800a520 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6858      	ldr	r0, [r3, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	f002 f821 	bl	800a59c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	6892      	ldr	r2, [r2, #8]
 8008562:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	6892      	ldr	r2, [r2, #8]
 800856e:	f041 0101 	orr.w	r1, r1, #1
 8008572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e041      	b.n	8008616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d106      	bne.n	80085ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fb fc70 	bl	8003e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3304      	adds	r3, #4
 80085bc:	4619      	mov	r1, r3
 80085be:	4610      	mov	r0, r2
 80085c0:	f000 fc1a 	bl	8008df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b01      	cmp	r3, #1
 8008632:	d001      	beq.n	8008638 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e046      	b.n	80086c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a23      	ldr	r2, [pc, #140]	; (80086d4 <HAL_TIM_Base_Start+0xb4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d022      	beq.n	8008690 <HAL_TIM_Base_Start+0x70>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008652:	d01d      	beq.n	8008690 <HAL_TIM_Base_Start+0x70>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1f      	ldr	r2, [pc, #124]	; (80086d8 <HAL_TIM_Base_Start+0xb8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d018      	beq.n	8008690 <HAL_TIM_Base_Start+0x70>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <HAL_TIM_Base_Start+0xbc>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d013      	beq.n	8008690 <HAL_TIM_Base_Start+0x70>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a1c      	ldr	r2, [pc, #112]	; (80086e0 <HAL_TIM_Base_Start+0xc0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00e      	beq.n	8008690 <HAL_TIM_Base_Start+0x70>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a1b      	ldr	r2, [pc, #108]	; (80086e4 <HAL_TIM_Base_Start+0xc4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d009      	beq.n	8008690 <HAL_TIM_Base_Start+0x70>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a19      	ldr	r2, [pc, #100]	; (80086e8 <HAL_TIM_Base_Start+0xc8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d004      	beq.n	8008690 <HAL_TIM_Base_Start+0x70>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a18      	ldr	r2, [pc, #96]	; (80086ec <HAL_TIM_Base_Start+0xcc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d111      	bne.n	80086b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b06      	cmp	r3, #6
 80086a0:	d010      	beq.n	80086c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f042 0201 	orr.w	r2, r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b2:	e007      	b.n	80086c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0201 	orr.w	r2, r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	40010000 	.word	0x40010000
 80086d8:	40000400 	.word	0x40000400
 80086dc:	40000800 	.word	0x40000800
 80086e0:	40000c00 	.word	0x40000c00
 80086e4:	40010400 	.word	0x40010400
 80086e8:	40014000 	.word	0x40014000
 80086ec:	40001800 	.word	0x40001800

080086f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b01      	cmp	r3, #1
 8008702:	d001      	beq.n	8008708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e04e      	b.n	80087a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0201 	orr.w	r2, r2, #1
 800871e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a23      	ldr	r2, [pc, #140]	; (80087b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d022      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x80>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008732:	d01d      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x80>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a1f      	ldr	r2, [pc, #124]	; (80087b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d018      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x80>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a1e      	ldr	r2, [pc, #120]	; (80087bc <HAL_TIM_Base_Start_IT+0xcc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d013      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x80>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a1c      	ldr	r2, [pc, #112]	; (80087c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00e      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x80>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a1b      	ldr	r2, [pc, #108]	; (80087c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d009      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x80>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a19      	ldr	r2, [pc, #100]	; (80087c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d004      	beq.n	8008770 <HAL_TIM_Base_Start_IT+0x80>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a18      	ldr	r2, [pc, #96]	; (80087cc <HAL_TIM_Base_Start_IT+0xdc>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d111      	bne.n	8008794 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b06      	cmp	r3, #6
 8008780:	d010      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f042 0201 	orr.w	r2, r2, #1
 8008790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008792:	e007      	b.n	80087a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40000400 	.word	0x40000400
 80087bc:	40000800 	.word	0x40000800
 80087c0:	40000c00 	.word	0x40000c00
 80087c4:	40010400 	.word	0x40010400
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40001800 	.word	0x40001800

080087d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e041      	b.n	8008866 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f839 	bl	800886e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3304      	adds	r3, #4
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f000 faf2 	bl	8008df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b02      	cmp	r3, #2
 8008896:	d122      	bne.n	80088de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d11b      	bne.n	80088de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f06f 0202 	mvn.w	r2, #2
 80088ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa78 	bl	8008dba <HAL_TIM_IC_CaptureCallback>
 80088ca:	e005      	b.n	80088d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa6a 	bl	8008da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa7b 	bl	8008dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	d122      	bne.n	8008932 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d11b      	bne.n	8008932 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f06f 0204 	mvn.w	r2, #4
 8008902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fa4e 	bl	8008dba <HAL_TIM_IC_CaptureCallback>
 800891e:	e005      	b.n	800892c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fa40 	bl	8008da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa51 	bl	8008dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f003 0308 	and.w	r3, r3, #8
 800893c:	2b08      	cmp	r3, #8
 800893e:	d122      	bne.n	8008986 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	2b08      	cmp	r3, #8
 800894c:	d11b      	bne.n	8008986 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f06f 0208 	mvn.w	r2, #8
 8008956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2204      	movs	r2, #4
 800895c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fa24 	bl	8008dba <HAL_TIM_IC_CaptureCallback>
 8008972:	e005      	b.n	8008980 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fa16 	bl	8008da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa27 	bl	8008dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b10      	cmp	r3, #16
 8008992:	d122      	bne.n	80089da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f003 0310 	and.w	r3, r3, #16
 800899e:	2b10      	cmp	r3, #16
 80089a0:	d11b      	bne.n	80089da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f06f 0210 	mvn.w	r2, #16
 80089aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2208      	movs	r2, #8
 80089b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f9fa 	bl	8008dba <HAL_TIM_IC_CaptureCallback>
 80089c6:	e005      	b.n	80089d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f9ec 	bl	8008da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9fd 	bl	8008dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d10e      	bne.n	8008a06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d107      	bne.n	8008a06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f06f 0201 	mvn.w	r2, #1
 80089fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7fb f861 	bl	8003ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a10:	2b80      	cmp	r3, #128	; 0x80
 8008a12:	d10e      	bne.n	8008a32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a1e:	2b80      	cmp	r3, #128	; 0x80
 8008a20:	d107      	bne.n	8008a32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fd53 	bl	80094d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b40      	cmp	r3, #64	; 0x40
 8008a3e:	d10e      	bne.n	8008a5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4a:	2b40      	cmp	r3, #64	; 0x40
 8008a4c:	d107      	bne.n	8008a5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f9c2 	bl	8008de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	f003 0320 	and.w	r3, r3, #32
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	d10e      	bne.n	8008a8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	d107      	bne.n	8008a8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f06f 0220 	mvn.w	r2, #32
 8008a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fd1d 	bl	80094c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d101      	bne.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e0ae      	b.n	8008c10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b0c      	cmp	r3, #12
 8008abe:	f200 809f 	bhi.w	8008c00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ac2:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac8:	08008afd 	.word	0x08008afd
 8008acc:	08008c01 	.word	0x08008c01
 8008ad0:	08008c01 	.word	0x08008c01
 8008ad4:	08008c01 	.word	0x08008c01
 8008ad8:	08008b3d 	.word	0x08008b3d
 8008adc:	08008c01 	.word	0x08008c01
 8008ae0:	08008c01 	.word	0x08008c01
 8008ae4:	08008c01 	.word	0x08008c01
 8008ae8:	08008b7f 	.word	0x08008b7f
 8008aec:	08008c01 	.word	0x08008c01
 8008af0:	08008c01 	.word	0x08008c01
 8008af4:	08008c01 	.word	0x08008c01
 8008af8:	08008bbf 	.word	0x08008bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fa18 	bl	8008f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699a      	ldr	r2, [r3, #24]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0208 	orr.w	r2, r2, #8
 8008b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0204 	bic.w	r2, r2, #4
 8008b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6999      	ldr	r1, [r3, #24]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	691a      	ldr	r2, [r3, #16]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	619a      	str	r2, [r3, #24]
      break;
 8008b3a:	e064      	b.n	8008c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68b9      	ldr	r1, [r7, #8]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 fa68 	bl	8009018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699a      	ldr	r2, [r3, #24]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6999      	ldr	r1, [r3, #24]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	021a      	lsls	r2, r3, #8
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	619a      	str	r2, [r3, #24]
      break;
 8008b7c:	e043      	b.n	8008c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68b9      	ldr	r1, [r7, #8]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fabd 	bl	8009104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69da      	ldr	r2, [r3, #28]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0208 	orr.w	r2, r2, #8
 8008b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	69da      	ldr	r2, [r3, #28]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0204 	bic.w	r2, r2, #4
 8008ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69d9      	ldr	r1, [r3, #28]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	61da      	str	r2, [r3, #28]
      break;
 8008bbc:	e023      	b.n	8008c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68b9      	ldr	r1, [r7, #8]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fb11 	bl	80091ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69da      	ldr	r2, [r3, #28]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69da      	ldr	r2, [r3, #28]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69d9      	ldr	r1, [r3, #28]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	021a      	lsls	r2, r3, #8
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	61da      	str	r2, [r3, #28]
      break;
 8008bfe:	e002      	b.n	8008c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	75fb      	strb	r3, [r7, #23]
      break;
 8008c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d101      	bne.n	8008c34 <HAL_TIM_ConfigClockSource+0x1c>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e0b4      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0x186>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6c:	d03e      	beq.n	8008cec <HAL_TIM_ConfigClockSource+0xd4>
 8008c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c72:	f200 8087 	bhi.w	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
 8008c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7a:	f000 8086 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x172>
 8008c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c82:	d87f      	bhi.n	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
 8008c84:	2b70      	cmp	r3, #112	; 0x70
 8008c86:	d01a      	beq.n	8008cbe <HAL_TIM_ConfigClockSource+0xa6>
 8008c88:	2b70      	cmp	r3, #112	; 0x70
 8008c8a:	d87b      	bhi.n	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
 8008c8c:	2b60      	cmp	r3, #96	; 0x60
 8008c8e:	d050      	beq.n	8008d32 <HAL_TIM_ConfigClockSource+0x11a>
 8008c90:	2b60      	cmp	r3, #96	; 0x60
 8008c92:	d877      	bhi.n	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
 8008c94:	2b50      	cmp	r3, #80	; 0x50
 8008c96:	d03c      	beq.n	8008d12 <HAL_TIM_ConfigClockSource+0xfa>
 8008c98:	2b50      	cmp	r3, #80	; 0x50
 8008c9a:	d873      	bhi.n	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
 8008c9c:	2b40      	cmp	r3, #64	; 0x40
 8008c9e:	d058      	beq.n	8008d52 <HAL_TIM_ConfigClockSource+0x13a>
 8008ca0:	2b40      	cmp	r3, #64	; 0x40
 8008ca2:	d86f      	bhi.n	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
 8008ca4:	2b30      	cmp	r3, #48	; 0x30
 8008ca6:	d064      	beq.n	8008d72 <HAL_TIM_ConfigClockSource+0x15a>
 8008ca8:	2b30      	cmp	r3, #48	; 0x30
 8008caa:	d86b      	bhi.n	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d060      	beq.n	8008d72 <HAL_TIM_ConfigClockSource+0x15a>
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d867      	bhi.n	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d05c      	beq.n	8008d72 <HAL_TIM_ConfigClockSource+0x15a>
 8008cb8:	2b10      	cmp	r3, #16
 8008cba:	d05a      	beq.n	8008d72 <HAL_TIM_ConfigClockSource+0x15a>
 8008cbc:	e062      	b.n	8008d84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	6899      	ldr	r1, [r3, #8]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f000 fb5d 	bl	800938c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	609a      	str	r2, [r3, #8]
      break;
 8008cea:	e04f      	b.n	8008d8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6899      	ldr	r1, [r3, #8]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f000 fb46 	bl	800938c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d0e:	609a      	str	r2, [r3, #8]
      break;
 8008d10:	e03c      	b.n	8008d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	6859      	ldr	r1, [r3, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f000 faba 	bl	8009298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2150      	movs	r1, #80	; 0x50
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fb13 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 8008d30:	e02c      	b.n	8008d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	6859      	ldr	r1, [r3, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f000 fad9 	bl	80092f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2160      	movs	r1, #96	; 0x60
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fb03 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 8008d50:	e01c      	b.n	8008d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	6859      	ldr	r1, [r3, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f000 fa9a 	bl	8009298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2140      	movs	r1, #64	; 0x40
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 faf3 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 8008d70:	e00c      	b.n	8008d8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	f000 faea 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 8008d82:	e003      	b.n	8008d8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
      break;
 8008d88:	e000      	b.n	8008d8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
	...

08008df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a40      	ldr	r2, [pc, #256]	; (8008f0c <TIM_Base_SetConfig+0x114>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d013      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e16:	d00f      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a3d      	ldr	r2, [pc, #244]	; (8008f10 <TIM_Base_SetConfig+0x118>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00b      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a3c      	ldr	r2, [pc, #240]	; (8008f14 <TIM_Base_SetConfig+0x11c>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d007      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a3b      	ldr	r2, [pc, #236]	; (8008f18 <TIM_Base_SetConfig+0x120>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a3a      	ldr	r2, [pc, #232]	; (8008f1c <TIM_Base_SetConfig+0x124>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d108      	bne.n	8008e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a2f      	ldr	r2, [pc, #188]	; (8008f0c <TIM_Base_SetConfig+0x114>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d02b      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e58:	d027      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a2c      	ldr	r2, [pc, #176]	; (8008f10 <TIM_Base_SetConfig+0x118>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d023      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a2b      	ldr	r2, [pc, #172]	; (8008f14 <TIM_Base_SetConfig+0x11c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d01f      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a2a      	ldr	r2, [pc, #168]	; (8008f18 <TIM_Base_SetConfig+0x120>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d01b      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a29      	ldr	r2, [pc, #164]	; (8008f1c <TIM_Base_SetConfig+0x124>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d017      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a28      	ldr	r2, [pc, #160]	; (8008f20 <TIM_Base_SetConfig+0x128>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d013      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a27      	ldr	r2, [pc, #156]	; (8008f24 <TIM_Base_SetConfig+0x12c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00f      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a26      	ldr	r2, [pc, #152]	; (8008f28 <TIM_Base_SetConfig+0x130>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00b      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a25      	ldr	r2, [pc, #148]	; (8008f2c <TIM_Base_SetConfig+0x134>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d007      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a24      	ldr	r2, [pc, #144]	; (8008f30 <TIM_Base_SetConfig+0x138>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d003      	beq.n	8008eaa <TIM_Base_SetConfig+0xb2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a23      	ldr	r2, [pc, #140]	; (8008f34 <TIM_Base_SetConfig+0x13c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d108      	bne.n	8008ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <TIM_Base_SetConfig+0x114>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <TIM_Base_SetConfig+0xf8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a0c      	ldr	r2, [pc, #48]	; (8008f1c <TIM_Base_SetConfig+0x124>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d103      	bne.n	8008ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	691a      	ldr	r2, [r3, #16]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	615a      	str	r2, [r3, #20]
}
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	40000c00 	.word	0x40000c00
 8008f1c:	40010400 	.word	0x40010400
 8008f20:	40014000 	.word	0x40014000
 8008f24:	40014400 	.word	0x40014400
 8008f28:	40014800 	.word	0x40014800
 8008f2c:	40001800 	.word	0x40001800
 8008f30:	40001c00 	.word	0x40001c00
 8008f34:	40002000 	.word	0x40002000

08008f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	f023 0201 	bic.w	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f023 0303 	bic.w	r3, r3, #3
 8008f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f023 0302 	bic.w	r3, r3, #2
 8008f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a20      	ldr	r2, [pc, #128]	; (8009010 <TIM_OC1_SetConfig+0xd8>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_OC1_SetConfig+0x64>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <TIM_OC1_SetConfig+0xdc>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d10c      	bne.n	8008fb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f023 0308 	bic.w	r3, r3, #8
 8008fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f023 0304 	bic.w	r3, r3, #4
 8008fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a15      	ldr	r2, [pc, #84]	; (8009010 <TIM_OC1_SetConfig+0xd8>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_OC1_SetConfig+0x8e>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a14      	ldr	r2, [pc, #80]	; (8009014 <TIM_OC1_SetConfig+0xdc>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d111      	bne.n	8008fea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	621a      	str	r2, [r3, #32]
}
 8009004:	bf00      	nop
 8009006:	371c      	adds	r7, #28
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	40010000 	.word	0x40010000
 8009014:	40010400 	.word	0x40010400

08009018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	f023 0210 	bic.w	r2, r3, #16
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800904e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	021b      	lsls	r3, r3, #8
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4313      	orrs	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f023 0320 	bic.w	r3, r3, #32
 8009062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a22      	ldr	r2, [pc, #136]	; (80090fc <TIM_OC2_SetConfig+0xe4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d003      	beq.n	8009080 <TIM_OC2_SetConfig+0x68>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a21      	ldr	r2, [pc, #132]	; (8009100 <TIM_OC2_SetConfig+0xe8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d10d      	bne.n	800909c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	011b      	lsls	r3, r3, #4
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	4313      	orrs	r3, r2
 8009092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800909a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a17      	ldr	r2, [pc, #92]	; (80090fc <TIM_OC2_SetConfig+0xe4>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d003      	beq.n	80090ac <TIM_OC2_SetConfig+0x94>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a16      	ldr	r2, [pc, #88]	; (8009100 <TIM_OC2_SetConfig+0xe8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d113      	bne.n	80090d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	621a      	str	r2, [r3, #32]
}
 80090ee:	bf00      	nop
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40010000 	.word	0x40010000
 8009100:	40010400 	.word	0x40010400

08009104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0303 	bic.w	r3, r3, #3
 800913a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800914c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a21      	ldr	r2, [pc, #132]	; (80091e4 <TIM_OC3_SetConfig+0xe0>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d003      	beq.n	800916a <TIM_OC3_SetConfig+0x66>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a20      	ldr	r2, [pc, #128]	; (80091e8 <TIM_OC3_SetConfig+0xe4>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d10d      	bne.n	8009186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	021b      	lsls	r3, r3, #8
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	4313      	orrs	r3, r2
 800917c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a16      	ldr	r2, [pc, #88]	; (80091e4 <TIM_OC3_SetConfig+0xe0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d003      	beq.n	8009196 <TIM_OC3_SetConfig+0x92>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a15      	ldr	r2, [pc, #84]	; (80091e8 <TIM_OC3_SetConfig+0xe4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d113      	bne.n	80091be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800919c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	621a      	str	r2, [r3, #32]
}
 80091d8:	bf00      	nop
 80091da:	371c      	adds	r7, #28
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	40010000 	.word	0x40010000
 80091e8:	40010400 	.word	0x40010400

080091ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800921a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	031b      	lsls	r3, r3, #12
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4313      	orrs	r3, r2
 8009242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a12      	ldr	r2, [pc, #72]	; (8009290 <TIM_OC4_SetConfig+0xa4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC4_SetConfig+0x68>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a11      	ldr	r2, [pc, #68]	; (8009294 <TIM_OC4_SetConfig+0xa8>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d109      	bne.n	8009268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800925a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	019b      	lsls	r3, r3, #6
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	621a      	str	r2, [r3, #32]
}
 8009282:	bf00      	nop
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40010000 	.word	0x40010000
 8009294:	40010400 	.word	0x40010400

08009298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	f023 0201 	bic.w	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f023 030a 	bic.w	r3, r3, #10
 80092d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4313      	orrs	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b087      	sub	sp, #28
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f023 0210 	bic.w	r2, r3, #16
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	031b      	lsls	r3, r3, #12
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	4313      	orrs	r3, r2
 800932a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4313      	orrs	r3, r2
 800933c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	621a      	str	r2, [r3, #32]
}
 800934a:	bf00      	nop
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	f043 0307 	orr.w	r3, r3, #7
 8009378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	609a      	str	r2, [r3, #8]
}
 8009380:	bf00      	nop
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	021a      	lsls	r2, r3, #8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	431a      	orrs	r2, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	609a      	str	r2, [r3, #8]
}
 80093c0:	bf00      	nop
 80093c2:	371c      	adds	r7, #28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d101      	bne.n	80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e05a      	b.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800940a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a21      	ldr	r2, [pc, #132]	; (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d022      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009430:	d01d      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1d      	ldr	r2, [pc, #116]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d018      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d013      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a1a      	ldr	r2, [pc, #104]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00e      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d009      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a17      	ldr	r2, [pc, #92]	; (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d004      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a15      	ldr	r2, [pc, #84]	; (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d10c      	bne.n	8009488 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	4313      	orrs	r3, r2
 800947e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40000400 	.word	0x40000400
 80094b0:	40000800 	.word	0x40000800
 80094b4:	40000c00 	.word	0x40000c00
 80094b8:	40010400 	.word	0x40010400
 80094bc:	40014000 	.word	0x40014000
 80094c0:	40001800 	.word	0x40001800

080094c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e03f      	b.n	800957e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d106      	bne.n	8009518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7fa fd46 	bl	8003fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2224      	movs	r2, #36	; 0x24
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800952e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fddb 	bl	800a0ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	691a      	ldr	r2, [r3, #16]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	695a      	ldr	r2, [r3, #20]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b08a      	sub	sp, #40	; 0x28
 800958a:	af02      	add	r7, sp, #8
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	603b      	str	r3, [r7, #0]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d17c      	bne.n	80096a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <HAL_UART_Transmit+0x2c>
 80095ac:	88fb      	ldrh	r3, [r7, #6]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e075      	b.n	80096a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_UART_Transmit+0x3e>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e06e      	b.n	80096a2 <HAL_UART_Transmit+0x11c>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2221      	movs	r2, #33	; 0x21
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095da:	f7fb ffc1 	bl	8005560 <HAL_GetTick>
 80095de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	88fa      	ldrh	r2, [r7, #6]
 80095e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	88fa      	ldrh	r2, [r7, #6]
 80095ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f4:	d108      	bne.n	8009608 <HAL_UART_Transmit+0x82>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d104      	bne.n	8009608 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	61bb      	str	r3, [r7, #24]
 8009606:	e003      	b.n	8009610 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009618:	e02a      	b.n	8009670 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2200      	movs	r2, #0
 8009622:	2180      	movs	r1, #128	; 0x80
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 fb1f 	bl	8009c68 <UART_WaitOnFlagUntilTimeout>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e036      	b.n	80096a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10b      	bne.n	8009652 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009648:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	3302      	adds	r3, #2
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	e007      	b.n	8009662 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	781a      	ldrb	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	3301      	adds	r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009666:	b29b      	uxth	r3, r3
 8009668:	3b01      	subs	r3, #1
 800966a:	b29a      	uxth	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1cf      	bne.n	800961a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2200      	movs	r2, #0
 8009682:	2140      	movs	r1, #64	; 0x40
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 faef 	bl	8009c68 <UART_WaitOnFlagUntilTimeout>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e006      	b.n	80096a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2220      	movs	r2, #32
 8009698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	e000      	b.n	80096a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80096a0:	2302      	movs	r3, #2
  }
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	4613      	mov	r3, r2
 80096b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b20      	cmp	r3, #32
 80096c2:	d11d      	bne.n	8009700 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <HAL_UART_Receive_IT+0x26>
 80096ca:	88fb      	ldrh	r3, [r7, #6]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e016      	b.n	8009702 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d101      	bne.n	80096e2 <HAL_UART_Receive_IT+0x38>
 80096de:	2302      	movs	r3, #2
 80096e0:	e00f      	b.n	8009702 <HAL_UART_Receive_IT+0x58>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	461a      	mov	r2, r3
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fb24 	bl	8009d44 <UART_Start_Receive_IT>
 80096fc:	4603      	mov	r3, r0
 80096fe:	e000      	b.n	8009702 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009700:	2302      	movs	r3, #2
  }
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b0ba      	sub	sp, #232	; 0xe8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009732:	2300      	movs	r3, #0
 8009734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009738:	2300      	movs	r3, #0
 800973a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800973e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800974a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10f      	bne.n	8009772 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <HAL_UART_IRQHandler+0x66>
 800975e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fc03 	bl	8009f76 <UART_Receive_IT>
      return;
 8009770:	e256      	b.n	8009c20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 80de 	beq.w	8009938 <HAL_UART_IRQHandler+0x22c>
 800977c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d106      	bne.n	8009796 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800978c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 80d1 	beq.w	8009938 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00b      	beq.n	80097ba <HAL_UART_IRQHandler+0xae>
 80097a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d005      	beq.n	80097ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b2:	f043 0201 	orr.w	r2, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00b      	beq.n	80097de <HAL_UART_IRQHandler+0xd2>
 80097c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d6:	f043 0202 	orr.w	r2, r3, #2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00b      	beq.n	8009802 <HAL_UART_IRQHandler+0xf6>
 80097ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d005      	beq.n	8009802 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fa:	f043 0204 	orr.w	r2, r3, #4
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d011      	beq.n	8009832 <HAL_UART_IRQHandler+0x126>
 800980e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009812:	f003 0320 	and.w	r3, r3, #32
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800981a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982a:	f043 0208 	orr.w	r2, r3, #8
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 81ed 	beq.w	8009c16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800983c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b00      	cmp	r3, #0
 8009846:	d008      	beq.n	800985a <HAL_UART_IRQHandler+0x14e>
 8009848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800984c:	f003 0320 	and.w	r3, r3, #32
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fb8e 	bl	8009f76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009864:	2b40      	cmp	r3, #64	; 0x40
 8009866:	bf0c      	ite	eq
 8009868:	2301      	moveq	r3, #1
 800986a:	2300      	movne	r3, #0
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	f003 0308 	and.w	r3, r3, #8
 800987a:	2b00      	cmp	r3, #0
 800987c:	d103      	bne.n	8009886 <HAL_UART_IRQHandler+0x17a>
 800987e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009882:	2b00      	cmp	r3, #0
 8009884:	d04f      	beq.n	8009926 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fa96 	bl	8009db8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009896:	2b40      	cmp	r3, #64	; 0x40
 8009898:	d141      	bne.n	800991e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3314      	adds	r3, #20
 80098a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098a8:	e853 3f00 	ldrex	r3, [r3]
 80098ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3314      	adds	r3, #20
 80098c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80098ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80098de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1d9      	bne.n	800989a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d013      	beq.n	8009916 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f2:	4a7d      	ldr	r2, [pc, #500]	; (8009ae8 <HAL_UART_IRQHandler+0x3dc>)
 80098f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fc faf2 	bl	8005ee4 <HAL_DMA_Abort_IT>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d016      	beq.n	8009934 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009910:	4610      	mov	r0, r2
 8009912:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009914:	e00e      	b.n	8009934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f990 	bl	8009c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800991c:	e00a      	b.n	8009934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f98c 	bl	8009c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009924:	e006      	b.n	8009934 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f988 	bl	8009c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009932:	e170      	b.n	8009c16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	bf00      	nop
    return;
 8009936:	e16e      	b.n	8009c16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993c:	2b01      	cmp	r3, #1
 800993e:	f040 814a 	bne.w	8009bd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009946:	f003 0310 	and.w	r3, r3, #16
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8143 	beq.w	8009bd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 813c 	beq.w	8009bd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800995e:	2300      	movs	r3, #0
 8009960:	60bb      	str	r3, [r7, #8]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60bb      	str	r3, [r7, #8]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997e:	2b40      	cmp	r3, #64	; 0x40
 8009980:	f040 80b4 	bne.w	8009aec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009990:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 8140 	beq.w	8009c1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800999e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099a2:	429a      	cmp	r2, r3
 80099a4:	f080 8139 	bcs.w	8009c1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ba:	f000 8088 	beq.w	8009ace <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	330c      	adds	r3, #12
 80099c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80099d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	330c      	adds	r3, #12
 80099e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80099ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80099ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80099f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1d9      	bne.n	80099be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3314      	adds	r3, #20
 8009a10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a14:	e853 3f00 	ldrex	r3, [r3]
 8009a18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a1c:	f023 0301 	bic.w	r3, r3, #1
 8009a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3314      	adds	r3, #20
 8009a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e1      	bne.n	8009a0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3314      	adds	r3, #20
 8009a4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3314      	adds	r3, #20
 8009a66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a72:	e841 2300 	strex	r3, r2, [r1]
 8009a76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e3      	bne.n	8009a46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	330c      	adds	r3, #12
 8009a92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a96:	e853 3f00 	ldrex	r3, [r3]
 8009a9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a9e:	f023 0310 	bic.w	r3, r3, #16
 8009aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	330c      	adds	r3, #12
 8009aac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ab0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ab2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ab6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e3      	bne.n	8009a8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fc f99b 	bl	8005e04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f8b6 	bl	8009c50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ae4:	e099      	b.n	8009c1a <HAL_UART_IRQHandler+0x50e>
 8009ae6:	bf00      	nop
 8009ae8:	08009e7f 	.word	0x08009e7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 808b 	beq.w	8009c1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 8086 	beq.w	8009c1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	330c      	adds	r3, #12
 8009b18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	330c      	adds	r3, #12
 8009b32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009b36:	647a      	str	r2, [r7, #68]	; 0x44
 8009b38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1e3      	bne.n	8009b12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3314      	adds	r3, #20
 8009b50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	623b      	str	r3, [r7, #32]
   return(result);
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	f023 0301 	bic.w	r3, r3, #1
 8009b60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3314      	adds	r3, #20
 8009b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b6e:	633a      	str	r2, [r7, #48]	; 0x30
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e3      	bne.n	8009b4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2220      	movs	r2, #32
 8009b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	330c      	adds	r3, #12
 8009b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	e853 3f00 	ldrex	r3, [r3]
 8009b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 0310 	bic.w	r3, r3, #16
 8009ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	330c      	adds	r3, #12
 8009bb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009bb4:	61fa      	str	r2, [r7, #28]
 8009bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	69b9      	ldr	r1, [r7, #24]
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	e841 2300 	strex	r3, r2, [r1]
 8009bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e3      	bne.n	8009b90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f83e 	bl	8009c50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bd4:	e023      	b.n	8009c1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x4ea>
 8009be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d003      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f959 	bl	8009ea6 <UART_Transmit_IT>
    return;
 8009bf4:	e014      	b.n	8009c20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00e      	beq.n	8009c20 <HAL_UART_IRQHandler+0x514>
 8009c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d008      	beq.n	8009c20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f999 	bl	8009f46 <UART_EndTransmit_IT>
    return;
 8009c14:	e004      	b.n	8009c20 <HAL_UART_IRQHandler+0x514>
    return;
 8009c16:	bf00      	nop
 8009c18:	e002      	b.n	8009c20 <HAL_UART_IRQHandler+0x514>
      return;
 8009c1a:	bf00      	nop
 8009c1c:	e000      	b.n	8009c20 <HAL_UART_IRQHandler+0x514>
      return;
 8009c1e:	bf00      	nop
  }
}
 8009c20:	37e8      	adds	r7, #232	; 0xe8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop

08009c28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b090      	sub	sp, #64	; 0x40
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	4613      	mov	r3, r2
 8009c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c78:	e050      	b.n	8009d1c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c80:	d04c      	beq.n	8009d1c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c88:	f7fb fc6a 	bl	8005560 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d241      	bcs.n	8009d1c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	330c      	adds	r3, #12
 8009c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	330c      	adds	r3, #12
 8009cb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cb8:	637a      	str	r2, [r7, #52]	; 0x34
 8009cba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e5      	bne.n	8009c98 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3314      	adds	r3, #20
 8009cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	613b      	str	r3, [r7, #16]
   return(result);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	f023 0301 	bic.w	r3, r3, #1
 8009ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3314      	adds	r3, #20
 8009cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cec:	623a      	str	r2, [r7, #32]
 8009cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	69f9      	ldr	r1, [r7, #28]
 8009cf2:	6a3a      	ldr	r2, [r7, #32]
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e5      	bne.n	8009ccc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e00f      	b.n	8009d3c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	4013      	ands	r3, r2
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	bf0c      	ite	eq
 8009d2c:	2301      	moveq	r3, #1
 8009d2e:	2300      	movne	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	461a      	mov	r2, r3
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d09f      	beq.n	8009c7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3740      	adds	r7, #64	; 0x40
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	88fa      	ldrh	r2, [r7, #6]
 8009d5c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	88fa      	ldrh	r2, [r7, #6]
 8009d62:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2222      	movs	r2, #34	; 0x22
 8009d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d88:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	695a      	ldr	r2, [r3, #20]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0201 	orr.w	r2, r2, #1
 8009d98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f042 0220 	orr.w	r2, r2, #32
 8009da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b095      	sub	sp, #84	; 0x54
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	330c      	adds	r3, #12
 8009dc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dca:	e853 3f00 	ldrex	r3, [r3]
 8009dce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	330c      	adds	r3, #12
 8009dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009de0:	643a      	str	r2, [r7, #64]	; 0x40
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009de8:	e841 2300 	strex	r3, r2, [r1]
 8009dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1e5      	bne.n	8009dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3314      	adds	r3, #20
 8009dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	e853 3f00 	ldrex	r3, [r3]
 8009e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	f023 0301 	bic.w	r3, r3, #1
 8009e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3314      	adds	r3, #20
 8009e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e1c:	e841 2300 	strex	r3, r2, [r1]
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e5      	bne.n	8009df4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d119      	bne.n	8009e64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	330c      	adds	r3, #12
 8009e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f023 0310 	bic.w	r3, r3, #16
 8009e46:	647b      	str	r3, [r7, #68]	; 0x44
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e50:	61ba      	str	r2, [r7, #24]
 8009e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6979      	ldr	r1, [r7, #20]
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e5      	bne.n	8009e30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009e72:	bf00      	nop
 8009e74:	3754      	adds	r7, #84	; 0x54
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff fecf 	bl	8009c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e9e:	bf00      	nop
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b21      	cmp	r3, #33	; 0x21
 8009eb8:	d13e      	bne.n	8009f38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec2:	d114      	bne.n	8009eee <UART_Transmit_IT+0x48>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d110      	bne.n	8009eee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ee0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	1c9a      	adds	r2, r3, #2
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	621a      	str	r2, [r3, #32]
 8009eec:	e008      	b.n	8009f00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	1c59      	adds	r1, r3, #1
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	6211      	str	r1, [r2, #32]
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	3b01      	subs	r3, #1
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10f      	bne.n	8009f34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68da      	ldr	r2, [r3, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68da      	ldr	r2, [r3, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	e000      	b.n	8009f3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f38:	2302      	movs	r3, #2
  }
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff fe5e 	bl	8009c28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b08c      	sub	sp, #48	; 0x30
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b22      	cmp	r3, #34	; 0x22
 8009f88:	f040 80ab 	bne.w	800a0e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f94:	d117      	bne.n	8009fc6 <UART_Receive_IT+0x50>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d113      	bne.n	8009fc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbe:	1c9a      	adds	r2, r3, #2
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8009fc4:	e026      	b.n	800a014 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd8:	d007      	beq.n	8009fea <UART_Receive_IT+0x74>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <UART_Receive_IT+0x82>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d106      	bne.n	8009ff8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e008      	b.n	800a00a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a004:	b2da      	uxtb	r2, r3
 800a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a018:	b29b      	uxth	r3, r3
 800a01a:	3b01      	subs	r3, #1
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4619      	mov	r1, r3
 800a022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a024:	2b00      	cmp	r3, #0
 800a026:	d15a      	bne.n	800a0de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0220 	bic.w	r2, r2, #32
 800a036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	695a      	ldr	r2, [r3, #20]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0201 	bic.w	r2, r2, #1
 800a056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2220      	movs	r2, #32
 800a05c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a064:	2b01      	cmp	r3, #1
 800a066:	d135      	bne.n	800a0d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	330c      	adds	r3, #12
 800a074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	e853 3f00 	ldrex	r3, [r3]
 800a07c:	613b      	str	r3, [r7, #16]
   return(result);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f023 0310 	bic.w	r3, r3, #16
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	330c      	adds	r3, #12
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	623a      	str	r2, [r7, #32]
 800a090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a092:	69f9      	ldr	r1, [r7, #28]
 800a094:	6a3a      	ldr	r2, [r7, #32]
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e5      	bne.n	800a06e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0310 	and.w	r3, r3, #16
 800a0ac:	2b10      	cmp	r3, #16
 800a0ae:	d10a      	bne.n	800a0c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff fdbf 	bl	8009c50 <HAL_UARTEx_RxEventCallback>
 800a0d2:	e002      	b.n	800a0da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7fb f941 	bl	800535c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e002      	b.n	800a0e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e000      	b.n	800a0e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a0e2:	2302      	movs	r3, #2
  }
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3730      	adds	r7, #48	; 0x30
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	b09f      	sub	sp, #124	; 0x7c
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a102:	68d9      	ldr	r1, [r3, #12]
 800a104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	ea40 0301 	orr.w	r3, r0, r1
 800a10c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a10e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	431a      	orrs	r2, r3
 800a118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	431a      	orrs	r2, r3
 800a11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	4313      	orrs	r3, r2
 800a124:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a130:	f021 010c 	bic.w	r1, r1, #12
 800a134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a13a:	430b      	orrs	r3, r1
 800a13c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a13e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14a:	6999      	ldr	r1, [r3, #24]
 800a14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	ea40 0301 	orr.w	r3, r0, r1
 800a154:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	4bc5      	ldr	r3, [pc, #788]	; (800a470 <UART_SetConfig+0x384>)
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d004      	beq.n	800a16a <UART_SetConfig+0x7e>
 800a160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	4bc3      	ldr	r3, [pc, #780]	; (800a474 <UART_SetConfig+0x388>)
 800a166:	429a      	cmp	r2, r3
 800a168:	d103      	bne.n	800a172 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a16a:	f7fd ff21 	bl	8007fb0 <HAL_RCC_GetPCLK2Freq>
 800a16e:	6778      	str	r0, [r7, #116]	; 0x74
 800a170:	e002      	b.n	800a178 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a172:	f7fd ff09 	bl	8007f88 <HAL_RCC_GetPCLK1Freq>
 800a176:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a180:	f040 80b6 	bne.w	800a2f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a186:	461c      	mov	r4, r3
 800a188:	f04f 0500 	mov.w	r5, #0
 800a18c:	4622      	mov	r2, r4
 800a18e:	462b      	mov	r3, r5
 800a190:	1891      	adds	r1, r2, r2
 800a192:	6439      	str	r1, [r7, #64]	; 0x40
 800a194:	415b      	adcs	r3, r3
 800a196:	647b      	str	r3, [r7, #68]	; 0x44
 800a198:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a19c:	1912      	adds	r2, r2, r4
 800a19e:	eb45 0303 	adc.w	r3, r5, r3
 800a1a2:	f04f 0000 	mov.w	r0, #0
 800a1a6:	f04f 0100 	mov.w	r1, #0
 800a1aa:	00d9      	lsls	r1, r3, #3
 800a1ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1b0:	00d0      	lsls	r0, r2, #3
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	1911      	adds	r1, r2, r4
 800a1b8:	6639      	str	r1, [r7, #96]	; 0x60
 800a1ba:	416b      	adcs	r3, r5
 800a1bc:	667b      	str	r3, [r7, #100]	; 0x64
 800a1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f04f 0300 	mov.w	r3, #0
 800a1c8:	1891      	adds	r1, r2, r2
 800a1ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800a1cc:	415b      	adcs	r3, r3
 800a1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a1d8:	f7f6 fd4e 	bl	8000c78 <__aeabi_uldivmod>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4ba5      	ldr	r3, [pc, #660]	; (800a478 <UART_SetConfig+0x38c>)
 800a1e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	011e      	lsls	r6, r3, #4
 800a1ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1ec:	461c      	mov	r4, r3
 800a1ee:	f04f 0500 	mov.w	r5, #0
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	462b      	mov	r3, r5
 800a1f6:	1891      	adds	r1, r2, r2
 800a1f8:	6339      	str	r1, [r7, #48]	; 0x30
 800a1fa:	415b      	adcs	r3, r3
 800a1fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a1fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a202:	1912      	adds	r2, r2, r4
 800a204:	eb45 0303 	adc.w	r3, r5, r3
 800a208:	f04f 0000 	mov.w	r0, #0
 800a20c:	f04f 0100 	mov.w	r1, #0
 800a210:	00d9      	lsls	r1, r3, #3
 800a212:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a216:	00d0      	lsls	r0, r2, #3
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	1911      	adds	r1, r2, r4
 800a21e:	65b9      	str	r1, [r7, #88]	; 0x58
 800a220:	416b      	adcs	r3, r5
 800a222:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	461a      	mov	r2, r3
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	1891      	adds	r1, r2, r2
 800a230:	62b9      	str	r1, [r7, #40]	; 0x28
 800a232:	415b      	adcs	r3, r3
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a23a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a23e:	f7f6 fd1b 	bl	8000c78 <__aeabi_uldivmod>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4b8c      	ldr	r3, [pc, #560]	; (800a478 <UART_SetConfig+0x38c>)
 800a248:	fba3 1302 	umull	r1, r3, r3, r2
 800a24c:	095b      	lsrs	r3, r3, #5
 800a24e:	2164      	movs	r1, #100	; 0x64
 800a250:	fb01 f303 	mul.w	r3, r1, r3
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	3332      	adds	r3, #50	; 0x32
 800a25a:	4a87      	ldr	r2, [pc, #540]	; (800a478 <UART_SetConfig+0x38c>)
 800a25c:	fba2 2303 	umull	r2, r3, r2, r3
 800a260:	095b      	lsrs	r3, r3, #5
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a268:	441e      	add	r6, r3
 800a26a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a26c:	4618      	mov	r0, r3
 800a26e:	f04f 0100 	mov.w	r1, #0
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	1894      	adds	r4, r2, r2
 800a278:	623c      	str	r4, [r7, #32]
 800a27a:	415b      	adcs	r3, r3
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
 800a27e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a282:	1812      	adds	r2, r2, r0
 800a284:	eb41 0303 	adc.w	r3, r1, r3
 800a288:	f04f 0400 	mov.w	r4, #0
 800a28c:	f04f 0500 	mov.w	r5, #0
 800a290:	00dd      	lsls	r5, r3, #3
 800a292:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a296:	00d4      	lsls	r4, r2, #3
 800a298:	4622      	mov	r2, r4
 800a29a:	462b      	mov	r3, r5
 800a29c:	1814      	adds	r4, r2, r0
 800a29e:	653c      	str	r4, [r7, #80]	; 0x50
 800a2a0:	414b      	adcs	r3, r1
 800a2a2:	657b      	str	r3, [r7, #84]	; 0x54
 800a2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	f04f 0300 	mov.w	r3, #0
 800a2ae:	1891      	adds	r1, r2, r2
 800a2b0:	61b9      	str	r1, [r7, #24]
 800a2b2:	415b      	adcs	r3, r3
 800a2b4:	61fb      	str	r3, [r7, #28]
 800a2b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a2be:	f7f6 fcdb 	bl	8000c78 <__aeabi_uldivmod>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4b6c      	ldr	r3, [pc, #432]	; (800a478 <UART_SetConfig+0x38c>)
 800a2c8:	fba3 1302 	umull	r1, r3, r3, r2
 800a2cc:	095b      	lsrs	r3, r3, #5
 800a2ce:	2164      	movs	r1, #100	; 0x64
 800a2d0:	fb01 f303 	mul.w	r3, r1, r3
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	3332      	adds	r3, #50	; 0x32
 800a2da:	4a67      	ldr	r2, [pc, #412]	; (800a478 <UART_SetConfig+0x38c>)
 800a2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e0:	095b      	lsrs	r3, r3, #5
 800a2e2:	f003 0207 	and.w	r2, r3, #7
 800a2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4432      	add	r2, r6
 800a2ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a2ee:	e0b9      	b.n	800a464 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2f2:	461c      	mov	r4, r3
 800a2f4:	f04f 0500 	mov.w	r5, #0
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	462b      	mov	r3, r5
 800a2fc:	1891      	adds	r1, r2, r2
 800a2fe:	6139      	str	r1, [r7, #16]
 800a300:	415b      	adcs	r3, r3
 800a302:	617b      	str	r3, [r7, #20]
 800a304:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a308:	1912      	adds	r2, r2, r4
 800a30a:	eb45 0303 	adc.w	r3, r5, r3
 800a30e:	f04f 0000 	mov.w	r0, #0
 800a312:	f04f 0100 	mov.w	r1, #0
 800a316:	00d9      	lsls	r1, r3, #3
 800a318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a31c:	00d0      	lsls	r0, r2, #3
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	eb12 0804 	adds.w	r8, r2, r4
 800a326:	eb43 0905 	adc.w	r9, r3, r5
 800a32a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	4618      	mov	r0, r3
 800a330:	f04f 0100 	mov.w	r1, #0
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	f04f 0300 	mov.w	r3, #0
 800a33c:	008b      	lsls	r3, r1, #2
 800a33e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a342:	0082      	lsls	r2, r0, #2
 800a344:	4640      	mov	r0, r8
 800a346:	4649      	mov	r1, r9
 800a348:	f7f6 fc96 	bl	8000c78 <__aeabi_uldivmod>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4b49      	ldr	r3, [pc, #292]	; (800a478 <UART_SetConfig+0x38c>)
 800a352:	fba3 2302 	umull	r2, r3, r3, r2
 800a356:	095b      	lsrs	r3, r3, #5
 800a358:	011e      	lsls	r6, r3, #4
 800a35a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a35c:	4618      	mov	r0, r3
 800a35e:	f04f 0100 	mov.w	r1, #0
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	1894      	adds	r4, r2, r2
 800a368:	60bc      	str	r4, [r7, #8]
 800a36a:	415b      	adcs	r3, r3
 800a36c:	60fb      	str	r3, [r7, #12]
 800a36e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a372:	1812      	adds	r2, r2, r0
 800a374:	eb41 0303 	adc.w	r3, r1, r3
 800a378:	f04f 0400 	mov.w	r4, #0
 800a37c:	f04f 0500 	mov.w	r5, #0
 800a380:	00dd      	lsls	r5, r3, #3
 800a382:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a386:	00d4      	lsls	r4, r2, #3
 800a388:	4622      	mov	r2, r4
 800a38a:	462b      	mov	r3, r5
 800a38c:	1814      	adds	r4, r2, r0
 800a38e:	64bc      	str	r4, [r7, #72]	; 0x48
 800a390:	414b      	adcs	r3, r1
 800a392:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	4618      	mov	r0, r3
 800a39a:	f04f 0100 	mov.w	r1, #0
 800a39e:	f04f 0200 	mov.w	r2, #0
 800a3a2:	f04f 0300 	mov.w	r3, #0
 800a3a6:	008b      	lsls	r3, r1, #2
 800a3a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a3ac:	0082      	lsls	r2, r0, #2
 800a3ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a3b2:	f7f6 fc61 	bl	8000c78 <__aeabi_uldivmod>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4b2f      	ldr	r3, [pc, #188]	; (800a478 <UART_SetConfig+0x38c>)
 800a3bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a3c0:	095b      	lsrs	r3, r3, #5
 800a3c2:	2164      	movs	r1, #100	; 0x64
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	3332      	adds	r3, #50	; 0x32
 800a3ce:	4a2a      	ldr	r2, [pc, #168]	; (800a478 <UART_SetConfig+0x38c>)
 800a3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d4:	095b      	lsrs	r3, r3, #5
 800a3d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3da:	441e      	add	r6, r3
 800a3dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f04f 0100 	mov.w	r1, #0
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	1894      	adds	r4, r2, r2
 800a3ea:	603c      	str	r4, [r7, #0]
 800a3ec:	415b      	adcs	r3, r3
 800a3ee:	607b      	str	r3, [r7, #4]
 800a3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3f4:	1812      	adds	r2, r2, r0
 800a3f6:	eb41 0303 	adc.w	r3, r1, r3
 800a3fa:	f04f 0400 	mov.w	r4, #0
 800a3fe:	f04f 0500 	mov.w	r5, #0
 800a402:	00dd      	lsls	r5, r3, #3
 800a404:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a408:	00d4      	lsls	r4, r2, #3
 800a40a:	4622      	mov	r2, r4
 800a40c:	462b      	mov	r3, r5
 800a40e:	eb12 0a00 	adds.w	sl, r2, r0
 800a412:	eb43 0b01 	adc.w	fp, r3, r1
 800a416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f04f 0100 	mov.w	r1, #0
 800a420:	f04f 0200 	mov.w	r2, #0
 800a424:	f04f 0300 	mov.w	r3, #0
 800a428:	008b      	lsls	r3, r1, #2
 800a42a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a42e:	0082      	lsls	r2, r0, #2
 800a430:	4650      	mov	r0, sl
 800a432:	4659      	mov	r1, fp
 800a434:	f7f6 fc20 	bl	8000c78 <__aeabi_uldivmod>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4b0e      	ldr	r3, [pc, #56]	; (800a478 <UART_SetConfig+0x38c>)
 800a43e:	fba3 1302 	umull	r1, r3, r3, r2
 800a442:	095b      	lsrs	r3, r3, #5
 800a444:	2164      	movs	r1, #100	; 0x64
 800a446:	fb01 f303 	mul.w	r3, r1, r3
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	011b      	lsls	r3, r3, #4
 800a44e:	3332      	adds	r3, #50	; 0x32
 800a450:	4a09      	ldr	r2, [pc, #36]	; (800a478 <UART_SetConfig+0x38c>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	095b      	lsrs	r3, r3, #5
 800a458:	f003 020f 	and.w	r2, r3, #15
 800a45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4432      	add	r2, r6
 800a462:	609a      	str	r2, [r3, #8]
}
 800a464:	bf00      	nop
 800a466:	377c      	adds	r7, #124	; 0x7c
 800a468:	46bd      	mov	sp, r7
 800a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46e:	bf00      	nop
 800a470:	40011000 	.word	0x40011000
 800a474:	40011400 	.word	0x40011400
 800a478:	51eb851f 	.word	0x51eb851f

0800a47c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a486:	2300      	movs	r3, #0
 800a488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a494:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	4b20      	ldr	r3, [pc, #128]	; (800a51c <FSMC_NORSRAM_Init+0xa0>)
 800a49a:	4013      	ands	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a4a6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a4ac:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a4b2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a4b8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800a4be:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800a4c4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a4ca:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a4d0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a4d6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a4dc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800a4e2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800a4e8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d103      	bne.n	800a500 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4fe:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68f9      	ldr	r1, [r7, #12]
 800a508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	fff00080 	.word	0xfff00080

0800a520 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a520:	b480      	push	{r7}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a52c:	2300      	movs	r3, #0
 800a52e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a542:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a54e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a556:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a55e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	3b01      	subs	r3, #1
 800a566:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a568:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	3b02      	subs	r3, #2
 800a570:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a572:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a578:	4313      	orrs	r3, r2
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6979      	ldr	r1, [r7, #20]
 800a588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	371c      	adds	r7, #28
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
	...

0800a59c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5b4:	d122      	bne.n	800a5fc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5be:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a5c0:	697a      	ldr	r2, [r7, #20]
 800a5c2:	4b15      	ldr	r3, [pc, #84]	; (800a618 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a5d2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a5da:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a5e2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a5e8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	6979      	ldr	r1, [r7, #20]
 800a5f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a5fa:	e005      	b.n	800a608 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	cff00000 	.word	0xcff00000

0800a61c <__errno>:
 800a61c:	4b01      	ldr	r3, [pc, #4]	; (800a624 <__errno+0x8>)
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20000068 	.word	0x20000068

0800a628 <__libc_init_array>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	4d0d      	ldr	r5, [pc, #52]	; (800a660 <__libc_init_array+0x38>)
 800a62c:	4c0d      	ldr	r4, [pc, #52]	; (800a664 <__libc_init_array+0x3c>)
 800a62e:	1b64      	subs	r4, r4, r5
 800a630:	10a4      	asrs	r4, r4, #2
 800a632:	2600      	movs	r6, #0
 800a634:	42a6      	cmp	r6, r4
 800a636:	d109      	bne.n	800a64c <__libc_init_array+0x24>
 800a638:	4d0b      	ldr	r5, [pc, #44]	; (800a668 <__libc_init_array+0x40>)
 800a63a:	4c0c      	ldr	r4, [pc, #48]	; (800a66c <__libc_init_array+0x44>)
 800a63c:	f002 f866 	bl	800c70c <_init>
 800a640:	1b64      	subs	r4, r4, r5
 800a642:	10a4      	asrs	r4, r4, #2
 800a644:	2600      	movs	r6, #0
 800a646:	42a6      	cmp	r6, r4
 800a648:	d105      	bne.n	800a656 <__libc_init_array+0x2e>
 800a64a:	bd70      	pop	{r4, r5, r6, pc}
 800a64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a650:	4798      	blx	r3
 800a652:	3601      	adds	r6, #1
 800a654:	e7ee      	b.n	800a634 <__libc_init_array+0xc>
 800a656:	f855 3b04 	ldr.w	r3, [r5], #4
 800a65a:	4798      	blx	r3
 800a65c:	3601      	adds	r6, #1
 800a65e:	e7f2      	b.n	800a646 <__libc_init_array+0x1e>
 800a660:	080f09e0 	.word	0x080f09e0
 800a664:	080f09e0 	.word	0x080f09e0
 800a668:	080f09e0 	.word	0x080f09e0
 800a66c:	080f09e4 	.word	0x080f09e4

0800a670 <__itoa>:
 800a670:	1e93      	subs	r3, r2, #2
 800a672:	2b22      	cmp	r3, #34	; 0x22
 800a674:	b510      	push	{r4, lr}
 800a676:	460c      	mov	r4, r1
 800a678:	d904      	bls.n	800a684 <__itoa+0x14>
 800a67a:	2300      	movs	r3, #0
 800a67c:	700b      	strb	r3, [r1, #0]
 800a67e:	461c      	mov	r4, r3
 800a680:	4620      	mov	r0, r4
 800a682:	bd10      	pop	{r4, pc}
 800a684:	2a0a      	cmp	r2, #10
 800a686:	d109      	bne.n	800a69c <__itoa+0x2c>
 800a688:	2800      	cmp	r0, #0
 800a68a:	da07      	bge.n	800a69c <__itoa+0x2c>
 800a68c:	232d      	movs	r3, #45	; 0x2d
 800a68e:	700b      	strb	r3, [r1, #0]
 800a690:	4240      	negs	r0, r0
 800a692:	2101      	movs	r1, #1
 800a694:	4421      	add	r1, r4
 800a696:	f000 f84d 	bl	800a734 <__utoa>
 800a69a:	e7f1      	b.n	800a680 <__itoa+0x10>
 800a69c:	2100      	movs	r1, #0
 800a69e:	e7f9      	b.n	800a694 <__itoa+0x24>

0800a6a0 <itoa>:
 800a6a0:	f7ff bfe6 	b.w	800a670 <__itoa>

0800a6a4 <memset>:
 800a6a4:	4402      	add	r2, r0
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d100      	bne.n	800a6ae <memset+0xa>
 800a6ac:	4770      	bx	lr
 800a6ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a6b2:	e7f9      	b.n	800a6a8 <memset+0x4>

0800a6b4 <rand>:
 800a6b4:	4b17      	ldr	r3, [pc, #92]	; (800a714 <rand+0x60>)
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	681c      	ldr	r4, [r3, #0]
 800a6ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6bc:	b9b3      	cbnz	r3, 800a6ec <rand+0x38>
 800a6be:	2018      	movs	r0, #24
 800a6c0:	f000 f8aa 	bl	800a818 <malloc>
 800a6c4:	63a0      	str	r0, [r4, #56]	; 0x38
 800a6c6:	b928      	cbnz	r0, 800a6d4 <rand+0x20>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	4b13      	ldr	r3, [pc, #76]	; (800a718 <rand+0x64>)
 800a6cc:	4813      	ldr	r0, [pc, #76]	; (800a71c <rand+0x68>)
 800a6ce:	214e      	movs	r1, #78	; 0x4e
 800a6d0:	f000 f872 	bl	800a7b8 <__assert_func>
 800a6d4:	4a12      	ldr	r2, [pc, #72]	; (800a720 <rand+0x6c>)
 800a6d6:	4b13      	ldr	r3, [pc, #76]	; (800a724 <rand+0x70>)
 800a6d8:	e9c0 2300 	strd	r2, r3, [r0]
 800a6dc:	4b12      	ldr	r3, [pc, #72]	; (800a728 <rand+0x74>)
 800a6de:	6083      	str	r3, [r0, #8]
 800a6e0:	230b      	movs	r3, #11
 800a6e2:	8183      	strh	r3, [r0, #12]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a6ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a6ee:	480f      	ldr	r0, [pc, #60]	; (800a72c <rand+0x78>)
 800a6f0:	690a      	ldr	r2, [r1, #16]
 800a6f2:	694b      	ldr	r3, [r1, #20]
 800a6f4:	4c0e      	ldr	r4, [pc, #56]	; (800a730 <rand+0x7c>)
 800a6f6:	4350      	muls	r0, r2
 800a6f8:	fb04 0003 	mla	r0, r4, r3, r0
 800a6fc:	fba2 3404 	umull	r3, r4, r2, r4
 800a700:	1c5a      	adds	r2, r3, #1
 800a702:	4404      	add	r4, r0
 800a704:	f144 0000 	adc.w	r0, r4, #0
 800a708:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800a70c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a710:	bd10      	pop	{r4, pc}
 800a712:	bf00      	nop
 800a714:	20000068 	.word	0x20000068
 800a718:	080f082c 	.word	0x080f082c
 800a71c:	080f0843 	.word	0x080f0843
 800a720:	abcd330e 	.word	0xabcd330e
 800a724:	e66d1234 	.word	0xe66d1234
 800a728:	0005deec 	.word	0x0005deec
 800a72c:	5851f42d 	.word	0x5851f42d
 800a730:	4c957f2d 	.word	0x4c957f2d

0800a734 <__utoa>:
 800a734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a736:	4c1f      	ldr	r4, [pc, #124]	; (800a7b4 <__utoa+0x80>)
 800a738:	b08b      	sub	sp, #44	; 0x2c
 800a73a:	4605      	mov	r5, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	466e      	mov	r6, sp
 800a740:	f104 0c20 	add.w	ip, r4, #32
 800a744:	6820      	ldr	r0, [r4, #0]
 800a746:	6861      	ldr	r1, [r4, #4]
 800a748:	4637      	mov	r7, r6
 800a74a:	c703      	stmia	r7!, {r0, r1}
 800a74c:	3408      	adds	r4, #8
 800a74e:	4564      	cmp	r4, ip
 800a750:	463e      	mov	r6, r7
 800a752:	d1f7      	bne.n	800a744 <__utoa+0x10>
 800a754:	7921      	ldrb	r1, [r4, #4]
 800a756:	7139      	strb	r1, [r7, #4]
 800a758:	1e91      	subs	r1, r2, #2
 800a75a:	6820      	ldr	r0, [r4, #0]
 800a75c:	6038      	str	r0, [r7, #0]
 800a75e:	2922      	cmp	r1, #34	; 0x22
 800a760:	f04f 0100 	mov.w	r1, #0
 800a764:	d904      	bls.n	800a770 <__utoa+0x3c>
 800a766:	7019      	strb	r1, [r3, #0]
 800a768:	460b      	mov	r3, r1
 800a76a:	4618      	mov	r0, r3
 800a76c:	b00b      	add	sp, #44	; 0x2c
 800a76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a770:	1e58      	subs	r0, r3, #1
 800a772:	4684      	mov	ip, r0
 800a774:	fbb5 f7f2 	udiv	r7, r5, r2
 800a778:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a77c:	fb02 5617 	mls	r6, r2, r7, r5
 800a780:	4476      	add	r6, lr
 800a782:	460c      	mov	r4, r1
 800a784:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a788:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a78c:	462e      	mov	r6, r5
 800a78e:	42b2      	cmp	r2, r6
 800a790:	f101 0101 	add.w	r1, r1, #1
 800a794:	463d      	mov	r5, r7
 800a796:	d9ed      	bls.n	800a774 <__utoa+0x40>
 800a798:	2200      	movs	r2, #0
 800a79a:	545a      	strb	r2, [r3, r1]
 800a79c:	1919      	adds	r1, r3, r4
 800a79e:	1aa5      	subs	r5, r4, r2
 800a7a0:	42aa      	cmp	r2, r5
 800a7a2:	dae2      	bge.n	800a76a <__utoa+0x36>
 800a7a4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a7a8:	780e      	ldrb	r6, [r1, #0]
 800a7aa:	7006      	strb	r6, [r0, #0]
 800a7ac:	3201      	adds	r2, #1
 800a7ae:	f801 5901 	strb.w	r5, [r1], #-1
 800a7b2:	e7f4      	b.n	800a79e <__utoa+0x6a>
 800a7b4:	080f08a2 	.word	0x080f08a2

0800a7b8 <__assert_func>:
 800a7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ba:	4614      	mov	r4, r2
 800a7bc:	461a      	mov	r2, r3
 800a7be:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <__assert_func+0x2c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	68d8      	ldr	r0, [r3, #12]
 800a7c6:	b14c      	cbz	r4, 800a7dc <__assert_func+0x24>
 800a7c8:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <__assert_func+0x30>)
 800a7ca:	9100      	str	r1, [sp, #0]
 800a7cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7d0:	4906      	ldr	r1, [pc, #24]	; (800a7ec <__assert_func+0x34>)
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	f000 f80e 	bl	800a7f4 <fiprintf>
 800a7d8:	f000 fc8e 	bl	800b0f8 <abort>
 800a7dc:	4b04      	ldr	r3, [pc, #16]	; (800a7f0 <__assert_func+0x38>)
 800a7de:	461c      	mov	r4, r3
 800a7e0:	e7f3      	b.n	800a7ca <__assert_func+0x12>
 800a7e2:	bf00      	nop
 800a7e4:	20000068 	.word	0x20000068
 800a7e8:	080f08c7 	.word	0x080f08c7
 800a7ec:	080f08d4 	.word	0x080f08d4
 800a7f0:	080f0902 	.word	0x080f0902

0800a7f4 <fiprintf>:
 800a7f4:	b40e      	push	{r1, r2, r3}
 800a7f6:	b503      	push	{r0, r1, lr}
 800a7f8:	4601      	mov	r1, r0
 800a7fa:	ab03      	add	r3, sp, #12
 800a7fc:	4805      	ldr	r0, [pc, #20]	; (800a814 <fiprintf+0x20>)
 800a7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a802:	6800      	ldr	r0, [r0, #0]
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	f000 f8e3 	bl	800a9d0 <_vfiprintf_r>
 800a80a:	b002      	add	sp, #8
 800a80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a810:	b003      	add	sp, #12
 800a812:	4770      	bx	lr
 800a814:	20000068 	.word	0x20000068

0800a818 <malloc>:
 800a818:	4b02      	ldr	r3, [pc, #8]	; (800a824 <malloc+0xc>)
 800a81a:	4601      	mov	r1, r0
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	f000 b853 	b.w	800a8c8 <_malloc_r>
 800a822:	bf00      	nop
 800a824:	20000068 	.word	0x20000068

0800a828 <_free_r>:
 800a828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a82a:	2900      	cmp	r1, #0
 800a82c:	d048      	beq.n	800a8c0 <_free_r+0x98>
 800a82e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a832:	9001      	str	r0, [sp, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f1a1 0404 	sub.w	r4, r1, #4
 800a83a:	bfb8      	it	lt
 800a83c:	18e4      	addlt	r4, r4, r3
 800a83e:	f000 fe81 	bl	800b544 <__malloc_lock>
 800a842:	4a20      	ldr	r2, [pc, #128]	; (800a8c4 <_free_r+0x9c>)
 800a844:	9801      	ldr	r0, [sp, #4]
 800a846:	6813      	ldr	r3, [r2, #0]
 800a848:	4615      	mov	r5, r2
 800a84a:	b933      	cbnz	r3, 800a85a <_free_r+0x32>
 800a84c:	6063      	str	r3, [r4, #4]
 800a84e:	6014      	str	r4, [r2, #0]
 800a850:	b003      	add	sp, #12
 800a852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a856:	f000 be7b 	b.w	800b550 <__malloc_unlock>
 800a85a:	42a3      	cmp	r3, r4
 800a85c:	d90b      	bls.n	800a876 <_free_r+0x4e>
 800a85e:	6821      	ldr	r1, [r4, #0]
 800a860:	1862      	adds	r2, r4, r1
 800a862:	4293      	cmp	r3, r2
 800a864:	bf04      	itt	eq
 800a866:	681a      	ldreq	r2, [r3, #0]
 800a868:	685b      	ldreq	r3, [r3, #4]
 800a86a:	6063      	str	r3, [r4, #4]
 800a86c:	bf04      	itt	eq
 800a86e:	1852      	addeq	r2, r2, r1
 800a870:	6022      	streq	r2, [r4, #0]
 800a872:	602c      	str	r4, [r5, #0]
 800a874:	e7ec      	b.n	800a850 <_free_r+0x28>
 800a876:	461a      	mov	r2, r3
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	b10b      	cbz	r3, 800a880 <_free_r+0x58>
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	d9fa      	bls.n	800a876 <_free_r+0x4e>
 800a880:	6811      	ldr	r1, [r2, #0]
 800a882:	1855      	adds	r5, r2, r1
 800a884:	42a5      	cmp	r5, r4
 800a886:	d10b      	bne.n	800a8a0 <_free_r+0x78>
 800a888:	6824      	ldr	r4, [r4, #0]
 800a88a:	4421      	add	r1, r4
 800a88c:	1854      	adds	r4, r2, r1
 800a88e:	42a3      	cmp	r3, r4
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	d1dd      	bne.n	800a850 <_free_r+0x28>
 800a894:	681c      	ldr	r4, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	6053      	str	r3, [r2, #4]
 800a89a:	4421      	add	r1, r4
 800a89c:	6011      	str	r1, [r2, #0]
 800a89e:	e7d7      	b.n	800a850 <_free_r+0x28>
 800a8a0:	d902      	bls.n	800a8a8 <_free_r+0x80>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	e7d3      	b.n	800a850 <_free_r+0x28>
 800a8a8:	6825      	ldr	r5, [r4, #0]
 800a8aa:	1961      	adds	r1, r4, r5
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	bf04      	itt	eq
 800a8b0:	6819      	ldreq	r1, [r3, #0]
 800a8b2:	685b      	ldreq	r3, [r3, #4]
 800a8b4:	6063      	str	r3, [r4, #4]
 800a8b6:	bf04      	itt	eq
 800a8b8:	1949      	addeq	r1, r1, r5
 800a8ba:	6021      	streq	r1, [r4, #0]
 800a8bc:	6054      	str	r4, [r2, #4]
 800a8be:	e7c7      	b.n	800a850 <_free_r+0x28>
 800a8c0:	b003      	add	sp, #12
 800a8c2:	bd30      	pop	{r4, r5, pc}
 800a8c4:	20000128 	.word	0x20000128

0800a8c8 <_malloc_r>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	1ccd      	adds	r5, r1, #3
 800a8cc:	f025 0503 	bic.w	r5, r5, #3
 800a8d0:	3508      	adds	r5, #8
 800a8d2:	2d0c      	cmp	r5, #12
 800a8d4:	bf38      	it	cc
 800a8d6:	250c      	movcc	r5, #12
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	4606      	mov	r6, r0
 800a8dc:	db01      	blt.n	800a8e2 <_malloc_r+0x1a>
 800a8de:	42a9      	cmp	r1, r5
 800a8e0:	d903      	bls.n	800a8ea <_malloc_r+0x22>
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	6033      	str	r3, [r6, #0]
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ea:	f000 fe2b 	bl	800b544 <__malloc_lock>
 800a8ee:	4921      	ldr	r1, [pc, #132]	; (800a974 <_malloc_r+0xac>)
 800a8f0:	680a      	ldr	r2, [r1, #0]
 800a8f2:	4614      	mov	r4, r2
 800a8f4:	b99c      	cbnz	r4, 800a91e <_malloc_r+0x56>
 800a8f6:	4f20      	ldr	r7, [pc, #128]	; (800a978 <_malloc_r+0xb0>)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	b923      	cbnz	r3, 800a906 <_malloc_r+0x3e>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4630      	mov	r0, r6
 800a900:	f000 fb2a 	bl	800af58 <_sbrk_r>
 800a904:	6038      	str	r0, [r7, #0]
 800a906:	4629      	mov	r1, r5
 800a908:	4630      	mov	r0, r6
 800a90a:	f000 fb25 	bl	800af58 <_sbrk_r>
 800a90e:	1c43      	adds	r3, r0, #1
 800a910:	d123      	bne.n	800a95a <_malloc_r+0x92>
 800a912:	230c      	movs	r3, #12
 800a914:	6033      	str	r3, [r6, #0]
 800a916:	4630      	mov	r0, r6
 800a918:	f000 fe1a 	bl	800b550 <__malloc_unlock>
 800a91c:	e7e3      	b.n	800a8e6 <_malloc_r+0x1e>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	1b5b      	subs	r3, r3, r5
 800a922:	d417      	bmi.n	800a954 <_malloc_r+0x8c>
 800a924:	2b0b      	cmp	r3, #11
 800a926:	d903      	bls.n	800a930 <_malloc_r+0x68>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	441c      	add	r4, r3
 800a92c:	6025      	str	r5, [r4, #0]
 800a92e:	e004      	b.n	800a93a <_malloc_r+0x72>
 800a930:	6863      	ldr	r3, [r4, #4]
 800a932:	42a2      	cmp	r2, r4
 800a934:	bf0c      	ite	eq
 800a936:	600b      	streq	r3, [r1, #0]
 800a938:	6053      	strne	r3, [r2, #4]
 800a93a:	4630      	mov	r0, r6
 800a93c:	f000 fe08 	bl	800b550 <__malloc_unlock>
 800a940:	f104 000b 	add.w	r0, r4, #11
 800a944:	1d23      	adds	r3, r4, #4
 800a946:	f020 0007 	bic.w	r0, r0, #7
 800a94a:	1ac2      	subs	r2, r0, r3
 800a94c:	d0cc      	beq.n	800a8e8 <_malloc_r+0x20>
 800a94e:	1a1b      	subs	r3, r3, r0
 800a950:	50a3      	str	r3, [r4, r2]
 800a952:	e7c9      	b.n	800a8e8 <_malloc_r+0x20>
 800a954:	4622      	mov	r2, r4
 800a956:	6864      	ldr	r4, [r4, #4]
 800a958:	e7cc      	b.n	800a8f4 <_malloc_r+0x2c>
 800a95a:	1cc4      	adds	r4, r0, #3
 800a95c:	f024 0403 	bic.w	r4, r4, #3
 800a960:	42a0      	cmp	r0, r4
 800a962:	d0e3      	beq.n	800a92c <_malloc_r+0x64>
 800a964:	1a21      	subs	r1, r4, r0
 800a966:	4630      	mov	r0, r6
 800a968:	f000 faf6 	bl	800af58 <_sbrk_r>
 800a96c:	3001      	adds	r0, #1
 800a96e:	d1dd      	bne.n	800a92c <_malloc_r+0x64>
 800a970:	e7cf      	b.n	800a912 <_malloc_r+0x4a>
 800a972:	bf00      	nop
 800a974:	20000128 	.word	0x20000128
 800a978:	2000012c 	.word	0x2000012c

0800a97c <__sfputc_r>:
 800a97c:	6893      	ldr	r3, [r2, #8]
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	b410      	push	{r4}
 800a984:	6093      	str	r3, [r2, #8]
 800a986:	da08      	bge.n	800a99a <__sfputc_r+0x1e>
 800a988:	6994      	ldr	r4, [r2, #24]
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	db01      	blt.n	800a992 <__sfputc_r+0x16>
 800a98e:	290a      	cmp	r1, #10
 800a990:	d103      	bne.n	800a99a <__sfputc_r+0x1e>
 800a992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a996:	f000 baef 	b.w	800af78 <__swbuf_r>
 800a99a:	6813      	ldr	r3, [r2, #0]
 800a99c:	1c58      	adds	r0, r3, #1
 800a99e:	6010      	str	r0, [r2, #0]
 800a9a0:	7019      	strb	r1, [r3, #0]
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <__sfputs_r>:
 800a9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	460f      	mov	r7, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	18d5      	adds	r5, r2, r3
 800a9b4:	42ac      	cmp	r4, r5
 800a9b6:	d101      	bne.n	800a9bc <__sfputs_r+0x12>
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e007      	b.n	800a9cc <__sfputs_r+0x22>
 800a9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c0:	463a      	mov	r2, r7
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ffda 	bl	800a97c <__sfputc_r>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d1f3      	bne.n	800a9b4 <__sfputs_r+0xa>
 800a9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9d0 <_vfiprintf_r>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	b09d      	sub	sp, #116	; 0x74
 800a9d8:	4614      	mov	r4, r2
 800a9da:	4698      	mov	r8, r3
 800a9dc:	4606      	mov	r6, r0
 800a9de:	b118      	cbz	r0, 800a9e8 <_vfiprintf_r+0x18>
 800a9e0:	6983      	ldr	r3, [r0, #24]
 800a9e2:	b90b      	cbnz	r3, 800a9e8 <_vfiprintf_r+0x18>
 800a9e4:	f000 fcaa 	bl	800b33c <__sinit>
 800a9e8:	4b89      	ldr	r3, [pc, #548]	; (800ac10 <_vfiprintf_r+0x240>)
 800a9ea:	429d      	cmp	r5, r3
 800a9ec:	d11b      	bne.n	800aa26 <_vfiprintf_r+0x56>
 800a9ee:	6875      	ldr	r5, [r6, #4]
 800a9f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f2:	07d9      	lsls	r1, r3, #31
 800a9f4:	d405      	bmi.n	800aa02 <_vfiprintf_r+0x32>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	059a      	lsls	r2, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_vfiprintf_r+0x32>
 800a9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9fe:	f000 fd3b 	bl	800b478 <__retarget_lock_acquire_recursive>
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	071b      	lsls	r3, r3, #28
 800aa06:	d501      	bpl.n	800aa0c <_vfiprintf_r+0x3c>
 800aa08:	692b      	ldr	r3, [r5, #16]
 800aa0a:	b9eb      	cbnz	r3, 800aa48 <_vfiprintf_r+0x78>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 fb04 	bl	800b01c <__swsetup_r>
 800aa14:	b1c0      	cbz	r0, 800aa48 <_vfiprintf_r+0x78>
 800aa16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa18:	07dc      	lsls	r4, r3, #31
 800aa1a:	d50e      	bpl.n	800aa3a <_vfiprintf_r+0x6a>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b01d      	add	sp, #116	; 0x74
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	4b7b      	ldr	r3, [pc, #492]	; (800ac14 <_vfiprintf_r+0x244>)
 800aa28:	429d      	cmp	r5, r3
 800aa2a:	d101      	bne.n	800aa30 <_vfiprintf_r+0x60>
 800aa2c:	68b5      	ldr	r5, [r6, #8]
 800aa2e:	e7df      	b.n	800a9f0 <_vfiprintf_r+0x20>
 800aa30:	4b79      	ldr	r3, [pc, #484]	; (800ac18 <_vfiprintf_r+0x248>)
 800aa32:	429d      	cmp	r5, r3
 800aa34:	bf08      	it	eq
 800aa36:	68f5      	ldreq	r5, [r6, #12]
 800aa38:	e7da      	b.n	800a9f0 <_vfiprintf_r+0x20>
 800aa3a:	89ab      	ldrh	r3, [r5, #12]
 800aa3c:	0598      	lsls	r0, r3, #22
 800aa3e:	d4ed      	bmi.n	800aa1c <_vfiprintf_r+0x4c>
 800aa40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa42:	f000 fd1a 	bl	800b47a <__retarget_lock_release_recursive>
 800aa46:	e7e9      	b.n	800aa1c <_vfiprintf_r+0x4c>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4c:	2320      	movs	r3, #32
 800aa4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa52:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa56:	2330      	movs	r3, #48	; 0x30
 800aa58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac1c <_vfiprintf_r+0x24c>
 800aa5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa60:	f04f 0901 	mov.w	r9, #1
 800aa64:	4623      	mov	r3, r4
 800aa66:	469a      	mov	sl, r3
 800aa68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa6c:	b10a      	cbz	r2, 800aa72 <_vfiprintf_r+0xa2>
 800aa6e:	2a25      	cmp	r2, #37	; 0x25
 800aa70:	d1f9      	bne.n	800aa66 <_vfiprintf_r+0x96>
 800aa72:	ebba 0b04 	subs.w	fp, sl, r4
 800aa76:	d00b      	beq.n	800aa90 <_vfiprintf_r+0xc0>
 800aa78:	465b      	mov	r3, fp
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f7ff ff93 	bl	800a9aa <__sfputs_r>
 800aa84:	3001      	adds	r0, #1
 800aa86:	f000 80aa 	beq.w	800abde <_vfiprintf_r+0x20e>
 800aa8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa8c:	445a      	add	r2, fp
 800aa8e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa90:	f89a 3000 	ldrb.w	r3, [sl]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80a2 	beq.w	800abde <_vfiprintf_r+0x20e>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa4:	f10a 0a01 	add.w	sl, sl, #1
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	9307      	str	r3, [sp, #28]
 800aaac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aab0:	931a      	str	r3, [sp, #104]	; 0x68
 800aab2:	4654      	mov	r4, sl
 800aab4:	2205      	movs	r2, #5
 800aab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaba:	4858      	ldr	r0, [pc, #352]	; (800ac1c <_vfiprintf_r+0x24c>)
 800aabc:	f7f5 fb88 	bl	80001d0 <memchr>
 800aac0:	9a04      	ldr	r2, [sp, #16]
 800aac2:	b9d8      	cbnz	r0, 800aafc <_vfiprintf_r+0x12c>
 800aac4:	06d1      	lsls	r1, r2, #27
 800aac6:	bf44      	itt	mi
 800aac8:	2320      	movmi	r3, #32
 800aaca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aace:	0713      	lsls	r3, r2, #28
 800aad0:	bf44      	itt	mi
 800aad2:	232b      	movmi	r3, #43	; 0x2b
 800aad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad8:	f89a 3000 	ldrb.w	r3, [sl]
 800aadc:	2b2a      	cmp	r3, #42	; 0x2a
 800aade:	d015      	beq.n	800ab0c <_vfiprintf_r+0x13c>
 800aae0:	9a07      	ldr	r2, [sp, #28]
 800aae2:	4654      	mov	r4, sl
 800aae4:	2000      	movs	r0, #0
 800aae6:	f04f 0c0a 	mov.w	ip, #10
 800aaea:	4621      	mov	r1, r4
 800aaec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf0:	3b30      	subs	r3, #48	; 0x30
 800aaf2:	2b09      	cmp	r3, #9
 800aaf4:	d94e      	bls.n	800ab94 <_vfiprintf_r+0x1c4>
 800aaf6:	b1b0      	cbz	r0, 800ab26 <_vfiprintf_r+0x156>
 800aaf8:	9207      	str	r2, [sp, #28]
 800aafa:	e014      	b.n	800ab26 <_vfiprintf_r+0x156>
 800aafc:	eba0 0308 	sub.w	r3, r0, r8
 800ab00:	fa09 f303 	lsl.w	r3, r9, r3
 800ab04:	4313      	orrs	r3, r2
 800ab06:	9304      	str	r3, [sp, #16]
 800ab08:	46a2      	mov	sl, r4
 800ab0a:	e7d2      	b.n	800aab2 <_vfiprintf_r+0xe2>
 800ab0c:	9b03      	ldr	r3, [sp, #12]
 800ab0e:	1d19      	adds	r1, r3, #4
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	9103      	str	r1, [sp, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfbb      	ittet	lt
 800ab18:	425b      	neglt	r3, r3
 800ab1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab1e:	9307      	strge	r3, [sp, #28]
 800ab20:	9307      	strlt	r3, [sp, #28]
 800ab22:	bfb8      	it	lt
 800ab24:	9204      	strlt	r2, [sp, #16]
 800ab26:	7823      	ldrb	r3, [r4, #0]
 800ab28:	2b2e      	cmp	r3, #46	; 0x2e
 800ab2a:	d10c      	bne.n	800ab46 <_vfiprintf_r+0x176>
 800ab2c:	7863      	ldrb	r3, [r4, #1]
 800ab2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab30:	d135      	bne.n	800ab9e <_vfiprintf_r+0x1ce>
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	1d1a      	adds	r2, r3, #4
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	9203      	str	r2, [sp, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bfb8      	it	lt
 800ab3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab42:	3402      	adds	r4, #2
 800ab44:	9305      	str	r3, [sp, #20]
 800ab46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac2c <_vfiprintf_r+0x25c>
 800ab4a:	7821      	ldrb	r1, [r4, #0]
 800ab4c:	2203      	movs	r2, #3
 800ab4e:	4650      	mov	r0, sl
 800ab50:	f7f5 fb3e 	bl	80001d0 <memchr>
 800ab54:	b140      	cbz	r0, 800ab68 <_vfiprintf_r+0x198>
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	eba0 000a 	sub.w	r0, r0, sl
 800ab5c:	fa03 f000 	lsl.w	r0, r3, r0
 800ab60:	9b04      	ldr	r3, [sp, #16]
 800ab62:	4303      	orrs	r3, r0
 800ab64:	3401      	adds	r4, #1
 800ab66:	9304      	str	r3, [sp, #16]
 800ab68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab6c:	482c      	ldr	r0, [pc, #176]	; (800ac20 <_vfiprintf_r+0x250>)
 800ab6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab72:	2206      	movs	r2, #6
 800ab74:	f7f5 fb2c 	bl	80001d0 <memchr>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d03f      	beq.n	800abfc <_vfiprintf_r+0x22c>
 800ab7c:	4b29      	ldr	r3, [pc, #164]	; (800ac24 <_vfiprintf_r+0x254>)
 800ab7e:	bb1b      	cbnz	r3, 800abc8 <_vfiprintf_r+0x1f8>
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	3307      	adds	r3, #7
 800ab84:	f023 0307 	bic.w	r3, r3, #7
 800ab88:	3308      	adds	r3, #8
 800ab8a:	9303      	str	r3, [sp, #12]
 800ab8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8e:	443b      	add	r3, r7
 800ab90:	9309      	str	r3, [sp, #36]	; 0x24
 800ab92:	e767      	b.n	800aa64 <_vfiprintf_r+0x94>
 800ab94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab98:	460c      	mov	r4, r1
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	e7a5      	b.n	800aaea <_vfiprintf_r+0x11a>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	3401      	adds	r4, #1
 800aba2:	9305      	str	r3, [sp, #20]
 800aba4:	4619      	mov	r1, r3
 800aba6:	f04f 0c0a 	mov.w	ip, #10
 800abaa:	4620      	mov	r0, r4
 800abac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abb0:	3a30      	subs	r2, #48	; 0x30
 800abb2:	2a09      	cmp	r2, #9
 800abb4:	d903      	bls.n	800abbe <_vfiprintf_r+0x1ee>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0c5      	beq.n	800ab46 <_vfiprintf_r+0x176>
 800abba:	9105      	str	r1, [sp, #20]
 800abbc:	e7c3      	b.n	800ab46 <_vfiprintf_r+0x176>
 800abbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800abc2:	4604      	mov	r4, r0
 800abc4:	2301      	movs	r3, #1
 800abc6:	e7f0      	b.n	800abaa <_vfiprintf_r+0x1da>
 800abc8:	ab03      	add	r3, sp, #12
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	462a      	mov	r2, r5
 800abce:	4b16      	ldr	r3, [pc, #88]	; (800ac28 <_vfiprintf_r+0x258>)
 800abd0:	a904      	add	r1, sp, #16
 800abd2:	4630      	mov	r0, r6
 800abd4:	f3af 8000 	nop.w
 800abd8:	4607      	mov	r7, r0
 800abda:	1c78      	adds	r0, r7, #1
 800abdc:	d1d6      	bne.n	800ab8c <_vfiprintf_r+0x1bc>
 800abde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe0:	07d9      	lsls	r1, r3, #31
 800abe2:	d405      	bmi.n	800abf0 <_vfiprintf_r+0x220>
 800abe4:	89ab      	ldrh	r3, [r5, #12]
 800abe6:	059a      	lsls	r2, r3, #22
 800abe8:	d402      	bmi.n	800abf0 <_vfiprintf_r+0x220>
 800abea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abec:	f000 fc45 	bl	800b47a <__retarget_lock_release_recursive>
 800abf0:	89ab      	ldrh	r3, [r5, #12]
 800abf2:	065b      	lsls	r3, r3, #25
 800abf4:	f53f af12 	bmi.w	800aa1c <_vfiprintf_r+0x4c>
 800abf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abfa:	e711      	b.n	800aa20 <_vfiprintf_r+0x50>
 800abfc:	ab03      	add	r3, sp, #12
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	462a      	mov	r2, r5
 800ac02:	4b09      	ldr	r3, [pc, #36]	; (800ac28 <_vfiprintf_r+0x258>)
 800ac04:	a904      	add	r1, sp, #16
 800ac06:	4630      	mov	r0, r6
 800ac08:	f000 f880 	bl	800ad0c <_printf_i>
 800ac0c:	e7e4      	b.n	800abd8 <_vfiprintf_r+0x208>
 800ac0e:	bf00      	nop
 800ac10:	080f0958 	.word	0x080f0958
 800ac14:	080f0978 	.word	0x080f0978
 800ac18:	080f0938 	.word	0x080f0938
 800ac1c:	080f0903 	.word	0x080f0903
 800ac20:	080f090d 	.word	0x080f090d
 800ac24:	00000000 	.word	0x00000000
 800ac28:	0800a9ab 	.word	0x0800a9ab
 800ac2c:	080f0909 	.word	0x080f0909

0800ac30 <_printf_common>:
 800ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	4616      	mov	r6, r2
 800ac36:	4699      	mov	r9, r3
 800ac38:	688a      	ldr	r2, [r1, #8]
 800ac3a:	690b      	ldr	r3, [r1, #16]
 800ac3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac40:	4293      	cmp	r3, r2
 800ac42:	bfb8      	it	lt
 800ac44:	4613      	movlt	r3, r2
 800ac46:	6033      	str	r3, [r6, #0]
 800ac48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac4c:	4607      	mov	r7, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	b10a      	cbz	r2, 800ac56 <_printf_common+0x26>
 800ac52:	3301      	adds	r3, #1
 800ac54:	6033      	str	r3, [r6, #0]
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	0699      	lsls	r1, r3, #26
 800ac5a:	bf42      	ittt	mi
 800ac5c:	6833      	ldrmi	r3, [r6, #0]
 800ac5e:	3302      	addmi	r3, #2
 800ac60:	6033      	strmi	r3, [r6, #0]
 800ac62:	6825      	ldr	r5, [r4, #0]
 800ac64:	f015 0506 	ands.w	r5, r5, #6
 800ac68:	d106      	bne.n	800ac78 <_printf_common+0x48>
 800ac6a:	f104 0a19 	add.w	sl, r4, #25
 800ac6e:	68e3      	ldr	r3, [r4, #12]
 800ac70:	6832      	ldr	r2, [r6, #0]
 800ac72:	1a9b      	subs	r3, r3, r2
 800ac74:	42ab      	cmp	r3, r5
 800ac76:	dc26      	bgt.n	800acc6 <_printf_common+0x96>
 800ac78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac7c:	1e13      	subs	r3, r2, #0
 800ac7e:	6822      	ldr	r2, [r4, #0]
 800ac80:	bf18      	it	ne
 800ac82:	2301      	movne	r3, #1
 800ac84:	0692      	lsls	r2, r2, #26
 800ac86:	d42b      	bmi.n	800ace0 <_printf_common+0xb0>
 800ac88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	4638      	mov	r0, r7
 800ac90:	47c0      	blx	r8
 800ac92:	3001      	adds	r0, #1
 800ac94:	d01e      	beq.n	800acd4 <_printf_common+0xa4>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	68e5      	ldr	r5, [r4, #12]
 800ac9a:	6832      	ldr	r2, [r6, #0]
 800ac9c:	f003 0306 	and.w	r3, r3, #6
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	bf08      	it	eq
 800aca4:	1aad      	subeq	r5, r5, r2
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	6922      	ldr	r2, [r4, #16]
 800acaa:	bf0c      	ite	eq
 800acac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acb0:	2500      	movne	r5, #0
 800acb2:	4293      	cmp	r3, r2
 800acb4:	bfc4      	itt	gt
 800acb6:	1a9b      	subgt	r3, r3, r2
 800acb8:	18ed      	addgt	r5, r5, r3
 800acba:	2600      	movs	r6, #0
 800acbc:	341a      	adds	r4, #26
 800acbe:	42b5      	cmp	r5, r6
 800acc0:	d11a      	bne.n	800acf8 <_printf_common+0xc8>
 800acc2:	2000      	movs	r0, #0
 800acc4:	e008      	b.n	800acd8 <_printf_common+0xa8>
 800acc6:	2301      	movs	r3, #1
 800acc8:	4652      	mov	r2, sl
 800acca:	4649      	mov	r1, r9
 800accc:	4638      	mov	r0, r7
 800acce:	47c0      	blx	r8
 800acd0:	3001      	adds	r0, #1
 800acd2:	d103      	bne.n	800acdc <_printf_common+0xac>
 800acd4:	f04f 30ff 	mov.w	r0, #4294967295
 800acd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acdc:	3501      	adds	r5, #1
 800acde:	e7c6      	b.n	800ac6e <_printf_common+0x3e>
 800ace0:	18e1      	adds	r1, r4, r3
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	2030      	movs	r0, #48	; 0x30
 800ace6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acea:	4422      	add	r2, r4
 800acec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acf4:	3302      	adds	r3, #2
 800acf6:	e7c7      	b.n	800ac88 <_printf_common+0x58>
 800acf8:	2301      	movs	r3, #1
 800acfa:	4622      	mov	r2, r4
 800acfc:	4649      	mov	r1, r9
 800acfe:	4638      	mov	r0, r7
 800ad00:	47c0      	blx	r8
 800ad02:	3001      	adds	r0, #1
 800ad04:	d0e6      	beq.n	800acd4 <_printf_common+0xa4>
 800ad06:	3601      	adds	r6, #1
 800ad08:	e7d9      	b.n	800acbe <_printf_common+0x8e>
	...

0800ad0c <_printf_i>:
 800ad0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad10:	460c      	mov	r4, r1
 800ad12:	4691      	mov	r9, r2
 800ad14:	7e27      	ldrb	r7, [r4, #24]
 800ad16:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad18:	2f78      	cmp	r7, #120	; 0x78
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	469a      	mov	sl, r3
 800ad1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad22:	d807      	bhi.n	800ad34 <_printf_i+0x28>
 800ad24:	2f62      	cmp	r7, #98	; 0x62
 800ad26:	d80a      	bhi.n	800ad3e <_printf_i+0x32>
 800ad28:	2f00      	cmp	r7, #0
 800ad2a:	f000 80d8 	beq.w	800aede <_printf_i+0x1d2>
 800ad2e:	2f58      	cmp	r7, #88	; 0x58
 800ad30:	f000 80a3 	beq.w	800ae7a <_printf_i+0x16e>
 800ad34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad3c:	e03a      	b.n	800adb4 <_printf_i+0xa8>
 800ad3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad42:	2b15      	cmp	r3, #21
 800ad44:	d8f6      	bhi.n	800ad34 <_printf_i+0x28>
 800ad46:	a001      	add	r0, pc, #4	; (adr r0, 800ad4c <_printf_i+0x40>)
 800ad48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ad4c:	0800ada5 	.word	0x0800ada5
 800ad50:	0800adb9 	.word	0x0800adb9
 800ad54:	0800ad35 	.word	0x0800ad35
 800ad58:	0800ad35 	.word	0x0800ad35
 800ad5c:	0800ad35 	.word	0x0800ad35
 800ad60:	0800ad35 	.word	0x0800ad35
 800ad64:	0800adb9 	.word	0x0800adb9
 800ad68:	0800ad35 	.word	0x0800ad35
 800ad6c:	0800ad35 	.word	0x0800ad35
 800ad70:	0800ad35 	.word	0x0800ad35
 800ad74:	0800ad35 	.word	0x0800ad35
 800ad78:	0800aec5 	.word	0x0800aec5
 800ad7c:	0800ade9 	.word	0x0800ade9
 800ad80:	0800aea7 	.word	0x0800aea7
 800ad84:	0800ad35 	.word	0x0800ad35
 800ad88:	0800ad35 	.word	0x0800ad35
 800ad8c:	0800aee7 	.word	0x0800aee7
 800ad90:	0800ad35 	.word	0x0800ad35
 800ad94:	0800ade9 	.word	0x0800ade9
 800ad98:	0800ad35 	.word	0x0800ad35
 800ad9c:	0800ad35 	.word	0x0800ad35
 800ada0:	0800aeaf 	.word	0x0800aeaf
 800ada4:	680b      	ldr	r3, [r1, #0]
 800ada6:	1d1a      	adds	r2, r3, #4
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	600a      	str	r2, [r1, #0]
 800adac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800adb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adb4:	2301      	movs	r3, #1
 800adb6:	e0a3      	b.n	800af00 <_printf_i+0x1f4>
 800adb8:	6825      	ldr	r5, [r4, #0]
 800adba:	6808      	ldr	r0, [r1, #0]
 800adbc:	062e      	lsls	r6, r5, #24
 800adbe:	f100 0304 	add.w	r3, r0, #4
 800adc2:	d50a      	bpl.n	800adda <_printf_i+0xce>
 800adc4:	6805      	ldr	r5, [r0, #0]
 800adc6:	600b      	str	r3, [r1, #0]
 800adc8:	2d00      	cmp	r5, #0
 800adca:	da03      	bge.n	800add4 <_printf_i+0xc8>
 800adcc:	232d      	movs	r3, #45	; 0x2d
 800adce:	426d      	negs	r5, r5
 800add0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800add4:	485e      	ldr	r0, [pc, #376]	; (800af50 <_printf_i+0x244>)
 800add6:	230a      	movs	r3, #10
 800add8:	e019      	b.n	800ae0e <_printf_i+0x102>
 800adda:	f015 0f40 	tst.w	r5, #64	; 0x40
 800adde:	6805      	ldr	r5, [r0, #0]
 800ade0:	600b      	str	r3, [r1, #0]
 800ade2:	bf18      	it	ne
 800ade4:	b22d      	sxthne	r5, r5
 800ade6:	e7ef      	b.n	800adc8 <_printf_i+0xbc>
 800ade8:	680b      	ldr	r3, [r1, #0]
 800adea:	6825      	ldr	r5, [r4, #0]
 800adec:	1d18      	adds	r0, r3, #4
 800adee:	6008      	str	r0, [r1, #0]
 800adf0:	0628      	lsls	r0, r5, #24
 800adf2:	d501      	bpl.n	800adf8 <_printf_i+0xec>
 800adf4:	681d      	ldr	r5, [r3, #0]
 800adf6:	e002      	b.n	800adfe <_printf_i+0xf2>
 800adf8:	0669      	lsls	r1, r5, #25
 800adfa:	d5fb      	bpl.n	800adf4 <_printf_i+0xe8>
 800adfc:	881d      	ldrh	r5, [r3, #0]
 800adfe:	4854      	ldr	r0, [pc, #336]	; (800af50 <_printf_i+0x244>)
 800ae00:	2f6f      	cmp	r7, #111	; 0x6f
 800ae02:	bf0c      	ite	eq
 800ae04:	2308      	moveq	r3, #8
 800ae06:	230a      	movne	r3, #10
 800ae08:	2100      	movs	r1, #0
 800ae0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae0e:	6866      	ldr	r6, [r4, #4]
 800ae10:	60a6      	str	r6, [r4, #8]
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	bfa2      	ittt	ge
 800ae16:	6821      	ldrge	r1, [r4, #0]
 800ae18:	f021 0104 	bicge.w	r1, r1, #4
 800ae1c:	6021      	strge	r1, [r4, #0]
 800ae1e:	b90d      	cbnz	r5, 800ae24 <_printf_i+0x118>
 800ae20:	2e00      	cmp	r6, #0
 800ae22:	d04d      	beq.n	800aec0 <_printf_i+0x1b4>
 800ae24:	4616      	mov	r6, r2
 800ae26:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae2a:	fb03 5711 	mls	r7, r3, r1, r5
 800ae2e:	5dc7      	ldrb	r7, [r0, r7]
 800ae30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae34:	462f      	mov	r7, r5
 800ae36:	42bb      	cmp	r3, r7
 800ae38:	460d      	mov	r5, r1
 800ae3a:	d9f4      	bls.n	800ae26 <_printf_i+0x11a>
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	d10b      	bne.n	800ae58 <_printf_i+0x14c>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	07df      	lsls	r7, r3, #31
 800ae44:	d508      	bpl.n	800ae58 <_printf_i+0x14c>
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	6861      	ldr	r1, [r4, #4]
 800ae4a:	4299      	cmp	r1, r3
 800ae4c:	bfde      	ittt	le
 800ae4e:	2330      	movle	r3, #48	; 0x30
 800ae50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae58:	1b92      	subs	r2, r2, r6
 800ae5a:	6122      	str	r2, [r4, #16]
 800ae5c:	f8cd a000 	str.w	sl, [sp]
 800ae60:	464b      	mov	r3, r9
 800ae62:	aa03      	add	r2, sp, #12
 800ae64:	4621      	mov	r1, r4
 800ae66:	4640      	mov	r0, r8
 800ae68:	f7ff fee2 	bl	800ac30 <_printf_common>
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d14c      	bne.n	800af0a <_printf_i+0x1fe>
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	b004      	add	sp, #16
 800ae76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7a:	4835      	ldr	r0, [pc, #212]	; (800af50 <_printf_i+0x244>)
 800ae7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	680e      	ldr	r6, [r1, #0]
 800ae84:	061f      	lsls	r7, r3, #24
 800ae86:	f856 5b04 	ldr.w	r5, [r6], #4
 800ae8a:	600e      	str	r6, [r1, #0]
 800ae8c:	d514      	bpl.n	800aeb8 <_printf_i+0x1ac>
 800ae8e:	07d9      	lsls	r1, r3, #31
 800ae90:	bf44      	itt	mi
 800ae92:	f043 0320 	orrmi.w	r3, r3, #32
 800ae96:	6023      	strmi	r3, [r4, #0]
 800ae98:	b91d      	cbnz	r5, 800aea2 <_printf_i+0x196>
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	f023 0320 	bic.w	r3, r3, #32
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	2310      	movs	r3, #16
 800aea4:	e7b0      	b.n	800ae08 <_printf_i+0xfc>
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	f043 0320 	orr.w	r3, r3, #32
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	2378      	movs	r3, #120	; 0x78
 800aeb0:	4828      	ldr	r0, [pc, #160]	; (800af54 <_printf_i+0x248>)
 800aeb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aeb6:	e7e3      	b.n	800ae80 <_printf_i+0x174>
 800aeb8:	065e      	lsls	r6, r3, #25
 800aeba:	bf48      	it	mi
 800aebc:	b2ad      	uxthmi	r5, r5
 800aebe:	e7e6      	b.n	800ae8e <_printf_i+0x182>
 800aec0:	4616      	mov	r6, r2
 800aec2:	e7bb      	b.n	800ae3c <_printf_i+0x130>
 800aec4:	680b      	ldr	r3, [r1, #0]
 800aec6:	6826      	ldr	r6, [r4, #0]
 800aec8:	6960      	ldr	r0, [r4, #20]
 800aeca:	1d1d      	adds	r5, r3, #4
 800aecc:	600d      	str	r5, [r1, #0]
 800aece:	0635      	lsls	r5, r6, #24
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	d501      	bpl.n	800aed8 <_printf_i+0x1cc>
 800aed4:	6018      	str	r0, [r3, #0]
 800aed6:	e002      	b.n	800aede <_printf_i+0x1d2>
 800aed8:	0671      	lsls	r1, r6, #25
 800aeda:	d5fb      	bpl.n	800aed4 <_printf_i+0x1c8>
 800aedc:	8018      	strh	r0, [r3, #0]
 800aede:	2300      	movs	r3, #0
 800aee0:	6123      	str	r3, [r4, #16]
 800aee2:	4616      	mov	r6, r2
 800aee4:	e7ba      	b.n	800ae5c <_printf_i+0x150>
 800aee6:	680b      	ldr	r3, [r1, #0]
 800aee8:	1d1a      	adds	r2, r3, #4
 800aeea:	600a      	str	r2, [r1, #0]
 800aeec:	681e      	ldr	r6, [r3, #0]
 800aeee:	6862      	ldr	r2, [r4, #4]
 800aef0:	2100      	movs	r1, #0
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7f5 f96c 	bl	80001d0 <memchr>
 800aef8:	b108      	cbz	r0, 800aefe <_printf_i+0x1f2>
 800aefa:	1b80      	subs	r0, r0, r6
 800aefc:	6060      	str	r0, [r4, #4]
 800aefe:	6863      	ldr	r3, [r4, #4]
 800af00:	6123      	str	r3, [r4, #16]
 800af02:	2300      	movs	r3, #0
 800af04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af08:	e7a8      	b.n	800ae5c <_printf_i+0x150>
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	4632      	mov	r2, r6
 800af0e:	4649      	mov	r1, r9
 800af10:	4640      	mov	r0, r8
 800af12:	47d0      	blx	sl
 800af14:	3001      	adds	r0, #1
 800af16:	d0ab      	beq.n	800ae70 <_printf_i+0x164>
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	079b      	lsls	r3, r3, #30
 800af1c:	d413      	bmi.n	800af46 <_printf_i+0x23a>
 800af1e:	68e0      	ldr	r0, [r4, #12]
 800af20:	9b03      	ldr	r3, [sp, #12]
 800af22:	4298      	cmp	r0, r3
 800af24:	bfb8      	it	lt
 800af26:	4618      	movlt	r0, r3
 800af28:	e7a4      	b.n	800ae74 <_printf_i+0x168>
 800af2a:	2301      	movs	r3, #1
 800af2c:	4632      	mov	r2, r6
 800af2e:	4649      	mov	r1, r9
 800af30:	4640      	mov	r0, r8
 800af32:	47d0      	blx	sl
 800af34:	3001      	adds	r0, #1
 800af36:	d09b      	beq.n	800ae70 <_printf_i+0x164>
 800af38:	3501      	adds	r5, #1
 800af3a:	68e3      	ldr	r3, [r4, #12]
 800af3c:	9903      	ldr	r1, [sp, #12]
 800af3e:	1a5b      	subs	r3, r3, r1
 800af40:	42ab      	cmp	r3, r5
 800af42:	dcf2      	bgt.n	800af2a <_printf_i+0x21e>
 800af44:	e7eb      	b.n	800af1e <_printf_i+0x212>
 800af46:	2500      	movs	r5, #0
 800af48:	f104 0619 	add.w	r6, r4, #25
 800af4c:	e7f5      	b.n	800af3a <_printf_i+0x22e>
 800af4e:	bf00      	nop
 800af50:	080f0914 	.word	0x080f0914
 800af54:	080f0925 	.word	0x080f0925

0800af58 <_sbrk_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d06      	ldr	r5, [pc, #24]	; (800af74 <_sbrk_r+0x1c>)
 800af5c:	2300      	movs	r3, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f9 f9e2 	bl	800432c <_sbrk>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_sbrk_r+0x1a>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_sbrk_r+0x1a>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	2000082c 	.word	0x2000082c

0800af78 <__swbuf_r>:
 800af78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7a:	460e      	mov	r6, r1
 800af7c:	4614      	mov	r4, r2
 800af7e:	4605      	mov	r5, r0
 800af80:	b118      	cbz	r0, 800af8a <__swbuf_r+0x12>
 800af82:	6983      	ldr	r3, [r0, #24]
 800af84:	b90b      	cbnz	r3, 800af8a <__swbuf_r+0x12>
 800af86:	f000 f9d9 	bl	800b33c <__sinit>
 800af8a:	4b21      	ldr	r3, [pc, #132]	; (800b010 <__swbuf_r+0x98>)
 800af8c:	429c      	cmp	r4, r3
 800af8e:	d12b      	bne.n	800afe8 <__swbuf_r+0x70>
 800af90:	686c      	ldr	r4, [r5, #4]
 800af92:	69a3      	ldr	r3, [r4, #24]
 800af94:	60a3      	str	r3, [r4, #8]
 800af96:	89a3      	ldrh	r3, [r4, #12]
 800af98:	071a      	lsls	r2, r3, #28
 800af9a:	d52f      	bpl.n	800affc <__swbuf_r+0x84>
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	b36b      	cbz	r3, 800affc <__swbuf_r+0x84>
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	6820      	ldr	r0, [r4, #0]
 800afa4:	1ac0      	subs	r0, r0, r3
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	b2f6      	uxtb	r6, r6
 800afaa:	4283      	cmp	r3, r0
 800afac:	4637      	mov	r7, r6
 800afae:	dc04      	bgt.n	800afba <__swbuf_r+0x42>
 800afb0:	4621      	mov	r1, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 f92e 	bl	800b214 <_fflush_r>
 800afb8:	bb30      	cbnz	r0, 800b008 <__swbuf_r+0x90>
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	6022      	str	r2, [r4, #0]
 800afc6:	701e      	strb	r6, [r3, #0]
 800afc8:	6963      	ldr	r3, [r4, #20]
 800afca:	3001      	adds	r0, #1
 800afcc:	4283      	cmp	r3, r0
 800afce:	d004      	beq.n	800afda <__swbuf_r+0x62>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	07db      	lsls	r3, r3, #31
 800afd4:	d506      	bpl.n	800afe4 <__swbuf_r+0x6c>
 800afd6:	2e0a      	cmp	r6, #10
 800afd8:	d104      	bne.n	800afe4 <__swbuf_r+0x6c>
 800afda:	4621      	mov	r1, r4
 800afdc:	4628      	mov	r0, r5
 800afde:	f000 f919 	bl	800b214 <_fflush_r>
 800afe2:	b988      	cbnz	r0, 800b008 <__swbuf_r+0x90>
 800afe4:	4638      	mov	r0, r7
 800afe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <__swbuf_r+0x9c>)
 800afea:	429c      	cmp	r4, r3
 800afec:	d101      	bne.n	800aff2 <__swbuf_r+0x7a>
 800afee:	68ac      	ldr	r4, [r5, #8]
 800aff0:	e7cf      	b.n	800af92 <__swbuf_r+0x1a>
 800aff2:	4b09      	ldr	r3, [pc, #36]	; (800b018 <__swbuf_r+0xa0>)
 800aff4:	429c      	cmp	r4, r3
 800aff6:	bf08      	it	eq
 800aff8:	68ec      	ldreq	r4, [r5, #12]
 800affa:	e7ca      	b.n	800af92 <__swbuf_r+0x1a>
 800affc:	4621      	mov	r1, r4
 800affe:	4628      	mov	r0, r5
 800b000:	f000 f80c 	bl	800b01c <__swsetup_r>
 800b004:	2800      	cmp	r0, #0
 800b006:	d0cb      	beq.n	800afa0 <__swbuf_r+0x28>
 800b008:	f04f 37ff 	mov.w	r7, #4294967295
 800b00c:	e7ea      	b.n	800afe4 <__swbuf_r+0x6c>
 800b00e:	bf00      	nop
 800b010:	080f0958 	.word	0x080f0958
 800b014:	080f0978 	.word	0x080f0978
 800b018:	080f0938 	.word	0x080f0938

0800b01c <__swsetup_r>:
 800b01c:	4b32      	ldr	r3, [pc, #200]	; (800b0e8 <__swsetup_r+0xcc>)
 800b01e:	b570      	push	{r4, r5, r6, lr}
 800b020:	681d      	ldr	r5, [r3, #0]
 800b022:	4606      	mov	r6, r0
 800b024:	460c      	mov	r4, r1
 800b026:	b125      	cbz	r5, 800b032 <__swsetup_r+0x16>
 800b028:	69ab      	ldr	r3, [r5, #24]
 800b02a:	b913      	cbnz	r3, 800b032 <__swsetup_r+0x16>
 800b02c:	4628      	mov	r0, r5
 800b02e:	f000 f985 	bl	800b33c <__sinit>
 800b032:	4b2e      	ldr	r3, [pc, #184]	; (800b0ec <__swsetup_r+0xd0>)
 800b034:	429c      	cmp	r4, r3
 800b036:	d10f      	bne.n	800b058 <__swsetup_r+0x3c>
 800b038:	686c      	ldr	r4, [r5, #4]
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b040:	0719      	lsls	r1, r3, #28
 800b042:	d42c      	bmi.n	800b09e <__swsetup_r+0x82>
 800b044:	06dd      	lsls	r5, r3, #27
 800b046:	d411      	bmi.n	800b06c <__swsetup_r+0x50>
 800b048:	2309      	movs	r3, #9
 800b04a:	6033      	str	r3, [r6, #0]
 800b04c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b050:	81a3      	strh	r3, [r4, #12]
 800b052:	f04f 30ff 	mov.w	r0, #4294967295
 800b056:	e03e      	b.n	800b0d6 <__swsetup_r+0xba>
 800b058:	4b25      	ldr	r3, [pc, #148]	; (800b0f0 <__swsetup_r+0xd4>)
 800b05a:	429c      	cmp	r4, r3
 800b05c:	d101      	bne.n	800b062 <__swsetup_r+0x46>
 800b05e:	68ac      	ldr	r4, [r5, #8]
 800b060:	e7eb      	b.n	800b03a <__swsetup_r+0x1e>
 800b062:	4b24      	ldr	r3, [pc, #144]	; (800b0f4 <__swsetup_r+0xd8>)
 800b064:	429c      	cmp	r4, r3
 800b066:	bf08      	it	eq
 800b068:	68ec      	ldreq	r4, [r5, #12]
 800b06a:	e7e6      	b.n	800b03a <__swsetup_r+0x1e>
 800b06c:	0758      	lsls	r0, r3, #29
 800b06e:	d512      	bpl.n	800b096 <__swsetup_r+0x7a>
 800b070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b072:	b141      	cbz	r1, 800b086 <__swsetup_r+0x6a>
 800b074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b078:	4299      	cmp	r1, r3
 800b07a:	d002      	beq.n	800b082 <__swsetup_r+0x66>
 800b07c:	4630      	mov	r0, r6
 800b07e:	f7ff fbd3 	bl	800a828 <_free_r>
 800b082:	2300      	movs	r3, #0
 800b084:	6363      	str	r3, [r4, #52]	; 0x34
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b08c:	81a3      	strh	r3, [r4, #12]
 800b08e:	2300      	movs	r3, #0
 800b090:	6063      	str	r3, [r4, #4]
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f043 0308 	orr.w	r3, r3, #8
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	6923      	ldr	r3, [r4, #16]
 800b0a0:	b94b      	cbnz	r3, 800b0b6 <__swsetup_r+0x9a>
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0ac:	d003      	beq.n	800b0b6 <__swsetup_r+0x9a>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	f000 fa07 	bl	800b4c4 <__smakebuf_r>
 800b0b6:	89a0      	ldrh	r0, [r4, #12]
 800b0b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0bc:	f010 0301 	ands.w	r3, r0, #1
 800b0c0:	d00a      	beq.n	800b0d8 <__swsetup_r+0xbc>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60a3      	str	r3, [r4, #8]
 800b0c6:	6963      	ldr	r3, [r4, #20]
 800b0c8:	425b      	negs	r3, r3
 800b0ca:	61a3      	str	r3, [r4, #24]
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	b943      	cbnz	r3, 800b0e2 <__swsetup_r+0xc6>
 800b0d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0d4:	d1ba      	bne.n	800b04c <__swsetup_r+0x30>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	0781      	lsls	r1, r0, #30
 800b0da:	bf58      	it	pl
 800b0dc:	6963      	ldrpl	r3, [r4, #20]
 800b0de:	60a3      	str	r3, [r4, #8]
 800b0e0:	e7f4      	b.n	800b0cc <__swsetup_r+0xb0>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e7f7      	b.n	800b0d6 <__swsetup_r+0xba>
 800b0e6:	bf00      	nop
 800b0e8:	20000068 	.word	0x20000068
 800b0ec:	080f0958 	.word	0x080f0958
 800b0f0:	080f0978 	.word	0x080f0978
 800b0f4:	080f0938 	.word	0x080f0938

0800b0f8 <abort>:
 800b0f8:	b508      	push	{r3, lr}
 800b0fa:	2006      	movs	r0, #6
 800b0fc:	f000 fa56 	bl	800b5ac <raise>
 800b100:	2001      	movs	r0, #1
 800b102:	f7f9 f89b 	bl	800423c <_exit>
	...

0800b108 <__sflush_r>:
 800b108:	898a      	ldrh	r2, [r1, #12]
 800b10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b10e:	4605      	mov	r5, r0
 800b110:	0710      	lsls	r0, r2, #28
 800b112:	460c      	mov	r4, r1
 800b114:	d458      	bmi.n	800b1c8 <__sflush_r+0xc0>
 800b116:	684b      	ldr	r3, [r1, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	dc05      	bgt.n	800b128 <__sflush_r+0x20>
 800b11c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dc02      	bgt.n	800b128 <__sflush_r+0x20>
 800b122:	2000      	movs	r0, #0
 800b124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b12a:	2e00      	cmp	r6, #0
 800b12c:	d0f9      	beq.n	800b122 <__sflush_r+0x1a>
 800b12e:	2300      	movs	r3, #0
 800b130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b134:	682f      	ldr	r7, [r5, #0]
 800b136:	602b      	str	r3, [r5, #0]
 800b138:	d032      	beq.n	800b1a0 <__sflush_r+0x98>
 800b13a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	075a      	lsls	r2, r3, #29
 800b140:	d505      	bpl.n	800b14e <__sflush_r+0x46>
 800b142:	6863      	ldr	r3, [r4, #4]
 800b144:	1ac0      	subs	r0, r0, r3
 800b146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b148:	b10b      	cbz	r3, 800b14e <__sflush_r+0x46>
 800b14a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b14c:	1ac0      	subs	r0, r0, r3
 800b14e:	2300      	movs	r3, #0
 800b150:	4602      	mov	r2, r0
 800b152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b154:	6a21      	ldr	r1, [r4, #32]
 800b156:	4628      	mov	r0, r5
 800b158:	47b0      	blx	r6
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	d106      	bne.n	800b16e <__sflush_r+0x66>
 800b160:	6829      	ldr	r1, [r5, #0]
 800b162:	291d      	cmp	r1, #29
 800b164:	d82c      	bhi.n	800b1c0 <__sflush_r+0xb8>
 800b166:	4a2a      	ldr	r2, [pc, #168]	; (800b210 <__sflush_r+0x108>)
 800b168:	40ca      	lsrs	r2, r1
 800b16a:	07d6      	lsls	r6, r2, #31
 800b16c:	d528      	bpl.n	800b1c0 <__sflush_r+0xb8>
 800b16e:	2200      	movs	r2, #0
 800b170:	6062      	str	r2, [r4, #4]
 800b172:	04d9      	lsls	r1, r3, #19
 800b174:	6922      	ldr	r2, [r4, #16]
 800b176:	6022      	str	r2, [r4, #0]
 800b178:	d504      	bpl.n	800b184 <__sflush_r+0x7c>
 800b17a:	1c42      	adds	r2, r0, #1
 800b17c:	d101      	bne.n	800b182 <__sflush_r+0x7a>
 800b17e:	682b      	ldr	r3, [r5, #0]
 800b180:	b903      	cbnz	r3, 800b184 <__sflush_r+0x7c>
 800b182:	6560      	str	r0, [r4, #84]	; 0x54
 800b184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b186:	602f      	str	r7, [r5, #0]
 800b188:	2900      	cmp	r1, #0
 800b18a:	d0ca      	beq.n	800b122 <__sflush_r+0x1a>
 800b18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b190:	4299      	cmp	r1, r3
 800b192:	d002      	beq.n	800b19a <__sflush_r+0x92>
 800b194:	4628      	mov	r0, r5
 800b196:	f7ff fb47 	bl	800a828 <_free_r>
 800b19a:	2000      	movs	r0, #0
 800b19c:	6360      	str	r0, [r4, #52]	; 0x34
 800b19e:	e7c1      	b.n	800b124 <__sflush_r+0x1c>
 800b1a0:	6a21      	ldr	r1, [r4, #32]
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	47b0      	blx	r6
 800b1a8:	1c41      	adds	r1, r0, #1
 800b1aa:	d1c7      	bne.n	800b13c <__sflush_r+0x34>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0c4      	beq.n	800b13c <__sflush_r+0x34>
 800b1b2:	2b1d      	cmp	r3, #29
 800b1b4:	d001      	beq.n	800b1ba <__sflush_r+0xb2>
 800b1b6:	2b16      	cmp	r3, #22
 800b1b8:	d101      	bne.n	800b1be <__sflush_r+0xb6>
 800b1ba:	602f      	str	r7, [r5, #0]
 800b1bc:	e7b1      	b.n	800b122 <__sflush_r+0x1a>
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	e7ad      	b.n	800b124 <__sflush_r+0x1c>
 800b1c8:	690f      	ldr	r7, [r1, #16]
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	d0a9      	beq.n	800b122 <__sflush_r+0x1a>
 800b1ce:	0793      	lsls	r3, r2, #30
 800b1d0:	680e      	ldr	r6, [r1, #0]
 800b1d2:	bf08      	it	eq
 800b1d4:	694b      	ldreq	r3, [r1, #20]
 800b1d6:	600f      	str	r7, [r1, #0]
 800b1d8:	bf18      	it	ne
 800b1da:	2300      	movne	r3, #0
 800b1dc:	eba6 0807 	sub.w	r8, r6, r7
 800b1e0:	608b      	str	r3, [r1, #8]
 800b1e2:	f1b8 0f00 	cmp.w	r8, #0
 800b1e6:	dd9c      	ble.n	800b122 <__sflush_r+0x1a>
 800b1e8:	6a21      	ldr	r1, [r4, #32]
 800b1ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1ec:	4643      	mov	r3, r8
 800b1ee:	463a      	mov	r2, r7
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	47b0      	blx	r6
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	dc06      	bgt.n	800b206 <__sflush_r+0xfe>
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1fe:	81a3      	strh	r3, [r4, #12]
 800b200:	f04f 30ff 	mov.w	r0, #4294967295
 800b204:	e78e      	b.n	800b124 <__sflush_r+0x1c>
 800b206:	4407      	add	r7, r0
 800b208:	eba8 0800 	sub.w	r8, r8, r0
 800b20c:	e7e9      	b.n	800b1e2 <__sflush_r+0xda>
 800b20e:	bf00      	nop
 800b210:	20400001 	.word	0x20400001

0800b214 <_fflush_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	690b      	ldr	r3, [r1, #16]
 800b218:	4605      	mov	r5, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	b913      	cbnz	r3, 800b224 <_fflush_r+0x10>
 800b21e:	2500      	movs	r5, #0
 800b220:	4628      	mov	r0, r5
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	b118      	cbz	r0, 800b22e <_fflush_r+0x1a>
 800b226:	6983      	ldr	r3, [r0, #24]
 800b228:	b90b      	cbnz	r3, 800b22e <_fflush_r+0x1a>
 800b22a:	f000 f887 	bl	800b33c <__sinit>
 800b22e:	4b14      	ldr	r3, [pc, #80]	; (800b280 <_fflush_r+0x6c>)
 800b230:	429c      	cmp	r4, r3
 800b232:	d11b      	bne.n	800b26c <_fflush_r+0x58>
 800b234:	686c      	ldr	r4, [r5, #4]
 800b236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0ef      	beq.n	800b21e <_fflush_r+0xa>
 800b23e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b240:	07d0      	lsls	r0, r2, #31
 800b242:	d404      	bmi.n	800b24e <_fflush_r+0x3a>
 800b244:	0599      	lsls	r1, r3, #22
 800b246:	d402      	bmi.n	800b24e <_fflush_r+0x3a>
 800b248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b24a:	f000 f915 	bl	800b478 <__retarget_lock_acquire_recursive>
 800b24e:	4628      	mov	r0, r5
 800b250:	4621      	mov	r1, r4
 800b252:	f7ff ff59 	bl	800b108 <__sflush_r>
 800b256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b258:	07da      	lsls	r2, r3, #31
 800b25a:	4605      	mov	r5, r0
 800b25c:	d4e0      	bmi.n	800b220 <_fflush_r+0xc>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	059b      	lsls	r3, r3, #22
 800b262:	d4dd      	bmi.n	800b220 <_fflush_r+0xc>
 800b264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b266:	f000 f908 	bl	800b47a <__retarget_lock_release_recursive>
 800b26a:	e7d9      	b.n	800b220 <_fflush_r+0xc>
 800b26c:	4b05      	ldr	r3, [pc, #20]	; (800b284 <_fflush_r+0x70>)
 800b26e:	429c      	cmp	r4, r3
 800b270:	d101      	bne.n	800b276 <_fflush_r+0x62>
 800b272:	68ac      	ldr	r4, [r5, #8]
 800b274:	e7df      	b.n	800b236 <_fflush_r+0x22>
 800b276:	4b04      	ldr	r3, [pc, #16]	; (800b288 <_fflush_r+0x74>)
 800b278:	429c      	cmp	r4, r3
 800b27a:	bf08      	it	eq
 800b27c:	68ec      	ldreq	r4, [r5, #12]
 800b27e:	e7da      	b.n	800b236 <_fflush_r+0x22>
 800b280:	080f0958 	.word	0x080f0958
 800b284:	080f0978 	.word	0x080f0978
 800b288:	080f0938 	.word	0x080f0938

0800b28c <std>:
 800b28c:	2300      	movs	r3, #0
 800b28e:	b510      	push	{r4, lr}
 800b290:	4604      	mov	r4, r0
 800b292:	e9c0 3300 	strd	r3, r3, [r0]
 800b296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b29a:	6083      	str	r3, [r0, #8]
 800b29c:	8181      	strh	r1, [r0, #12]
 800b29e:	6643      	str	r3, [r0, #100]	; 0x64
 800b2a0:	81c2      	strh	r2, [r0, #14]
 800b2a2:	6183      	str	r3, [r0, #24]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	2208      	movs	r2, #8
 800b2a8:	305c      	adds	r0, #92	; 0x5c
 800b2aa:	f7ff f9fb 	bl	800a6a4 <memset>
 800b2ae:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <std+0x38>)
 800b2b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <std+0x3c>)
 800b2b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2b6:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <std+0x40>)
 800b2b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2ba:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <std+0x44>)
 800b2bc:	6224      	str	r4, [r4, #32]
 800b2be:	6323      	str	r3, [r4, #48]	; 0x30
 800b2c0:	bd10      	pop	{r4, pc}
 800b2c2:	bf00      	nop
 800b2c4:	0800b5e5 	.word	0x0800b5e5
 800b2c8:	0800b607 	.word	0x0800b607
 800b2cc:	0800b63f 	.word	0x0800b63f
 800b2d0:	0800b663 	.word	0x0800b663

0800b2d4 <_cleanup_r>:
 800b2d4:	4901      	ldr	r1, [pc, #4]	; (800b2dc <_cleanup_r+0x8>)
 800b2d6:	f000 b8af 	b.w	800b438 <_fwalk_reent>
 800b2da:	bf00      	nop
 800b2dc:	0800b215 	.word	0x0800b215

0800b2e0 <__sfmoreglue>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	1e4a      	subs	r2, r1, #1
 800b2e4:	2568      	movs	r5, #104	; 0x68
 800b2e6:	4355      	muls	r5, r2
 800b2e8:	460e      	mov	r6, r1
 800b2ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2ee:	f7ff faeb 	bl	800a8c8 <_malloc_r>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	b140      	cbz	r0, 800b308 <__sfmoreglue+0x28>
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	e9c0 1600 	strd	r1, r6, [r0]
 800b2fc:	300c      	adds	r0, #12
 800b2fe:	60a0      	str	r0, [r4, #8]
 800b300:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b304:	f7ff f9ce 	bl	800a6a4 <memset>
 800b308:	4620      	mov	r0, r4
 800b30a:	bd70      	pop	{r4, r5, r6, pc}

0800b30c <__sfp_lock_acquire>:
 800b30c:	4801      	ldr	r0, [pc, #4]	; (800b314 <__sfp_lock_acquire+0x8>)
 800b30e:	f000 b8b3 	b.w	800b478 <__retarget_lock_acquire_recursive>
 800b312:	bf00      	nop
 800b314:	20000828 	.word	0x20000828

0800b318 <__sfp_lock_release>:
 800b318:	4801      	ldr	r0, [pc, #4]	; (800b320 <__sfp_lock_release+0x8>)
 800b31a:	f000 b8ae 	b.w	800b47a <__retarget_lock_release_recursive>
 800b31e:	bf00      	nop
 800b320:	20000828 	.word	0x20000828

0800b324 <__sinit_lock_acquire>:
 800b324:	4801      	ldr	r0, [pc, #4]	; (800b32c <__sinit_lock_acquire+0x8>)
 800b326:	f000 b8a7 	b.w	800b478 <__retarget_lock_acquire_recursive>
 800b32a:	bf00      	nop
 800b32c:	20000823 	.word	0x20000823

0800b330 <__sinit_lock_release>:
 800b330:	4801      	ldr	r0, [pc, #4]	; (800b338 <__sinit_lock_release+0x8>)
 800b332:	f000 b8a2 	b.w	800b47a <__retarget_lock_release_recursive>
 800b336:	bf00      	nop
 800b338:	20000823 	.word	0x20000823

0800b33c <__sinit>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	4604      	mov	r4, r0
 800b340:	f7ff fff0 	bl	800b324 <__sinit_lock_acquire>
 800b344:	69a3      	ldr	r3, [r4, #24]
 800b346:	b11b      	cbz	r3, 800b350 <__sinit+0x14>
 800b348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b34c:	f7ff bff0 	b.w	800b330 <__sinit_lock_release>
 800b350:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b354:	6523      	str	r3, [r4, #80]	; 0x50
 800b356:	4b13      	ldr	r3, [pc, #76]	; (800b3a4 <__sinit+0x68>)
 800b358:	4a13      	ldr	r2, [pc, #76]	; (800b3a8 <__sinit+0x6c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b35e:	42a3      	cmp	r3, r4
 800b360:	bf04      	itt	eq
 800b362:	2301      	moveq	r3, #1
 800b364:	61a3      	streq	r3, [r4, #24]
 800b366:	4620      	mov	r0, r4
 800b368:	f000 f820 	bl	800b3ac <__sfp>
 800b36c:	6060      	str	r0, [r4, #4]
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 f81c 	bl	800b3ac <__sfp>
 800b374:	60a0      	str	r0, [r4, #8]
 800b376:	4620      	mov	r0, r4
 800b378:	f000 f818 	bl	800b3ac <__sfp>
 800b37c:	2200      	movs	r2, #0
 800b37e:	60e0      	str	r0, [r4, #12]
 800b380:	2104      	movs	r1, #4
 800b382:	6860      	ldr	r0, [r4, #4]
 800b384:	f7ff ff82 	bl	800b28c <std>
 800b388:	68a0      	ldr	r0, [r4, #8]
 800b38a:	2201      	movs	r2, #1
 800b38c:	2109      	movs	r1, #9
 800b38e:	f7ff ff7d 	bl	800b28c <std>
 800b392:	68e0      	ldr	r0, [r4, #12]
 800b394:	2202      	movs	r2, #2
 800b396:	2112      	movs	r1, #18
 800b398:	f7ff ff78 	bl	800b28c <std>
 800b39c:	2301      	movs	r3, #1
 800b39e:	61a3      	str	r3, [r4, #24]
 800b3a0:	e7d2      	b.n	800b348 <__sinit+0xc>
 800b3a2:	bf00      	nop
 800b3a4:	080f0828 	.word	0x080f0828
 800b3a8:	0800b2d5 	.word	0x0800b2d5

0800b3ac <__sfp>:
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	f7ff ffac 	bl	800b30c <__sfp_lock_acquire>
 800b3b4:	4b1e      	ldr	r3, [pc, #120]	; (800b430 <__sfp+0x84>)
 800b3b6:	681e      	ldr	r6, [r3, #0]
 800b3b8:	69b3      	ldr	r3, [r6, #24]
 800b3ba:	b913      	cbnz	r3, 800b3c2 <__sfp+0x16>
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f7ff ffbd 	bl	800b33c <__sinit>
 800b3c2:	3648      	adds	r6, #72	; 0x48
 800b3c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	d503      	bpl.n	800b3d4 <__sfp+0x28>
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	b30b      	cbz	r3, 800b414 <__sfp+0x68>
 800b3d0:	6836      	ldr	r6, [r6, #0]
 800b3d2:	e7f7      	b.n	800b3c4 <__sfp+0x18>
 800b3d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3d8:	b9d5      	cbnz	r5, 800b410 <__sfp+0x64>
 800b3da:	4b16      	ldr	r3, [pc, #88]	; (800b434 <__sfp+0x88>)
 800b3dc:	60e3      	str	r3, [r4, #12]
 800b3de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b3e4:	f000 f847 	bl	800b476 <__retarget_lock_init_recursive>
 800b3e8:	f7ff ff96 	bl	800b318 <__sfp_lock_release>
 800b3ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3f4:	6025      	str	r5, [r4, #0]
 800b3f6:	61a5      	str	r5, [r4, #24]
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b400:	f7ff f950 	bl	800a6a4 <memset>
 800b404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b40c:	4620      	mov	r0, r4
 800b40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b410:	3468      	adds	r4, #104	; 0x68
 800b412:	e7d9      	b.n	800b3c8 <__sfp+0x1c>
 800b414:	2104      	movs	r1, #4
 800b416:	4638      	mov	r0, r7
 800b418:	f7ff ff62 	bl	800b2e0 <__sfmoreglue>
 800b41c:	4604      	mov	r4, r0
 800b41e:	6030      	str	r0, [r6, #0]
 800b420:	2800      	cmp	r0, #0
 800b422:	d1d5      	bne.n	800b3d0 <__sfp+0x24>
 800b424:	f7ff ff78 	bl	800b318 <__sfp_lock_release>
 800b428:	230c      	movs	r3, #12
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	e7ee      	b.n	800b40c <__sfp+0x60>
 800b42e:	bf00      	nop
 800b430:	080f0828 	.word	0x080f0828
 800b434:	ffff0001 	.word	0xffff0001

0800b438 <_fwalk_reent>:
 800b438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b43c:	4606      	mov	r6, r0
 800b43e:	4688      	mov	r8, r1
 800b440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b444:	2700      	movs	r7, #0
 800b446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b44a:	f1b9 0901 	subs.w	r9, r9, #1
 800b44e:	d505      	bpl.n	800b45c <_fwalk_reent+0x24>
 800b450:	6824      	ldr	r4, [r4, #0]
 800b452:	2c00      	cmp	r4, #0
 800b454:	d1f7      	bne.n	800b446 <_fwalk_reent+0xe>
 800b456:	4638      	mov	r0, r7
 800b458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45c:	89ab      	ldrh	r3, [r5, #12]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d907      	bls.n	800b472 <_fwalk_reent+0x3a>
 800b462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b466:	3301      	adds	r3, #1
 800b468:	d003      	beq.n	800b472 <_fwalk_reent+0x3a>
 800b46a:	4629      	mov	r1, r5
 800b46c:	4630      	mov	r0, r6
 800b46e:	47c0      	blx	r8
 800b470:	4307      	orrs	r7, r0
 800b472:	3568      	adds	r5, #104	; 0x68
 800b474:	e7e9      	b.n	800b44a <_fwalk_reent+0x12>

0800b476 <__retarget_lock_init_recursive>:
 800b476:	4770      	bx	lr

0800b478 <__retarget_lock_acquire_recursive>:
 800b478:	4770      	bx	lr

0800b47a <__retarget_lock_release_recursive>:
 800b47a:	4770      	bx	lr

0800b47c <__swhatbuf_r>:
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	460e      	mov	r6, r1
 800b480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b484:	2900      	cmp	r1, #0
 800b486:	b096      	sub	sp, #88	; 0x58
 800b488:	4614      	mov	r4, r2
 800b48a:	461d      	mov	r5, r3
 800b48c:	da07      	bge.n	800b49e <__swhatbuf_r+0x22>
 800b48e:	2300      	movs	r3, #0
 800b490:	602b      	str	r3, [r5, #0]
 800b492:	89b3      	ldrh	r3, [r6, #12]
 800b494:	061a      	lsls	r2, r3, #24
 800b496:	d410      	bmi.n	800b4ba <__swhatbuf_r+0x3e>
 800b498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b49c:	e00e      	b.n	800b4bc <__swhatbuf_r+0x40>
 800b49e:	466a      	mov	r2, sp
 800b4a0:	f000 f906 	bl	800b6b0 <_fstat_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	dbf2      	blt.n	800b48e <__swhatbuf_r+0x12>
 800b4a8:	9a01      	ldr	r2, [sp, #4]
 800b4aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4b2:	425a      	negs	r2, r3
 800b4b4:	415a      	adcs	r2, r3
 800b4b6:	602a      	str	r2, [r5, #0]
 800b4b8:	e7ee      	b.n	800b498 <__swhatbuf_r+0x1c>
 800b4ba:	2340      	movs	r3, #64	; 0x40
 800b4bc:	2000      	movs	r0, #0
 800b4be:	6023      	str	r3, [r4, #0]
 800b4c0:	b016      	add	sp, #88	; 0x58
 800b4c2:	bd70      	pop	{r4, r5, r6, pc}

0800b4c4 <__smakebuf_r>:
 800b4c4:	898b      	ldrh	r3, [r1, #12]
 800b4c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4c8:	079d      	lsls	r5, r3, #30
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	d507      	bpl.n	800b4e0 <__smakebuf_r+0x1c>
 800b4d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	6123      	str	r3, [r4, #16]
 800b4d8:	2301      	movs	r3, #1
 800b4da:	6163      	str	r3, [r4, #20]
 800b4dc:	b002      	add	sp, #8
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	ab01      	add	r3, sp, #4
 800b4e2:	466a      	mov	r2, sp
 800b4e4:	f7ff ffca 	bl	800b47c <__swhatbuf_r>
 800b4e8:	9900      	ldr	r1, [sp, #0]
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f7ff f9eb 	bl	800a8c8 <_malloc_r>
 800b4f2:	b948      	cbnz	r0, 800b508 <__smakebuf_r+0x44>
 800b4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f8:	059a      	lsls	r2, r3, #22
 800b4fa:	d4ef      	bmi.n	800b4dc <__smakebuf_r+0x18>
 800b4fc:	f023 0303 	bic.w	r3, r3, #3
 800b500:	f043 0302 	orr.w	r3, r3, #2
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	e7e3      	b.n	800b4d0 <__smakebuf_r+0xc>
 800b508:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <__smakebuf_r+0x7c>)
 800b50a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	6020      	str	r0, [r4, #0]
 800b510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b514:	81a3      	strh	r3, [r4, #12]
 800b516:	9b00      	ldr	r3, [sp, #0]
 800b518:	6163      	str	r3, [r4, #20]
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	6120      	str	r0, [r4, #16]
 800b51e:	b15b      	cbz	r3, 800b538 <__smakebuf_r+0x74>
 800b520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b524:	4630      	mov	r0, r6
 800b526:	f000 f8d5 	bl	800b6d4 <_isatty_r>
 800b52a:	b128      	cbz	r0, 800b538 <__smakebuf_r+0x74>
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	f023 0303 	bic.w	r3, r3, #3
 800b532:	f043 0301 	orr.w	r3, r3, #1
 800b536:	81a3      	strh	r3, [r4, #12]
 800b538:	89a0      	ldrh	r0, [r4, #12]
 800b53a:	4305      	orrs	r5, r0
 800b53c:	81a5      	strh	r5, [r4, #12]
 800b53e:	e7cd      	b.n	800b4dc <__smakebuf_r+0x18>
 800b540:	0800b2d5 	.word	0x0800b2d5

0800b544 <__malloc_lock>:
 800b544:	4801      	ldr	r0, [pc, #4]	; (800b54c <__malloc_lock+0x8>)
 800b546:	f7ff bf97 	b.w	800b478 <__retarget_lock_acquire_recursive>
 800b54a:	bf00      	nop
 800b54c:	20000824 	.word	0x20000824

0800b550 <__malloc_unlock>:
 800b550:	4801      	ldr	r0, [pc, #4]	; (800b558 <__malloc_unlock+0x8>)
 800b552:	f7ff bf92 	b.w	800b47a <__retarget_lock_release_recursive>
 800b556:	bf00      	nop
 800b558:	20000824 	.word	0x20000824

0800b55c <_raise_r>:
 800b55c:	291f      	cmp	r1, #31
 800b55e:	b538      	push	{r3, r4, r5, lr}
 800b560:	4604      	mov	r4, r0
 800b562:	460d      	mov	r5, r1
 800b564:	d904      	bls.n	800b570 <_raise_r+0x14>
 800b566:	2316      	movs	r3, #22
 800b568:	6003      	str	r3, [r0, #0]
 800b56a:	f04f 30ff 	mov.w	r0, #4294967295
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b572:	b112      	cbz	r2, 800b57a <_raise_r+0x1e>
 800b574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b578:	b94b      	cbnz	r3, 800b58e <_raise_r+0x32>
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 f830 	bl	800b5e0 <_getpid_r>
 800b580:	462a      	mov	r2, r5
 800b582:	4601      	mov	r1, r0
 800b584:	4620      	mov	r0, r4
 800b586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b58a:	f000 b817 	b.w	800b5bc <_kill_r>
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d00a      	beq.n	800b5a8 <_raise_r+0x4c>
 800b592:	1c59      	adds	r1, r3, #1
 800b594:	d103      	bne.n	800b59e <_raise_r+0x42>
 800b596:	2316      	movs	r3, #22
 800b598:	6003      	str	r3, [r0, #0]
 800b59a:	2001      	movs	r0, #1
 800b59c:	e7e7      	b.n	800b56e <_raise_r+0x12>
 800b59e:	2400      	movs	r4, #0
 800b5a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	4798      	blx	r3
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e7e0      	b.n	800b56e <_raise_r+0x12>

0800b5ac <raise>:
 800b5ac:	4b02      	ldr	r3, [pc, #8]	; (800b5b8 <raise+0xc>)
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	f7ff bfd3 	b.w	800b55c <_raise_r>
 800b5b6:	bf00      	nop
 800b5b8:	20000068 	.word	0x20000068

0800b5bc <_kill_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d07      	ldr	r5, [pc, #28]	; (800b5dc <_kill_r+0x20>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	602b      	str	r3, [r5, #0]
 800b5ca:	f7f8 fe27 	bl	800421c <_kill>
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	d102      	bne.n	800b5d8 <_kill_r+0x1c>
 800b5d2:	682b      	ldr	r3, [r5, #0]
 800b5d4:	b103      	cbz	r3, 800b5d8 <_kill_r+0x1c>
 800b5d6:	6023      	str	r3, [r4, #0]
 800b5d8:	bd38      	pop	{r3, r4, r5, pc}
 800b5da:	bf00      	nop
 800b5dc:	2000082c 	.word	0x2000082c

0800b5e0 <_getpid_r>:
 800b5e0:	f7f8 be14 	b.w	800420c <_getpid>

0800b5e4 <__sread>:
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ec:	f000 f894 	bl	800b718 <_read_r>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	bfab      	itete	ge
 800b5f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5f8:	181b      	addge	r3, r3, r0
 800b5fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5fe:	bfac      	ite	ge
 800b600:	6563      	strge	r3, [r4, #84]	; 0x54
 800b602:	81a3      	strhlt	r3, [r4, #12]
 800b604:	bd10      	pop	{r4, pc}

0800b606 <__swrite>:
 800b606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60a:	461f      	mov	r7, r3
 800b60c:	898b      	ldrh	r3, [r1, #12]
 800b60e:	05db      	lsls	r3, r3, #23
 800b610:	4605      	mov	r5, r0
 800b612:	460c      	mov	r4, r1
 800b614:	4616      	mov	r6, r2
 800b616:	d505      	bpl.n	800b624 <__swrite+0x1e>
 800b618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61c:	2302      	movs	r3, #2
 800b61e:	2200      	movs	r2, #0
 800b620:	f000 f868 	bl	800b6f4 <_lseek_r>
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b62a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b62e:	81a3      	strh	r3, [r4, #12]
 800b630:	4632      	mov	r2, r6
 800b632:	463b      	mov	r3, r7
 800b634:	4628      	mov	r0, r5
 800b636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	f000 b817 	b.w	800b66c <_write_r>

0800b63e <__sseek>:
 800b63e:	b510      	push	{r4, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b646:	f000 f855 	bl	800b6f4 <_lseek_r>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	bf15      	itete	ne
 800b650:	6560      	strne	r0, [r4, #84]	; 0x54
 800b652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b65a:	81a3      	strheq	r3, [r4, #12]
 800b65c:	bf18      	it	ne
 800b65e:	81a3      	strhne	r3, [r4, #12]
 800b660:	bd10      	pop	{r4, pc}

0800b662 <__sclose>:
 800b662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b666:	f000 b813 	b.w	800b690 <_close_r>
	...

0800b66c <_write_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d07      	ldr	r5, [pc, #28]	; (800b68c <_write_r+0x20>)
 800b670:	4604      	mov	r4, r0
 800b672:	4608      	mov	r0, r1
 800b674:	4611      	mov	r1, r2
 800b676:	2200      	movs	r2, #0
 800b678:	602a      	str	r2, [r5, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f7f8 fe05 	bl	800428a <_write>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_write_r+0x1e>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_write_r+0x1e>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	2000082c 	.word	0x2000082c

0800b690 <_close_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d06      	ldr	r5, [pc, #24]	; (800b6ac <_close_r+0x1c>)
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	f7f8 fe11 	bl	80042c2 <_close>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_close_r+0x1a>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_close_r+0x1a>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	2000082c 	.word	0x2000082c

0800b6b0 <_fstat_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d07      	ldr	r5, [pc, #28]	; (800b6d0 <_fstat_r+0x20>)
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4608      	mov	r0, r1
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	602b      	str	r3, [r5, #0]
 800b6be:	f7f8 fe0c 	bl	80042da <_fstat>
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	d102      	bne.n	800b6cc <_fstat_r+0x1c>
 800b6c6:	682b      	ldr	r3, [r5, #0]
 800b6c8:	b103      	cbz	r3, 800b6cc <_fstat_r+0x1c>
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}
 800b6ce:	bf00      	nop
 800b6d0:	2000082c 	.word	0x2000082c

0800b6d4 <_isatty_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4d06      	ldr	r5, [pc, #24]	; (800b6f0 <_isatty_r+0x1c>)
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4604      	mov	r4, r0
 800b6dc:	4608      	mov	r0, r1
 800b6de:	602b      	str	r3, [r5, #0]
 800b6e0:	f7f8 fe0b 	bl	80042fa <_isatty>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d102      	bne.n	800b6ee <_isatty_r+0x1a>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	b103      	cbz	r3, 800b6ee <_isatty_r+0x1a>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	2000082c 	.word	0x2000082c

0800b6f4 <_lseek_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4d07      	ldr	r5, [pc, #28]	; (800b714 <_lseek_r+0x20>)
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	4608      	mov	r0, r1
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	2200      	movs	r2, #0
 800b700:	602a      	str	r2, [r5, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	f7f8 fe04 	bl	8004310 <_lseek>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	d102      	bne.n	800b712 <_lseek_r+0x1e>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	b103      	cbz	r3, 800b712 <_lseek_r+0x1e>
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	bd38      	pop	{r3, r4, r5, pc}
 800b714:	2000082c 	.word	0x2000082c

0800b718 <_read_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d07      	ldr	r5, [pc, #28]	; (800b738 <_read_r+0x20>)
 800b71c:	4604      	mov	r4, r0
 800b71e:	4608      	mov	r0, r1
 800b720:	4611      	mov	r1, r2
 800b722:	2200      	movs	r2, #0
 800b724:	602a      	str	r2, [r5, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	f7f8 fd92 	bl	8004250 <_read>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d102      	bne.n	800b736 <_read_r+0x1e>
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	b103      	cbz	r3, 800b736 <_read_r+0x1e>
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	2000082c 	.word	0x2000082c

0800b73c <pow>:
 800b73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b740:	ec59 8b10 	vmov	r8, r9, d0
 800b744:	ec57 6b11 	vmov	r6, r7, d1
 800b748:	f000 f8da 	bl	800b900 <__ieee754_pow>
 800b74c:	4b4e      	ldr	r3, [pc, #312]	; (800b888 <pow+0x14c>)
 800b74e:	f993 3000 	ldrsb.w	r3, [r3]
 800b752:	3301      	adds	r3, #1
 800b754:	ec55 4b10 	vmov	r4, r5, d0
 800b758:	d015      	beq.n	800b786 <pow+0x4a>
 800b75a:	4632      	mov	r2, r6
 800b75c:	463b      	mov	r3, r7
 800b75e:	4630      	mov	r0, r6
 800b760:	4639      	mov	r1, r7
 800b762:	f7f5 f9db 	bl	8000b1c <__aeabi_dcmpun>
 800b766:	b970      	cbnz	r0, 800b786 <pow+0x4a>
 800b768:	4642      	mov	r2, r8
 800b76a:	464b      	mov	r3, r9
 800b76c:	4640      	mov	r0, r8
 800b76e:	4649      	mov	r1, r9
 800b770:	f7f5 f9d4 	bl	8000b1c <__aeabi_dcmpun>
 800b774:	2200      	movs	r2, #0
 800b776:	2300      	movs	r3, #0
 800b778:	b148      	cbz	r0, 800b78e <pow+0x52>
 800b77a:	4630      	mov	r0, r6
 800b77c:	4639      	mov	r1, r7
 800b77e:	f7f5 f99b 	bl	8000ab8 <__aeabi_dcmpeq>
 800b782:	2800      	cmp	r0, #0
 800b784:	d17d      	bne.n	800b882 <pow+0x146>
 800b786:	ec45 4b10 	vmov	d0, r4, r5
 800b78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b78e:	4640      	mov	r0, r8
 800b790:	4649      	mov	r1, r9
 800b792:	f7f5 f991 	bl	8000ab8 <__aeabi_dcmpeq>
 800b796:	b1e0      	cbz	r0, 800b7d2 <pow+0x96>
 800b798:	2200      	movs	r2, #0
 800b79a:	2300      	movs	r3, #0
 800b79c:	4630      	mov	r0, r6
 800b79e:	4639      	mov	r1, r7
 800b7a0:	f7f5 f98a 	bl	8000ab8 <__aeabi_dcmpeq>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d16c      	bne.n	800b882 <pow+0x146>
 800b7a8:	ec47 6b10 	vmov	d0, r6, r7
 800b7ac:	f000 fe87 	bl	800c4be <finite>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d0e8      	beq.n	800b786 <pow+0x4a>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f5 f986 	bl	8000acc <__aeabi_dcmplt>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d0e0      	beq.n	800b786 <pow+0x4a>
 800b7c4:	f7fe ff2a 	bl	800a61c <__errno>
 800b7c8:	2321      	movs	r3, #33	; 0x21
 800b7ca:	6003      	str	r3, [r0, #0]
 800b7cc:	2400      	movs	r4, #0
 800b7ce:	4d2f      	ldr	r5, [pc, #188]	; (800b88c <pow+0x150>)
 800b7d0:	e7d9      	b.n	800b786 <pow+0x4a>
 800b7d2:	ec45 4b10 	vmov	d0, r4, r5
 800b7d6:	f000 fe72 	bl	800c4be <finite>
 800b7da:	bbb8      	cbnz	r0, 800b84c <pow+0x110>
 800b7dc:	ec49 8b10 	vmov	d0, r8, r9
 800b7e0:	f000 fe6d 	bl	800c4be <finite>
 800b7e4:	b390      	cbz	r0, 800b84c <pow+0x110>
 800b7e6:	ec47 6b10 	vmov	d0, r6, r7
 800b7ea:	f000 fe68 	bl	800c4be <finite>
 800b7ee:	b368      	cbz	r0, 800b84c <pow+0x110>
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	462b      	mov	r3, r5
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f5 f990 	bl	8000b1c <__aeabi_dcmpun>
 800b7fc:	b160      	cbz	r0, 800b818 <pow+0xdc>
 800b7fe:	f7fe ff0d 	bl	800a61c <__errno>
 800b802:	2321      	movs	r3, #33	; 0x21
 800b804:	6003      	str	r3, [r0, #0]
 800b806:	2200      	movs	r2, #0
 800b808:	2300      	movs	r3, #0
 800b80a:	4610      	mov	r0, r2
 800b80c:	4619      	mov	r1, r3
 800b80e:	f7f5 f815 	bl	800083c <__aeabi_ddiv>
 800b812:	4604      	mov	r4, r0
 800b814:	460d      	mov	r5, r1
 800b816:	e7b6      	b.n	800b786 <pow+0x4a>
 800b818:	f7fe ff00 	bl	800a61c <__errno>
 800b81c:	2322      	movs	r3, #34	; 0x22
 800b81e:	6003      	str	r3, [r0, #0]
 800b820:	2200      	movs	r2, #0
 800b822:	2300      	movs	r3, #0
 800b824:	4640      	mov	r0, r8
 800b826:	4649      	mov	r1, r9
 800b828:	f7f5 f950 	bl	8000acc <__aeabi_dcmplt>
 800b82c:	2400      	movs	r4, #0
 800b82e:	b158      	cbz	r0, 800b848 <pow+0x10c>
 800b830:	ec47 6b10 	vmov	d0, r6, r7
 800b834:	f000 fe58 	bl	800c4e8 <rint>
 800b838:	4632      	mov	r2, r6
 800b83a:	ec51 0b10 	vmov	r0, r1, d0
 800b83e:	463b      	mov	r3, r7
 800b840:	f7f5 f93a 	bl	8000ab8 <__aeabi_dcmpeq>
 800b844:	2800      	cmp	r0, #0
 800b846:	d0c2      	beq.n	800b7ce <pow+0x92>
 800b848:	4d11      	ldr	r5, [pc, #68]	; (800b890 <pow+0x154>)
 800b84a:	e79c      	b.n	800b786 <pow+0x4a>
 800b84c:	2200      	movs	r2, #0
 800b84e:	2300      	movs	r3, #0
 800b850:	4620      	mov	r0, r4
 800b852:	4629      	mov	r1, r5
 800b854:	f7f5 f930 	bl	8000ab8 <__aeabi_dcmpeq>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d094      	beq.n	800b786 <pow+0x4a>
 800b85c:	ec49 8b10 	vmov	d0, r8, r9
 800b860:	f000 fe2d 	bl	800c4be <finite>
 800b864:	2800      	cmp	r0, #0
 800b866:	d08e      	beq.n	800b786 <pow+0x4a>
 800b868:	ec47 6b10 	vmov	d0, r6, r7
 800b86c:	f000 fe27 	bl	800c4be <finite>
 800b870:	2800      	cmp	r0, #0
 800b872:	d088      	beq.n	800b786 <pow+0x4a>
 800b874:	f7fe fed2 	bl	800a61c <__errno>
 800b878:	2322      	movs	r3, #34	; 0x22
 800b87a:	6003      	str	r3, [r0, #0]
 800b87c:	2400      	movs	r4, #0
 800b87e:	2500      	movs	r5, #0
 800b880:	e781      	b.n	800b786 <pow+0x4a>
 800b882:	4d04      	ldr	r5, [pc, #16]	; (800b894 <pow+0x158>)
 800b884:	2400      	movs	r4, #0
 800b886:	e77e      	b.n	800b786 <pow+0x4a>
 800b888:	200000cc 	.word	0x200000cc
 800b88c:	fff00000 	.word	0xfff00000
 800b890:	7ff00000 	.word	0x7ff00000
 800b894:	3ff00000 	.word	0x3ff00000

0800b898 <sqrt>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	ed2d 8b02 	vpush	{d8}
 800b89e:	ec55 4b10 	vmov	r4, r5, d0
 800b8a2:	f000 fd4f 	bl	800c344 <__ieee754_sqrt>
 800b8a6:	4b15      	ldr	r3, [pc, #84]	; (800b8fc <sqrt+0x64>)
 800b8a8:	eeb0 8a40 	vmov.f32	s16, s0
 800b8ac:	eef0 8a60 	vmov.f32	s17, s1
 800b8b0:	f993 3000 	ldrsb.w	r3, [r3]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	d019      	beq.n	800b8ec <sqrt+0x54>
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	4620      	mov	r0, r4
 800b8be:	4629      	mov	r1, r5
 800b8c0:	f7f5 f92c 	bl	8000b1c <__aeabi_dcmpun>
 800b8c4:	b990      	cbnz	r0, 800b8ec <sqrt+0x54>
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	f7f5 f8fd 	bl	8000acc <__aeabi_dcmplt>
 800b8d2:	b158      	cbz	r0, 800b8ec <sqrt+0x54>
 800b8d4:	f7fe fea2 	bl	800a61c <__errno>
 800b8d8:	2321      	movs	r3, #33	; 0x21
 800b8da:	6003      	str	r3, [r0, #0]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2300      	movs	r3, #0
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	f7f4 ffaa 	bl	800083c <__aeabi_ddiv>
 800b8e8:	ec41 0b18 	vmov	d8, r0, r1
 800b8ec:	eeb0 0a48 	vmov.f32	s0, s16
 800b8f0:	eef0 0a68 	vmov.f32	s1, s17
 800b8f4:	ecbd 8b02 	vpop	{d8}
 800b8f8:	bd38      	pop	{r3, r4, r5, pc}
 800b8fa:	bf00      	nop
 800b8fc:	200000cc 	.word	0x200000cc

0800b900 <__ieee754_pow>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	ed2d 8b06 	vpush	{d8-d10}
 800b908:	b08d      	sub	sp, #52	; 0x34
 800b90a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b90e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b912:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b916:	ea56 0100 	orrs.w	r1, r6, r0
 800b91a:	ec53 2b10 	vmov	r2, r3, d0
 800b91e:	f000 84d1 	beq.w	800c2c4 <__ieee754_pow+0x9c4>
 800b922:	497f      	ldr	r1, [pc, #508]	; (800bb20 <__ieee754_pow+0x220>)
 800b924:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b928:	428c      	cmp	r4, r1
 800b92a:	ee10 8a10 	vmov	r8, s0
 800b92e:	4699      	mov	r9, r3
 800b930:	dc09      	bgt.n	800b946 <__ieee754_pow+0x46>
 800b932:	d103      	bne.n	800b93c <__ieee754_pow+0x3c>
 800b934:	b97a      	cbnz	r2, 800b956 <__ieee754_pow+0x56>
 800b936:	42a6      	cmp	r6, r4
 800b938:	dd02      	ble.n	800b940 <__ieee754_pow+0x40>
 800b93a:	e00c      	b.n	800b956 <__ieee754_pow+0x56>
 800b93c:	428e      	cmp	r6, r1
 800b93e:	dc02      	bgt.n	800b946 <__ieee754_pow+0x46>
 800b940:	428e      	cmp	r6, r1
 800b942:	d110      	bne.n	800b966 <__ieee754_pow+0x66>
 800b944:	b178      	cbz	r0, 800b966 <__ieee754_pow+0x66>
 800b946:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b94a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b94e:	ea54 0308 	orrs.w	r3, r4, r8
 800b952:	f000 84b7 	beq.w	800c2c4 <__ieee754_pow+0x9c4>
 800b956:	4873      	ldr	r0, [pc, #460]	; (800bb24 <__ieee754_pow+0x224>)
 800b958:	b00d      	add	sp, #52	; 0x34
 800b95a:	ecbd 8b06 	vpop	{d8-d10}
 800b95e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b962:	f000 bdb9 	b.w	800c4d8 <nan>
 800b966:	f1b9 0f00 	cmp.w	r9, #0
 800b96a:	da36      	bge.n	800b9da <__ieee754_pow+0xda>
 800b96c:	496e      	ldr	r1, [pc, #440]	; (800bb28 <__ieee754_pow+0x228>)
 800b96e:	428e      	cmp	r6, r1
 800b970:	dc51      	bgt.n	800ba16 <__ieee754_pow+0x116>
 800b972:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b976:	428e      	cmp	r6, r1
 800b978:	f340 84af 	ble.w	800c2da <__ieee754_pow+0x9da>
 800b97c:	1531      	asrs	r1, r6, #20
 800b97e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b982:	2914      	cmp	r1, #20
 800b984:	dd0f      	ble.n	800b9a6 <__ieee754_pow+0xa6>
 800b986:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b98a:	fa20 fc01 	lsr.w	ip, r0, r1
 800b98e:	fa0c f101 	lsl.w	r1, ip, r1
 800b992:	4281      	cmp	r1, r0
 800b994:	f040 84a1 	bne.w	800c2da <__ieee754_pow+0x9da>
 800b998:	f00c 0c01 	and.w	ip, ip, #1
 800b99c:	f1cc 0102 	rsb	r1, ip, #2
 800b9a0:	9100      	str	r1, [sp, #0]
 800b9a2:	b180      	cbz	r0, 800b9c6 <__ieee754_pow+0xc6>
 800b9a4:	e059      	b.n	800ba5a <__ieee754_pow+0x15a>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d155      	bne.n	800ba56 <__ieee754_pow+0x156>
 800b9aa:	f1c1 0114 	rsb	r1, r1, #20
 800b9ae:	fa46 fc01 	asr.w	ip, r6, r1
 800b9b2:	fa0c f101 	lsl.w	r1, ip, r1
 800b9b6:	42b1      	cmp	r1, r6
 800b9b8:	f040 848c 	bne.w	800c2d4 <__ieee754_pow+0x9d4>
 800b9bc:	f00c 0c01 	and.w	ip, ip, #1
 800b9c0:	f1cc 0102 	rsb	r1, ip, #2
 800b9c4:	9100      	str	r1, [sp, #0]
 800b9c6:	4959      	ldr	r1, [pc, #356]	; (800bb2c <__ieee754_pow+0x22c>)
 800b9c8:	428e      	cmp	r6, r1
 800b9ca:	d12d      	bne.n	800ba28 <__ieee754_pow+0x128>
 800b9cc:	2f00      	cmp	r7, #0
 800b9ce:	da79      	bge.n	800bac4 <__ieee754_pow+0x1c4>
 800b9d0:	4956      	ldr	r1, [pc, #344]	; (800bb2c <__ieee754_pow+0x22c>)
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	f7f4 ff32 	bl	800083c <__aeabi_ddiv>
 800b9d8:	e016      	b.n	800ba08 <__ieee754_pow+0x108>
 800b9da:	2100      	movs	r1, #0
 800b9dc:	9100      	str	r1, [sp, #0]
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d13b      	bne.n	800ba5a <__ieee754_pow+0x15a>
 800b9e2:	494f      	ldr	r1, [pc, #316]	; (800bb20 <__ieee754_pow+0x220>)
 800b9e4:	428e      	cmp	r6, r1
 800b9e6:	d1ee      	bne.n	800b9c6 <__ieee754_pow+0xc6>
 800b9e8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b9ec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b9f0:	ea53 0308 	orrs.w	r3, r3, r8
 800b9f4:	f000 8466 	beq.w	800c2c4 <__ieee754_pow+0x9c4>
 800b9f8:	4b4d      	ldr	r3, [pc, #308]	; (800bb30 <__ieee754_pow+0x230>)
 800b9fa:	429c      	cmp	r4, r3
 800b9fc:	dd0d      	ble.n	800ba1a <__ieee754_pow+0x11a>
 800b9fe:	2f00      	cmp	r7, #0
 800ba00:	f280 8464 	bge.w	800c2cc <__ieee754_pow+0x9cc>
 800ba04:	2000      	movs	r0, #0
 800ba06:	2100      	movs	r1, #0
 800ba08:	ec41 0b10 	vmov	d0, r0, r1
 800ba0c:	b00d      	add	sp, #52	; 0x34
 800ba0e:	ecbd 8b06 	vpop	{d8-d10}
 800ba12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba16:	2102      	movs	r1, #2
 800ba18:	e7e0      	b.n	800b9dc <__ieee754_pow+0xdc>
 800ba1a:	2f00      	cmp	r7, #0
 800ba1c:	daf2      	bge.n	800ba04 <__ieee754_pow+0x104>
 800ba1e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800ba22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ba26:	e7ef      	b.n	800ba08 <__ieee754_pow+0x108>
 800ba28:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ba2c:	d104      	bne.n	800ba38 <__ieee754_pow+0x138>
 800ba2e:	4610      	mov	r0, r2
 800ba30:	4619      	mov	r1, r3
 800ba32:	f7f4 fdd9 	bl	80005e8 <__aeabi_dmul>
 800ba36:	e7e7      	b.n	800ba08 <__ieee754_pow+0x108>
 800ba38:	493e      	ldr	r1, [pc, #248]	; (800bb34 <__ieee754_pow+0x234>)
 800ba3a:	428f      	cmp	r7, r1
 800ba3c:	d10d      	bne.n	800ba5a <__ieee754_pow+0x15a>
 800ba3e:	f1b9 0f00 	cmp.w	r9, #0
 800ba42:	db0a      	blt.n	800ba5a <__ieee754_pow+0x15a>
 800ba44:	ec43 2b10 	vmov	d0, r2, r3
 800ba48:	b00d      	add	sp, #52	; 0x34
 800ba4a:	ecbd 8b06 	vpop	{d8-d10}
 800ba4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba52:	f000 bc77 	b.w	800c344 <__ieee754_sqrt>
 800ba56:	2100      	movs	r1, #0
 800ba58:	9100      	str	r1, [sp, #0]
 800ba5a:	ec43 2b10 	vmov	d0, r2, r3
 800ba5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba62:	f000 fd23 	bl	800c4ac <fabs>
 800ba66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba6a:	ec51 0b10 	vmov	r0, r1, d0
 800ba6e:	f1b8 0f00 	cmp.w	r8, #0
 800ba72:	d12a      	bne.n	800baca <__ieee754_pow+0x1ca>
 800ba74:	b12c      	cbz	r4, 800ba82 <__ieee754_pow+0x182>
 800ba76:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800bb2c <__ieee754_pow+0x22c>
 800ba7a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800ba7e:	45e6      	cmp	lr, ip
 800ba80:	d123      	bne.n	800baca <__ieee754_pow+0x1ca>
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	da05      	bge.n	800ba92 <__ieee754_pow+0x192>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	4927      	ldr	r1, [pc, #156]	; (800bb2c <__ieee754_pow+0x22c>)
 800ba8e:	f7f4 fed5 	bl	800083c <__aeabi_ddiv>
 800ba92:	f1b9 0f00 	cmp.w	r9, #0
 800ba96:	dab7      	bge.n	800ba08 <__ieee754_pow+0x108>
 800ba98:	9b00      	ldr	r3, [sp, #0]
 800ba9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ba9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800baa2:	4323      	orrs	r3, r4
 800baa4:	d108      	bne.n	800bab8 <__ieee754_pow+0x1b8>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	4610      	mov	r0, r2
 800baac:	4619      	mov	r1, r3
 800baae:	f7f4 fbe3 	bl	8000278 <__aeabi_dsub>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	e78d      	b.n	800b9d4 <__ieee754_pow+0xd4>
 800bab8:	9b00      	ldr	r3, [sp, #0]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d1a4      	bne.n	800ba08 <__ieee754_pow+0x108>
 800babe:	4602      	mov	r2, r0
 800bac0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bac4:	4610      	mov	r0, r2
 800bac6:	4619      	mov	r1, r3
 800bac8:	e79e      	b.n	800ba08 <__ieee754_pow+0x108>
 800baca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800bace:	f10c 35ff 	add.w	r5, ip, #4294967295
 800bad2:	950a      	str	r5, [sp, #40]	; 0x28
 800bad4:	9d00      	ldr	r5, [sp, #0]
 800bad6:	46ac      	mov	ip, r5
 800bad8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bada:	ea5c 0505 	orrs.w	r5, ip, r5
 800bade:	d0e4      	beq.n	800baaa <__ieee754_pow+0x1aa>
 800bae0:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <__ieee754_pow+0x238>)
 800bae2:	429e      	cmp	r6, r3
 800bae4:	f340 80fc 	ble.w	800bce0 <__ieee754_pow+0x3e0>
 800bae8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800baec:	429e      	cmp	r6, r3
 800baee:	4b10      	ldr	r3, [pc, #64]	; (800bb30 <__ieee754_pow+0x230>)
 800baf0:	dd07      	ble.n	800bb02 <__ieee754_pow+0x202>
 800baf2:	429c      	cmp	r4, r3
 800baf4:	dc0a      	bgt.n	800bb0c <__ieee754_pow+0x20c>
 800baf6:	2f00      	cmp	r7, #0
 800baf8:	da84      	bge.n	800ba04 <__ieee754_pow+0x104>
 800bafa:	a307      	add	r3, pc, #28	; (adr r3, 800bb18 <__ieee754_pow+0x218>)
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	e795      	b.n	800ba2e <__ieee754_pow+0x12e>
 800bb02:	429c      	cmp	r4, r3
 800bb04:	dbf7      	blt.n	800baf6 <__ieee754_pow+0x1f6>
 800bb06:	4b09      	ldr	r3, [pc, #36]	; (800bb2c <__ieee754_pow+0x22c>)
 800bb08:	429c      	cmp	r4, r3
 800bb0a:	dd17      	ble.n	800bb3c <__ieee754_pow+0x23c>
 800bb0c:	2f00      	cmp	r7, #0
 800bb0e:	dcf4      	bgt.n	800bafa <__ieee754_pow+0x1fa>
 800bb10:	e778      	b.n	800ba04 <__ieee754_pow+0x104>
 800bb12:	bf00      	nop
 800bb14:	f3af 8000 	nop.w
 800bb18:	8800759c 	.word	0x8800759c
 800bb1c:	7e37e43c 	.word	0x7e37e43c
 800bb20:	7ff00000 	.word	0x7ff00000
 800bb24:	080f0902 	.word	0x080f0902
 800bb28:	433fffff 	.word	0x433fffff
 800bb2c:	3ff00000 	.word	0x3ff00000
 800bb30:	3fefffff 	.word	0x3fefffff
 800bb34:	3fe00000 	.word	0x3fe00000
 800bb38:	41e00000 	.word	0x41e00000
 800bb3c:	4b64      	ldr	r3, [pc, #400]	; (800bcd0 <__ieee754_pow+0x3d0>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f7f4 fb9a 	bl	8000278 <__aeabi_dsub>
 800bb44:	a356      	add	r3, pc, #344	; (adr r3, 800bca0 <__ieee754_pow+0x3a0>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	f7f4 fd4b 	bl	80005e8 <__aeabi_dmul>
 800bb52:	a355      	add	r3, pc, #340	; (adr r3, 800bca8 <__ieee754_pow+0x3a8>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	4606      	mov	r6, r0
 800bb5a:	460f      	mov	r7, r1
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f7f4 fd42 	bl	80005e8 <__aeabi_dmul>
 800bb64:	4b5b      	ldr	r3, [pc, #364]	; (800bcd4 <__ieee754_pow+0x3d4>)
 800bb66:	4682      	mov	sl, r0
 800bb68:	468b      	mov	fp, r1
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f7f4 fd3a 	bl	80005e8 <__aeabi_dmul>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	a14d      	add	r1, pc, #308	; (adr r1, 800bcb0 <__ieee754_pow+0x3b0>)
 800bb7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7e:	f7f4 fb7b 	bl	8000278 <__aeabi_dsub>
 800bb82:	4622      	mov	r2, r4
 800bb84:	462b      	mov	r3, r5
 800bb86:	f7f4 fd2f 	bl	80005e8 <__aeabi_dmul>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	2000      	movs	r0, #0
 800bb90:	4951      	ldr	r1, [pc, #324]	; (800bcd8 <__ieee754_pow+0x3d8>)
 800bb92:	f7f4 fb71 	bl	8000278 <__aeabi_dsub>
 800bb96:	4622      	mov	r2, r4
 800bb98:	4680      	mov	r8, r0
 800bb9a:	4689      	mov	r9, r1
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	4620      	mov	r0, r4
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7f4 fd21 	bl	80005e8 <__aeabi_dmul>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	4640      	mov	r0, r8
 800bbac:	4649      	mov	r1, r9
 800bbae:	f7f4 fd1b 	bl	80005e8 <__aeabi_dmul>
 800bbb2:	a341      	add	r3, pc, #260	; (adr r3, 800bcb8 <__ieee754_pow+0x3b8>)
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	f7f4 fd16 	bl	80005e8 <__aeabi_dmul>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4650      	mov	r0, sl
 800bbc2:	4659      	mov	r1, fp
 800bbc4:	f7f4 fb58 	bl	8000278 <__aeabi_dsub>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4689      	mov	r9, r1
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	4639      	mov	r1, r7
 800bbd4:	f7f4 fb52 	bl	800027c <__adddf3>
 800bbd8:	2400      	movs	r4, #0
 800bbda:	4632      	mov	r2, r6
 800bbdc:	463b      	mov	r3, r7
 800bbde:	4620      	mov	r0, r4
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	f7f4 fb49 	bl	8000278 <__aeabi_dsub>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fb43 	bl	8000278 <__aeabi_dsub>
 800bbf2:	9b00      	ldr	r3, [sp, #0]
 800bbf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	4682      	mov	sl, r0
 800bbfc:	468b      	mov	fp, r1
 800bbfe:	f040 81f1 	bne.w	800bfe4 <__ieee754_pow+0x6e4>
 800bc02:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bcc0 <__ieee754_pow+0x3c0>
 800bc06:	eeb0 8a47 	vmov.f32	s16, s14
 800bc0a:	eef0 8a67 	vmov.f32	s17, s15
 800bc0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bc12:	2600      	movs	r6, #0
 800bc14:	4632      	mov	r2, r6
 800bc16:	463b      	mov	r3, r7
 800bc18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc1c:	f7f4 fb2c 	bl	8000278 <__aeabi_dsub>
 800bc20:	4622      	mov	r2, r4
 800bc22:	462b      	mov	r3, r5
 800bc24:	f7f4 fce0 	bl	80005e8 <__aeabi_dmul>
 800bc28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc2c:	4680      	mov	r8, r0
 800bc2e:	4689      	mov	r9, r1
 800bc30:	4650      	mov	r0, sl
 800bc32:	4659      	mov	r1, fp
 800bc34:	f7f4 fcd8 	bl	80005e8 <__aeabi_dmul>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4640      	mov	r0, r8
 800bc3e:	4649      	mov	r1, r9
 800bc40:	f7f4 fb1c 	bl	800027c <__adddf3>
 800bc44:	4632      	mov	r2, r6
 800bc46:	463b      	mov	r3, r7
 800bc48:	4680      	mov	r8, r0
 800bc4a:	4689      	mov	r9, r1
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7f4 fcca 	bl	80005e8 <__aeabi_dmul>
 800bc54:	460b      	mov	r3, r1
 800bc56:	4604      	mov	r4, r0
 800bc58:	460d      	mov	r5, r1
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	4640      	mov	r0, r8
 800bc60:	f7f4 fb0c 	bl	800027c <__adddf3>
 800bc64:	4b1d      	ldr	r3, [pc, #116]	; (800bcdc <__ieee754_pow+0x3dc>)
 800bc66:	4299      	cmp	r1, r3
 800bc68:	ec45 4b19 	vmov	d9, r4, r5
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	468b      	mov	fp, r1
 800bc72:	f340 82fe 	ble.w	800c272 <__ieee754_pow+0x972>
 800bc76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bc7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bc7e:	4303      	orrs	r3, r0
 800bc80:	f000 81f0 	beq.w	800c064 <__ieee754_pow+0x764>
 800bc84:	a310      	add	r3, pc, #64	; (adr r3, 800bcc8 <__ieee754_pow+0x3c8>)
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	ec51 0b18 	vmov	r0, r1, d8
 800bc8e:	f7f4 fcab 	bl	80005e8 <__aeabi_dmul>
 800bc92:	a30d      	add	r3, pc, #52	; (adr r3, 800bcc8 <__ieee754_pow+0x3c8>)
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	e6cb      	b.n	800ba32 <__ieee754_pow+0x132>
 800bc9a:	bf00      	nop
 800bc9c:	f3af 8000 	nop.w
 800bca0:	60000000 	.word	0x60000000
 800bca4:	3ff71547 	.word	0x3ff71547
 800bca8:	f85ddf44 	.word	0xf85ddf44
 800bcac:	3e54ae0b 	.word	0x3e54ae0b
 800bcb0:	55555555 	.word	0x55555555
 800bcb4:	3fd55555 	.word	0x3fd55555
 800bcb8:	652b82fe 	.word	0x652b82fe
 800bcbc:	3ff71547 	.word	0x3ff71547
 800bcc0:	00000000 	.word	0x00000000
 800bcc4:	bff00000 	.word	0xbff00000
 800bcc8:	8800759c 	.word	0x8800759c
 800bccc:	7e37e43c 	.word	0x7e37e43c
 800bcd0:	3ff00000 	.word	0x3ff00000
 800bcd4:	3fd00000 	.word	0x3fd00000
 800bcd8:	3fe00000 	.word	0x3fe00000
 800bcdc:	408fffff 	.word	0x408fffff
 800bce0:	4bd7      	ldr	r3, [pc, #860]	; (800c040 <__ieee754_pow+0x740>)
 800bce2:	ea03 0309 	and.w	r3, r3, r9
 800bce6:	2200      	movs	r2, #0
 800bce8:	b92b      	cbnz	r3, 800bcf6 <__ieee754_pow+0x3f6>
 800bcea:	4bd6      	ldr	r3, [pc, #856]	; (800c044 <__ieee754_pow+0x744>)
 800bcec:	f7f4 fc7c 	bl	80005e8 <__aeabi_dmul>
 800bcf0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	1523      	asrs	r3, r4, #20
 800bcf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bcfc:	4413      	add	r3, r2
 800bcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bd00:	4bd1      	ldr	r3, [pc, #836]	; (800c048 <__ieee754_pow+0x748>)
 800bd02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bd06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bd0a:	429c      	cmp	r4, r3
 800bd0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd10:	dd08      	ble.n	800bd24 <__ieee754_pow+0x424>
 800bd12:	4bce      	ldr	r3, [pc, #824]	; (800c04c <__ieee754_pow+0x74c>)
 800bd14:	429c      	cmp	r4, r3
 800bd16:	f340 8163 	ble.w	800bfe0 <__ieee754_pow+0x6e0>
 800bd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bd24:	2400      	movs	r4, #0
 800bd26:	00e3      	lsls	r3, r4, #3
 800bd28:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd2a:	4bc9      	ldr	r3, [pc, #804]	; (800c050 <__ieee754_pow+0x750>)
 800bd2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd30:	ed93 7b00 	vldr	d7, [r3]
 800bd34:	4629      	mov	r1, r5
 800bd36:	ec53 2b17 	vmov	r2, r3, d7
 800bd3a:	eeb0 8a47 	vmov.f32	s16, s14
 800bd3e:	eef0 8a67 	vmov.f32	s17, s15
 800bd42:	4682      	mov	sl, r0
 800bd44:	f7f4 fa98 	bl	8000278 <__aeabi_dsub>
 800bd48:	4652      	mov	r2, sl
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	462b      	mov	r3, r5
 800bd50:	ec51 0b18 	vmov	r0, r1, d8
 800bd54:	f7f4 fa92 	bl	800027c <__adddf3>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	49bd      	ldr	r1, [pc, #756]	; (800c054 <__ieee754_pow+0x754>)
 800bd60:	f7f4 fd6c 	bl	800083c <__aeabi_ddiv>
 800bd64:	ec41 0b19 	vmov	d9, r0, r1
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	4639      	mov	r1, r7
 800bd70:	f7f4 fc3a 	bl	80005e8 <__aeabi_dmul>
 800bd74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd80:	2300      	movs	r3, #0
 800bd82:	9304      	str	r3, [sp, #16]
 800bd84:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bd88:	46ab      	mov	fp, r5
 800bd8a:	106d      	asrs	r5, r5, #1
 800bd8c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bd90:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bd94:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bd98:	2200      	movs	r2, #0
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	4614      	mov	r4, r2
 800bda0:	461d      	mov	r5, r3
 800bda2:	f7f4 fc21 	bl	80005e8 <__aeabi_dmul>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4630      	mov	r0, r6
 800bdac:	4639      	mov	r1, r7
 800bdae:	f7f4 fa63 	bl	8000278 <__aeabi_dsub>
 800bdb2:	ec53 2b18 	vmov	r2, r3, d8
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	460f      	mov	r7, r1
 800bdba:	4620      	mov	r0, r4
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	f7f4 fa5b 	bl	8000278 <__aeabi_dsub>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	4659      	mov	r1, fp
 800bdca:	f7f4 fa55 	bl	8000278 <__aeabi_dsub>
 800bdce:	4642      	mov	r2, r8
 800bdd0:	464b      	mov	r3, r9
 800bdd2:	f7f4 fc09 	bl	80005e8 <__aeabi_dmul>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4630      	mov	r0, r6
 800bddc:	4639      	mov	r1, r7
 800bdde:	f7f4 fa4b 	bl	8000278 <__aeabi_dsub>
 800bde2:	ec53 2b19 	vmov	r2, r3, d9
 800bde6:	f7f4 fbff 	bl	80005e8 <__aeabi_dmul>
 800bdea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdee:	ec41 0b18 	vmov	d8, r0, r1
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	f7f4 fbf7 	bl	80005e8 <__aeabi_dmul>
 800bdfa:	a37d      	add	r3, pc, #500	; (adr r3, 800bff0 <__ieee754_pow+0x6f0>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	4604      	mov	r4, r0
 800be02:	460d      	mov	r5, r1
 800be04:	f7f4 fbf0 	bl	80005e8 <__aeabi_dmul>
 800be08:	a37b      	add	r3, pc, #492	; (adr r3, 800bff8 <__ieee754_pow+0x6f8>)
 800be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0e:	f7f4 fa35 	bl	800027c <__adddf3>
 800be12:	4622      	mov	r2, r4
 800be14:	462b      	mov	r3, r5
 800be16:	f7f4 fbe7 	bl	80005e8 <__aeabi_dmul>
 800be1a:	a379      	add	r3, pc, #484	; (adr r3, 800c000 <__ieee754_pow+0x700>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 fa2c 	bl	800027c <__adddf3>
 800be24:	4622      	mov	r2, r4
 800be26:	462b      	mov	r3, r5
 800be28:	f7f4 fbde 	bl	80005e8 <__aeabi_dmul>
 800be2c:	a376      	add	r3, pc, #472	; (adr r3, 800c008 <__ieee754_pow+0x708>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	f7f4 fa23 	bl	800027c <__adddf3>
 800be36:	4622      	mov	r2, r4
 800be38:	462b      	mov	r3, r5
 800be3a:	f7f4 fbd5 	bl	80005e8 <__aeabi_dmul>
 800be3e:	a374      	add	r3, pc, #464	; (adr r3, 800c010 <__ieee754_pow+0x710>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 fa1a 	bl	800027c <__adddf3>
 800be48:	4622      	mov	r2, r4
 800be4a:	462b      	mov	r3, r5
 800be4c:	f7f4 fbcc 	bl	80005e8 <__aeabi_dmul>
 800be50:	a371      	add	r3, pc, #452	; (adr r3, 800c018 <__ieee754_pow+0x718>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 fa11 	bl	800027c <__adddf3>
 800be5a:	4622      	mov	r2, r4
 800be5c:	4606      	mov	r6, r0
 800be5e:	460f      	mov	r7, r1
 800be60:	462b      	mov	r3, r5
 800be62:	4620      	mov	r0, r4
 800be64:	4629      	mov	r1, r5
 800be66:	f7f4 fbbf 	bl	80005e8 <__aeabi_dmul>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 fbb9 	bl	80005e8 <__aeabi_dmul>
 800be76:	4642      	mov	r2, r8
 800be78:	4604      	mov	r4, r0
 800be7a:	460d      	mov	r5, r1
 800be7c:	464b      	mov	r3, r9
 800be7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be82:	f7f4 f9fb 	bl	800027c <__adddf3>
 800be86:	ec53 2b18 	vmov	r2, r3, d8
 800be8a:	f7f4 fbad 	bl	80005e8 <__aeabi_dmul>
 800be8e:	4622      	mov	r2, r4
 800be90:	462b      	mov	r3, r5
 800be92:	f7f4 f9f3 	bl	800027c <__adddf3>
 800be96:	4642      	mov	r2, r8
 800be98:	4682      	mov	sl, r0
 800be9a:	468b      	mov	fp, r1
 800be9c:	464b      	mov	r3, r9
 800be9e:	4640      	mov	r0, r8
 800bea0:	4649      	mov	r1, r9
 800bea2:	f7f4 fba1 	bl	80005e8 <__aeabi_dmul>
 800bea6:	4b6c      	ldr	r3, [pc, #432]	; (800c058 <__ieee754_pow+0x758>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	4606      	mov	r6, r0
 800beac:	460f      	mov	r7, r1
 800beae:	f7f4 f9e5 	bl	800027c <__adddf3>
 800beb2:	4652      	mov	r2, sl
 800beb4:	465b      	mov	r3, fp
 800beb6:	f7f4 f9e1 	bl	800027c <__adddf3>
 800beba:	9c04      	ldr	r4, [sp, #16]
 800bebc:	460d      	mov	r5, r1
 800bebe:	4622      	mov	r2, r4
 800bec0:	460b      	mov	r3, r1
 800bec2:	4640      	mov	r0, r8
 800bec4:	4649      	mov	r1, r9
 800bec6:	f7f4 fb8f 	bl	80005e8 <__aeabi_dmul>
 800beca:	4b63      	ldr	r3, [pc, #396]	; (800c058 <__ieee754_pow+0x758>)
 800becc:	4680      	mov	r8, r0
 800bece:	4689      	mov	r9, r1
 800bed0:	2200      	movs	r2, #0
 800bed2:	4620      	mov	r0, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7f4 f9cf 	bl	8000278 <__aeabi_dsub>
 800beda:	4632      	mov	r2, r6
 800bedc:	463b      	mov	r3, r7
 800bede:	f7f4 f9cb 	bl	8000278 <__aeabi_dsub>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	4650      	mov	r0, sl
 800bee8:	4659      	mov	r1, fp
 800beea:	f7f4 f9c5 	bl	8000278 <__aeabi_dsub>
 800beee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bef2:	f7f4 fb79 	bl	80005e8 <__aeabi_dmul>
 800bef6:	4622      	mov	r2, r4
 800bef8:	4606      	mov	r6, r0
 800befa:	460f      	mov	r7, r1
 800befc:	462b      	mov	r3, r5
 800befe:	ec51 0b18 	vmov	r0, r1, d8
 800bf02:	f7f4 fb71 	bl	80005e8 <__aeabi_dmul>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	f7f4 f9b5 	bl	800027c <__adddf3>
 800bf12:	4606      	mov	r6, r0
 800bf14:	460f      	mov	r7, r1
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	4649      	mov	r1, r9
 800bf1e:	f7f4 f9ad 	bl	800027c <__adddf3>
 800bf22:	9c04      	ldr	r4, [sp, #16]
 800bf24:	a33e      	add	r3, pc, #248	; (adr r3, 800c020 <__ieee754_pow+0x720>)
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	460d      	mov	r5, r1
 800bf2e:	f7f4 fb5b 	bl	80005e8 <__aeabi_dmul>
 800bf32:	4642      	mov	r2, r8
 800bf34:	ec41 0b18 	vmov	d8, r0, r1
 800bf38:	464b      	mov	r3, r9
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	f7f4 f99b 	bl	8000278 <__aeabi_dsub>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4630      	mov	r0, r6
 800bf48:	4639      	mov	r1, r7
 800bf4a:	f7f4 f995 	bl	8000278 <__aeabi_dsub>
 800bf4e:	a336      	add	r3, pc, #216	; (adr r3, 800c028 <__ieee754_pow+0x728>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f7f4 fb48 	bl	80005e8 <__aeabi_dmul>
 800bf58:	a335      	add	r3, pc, #212	; (adr r3, 800c030 <__ieee754_pow+0x730>)
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	4606      	mov	r6, r0
 800bf60:	460f      	mov	r7, r1
 800bf62:	4620      	mov	r0, r4
 800bf64:	4629      	mov	r1, r5
 800bf66:	f7f4 fb3f 	bl	80005e8 <__aeabi_dmul>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4630      	mov	r0, r6
 800bf70:	4639      	mov	r1, r7
 800bf72:	f7f4 f983 	bl	800027c <__adddf3>
 800bf76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf78:	4b38      	ldr	r3, [pc, #224]	; (800c05c <__ieee754_pow+0x75c>)
 800bf7a:	4413      	add	r3, r2
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	f7f4 f97c 	bl	800027c <__adddf3>
 800bf84:	4682      	mov	sl, r0
 800bf86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf88:	468b      	mov	fp, r1
 800bf8a:	f7f4 fac3 	bl	8000514 <__aeabi_i2d>
 800bf8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf90:	4b33      	ldr	r3, [pc, #204]	; (800c060 <__ieee754_pow+0x760>)
 800bf92:	4413      	add	r3, r2
 800bf94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf98:	4606      	mov	r6, r0
 800bf9a:	460f      	mov	r7, r1
 800bf9c:	4652      	mov	r2, sl
 800bf9e:	465b      	mov	r3, fp
 800bfa0:	ec51 0b18 	vmov	r0, r1, d8
 800bfa4:	f7f4 f96a 	bl	800027c <__adddf3>
 800bfa8:	4642      	mov	r2, r8
 800bfaa:	464b      	mov	r3, r9
 800bfac:	f7f4 f966 	bl	800027c <__adddf3>
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	463b      	mov	r3, r7
 800bfb4:	f7f4 f962 	bl	800027c <__adddf3>
 800bfb8:	9c04      	ldr	r4, [sp, #16]
 800bfba:	4632      	mov	r2, r6
 800bfbc:	463b      	mov	r3, r7
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	f7f4 f959 	bl	8000278 <__aeabi_dsub>
 800bfc6:	4642      	mov	r2, r8
 800bfc8:	464b      	mov	r3, r9
 800bfca:	f7f4 f955 	bl	8000278 <__aeabi_dsub>
 800bfce:	ec53 2b18 	vmov	r2, r3, d8
 800bfd2:	f7f4 f951 	bl	8000278 <__aeabi_dsub>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4650      	mov	r0, sl
 800bfdc:	4659      	mov	r1, fp
 800bfde:	e606      	b.n	800bbee <__ieee754_pow+0x2ee>
 800bfe0:	2401      	movs	r4, #1
 800bfe2:	e6a0      	b.n	800bd26 <__ieee754_pow+0x426>
 800bfe4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c038 <__ieee754_pow+0x738>
 800bfe8:	e60d      	b.n	800bc06 <__ieee754_pow+0x306>
 800bfea:	bf00      	nop
 800bfec:	f3af 8000 	nop.w
 800bff0:	4a454eef 	.word	0x4a454eef
 800bff4:	3fca7e28 	.word	0x3fca7e28
 800bff8:	93c9db65 	.word	0x93c9db65
 800bffc:	3fcd864a 	.word	0x3fcd864a
 800c000:	a91d4101 	.word	0xa91d4101
 800c004:	3fd17460 	.word	0x3fd17460
 800c008:	518f264d 	.word	0x518f264d
 800c00c:	3fd55555 	.word	0x3fd55555
 800c010:	db6fabff 	.word	0xdb6fabff
 800c014:	3fdb6db6 	.word	0x3fdb6db6
 800c018:	33333303 	.word	0x33333303
 800c01c:	3fe33333 	.word	0x3fe33333
 800c020:	e0000000 	.word	0xe0000000
 800c024:	3feec709 	.word	0x3feec709
 800c028:	dc3a03fd 	.word	0xdc3a03fd
 800c02c:	3feec709 	.word	0x3feec709
 800c030:	145b01f5 	.word	0x145b01f5
 800c034:	be3e2fe0 	.word	0xbe3e2fe0
 800c038:	00000000 	.word	0x00000000
 800c03c:	3ff00000 	.word	0x3ff00000
 800c040:	7ff00000 	.word	0x7ff00000
 800c044:	43400000 	.word	0x43400000
 800c048:	0003988e 	.word	0x0003988e
 800c04c:	000bb679 	.word	0x000bb679
 800c050:	080f0998 	.word	0x080f0998
 800c054:	3ff00000 	.word	0x3ff00000
 800c058:	40080000 	.word	0x40080000
 800c05c:	080f09b8 	.word	0x080f09b8
 800c060:	080f09a8 	.word	0x080f09a8
 800c064:	a3b5      	add	r3, pc, #724	; (adr r3, 800c33c <__ieee754_pow+0xa3c>)
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	4640      	mov	r0, r8
 800c06c:	4649      	mov	r1, r9
 800c06e:	f7f4 f905 	bl	800027c <__adddf3>
 800c072:	4622      	mov	r2, r4
 800c074:	ec41 0b1a 	vmov	d10, r0, r1
 800c078:	462b      	mov	r3, r5
 800c07a:	4630      	mov	r0, r6
 800c07c:	4639      	mov	r1, r7
 800c07e:	f7f4 f8fb 	bl	8000278 <__aeabi_dsub>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	ec51 0b1a 	vmov	r0, r1, d10
 800c08a:	f7f4 fd3d 	bl	8000b08 <__aeabi_dcmpgt>
 800c08e:	2800      	cmp	r0, #0
 800c090:	f47f adf8 	bne.w	800bc84 <__ieee754_pow+0x384>
 800c094:	4aa4      	ldr	r2, [pc, #656]	; (800c328 <__ieee754_pow+0xa28>)
 800c096:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c09a:	4293      	cmp	r3, r2
 800c09c:	f340 810b 	ble.w	800c2b6 <__ieee754_pow+0x9b6>
 800c0a0:	151b      	asrs	r3, r3, #20
 800c0a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c0a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c0aa:	fa4a f303 	asr.w	r3, sl, r3
 800c0ae:	445b      	add	r3, fp
 800c0b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c0b4:	4e9d      	ldr	r6, [pc, #628]	; (800c32c <__ieee754_pow+0xa2c>)
 800c0b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c0ba:	4116      	asrs	r6, r2
 800c0bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	ea23 0106 	bic.w	r1, r3, r6
 800c0c6:	f1c2 0214 	rsb	r2, r2, #20
 800c0ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c0ce:	fa4a fa02 	asr.w	sl, sl, r2
 800c0d2:	f1bb 0f00 	cmp.w	fp, #0
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4620      	mov	r0, r4
 800c0dc:	4629      	mov	r1, r5
 800c0de:	bfb8      	it	lt
 800c0e0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c0e4:	f7f4 f8c8 	bl	8000278 <__aeabi_dsub>
 800c0e8:	ec41 0b19 	vmov	d9, r0, r1
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	464b      	mov	r3, r9
 800c0f0:	ec51 0b19 	vmov	r0, r1, d9
 800c0f4:	f7f4 f8c2 	bl	800027c <__adddf3>
 800c0f8:	2400      	movs	r4, #0
 800c0fa:	a379      	add	r3, pc, #484	; (adr r3, 800c2e0 <__ieee754_pow+0x9e0>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	4620      	mov	r0, r4
 800c102:	460d      	mov	r5, r1
 800c104:	f7f4 fa70 	bl	80005e8 <__aeabi_dmul>
 800c108:	ec53 2b19 	vmov	r2, r3, d9
 800c10c:	4606      	mov	r6, r0
 800c10e:	460f      	mov	r7, r1
 800c110:	4620      	mov	r0, r4
 800c112:	4629      	mov	r1, r5
 800c114:	f7f4 f8b0 	bl	8000278 <__aeabi_dsub>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4640      	mov	r0, r8
 800c11e:	4649      	mov	r1, r9
 800c120:	f7f4 f8aa 	bl	8000278 <__aeabi_dsub>
 800c124:	a370      	add	r3, pc, #448	; (adr r3, 800c2e8 <__ieee754_pow+0x9e8>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f7f4 fa5d 	bl	80005e8 <__aeabi_dmul>
 800c12e:	a370      	add	r3, pc, #448	; (adr r3, 800c2f0 <__ieee754_pow+0x9f0>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	4680      	mov	r8, r0
 800c136:	4689      	mov	r9, r1
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7f4 fa54 	bl	80005e8 <__aeabi_dmul>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	4640      	mov	r0, r8
 800c146:	4649      	mov	r1, r9
 800c148:	f7f4 f898 	bl	800027c <__adddf3>
 800c14c:	4604      	mov	r4, r0
 800c14e:	460d      	mov	r5, r1
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4630      	mov	r0, r6
 800c156:	4639      	mov	r1, r7
 800c158:	f7f4 f890 	bl	800027c <__adddf3>
 800c15c:	4632      	mov	r2, r6
 800c15e:	463b      	mov	r3, r7
 800c160:	4680      	mov	r8, r0
 800c162:	4689      	mov	r9, r1
 800c164:	f7f4 f888 	bl	8000278 <__aeabi_dsub>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4620      	mov	r0, r4
 800c16e:	4629      	mov	r1, r5
 800c170:	f7f4 f882 	bl	8000278 <__aeabi_dsub>
 800c174:	4642      	mov	r2, r8
 800c176:	4606      	mov	r6, r0
 800c178:	460f      	mov	r7, r1
 800c17a:	464b      	mov	r3, r9
 800c17c:	4640      	mov	r0, r8
 800c17e:	4649      	mov	r1, r9
 800c180:	f7f4 fa32 	bl	80005e8 <__aeabi_dmul>
 800c184:	a35c      	add	r3, pc, #368	; (adr r3, 800c2f8 <__ieee754_pow+0x9f8>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	4604      	mov	r4, r0
 800c18c:	460d      	mov	r5, r1
 800c18e:	f7f4 fa2b 	bl	80005e8 <__aeabi_dmul>
 800c192:	a35b      	add	r3, pc, #364	; (adr r3, 800c300 <__ieee754_pow+0xa00>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f7f4 f86e 	bl	8000278 <__aeabi_dsub>
 800c19c:	4622      	mov	r2, r4
 800c19e:	462b      	mov	r3, r5
 800c1a0:	f7f4 fa22 	bl	80005e8 <__aeabi_dmul>
 800c1a4:	a358      	add	r3, pc, #352	; (adr r3, 800c308 <__ieee754_pow+0xa08>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f7f4 f867 	bl	800027c <__adddf3>
 800c1ae:	4622      	mov	r2, r4
 800c1b0:	462b      	mov	r3, r5
 800c1b2:	f7f4 fa19 	bl	80005e8 <__aeabi_dmul>
 800c1b6:	a356      	add	r3, pc, #344	; (adr r3, 800c310 <__ieee754_pow+0xa10>)
 800c1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1bc:	f7f4 f85c 	bl	8000278 <__aeabi_dsub>
 800c1c0:	4622      	mov	r2, r4
 800c1c2:	462b      	mov	r3, r5
 800c1c4:	f7f4 fa10 	bl	80005e8 <__aeabi_dmul>
 800c1c8:	a353      	add	r3, pc, #332	; (adr r3, 800c318 <__ieee754_pow+0xa18>)
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	f7f4 f855 	bl	800027c <__adddf3>
 800c1d2:	4622      	mov	r2, r4
 800c1d4:	462b      	mov	r3, r5
 800c1d6:	f7f4 fa07 	bl	80005e8 <__aeabi_dmul>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4640      	mov	r0, r8
 800c1e0:	4649      	mov	r1, r9
 800c1e2:	f7f4 f849 	bl	8000278 <__aeabi_dsub>
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	460d      	mov	r5, r1
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4640      	mov	r0, r8
 800c1f0:	4649      	mov	r1, r9
 800c1f2:	f7f4 f9f9 	bl	80005e8 <__aeabi_dmul>
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	ec41 0b19 	vmov	d9, r0, r1
 800c1fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c200:	4620      	mov	r0, r4
 800c202:	4629      	mov	r1, r5
 800c204:	f7f4 f838 	bl	8000278 <__aeabi_dsub>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	ec51 0b19 	vmov	r0, r1, d9
 800c210:	f7f4 fb14 	bl	800083c <__aeabi_ddiv>
 800c214:	4632      	mov	r2, r6
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
 800c21a:	463b      	mov	r3, r7
 800c21c:	4640      	mov	r0, r8
 800c21e:	4649      	mov	r1, r9
 800c220:	f7f4 f9e2 	bl	80005e8 <__aeabi_dmul>
 800c224:	4632      	mov	r2, r6
 800c226:	463b      	mov	r3, r7
 800c228:	f7f4 f828 	bl	800027c <__adddf3>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	4620      	mov	r0, r4
 800c232:	4629      	mov	r1, r5
 800c234:	f7f4 f820 	bl	8000278 <__aeabi_dsub>
 800c238:	4642      	mov	r2, r8
 800c23a:	464b      	mov	r3, r9
 800c23c:	f7f4 f81c 	bl	8000278 <__aeabi_dsub>
 800c240:	460b      	mov	r3, r1
 800c242:	4602      	mov	r2, r0
 800c244:	493a      	ldr	r1, [pc, #232]	; (800c330 <__ieee754_pow+0xa30>)
 800c246:	2000      	movs	r0, #0
 800c248:	f7f4 f816 	bl	8000278 <__aeabi_dsub>
 800c24c:	e9cd 0100 	strd	r0, r1, [sp]
 800c250:	9b01      	ldr	r3, [sp, #4]
 800c252:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c25a:	da2f      	bge.n	800c2bc <__ieee754_pow+0x9bc>
 800c25c:	4650      	mov	r0, sl
 800c25e:	ed9d 0b00 	vldr	d0, [sp]
 800c262:	f000 f9cd 	bl	800c600 <scalbn>
 800c266:	ec51 0b10 	vmov	r0, r1, d0
 800c26a:	ec53 2b18 	vmov	r2, r3, d8
 800c26e:	f7ff bbe0 	b.w	800ba32 <__ieee754_pow+0x132>
 800c272:	4b30      	ldr	r3, [pc, #192]	; (800c334 <__ieee754_pow+0xa34>)
 800c274:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c278:	429e      	cmp	r6, r3
 800c27a:	f77f af0b 	ble.w	800c094 <__ieee754_pow+0x794>
 800c27e:	4b2e      	ldr	r3, [pc, #184]	; (800c338 <__ieee754_pow+0xa38>)
 800c280:	440b      	add	r3, r1
 800c282:	4303      	orrs	r3, r0
 800c284:	d00b      	beq.n	800c29e <__ieee754_pow+0x99e>
 800c286:	a326      	add	r3, pc, #152	; (adr r3, 800c320 <__ieee754_pow+0xa20>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	ec51 0b18 	vmov	r0, r1, d8
 800c290:	f7f4 f9aa 	bl	80005e8 <__aeabi_dmul>
 800c294:	a322      	add	r3, pc, #136	; (adr r3, 800c320 <__ieee754_pow+0xa20>)
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	f7ff bbca 	b.w	800ba32 <__ieee754_pow+0x132>
 800c29e:	4622      	mov	r2, r4
 800c2a0:	462b      	mov	r3, r5
 800c2a2:	f7f3 ffe9 	bl	8000278 <__aeabi_dsub>
 800c2a6:	4642      	mov	r2, r8
 800c2a8:	464b      	mov	r3, r9
 800c2aa:	f7f4 fc23 	bl	8000af4 <__aeabi_dcmpge>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	f43f aef0 	beq.w	800c094 <__ieee754_pow+0x794>
 800c2b4:	e7e7      	b.n	800c286 <__ieee754_pow+0x986>
 800c2b6:	f04f 0a00 	mov.w	sl, #0
 800c2ba:	e717      	b.n	800c0ec <__ieee754_pow+0x7ec>
 800c2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	e7d2      	b.n	800c26a <__ieee754_pow+0x96a>
 800c2c4:	491a      	ldr	r1, [pc, #104]	; (800c330 <__ieee754_pow+0xa30>)
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	f7ff bb9e 	b.w	800ba08 <__ieee754_pow+0x108>
 800c2cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2d0:	f7ff bb9a 	b.w	800ba08 <__ieee754_pow+0x108>
 800c2d4:	9000      	str	r0, [sp, #0]
 800c2d6:	f7ff bb76 	b.w	800b9c6 <__ieee754_pow+0xc6>
 800c2da:	2100      	movs	r1, #0
 800c2dc:	f7ff bb60 	b.w	800b9a0 <__ieee754_pow+0xa0>
 800c2e0:	00000000 	.word	0x00000000
 800c2e4:	3fe62e43 	.word	0x3fe62e43
 800c2e8:	fefa39ef 	.word	0xfefa39ef
 800c2ec:	3fe62e42 	.word	0x3fe62e42
 800c2f0:	0ca86c39 	.word	0x0ca86c39
 800c2f4:	be205c61 	.word	0xbe205c61
 800c2f8:	72bea4d0 	.word	0x72bea4d0
 800c2fc:	3e663769 	.word	0x3e663769
 800c300:	c5d26bf1 	.word	0xc5d26bf1
 800c304:	3ebbbd41 	.word	0x3ebbbd41
 800c308:	af25de2c 	.word	0xaf25de2c
 800c30c:	3f11566a 	.word	0x3f11566a
 800c310:	16bebd93 	.word	0x16bebd93
 800c314:	3f66c16c 	.word	0x3f66c16c
 800c318:	5555553e 	.word	0x5555553e
 800c31c:	3fc55555 	.word	0x3fc55555
 800c320:	c2f8f359 	.word	0xc2f8f359
 800c324:	01a56e1f 	.word	0x01a56e1f
 800c328:	3fe00000 	.word	0x3fe00000
 800c32c:	000fffff 	.word	0x000fffff
 800c330:	3ff00000 	.word	0x3ff00000
 800c334:	4090cbff 	.word	0x4090cbff
 800c338:	3f6f3400 	.word	0x3f6f3400
 800c33c:	652b82fe 	.word	0x652b82fe
 800c340:	3c971547 	.word	0x3c971547

0800c344 <__ieee754_sqrt>:
 800c344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c348:	ec55 4b10 	vmov	r4, r5, d0
 800c34c:	4e56      	ldr	r6, [pc, #344]	; (800c4a8 <__ieee754_sqrt+0x164>)
 800c34e:	43ae      	bics	r6, r5
 800c350:	ee10 0a10 	vmov	r0, s0
 800c354:	ee10 3a10 	vmov	r3, s0
 800c358:	4629      	mov	r1, r5
 800c35a:	462a      	mov	r2, r5
 800c35c:	d110      	bne.n	800c380 <__ieee754_sqrt+0x3c>
 800c35e:	ee10 2a10 	vmov	r2, s0
 800c362:	462b      	mov	r3, r5
 800c364:	f7f4 f940 	bl	80005e8 <__aeabi_dmul>
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	4620      	mov	r0, r4
 800c36e:	4629      	mov	r1, r5
 800c370:	f7f3 ff84 	bl	800027c <__adddf3>
 800c374:	4604      	mov	r4, r0
 800c376:	460d      	mov	r5, r1
 800c378:	ec45 4b10 	vmov	d0, r4, r5
 800c37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c380:	2d00      	cmp	r5, #0
 800c382:	dc10      	bgt.n	800c3a6 <__ieee754_sqrt+0x62>
 800c384:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c388:	4330      	orrs	r0, r6
 800c38a:	d0f5      	beq.n	800c378 <__ieee754_sqrt+0x34>
 800c38c:	b15d      	cbz	r5, 800c3a6 <__ieee754_sqrt+0x62>
 800c38e:	ee10 2a10 	vmov	r2, s0
 800c392:	462b      	mov	r3, r5
 800c394:	ee10 0a10 	vmov	r0, s0
 800c398:	f7f3 ff6e 	bl	8000278 <__aeabi_dsub>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	f7f4 fa4c 	bl	800083c <__aeabi_ddiv>
 800c3a4:	e7e6      	b.n	800c374 <__ieee754_sqrt+0x30>
 800c3a6:	1509      	asrs	r1, r1, #20
 800c3a8:	d076      	beq.n	800c498 <__ieee754_sqrt+0x154>
 800c3aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c3ae:	07ce      	lsls	r6, r1, #31
 800c3b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c3b4:	bf5e      	ittt	pl
 800c3b6:	0fda      	lsrpl	r2, r3, #31
 800c3b8:	005b      	lslpl	r3, r3, #1
 800c3ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c3be:	0fda      	lsrs	r2, r3, #31
 800c3c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c3c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	106d      	asrs	r5, r5, #1
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	f04f 0e16 	mov.w	lr, #22
 800c3d2:	4684      	mov	ip, r0
 800c3d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3d8:	eb0c 0401 	add.w	r4, ip, r1
 800c3dc:	4294      	cmp	r4, r2
 800c3de:	bfde      	ittt	le
 800c3e0:	1b12      	suble	r2, r2, r4
 800c3e2:	eb04 0c01 	addle.w	ip, r4, r1
 800c3e6:	1840      	addle	r0, r0, r1
 800c3e8:	0052      	lsls	r2, r2, #1
 800c3ea:	f1be 0e01 	subs.w	lr, lr, #1
 800c3ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c3f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c3f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c3fa:	d1ed      	bne.n	800c3d8 <__ieee754_sqrt+0x94>
 800c3fc:	4671      	mov	r1, lr
 800c3fe:	2720      	movs	r7, #32
 800c400:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c404:	4562      	cmp	r2, ip
 800c406:	eb04 060e 	add.w	r6, r4, lr
 800c40a:	dc02      	bgt.n	800c412 <__ieee754_sqrt+0xce>
 800c40c:	d113      	bne.n	800c436 <__ieee754_sqrt+0xf2>
 800c40e:	429e      	cmp	r6, r3
 800c410:	d811      	bhi.n	800c436 <__ieee754_sqrt+0xf2>
 800c412:	2e00      	cmp	r6, #0
 800c414:	eb06 0e04 	add.w	lr, r6, r4
 800c418:	da43      	bge.n	800c4a2 <__ieee754_sqrt+0x15e>
 800c41a:	f1be 0f00 	cmp.w	lr, #0
 800c41e:	db40      	blt.n	800c4a2 <__ieee754_sqrt+0x15e>
 800c420:	f10c 0801 	add.w	r8, ip, #1
 800c424:	eba2 020c 	sub.w	r2, r2, ip
 800c428:	429e      	cmp	r6, r3
 800c42a:	bf88      	it	hi
 800c42c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c430:	1b9b      	subs	r3, r3, r6
 800c432:	4421      	add	r1, r4
 800c434:	46c4      	mov	ip, r8
 800c436:	0052      	lsls	r2, r2, #1
 800c438:	3f01      	subs	r7, #1
 800c43a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c43e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c442:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c446:	d1dd      	bne.n	800c404 <__ieee754_sqrt+0xc0>
 800c448:	4313      	orrs	r3, r2
 800c44a:	d006      	beq.n	800c45a <__ieee754_sqrt+0x116>
 800c44c:	1c4c      	adds	r4, r1, #1
 800c44e:	bf13      	iteet	ne
 800c450:	3101      	addne	r1, #1
 800c452:	3001      	addeq	r0, #1
 800c454:	4639      	moveq	r1, r7
 800c456:	f021 0101 	bicne.w	r1, r1, #1
 800c45a:	1043      	asrs	r3, r0, #1
 800c45c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c460:	0849      	lsrs	r1, r1, #1
 800c462:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c466:	07c2      	lsls	r2, r0, #31
 800c468:	bf48      	it	mi
 800c46a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c46e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c472:	460c      	mov	r4, r1
 800c474:	463d      	mov	r5, r7
 800c476:	e77f      	b.n	800c378 <__ieee754_sqrt+0x34>
 800c478:	0ada      	lsrs	r2, r3, #11
 800c47a:	3815      	subs	r0, #21
 800c47c:	055b      	lsls	r3, r3, #21
 800c47e:	2a00      	cmp	r2, #0
 800c480:	d0fa      	beq.n	800c478 <__ieee754_sqrt+0x134>
 800c482:	02d7      	lsls	r7, r2, #11
 800c484:	d50a      	bpl.n	800c49c <__ieee754_sqrt+0x158>
 800c486:	f1c1 0420 	rsb	r4, r1, #32
 800c48a:	fa23 f404 	lsr.w	r4, r3, r4
 800c48e:	1e4d      	subs	r5, r1, #1
 800c490:	408b      	lsls	r3, r1
 800c492:	4322      	orrs	r2, r4
 800c494:	1b41      	subs	r1, r0, r5
 800c496:	e788      	b.n	800c3aa <__ieee754_sqrt+0x66>
 800c498:	4608      	mov	r0, r1
 800c49a:	e7f0      	b.n	800c47e <__ieee754_sqrt+0x13a>
 800c49c:	0052      	lsls	r2, r2, #1
 800c49e:	3101      	adds	r1, #1
 800c4a0:	e7ef      	b.n	800c482 <__ieee754_sqrt+0x13e>
 800c4a2:	46e0      	mov	r8, ip
 800c4a4:	e7be      	b.n	800c424 <__ieee754_sqrt+0xe0>
 800c4a6:	bf00      	nop
 800c4a8:	7ff00000 	.word	0x7ff00000

0800c4ac <fabs>:
 800c4ac:	ec51 0b10 	vmov	r0, r1, d0
 800c4b0:	ee10 2a10 	vmov	r2, s0
 800c4b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4b8:	ec43 2b10 	vmov	d0, r2, r3
 800c4bc:	4770      	bx	lr

0800c4be <finite>:
 800c4be:	b082      	sub	sp, #8
 800c4c0:	ed8d 0b00 	vstr	d0, [sp]
 800c4c4:	9801      	ldr	r0, [sp, #4]
 800c4c6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c4ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c4ce:	0fc0      	lsrs	r0, r0, #31
 800c4d0:	b002      	add	sp, #8
 800c4d2:	4770      	bx	lr
 800c4d4:	0000      	movs	r0, r0
	...

0800c4d8 <nan>:
 800c4d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c4e0 <nan+0x8>
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	00000000 	.word	0x00000000
 800c4e4:	7ff80000 	.word	0x7ff80000

0800c4e8 <rint>:
 800c4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4ea:	ec51 0b10 	vmov	r0, r1, d0
 800c4ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c4f6:	2e13      	cmp	r6, #19
 800c4f8:	ee10 4a10 	vmov	r4, s0
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c502:	dc58      	bgt.n	800c5b6 <rint+0xce>
 800c504:	2e00      	cmp	r6, #0
 800c506:	da2b      	bge.n	800c560 <rint+0x78>
 800c508:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c50c:	4302      	orrs	r2, r0
 800c50e:	d023      	beq.n	800c558 <rint+0x70>
 800c510:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c514:	4302      	orrs	r2, r0
 800c516:	4254      	negs	r4, r2
 800c518:	4314      	orrs	r4, r2
 800c51a:	0c4b      	lsrs	r3, r1, #17
 800c51c:	0b24      	lsrs	r4, r4, #12
 800c51e:	045b      	lsls	r3, r3, #17
 800c520:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c524:	ea44 0103 	orr.w	r1, r4, r3
 800c528:	4b32      	ldr	r3, [pc, #200]	; (800c5f4 <rint+0x10c>)
 800c52a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c52e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4630      	mov	r0, r6
 800c538:	4639      	mov	r1, r7
 800c53a:	f7f3 fe9f 	bl	800027c <__adddf3>
 800c53e:	e9cd 0100 	strd	r0, r1, [sp]
 800c542:	463b      	mov	r3, r7
 800c544:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c548:	4632      	mov	r2, r6
 800c54a:	f7f3 fe95 	bl	8000278 <__aeabi_dsub>
 800c54e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c552:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c556:	4639      	mov	r1, r7
 800c558:	ec41 0b10 	vmov	d0, r0, r1
 800c55c:	b003      	add	sp, #12
 800c55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c560:	4a25      	ldr	r2, [pc, #148]	; (800c5f8 <rint+0x110>)
 800c562:	4132      	asrs	r2, r6
 800c564:	ea01 0702 	and.w	r7, r1, r2
 800c568:	4307      	orrs	r7, r0
 800c56a:	d0f5      	beq.n	800c558 <rint+0x70>
 800c56c:	0851      	lsrs	r1, r2, #1
 800c56e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c572:	4314      	orrs	r4, r2
 800c574:	d00c      	beq.n	800c590 <rint+0xa8>
 800c576:	ea23 0201 	bic.w	r2, r3, r1
 800c57a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c57e:	2e13      	cmp	r6, #19
 800c580:	fa43 f606 	asr.w	r6, r3, r6
 800c584:	bf0c      	ite	eq
 800c586:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c58a:	2400      	movne	r4, #0
 800c58c:	ea42 0306 	orr.w	r3, r2, r6
 800c590:	4918      	ldr	r1, [pc, #96]	; (800c5f4 <rint+0x10c>)
 800c592:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c596:	4622      	mov	r2, r4
 800c598:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c59c:	4620      	mov	r0, r4
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f7f3 fe6c 	bl	800027c <__adddf3>
 800c5a4:	e9cd 0100 	strd	r0, r1, [sp]
 800c5a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	462b      	mov	r3, r5
 800c5b0:	f7f3 fe62 	bl	8000278 <__aeabi_dsub>
 800c5b4:	e7d0      	b.n	800c558 <rint+0x70>
 800c5b6:	2e33      	cmp	r6, #51	; 0x33
 800c5b8:	dd07      	ble.n	800c5ca <rint+0xe2>
 800c5ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c5be:	d1cb      	bne.n	800c558 <rint+0x70>
 800c5c0:	ee10 2a10 	vmov	r2, s0
 800c5c4:	f7f3 fe5a 	bl	800027c <__adddf3>
 800c5c8:	e7c6      	b.n	800c558 <rint+0x70>
 800c5ca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c5ce:	f04f 36ff 	mov.w	r6, #4294967295
 800c5d2:	40d6      	lsrs	r6, r2
 800c5d4:	4230      	tst	r0, r6
 800c5d6:	d0bf      	beq.n	800c558 <rint+0x70>
 800c5d8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c5dc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c5e0:	bf1f      	itttt	ne
 800c5e2:	ea24 0101 	bicne.w	r1, r4, r1
 800c5e6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c5ea:	fa44 f202 	asrne.w	r2, r4, r2
 800c5ee:	ea41 0402 	orrne.w	r4, r1, r2
 800c5f2:	e7cd      	b.n	800c590 <rint+0xa8>
 800c5f4:	080f09c8 	.word	0x080f09c8
 800c5f8:	000fffff 	.word	0x000fffff
 800c5fc:	00000000 	.word	0x00000000

0800c600 <scalbn>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	ec55 4b10 	vmov	r4, r5, d0
 800c606:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c60a:	4606      	mov	r6, r0
 800c60c:	462b      	mov	r3, r5
 800c60e:	b99a      	cbnz	r2, 800c638 <scalbn+0x38>
 800c610:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c614:	4323      	orrs	r3, r4
 800c616:	d036      	beq.n	800c686 <scalbn+0x86>
 800c618:	4b39      	ldr	r3, [pc, #228]	; (800c700 <scalbn+0x100>)
 800c61a:	4629      	mov	r1, r5
 800c61c:	ee10 0a10 	vmov	r0, s0
 800c620:	2200      	movs	r2, #0
 800c622:	f7f3 ffe1 	bl	80005e8 <__aeabi_dmul>
 800c626:	4b37      	ldr	r3, [pc, #220]	; (800c704 <scalbn+0x104>)
 800c628:	429e      	cmp	r6, r3
 800c62a:	4604      	mov	r4, r0
 800c62c:	460d      	mov	r5, r1
 800c62e:	da10      	bge.n	800c652 <scalbn+0x52>
 800c630:	a32b      	add	r3, pc, #172	; (adr r3, 800c6e0 <scalbn+0xe0>)
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	e03a      	b.n	800c6ae <scalbn+0xae>
 800c638:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c63c:	428a      	cmp	r2, r1
 800c63e:	d10c      	bne.n	800c65a <scalbn+0x5a>
 800c640:	ee10 2a10 	vmov	r2, s0
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f7f3 fe18 	bl	800027c <__adddf3>
 800c64c:	4604      	mov	r4, r0
 800c64e:	460d      	mov	r5, r1
 800c650:	e019      	b.n	800c686 <scalbn+0x86>
 800c652:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c656:	460b      	mov	r3, r1
 800c658:	3a36      	subs	r2, #54	; 0x36
 800c65a:	4432      	add	r2, r6
 800c65c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c660:	428a      	cmp	r2, r1
 800c662:	dd08      	ble.n	800c676 <scalbn+0x76>
 800c664:	2d00      	cmp	r5, #0
 800c666:	a120      	add	r1, pc, #128	; (adr r1, 800c6e8 <scalbn+0xe8>)
 800c668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c66c:	da1c      	bge.n	800c6a8 <scalbn+0xa8>
 800c66e:	a120      	add	r1, pc, #128	; (adr r1, 800c6f0 <scalbn+0xf0>)
 800c670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c674:	e018      	b.n	800c6a8 <scalbn+0xa8>
 800c676:	2a00      	cmp	r2, #0
 800c678:	dd08      	ble.n	800c68c <scalbn+0x8c>
 800c67a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c67e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c682:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c686:	ec45 4b10 	vmov	d0, r4, r5
 800c68a:	bd70      	pop	{r4, r5, r6, pc}
 800c68c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c690:	da19      	bge.n	800c6c6 <scalbn+0xc6>
 800c692:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c696:	429e      	cmp	r6, r3
 800c698:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c69c:	dd0a      	ble.n	800c6b4 <scalbn+0xb4>
 800c69e:	a112      	add	r1, pc, #72	; (adr r1, 800c6e8 <scalbn+0xe8>)
 800c6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1e2      	bne.n	800c66e <scalbn+0x6e>
 800c6a8:	a30f      	add	r3, pc, #60	; (adr r3, 800c6e8 <scalbn+0xe8>)
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	f7f3 ff9b 	bl	80005e8 <__aeabi_dmul>
 800c6b2:	e7cb      	b.n	800c64c <scalbn+0x4c>
 800c6b4:	a10a      	add	r1, pc, #40	; (adr r1, 800c6e0 <scalbn+0xe0>)
 800c6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0b8      	beq.n	800c630 <scalbn+0x30>
 800c6be:	a10e      	add	r1, pc, #56	; (adr r1, 800c6f8 <scalbn+0xf8>)
 800c6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6c4:	e7b4      	b.n	800c630 <scalbn+0x30>
 800c6c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6ca:	3236      	adds	r2, #54	; 0x36
 800c6cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <scalbn+0x108>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	e7e8      	b.n	800c6ae <scalbn+0xae>
 800c6dc:	f3af 8000 	nop.w
 800c6e0:	c2f8f359 	.word	0xc2f8f359
 800c6e4:	01a56e1f 	.word	0x01a56e1f
 800c6e8:	8800759c 	.word	0x8800759c
 800c6ec:	7e37e43c 	.word	0x7e37e43c
 800c6f0:	8800759c 	.word	0x8800759c
 800c6f4:	fe37e43c 	.word	0xfe37e43c
 800c6f8:	c2f8f359 	.word	0xc2f8f359
 800c6fc:	81a56e1f 	.word	0x81a56e1f
 800c700:	43500000 	.word	0x43500000
 800c704:	ffff3cb0 	.word	0xffff3cb0
 800c708:	3c900000 	.word	0x3c900000

0800c70c <_init>:
 800c70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70e:	bf00      	nop
 800c710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c712:	bc08      	pop	{r3}
 800c714:	469e      	mov	lr, r3
 800c716:	4770      	bx	lr

0800c718 <_fini>:
 800c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71a:	bf00      	nop
 800c71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c71e:	bc08      	pop	{r3}
 800c720:	469e      	mov	lr, r3
 800c722:	4770      	bx	lr
