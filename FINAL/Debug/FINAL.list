
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e42a8  0800d150  0800d150  0001d150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080f13f8  080f13f8  001100d0  2**0
                  CONTENTS
  4 .ARM          00000008  080f13f8  080f13f8  001013f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080f1400  080f1400  001100d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080f1400  080f1400  00101400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080f1404  080f1404  00101404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080f1408  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  001100d0  2**0
                  CONTENTS
 10 .bss          00000768  200000d0  200000d0  001100d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000838  20000838  001100d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  001100d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026e21  00000000  00000000  00110100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005049  00000000  00000000  00136f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  0013bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017a8  00000000  00000000  0013d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f4b  00000000  00000000  0013f100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023c70  00000000  00000000  0016804b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2270  00000000  00000000  0018bcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0026df2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076ac  00000000  00000000  0026df80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d134 	.word	0x0800d134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800d134 	.word	0x0800d134

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f84:	4a3d      	ldr	r2, [pc, #244]	; (800107c <MX_ADC1_Init+0x10c>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <MX_ADC1_Init+0x108>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fb0:	4a33      	ldr	r2, [pc, #204]	; (8001080 <MX_ADC1_Init+0x110>)
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fce:	482a      	ldr	r0, [pc, #168]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fd0:	f004 fcf2 	bl	80059b8 <HAL_ADC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f002 fd51 	bl	8003a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4822      	ldr	r0, [pc, #136]	; (8001078 <MX_ADC1_Init+0x108>)
 8000ff0:	f004 fd26 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ffa:	f002 fd41 	bl	8003a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ffe:	2309      	movs	r3, #9
 8001000:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <MX_ADC1_Init+0x108>)
 800100c:	f004 fd18 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001016:	f002 fd33 	bl	8003a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800101e:	2303      	movs	r3, #3
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_ADC1_Init+0x108>)
 8001028:	f004 fd0a 	bl	8005a40 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001032:	f002 fd25 	bl	8003a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001036:	230b      	movs	r3, #11
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800103a:	2304      	movs	r3, #4
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_ADC1_Init+0x108>)
 8001044:	f004 fcfc 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800104e:	f002 fd17 	bl	8003a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001052:	230c      	movs	r3, #12
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001056:	2305      	movs	r3, #5
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC1_Init+0x108>)
 8001060:	f004 fcee 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800106a:	f002 fd09 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000138 	.word	0x20000138
 800107c:	40012000 	.word	0x40012000
 8001080:	0f000001 	.word	0x0f000001

08001084 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	at24c_Check();
 8001088:	f000 f83c 	bl	8001104 <at24c_Check>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	230a      	movs	r3, #10
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	2301      	movs	r3, #1
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	f107 030f 	add.w	r3, r7, #15
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2310      	movs	r3, #16
 80010b0:	21a0      	movs	r1, #160	; 0xa0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <at24c_ReadOneByte+0x34>)
 80010b4:	f005 ff96 	bl	8006fe4 <HAL_I2C_Mem_Read>
	return temp;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000057c 	.word	0x2000057c

080010c8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	80fb      	strh	r3, [r7, #6]
 80010d4:	4613      	mov	r3, r2
 80010d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80010d8:	88fa      	ldrh	r2, [r7, #6]
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1d7b      	adds	r3, r7, #5
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2310      	movs	r3, #16
 80010e8:	21a0      	movs	r1, #160	; 0xa0
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <at24c_WriteOneByte+0x38>)
 80010ec:	f005 fe80 	bl	8006df0 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80010f0:	2005      	movs	r0, #5
 80010f2:	f004 fc3d 	bl	8005970 <HAL_Delay>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000057c 	.word	0x2000057c

08001104 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800110a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800110e:	f7ff ffbf 	bl	8001090 <at24c_ReadOneByte>
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b55      	cmp	r3, #85	; 0x55
 800111a:	d101      	bne.n	8001120 <at24c_Check+0x1c>
 800111c:	2300      	movs	r3, #0
 800111e:	e010      	b.n	8001142 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001120:	2155      	movs	r1, #85	; 0x55
 8001122:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001126:	f7ff ffcf 	bl	80010c8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800112a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800112e:	f7ff ffaf 	bl	8001090 <at24c_ReadOneByte>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b55      	cmp	r3, #85	; 0x55
 800113a:	d101      	bne.n	8001140 <at24c_Check+0x3c>
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <at24c_Check+0x3e>
	}
	return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	80fb      	strh	r3, [r7, #6]
 8001156:	4613      	mov	r3, r2
 8001158:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800115a:	e00d      	b.n	8001178 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	80fa      	strh	r2, [r7, #6]
 8001162:	683c      	ldr	r4, [r7, #0]
 8001164:	1c62      	adds	r2, r4, #1
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff91 	bl	8001090 <at24c_ReadOneByte>
 800116e:	4603      	mov	r3, r0
 8001170:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	3b01      	subs	r3, #1
 8001176:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1ee      	bne.n	800115c <at24c_Read+0x12>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001198:	e00c      	b.n	80011b4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff90 	bl	80010c8 <at24c_WriteOneByte>
		WriteAddr++;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	3301      	adds	r3, #1
 80011ac:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	80ba      	strh	r2, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ed      	bne.n	800119a <at24c_Write+0x12>
	}
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2108      	movs	r1, #8
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <button_init+0x14>)
 80011d2:	f005 fc95 	bl	8006b00 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	482f      	ldr	r0, [pc, #188]	; (80012a8 <button_Scan+0xc8>)
 80011ec:	f005 fc88 	bl	8006b00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2108      	movs	r1, #8
 80011f4:	482c      	ldr	r0, [pc, #176]	; (80012a8 <button_Scan+0xc8>)
 80011f6:	f005 fc83 	bl	8006b00 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80011fa:	230a      	movs	r3, #10
 80011fc:	2202      	movs	r2, #2
 80011fe:	492b      	ldr	r1, [pc, #172]	; (80012ac <button_Scan+0xcc>)
 8001200:	482b      	ldr	r0, [pc, #172]	; (80012b0 <button_Scan+0xd0>)
 8001202:	f007 faaa 	bl	800875a <HAL_SPI_Receive>
	  int button_index = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800120a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	e03f      	b.n	8001296 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db06      	blt.n	800122a <button_Scan+0x4a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b03      	cmp	r3, #3
 8001220:	dc03      	bgt.n	800122a <button_Scan+0x4a>
			  button_index = i + 4;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3304      	adds	r3, #4
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e018      	b.n	800125c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b03      	cmp	r3, #3
 800122e:	dd07      	ble.n	8001240 <button_Scan+0x60>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b07      	cmp	r3, #7
 8001234:	dc04      	bgt.n	8001240 <button_Scan+0x60>
			  button_index = 7 - i;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f1c3 0307 	rsb	r3, r3, #7
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	e00d      	b.n	800125c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b07      	cmp	r3, #7
 8001244:	dd06      	ble.n	8001254 <button_Scan+0x74>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0b      	cmp	r3, #11
 800124a:	dc03      	bgt.n	8001254 <button_Scan+0x74>
			  button_index = i + 4;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3304      	adds	r3, #4
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e003      	b.n	800125c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f1c3 0317 	rsb	r3, r3, #23
 800125a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <button_Scan+0xcc>)
 800125e:	881a      	ldrh	r2, [r3, #0]
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	4013      	ands	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <button_Scan+0x96>
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <button_Scan+0xd4>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2100      	movs	r1, #0
 8001270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001274:	e009      	b.n	800128a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <button_Scan+0xd4>)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127e:	3301      	adds	r3, #1
 8001280:	b299      	uxth	r1, r3
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <button_Scan+0xd4>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	ddbc      	ble.n	8001216 <button_Scan+0x36>
	  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	200000ec 	.word	0x200000ec
 80012b0:	2000066c 	.word	0x2000066c
 80012b4:	20000180 	.word	0x20000180

080012b8 <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2038      	movs	r0, #56	; 0x38
 80012e0:	f004 fea7 	bl	8006032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012e4:	2038      	movs	r0, #56	; 0x38
 80012e6:	f004 fec0 	bl	800606a <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <clr_confirm>:

uint32_t counter = 0;

uint8_t confirm[4] = {0, 0, 0, 0};

void clr_confirm(){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	e007      	b.n	8001314 <clr_confirm+0x1c>
		confirm[i] = 0;
 8001304:	4a08      	ldr	r2, [pc, #32]	; (8001328 <clr_confirm+0x30>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b03      	cmp	r3, #3
 8001318:	ddf4      	ble.n	8001304 <clr_confirm+0xc>
	}
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	200000f4 	.word	0x200000f4

0800132c <temp_game>:

void temp_game(){
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	tempFlag = 1;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <temp_game+0x24>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
	tempStatus = status;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <temp_game+0x28>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <temp_game+0x2c>)
 800133c:	6013      	str	r3, [r2, #0]
	tempMove = move;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <temp_game+0x30>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <temp_game+0x34>)
 8001344:	6013      	str	r3, [r2, #0]
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	20000108 	.word	0x20000108
 8001354:	200000f8 	.word	0x200000f8
 8001358:	2000010c 	.word	0x2000010c
 800135c:	200000fc 	.word	0x200000fc
 8001360:	20000110 	.word	0x20000110

08001364 <continue_game>:

void continue_game(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	if (tempFlag == 1){
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <continue_game+0x30>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d10e      	bne.n	800138e <continue_game+0x2a>
		status = tempStatus;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <continue_game+0x34>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a09      	ldr	r2, [pc, #36]	; (800139c <continue_game+0x38>)
 8001376:	6013      	str	r3, [r2, #0]
		move = tempMove;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <continue_game+0x3c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <continue_game+0x40>)
 800137e:	6013      	str	r3, [r2, #0]
		reDraw_snake();
 8001380:	f002 fd34 	bl	8003dec <reDraw_snake>
		point_food_lcd(food);
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <continue_game+0x44>)
 8001386:	e893 0003 	ldmia.w	r3, {r0, r1}
 800138a:	f001 faec 	bl	8002966 <point_food_lcd>
	}
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000108 	.word	0x20000108
 8001398:	2000010c 	.word	0x2000010c
 800139c:	200000f8 	.word	0x200000f8
 80013a0:	20000110 	.word	0x20000110
 80013a4:	200000fc 	.word	0x200000fc
 80013a8:	2000000c 	.word	0x2000000c

080013ac <input_inGame>:

void input_inGame(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	if (is_touch_right() == 1 && move != LEFT){
 80013b0:	f000 fb7e 	bl	8001ab0 <is_touch_right>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <input_inGame+0x1e>
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <input_inGame+0x90>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d003      	beq.n	80013ca <input_inGame+0x1e>
		move = RIGHT;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <input_inGame+0x90>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e036      	b.n	8001438 <input_inGame+0x8c>
	}
	else if (is_touch_left() == 1 && move != RIGHT){
 80013ca:	f000 fb95 	bl	8001af8 <is_touch_left>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <input_inGame+0x38>
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <input_inGame+0x90>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d003      	beq.n	80013e4 <input_inGame+0x38>
		move = LEFT;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <input_inGame+0x90>)
 80013de:	2202      	movs	r2, #2
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e029      	b.n	8001438 <input_inGame+0x8c>
	}
	else if (is_touch_up() == 1 && move != DOWN){
 80013e4:	f000 fbac 	bl	8001b40 <is_touch_up>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <input_inGame+0x52>
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <input_inGame+0x90>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d003      	beq.n	80013fe <input_inGame+0x52>
		move = UP;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <input_inGame+0x90>)
 80013f8:	2203      	movs	r2, #3
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e01c      	b.n	8001438 <input_inGame+0x8c>
	}
	else if (is_touch_down() == 1 && move != UP){
 80013fe:	f000 fbc1 	bl	8001b84 <is_touch_down>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d107      	bne.n	8001418 <input_inGame+0x6c>
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <input_inGame+0x90>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d003      	beq.n	8001418 <input_inGame+0x6c>
		move = DOWN;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <input_inGame+0x90>)
 8001412:	2204      	movs	r2, #4
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e00f      	b.n	8001438 <input_inGame+0x8c>
	}
	else if (is_touch_pause() == 1){
 8001418:	f000 fc3f 	bl	8001c9a <is_touch_pause>
 800141c:	4603      	mov	r3, r0
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10a      	bne.n	8001438 <input_inGame+0x8c>
		temp_game();
 8001422:	f7ff ff83 	bl	800132c <temp_game>
		status = PAUSE;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <input_inGame+0x94>)
 8001428:	220f      	movs	r2, #15
 800142a:	601a      	str	r2, [r3, #0]
		move = NOT;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <input_inGame+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
		pause_lcd();
 8001432:	f001 f88d 	bl	8002550 <pause_lcd>
	}
}
 8001436:	e7ff      	b.n	8001438 <input_inGame+0x8c>
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000fc 	.word	0x200000fc
 8001440:	200000f8 	.word	0x200000f8

08001444 <input_process>:

void input_process(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	switch (status) {
 8001448:	4bb1      	ldr	r3, [pc, #708]	; (8001710 <input_process+0x2cc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b11      	cmp	r3, #17
 800144e:	f200 8150 	bhi.w	80016f2 <input_process+0x2ae>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <input_process+0x14>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	080014a1 	.word	0x080014a1
 800145c:	08001543 	.word	0x08001543
 8001460:	080016f3 	.word	0x080016f3
 8001464:	08001669 	.word	0x08001669
 8001468:	080016f3 	.word	0x080016f3
 800146c:	080016f3 	.word	0x080016f3
 8001470:	080016f3 	.word	0x080016f3
 8001474:	080016f3 	.word	0x080016f3
 8001478:	080016f3 	.word	0x080016f3
 800147c:	080016f3 	.word	0x080016f3
 8001480:	080016f3 	.word	0x080016f3
 8001484:	0800167f 	.word	0x0800167f
 8001488:	08001685 	.word	0x08001685
 800148c:	0800168b 	.word	0x0800168b
 8001490:	080016f3 	.word	0x080016f3
 8001494:	080016c5 	.word	0x080016c5
 8001498:	08001691 	.word	0x08001691
 800149c:	080016ab 	.word	0x080016ab
		case HOME:
			if (is_touch_newGame() == 1){
 80014a0:	f000 fc1f 	bl	8001ce2 <is_touch_newGame>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d115      	bne.n	80014d6 <input_process+0x92>
				if (confirm[1] == 1){
 80014aa:	4b9a      	ldr	r3, [pc, #616]	; (8001714 <input_process+0x2d0>)
 80014ac:	785b      	ldrb	r3, [r3, #1]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d109      	bne.n	80014c6 <input_process+0x82>
					clr_confirm();
 80014b2:	f7ff ff21 	bl	80012f8 <clr_confirm>
					status = MODE;
 80014b6:	4b96      	ldr	r3, [pc, #600]	; (8001710 <input_process+0x2cc>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
					snake_init();
 80014bc:	f002 fae6 	bl	8003a8c <snake_init>
					mode_game_lcd();
 80014c0:	f000 fe90 	bl	80021e4 <mode_game_lcd>
					confirm[3] = 1;
					home_forth_lcd();
				}

			}
			break;
 80014c4:	e117      	b.n	80016f6 <input_process+0x2b2>
					clr_confirm();
 80014c6:	f7ff ff17 	bl	80012f8 <clr_confirm>
					confirm[1] = 1;
 80014ca:	4b92      	ldr	r3, [pc, #584]	; (8001714 <input_process+0x2d0>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	705a      	strb	r2, [r3, #1]
					home_second_lcd();
 80014d0:	f001 f92c 	bl	800272c <home_second_lcd>
			break;
 80014d4:	e10f      	b.n	80016f6 <input_process+0x2b2>
			else if (is_touch_continue() == 1){
 80014d6:	f000 fcaf 	bl	8001e38 <is_touch_continue>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d116      	bne.n	800150e <input_process+0xca>
				if (confirm[2] == 1 && tempFlag == 1){
 80014e0:	4b8c      	ldr	r3, [pc, #560]	; (8001714 <input_process+0x2d0>)
 80014e2:	789b      	ldrb	r3, [r3, #2]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d10a      	bne.n	80014fe <input_process+0xba>
 80014e8:	4b8b      	ldr	r3, [pc, #556]	; (8001718 <input_process+0x2d4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <input_process+0xba>
					clr_confirm();
 80014f0:	f7ff ff02 	bl	80012f8 <clr_confirm>
					game_lcd();
 80014f4:	f000 ffb0 	bl	8002458 <game_lcd>
					continue_game();
 80014f8:	f7ff ff34 	bl	8001364 <continue_game>
			break;
 80014fc:	e0fb      	b.n	80016f6 <input_process+0x2b2>
					clr_confirm();
 80014fe:	f7ff fefb 	bl	80012f8 <clr_confirm>
					confirm[2] = 1;
 8001502:	4b84      	ldr	r3, [pc, #528]	; (8001714 <input_process+0x2d0>)
 8001504:	2201      	movs	r2, #1
 8001506:	709a      	strb	r2, [r3, #2]
					home_third_lcd();
 8001508:	f001 f928 	bl	800275c <home_third_lcd>
			break;
 800150c:	e0f3      	b.n	80016f6 <input_process+0x2b2>
			else if (is_touch_highScore() == 1){
 800150e:	f000 fc0a 	bl	8001d26 <is_touch_highScore>
 8001512:	4603      	mov	r3, r0
 8001514:	2b01      	cmp	r3, #1
 8001516:	f040 80ee 	bne.w	80016f6 <input_process+0x2b2>
				if (confirm[3] == 1){
 800151a:	4b7e      	ldr	r3, [pc, #504]	; (8001714 <input_process+0x2d0>)
 800151c:	78db      	ldrb	r3, [r3, #3]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <input_process+0xee>
					clr_confirm();
 8001522:	f7ff fee9 	bl	80012f8 <clr_confirm>
					status = HIGHSCORE;
 8001526:	4b7a      	ldr	r3, [pc, #488]	; (8001710 <input_process+0x2cc>)
 8001528:	2203      	movs	r2, #3
 800152a:	601a      	str	r2, [r3, #0]
					highscore_lcd();
 800152c:	f000 fec8 	bl	80022c0 <highscore_lcd>
			break;
 8001530:	e0e1      	b.n	80016f6 <input_process+0x2b2>
					clr_confirm();
 8001532:	f7ff fee1 	bl	80012f8 <clr_confirm>
					confirm[3] = 1;
 8001536:	4b77      	ldr	r3, [pc, #476]	; (8001714 <input_process+0x2d0>)
 8001538:	2201      	movs	r2, #1
 800153a:	70da      	strb	r2, [r3, #3]
					home_forth_lcd();
 800153c:	f001 f926 	bl	800278c <home_forth_lcd>
			break;
 8001540:	e0d9      	b.n	80016f6 <input_process+0x2b2>
		case MODE:
			if (is_touch_classic() == 1){
 8001542:	f000 fc13 	bl	8001d6c <is_touch_classic>
 8001546:	4603      	mov	r3, r0
 8001548:	2b01      	cmp	r3, #1
 800154a:	d122      	bne.n	8001592 <input_process+0x14e>
				if (confirm[0] == 1){
 800154c:	4b71      	ldr	r3, [pc, #452]	; (8001714 <input_process+0x2d0>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d116      	bne.n	8001582 <input_process+0x13e>
					clr_confirm();
 8001554:	f7ff fed0 	bl	80012f8 <clr_confirm>
					status = CLASSIC;
 8001558:	4b6d      	ldr	r3, [pc, #436]	; (8001710 <input_process+0x2cc>)
 800155a:	220b      	movs	r2, #11
 800155c:	601a      	str	r2, [r3, #0]
					setTimer3(500);
 800155e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001562:	f002 fc91 	bl	8003e88 <setTimer3>
					game_lcd();					//hien thi man hinh choi game
 8001566:	f000 ff77 	bl	8002458 <game_lcd>
					mode_7seg();				//ham hien thi che do choi tren led 7seg
 800156a:	f001 fa3b 	bl	80029e4 <mode_7seg>
					reDraw_snake();				//ham goi ve con ran
 800156e:	f002 fc3d 	bl	8003dec <reDraw_snake>
					point_food_lcd(food);
 8001572:	4b6a      	ldr	r3, [pc, #424]	; (800171c <input_process+0x2d8>)
 8001574:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001578:	f001 f9f5 	bl	8002966 <point_food_lcd>
					score_lcd();				//ham diem so
 800157c:	f000 ffd0 	bl	8002520 <score_lcd>
 8001580:	e059      	b.n	8001636 <input_process+0x1f2>
				}
				else {
					clr_confirm();
 8001582:	f7ff feb9 	bl	80012f8 <clr_confirm>
					confirm[0] = 1;
 8001586:	4b63      	ldr	r3, [pc, #396]	; (8001714 <input_process+0x2d0>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
					mode_first_lcd();
 800158c:	f001 f918 	bl	80027c0 <mode_first_lcd>
 8001590:	e051      	b.n	8001636 <input_process+0x1f2>
				}
			}
			else if (is_touch_speed() == 1){
 8001592:	f000 fc0d 	bl	8001db0 <is_touch_speed>
 8001596:	4603      	mov	r3, r0
 8001598:	2b01      	cmp	r3, #1
 800159a:	d122      	bne.n	80015e2 <input_process+0x19e>
				if (confirm[1] == 1){
 800159c:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <input_process+0x2d0>)
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d116      	bne.n	80015d2 <input_process+0x18e>
					clr_confirm();
 80015a4:	f7ff fea8 	bl	80012f8 <clr_confirm>
					status = SPEED;
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <input_process+0x2cc>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
					setTimer3(500);
 80015ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b2:	f002 fc69 	bl	8003e88 <setTimer3>
					game_lcd();
 80015b6:	f000 ff4f 	bl	8002458 <game_lcd>
					mode_7seg();
 80015ba:	f001 fa13 	bl	80029e4 <mode_7seg>
					reDraw_snake();
 80015be:	f002 fc15 	bl	8003dec <reDraw_snake>
					point_food_lcd(food);
 80015c2:	4b56      	ldr	r3, [pc, #344]	; (800171c <input_process+0x2d8>)
 80015c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015c8:	f001 f9cd 	bl	8002966 <point_food_lcd>
					score_lcd();
 80015cc:	f000 ffa8 	bl	8002520 <score_lcd>
 80015d0:	e031      	b.n	8001636 <input_process+0x1f2>
				}
				else {
					clr_confirm();
 80015d2:	f7ff fe91 	bl	80012f8 <clr_confirm>
					confirm[1] = 1;
 80015d6:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <input_process+0x2d0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	705a      	strb	r2, [r3, #1]
					mode_second_lcd();
 80015dc:	f001 f908 	bl	80027f0 <mode_second_lcd>
 80015e0:	e029      	b.n	8001636 <input_process+0x1f2>
				}
			}
			else if (is_touch_time() == 1){
 80015e2:	f000 fc07 	bl	8001df4 <is_touch_time>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d124      	bne.n	8001636 <input_process+0x1f2>
				if (confirm[2] == 1){
 80015ec:	4b49      	ldr	r3, [pc, #292]	; (8001714 <input_process+0x2d0>)
 80015ee:	789b      	ldrb	r3, [r3, #2]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d119      	bne.n	8001628 <input_process+0x1e4>
					clr_confirm();
 80015f4:	f7ff fe80 	bl	80012f8 <clr_confirm>
					status = TIME;
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <input_process+0x2cc>)
 80015fa:	220d      	movs	r2, #13
 80015fc:	601a      	str	r2, [r3, #0]
					setTimer3(500);
 80015fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001602:	f002 fc41 	bl	8003e88 <setTimer3>
					game_lcd();
 8001606:	f000 ff27 	bl	8002458 <game_lcd>
					mode_7seg();
 800160a:	f001 f9eb 	bl	80029e4 <mode_7seg>
					reDraw_snake();
 800160e:	f002 fbed 	bl	8003dec <reDraw_snake>
					point_food_lcd(food);
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <input_process+0x2d8>)
 8001614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001618:	f001 f9a5 	bl	8002966 <point_food_lcd>
					counter = 0;			//gia tri counter dem thoi gian duoc gan 0
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <input_process+0x2dc>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
					score_lcd();
 8001622:	f000 ff7d 	bl	8002520 <score_lcd>
 8001626:	e006      	b.n	8001636 <input_process+0x1f2>
				}
				else {
					clr_confirm();
 8001628:	f7ff fe66 	bl	80012f8 <clr_confirm>
					confirm[2] = 1;
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <input_process+0x2d0>)
 800162e:	2201      	movs	r2, #1
 8001630:	709a      	strb	r2, [r3, #2]
					mode_third_lcd();
 8001632:	f001 f8f7 	bl	8002824 <mode_third_lcd>
				}
			}
			if (is_touch_quit() == 1){
 8001636:	f000 fac9 	bl	8001bcc <is_touch_quit>
 800163a:	4603      	mov	r3, r0
 800163c:	2b01      	cmp	r3, #1
 800163e:	d15c      	bne.n	80016fa <input_process+0x2b6>
				if (confirm[3] == 1){
 8001640:	4b34      	ldr	r3, [pc, #208]	; (8001714 <input_process+0x2d0>)
 8001642:	78db      	ldrb	r3, [r3, #3]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <input_process+0x214>
					clr_confirm();
 8001648:	f7ff fe56 	bl	80012f8 <clr_confirm>
					status = HOME;
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <input_process+0x2cc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
					home_lcd();
 8001652:	f000 fd6f 	bl	8002134 <home_lcd>
					clr_confirm();
					confirm[3] = 1;
					mode_forth_lcd();
				}
			}
			break;
 8001656:	e050      	b.n	80016fa <input_process+0x2b6>
					clr_confirm();
 8001658:	f7ff fe4e 	bl	80012f8 <clr_confirm>
					confirm[3] = 1;
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <input_process+0x2d0>)
 800165e:	2201      	movs	r2, #1
 8001660:	70da      	strb	r2, [r3, #3]
					mode_forth_lcd();
 8001662:	f001 f8f9 	bl	8002858 <mode_forth_lcd>
			break;
 8001666:	e048      	b.n	80016fa <input_process+0x2b6>
		case HIGHSCORE:
			if (is_touch_quit() == 1){
 8001668:	f000 fab0 	bl	8001bcc <is_touch_quit>
 800166c:	4603      	mov	r3, r0
 800166e:	2b01      	cmp	r3, #1
 8001670:	d145      	bne.n	80016fe <input_process+0x2ba>
				status = HOME;
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <input_process+0x2cc>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001678:	f000 fd5c 	bl	8002134 <home_lcd>
			}
			break;
 800167c:	e03f      	b.n	80016fe <input_process+0x2ba>
		case CLASSIC:
			input_inGame();
 800167e:	f7ff fe95 	bl	80013ac <input_inGame>
			break;
 8001682:	e043      	b.n	800170c <input_process+0x2c8>
		case SPEED:
			input_inGame();
 8001684:	f7ff fe92 	bl	80013ac <input_inGame>
			break;
 8001688:	e040      	b.n	800170c <input_process+0x2c8>
		case TIME:
			input_inGame();
 800168a:	f7ff fe8f 	bl	80013ac <input_inGame>
			break;
 800168e:	e03d      	b.n	800170c <input_process+0x2c8>
		case GAMEOVER:
			if (is_touch_quit_end() == 1){
 8001690:	f000 fabf 	bl	8001c12 <is_touch_quit_end>
 8001694:	4603      	mov	r3, r0
 8001696:	2b01      	cmp	r3, #1
 8001698:	d133      	bne.n	8001702 <input_process+0x2be>
				status = MODE;
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <input_process+0x2cc>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 80016a0:	f000 fda0 	bl	80021e4 <mode_game_lcd>
				reset_7seg();						//thoat che do choi game led 7 se quay tro ve 0
 80016a4:	f001 f985 	bl	80029b2 <reset_7seg>
			}
			break;
 80016a8:	e02b      	b.n	8001702 <input_process+0x2be>
		case WIN:
			if (is_touch_quit_end() == 1){
 80016aa:	f000 fab2 	bl	8001c12 <is_touch_quit_end>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d128      	bne.n	8001706 <input_process+0x2c2>
				status = MODE;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <input_process+0x2cc>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 80016ba:	f000 fd93 	bl	80021e4 <mode_game_lcd>
				reset_7seg();
 80016be:	f001 f978 	bl	80029b2 <reset_7seg>
			}
			break;
 80016c2:	e020      	b.n	8001706 <input_process+0x2c2>
		case PAUSE:
			if (is_touch_quit_end() == 1){
 80016c4:	f000 faa5 	bl	8001c12 <is_touch_quit_end>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <input_process+0x29a>
				status = MODE;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <input_process+0x2cc>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 80016d4:	f000 fd86 	bl	80021e4 <mode_game_lcd>
				reset_7seg();
 80016d8:	f001 f96b 	bl	80029b2 <reset_7seg>
			}
			else if (is_touch_resume() == 1){
				game_lcd();
				continue_game();
			}
			break;
 80016dc:	e015      	b.n	800170a <input_process+0x2c6>
			else if (is_touch_resume() == 1){
 80016de:	f000 faba 	bl	8001c56 <is_touch_resume>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d110      	bne.n	800170a <input_process+0x2c6>
				game_lcd();
 80016e8:	f000 feb6 	bl	8002458 <game_lcd>
				continue_game();
 80016ec:	f7ff fe3a 	bl	8001364 <continue_game>
			break;
 80016f0:	e00b      	b.n	800170a <input_process+0x2c6>
		default:
			break;
 80016f2:	bf00      	nop
 80016f4:	e00a      	b.n	800170c <input_process+0x2c8>
			break;
 80016f6:	bf00      	nop
 80016f8:	e008      	b.n	800170c <input_process+0x2c8>
			break;
 80016fa:	bf00      	nop
 80016fc:	e006      	b.n	800170c <input_process+0x2c8>
			break;
 80016fe:	bf00      	nop
 8001700:	e004      	b.n	800170c <input_process+0x2c8>
			break;
 8001702:	bf00      	nop
 8001704:	e002      	b.n	800170c <input_process+0x2c8>
			break;
 8001706:	bf00      	nop
 8001708:	e000      	b.n	800170c <input_process+0x2c8>
			break;
 800170a:	bf00      	nop
	}
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200000f8 	.word	0x200000f8
 8001714:	200000f4 	.word	0x200000f4
 8001718:	20000108 	.word	0x20000108
 800171c:	2000000c 	.word	0x2000000c
 8001720:	200000f0 	.word	0x200000f0

08001724 <score_cal>:
//tinh toan cap nhat diem so
void score_cal(){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	current_score = current_score + (400 / counter_time_score) * 5 + 5;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <score_cal+0x30>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001730:	fbb2 f2f3 	udiv	r2, r2, r3
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	441a      	add	r2, r3
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <score_cal+0x34>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	3305      	adds	r3, #5
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <score_cal+0x34>)
 8001744:	6013      	str	r3, [r2, #0]
	counter_time_score = 0;
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <score_cal+0x30>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
	score_lcd();
 800174c:	f000 fee8 	bl	8002520 <score_lcd>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000100 	.word	0x20000100
 8001758:	20000004 	.word	0x20000004

0800175c <inGame>:

void inGame(){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	if (move != NOT){
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <inGame+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <inGame+0x10>
		move_snake();
 8001768:	f002 fade 	bl	8003d28 <move_snake>
	}
	if (is_collision() == 1){
 800176c:	f002 fa0e 	bl	8003b8c <is_collision>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <inGame+0x2a>
		status = GAMEOVER;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <inGame+0x68>)
 8001778:	2210      	movs	r2, #16
 800177a:	601a      	str	r2, [r3, #0]
		snake_init();
 800177c:	f002 f986 	bl	8003a8c <snake_init>
		game_over_lcd();
 8001780:	f000 ff26 	bl	80025d0 <game_over_lcd>
	else if (length == 100){
		status = WIN;
		youwin_lcd();
		snake_init();
	}
}
 8001784:	e019      	b.n	80017ba <inGame+0x5e>
	else if (is_eat() == 1){
 8001786:	f002 fa3f 	bl	8003c08 <is_eat>
 800178a:	4603      	mov	r3, r0
 800178c:	2b01      	cmp	r3, #1
 800178e:	d109      	bne.n	80017a4 <inGame+0x48>
		length++;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <inGame+0x6c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <inGame+0x6c>)
 8001798:	6013      	str	r3, [r2, #0]
		score_cal();
 800179a:	f7ff ffc3 	bl	8001724 <score_cal>
		rand_food();
 800179e:	f002 fa91 	bl	8003cc4 <rand_food>
}
 80017a2:	e00a      	b.n	80017ba <inGame+0x5e>
	else if (length == 100){
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <inGame+0x6c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d106      	bne.n	80017ba <inGame+0x5e>
		status = WIN;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <inGame+0x68>)
 80017ae:	2211      	movs	r2, #17
 80017b0:	601a      	str	r2, [r3, #0]
		youwin_lcd();
 80017b2:	f000 ff45 	bl	8002640 <youwin_lcd>
		snake_init();
 80017b6:	f002 f969 	bl	8003a8c <snake_init>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000fc 	.word	0x200000fc
 80017c4:	200000f8 	.word	0x200000f8
 80017c8:	20000008 	.word	0x20000008

080017cc <fsm_ingame>:

void fsm_ingame(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	switch (status) {
 80017d0:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <fsm_ingame+0x130>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b0d      	cmp	r3, #13
 80017d6:	d03c      	beq.n	8001852 <fsm_ingame+0x86>
 80017d8:	2b0d      	cmp	r3, #13
 80017da:	f300 8085 	bgt.w	80018e8 <fsm_ingame+0x11c>
 80017de:	2b0b      	cmp	r3, #11
 80017e0:	d002      	beq.n	80017e8 <fsm_ingame+0x1c>
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d00f      	beq.n	8001806 <fsm_ingame+0x3a>
				game_over_lcd();
				snake_init();
			}
			break;
		default:
			break;
 80017e6:	e07f      	b.n	80018e8 <fsm_ingame+0x11c>
			counter_time_score++;
 80017e8:	4b45      	ldr	r3, [pc, #276]	; (8001900 <fsm_ingame+0x134>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a44      	ldr	r2, [pc, #272]	; (8001900 <fsm_ingame+0x134>)
 80017f0:	6013      	str	r3, [r2, #0]
			if (flag_timer3 == 1){
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <fsm_ingame+0x138>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d178      	bne.n	80018ec <fsm_ingame+0x120>
				flag_timer3 = 0;
 80017fa:	4b42      	ldr	r3, [pc, #264]	; (8001904 <fsm_ingame+0x138>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	801a      	strh	r2, [r3, #0]
				inGame();
 8001800:	f7ff ffac 	bl	800175c <inGame>
			break;
 8001804:	e072      	b.n	80018ec <fsm_ingame+0x120>
			counter_time_score++;
 8001806:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <fsm_ingame+0x134>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <fsm_ingame+0x134>)
 800180e:	6013      	str	r3, [r2, #0]
			if (flag_timer3 == 1){
 8001810:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <fsm_ingame+0x138>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d104      	bne.n	8001822 <fsm_ingame+0x56>
				flag_timer3 = 0;
 8001818:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <fsm_ingame+0x138>)
 800181a:	2200      	movs	r2, #0
 800181c:	801a      	strh	r2, [r3, #0]
				inGame();
 800181e:	f7ff ff9d 	bl	800175c <inGame>
			if (length == 5){
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <fsm_ingame+0x13c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d103      	bne.n	8001832 <fsm_ingame+0x66>
				setTimer3(200);
 800182a:	20c8      	movs	r0, #200	; 0xc8
 800182c:	f002 fb2c 	bl	8003e88 <setTimer3>
			break;
 8001830:	e05e      	b.n	80018f0 <fsm_ingame+0x124>
			else if (length == 10){
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <fsm_ingame+0x13c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d103      	bne.n	8001842 <fsm_ingame+0x76>
				setTimer3(100);
 800183a:	2064      	movs	r0, #100	; 0x64
 800183c:	f002 fb24 	bl	8003e88 <setTimer3>
			break;
 8001840:	e056      	b.n	80018f0 <fsm_ingame+0x124>
			else if (length == 15){
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <fsm_ingame+0x13c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d152      	bne.n	80018f0 <fsm_ingame+0x124>
				setTimer3(50);
 800184a:	2032      	movs	r0, #50	; 0x32
 800184c:	f002 fb1c 	bl	8003e88 <setTimer3>
			break;
 8001850:	e04e      	b.n	80018f0 <fsm_ingame+0x124>
			counter_time_score++;
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <fsm_ingame+0x134>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	4a29      	ldr	r2, [pc, #164]	; (8001900 <fsm_ingame+0x134>)
 800185a:	6013      	str	r3, [r2, #0]
			if (++counter % 20 == 0){
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <fsm_ingame+0x140>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	4a2a      	ldr	r2, [pc, #168]	; (800190c <fsm_ingame+0x140>)
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <fsm_ingame+0x140>)
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	4b29      	ldr	r3, [pc, #164]	; (8001910 <fsm_ingame+0x144>)
 800186c:	fba3 2301 	umull	r2, r3, r3, r1
 8001870:	091a      	lsrs	r2, r3, #4
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	1aca      	subs	r2, r1, r3
 800187c:	2a00      	cmp	r2, #0
 800187e:	d106      	bne.n	800188e <fsm_ingame+0xc2>
				counter_time--;
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <fsm_ingame+0x148>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	4a23      	ldr	r2, [pc, #140]	; (8001914 <fsm_ingame+0x148>)
 8001888:	6013      	str	r3, [r2, #0]
				update_7seg_time();
 800188a:	f001 f8cf 	bl	8002a2c <update_7seg_time>
			if (flag_timer3 == 1){
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <fsm_ingame+0x138>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d104      	bne.n	80018a0 <fsm_ingame+0xd4>
				flag_timer3 = 0;
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <fsm_ingame+0x138>)
 8001898:	2200      	movs	r2, #0
 800189a:	801a      	strh	r2, [r3, #0]
				inGame();
 800189c:	f7ff ff5e 	bl	800175c <inGame>
			if (counter_time <= 50){
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <fsm_ingame+0x148>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b32      	cmp	r3, #50	; 0x32
 80018a6:	d803      	bhi.n	80018b0 <fsm_ingame+0xe4>
				setTimer3(200);
 80018a8:	20c8      	movs	r0, #200	; 0xc8
 80018aa:	f002 faed 	bl	8003e88 <setTimer3>
			break;
 80018ae:	e021      	b.n	80018f4 <fsm_ingame+0x128>
			else if (counter_time <= 35){
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <fsm_ingame+0x148>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b23      	cmp	r3, #35	; 0x23
 80018b6:	d803      	bhi.n	80018c0 <fsm_ingame+0xf4>
				setTimer3(100);
 80018b8:	2064      	movs	r0, #100	; 0x64
 80018ba:	f002 fae5 	bl	8003e88 <setTimer3>
			break;
 80018be:	e019      	b.n	80018f4 <fsm_ingame+0x128>
			else if (counter_time <= 20){
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <fsm_ingame+0x148>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b14      	cmp	r3, #20
 80018c6:	d803      	bhi.n	80018d0 <fsm_ingame+0x104>
				setTimer3(50);
 80018c8:	2032      	movs	r0, #50	; 0x32
 80018ca:	f002 fadd 	bl	8003e88 <setTimer3>
			break;
 80018ce:	e011      	b.n	80018f4 <fsm_ingame+0x128>
			else if (counter_time <= 0){
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <fsm_ingame+0x148>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10d      	bne.n	80018f4 <fsm_ingame+0x128>
				status = GAMEOVER;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <fsm_ingame+0x130>)
 80018da:	2210      	movs	r2, #16
 80018dc:	601a      	str	r2, [r3, #0]
				game_over_lcd();
 80018de:	f000 fe77 	bl	80025d0 <game_over_lcd>
				snake_init();
 80018e2:	f002 f8d3 	bl	8003a8c <snake_init>
			break;
 80018e6:	e005      	b.n	80018f4 <fsm_ingame+0x128>
			break;
 80018e8:	bf00      	nop
 80018ea:	e004      	b.n	80018f6 <fsm_ingame+0x12a>
			break;
 80018ec:	bf00      	nop
 80018ee:	e002      	b.n	80018f6 <fsm_ingame+0x12a>
			break;
 80018f0:	bf00      	nop
 80018f2:	e000      	b.n	80018f6 <fsm_ingame+0x12a>
			break;
 80018f4:	bf00      	nop
	}
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200000f8 	.word	0x200000f8
 8001900:	20000100 	.word	0x20000100
 8001904:	2000011e 	.word	0x2000011e
 8001908:	20000008 	.word	0x20000008
 800190c:	200000f0 	.word	0x200000f0
 8001910:	cccccccd 	.word	0xcccccccd
 8001914:	20000104 	.word	0x20000104

08001918 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001932:	463b      	mov	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <MX_FSMC_Init+0xec>)
 8001946:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800194a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <MX_FSMC_Init+0xec>)
 800194e:	4a2e      	ldr	r2, [pc, #184]	; (8001a08 <MX_FSMC_Init+0xf0>)
 8001950:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <MX_FSMC_Init+0xec>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <MX_FSMC_Init+0xec>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <MX_FSMC_Init+0xec>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <MX_FSMC_Init+0xec>)
 8001966:	2210      	movs	r2, #16
 8001968:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <MX_FSMC_Init+0xec>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <MX_FSMC_Init+0xec>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <MX_FSMC_Init+0xec>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <MX_FSMC_Init+0xec>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_FSMC_Init+0xec>)
 8001984:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <MX_FSMC_Init+0xec>)
 800198c:	2200      	movs	r2, #0
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <MX_FSMC_Init+0xec>)
 8001992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_FSMC_Init+0xec>)
 800199a:	2200      	movs	r2, #0
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <MX_FSMC_Init+0xec>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_FSMC_Init+0xec>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80019aa:	230f      	movs	r3, #15
 80019ac:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80019ae:	230f      	movs	r3, #15
 80019b0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80019b2:	233c      	movs	r3, #60	; 0x3c
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80019ba:	2310      	movs	r3, #16
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80019be:	2311      	movs	r3, #17
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80019c6:	2308      	movs	r3, #8
 80019c8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80019ca:	230f      	movs	r3, #15
 80019cc:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80019ce:	2309      	movs	r3, #9
 80019d0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80019d6:	2310      	movs	r3, #16
 80019d8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80019da:	2311      	movs	r3, #17
 80019dc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80019e2:	463a      	mov	r2, r7
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <MX_FSMC_Init+0xec>)
 80019ec:	f007 fa98 	bl	8008f20 <HAL_SRAM_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80019f6:	f002 f843 	bl	8003a80 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200001a0 	.word	0x200001a0
 8001a08:	a0000104 	.word	0xa0000104
 8001a0c:	00000000 	.word	0x00000000

08001a10 <distance_of_two_point>:

#include "fun_touch.h"

// Tinh khoang cach hai diem
float distance_of_two_point(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	80fb      	strh	r3, [r7, #6]
 8001a22:	4603      	mov	r3, r0
 8001a24:	80bb      	strh	r3, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	807b      	strh	r3, [r7, #2]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	803b      	strh	r3, [r7, #0]
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd6d 	bl	8000514 <__aeabi_i2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001aa8 <distance_of_two_point+0x98>
 8001a42:	ec43 2b10 	vmov	d0, r2, r3
 8001a46:	f00a fb8d 	bl	800c164 <pow>
 8001a4a:	ec55 4b10 	vmov	r4, r5, d0
 8001a4e:	88ba      	ldrh	r2, [r7, #4]
 8001a50:	883b      	ldrh	r3, [r7, #0]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd5d 	bl	8000514 <__aeabi_i2d>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001aa8 <distance_of_two_point+0x98>
 8001a62:	ec43 2b10 	vmov	d0, r2, r3
 8001a66:	f00a fb7d 	bl	800c164 <pow>
 8001a6a:	ec53 2b10 	vmov	r2, r3, d0
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fc03 	bl	800027c <__adddf3>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	ec43 2b17 	vmov	d7, r2, r3
 8001a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a82:	eef0 0a67 	vmov.f32	s1, s15
 8001a86:	f00a fc1b 	bl	800c2c0 <sqrt>
 8001a8a:	ec53 2b10 	vmov	r2, r3, d0
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f8a1 	bl	8000bd8 <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	ee07 3a90 	vmov	s15, r3
}
 8001a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	40000000 	.word	0x40000000

08001ab0 <is_touch_right>:

int is_touch_right(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001ab4:	f003 fe24 	bl	8005700 <touch_IsTouched>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <is_touch_right+0x12>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e018      	b.n	8001af4 <is_touch_right+0x44>
	return (touch_GetX() > POS_X_RIGHT
 8001ac2:	f003 fe2f 	bl	8005724 <touch_GetX>
 8001ac6:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
			&& touch_GetY() > POS_Y_RIGHT
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001ac8:	2ba5      	cmp	r3, #165	; 0xa5
 8001aca:	d912      	bls.n	8001af2 <is_touch_right+0x42>
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
 8001acc:	f003 fe2a 	bl	8005724 <touch_GetX>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2bea      	cmp	r3, #234	; 0xea
 8001ad4:	d80d      	bhi.n	8001af2 <is_touch_right+0x42>
			&& touch_GetY() > POS_Y_RIGHT
 8001ad6:	f003 fe31 	bl	800573c <touch_GetY>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001ae0:	d307      	bcc.n	8001af2 <is_touch_right+0x42>
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001ae2:	f003 fe2b 	bl	800573c <touch_GetY>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001aec:	d801      	bhi.n	8001af2 <is_touch_right+0x42>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <is_touch_right+0x44>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <is_touch_left>:

int is_touch_left()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001afc:	f003 fe00 	bl	8005700 <touch_IsTouched>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <is_touch_left+0x12>
 8001b06:	2300      	movs	r3, #0
 8001b08:	e018      	b.n	8001b3c <is_touch_left+0x44>
	return (touch_GetX() > POS_X_LEFT
 8001b0a:	f003 fe0b 	bl	8005724 <touch_GetX>
 8001b0e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
			&& touch_GetY() > POS_Y_LEFT
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d912      	bls.n	8001b3a <is_touch_left+0x42>
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
 8001b14:	f003 fe06 	bl	8005724 <touch_GetX>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b4a      	cmp	r3, #74	; 0x4a
 8001b1c:	d80d      	bhi.n	8001b3a <is_touch_left+0x42>
			&& touch_GetY() > POS_Y_LEFT
 8001b1e:	f003 fe0d 	bl	800573c <touch_GetY>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001b28:	d307      	bcc.n	8001b3a <is_touch_left+0x42>
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001b2a:	f003 fe07 	bl	800573c <touch_GetY>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001b34:	d801      	bhi.n	8001b3a <is_touch_left+0x42>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <is_touch_left+0x44>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <is_touch_up>:

int is_touch_up()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001b44:	f003 fddc 	bl	8005700 <touch_IsTouched>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <is_touch_up+0x12>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e016      	b.n	8001b80 <is_touch_up+0x40>
	return (touch_GetX() > POS_X_UP
 8001b52:	f003 fde7 	bl	8005724 <touch_GetX>
 8001b56:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
			&& touch_GetY() > POS_Y_UP
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001b58:	2b55      	cmp	r3, #85	; 0x55
 8001b5a:	d910      	bls.n	8001b7e <is_touch_up+0x3e>
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
 8001b5c:	f003 fde2 	bl	8005724 <touch_GetX>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b9a      	cmp	r3, #154	; 0x9a
 8001b64:	d80b      	bhi.n	8001b7e <is_touch_up+0x3e>
			&& touch_GetY() > POS_Y_UP
 8001b66:	f003 fde9 	bl	800573c <touch_GetY>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2bcd      	cmp	r3, #205	; 0xcd
 8001b6e:	d906      	bls.n	8001b7e <is_touch_up+0x3e>
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001b70:	f003 fde4 	bl	800573c <touch_GetY>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2bfe      	cmp	r3, #254	; 0xfe
 8001b78:	d801      	bhi.n	8001b7e <is_touch_up+0x3e>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <is_touch_up+0x40>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <is_touch_down>:

int is_touch_down()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001b88:	f003 fdba 	bl	8005700 <touch_IsTouched>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <is_touch_down+0x12>
 8001b92:	2300      	movs	r3, #0
 8001b94:	e018      	b.n	8001bc8 <is_touch_down+0x44>
	return (touch_GetX() > POS_X_DOWN
 8001b96:	f003 fdc5 	bl	8005724 <touch_GetX>
 8001b9a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
			&& touch_GetY() > POS_Y_DOWN
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001b9c:	2b55      	cmp	r3, #85	; 0x55
 8001b9e:	d912      	bls.n	8001bc6 <is_touch_down+0x42>
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
 8001ba0:	f003 fdc0 	bl	8005724 <touch_GetX>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b9a      	cmp	r3, #154	; 0x9a
 8001ba8:	d80d      	bhi.n	8001bc6 <is_touch_down+0x42>
			&& touch_GetY() > POS_Y_DOWN
 8001baa:	f003 fdc7 	bl	800573c <touch_GetY>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001bb4:	d307      	bcc.n	8001bc6 <is_touch_down+0x42>
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001bb6:	f003 fdc1 	bl	800573c <touch_GetY>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001bc0:	d801      	bhi.n	8001bc6 <is_touch_down+0x42>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <is_touch_down+0x44>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <is_touch_quit>:

int is_touch_quit()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001bd0:	f003 fd96 	bl	8005700 <touch_IsTouched>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <is_touch_quit+0x12>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e017      	b.n	8001c0e <is_touch_quit+0x42>
	return (touch_GetX() > POS_X_FORTH
 8001bde:	f003 fda1 	bl	8005724 <touch_GetX>
 8001be2:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001be4:	2b41      	cmp	r3, #65	; 0x41
 8001be6:	d911      	bls.n	8001c0c <is_touch_quit+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8001be8:	f003 fd9c 	bl	8005724 <touch_GetX>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2bb8      	cmp	r3, #184	; 0xb8
 8001bf0:	d80c      	bhi.n	8001c0c <is_touch_quit+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8001bf2:	f003 fda3 	bl	800573c <touch_GetY>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2bfa      	cmp	r3, #250	; 0xfa
 8001bfa:	d907      	bls.n	8001c0c <is_touch_quit+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001bfc:	f003 fd9e 	bl	800573c <touch_GetY>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001c06:	d801      	bhi.n	8001c0c <is_touch_quit+0x40>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <is_touch_quit+0x42>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <is_touch_quit_end>:

int is_touch_quit_end(){
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001c16:	f003 fd73 	bl	8005700 <touch_IsTouched>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <is_touch_quit_end+0x12>
 8001c20:	2300      	movs	r3, #0
 8001c22:	e016      	b.n	8001c52 <is_touch_quit_end+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001c24:	f003 fd7e 	bl	8005724 <touch_GetX>
 8001c28:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001c2a:	2b41      	cmp	r3, #65	; 0x41
 8001c2c:	d910      	bls.n	8001c50 <is_touch_quit_end+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001c2e:	f003 fd79 	bl	8005724 <touch_GetX>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2bb8      	cmp	r3, #184	; 0xb8
 8001c36:	d80b      	bhi.n	8001c50 <is_touch_quit_end+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001c38:	f003 fd80 	bl	800573c <touch_GetY>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2bc8      	cmp	r3, #200	; 0xc8
 8001c40:	d906      	bls.n	8001c50 <is_touch_quit_end+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001c42:	f003 fd7b 	bl	800573c <touch_GetY>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2bea      	cmp	r3, #234	; 0xea
 8001c4a:	d801      	bhi.n	8001c50 <is_touch_quit_end+0x3e>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <is_touch_quit_end+0x40>
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <is_touch_resume>:

int is_touch_resume(){
 8001c56:	b580      	push	{r7, lr}
 8001c58:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001c5a:	f003 fd51 	bl	8005700 <touch_IsTouched>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <is_touch_resume+0x12>
 8001c64:	2300      	movs	r3, #0
 8001c66:	e016      	b.n	8001c96 <is_touch_resume+0x40>
		return (touch_GetX() > POS_X_SECOND
 8001c68:	f003 fd5c 	bl	8005724 <touch_GetX>
 8001c6c:	4603      	mov	r3, r0
				&& touch_GetX() < POS_X_SECOND + WIDTH
				&& touch_GetY() > POS_Y_SECOND
				&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001c6e:	2b41      	cmp	r3, #65	; 0x41
 8001c70:	d910      	bls.n	8001c94 <is_touch_resume+0x3e>
				&& touch_GetX() < POS_X_SECOND + WIDTH
 8001c72:	f003 fd57 	bl	8005724 <touch_GetX>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2bb8      	cmp	r3, #184	; 0xb8
 8001c7a:	d80b      	bhi.n	8001c94 <is_touch_resume+0x3e>
				&& touch_GetY() > POS_Y_SECOND
 8001c7c:	f003 fd5e 	bl	800573c <touch_GetY>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b96      	cmp	r3, #150	; 0x96
 8001c84:	d906      	bls.n	8001c94 <is_touch_resume+0x3e>
				&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001c86:	f003 fd59 	bl	800573c <touch_GetY>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2bb8      	cmp	r3, #184	; 0xb8
 8001c8e:	d801      	bhi.n	8001c94 <is_touch_resume+0x3e>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <is_touch_resume+0x40>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <is_touch_pause>:
int is_touch_pause()
{
 8001c9a:	b598      	push	{r3, r4, r7, lr}
 8001c9c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001c9e:	f003 fd2f 	bl	8005700 <touch_IsTouched>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <is_touch_pause+0x12>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e018      	b.n	8001cde <is_touch_pause+0x44>
	return distance_of_two_point(touch_GetX(), touch_GetY(), POS_X_PAUSE, POS_Y_PAUSE) < BTN_HEIGHT / 2;
 8001cac:	f003 fd3a 	bl	8005724 <touch_GetX>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	f003 fd42 	bl	800573c <touch_GetY>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	23e6      	movs	r3, #230	; 0xe6
 8001cbe:	22c8      	movs	r2, #200	; 0xc8
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff fea5 	bl	8001a10 <distance_of_two_point>
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
 8001cca:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	bf4c      	ite	mi
 8001cd8:	2301      	movmi	r3, #1
 8001cda:	2300      	movpl	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd98      	pop	{r3, r4, r7, pc}

08001ce2 <is_touch_newGame>:

int is_touch_newGame()
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001ce6:	f003 fd0b 	bl	8005700 <touch_IsTouched>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <is_touch_newGame+0x12>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e016      	b.n	8001d22 <is_touch_newGame+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001cf4:	f003 fd16 	bl	8005724 <touch_GetX>
 8001cf8:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001cfa:	2b41      	cmp	r3, #65	; 0x41
 8001cfc:	d910      	bls.n	8001d20 <is_touch_newGame+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001cfe:	f003 fd11 	bl	8005724 <touch_GetX>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2bb8      	cmp	r3, #184	; 0xb8
 8001d06:	d80b      	bhi.n	8001d20 <is_touch_newGame+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001d08:	f003 fd18 	bl	800573c <touch_GetY>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b96      	cmp	r3, #150	; 0x96
 8001d10:	d906      	bls.n	8001d20 <is_touch_newGame+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001d12:	f003 fd13 	bl	800573c <touch_GetY>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2bb8      	cmp	r3, #184	; 0xb8
 8001d1a:	d801      	bhi.n	8001d20 <is_touch_newGame+0x3e>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <is_touch_newGame+0x40>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <is_touch_highScore>:

int is_touch_highScore()
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001d2a:	f003 fce9 	bl	8005700 <touch_IsTouched>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <is_touch_highScore+0x12>
 8001d34:	2300      	movs	r3, #0
 8001d36:	e017      	b.n	8001d68 <is_touch_highScore+0x42>
	return (touch_GetX() > POS_X_FORTH
 8001d38:	f003 fcf4 	bl	8005724 <touch_GetX>
 8001d3c:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001d3e:	2b41      	cmp	r3, #65	; 0x41
 8001d40:	d911      	bls.n	8001d66 <is_touch_highScore+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8001d42:	f003 fcef 	bl	8005724 <touch_GetX>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2bb8      	cmp	r3, #184	; 0xb8
 8001d4a:	d80c      	bhi.n	8001d66 <is_touch_highScore+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8001d4c:	f003 fcf6 	bl	800573c <touch_GetY>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2bfa      	cmp	r3, #250	; 0xfa
 8001d54:	d907      	bls.n	8001d66 <is_touch_highScore+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001d56:	f003 fcf1 	bl	800573c <touch_GetY>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001d60:	d801      	bhi.n	8001d66 <is_touch_highScore+0x40>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <is_touch_highScore+0x42>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <is_touch_classic>:

int is_touch_classic()
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001d70:	f003 fcc6 	bl	8005700 <touch_IsTouched>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <is_touch_classic+0x12>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e016      	b.n	8001dac <is_touch_classic+0x40>
	return (touch_GetX() > POS_X_FIRST
 8001d7e:	f003 fcd1 	bl	8005724 <touch_GetX>
 8001d82:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8001d84:	2b41      	cmp	r3, #65	; 0x41
 8001d86:	d910      	bls.n	8001daa <is_touch_classic+0x3e>
			&& touch_GetX() < POS_X_FIRST + WIDTH
 8001d88:	f003 fccc 	bl	8005724 <touch_GetX>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2bb8      	cmp	r3, #184	; 0xb8
 8001d90:	d80b      	bhi.n	8001daa <is_touch_classic+0x3e>
			&& touch_GetY() > POS_Y_FIRST
 8001d92:	f003 fcd3 	bl	800573c <touch_GetY>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d906      	bls.n	8001daa <is_touch_classic+0x3e>
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8001d9c:	f003 fcce 	bl	800573c <touch_GetY>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b86      	cmp	r3, #134	; 0x86
 8001da4:	d801      	bhi.n	8001daa <is_touch_classic+0x3e>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <is_touch_classic+0x40>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <is_touch_speed>:

int is_touch_speed()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001db4:	f003 fca4 	bl	8005700 <touch_IsTouched>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <is_touch_speed+0x12>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e016      	b.n	8001df0 <is_touch_speed+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001dc2:	f003 fcaf 	bl	8005724 <touch_GetX>
 8001dc6:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001dc8:	2b41      	cmp	r3, #65	; 0x41
 8001dca:	d910      	bls.n	8001dee <is_touch_speed+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001dcc:	f003 fcaa 	bl	8005724 <touch_GetX>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2bb8      	cmp	r3, #184	; 0xb8
 8001dd4:	d80b      	bhi.n	8001dee <is_touch_speed+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001dd6:	f003 fcb1 	bl	800573c <touch_GetY>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b96      	cmp	r3, #150	; 0x96
 8001dde:	d906      	bls.n	8001dee <is_touch_speed+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001de0:	f003 fcac 	bl	800573c <touch_GetY>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2bb8      	cmp	r3, #184	; 0xb8
 8001de8:	d801      	bhi.n	8001dee <is_touch_speed+0x3e>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <is_touch_speed+0x40>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <is_touch_time>:

int is_touch_time()
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001df8:	f003 fc82 	bl	8005700 <touch_IsTouched>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <is_touch_time+0x12>
 8001e02:	2300      	movs	r3, #0
 8001e04:	e016      	b.n	8001e34 <is_touch_time+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001e06:	f003 fc8d 	bl	8005724 <touch_GetX>
 8001e0a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001e0c:	2b41      	cmp	r3, #65	; 0x41
 8001e0e:	d910      	bls.n	8001e32 <is_touch_time+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001e10:	f003 fc88 	bl	8005724 <touch_GetX>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2bb8      	cmp	r3, #184	; 0xb8
 8001e18:	d80b      	bhi.n	8001e32 <is_touch_time+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001e1a:	f003 fc8f 	bl	800573c <touch_GetY>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2bc8      	cmp	r3, #200	; 0xc8
 8001e22:	d906      	bls.n	8001e32 <is_touch_time+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001e24:	f003 fc8a 	bl	800573c <touch_GetY>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2bea      	cmp	r3, #234	; 0xea
 8001e2c:	d801      	bhi.n	8001e32 <is_touch_time+0x3e>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <is_touch_time+0x40>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <is_touch_continue>:

int is_touch_continue()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001e3c:	f003 fc60 	bl	8005700 <touch_IsTouched>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <is_touch_continue+0x12>
 8001e46:	2300      	movs	r3, #0
 8001e48:	e016      	b.n	8001e78 <is_touch_continue+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001e4a:	f003 fc6b 	bl	8005724 <touch_GetX>
 8001e4e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001e50:	2b41      	cmp	r3, #65	; 0x41
 8001e52:	d910      	bls.n	8001e76 <is_touch_continue+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001e54:	f003 fc66 	bl	8005724 <touch_GetX>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2bb8      	cmp	r3, #184	; 0xb8
 8001e5c:	d80b      	bhi.n	8001e76 <is_touch_continue+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001e5e:	f003 fc6d 	bl	800573c <touch_GetY>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2bc8      	cmp	r3, #200	; 0xc8
 8001e66:	d906      	bls.n	8001e76 <is_touch_continue+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001e68:	f003 fc68 	bl	800573c <touch_GetY>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2bea      	cmp	r3, #234	; 0xea
 8001e70:	d801      	bhi.n	8001e76 <is_touch_continue+0x3e>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <is_touch_continue+0x40>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08e      	sub	sp, #56	; 0x38
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <MX_GPIO_Init+0x240>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a88      	ldr	r2, [pc, #544]	; (80020bc <MX_GPIO_Init+0x240>)
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b86      	ldr	r3, [pc, #536]	; (80020bc <MX_GPIO_Init+0x240>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	4b82      	ldr	r3, [pc, #520]	; (80020bc <MX_GPIO_Init+0x240>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a81      	ldr	r2, [pc, #516]	; (80020bc <MX_GPIO_Init+0x240>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <MX_GPIO_Init+0x240>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <MX_GPIO_Init+0x240>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <MX_GPIO_Init+0x240>)
 8001ed4:	f043 0320 	orr.w	r3, r3, #32
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <MX_GPIO_Init+0x240>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	4b74      	ldr	r3, [pc, #464]	; (80020bc <MX_GPIO_Init+0x240>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a73      	ldr	r2, [pc, #460]	; (80020bc <MX_GPIO_Init+0x240>)
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <MX_GPIO_Init+0x240>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a6c      	ldr	r2, [pc, #432]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b66      	ldr	r3, [pc, #408]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a65      	ldr	r2, [pc, #404]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b63      	ldr	r3, [pc, #396]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a5e      	ldr	r2, [pc, #376]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b58      	ldr	r3, [pc, #352]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a57      	ldr	r2, [pc, #348]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b55      	ldr	r3, [pc, #340]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2110      	movs	r1, #16
 8001f76:	4852      	ldr	r0, [pc, #328]	; (80020c0 <MX_GPIO_Init+0x244>)
 8001f78:	f004 fdc2 	bl	8006b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001f82:	4850      	ldr	r0, [pc, #320]	; (80020c4 <MX_GPIO_Init+0x248>)
 8001f84:	f004 fdbc 	bl	8006b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8e:	484e      	ldr	r0, [pc, #312]	; (80020c8 <MX_GPIO_Init+0x24c>)
 8001f90:	f004 fdb6 	bl	8006b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001f9a:	484c      	ldr	r0, [pc, #304]	; (80020cc <MX_GPIO_Init+0x250>)
 8001f9c:	f004 fdb0 	bl	8006b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa6:	484a      	ldr	r0, [pc, #296]	; (80020d0 <MX_GPIO_Init+0x254>)
 8001fa8:	f004 fdaa 	bl	8006b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2108      	movs	r1, #8
 8001fb0:	4848      	ldr	r0, [pc, #288]	; (80020d4 <MX_GPIO_Init+0x258>)
 8001fb2:	f004 fda5 	bl	8006b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	483c      	ldr	r0, [pc, #240]	; (80020c0 <MX_GPIO_Init+0x244>)
 8001fce:	f004 fbe3 	bl	8006798 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001fd2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4836      	ldr	r0, [pc, #216]	; (80020c4 <MX_GPIO_Init+0x248>)
 8001fec:	f004 fbd4 	bl	8006798 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	4830      	ldr	r0, [pc, #192]	; (80020c8 <MX_GPIO_Init+0x24c>)
 8002006:	f004 fbc7 	bl	8006798 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 800200a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002020:	4619      	mov	r1, r3
 8002022:	4829      	ldr	r0, [pc, #164]	; (80020c8 <MX_GPIO_Init+0x24c>)
 8002024:	f004 fbb8 	bl	8006798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002028:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800203a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203e:	4619      	mov	r1, r3
 8002040:	4822      	ldr	r0, [pc, #136]	; (80020cc <MX_GPIO_Init+0x250>)
 8002042:	f004 fba9 	bl	8006798 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8002046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002050:	2301      	movs	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002058:	4619      	mov	r1, r3
 800205a:	481a      	ldr	r0, [pc, #104]	; (80020c4 <MX_GPIO_Init+0x248>)
 800205c:	f004 fb9c 	bl	8006798 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	4619      	mov	r1, r3
 8002078:	4815      	ldr	r0, [pc, #84]	; (80020d0 <MX_GPIO_Init+0x254>)
 800207a:	f004 fb8d 	bl	8006798 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800208c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002090:	4619      	mov	r1, r3
 8002092:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MX_GPIO_Init+0x248>)
 8002094:	f004 fb80 	bl	8006798 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8002098:	2308      	movs	r3, #8
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209c:	2301      	movs	r3, #1
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	4809      	ldr	r0, [pc, #36]	; (80020d4 <MX_GPIO_Init+0x258>)
 80020b0:	f004 fb72 	bl	8006798 <HAL_GPIO_Init>

}
 80020b4:	bf00      	nop
 80020b6:	3738      	adds	r7, #56	; 0x38
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40021400 	.word	0x40021400
 80020cc:	40021800 	.word	0x40021800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020c00 	.word	0x40020c00

080020d8 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_I2C1_Init+0x50>)
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <MX_I2C1_Init+0x54>)
 80020e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_I2C1_Init+0x50>)
 80020e4:	4a12      	ldr	r2, [pc, #72]	; (8002130 <MX_I2C1_Init+0x58>)
 80020e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_I2C1_Init+0x50>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_I2C1_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_I2C1_Init+0x50>)
 80020f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MX_I2C1_Init+0x50>)
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_I2C1_Init+0x50>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <MX_I2C1_Init+0x50>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_I2C1_Init+0x50>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <MX_I2C1_Init+0x50>)
 8002116:	f004 fd27 	bl	8006b68 <HAL_I2C_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002120:	f001 fcae 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000057c 	.word	0x2000057c
 800212c:	40005400 	.word	0x40005400
 8002130:	000186a0 	.word	0x000186a0

08002134 <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <home_lcd+0xa0>)
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002142:	22f0      	movs	r2, #240	; 0xf0
 8002144:	2100      	movs	r1, #0
 8002146:	2000      	movs	r0, #0
 8002148:	f000 ffb6 	bl	80030b8 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 800214c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	23b9      	movs	r3, #185	; 0xb9
 8002154:	22b9      	movs	r2, #185	; 0xb9
 8002156:	2196      	movs	r1, #150	; 0x96
 8002158:	2041      	movs	r0, #65	; 0x41
 800215a:	f000 fd3b 	bl	8002bd4 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 800215e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	23eb      	movs	r3, #235	; 0xeb
 8002166:	22b9      	movs	r2, #185	; 0xb9
 8002168:	21c8      	movs	r1, #200	; 0xc8
 800216a:	2041      	movs	r0, #65	; 0x41
 800216c:	f000 fd32 	bl	8002bd4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002170:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	f240 131d 	movw	r3, #285	; 0x11d
 800217a:	22b9      	movs	r2, #185	; 0xb9
 800217c:	21fa      	movs	r1, #250	; 0xfa
 800217e:	2041      	movs	r0, #65	; 0x41
 8002180:	f000 fd28 	bl	8002bd4 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 8002184:	2301      	movs	r3, #1
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	2318      	movs	r3, #24
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2300      	movs	r3, #0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2300      	movs	r3, #0
 8002192:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <home_lcd+0xa4>)
 8002194:	219b      	movs	r1, #155	; 0x9b
 8002196:	2054      	movs	r0, #84	; 0x54
 8002198:	f001 fa60 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 800219c:	2301      	movs	r3, #1
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	2318      	movs	r3, #24
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2300      	movs	r3, #0
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2300      	movs	r3, #0
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <home_lcd+0xa8>)
 80021ac:	21cd      	movs	r1, #205	; 0xcd
 80021ae:	204d      	movs	r0, #77	; 0x4d
 80021b0:	f001 fa54 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 80021b4:	2301      	movs	r3, #1
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	2318      	movs	r3, #24
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2300      	movs	r3, #0
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <home_lcd+0xac>)
 80021c4:	21ff      	movs	r1, #255	; 0xff
 80021c6:	2048      	movs	r0, #72	; 0x48
 80021c8:	f001 fa48 	bl	800365c <lcd_ShowStr>
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	08010228 	.word	0x08010228
 80021d8:	0800d150 	.word	0x0800d150
 80021dc:	0800d158 	.word	0x0800d158
 80021e0:	0800d164 	.word	0x0800d164

080021e4 <mode_game_lcd>:

void mode_game_lcd(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_mode);
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <mode_game_lcd+0xc8>)
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021f2:	22f0      	movs	r2, #240	; 0xf0
 80021f4:	2100      	movs	r1, #0
 80021f6:	2000      	movs	r0, #0
 80021f8:	f000 ff5e 	bl	80030b8 <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 80021fc:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2387      	movs	r3, #135	; 0x87
 8002204:	22b9      	movs	r2, #185	; 0xb9
 8002206:	2164      	movs	r1, #100	; 0x64
 8002208:	2041      	movs	r0, #65	; 0x41
 800220a:	f000 fce3 	bl	8002bd4 <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 800220e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	23b9      	movs	r3, #185	; 0xb9
 8002216:	22b9      	movs	r2, #185	; 0xb9
 8002218:	2196      	movs	r1, #150	; 0x96
 800221a:	2041      	movs	r0, #65	; 0x41
 800221c:	f000 fcda 	bl	8002bd4 <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002220:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	23eb      	movs	r3, #235	; 0xeb
 8002228:	22b9      	movs	r2, #185	; 0xb9
 800222a:	21c8      	movs	r1, #200	; 0xc8
 800222c:	2041      	movs	r0, #65	; 0x41
 800222e:	f000 fcd1 	bl	8002bd4 <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002232:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f240 131d 	movw	r3, #285	; 0x11d
 800223c:	22b9      	movs	r2, #185	; 0xb9
 800223e:	21fa      	movs	r1, #250	; 0xfa
 8002240:	2041      	movs	r0, #65	; 0x41
 8002242:	f000 fcc7 	bl	8002bd4 <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 8002246:	2301      	movs	r3, #1
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	2318      	movs	r3, #24
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2300      	movs	r3, #0
 8002254:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <mode_game_lcd+0xcc>)
 8002256:	2169      	movs	r1, #105	; 0x69
 8002258:	2054      	movs	r0, #84	; 0x54
 800225a:	f001 f9ff 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 800225e:	2301      	movs	r3, #1
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	2318      	movs	r3, #24
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	2300      	movs	r3, #0
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2300      	movs	r3, #0
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <mode_game_lcd+0xd0>)
 800226e:	219b      	movs	r1, #155	; 0x9b
 8002270:	2060      	movs	r0, #96	; 0x60
 8002272:	f001 f9f3 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 8002276:	2301      	movs	r3, #1
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2318      	movs	r3, #24
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2300      	movs	r3, #0
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <mode_game_lcd+0xd4>)
 8002286:	21cd      	movs	r1, #205	; 0xcd
 8002288:	2060      	movs	r0, #96	; 0x60
 800228a:	f001 f9e7 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 800228e:	2301      	movs	r3, #1
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	2318      	movs	r3, #24
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	2300      	movs	r3, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2300      	movs	r3, #0
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <mode_game_lcd+0xd8>)
 800229e:	21ff      	movs	r1, #255	; 0xff
 80022a0:	2064      	movs	r0, #100	; 0x64
 80022a2:	f001 f9db 	bl	800365c <lcd_ShowStr>
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	08035a28 	.word	0x08035a28
 80022b0:	0800d170 	.word	0x0800d170
 80022b4:	0800d178 	.word	0x0800d178
 80022b8:	0800d180 	.word	0x0800d180
 80022bc:	0800d188 	.word	0x0800d188

080022c0 <highscore_lcd>:

void highscore_lcd(){
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_highscore);
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <highscore_lcd+0x17c>)
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022ce:	22f0      	movs	r2, #240	; 0xf0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 fef0 	bl	80030b8 <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 80022d8:	2301      	movs	r3, #1
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2310      	movs	r3, #16
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2300      	movs	r3, #0
 80022e6:	4a56      	ldr	r2, [pc, #344]	; (8002440 <highscore_lcd+0x180>)
 80022e8:	2150      	movs	r1, #80	; 0x50
 80022ea:	200a      	movs	r0, #10
 80022ec:	f001 f9b6 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 80022f0:	2301      	movs	r3, #1
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2310      	movs	r3, #16
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2300      	movs	r3, #0
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	4a51      	ldr	r2, [pc, #324]	; (8002444 <highscore_lcd+0x184>)
 8002300:	2150      	movs	r1, #80	; 0x50
 8002302:	203c      	movs	r0, #60	; 0x3c
 8002304:	f001 f9aa 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 8002308:	2301      	movs	r3, #1
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2310      	movs	r3, #16
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2300      	movs	r3, #0
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2300      	movs	r3, #0
 8002316:	4a4c      	ldr	r2, [pc, #304]	; (8002448 <highscore_lcd+0x188>)
 8002318:	2150      	movs	r1, #80	; 0x50
 800231a:	20a0      	movs	r0, #160	; 0xa0
 800231c:	f001 f99e 	bl	800365c <lcd_ShowStr>
	char c[10] = "";
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e051      	b.n	80023d8 <highscore_lcd+0x118>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3305      	adds	r3, #5
 8002338:	b29b      	uxth	r3, r3
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	b29c      	uxth	r4, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	1d39      	adds	r1, r7, #4
 8002342:	220a      	movs	r2, #10
 8002344:	4618      	mov	r0, r3
 8002346:	f008 febf 	bl	800b0c8 <itoa>
 800234a:	4602      	mov	r2, r0
 800234c:	2301      	movs	r3, #1
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	2310      	movs	r3, #16
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2300      	movs	r3, #0
 800235a:	4621      	mov	r1, r4
 800235c:	200a      	movs	r0, #10
 800235e:	f001 f97d 	bl	800365c <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3305      	adds	r3, #5
 8002366:	b29b      	uxth	r3, r3
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	b299      	uxth	r1, r3
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	1e5a      	subs	r2, r3, #1
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4a34      	ldr	r2, [pc, #208]	; (800244c <highscore_lcd+0x18c>)
 800237a:	441a      	add	r2, r3
 800237c:	2301      	movs	r3, #1
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	2310      	movs	r3, #16
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	2300      	movs	r3, #0
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2300      	movs	r3, #0
 800238a:	203c      	movs	r0, #60	; 0x3c
 800238c:	f001 f966 	bl	800365c <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	3305      	adds	r3, #5
 8002394:	b29b      	uxth	r3, r3
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	b29c      	uxth	r4, r3
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	1e5a      	subs	r2, r3, #1
 800239e:	492b      	ldr	r1, [pc, #172]	; (800244c <highscore_lcd+0x18c>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	330a      	adds	r3, #10
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	220a      	movs	r2, #10
 80023b4:	4619      	mov	r1, r3
 80023b6:	f008 fe87 	bl	800b0c8 <itoa>
 80023ba:	4602      	mov	r2, r0
 80023bc:	2301      	movs	r3, #1
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	2310      	movs	r3, #16
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	2300      	movs	r3, #0
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	4621      	mov	r1, r4
 80023cc:	20a0      	movs	r0, #160	; 0xa0
 80023ce:	f001 f945 	bl	800365c <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3301      	adds	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <highscore_lcd+0x190>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d9a8      	bls.n	8002334 <highscore_lcd+0x74>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 80023e2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f240 131d 	movw	r3, #285	; 0x11d
 80023ec:	22b9      	movs	r2, #185	; 0xb9
 80023ee:	21fa      	movs	r1, #250	; 0xfa
 80023f0:	2041      	movs	r0, #65	; 0x41
 80023f2:	f000 fbef 	bl	8002bd4 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 80023f6:	2301      	movs	r3, #1
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	2318      	movs	r3, #24
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	2300      	movs	r3, #0
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2300      	movs	r3, #0
 8002404:	4a13      	ldr	r2, [pc, #76]	; (8002454 <highscore_lcd+0x194>)
 8002406:	21ff      	movs	r1, #255	; 0xff
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	f001 f927 	bl	800365c <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 800240e:	2300      	movs	r3, #0
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f240 131d 	movw	r3, #285	; 0x11d
 8002416:	22b9      	movs	r2, #185	; 0xb9
 8002418:	21fa      	movs	r1, #250	; 0xfa
 800241a:	2041      	movs	r0, #65	; 0x41
 800241c:	f000 fcab 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002428:	22b8      	movs	r2, #184	; 0xb8
 800242a:	21fb      	movs	r1, #251	; 0xfb
 800242c:	2042      	movs	r0, #66	; 0x42
 800242e:	f000 fca2 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop
 800243c:	0805b228 	.word	0x0805b228
 8002440:	0800d190 	.word	0x0800d190
 8002444:	0800d198 	.word	0x0800d198
 8002448:	0800d1a0 	.word	0x0800d1a0
 800244c:	20000510 	.word	0x20000510
 8002450:	20000000 	.word	0x20000000
 8002454:	0800d188 	.word	0x0800d188

08002458 <game_lcd>:

void game_lcd(){
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 800245e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002462:	f000 fb85 	bl	8002b70 <lcd_Clear>
	lcd_Fill(0, 200, 239, 319, LGRAYBLUE);
 8002466:	f24a 6351 	movw	r3, #42577	; 0xa651
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f240 133f 	movw	r3, #319	; 0x13f
 8002470:	22ef      	movs	r2, #239	; 0xef
 8002472:	21c8      	movs	r1, #200	; 0xc8
 8002474:	2000      	movs	r0, #0
 8002476:	f000 fbad 	bl	8002bd4 <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 800247a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f240 133b 	movw	r3, #315	; 0x13b
 8002484:	224b      	movs	r2, #75	; 0x4b
 8002486:	f240 1109 	movw	r1, #265	; 0x109
 800248a:	2005      	movs	r0, #5
 800248c:	f000 fba2 	bl	8002bd4 <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 8002490:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	f240 133b 	movw	r3, #315	; 0x13b
 800249a:	22eb      	movs	r2, #235	; 0xeb
 800249c:	f240 1109 	movw	r1, #265	; 0x109
 80024a0:	20a5      	movs	r0, #165	; 0xa5
 80024a2:	f000 fb97 	bl	8002bd4 <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 80024a6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	23ff      	movs	r3, #255	; 0xff
 80024ae:	229b      	movs	r2, #155	; 0x9b
 80024b0:	21cd      	movs	r1, #205	; 0xcd
 80024b2:	2055      	movs	r0, #85	; 0x55
 80024b4:	f000 fb8e 	bl	8002bd4 <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 80024b8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f240 133b 	movw	r3, #315	; 0x13b
 80024c2:	229b      	movs	r2, #155	; 0x9b
 80024c4:	f240 1109 	movw	r1, #265	; 0x109
 80024c8:	2055      	movs	r0, #85	; 0x55
 80024ca:	f000 fb83 	bl	8002bd4 <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 80024ce:	2301      	movs	r3, #1
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2319      	movs	r3, #25
 80024d4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80024d8:	21e6      	movs	r1, #230	; 0xe6
 80024da:	20c8      	movs	r0, #200	; 0xc8
 80024dc:	f001 f851 	bl	8003582 <lcd_DrawCircle>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 80024e0:	2301      	movs	r3, #1
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	2310      	movs	r3, #16
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <game_lcd+0xc0>)
 80024f0:	21de      	movs	r1, #222	; 0xde
 80024f2:	20b6      	movs	r0, #182	; 0xb6
 80024f4:	f001 f8b2 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 80024f8:	2301      	movs	r3, #1
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	2310      	movs	r3, #16
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2300      	movs	r3, #0
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <game_lcd+0xc4>)
 8002508:	21cd      	movs	r1, #205	; 0xcd
 800250a:	2005      	movs	r0, #5
 800250c:	f001 f8a6 	bl	800365c <lcd_ShowStr>
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	0800d1a8 	.word	0x0800d1a8
 800251c:	0800d1b0 	.word	0x0800d1b0

08002520 <score_lcd>:

void score_lcd(){
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <score_lcd+0x2c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2310      	movs	r3, #16
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	2300      	movs	r3, #0
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2305      	movs	r3, #5
 800253c:	21dd      	movs	r1, #221	; 0xdd
 800253e:	2005      	movs	r0, #5
 8002540:	f000 fd3c 	bl	8002fbc <lcd_ShowIntNum>
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000004 	.word	0x20000004

08002550 <pause_lcd>:

void pause_lcd(){
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_pause);
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <pause_lcd+0x74>)
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800255e:	22f0      	movs	r2, #240	; 0xf0
 8002560:	2100      	movs	r1, #0
 8002562:	2000      	movs	r0, #0
 8002564:	f000 fda8 	bl	80030b8 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002568:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	23b9      	movs	r3, #185	; 0xb9
 8002570:	22b9      	movs	r2, #185	; 0xb9
 8002572:	2196      	movs	r1, #150	; 0x96
 8002574:	2041      	movs	r0, #65	; 0x41
 8002576:	f000 fb2d 	bl	8002bd4 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 800257a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	23eb      	movs	r3, #235	; 0xeb
 8002582:	22b9      	movs	r2, #185	; 0xb9
 8002584:	21c8      	movs	r1, #200	; 0xc8
 8002586:	2041      	movs	r0, #65	; 0x41
 8002588:	f000 fb24 	bl	8002bd4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 800258c:	2301      	movs	r3, #1
 800258e:	9302      	str	r3, [sp, #8]
 8002590:	2318      	movs	r3, #24
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	2300      	movs	r3, #0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2300      	movs	r3, #0
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <pause_lcd+0x78>)
 800259c:	219b      	movs	r1, #155	; 0x9b
 800259e:	205a      	movs	r0, #90	; 0x5a
 80025a0:	f001 f85c 	bl	800365c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 80025a4:	2301      	movs	r3, #1
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	2318      	movs	r3, #24
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2300      	movs	r3, #0
 80025b2:	4a06      	ldr	r2, [pc, #24]	; (80025cc <pause_lcd+0x7c>)
 80025b4:	21cd      	movs	r1, #205	; 0xcd
 80025b6:	2064      	movs	r0, #100	; 0x64
 80025b8:	f001 f850 	bl	800365c <lcd_ShowStr>
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	08080a28 	.word	0x08080a28
 80025c8:	0800d1b8 	.word	0x0800d1b8
 80025cc:	0800d188 	.word	0x0800d188

080025d0 <game_over_lcd>:

void game_over_lcd(){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <game_over_lcd+0x68>)
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80025de:	22f0      	movs	r2, #240	; 0xf0
 80025e0:	2100      	movs	r1, #0
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 fd68 	bl	80030b8 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 80025e8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	23eb      	movs	r3, #235	; 0xeb
 80025f0:	22b9      	movs	r2, #185	; 0xb9
 80025f2:	21c8      	movs	r1, #200	; 0xc8
 80025f4:	2041      	movs	r0, #65	; 0x41
 80025f6:	f000 faed 	bl	8002bd4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80025fa:	2300      	movs	r3, #0
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	23eb      	movs	r3, #235	; 0xeb
 8002600:	22b9      	movs	r2, #185	; 0xb9
 8002602:	21c8      	movs	r1, #200	; 0xc8
 8002604:	2041      	movs	r0, #65	; 0x41
 8002606:	f000 fbb6 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 800260a:	2300      	movs	r3, #0
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	23ea      	movs	r3, #234	; 0xea
 8002610:	22b8      	movs	r2, #184	; 0xb8
 8002612:	21c9      	movs	r1, #201	; 0xc9
 8002614:	2042      	movs	r0, #66	; 0x42
 8002616:	f000 fbae 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 800261a:	2301      	movs	r3, #1
 800261c:	9302      	str	r3, [sp, #8]
 800261e:	2318      	movs	r3, #24
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2300      	movs	r3, #0
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <game_over_lcd+0x6c>)
 800262a:	21cd      	movs	r1, #205	; 0xcd
 800262c:	2064      	movs	r0, #100	; 0x64
 800262e:	f001 f815 	bl	800365c <lcd_ShowStr>
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	080a6228 	.word	0x080a6228
 800263c:	0800d188 	.word	0x0800d188

08002640 <youwin_lcd>:

void youwin_lcd(){
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <youwin_lcd+0x68>)
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800264e:	22f0      	movs	r2, #240	; 0xf0
 8002650:	2100      	movs	r1, #0
 8002652:	2000      	movs	r0, #0
 8002654:	f000 fd30 	bl	80030b8 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002658:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	23eb      	movs	r3, #235	; 0xeb
 8002660:	22b9      	movs	r2, #185	; 0xb9
 8002662:	21c8      	movs	r1, #200	; 0xc8
 8002664:	2041      	movs	r0, #65	; 0x41
 8002666:	f000 fab5 	bl	8002bd4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800266a:	2300      	movs	r3, #0
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	23eb      	movs	r3, #235	; 0xeb
 8002670:	22b9      	movs	r2, #185	; 0xb9
 8002672:	21c8      	movs	r1, #200	; 0xc8
 8002674:	2041      	movs	r0, #65	; 0x41
 8002676:	f000 fb7e 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	23ea      	movs	r3, #234	; 0xea
 8002680:	22b8      	movs	r2, #184	; 0xb8
 8002682:	21c9      	movs	r1, #201	; 0xc9
 8002684:	2042      	movs	r0, #66	; 0x42
 8002686:	f000 fb76 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 800268a:	2301      	movs	r3, #1
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2318      	movs	r3, #24
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	2300      	movs	r3, #0
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2300      	movs	r3, #0
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <youwin_lcd+0x6c>)
 800269a:	21cd      	movs	r1, #205	; 0xcd
 800269c:	2064      	movs	r0, #100	; 0x64
 800269e:	f000 ffdd 	bl	800365c <lcd_ShowStr>
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	080cba28 	.word	0x080cba28
 80026ac:	0800d188 	.word	0x0800d188

080026b0 <home_not_select>:

void home_not_select(){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80026b6:	f248 4330 	movw	r3, #33840	; 0x8430
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	23b9      	movs	r3, #185	; 0xb9
 80026be:	22b9      	movs	r2, #185	; 0xb9
 80026c0:	2196      	movs	r1, #150	; 0x96
 80026c2:	2041      	movs	r0, #65	; 0x41
 80026c4:	f000 fb57 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80026c8:	f248 4330 	movw	r3, #33840	; 0x8430
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	23b8      	movs	r3, #184	; 0xb8
 80026d0:	22b8      	movs	r2, #184	; 0xb8
 80026d2:	2197      	movs	r1, #151	; 0x97
 80026d4:	2042      	movs	r0, #66	; 0x42
 80026d6:	f000 fb4e 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80026da:	f248 4330 	movw	r3, #33840	; 0x8430
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	23eb      	movs	r3, #235	; 0xeb
 80026e2:	22b9      	movs	r2, #185	; 0xb9
 80026e4:	21c8      	movs	r1, #200	; 0xc8
 80026e6:	2041      	movs	r0, #65	; 0x41
 80026e8:	f000 fb45 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80026ec:	f248 4330 	movw	r3, #33840	; 0x8430
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	23ea      	movs	r3, #234	; 0xea
 80026f4:	22b8      	movs	r2, #184	; 0xb8
 80026f6:	21c9      	movs	r1, #201	; 0xc9
 80026f8:	2042      	movs	r0, #66	; 0x42
 80026fa:	f000 fb3c 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80026fe:	f248 4330 	movw	r3, #33840	; 0x8430
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f240 131d 	movw	r3, #285	; 0x11d
 8002708:	22b9      	movs	r2, #185	; 0xb9
 800270a:	21fa      	movs	r1, #250	; 0xfa
 800270c:	2041      	movs	r0, #65	; 0x41
 800270e:	f000 fb32 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002712:	f248 4330 	movw	r3, #33840	; 0x8430
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800271c:	22b8      	movs	r2, #184	; 0xb8
 800271e:	21fb      	movs	r1, #251	; 0xfb
 8002720:	2042      	movs	r0, #66	; 0x42
 8002722:	f000 fb28 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <home_second_lcd>:

void home_second_lcd(){
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af02      	add	r7, sp, #8
	home_not_select();
 8002732:	f7ff ffbd 	bl	80026b0 <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	23b9      	movs	r3, #185	; 0xb9
 800273c:	22b9      	movs	r2, #185	; 0xb9
 800273e:	2196      	movs	r1, #150	; 0x96
 8002740:	2041      	movs	r0, #65	; 0x41
 8002742:	f000 fb18 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8002746:	2300      	movs	r3, #0
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	23b8      	movs	r3, #184	; 0xb8
 800274c:	22b8      	movs	r2, #184	; 0xb8
 800274e:	2197      	movs	r1, #151	; 0x97
 8002750:	2042      	movs	r0, #66	; 0x42
 8002752:	f000 fb10 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <home_third_lcd>:

void home_third_lcd(){
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af02      	add	r7, sp, #8
	home_not_select();
 8002762:	f7ff ffa5 	bl	80026b0 <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	23eb      	movs	r3, #235	; 0xeb
 800276c:	22b9      	movs	r2, #185	; 0xb9
 800276e:	21c8      	movs	r1, #200	; 0xc8
 8002770:	2041      	movs	r0, #65	; 0x41
 8002772:	f000 fb00 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	23ea      	movs	r3, #234	; 0xea
 800277c:	22b8      	movs	r2, #184	; 0xb8
 800277e:	21c9      	movs	r1, #201	; 0xc9
 8002780:	2042      	movs	r0, #66	; 0x42
 8002782:	f000 faf8 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <home_forth_lcd>:

void home_forth_lcd(){
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af02      	add	r7, sp, #8
	home_not_select();
 8002792:	f7ff ff8d 	bl	80026b0 <home_not_select>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002796:	2300      	movs	r3, #0
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	f240 131d 	movw	r3, #285	; 0x11d
 800279e:	22b9      	movs	r2, #185	; 0xb9
 80027a0:	21fa      	movs	r1, #250	; 0xfa
 80027a2:	2041      	movs	r0, #65	; 0x41
 80027a4:	f000 fae7 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80027a8:	2300      	movs	r3, #0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80027b0:	22b8      	movs	r2, #184	; 0xb8
 80027b2:	21fb      	movs	r1, #251	; 0xfb
 80027b4:	2042      	movs	r0, #66	; 0x42
 80027b6:	f000 fade 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <mode_first_lcd>:

void mode_first_lcd(){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80027c6:	2300      	movs	r3, #0
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2387      	movs	r3, #135	; 0x87
 80027cc:	22b9      	movs	r2, #185	; 0xb9
 80027ce:	2164      	movs	r1, #100	; 0x64
 80027d0:	2041      	movs	r0, #65	; 0x41
 80027d2:	f000 fad0 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80027d6:	2300      	movs	r3, #0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	2386      	movs	r3, #134	; 0x86
 80027dc:	22b8      	movs	r2, #184	; 0xb8
 80027de:	2165      	movs	r1, #101	; 0x65
 80027e0:	2042      	movs	r0, #66	; 0x42
 80027e2:	f000 fac8 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, BLACK);
	home_not_select();
 80027e6:	f7ff ff63 	bl	80026b0 <home_not_select>
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <mode_second_lcd>:

void mode_second_lcd(){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80027f6:	f248 4330 	movw	r3, #33840	; 0x8430
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2387      	movs	r3, #135	; 0x87
 80027fe:	22b9      	movs	r2, #185	; 0xb9
 8002800:	2164      	movs	r1, #100	; 0x64
 8002802:	2041      	movs	r0, #65	; 0x41
 8002804:	f000 fab7 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8002808:	f248 4330 	movw	r3, #33840	; 0x8430
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2386      	movs	r3, #134	; 0x86
 8002810:	22b8      	movs	r2, #184	; 0xb8
 8002812:	2165      	movs	r1, #101	; 0x65
 8002814:	2042      	movs	r0, #66	; 0x42
 8002816:	f000 faae 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_second_lcd();
 800281a:	f7ff ff87 	bl	800272c <home_second_lcd>
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <mode_third_lcd>:

void mode_third_lcd(){
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800282a:	f248 4330 	movw	r3, #33840	; 0x8430
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	2387      	movs	r3, #135	; 0x87
 8002832:	22b9      	movs	r2, #185	; 0xb9
 8002834:	2164      	movs	r1, #100	; 0x64
 8002836:	2041      	movs	r0, #65	; 0x41
 8002838:	f000 fa9d 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 800283c:	f248 4330 	movw	r3, #33840	; 0x8430
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2386      	movs	r3, #134	; 0x86
 8002844:	22b8      	movs	r2, #184	; 0xb8
 8002846:	2165      	movs	r1, #101	; 0x65
 8002848:	2042      	movs	r0, #66	; 0x42
 800284a:	f000 fa94 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_third_lcd();
 800284e:	f7ff ff85 	bl	800275c <home_third_lcd>
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <mode_forth_lcd>:

void mode_forth_lcd(){
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800285e:	f248 4330 	movw	r3, #33840	; 0x8430
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2387      	movs	r3, #135	; 0x87
 8002866:	22b9      	movs	r2, #185	; 0xb9
 8002868:	2164      	movs	r1, #100	; 0x64
 800286a:	2041      	movs	r0, #65	; 0x41
 800286c:	f000 fa83 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8002870:	f248 4330 	movw	r3, #33840	; 0x8430
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2386      	movs	r3, #134	; 0x86
 8002878:	22b8      	movs	r2, #184	; 0xb8
 800287a:	2165      	movs	r1, #101	; 0x65
 800287c:	2042      	movs	r0, #66	; 0x42
 800287e:	f000 fa7a 	bl	8002d76 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_forth_lcd();
 8002882:	f7ff ff83 	bl	800278c <home_forth_lcd>
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <point_head_lcd>:
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}

void point_head_lcd(struct Point head){
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af02      	add	r7, sp, #8
 8002892:	463b      	mov	r3, r7
 8002894:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(head.x, head.y, GREEN, RADIUS_SNAKE, 1);
 8002898:	6838      	ldr	r0, [r7, #0]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	2301      	movs	r3, #1
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2304      	movs	r3, #4
 80028a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028a6:	f000 fe6c 	bl	8003582 <lcd_DrawCircle>
	lcd_DrawCircle(head.x, head.y, BLACK, 1, 1);
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	2301      	movs	r3, #1
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2301      	movs	r3, #1
 80028b4:	2200      	movs	r2, #0
 80028b6:	f000 fe64 	bl	8003582 <lcd_DrawCircle>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <point_snake_lcd>:

void point_snake_lcd(struct Point snake){
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af02      	add	r7, sp, #8
 80028c8:	463b      	mov	r3, r7
 80028ca:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(snake.x, snake.y, GREEN, RADIUS_SNAKE, 1);
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	2301      	movs	r3, #1
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2304      	movs	r3, #4
 80028d8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028dc:	f000 fe51 	bl	8003582 <lcd_DrawCircle>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b03      	subs	r3, #3
 80028e6:	b298      	uxth	r0, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b03      	subs	r3, #3
 80028ee:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80028f0:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3304      	adds	r3, #4
 80028f6:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80028f8:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3304      	adds	r3, #4
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8002904:	9400      	str	r4, [sp, #0]
 8002906:	f000 f9b2 	bl	8002c6e <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b03      	subs	r3, #3
 8002910:	b298      	uxth	r0, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b02      	subs	r3, #2
 8002918:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 800291a:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 800291c:	b29b      	uxth	r3, r3
 800291e:	3303      	adds	r3, #3
 8002920:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8002922:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8002924:	b29b      	uxth	r3, r3
 8002926:	3304      	adds	r3, #4
 8002928:	b29b      	uxth	r3, r3
 800292a:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800292e:	9400      	str	r4, [sp, #0]
 8002930:	f000 f99d 	bl	8002c6e <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b02      	subs	r3, #2
 800293a:	b298      	uxth	r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b03      	subs	r3, #3
 8002942:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 8002944:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8002946:	b29b      	uxth	r3, r3
 8002948:	3304      	adds	r3, #4
 800294a:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 800294c:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 800294e:	b29b      	uxth	r3, r3
 8002950:	3303      	adds	r3, #3
 8002952:	b29b      	uxth	r3, r3
 8002954:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8002958:	9400      	str	r4, [sp, #0]
 800295a:	f000 f988 	bl	8002c6e <lcd_DrawLine>
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}

08002966 <point_food_lcd>:

void point_food_lcd(struct Point food){
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af02      	add	r7, sp, #8
 800296c:	463b      	mov	r3, r7
 800296e:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(food.x, food.y, RED, RADIUS_SNAKE, 1);
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	2301      	movs	r3, #1
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2304      	movs	r3, #4
 800297c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002980:	f000 fdff 	bl	8003582 <lcd_DrawCircle>
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <point_clr>:

void point_clr(struct Point clr){
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af02      	add	r7, sp, #8
 8002992:	463b      	mov	r3, r7
 8002994:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(clr.x, clr.y, WHITE, RADIUS_SNAKE, 1);
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	2301      	movs	r3, #1
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2304      	movs	r3, #4
 80029a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a6:	f000 fdec 	bl	8003582 <lcd_DrawCircle>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <reset_7seg>:

void reset_7seg(){
 80029b2:	b580      	push	{r7, lr}
 80029b4:	af00      	add	r7, sp, #0
	led7_SetDigit(0, 1, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2101      	movs	r1, #1
 80029ba:	2000      	movs	r0, #0
 80029bc:	f000 ff4a 	bl	8003854 <led7_SetDigit>
	led7_SetDigit(0, 2, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2102      	movs	r1, #2
 80029c4:	2000      	movs	r0, #0
 80029c6:	f000 ff45 	bl	8003854 <led7_SetDigit>
	led7_SetDigit(0, 3, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2103      	movs	r1, #3
 80029ce:	2000      	movs	r0, #0
 80029d0:	f000 ff40 	bl	8003854 <led7_SetDigit>
	led7_SetDigit(0, 4, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2104      	movs	r1, #4
 80029d8:	2000      	movs	r0, #0
 80029da:	f000 ff3b 	bl	8003854 <led7_SetDigit>
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <mode_7seg>:

void mode_7seg(){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	switch (status) {
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <mode_7seg+0x44>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b0d      	cmp	r3, #13
 80029ee:	d012      	beq.n	8002a16 <mode_7seg+0x32>
 80029f0:	2b0d      	cmp	r3, #13
 80029f2:	dc16      	bgt.n	8002a22 <mode_7seg+0x3e>
 80029f4:	2b0b      	cmp	r3, #11
 80029f6:	d002      	beq.n	80029fe <mode_7seg+0x1a>
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d006      	beq.n	8002a0a <mode_7seg+0x26>
			break;
		case TIME:
			led7_SetDigit(3, 2, 0);
			break;
		default:
			break;
 80029fc:	e011      	b.n	8002a22 <mode_7seg+0x3e>
			led7_SetDigit(1, 2, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2102      	movs	r1, #2
 8002a02:	2001      	movs	r0, #1
 8002a04:	f000 ff26 	bl	8003854 <led7_SetDigit>
			break;
 8002a08:	e00c      	b.n	8002a24 <mode_7seg+0x40>
			led7_SetDigit(2, 2, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	2002      	movs	r0, #2
 8002a10:	f000 ff20 	bl	8003854 <led7_SetDigit>
			break;
 8002a14:	e006      	b.n	8002a24 <mode_7seg+0x40>
			led7_SetDigit(3, 2, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2102      	movs	r1, #2
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f000 ff1a 	bl	8003854 <led7_SetDigit>
			break;
 8002a20:	e000      	b.n	8002a24 <mode_7seg+0x40>
			break;
 8002a22:	bf00      	nop
	}
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200000f8 	.word	0x200000f8

08002a2c <update_7seg_time>:

void update_7seg_time(){
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	led7_SetDigit(counter_time / 10, 3, 0);
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <update_7seg_time+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <update_7seg_time+0x44>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	08db      	lsrs	r3, r3, #3
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2103      	movs	r1, #3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 ff07 	bl	8003854 <led7_SetDigit>
	led7_SetDigit(counter_time % 10, 4, 0);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <update_7seg_time+0x40>)
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <update_7seg_time+0x44>)
 8002a4c:	fba3 2301 	umull	r2, r3, r3, r1
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	1aca      	subs	r2, r1, r3
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2104      	movs	r1, #4
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fef6 	bl	8003854 <led7_SetDigit>
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000104 	.word	0x20000104
 8002a70:	cccccccd 	.word	0xcccccccd

08002a74 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <LCD_WR_REG+0x1c>)
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	8013      	strh	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	600ffffe 	.word	0x600ffffe

08002a94 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <LCD_WR_DATA+0x1c>)
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	8053      	strh	r3, [r2, #2]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	600ffffe 	.word	0x600ffffe

08002ab4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <LCD_RD_DATA+0x20>)
 8002abc:	885b      	ldrh	r3, [r3, #2]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	b29b      	uxth	r3, r3
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	600ffffe 	.word	0x600ffffe

08002ad8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4604      	mov	r4, r0
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	80fb      	strh	r3, [r7, #6]
 8002aea:	4603      	mov	r3, r0
 8002aec:	80bb      	strh	r3, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	807b      	strh	r3, [r7, #2]
 8002af2:	4613      	mov	r3, r2
 8002af4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002af6:	202a      	movs	r0, #42	; 0x2a
 8002af8:	f7ff ffbc 	bl	8002a74 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ffc6 	bl	8002a94 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ffc0 	bl	8002a94 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ffba 	bl	8002a94 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ffb4 	bl	8002a94 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8002b2c:	202b      	movs	r0, #43	; 0x2b
 8002b2e:	f7ff ffa1 	bl	8002a74 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002b32:	88bb      	ldrh	r3, [r7, #4]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ffab 	bl	8002a94 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8002b3e:	88bb      	ldrh	r3, [r7, #4]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ffa5 	bl	8002a94 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8002b4a:	883b      	ldrh	r3, [r7, #0]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff9f 	bl	8002a94 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002b56:	883b      	ldrh	r3, [r7, #0]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff99 	bl	8002a94 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002b62:	202c      	movs	r0, #44	; 0x2c
 8002b64:	f7ff ff86 	bl	8002a74 <LCD_WR_REG>
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd90      	pop	{r4, r7, pc}

08002b70 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <lcd_Clear+0x60>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <lcd_Clear+0x60>)
 8002b84:	885b      	ldrh	r3, [r3, #2]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7ff ffa3 	bl	8002ad8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	81fb      	strh	r3, [r7, #14]
 8002b96:	e011      	b.n	8002bbc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	81bb      	strh	r3, [r7, #12]
 8002b9c:	e006      	b.n	8002bac <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff77 	bl	8002a94 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8002ba6:	89bb      	ldrh	r3, [r7, #12]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	81bb      	strh	r3, [r7, #12]
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <lcd_Clear+0x60>)
 8002bae:	885b      	ldrh	r3, [r3, #2]
 8002bb0:	89ba      	ldrh	r2, [r7, #12]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d3f3      	bcc.n	8002b9e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8002bb6:	89fb      	ldrh	r3, [r7, #14]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	81fb      	strh	r3, [r7, #14]
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <lcd_Clear+0x60>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	89fa      	ldrh	r2, [r7, #14]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3e8      	bcc.n	8002b98 <lcd_Clear+0x28>
		}
	}
}
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200005d0 	.word	0x200005d0

08002bd4 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	461a      	mov	r2, r3
 8002be2:	4623      	mov	r3, r4
 8002be4:	80fb      	strh	r3, [r7, #6]
 8002be6:	4603      	mov	r3, r0
 8002be8:	80bb      	strh	r3, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	883b      	ldrh	r3, [r7, #0]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	88b9      	ldrh	r1, [r7, #4]
 8002c00:	88f8      	ldrh	r0, [r7, #6]
 8002c02:	f7ff ff69 	bl	8002ad8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002c06:	88bb      	ldrh	r3, [r7, #4]
 8002c08:	81fb      	strh	r3, [r7, #14]
 8002c0a:	e010      	b.n	8002c2e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	81bb      	strh	r3, [r7, #12]
 8002c10:	e006      	b.n	8002c20 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002c12:	8c3b      	ldrh	r3, [r7, #32]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff3d 	bl	8002a94 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8002c1a:	89bb      	ldrh	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	81bb      	strh	r3, [r7, #12]
 8002c20:	89ba      	ldrh	r2, [r7, #12]
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d3f4      	bcc.n	8002c12 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	81fb      	strh	r3, [r7, #14]
 8002c2e:	89fa      	ldrh	r2, [r7, #14]
 8002c30:	883b      	ldrh	r3, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3ea      	bcc.n	8002c0c <lcd_Fill+0x38>
		}
	}
}
 8002c36:	bf00      	nop
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}

08002c40 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	80bb      	strh	r3, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002c52:	88bb      	ldrh	r3, [r7, #4]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	88b9      	ldrh	r1, [r7, #4]
 8002c58:	88f8      	ldrh	r0, [r7, #6]
 8002c5a:	f7ff ff3d 	bl	8002ad8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff17 	bl	8002a94 <LCD_WR_DATA>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8002c6e:	b590      	push	{r4, r7, lr}
 8002c70:	b08d      	sub	sp, #52	; 0x34
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4604      	mov	r4, r0
 8002c76:	4608      	mov	r0, r1
 8002c78:	4611      	mov	r1, r2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	80fb      	strh	r3, [r7, #6]
 8002c80:	4603      	mov	r3, r0
 8002c82:	80bb      	strh	r3, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8002c94:	887a      	ldrh	r2, [r7, #2]
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8002c9c:	883a      	ldrh	r2, [r7, #0]
 8002c9e:	88bb      	ldrh	r3, [r7, #4]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8002ca8:	88bb      	ldrh	r3, [r7, #4]
 8002caa:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	dd02      	ble.n	8002cb8 <lcd_DrawLine+0x4a>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e00b      	b.n	8002cd0 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <lcd_DrawLine+0x56>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e005      	b.n	8002cd0 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	425b      	negs	r3, r3
 8002cce:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dd02      	ble.n	8002cdc <lcd_DrawLine+0x6e>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	e00b      	b.n	8002cf4 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <lcd_DrawLine+0x7a>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	e005      	b.n	8002cf4 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	425b      	negs	r3, r3
 8002cf2:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dd02      	ble.n	8002d02 <lcd_DrawLine+0x94>
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e001      	b.n	8002d06 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d0a:	e02b      	b.n	8002d64 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	b291      	uxth	r1, r2
 8002d14:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff91 	bl	8002c40 <lcd_DrawPoint>
		xerr+=delta_x;
 8002d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	4413      	add	r3, r2
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8002d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dd07      	ble.n	8002d46 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8002d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4413      	add	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dd07      	ble.n	8002d5e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8002d5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d60:	3301      	adds	r3, #1
 8002d62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dacf      	bge.n	8002d0c <lcd_DrawLine+0x9e>
		}
	}
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3734      	adds	r7, #52	; 0x34
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd90      	pop	{r4, r7, pc}

08002d76 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8002d76:	b590      	push	{r4, r7, lr}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af02      	add	r7, sp, #8
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	4608      	mov	r0, r1
 8002d80:	4611      	mov	r1, r2
 8002d82:	461a      	mov	r2, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	80fb      	strh	r3, [r7, #6]
 8002d88:	4603      	mov	r3, r0
 8002d8a:	80bb      	strh	r3, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8002d94:	88bc      	ldrh	r4, [r7, #4]
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	88b9      	ldrh	r1, [r7, #4]
 8002d9a:	88f8      	ldrh	r0, [r7, #6]
 8002d9c:	8b3b      	ldrh	r3, [r7, #24]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	4623      	mov	r3, r4
 8002da2:	f7ff ff64 	bl	8002c6e <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8002da6:	883c      	ldrh	r4, [r7, #0]
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	88b9      	ldrh	r1, [r7, #4]
 8002dac:	88f8      	ldrh	r0, [r7, #6]
 8002dae:	8b3b      	ldrh	r3, [r7, #24]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	4623      	mov	r3, r4
 8002db4:	f7ff ff5b 	bl	8002c6e <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8002db8:	883c      	ldrh	r4, [r7, #0]
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	8839      	ldrh	r1, [r7, #0]
 8002dbe:	88f8      	ldrh	r0, [r7, #6]
 8002dc0:	8b3b      	ldrh	r3, [r7, #24]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	f7ff ff52 	bl	8002c6e <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8002dca:	883c      	ldrh	r4, [r7, #0]
 8002dcc:	887a      	ldrh	r2, [r7, #2]
 8002dce:	88b9      	ldrh	r1, [r7, #4]
 8002dd0:	8878      	ldrh	r0, [r7, #2]
 8002dd2:	8b3b      	ldrh	r3, [r7, #24]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	f7ff ff49 	bl	8002c6e <lcd_DrawLine>
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}

08002de4 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4604      	mov	r4, r0
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	80fb      	strh	r3, [r7, #6]
 8002df6:	4603      	mov	r3, r0
 8002df8:	80bb      	strh	r3, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	70fb      	strb	r3, [r7, #3]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8002e0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	fb12 f303 	smulbb	r3, r2, r3
 8002e3a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	3b20      	subs	r3, #32
 8002e40:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29c      	uxth	r4, r3
 8002e50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	88bb      	ldrh	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	88b9      	ldrh	r1, [r7, #4]
 8002e62:	88f8      	ldrh	r0, [r7, #6]
 8002e64:	4622      	mov	r2, r4
 8002e66:	f7ff fe37 	bl	8002ad8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	827b      	strh	r3, [r7, #18]
 8002e6e:	e07a      	b.n	8002f66 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002e70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d028      	beq.n	8002eca <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8002e78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d108      	bne.n	8002e92 <lcd_ShowChar+0xae>
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	8a7b      	ldrh	r3, [r7, #18]
 8002e84:	493c      	ldr	r1, [pc, #240]	; (8002f78 <lcd_ShowChar+0x194>)
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	440a      	add	r2, r1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	75fb      	strb	r3, [r7, #23]
 8002e90:	e01b      	b.n	8002eca <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8002e92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e96:	2b18      	cmp	r3, #24
 8002e98:	d10b      	bne.n	8002eb2 <lcd_ShowChar+0xce>
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	8a79      	ldrh	r1, [r7, #18]
 8002e9e:	4837      	ldr	r0, [pc, #220]	; (8002f7c <lcd_ShowChar+0x198>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	4403      	add	r3, r0
 8002eaa:	440b      	add	r3, r1
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	75fb      	strb	r3, [r7, #23]
 8002eb0:	e00b      	b.n	8002eca <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8002eb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d15a      	bne.n	8002f70 <lcd_ShowChar+0x18c>
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	8a7b      	ldrh	r3, [r7, #18]
 8002ebe:	4930      	ldr	r1, [pc, #192]	; (8002f80 <lcd_ShowChar+0x19c>)
 8002ec0:	0192      	lsls	r2, r2, #6
 8002ec2:	440a      	add	r2, r1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75bb      	strb	r3, [r7, #22]
 8002ece:	e044      	b.n	8002f5a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002ed0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d120      	bne.n	8002f1a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002ed8:	7dfa      	ldrb	r2, [r7, #23]
 8002eda:	7dbb      	ldrb	r3, [r7, #22]
 8002edc:	fa42 f303 	asr.w	r3, r2, r3
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d004      	beq.n	8002ef2 <lcd_ShowChar+0x10e>
 8002ee8:	883b      	ldrh	r3, [r7, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fdd2 	bl	8002a94 <LCD_WR_DATA>
 8002ef0:	e003      	b.n	8002efa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8002ef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fdcd 	bl	8002a94 <LCD_WR_DATA>
				m++;
 8002efa:	7d7b      	ldrb	r3, [r7, #21]
 8002efc:	3301      	adds	r3, #1
 8002efe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002f00:	7d7b      	ldrb	r3, [r7, #21]
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f08:	fb02 f201 	mul.w	r2, r2, r1
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d11f      	bne.n	8002f54 <lcd_ShowChar+0x170>
				{
					m=0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	757b      	strb	r3, [r7, #21]
					break;
 8002f18:	e022      	b.n	8002f60 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002f1a:	7dfa      	ldrb	r2, [r7, #23]
 8002f1c:	7dbb      	ldrb	r3, [r7, #22]
 8002f1e:	fa42 f303 	asr.w	r3, r2, r3
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <lcd_ShowChar+0x152>
 8002f2a:	883a      	ldrh	r2, [r7, #0]
 8002f2c:	88b9      	ldrh	r1, [r7, #4]
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fe85 	bl	8002c40 <lcd_DrawPoint>
				x++;
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	8a3b      	ldrh	r3, [r7, #16]
 8002f40:	1ad2      	subs	r2, r2, r3
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d105      	bne.n	8002f54 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002f48:	8a3b      	ldrh	r3, [r7, #16]
 8002f4a:	80fb      	strh	r3, [r7, #6]
					y++;
 8002f4c:	88bb      	ldrh	r3, [r7, #4]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	80bb      	strh	r3, [r7, #4]
					break;
 8002f52:	e005      	b.n	8002f60 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002f54:	7dbb      	ldrb	r3, [r7, #22]
 8002f56:	3301      	adds	r3, #1
 8002f58:	75bb      	strb	r3, [r7, #22]
 8002f5a:	7dbb      	ldrb	r3, [r7, #22]
 8002f5c:	2b07      	cmp	r3, #7
 8002f5e:	d9b7      	bls.n	8002ed0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002f60:	8a7b      	ldrh	r3, [r7, #18]
 8002f62:	3301      	adds	r3, #1
 8002f64:	827b      	strh	r3, [r7, #18]
 8002f66:	8a7a      	ldrh	r2, [r7, #18]
 8002f68:	89bb      	ldrh	r3, [r7, #12]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d380      	bcc.n	8002e70 <lcd_ShowChar+0x8c>
 8002f6e:	e000      	b.n	8002f72 <lcd_ShowChar+0x18e>
		else return;
 8002f70:	bf00      	nop
				}
			}
		}
	}
}
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}
 8002f78:	0800d2a8 	.word	0x0800d2a8
 8002f7c:	0800d898 	.word	0x0800d898
 8002f80:	0800ea68 	.word	0x0800ea68

08002f84 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	71fb      	strb	r3, [r7, #7]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002f98:	e004      	b.n	8002fa4 <mypow+0x20>
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	79bb      	ldrb	r3, [r7, #6]
 8002fa6:	1e5a      	subs	r2, r3, #1
 8002fa8:	71ba      	strb	r2, [r7, #6]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f5      	bne.n	8002f9a <mypow+0x16>
	return result;
 8002fae:	68fb      	ldr	r3, [r7, #12]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af04      	add	r7, sp, #16
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4623      	mov	r3, r4
 8002fcc:	80fb      	strh	r3, [r7, #6]
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80bb      	strh	r3, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	807b      	strh	r3, [r7, #2]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002fde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e059      	b.n	80030a0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002fec:	887c      	ldrh	r4, [r7, #2]
 8002fee:	787a      	ldrb	r2, [r7, #1]
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	200a      	movs	r0, #10
 8002ffe:	f7ff ffc1 	bl	8002f84 <mypow>
 8003002:	4603      	mov	r3, r0
 8003004:	fbb4 f1f3 	udiv	r1, r4, r3
 8003008:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <lcd_ShowIntNum+0xf8>)
 800300a:	fba3 2301 	umull	r2, r3, r3, r1
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	1aca      	subs	r2, r1, r3
 800301a:	4613      	mov	r3, r2
 800301c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800301e:	7bbb      	ldrb	r3, [r7, #14]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d121      	bne.n	8003068 <lcd_ShowIntNum+0xac>
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	787b      	ldrb	r3, [r7, #1]
 8003028:	3b01      	subs	r3, #1
 800302a:	429a      	cmp	r2, r3
 800302c:	da1c      	bge.n	8003068 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800302e:	7b3b      	ldrb	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d117      	bne.n	8003064 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	b29a      	uxth	r2, r3
 8003038:	7b7b      	ldrb	r3, [r7, #13]
 800303a:	b29b      	uxth	r3, r3
 800303c:	fb12 f303 	smulbb	r3, r2, r3
 8003040:	b29a      	uxth	r2, r3
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	4413      	add	r3, r2
 8003046:	b298      	uxth	r0, r3
 8003048:	8c3a      	ldrh	r2, [r7, #32]
 800304a:	88b9      	ldrh	r1, [r7, #4]
 800304c:	2300      	movs	r3, #0
 800304e:	9302      	str	r3, [sp, #8]
 8003050:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	2220      	movs	r2, #32
 800305e:	f7ff fec1 	bl	8002de4 <lcd_ShowChar>
				continue;
 8003062:	e01a      	b.n	800309a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8003064:	2301      	movs	r3, #1
 8003066:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	b29a      	uxth	r2, r3
 800306c:	7b7b      	ldrb	r3, [r7, #13]
 800306e:	b29b      	uxth	r3, r3
 8003070:	fb12 f303 	smulbb	r3, r2, r3
 8003074:	b29a      	uxth	r2, r3
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	4413      	add	r3, r2
 800307a:	b298      	uxth	r0, r3
 800307c:	7b3b      	ldrb	r3, [r7, #12]
 800307e:	3330      	adds	r3, #48	; 0x30
 8003080:	b2da      	uxtb	r2, r3
 8003082:	8c3c      	ldrh	r4, [r7, #32]
 8003084:	88b9      	ldrh	r1, [r7, #4]
 8003086:	2300      	movs	r3, #0
 8003088:	9302      	str	r3, [sp, #8]
 800308a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4623      	mov	r3, r4
 8003096:	f7ff fea5 	bl	8002de4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	3301      	adds	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	787b      	ldrb	r3, [r7, #1]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d3a1      	bcc.n	8002fec <lcd_ShowIntNum+0x30>
	}
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd90      	pop	{r4, r7, pc}
 80030b2:	bf00      	nop
 80030b4:	cccccccd 	.word	0xcccccccd

080030b8 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4604      	mov	r4, r0
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4623      	mov	r3, r4
 80030c8:	80fb      	strh	r3, [r7, #6]
 80030ca:	4603      	mov	r3, r0
 80030cc:	80bb      	strh	r3, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	807b      	strh	r3, [r7, #2]
 80030d2:	4613      	mov	r3, r2
 80030d4:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	4413      	add	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29c      	uxth	r4, r3
 80030e6:	88ba      	ldrh	r2, [r7, #4]
 80030e8:	883b      	ldrh	r3, [r7, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	88b9      	ldrh	r1, [r7, #4]
 80030f4:	88f8      	ldrh	r0, [r7, #6]
 80030f6:	4622      	mov	r2, r4
 80030f8:	f7ff fcee 	bl	8002ad8 <lcd_AddressSet>
	for(i=0;i<length;i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	82fb      	strh	r3, [r7, #22]
 8003100:	e027      	b.n	8003152 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8003102:	2300      	movs	r3, #0
 8003104:	82bb      	strh	r3, [r7, #20]
 8003106:	e01d      	b.n	8003144 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	3301      	adds	r3, #1
 800311a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b21a      	sxth	r2, r3
 8003128:	7bbb      	ldrb	r3, [r7, #14]
 800312a:	b21b      	sxth	r3, r3
 800312c:	4313      	orrs	r3, r2
 800312e:	b21b      	sxth	r3, r3
 8003130:	b29b      	uxth	r3, r3
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fcae 	bl	8002a94 <LCD_WR_DATA>
			k++;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	3301      	adds	r3, #1
 800313c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 800313e:	8abb      	ldrh	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	82bb      	strh	r3, [r7, #20]
 8003144:	8aba      	ldrh	r2, [r7, #20]
 8003146:	883b      	ldrh	r3, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d3dd      	bcc.n	8003108 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 800314c:	8afb      	ldrh	r3, [r7, #22]
 800314e:	3301      	adds	r3, #1
 8003150:	82fb      	strh	r3, [r7, #22]
 8003152:	8afa      	ldrh	r2, [r7, #22]
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3d3      	bcc.n	8003102 <lcd_ShowPicture+0x4a>
		}
	}
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	bd90      	pop	{r4, r7, pc}

08003164 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <lcd_SetDir+0x44>)
 8003180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003184:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <lcd_SetDir+0x44>)
 8003188:	22f0      	movs	r2, #240	; 0xf0
 800318a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800318c:	e006      	b.n	800319c <lcd_SetDir+0x38>
		lcddev.width=240;
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <lcd_SetDir+0x44>)
 8003190:	22f0      	movs	r2, #240	; 0xf0
 8003192:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <lcd_SetDir+0x44>)
 8003196:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800319a:	805a      	strh	r2, [r3, #2]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	200005d0 	.word	0x200005d0

080031ac <lcd_init>:


void lcd_init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80031b0:	2200      	movs	r2, #0
 80031b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031b6:	48aa      	ldr	r0, [pc, #680]	; (8003460 <lcd_init+0x2b4>)
 80031b8:	f003 fca2 	bl	8006b00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80031bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031c0:	f002 fbd6 	bl	8005970 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80031c4:	2201      	movs	r2, #1
 80031c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ca:	48a5      	ldr	r0, [pc, #660]	; (8003460 <lcd_init+0x2b4>)
 80031cc:	f003 fc98 	bl	8006b00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80031d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031d4:	f002 fbcc 	bl	8005970 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7ff ffc3 	bl	8003164 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80031de:	20d3      	movs	r0, #211	; 0xd3
 80031e0:	f7ff fc48 	bl	8002a74 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80031e4:	f7ff fc66 	bl	8002ab4 <LCD_RD_DATA>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b9d      	ldr	r3, [pc, #628]	; (8003464 <lcd_init+0x2b8>)
 80031ee:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80031f0:	f7ff fc60 	bl	8002ab4 <LCD_RD_DATA>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b9a      	ldr	r3, [pc, #616]	; (8003464 <lcd_init+0x2b8>)
 80031fa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80031fc:	f7ff fc5a 	bl	8002ab4 <LCD_RD_DATA>
 8003200:	4603      	mov	r3, r0
 8003202:	461a      	mov	r2, r3
 8003204:	4b97      	ldr	r3, [pc, #604]	; (8003464 <lcd_init+0x2b8>)
 8003206:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8003208:	4b96      	ldr	r3, [pc, #600]	; (8003464 <lcd_init+0x2b8>)
 800320a:	889b      	ldrh	r3, [r3, #4]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b94      	ldr	r3, [pc, #592]	; (8003464 <lcd_init+0x2b8>)
 8003212:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8003214:	f7ff fc4e 	bl	8002ab4 <LCD_RD_DATA>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b91      	ldr	r3, [pc, #580]	; (8003464 <lcd_init+0x2b8>)
 800321e:	889b      	ldrh	r3, [r3, #4]
 8003220:	4313      	orrs	r3, r2
 8003222:	b29a      	uxth	r2, r3
 8003224:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <lcd_init+0x2b8>)
 8003226:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8003228:	20cf      	movs	r0, #207	; 0xcf
 800322a:	f7ff fc23 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7ff fc30 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8003234:	20c1      	movs	r0, #193	; 0xc1
 8003236:	f7ff fc2d 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800323a:	2030      	movs	r0, #48	; 0x30
 800323c:	f7ff fc2a 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8003240:	20ed      	movs	r0, #237	; 0xed
 8003242:	f7ff fc17 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8003246:	2064      	movs	r0, #100	; 0x64
 8003248:	f7ff fc24 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800324c:	2003      	movs	r0, #3
 800324e:	f7ff fc21 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8003252:	2012      	movs	r0, #18
 8003254:	f7ff fc1e 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8003258:	2081      	movs	r0, #129	; 0x81
 800325a:	f7ff fc1b 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800325e:	20e8      	movs	r0, #232	; 0xe8
 8003260:	f7ff fc08 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8003264:	2085      	movs	r0, #133	; 0x85
 8003266:	f7ff fc15 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800326a:	2010      	movs	r0, #16
 800326c:	f7ff fc12 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8003270:	207a      	movs	r0, #122	; 0x7a
 8003272:	f7ff fc0f 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8003276:	20cb      	movs	r0, #203	; 0xcb
 8003278:	f7ff fbfc 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800327c:	2039      	movs	r0, #57	; 0x39
 800327e:	f7ff fc09 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8003282:	202c      	movs	r0, #44	; 0x2c
 8003284:	f7ff fc06 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7ff fc03 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800328e:	2034      	movs	r0, #52	; 0x34
 8003290:	f7ff fc00 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8003294:	2002      	movs	r0, #2
 8003296:	f7ff fbfd 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800329a:	20f7      	movs	r0, #247	; 0xf7
 800329c:	f7ff fbea 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80032a0:	2020      	movs	r0, #32
 80032a2:	f7ff fbf7 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80032a6:	20ea      	movs	r0, #234	; 0xea
 80032a8:	f7ff fbe4 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7ff fbf1 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7ff fbee 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80032b8:	20c0      	movs	r0, #192	; 0xc0
 80032ba:	f7ff fbdb 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80032be:	201b      	movs	r0, #27
 80032c0:	f7ff fbe8 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80032c4:	20c1      	movs	r0, #193	; 0xc1
 80032c6:	f7ff fbd5 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80032ca:	2001      	movs	r0, #1
 80032cc:	f7ff fbe2 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80032d0:	20c5      	movs	r0, #197	; 0xc5
 80032d2:	f7ff fbcf 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80032d6:	2030      	movs	r0, #48	; 0x30
 80032d8:	f7ff fbdc 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80032dc:	2030      	movs	r0, #48	; 0x30
 80032de:	f7ff fbd9 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80032e2:	20c7      	movs	r0, #199	; 0xc7
 80032e4:	f7ff fbc6 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80032e8:	20b7      	movs	r0, #183	; 0xb7
 80032ea:	f7ff fbd3 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80032ee:	2036      	movs	r0, #54	; 0x36
 80032f0:	f7ff fbc0 	bl	8002a74 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80032f4:	2008      	movs	r0, #8
 80032f6:	f7ff fbcd 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80032fa:	203a      	movs	r0, #58	; 0x3a
 80032fc:	f7ff fbba 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8003300:	2055      	movs	r0, #85	; 0x55
 8003302:	f7ff fbc7 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8003306:	20b1      	movs	r0, #177	; 0xb1
 8003308:	f7ff fbb4 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7ff fbc1 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8003312:	201a      	movs	r0, #26
 8003314:	f7ff fbbe 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8003318:	20b6      	movs	r0, #182	; 0xb6
 800331a:	f7ff fbab 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800331e:	200a      	movs	r0, #10
 8003320:	f7ff fbb8 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8003324:	20a2      	movs	r0, #162	; 0xa2
 8003326:	f7ff fbb5 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800332a:	20f2      	movs	r0, #242	; 0xf2
 800332c:	f7ff fba2 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7ff fbaf 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8003336:	2026      	movs	r0, #38	; 0x26
 8003338:	f7ff fb9c 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800333c:	2001      	movs	r0, #1
 800333e:	f7ff fba9 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8003342:	20e0      	movs	r0, #224	; 0xe0
 8003344:	f7ff fb96 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8003348:	200f      	movs	r0, #15
 800334a:	f7ff fba3 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800334e:	202a      	movs	r0, #42	; 0x2a
 8003350:	f7ff fba0 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8003354:	2028      	movs	r0, #40	; 0x28
 8003356:	f7ff fb9d 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800335a:	2008      	movs	r0, #8
 800335c:	f7ff fb9a 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8003360:	200e      	movs	r0, #14
 8003362:	f7ff fb97 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003366:	2008      	movs	r0, #8
 8003368:	f7ff fb94 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800336c:	2054      	movs	r0, #84	; 0x54
 800336e:	f7ff fb91 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8003372:	20a9      	movs	r0, #169	; 0xa9
 8003374:	f7ff fb8e 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8003378:	2043      	movs	r0, #67	; 0x43
 800337a:	f7ff fb8b 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800337e:	200a      	movs	r0, #10
 8003380:	f7ff fb88 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8003384:	200f      	movs	r0, #15
 8003386:	f7ff fb85 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800338a:	2000      	movs	r0, #0
 800338c:	f7ff fb82 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7ff fb7f 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003396:	2000      	movs	r0, #0
 8003398:	f7ff fb7c 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7ff fb79 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80033a2:	20e1      	movs	r0, #225	; 0xe1
 80033a4:	f7ff fb66 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7ff fb73 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80033ae:	2015      	movs	r0, #21
 80033b0:	f7ff fb70 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80033b4:	2017      	movs	r0, #23
 80033b6:	f7ff fb6d 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80033ba:	2007      	movs	r0, #7
 80033bc:	f7ff fb6a 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80033c0:	2011      	movs	r0, #17
 80033c2:	f7ff fb67 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80033c6:	2006      	movs	r0, #6
 80033c8:	f7ff fb64 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80033cc:	202b      	movs	r0, #43	; 0x2b
 80033ce:	f7ff fb61 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80033d2:	2056      	movs	r0, #86	; 0x56
 80033d4:	f7ff fb5e 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80033d8:	203c      	movs	r0, #60	; 0x3c
 80033da:	f7ff fb5b 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80033de:	2005      	movs	r0, #5
 80033e0:	f7ff fb58 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80033e4:	2010      	movs	r0, #16
 80033e6:	f7ff fb55 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80033ea:	200f      	movs	r0, #15
 80033ec:	f7ff fb52 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80033f0:	203f      	movs	r0, #63	; 0x3f
 80033f2:	f7ff fb4f 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80033f6:	203f      	movs	r0, #63	; 0x3f
 80033f8:	f7ff fb4c 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80033fc:	200f      	movs	r0, #15
 80033fe:	f7ff fb49 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8003402:	202b      	movs	r0, #43	; 0x2b
 8003404:	f7ff fb36 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003408:	2000      	movs	r0, #0
 800340a:	f7ff fb43 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7ff fb40 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8003414:	2001      	movs	r0, #1
 8003416:	f7ff fb3d 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800341a:	203f      	movs	r0, #63	; 0x3f
 800341c:	f7ff fb3a 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8003420:	202a      	movs	r0, #42	; 0x2a
 8003422:	f7ff fb27 	bl	8002a74 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7ff fb34 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800342c:	2000      	movs	r0, #0
 800342e:	f7ff fb31 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7ff fb2e 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8003438:	20ef      	movs	r0, #239	; 0xef
 800343a:	f7ff fb2b 	bl	8002a94 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800343e:	2011      	movs	r0, #17
 8003440:	f7ff fb18 	bl	8002a74 <LCD_WR_REG>
	HAL_Delay(120);
 8003444:	2078      	movs	r0, #120	; 0x78
 8003446:	f002 fa93 	bl	8005970 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800344a:	2029      	movs	r0, #41	; 0x29
 800344c:	f7ff fb12 	bl	8002a74 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8003450:	2201      	movs	r2, #1
 8003452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003456:	4804      	ldr	r0, [pc, #16]	; (8003468 <lcd_init+0x2bc>)
 8003458:	f003 fb52 	bl	8006b00 <HAL_GPIO_WritePin>
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40020800 	.word	0x40020800
 8003464:	200005d0 	.word	0x200005d0
 8003468:	40020000 	.word	0x40020000

0800346c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	b29a      	uxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	b29b      	uxth	r3, r3
 8003482:	4413      	add	r3, r2
 8003484:	b298      	uxth	r0, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	b29a      	uxth	r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	4413      	add	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	8b3a      	ldrh	r2, [r7, #24]
 8003494:	4619      	mov	r1, r3
 8003496:	f7ff fbd3 	bl	8002c40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	b29a      	uxth	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	b298      	uxth	r0, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8b3a      	ldrh	r2, [r7, #24]
 80034b4:	4619      	mov	r1, r3
 80034b6:	f7ff fbc3 	bl	8002c40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	b298      	uxth	r0, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	8b3a      	ldrh	r2, [r7, #24]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f7ff fbb3 	bl	8002c40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	b298      	uxth	r0, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	8b3a      	ldrh	r2, [r7, #24]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f7ff fba3 	bl	8002c40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	4413      	add	r3, r2
 8003504:	b298      	uxth	r0, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4413      	add	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	8b3a      	ldrh	r2, [r7, #24]
 8003514:	4619      	mov	r1, r3
 8003516:	f7ff fb93 	bl	8002c40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	b29a      	uxth	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	b298      	uxth	r0, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	b29b      	uxth	r3, r3
 800352e:	4413      	add	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	8b3a      	ldrh	r2, [r7, #24]
 8003534:	4619      	mov	r1, r3
 8003536:	f7ff fb83 	bl	8002c40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	b29a      	uxth	r2, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	4413      	add	r3, r2
 8003544:	b298      	uxth	r0, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	b29a      	uxth	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	b29b      	uxth	r3, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	8b3a      	ldrh	r2, [r7, #24]
 8003554:	4619      	mov	r1, r3
 8003556:	f7ff fb73 	bl	8002c40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	b29a      	uxth	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	b298      	uxth	r0, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	b29b      	uxth	r3, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	8b3a      	ldrh	r2, [r7, #24]
 8003574:	4619      	mov	r1, r3
 8003576:	f7ff fb63 	bl	8002c40 <lcd_DrawPoint>
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b08a      	sub	sp, #40	; 0x28
 8003586:	af02      	add	r7, sp, #8
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	f1c3 0303 	rsb	r3, r3, #3
 80035a2:	613b      	str	r3, [r7, #16]


	if (fill)
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d04f      	beq.n	800364a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80035aa:	e029      	b.n	8003600 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	e00a      	b.n	80035c8 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff ff55 	bl	800346c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	3301      	adds	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	ddf0      	ble.n	80035b2 <lcd_DrawCircle+0x30>

			if (d < 0) {
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da06      	bge.n	80035e4 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	3306      	adds	r3, #6
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	e00a      	b.n	80035fa <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	009a      	lsls	r2, r3, #2
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	330a      	adds	r3, #10
 80035f2:	613b      	str	r3, [r7, #16]
				y--;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	429a      	cmp	r2, r3
 8003606:	ddd1      	ble.n	80035ac <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8003608:	e023      	b.n	8003652 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff ff29 	bl	800346c <_draw_circle_8>
			if (d < 0) {
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	da06      	bge.n	800362e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	009a      	lsls	r2, r3, #2
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	3306      	adds	r3, #6
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	e00a      	b.n	8003644 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	009a      	lsls	r2, r3, #2
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	330a      	adds	r3, #10
 800363c:	613b      	str	r3, [r7, #16]
				y--;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	3b01      	subs	r3, #1
 8003642:	61bb      	str	r3, [r7, #24]
			x++;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	429a      	cmp	r2, r3
 8003650:	dddb      	ble.n	800360a <lcd_DrawCircle+0x88>
}
 8003652:	bf00      	nop
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b08b      	sub	sp, #44	; 0x2c
 8003660:	af04      	add	r7, sp, #16
 8003662:	60ba      	str	r2, [r7, #8]
 8003664:	461a      	mov	r2, r3
 8003666:	4603      	mov	r3, r0
 8003668:	81fb      	strh	r3, [r7, #14]
 800366a:	460b      	mov	r3, r1
 800366c:	81bb      	strh	r3, [r7, #12]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8003672:	89fb      	ldrh	r3, [r7, #14]
 8003674:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800367a:	e048      	b.n	800370e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d145      	bne.n	800370e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003682:	89fa      	ldrh	r2, [r7, #14]
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <lcd_ShowStr+0xc4>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	4619      	mov	r1, r3
 800368a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	1acb      	subs	r3, r1, r3
 8003694:	429a      	cmp	r2, r3
 8003696:	dc3f      	bgt.n	8003718 <lcd_ShowStr+0xbc>
 8003698:	89ba      	ldrh	r2, [r7, #12]
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <lcd_ShowStr+0xc4>)
 800369c:	885b      	ldrh	r3, [r3, #2]
 800369e:	4619      	mov	r1, r3
 80036a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036a4:	1acb      	subs	r3, r1, r3
 80036a6:	429a      	cmp	r2, r3
 80036a8:	dc36      	bgt.n	8003718 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d902      	bls.n	80036b8 <lcd_ShowStr+0x5c>
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
 80036b6:	e02a      	b.n	800370e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b0d      	cmp	r3, #13
 80036be:	d10b      	bne.n	80036d8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80036c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	89bb      	ldrh	r3, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80036cc:	8abb      	ldrh	r3, [r7, #20]
 80036ce:	81fb      	strh	r3, [r7, #14]
					str++;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	e017      	b.n	8003708 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	88fc      	ldrh	r4, [r7, #6]
 80036de:	89b9      	ldrh	r1, [r7, #12]
 80036e0:	89f8      	ldrh	r0, [r7, #14]
 80036e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80036e6:	9302      	str	r3, [sp, #8]
 80036e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	4623      	mov	r3, r4
 80036f4:	f7ff fb76 	bl	8002de4 <lcd_ShowChar>
					x+=sizey/2;
 80036f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	b29a      	uxth	r2, r3
 8003702:	89fb      	ldrh	r3, [r7, #14]
 8003704:	4413      	add	r3, r2
 8003706:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	3301      	adds	r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1b2      	bne.n	800367c <lcd_ShowStr+0x20>
 8003716:	e000      	b.n	800371a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003718:	bf00      	nop
			}
		}
	}
}
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}
 8003720:	200005d0 	.word	0x200005d0

08003724 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003728:	2201      	movs	r2, #1
 800372a:	2140      	movs	r1, #64	; 0x40
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <led7_init+0x14>)
 800372e:	f003 f9e7 	bl	8006b00 <HAL_GPIO_WritePin>
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021800 	.word	0x40021800

0800373c <led7_Scan>:

void led7_Scan(){
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8003740:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <led7_Scan+0x104>)
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	b29a      	uxth	r2, r3
 8003748:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <led7_Scan+0x104>)
 800374a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800374c:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <led7_Scan+0x108>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <led7_Scan+0x10c>)
 8003754:	5c9b      	ldrb	r3, [r3, r2]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	b21a      	sxth	r2, r3
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <led7_Scan+0x104>)
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b21b      	sxth	r3, r3
 8003760:	4313      	orrs	r3, r2
 8003762:	b21b      	sxth	r3, r3
 8003764:	b29a      	uxth	r2, r3
 8003766:	4b36      	ldr	r3, [pc, #216]	; (8003840 <led7_Scan+0x104>)
 8003768:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800376a:	4b36      	ldr	r3, [pc, #216]	; (8003844 <led7_Scan+0x108>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	2b03      	cmp	r3, #3
 8003770:	d846      	bhi.n	8003800 <led7_Scan+0xc4>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <led7_Scan+0x3c>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	08003789 	.word	0x08003789
 800377c:	080037a7 	.word	0x080037a7
 8003780:	080037c5 	.word	0x080037c5
 8003784:	080037e3 	.word	0x080037e3
	case 0:
		spi_buffer |= 0x00b0;
 8003788:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <led7_Scan+0x104>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003790:	b29a      	uxth	r2, r3
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <led7_Scan+0x104>)
 8003794:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8003796:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <led7_Scan+0x104>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379e:	b29a      	uxth	r2, r3
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <led7_Scan+0x104>)
 80037a2:	801a      	strh	r2, [r3, #0]
		break;
 80037a4:	e02d      	b.n	8003802 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <led7_Scan+0x104>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	4b23      	ldr	r3, [pc, #140]	; (8003840 <led7_Scan+0x104>)
 80037b2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <led7_Scan+0x104>)
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f023 0320 	bic.w	r3, r3, #32
 80037bc:	b29a      	uxth	r2, r3
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <led7_Scan+0x104>)
 80037c0:	801a      	strh	r2, [r3, #0]
		break;
 80037c2:	e01e      	b.n	8003802 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80037c4:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <led7_Scan+0x104>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <led7_Scan+0x104>)
 80037d0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <led7_Scan+0x104>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	b29a      	uxth	r2, r3
 80037dc:	4b18      	ldr	r3, [pc, #96]	; (8003840 <led7_Scan+0x104>)
 80037de:	801a      	strh	r2, [r3, #0]
		break;
 80037e0:	e00f      	b.n	8003802 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <led7_Scan+0x104>)
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <led7_Scan+0x104>)
 80037ee:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <led7_Scan+0x104>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <led7_Scan+0x104>)
 80037fc:	801a      	strh	r2, [r3, #0]
		break;
 80037fe:	e000      	b.n	8003802 <led7_Scan+0xc6>
	default:
		break;
 8003800:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <led7_Scan+0x108>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	425a      	negs	r2, r3
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	f002 0203 	and.w	r2, r2, #3
 8003812:	bf58      	it	pl
 8003814:	4253      	negpl	r3, r2
 8003816:	b29a      	uxth	r2, r3
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <led7_Scan+0x108>)
 800381a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	480a      	ldr	r0, [pc, #40]	; (800384c <led7_Scan+0x110>)
 8003822:	f003 f96d 	bl	8006b00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8003826:	2301      	movs	r3, #1
 8003828:	2202      	movs	r2, #2
 800382a:	4905      	ldr	r1, [pc, #20]	; (8003840 <led7_Scan+0x104>)
 800382c:	4808      	ldr	r0, [pc, #32]	; (8003850 <led7_Scan+0x114>)
 800382e:	f004 fe58 	bl	80084e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003832:	2201      	movs	r2, #1
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <led7_Scan+0x110>)
 8003838:	f003 f962 	bl	8006b00 <HAL_GPIO_WritePin>
}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000022 	.word	0x20000022
 8003844:	20000114 	.word	0x20000114
 8003848:	20000014 	.word	0x20000014
 800384c:	40021800 	.word	0x40021800
 8003850:	2000066c 	.word	0x2000066c

08003854 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	db0e      	blt.n	8003886 <led7_SetDigit+0x32>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b09      	cmp	r3, #9
 800386c:	dc0b      	bgt.n	8003886 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <led7_SetDigit+0x40>)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	b2d9      	uxtb	r1, r3
 800387c:	4a06      	ldr	r2, [pc, #24]	; (8003898 <led7_SetDigit+0x44>)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4413      	add	r3, r2
 8003882:	460a      	mov	r2, r1
 8003884:	701a      	strb	r2, [r3, #0]
	}
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000018 	.word	0x20000018
 8003898:	20000014 	.word	0x20000014

0800389c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038a0:	f001 fff4 	bl	800588c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038a4:	f000 f82c 	bl	8003900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038a8:	f7fe fae8 	bl	8001e7c <MX_GPIO_Init>
  MX_DMA_Init();
 80038ac:	f7fd fd04 	bl	80012b8 <MX_DMA_Init>
  MX_ADC1_Init();
 80038b0:	f7fd fb5e 	bl	8000f70 <MX_ADC1_Init>
  MX_FSMC_Init();
 80038b4:	f7fe f830 	bl	8001918 <MX_FSMC_Init>
  MX_I2C1_Init();
 80038b8:	f7fe fc0e 	bl	80020d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80038bc:	f000 fb60 	bl	8003f80 <MX_SPI1_Init>
  MX_TIM2_Init();
 80038c0:	f000 ffc8 	bl	8004854 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80038c4:	f001 ff64 	bl	8005790 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80038c8:	f000 ff74 	bl	80047b4 <MX_TIM1_Init>
  MX_TIM13_Init();
 80038cc:	f001 f80e 	bl	80048ec <MX_TIM13_Init>
  MX_USART2_UART_Init();
 80038d0:	f001 ff88 	bl	80057e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80038d4:	f000 f87e 	bl	80039d4 <system_init>
    /* USER CODE END WHILE*/
	  //scan touch screen


	  	  // 50ms task
	  	  if(flag_timer2 == 1){
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <main+0x60>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d1fb      	bne.n	80038d8 <main+0x3c>
	  		  flag_timer2 = 0;
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <main+0x60>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	801a      	strh	r2, [r3, #0]
//	  		  if (++counterTouch % 2 == 0){
//	  			  counterTouch = 0;
//		  		  touch_Scan();
//	  		  }
	  		  touch_Scan();
 80038e6:	f001 ff01 	bl	80056ec <touch_Scan>
	  		  button_Scan();
 80038ea:	f7fd fc79 	bl	80011e0 <button_Scan>

	  		  input_process();
 80038ee:	f7fd fda9 	bl	8001444 <input_process>
	  		  fsm_ingame();
 80038f2:	f7fd ff6b 	bl	80017cc <fsm_ingame>

	  		  test_led();
 80038f6:	f000 f89d 	bl	8003a34 <test_led>
	  	  if(flag_timer2 == 1){
 80038fa:	e7ed      	b.n	80038d8 <main+0x3c>
 80038fc:	20000118 	.word	0x20000118

08003900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b094      	sub	sp, #80	; 0x50
 8003904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003906:	f107 0320 	add.w	r3, r7, #32
 800390a:	2230      	movs	r2, #48	; 0x30
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f007 fbdc 	bl	800b0cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003924:	2300      	movs	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <SystemClock_Config+0xcc>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <SystemClock_Config+0xcc>)
 800392e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003932:	6413      	str	r3, [r2, #64]	; 0x40
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <SystemClock_Config+0xcc>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003940:	2300      	movs	r3, #0
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <SystemClock_Config+0xd0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <SystemClock_Config+0xd0>)
 800394a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <SystemClock_Config+0xd0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800395c:	2302      	movs	r3, #2
 800395e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003960:	2301      	movs	r3, #1
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003964:	2310      	movs	r3, #16
 8003966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003968:	2302      	movs	r3, #2
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800396c:	2300      	movs	r3, #0
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003970:	2308      	movs	r3, #8
 8003972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003974:	23a8      	movs	r3, #168	; 0xa8
 8003976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003978:	2302      	movs	r3, #2
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800397c:	2304      	movs	r3, #4
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003980:	f107 0320 	add.w	r3, r7, #32
 8003984:	4618      	mov	r0, r3
 8003986:	f004 f8af 	bl	8007ae8 <HAL_RCC_OscConfig>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003990:	f000 f876 	bl	8003a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003994:	230f      	movs	r3, #15
 8003996:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003998:	2302      	movs	r3, #2
 800399a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80039a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	2105      	movs	r1, #5
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 fb10 	bl	8007fd8 <HAL_RCC_ClockConfig>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039be:	f000 f85f 	bl	8003a80 <Error_Handler>
  }
}
 80039c2:	bf00      	nop
 80039c4:	3750      	adds	r7, #80	; 0x50
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000

080039d4 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	  timer_init();
 80039d8:	f000 fa2c 	bl	8003e34 <timer_init>
	  button_init();
 80039dc:	f7fd fbf4 	bl	80011c8 <button_init>
	  lcd_init();
 80039e0:	f7ff fbe4 	bl	80031ac <lcd_init>
	  touch_init();
 80039e4:	f001 fe72 	bl	80056cc <touch_init>
	  led7_init();
 80039e8:	f7ff fe9c 	bl	8003724 <led7_init>

	  home_lcd();				//hien thi man hinh vua moi dau
 80039ec:	f7fe fba2 	bl	8002134 <home_lcd>
	  snake_init();				//khoi tao ran
 80039f0:	f000 f84c 	bl	8003a8c <snake_init>

	  //ds3231_init();
	  //uart_init_esp();

	  strcpy(history[0].name, "abc");
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <system_init+0x50>)
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <system_init+0x54>)
 80039f8:	6810      	ldr	r0, [r2, #0]
 80039fa:	6018      	str	r0, [r3, #0]
	  history[0].score = 1000;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <system_init+0x50>)
 80039fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a02:	815a      	strh	r2, [r3, #10]
	  strcpy(history[1].name, "def");
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <system_init+0x58>)
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <system_init+0x5c>)
 8003a08:	6810      	ldr	r0, [r2, #0]
 8003a0a:	6018      	str	r0, [r3, #0]
	  history[1].score = 124;
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <system_init+0x50>)
 8003a0e:	227c      	movs	r2, #124	; 0x7c
 8003a10:	82da      	strh	r2, [r3, #22]

	  setTimer3(50);
 8003a12:	2032      	movs	r0, #50	; 0x32
 8003a14:	f000 fa38 	bl	8003e88 <setTimer3>
	  setTimer2(50);
 8003a18:	2032      	movs	r0, #50	; 0x32
 8003a1a:	f000 fa19 	bl	8003e50 <setTimer2>
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000510 	.word	0x20000510
 8003a28:	0800d1c0 	.word	0x0800d1c0
 8003a2c:	2000051c 	.word	0x2000051c
 8003a30:	0800d1c4 	.word	0x0800d1c4

08003a34 <test_led>:

uint8_t counter_led = 0;

void test_led(){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	if (++counter_led % 20 == 0){
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <test_led+0x40>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <test_led+0x40>)
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <test_led+0x40>)
 8003a46:	781a      	ldrb	r2, [r3, #0]
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <test_led+0x44>)
 8003a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4e:	0919      	lsrs	r1, r3, #4
 8003a50:	460b      	mov	r3, r1
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <test_led+0x3a>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8003a60:	2110      	movs	r1, #16
 8003a62:	4806      	ldr	r0, [pc, #24]	; (8003a7c <test_led+0x48>)
 8003a64:	f003 f865 	bl	8006b32 <HAL_GPIO_TogglePin>
		counter_led = 0;
 8003a68:	4b02      	ldr	r3, [pc, #8]	; (8003a74 <test_led+0x40>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
	}
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000116 	.word	0x20000116
 8003a78:	cccccccd 	.word	0xcccccccd
 8003a7c:	40021000 	.word	0x40021000

08003a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a84:	b672      	cpsid	i
}
 8003a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <Error_Handler+0x8>
	...

08003a8c <snake_init>:
 *      Author: ADMIN
 */

#include "snake.h"

void snake_init(){
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
	snake[0].x = (POS_X_MAX - POS_X_MIN) / 2;
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <snake_init+0x6c>)
 8003a94:	2277      	movs	r2, #119	; 0x77
 8003a96:	601a      	str	r2, [r3, #0]
	snake[0].y = (POS_Y_MAX - POS_Y_MIN) / 2;
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <snake_init+0x6c>)
 8003a9a:	2263      	movs	r2, #99	; 0x63
 8003a9c:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	e00d      	b.n	8003ac0 <snake_init+0x34>
		snake[i].x = 0;
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <snake_init+0x6c>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <snake_init+0x6c>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3301      	adds	r3, #1
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b63      	cmp	r3, #99	; 0x63
 8003ac4:	ddee      	ble.n	8003aa4 <snake_init+0x18>
	}
	move = UP;
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <snake_init+0x70>)
 8003ac8:	2203      	movs	r2, #3
 8003aca:	601a      	str	r2, [r3, #0]
	length = 1;
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <snake_init+0x74>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
	current_score = 0;
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <snake_init+0x78>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
	counter_time_score = 0;
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <snake_init+0x7c>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
	counter_time = 60;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <snake_init+0x80>)
 8003ae0:	223c      	movs	r2, #60	; 0x3c
 8003ae2:	601a      	str	r2, [r3, #0]
	tempFlag = 0;
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <snake_init+0x84>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	200001f0 	.word	0x200001f0
 8003afc:	200000fc 	.word	0x200000fc
 8003b00:	20000008 	.word	0x20000008
 8003b04:	20000004 	.word	0x20000004
 8003b08:	20000100 	.word	0x20000100
 8003b0c:	20000104 	.word	0x20000104
 8003b10:	20000108 	.word	0x20000108

08003b14 <is_collision_food>:

int is_collision_food(struct Point p){
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	dd08      	ble.n	8003b38 <is_collision_food+0x24>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2bee      	cmp	r3, #238	; 0xee
 8003b2a:	dc05      	bgt.n	8003b38 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8003b2c:	687b      	ldr	r3, [r7, #4]
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	dd02      	ble.n	8003b38 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2bc6      	cmp	r3, #198	; 0xc6
 8003b36:	dd01      	ble.n	8003b3c <is_collision_food+0x28>
		return 1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e01c      	b.n	8003b76 <is_collision_food+0x62>
	}
	for (int i = 0; i < length; i++){
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	e013      	b.n	8003b6a <is_collision_food+0x56>
		if (p.x == snake[i].x && p.y == snake[i].y)
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	490f      	ldr	r1, [pc, #60]	; (8003b84 <is_collision_food+0x70>)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d109      	bne.n	8003b64 <is_collision_food+0x50>
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	490c      	ldr	r1, [pc, #48]	; (8003b84 <is_collision_food+0x70>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d101      	bne.n	8003b64 <is_collision_food+0x50>
			return 1;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e008      	b.n	8003b76 <is_collision_food+0x62>
	for (int i = 0; i < length; i++){
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <is_collision_food+0x74>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d3e6      	bcc.n	8003b42 <is_collision_food+0x2e>
	}
	return 0;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	200001f0 	.word	0x200001f0
 8003b88:	20000008 	.word	0x20000008

08003b8c <is_collision>:

int is_collision(){
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 8003b92:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <is_collision+0x74>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	dd0b      	ble.n	8003bb2 <is_collision+0x26>
 8003b9a:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <is_collision+0x74>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2bee      	cmp	r3, #238	; 0xee
 8003ba0:	dc07      	bgt.n	8003bb2 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <is_collision+0x74>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	dd03      	ble.n	8003bb2 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <is_collision+0x74>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2bc6      	cmp	r3, #198	; 0xc6
 8003bb0:	dd01      	ble.n	8003bb6 <is_collision+0x2a>
		return 1;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e01e      	b.n	8003bf4 <is_collision+0x68>
	}
	for (int i = 1; i < length; i++){
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	e015      	b.n	8003be8 <is_collision+0x5c>
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <is_collision+0x74>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	490f      	ldr	r1, [pc, #60]	; (8003c00 <is_collision+0x74>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d10a      	bne.n	8003be2 <is_collision+0x56>
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <is_collision+0x74>)
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	490b      	ldr	r1, [pc, #44]	; (8003c00 <is_collision+0x74>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	440b      	add	r3, r1
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d101      	bne.n	8003be2 <is_collision+0x56>
			return 1;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e008      	b.n	8003bf4 <is_collision+0x68>
	for (int i = 1; i < length; i++){
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3301      	adds	r3, #1
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <is_collision+0x78>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d3e4      	bcc.n	8003bbc <is_collision+0x30>
	}
	return 0;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	200001f0 	.word	0x200001f0
 8003c04:	20000008 	.word	0x20000008

08003c08 <is_eat>:

int is_eat(){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
	if (snake[0].x <= (food.x + 4) && snake[0].x >= (food.x - 4) &&
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <is_eat+0x50>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <is_eat+0x54>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3304      	adds	r3, #4
 8003c16:	429a      	cmp	r2, r3
 8003c18:	dc1b      	bgt.n	8003c52 <is_eat+0x4a>
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <is_eat+0x50>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <is_eat+0x54>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3b04      	subs	r3, #4
 8003c24:	429a      	cmp	r2, r3
 8003c26:	db14      	blt.n	8003c52 <is_eat+0x4a>
		snake[0].y <= (food.y + 4) && snake[0].y >= (food.y - 4) ){
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <is_eat+0x50>)
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <is_eat+0x54>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	3304      	adds	r3, #4
	if (snake[0].x <= (food.x + 4) && snake[0].x >= (food.x - 4) &&
 8003c32:	429a      	cmp	r2, r3
 8003c34:	dc0d      	bgt.n	8003c52 <is_eat+0x4a>
		snake[0].y <= (food.y + 4) && snake[0].y >= (food.y - 4) ){
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <is_eat+0x50>)
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <is_eat+0x54>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	429a      	cmp	r2, r3
 8003c42:	db06      	blt.n	8003c52 <is_eat+0x4a>
		point_clr(food);
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <is_eat+0x54>)
 8003c46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c4a:	f7fe fe9f 	bl	800298c <point_clr>
		return 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <is_eat+0x4c>
	}
	return 0;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200001f0 	.word	0x200001f0
 8003c5c:	2000000c 	.word	0x2000000c

08003c60 <get_rand>:

int get_rand(int max){
 8003c60:	b5b0      	push	{r4, r5, r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	return 0 + (int)(rand()*(max - 0 + 1.0)/(1.0 + RAND_MAX));
 8003c68:	f007 fa38 	bl	800b0dc <rand>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc50 	bl	8000514 <__aeabi_i2d>
 8003c74:	4604      	mov	r4, r0
 8003c76:	460d      	mov	r5, r1
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7fc fc4b 	bl	8000514 <__aeabi_i2d>
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <get_rand+0x5c>)
 8003c84:	f7fc fafa 	bl	800027c <__adddf3>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f7fc fcaa 	bl	80005e8 <__aeabi_dmul>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <get_rand+0x60>)
 8003ca2:	f7fc fdcb 	bl	800083c <__aeabi_ddiv>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7fc ff4b 	bl	8000b48 <__aeabi_d2iz>
 8003cb2:	4603      	mov	r3, r0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bdb0      	pop	{r4, r5, r7, pc}
 8003cbc:	3ff00000 	.word	0x3ff00000
 8003cc0:	41e00000 	.word	0x41e00000

08003cc4 <rand_food>:

void rand_food(){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
	struct Point p;
	p.x = get_rand(POS_X_MAX);
 8003cca:	20ef      	movs	r0, #239	; 0xef
 8003ccc:	f7ff ffc8 	bl	8003c60 <get_rand>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	603b      	str	r3, [r7, #0]
	p.y = get_rand(POS_Y_MAX);
 8003cd4:	20c7      	movs	r0, #199	; 0xc7
 8003cd6:	f7ff ffc3 	bl	8003c60 <get_rand>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8003cde:	e009      	b.n	8003cf4 <rand_food+0x30>
		p.x = get_rand(POS_X_MAX);
 8003ce0:	20ef      	movs	r0, #239	; 0xef
 8003ce2:	f7ff ffbd 	bl	8003c60 <get_rand>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	603b      	str	r3, [r7, #0]
		p.y = get_rand(POS_Y_MAX);
 8003cea:	20c7      	movs	r0, #199	; 0xc7
 8003cec:	f7ff ffb8 	bl	8003c60 <get_rand>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003cfa:	f7ff ff0b 	bl	8003b14 <is_collision_food>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d0ed      	beq.n	8003ce0 <rand_food+0x1c>
	}
	food = p;
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <rand_food+0x60>)
 8003d06:	461a      	mov	r2, r3
 8003d08:	463b      	mov	r3, r7
 8003d0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003d0e:	e882 0003 	stmia.w	r2, {r0, r1}
	point_food_lcd(food);
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <rand_food+0x60>)
 8003d14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003d18:	f7fe fe25 	bl	8002966 <point_food_lcd>
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <move_snake>:

void move_snake(){
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
	point_clr(snake[length - 1]);
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <move_snake+0xb8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <move_snake+0xbc>)
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003d3e:	f7fe fe25 	bl	800298c <point_clr>
	for (int i = length - 1; i > 0; i--){
 8003d42:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <move_snake+0xb8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	e016      	b.n	8003d7a <move_snake+0x52>
		snake[i].x = snake[i-1].x;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a24      	ldr	r2, [pc, #144]	; (8003de4 <move_snake+0xbc>)
 8003d52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003d56:	4923      	ldr	r1, [pc, #140]	; (8003de4 <move_snake+0xbc>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[i].y = snake[i-1].y;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <move_snake+0xbc>)
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	491e      	ldr	r1, [pc, #120]	; (8003de4 <move_snake+0xbc>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	440b      	add	r3, r1
 8003d72:	605a      	str	r2, [r3, #4]
	for (int i = length - 1; i > 0; i--){
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	dce5      	bgt.n	8003d4c <move_snake+0x24>
	}
	switch (move) {
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <move_snake+0xc0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d822      	bhi.n	8003dd0 <move_snake+0xa8>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <move_snake+0x68>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003dad 	.word	0x08003dad
 8003d98:	08003db9 	.word	0x08003db9
 8003d9c:	08003dc5 	.word	0x08003dc5
		case RIGHT:
			snake[0].x += 7;
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <move_snake+0xbc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3307      	adds	r3, #7
 8003da6:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <move_snake+0xbc>)
 8003da8:	6013      	str	r3, [r2, #0]
			break;
 8003daa:	e012      	b.n	8003dd2 <move_snake+0xaa>
		case LEFT:
			snake[0].x -= 7;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <move_snake+0xbc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3b07      	subs	r3, #7
 8003db2:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <move_snake+0xbc>)
 8003db4:	6013      	str	r3, [r2, #0]
			break;
 8003db6:	e00c      	b.n	8003dd2 <move_snake+0xaa>
		case UP:
			snake[0].y -= 7;
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <move_snake+0xbc>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	3b07      	subs	r3, #7
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <move_snake+0xbc>)
 8003dc0:	6053      	str	r3, [r2, #4]
			break;
 8003dc2:	e006      	b.n	8003dd2 <move_snake+0xaa>
		case DOWN:
			snake[0].y += 7;
 8003dc4:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <move_snake+0xbc>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	3307      	adds	r3, #7
 8003dca:	4a06      	ldr	r2, [pc, #24]	; (8003de4 <move_snake+0xbc>)
 8003dcc:	6053      	str	r3, [r2, #4]
			break;
 8003dce:	e000      	b.n	8003dd2 <move_snake+0xaa>
		default:
			break;
 8003dd0:	bf00      	nop
	}
	reDraw_snake();
 8003dd2:	f000 f80b 	bl	8003dec <reDraw_snake>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000008 	.word	0x20000008
 8003de4:	200001f0 	.word	0x200001f0
 8003de8:	200000fc 	.word	0x200000fc

08003dec <reDraw_snake>:

void reDraw_snake(){
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
	point_head_lcd(snake[0]);
 8003df2:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <reDraw_snake+0x40>)
 8003df4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003df8:	f7fe fd48 	bl	800288c <point_head_lcd>
	for (int i = 1; i < length; i++){
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	e00a      	b.n	8003e18 <reDraw_snake+0x2c>
		point_snake_lcd(snake[i]);
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <reDraw_snake+0x40>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e0e:	f7fe fd58 	bl	80028c2 <point_snake_lcd>
	for (int i = 1; i < length; i++){
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3301      	adds	r3, #1
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <reDraw_snake+0x44>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3ef      	bcc.n	8003e02 <reDraw_snake+0x16>
	}
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	200001f0 	.word	0x200001f0
 8003e30:	20000008 	.word	0x20000008

08003e34 <timer_init>:

//uint16_t flag_timer4 = 0;
//uint16_t timer4_counter = 0;
//uint16_t timer4_MUL = 0;

void timer_init(){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003e38:	4803      	ldr	r0, [pc, #12]	; (8003e48 <timer_init+0x14>)
 8003e3a:	f005 f96d 	bl	8009118 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8003e3e:	4803      	ldr	r0, [pc, #12]	; (8003e4c <timer_init+0x18>)
 8003e40:	f005 f902 	bl	8009048 <HAL_TIM_Base_Start>
}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000754 	.word	0x20000754
 8003e4c:	2000070c 	.word	0x2000070c

08003e50 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003e5a:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <setTimer2+0x2c>)
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <setTimer2+0x2c>)
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <setTimer2+0x30>)
 8003e66:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <setTimer2+0x34>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	801a      	strh	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	2000011c 	.word	0x2000011c
 8003e80:	2000011a 	.word	0x2000011a
 8003e84:	20000118 	.word	0x20000118

08003e88 <setTimer3>:

void setTimer3(uint16_t duration){
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <setTimer3+0x2c>)
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <setTimer3+0x2c>)
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <setTimer3+0x30>)
 8003e9e:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <setTimer3+0x34>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	801a      	strh	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000122 	.word	0x20000122
 8003eb8:	20000120 	.word	0x20000120
 8003ebc:	2000011e 	.word	0x2000011e

08003ec0 <HAL_TIM_PeriodElapsedCallback>:
//	timer4_MUL = duration/TIMER_CYCLE_2;
//	timer4_counter = timer4_MUL;
//	flag_timer4 = 0;
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d12b      	bne.n	8003f2a <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8003ed2:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8003eda:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003ee4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003ef6:	881a      	ldrh	r2, [r3, #0]
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003efa:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d010      	beq.n	8003f26 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003f0e:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003f24:	801a      	strh	r2, [r3, #0]
//			if(timer4_counter == 0) {
//				flag_timer4 = 1;
//				timer4_counter = timer4_MUL;
//			}
//		}
		led7_Scan();
 8003f26:	f7ff fc09 	bl	800373c <led7_Scan>
	}
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2000011a 	.word	0x2000011a
 8003f38:	20000118 	.word	0x20000118
 8003f3c:	2000011c 	.word	0x2000011c
 8003f40:	20000120 	.word	0x20000120
 8003f44:	2000011e 	.word	0x2000011e
 8003f48:	20000122 	.word	0x20000122

08003f4c <delay_us>:

void delay_us (uint16_t us)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <delay_us+0x30>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8003f5e:	bf00      	nop
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <delay_us+0x30>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3f9      	bcc.n	8003f60 <delay_us+0x14>
}
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	2000070c 	.word	0x2000070c

08003f80 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <MX_SPI1_Init+0x68>)
 8003f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fcc:	220a      	movs	r2, #10
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fd0:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <MX_SPI1_Init+0x64>)
 8003fd2:	f004 f9fd 	bl	80083d0 <HAL_SPI_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003fdc:	f7ff fd50 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	2000066c 	.word	0x2000066c
 8003fe8:	40013000 	.word	0x40013000

08003fec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_MspInit+0x4c>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <HAL_MspInit+0x4c>)
 8003ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004000:	6453      	str	r3, [r2, #68]	; 0x44
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_MspInit+0x4c>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400a:	607b      	str	r3, [r7, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_MspInit+0x4c>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <HAL_MspInit+0x4c>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	6413      	str	r3, [r2, #64]	; 0x40
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_MspInit+0x4c>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800

0800403c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	; 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3c      	ldr	r2, [pc, #240]	; (800414c <HAL_ADC_MspInit+0x110>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d171      	bne.n	8004142 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_ADC_MspInit+0x114>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <HAL_ADC_MspInit+0x114>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6453      	str	r3, [r2, #68]	; 0x44
 800406e:	4b38      	ldr	r3, [pc, #224]	; (8004150 <HAL_ADC_MspInit+0x114>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b34      	ldr	r3, [pc, #208]	; (8004150 <HAL_ADC_MspInit+0x114>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a33      	ldr	r2, [pc, #204]	; (8004150 <HAL_ADC_MspInit+0x114>)
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b31      	ldr	r3, [pc, #196]	; (8004150 <HAL_ADC_MspInit+0x114>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_ADC_MspInit+0x114>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <HAL_ADC_MspInit+0x114>)
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <HAL_ADC_MspInit+0x114>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80040b2:	2307      	movs	r3, #7
 80040b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040b6:	2303      	movs	r3, #3
 80040b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040be:	f107 0314 	add.w	r3, r7, #20
 80040c2:	4619      	mov	r1, r3
 80040c4:	4823      	ldr	r0, [pc, #140]	; (8004154 <HAL_ADC_MspInit+0x118>)
 80040c6:	f002 fb67 	bl	8006798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040ca:	2303      	movs	r3, #3
 80040cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040ce:	2303      	movs	r3, #3
 80040d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d6:	f107 0314 	add.w	r3, r7, #20
 80040da:	4619      	mov	r1, r3
 80040dc:	481e      	ldr	r0, [pc, #120]	; (8004158 <HAL_ADC_MspInit+0x11c>)
 80040de:	f002 fb5b 	bl	8006798 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <HAL_ADC_MspInit+0x120>)
 80040e4:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <HAL_ADC_MspInit+0x124>)
 80040e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <HAL_ADC_MspInit+0x120>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_ADC_MspInit+0x120>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <HAL_ADC_MspInit+0x120>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_ADC_MspInit+0x120>)
 80040fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004100:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_ADC_MspInit+0x120>)
 8004104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004108:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <HAL_ADC_MspInit+0x120>)
 800410c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004110:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_ADC_MspInit+0x120>)
 8004114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004118:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_ADC_MspInit+0x120>)
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <HAL_ADC_MspInit+0x120>)
 8004122:	2200      	movs	r2, #0
 8004124:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004126:	480d      	ldr	r0, [pc, #52]	; (800415c <HAL_ADC_MspInit+0x120>)
 8004128:	f001 ffba 	bl	80060a0 <HAL_DMA_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004132:	f7ff fca5 	bl	8003a80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a08      	ldr	r2, [pc, #32]	; (800415c <HAL_ADC_MspInit+0x120>)
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
 800413c:	4a07      	ldr	r2, [pc, #28]	; (800415c <HAL_ADC_MspInit+0x120>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004142:	bf00      	nop
 8004144:	3728      	adds	r7, #40	; 0x28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40012000 	.word	0x40012000
 8004150:	40023800 	.word	0x40023800
 8004154:	40020800 	.word	0x40020800
 8004158:	40020400 	.word	0x40020400
 800415c:	2000060c 	.word	0x2000060c
 8004160:	40026410 	.word	0x40026410

08004164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_I2C_MspInit+0x84>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d12b      	bne.n	80041de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <HAL_I2C_MspInit+0x88>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	4a17      	ldr	r2, [pc, #92]	; (80041ec <HAL_I2C_MspInit+0x88>)
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	6313      	str	r3, [r2, #48]	; 0x30
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <HAL_I2C_MspInit+0x88>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041a2:	23c0      	movs	r3, #192	; 0xc0
 80041a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041a6:	2312      	movs	r3, #18
 80041a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ae:	2303      	movs	r3, #3
 80041b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041b2:	2304      	movs	r3, #4
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	4619      	mov	r1, r3
 80041bc:	480c      	ldr	r0, [pc, #48]	; (80041f0 <HAL_I2C_MspInit+0x8c>)
 80041be:	f002 faeb 	bl	8006798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <HAL_I2C_MspInit+0x88>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <HAL_I2C_MspInit+0x88>)
 80041cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_I2C_MspInit+0x88>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80041de:	bf00      	nop
 80041e0:	3728      	adds	r7, #40	; 0x28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40005400 	.word	0x40005400
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40020400 	.word	0x40020400

080041f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fc:	f107 0314 	add.w	r3, r7, #20
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_SPI_MspInit+0x84>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d12b      	bne.n	800426e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <HAL_SPI_MspInit+0x88>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_SPI_MspInit+0x88>)
 8004220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004224:	6453      	str	r3, [r2, #68]	; 0x44
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_SPI_MspInit+0x88>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <HAL_SPI_MspInit+0x88>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	4a10      	ldr	r2, [pc, #64]	; (800427c <HAL_SPI_MspInit+0x88>)
 800423c:	f043 0302 	orr.w	r3, r3, #2
 8004240:	6313      	str	r3, [r2, #48]	; 0x30
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <HAL_SPI_MspInit+0x88>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800424e:	2338      	movs	r3, #56	; 0x38
 8004250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004252:	2302      	movs	r3, #2
 8004254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800425a:	2303      	movs	r3, #3
 800425c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800425e:	2305      	movs	r3, #5
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	4619      	mov	r1, r3
 8004268:	4805      	ldr	r0, [pc, #20]	; (8004280 <HAL_SPI_MspInit+0x8c>)
 800426a:	f002 fa95 	bl	8006798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800426e:	bf00      	nop
 8004270:	3728      	adds	r7, #40	; 0x28
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40013000 	.word	0x40013000
 800427c:	40023800 	.word	0x40023800
 8004280:	40020400 	.word	0x40020400

08004284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a22      	ldr	r2, [pc, #136]	; (800431c <HAL_TIM_Base_MspInit+0x98>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	4b21      	ldr	r3, [pc, #132]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	4a20      	ldr	r2, [pc, #128]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6453      	str	r3, [r2, #68]	; 0x44
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80042b2:	e02e      	b.n	8004312 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d116      	bne.n	80042ec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2100      	movs	r1, #0
 80042de:	201c      	movs	r0, #28
 80042e0:	f001 fea7 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042e4:	201c      	movs	r0, #28
 80042e6:	f001 fec0 	bl	800606a <HAL_NVIC_EnableIRQ>
}
 80042ea:	e012      	b.n	8004312 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <HAL_TIM_Base_MspInit+0xa0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10d      	bne.n	8004312 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 8004300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_TIM_Base_MspInit+0x9c>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
}
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40023800 	.word	0x40023800
 8004324:	40001c00 	.word	0x40001c00

08004328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a12      	ldr	r2, [pc, #72]	; (8004390 <HAL_TIM_MspPostInit+0x68>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d11e      	bne.n	8004388 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_TIM_MspPostInit+0x6c>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <HAL_TIM_MspPostInit+0x6c>)
 8004354:	f043 0320 	orr.w	r3, r3, #32
 8004358:	6313      	str	r3, [r2, #48]	; 0x30
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <HAL_TIM_MspPostInit+0x6c>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800436a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	2302      	movs	r3, #2
 800436e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004374:	2300      	movs	r3, #0
 8004376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004378:	2309      	movs	r3, #9
 800437a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800437c:	f107 030c 	add.w	r3, r7, #12
 8004380:	4619      	mov	r1, r3
 8004382:	4805      	ldr	r0, [pc, #20]	; (8004398 <HAL_TIM_MspPostInit+0x70>)
 8004384:	f002 fa08 	bl	8006798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8004388:	bf00      	nop
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40001c00 	.word	0x40001c00
 8004394:	40023800 	.word	0x40023800
 8004398:	40021400 	.word	0x40021400

0800439c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	; 0x30
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a3a      	ldr	r2, [pc, #232]	; (80044a4 <HAL_UART_MspInit+0x108>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d135      	bne.n	800442a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	4a38      	ldr	r2, [pc, #224]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 80043c8:	f043 0310 	orr.w	r3, r3, #16
 80043cc:	6453      	str	r3, [r2, #68]	; 0x44
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	4a31      	ldr	r2, [pc, #196]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fc:	2302      	movs	r3, #2
 80043fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004404:	2303      	movs	r3, #3
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004408:	2307      	movs	r3, #7
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440c:	f107 031c 	add.w	r3, r7, #28
 8004410:	4619      	mov	r1, r3
 8004412:	4826      	ldr	r0, [pc, #152]	; (80044ac <HAL_UART_MspInit+0x110>)
 8004414:	f002 f9c0 	bl	8006798 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004418:	2200      	movs	r2, #0
 800441a:	2100      	movs	r1, #0
 800441c:	2025      	movs	r0, #37	; 0x25
 800441e:	f001 fe08 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004422:	2025      	movs	r0, #37	; 0x25
 8004424:	f001 fe21 	bl	800606a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004428:	e038      	b.n	800449c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <HAL_UART_MspInit+0x114>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d133      	bne.n	800449c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 800443e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
 8004444:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6313      	str	r3, [r2, #48]	; 0x30
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_UART_MspInit+0x10c>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800446c:	230c      	movs	r3, #12
 800446e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004478:	2303      	movs	r3, #3
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800447c:	2307      	movs	r3, #7
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004480:	f107 031c 	add.w	r3, r7, #28
 8004484:	4619      	mov	r1, r3
 8004486:	4809      	ldr	r0, [pc, #36]	; (80044ac <HAL_UART_MspInit+0x110>)
 8004488:	f002 f986 	bl	8006798 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800448c:	2200      	movs	r2, #0
 800448e:	2100      	movs	r1, #0
 8004490:	2026      	movs	r0, #38	; 0x26
 8004492:	f001 fdce 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004496:	2026      	movs	r0, #38	; 0x26
 8004498:	f001 fde7 	bl	800606a <HAL_NVIC_EnableIRQ>
}
 800449c:	bf00      	nop
 800449e:	3730      	adds	r7, #48	; 0x30
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40011000 	.word	0x40011000
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40020000 	.word	0x40020000
 80044b0:	40004400 	.word	0x40004400

080044b4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80044ba:	1d3b      	adds	r3, r7, #4
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80044c8:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_FSMC_MspInit+0x88>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d131      	bne.n	8004534 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_FSMC_MspInit+0x88>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_FSMC_MspInit+0x8c>)
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_FSMC_MspInit+0x8c>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	6393      	str	r3, [r2, #56]	; 0x38
 80044e6:	4b16      	ldr	r3, [pc, #88]	; (8004540 <HAL_FSMC_MspInit+0x8c>)
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80044f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80044f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f8:	2302      	movs	r3, #2
 80044fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004500:	2303      	movs	r3, #3
 8004502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004504:	230c      	movs	r3, #12
 8004506:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	4619      	mov	r1, r3
 800450c:	480d      	ldr	r0, [pc, #52]	; (8004544 <HAL_FSMC_MspInit+0x90>)
 800450e:	f002 f943 	bl	8006798 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004512:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8004516:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004518:	2302      	movs	r3, #2
 800451a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004520:	2303      	movs	r3, #3
 8004522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004524:	230c      	movs	r3, #12
 8004526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	4619      	mov	r1, r3
 800452c:	4806      	ldr	r0, [pc, #24]	; (8004548 <HAL_FSMC_MspInit+0x94>)
 800452e:	f002 f933 	bl	8006798 <HAL_GPIO_Init>
 8004532:	e000      	b.n	8004536 <HAL_FSMC_MspInit+0x82>
    return;
 8004534:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000124 	.word	0x20000124
 8004540:	40023800 	.word	0x40023800
 8004544:	40021000 	.word	0x40021000
 8004548:	40020c00 	.word	0x40020c00

0800454c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004554:	f7ff ffae 	bl	80044b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004564:	e7fe      	b.n	8004564 <NMI_Handler+0x4>

08004566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800456a:	e7fe      	b.n	800456a <HardFault_Handler+0x4>

0800456c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004570:	e7fe      	b.n	8004570 <MemManage_Handler+0x4>

08004572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004576:	e7fe      	b.n	8004576 <BusFault_Handler+0x4>

08004578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800457c:	e7fe      	b.n	800457c <UsageFault_Handler+0x4>

0800457e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800457e:	b480      	push	{r7}
 8004580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800459a:	b480      	push	{r7}
 800459c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045ac:	f001 f9c0 	bl	8005930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <TIM2_IRQHandler+0x10>)
 80045ba:	f004 fe76 	bl	80092aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000754 	.word	0x20000754

080045c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <USART1_IRQHandler+0x10>)
 80045ce:	f005 fdb1 	bl	800a134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	2000079c 	.word	0x2000079c

080045dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045e0:	4802      	ldr	r0, [pc, #8]	; (80045ec <USART2_IRQHandler+0x10>)
 80045e2:	f005 fda7 	bl	800a134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200007e0 	.word	0x200007e0

080045f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <DMA2_Stream0_IRQHandler+0x10>)
 80045f6:	f001 fe93 	bl	8006320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	2000060c 	.word	0x2000060c

08004604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
	return 1;
 8004608:	2301      	movs	r3, #1
}
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_kill>:

int _kill(int pid, int sig)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800461e:	f006 fd11 	bl	800b044 <__errno>
 8004622:	4603      	mov	r3, r0
 8004624:	2216      	movs	r2, #22
 8004626:	601a      	str	r2, [r3, #0]
	return -1;
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_exit>:

void _exit (int status)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800463c:	f04f 31ff 	mov.w	r1, #4294967295
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ffe7 	bl	8004614 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004646:	e7fe      	b.n	8004646 <_exit+0x12>

08004648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e00a      	b.n	8004670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800465a:	f3af 8000 	nop.w
 800465e:	4601      	mov	r1, r0
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	60ba      	str	r2, [r7, #8]
 8004666:	b2ca      	uxtb	r2, r1
 8004668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	3301      	adds	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	dbf0      	blt.n	800465a <_read+0x12>
	}

return len;
 8004678:	687b      	ldr	r3, [r7, #4]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e009      	b.n	80046a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	60ba      	str	r2, [r7, #8]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	3301      	adds	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	dbf1      	blt.n	8004694 <_write+0x12>
	}
	return len;
 80046b0:	687b      	ldr	r3, [r7, #4]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_close>:

int _close(int file)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
	return -1;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046e2:	605a      	str	r2, [r3, #4]
	return 0;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <_isatty>:

int _isatty(int file)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
	return 1;
 80046fa:	2301      	movs	r3, #1
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
	return 0;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800472c:	4a14      	ldr	r2, [pc, #80]	; (8004780 <_sbrk+0x5c>)
 800472e:	4b15      	ldr	r3, [pc, #84]	; (8004784 <_sbrk+0x60>)
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <_sbrk+0x64>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <_sbrk+0x64>)
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <_sbrk+0x68>)
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <_sbrk+0x64>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	429a      	cmp	r2, r3
 8004752:	d207      	bcs.n	8004764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004754:	f006 fc76 	bl	800b044 <__errno>
 8004758:	4603      	mov	r3, r0
 800475a:	220c      	movs	r2, #12
 800475c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	e009      	b.n	8004778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <_sbrk+0x64>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <_sbrk+0x64>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	4a05      	ldr	r2, [pc, #20]	; (8004788 <_sbrk+0x64>)
 8004774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004776:	68fb      	ldr	r3, [r7, #12]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20020000 	.word	0x20020000
 8004784:	00000400 	.word	0x00000400
 8004788:	20000128 	.word	0x20000128
 800478c:	20000838 	.word	0x20000838

08004790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <SystemInit+0x20>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <SystemInit+0x20>)
 800479c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047ba:	f107 0308 	add.w	r3, r7, #8
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c8:	463b      	mov	r3, r7
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <MX_TIM1_Init+0x98>)
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <MX_TIM1_Init+0x9c>)
 80047d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80047d6:	4b1d      	ldr	r3, [pc, #116]	; (800484c <MX_TIM1_Init+0x98>)
 80047d8:	2253      	movs	r2, #83	; 0x53
 80047da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <MX_TIM1_Init+0x98>)
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <MX_TIM1_Init+0x98>)
 80047e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ea:	4b18      	ldr	r3, [pc, #96]	; (800484c <MX_TIM1_Init+0x98>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <MX_TIM1_Init+0x98>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <MX_TIM1_Init+0x98>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047fc:	4813      	ldr	r0, [pc, #76]	; (800484c <MX_TIM1_Init+0x98>)
 80047fe:	f004 fbd3 	bl	8008fa8 <HAL_TIM_Base_Init>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004808:	f7ff f93a 	bl	8003a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800480c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004812:	f107 0308 	add.w	r3, r7, #8
 8004816:	4619      	mov	r1, r3
 8004818:	480c      	ldr	r0, [pc, #48]	; (800484c <MX_TIM1_Init+0x98>)
 800481a:	f004 ff11 	bl	8009640 <HAL_TIM_ConfigClockSource>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004824:	f7ff f92c 	bl	8003a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004828:	2300      	movs	r3, #0
 800482a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800482c:	2300      	movs	r3, #0
 800482e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004830:	463b      	mov	r3, r7
 8004832:	4619      	mov	r1, r3
 8004834:	4805      	ldr	r0, [pc, #20]	; (800484c <MX_TIM1_Init+0x98>)
 8004836:	f005 fadd 	bl	8009df4 <HAL_TIMEx_MasterConfigSynchronization>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004840:	f7ff f91e 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004844:	bf00      	nop
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	2000070c 	.word	0x2000070c
 8004850:	40010000 	.word	0x40010000

08004854 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	609a      	str	r2, [r3, #8]
 8004866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004868:	463b      	mov	r3, r7
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <MX_TIM2_Init+0x94>)
 8004872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8004878:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <MX_TIM2_Init+0x94>)
 800487a:	f240 3247 	movw	r2, #839	; 0x347
 800487e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004880:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <MX_TIM2_Init+0x94>)
 8004882:	2200      	movs	r2, #0
 8004884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004886:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <MX_TIM2_Init+0x94>)
 8004888:	2263      	movs	r2, #99	; 0x63
 800488a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800488c:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <MX_TIM2_Init+0x94>)
 800488e:	2200      	movs	r2, #0
 8004890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <MX_TIM2_Init+0x94>)
 8004894:	2200      	movs	r2, #0
 8004896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004898:	4813      	ldr	r0, [pc, #76]	; (80048e8 <MX_TIM2_Init+0x94>)
 800489a:	f004 fb85 	bl	8008fa8 <HAL_TIM_Base_Init>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80048a4:	f7ff f8ec 	bl	8003a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4619      	mov	r1, r3
 80048b4:	480c      	ldr	r0, [pc, #48]	; (80048e8 <MX_TIM2_Init+0x94>)
 80048b6:	f004 fec3 	bl	8009640 <HAL_TIM_ConfigClockSource>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80048c0:	f7ff f8de 	bl	8003a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048c4:	2300      	movs	r3, #0
 80048c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048cc:	463b      	mov	r3, r7
 80048ce:	4619      	mov	r1, r3
 80048d0:	4805      	ldr	r0, [pc, #20]	; (80048e8 <MX_TIM2_Init+0x94>)
 80048d2:	f005 fa8f 	bl	8009df4 <HAL_TIMEx_MasterConfigSynchronization>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80048dc:	f7ff f8d0 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80048e0:	bf00      	nop
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000754 	.word	0x20000754

080048ec <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]
 8004900:	615a      	str	r2, [r3, #20]
 8004902:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004904:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <MX_TIM13_Init+0x94>)
 8004906:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <MX_TIM13_Init+0x98>)
 8004908:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <MX_TIM13_Init+0x94>)
 800490c:	f240 3247 	movw	r2, #839	; 0x347
 8004910:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004912:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <MX_TIM13_Init+0x94>)
 8004914:	2200      	movs	r2, #0
 8004916:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <MX_TIM13_Init+0x94>)
 800491a:	2263      	movs	r2, #99	; 0x63
 800491c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800491e:	4b18      	ldr	r3, [pc, #96]	; (8004980 <MX_TIM13_Init+0x94>)
 8004920:	2200      	movs	r2, #0
 8004922:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <MX_TIM13_Init+0x94>)
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800492a:	4815      	ldr	r0, [pc, #84]	; (8004980 <MX_TIM13_Init+0x94>)
 800492c:	f004 fb3c 	bl	8008fa8 <HAL_TIM_Base_Init>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8004936:	f7ff f8a3 	bl	8003a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800493a:	4811      	ldr	r0, [pc, #68]	; (8004980 <MX_TIM13_Init+0x94>)
 800493c:	f004 fc5c 	bl	80091f8 <HAL_TIM_PWM_Init>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8004946:	f7ff f89b 	bl	8003a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800494a:	2360      	movs	r3, #96	; 0x60
 800494c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	2200      	movs	r2, #0
 800495e:	4619      	mov	r1, r3
 8004960:	4807      	ldr	r0, [pc, #28]	; (8004980 <MX_TIM13_Init+0x94>)
 8004962:	f004 fdab 	bl	80094bc <HAL_TIM_PWM_ConfigChannel>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800496c:	f7ff f888 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004970:	4803      	ldr	r0, [pc, #12]	; (8004980 <MX_TIM13_Init+0x94>)
 8004972:	f7ff fcd9 	bl	8004328 <HAL_TIM_MspPostInit>

}
 8004976:	bf00      	nop
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	200006c4 	.word	0x200006c4
 8004984:	40001c00 	.word	0x40001c00

08004988 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	e025      	b.n	80049e8 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 800499c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	da06      	bge.n	80049b2 <TP_Write_Byte+0x2a>
 80049a4:	2201      	movs	r2, #1
 80049a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049aa:	4813      	ldr	r0, [pc, #76]	; (80049f8 <TP_Write_Byte+0x70>)
 80049ac:	f002 f8a8 	bl	8006b00 <HAL_GPIO_WritePin>
 80049b0:	e005      	b.n	80049be <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049b8:	480f      	ldr	r0, [pc, #60]	; (80049f8 <TP_Write_Byte+0x70>)
 80049ba:	f002 f8a1 	bl	8006b00 <HAL_GPIO_WritePin>
		num<<=1;
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80049c4:	2200      	movs	r2, #0
 80049c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049ca:	480c      	ldr	r0, [pc, #48]	; (80049fc <TP_Write_Byte+0x74>)
 80049cc:	f002 f898 	bl	8006b00 <HAL_GPIO_WritePin>
		delay_us(1);
 80049d0:	2001      	movs	r0, #1
 80049d2:	f7ff fabb 	bl	8003f4c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80049d6:	2201      	movs	r2, #1
 80049d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049dc:	4807      	ldr	r0, [pc, #28]	; (80049fc <TP_Write_Byte+0x74>)
 80049de:	f002 f88f 	bl	8006b00 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	3301      	adds	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b07      	cmp	r3, #7
 80049ec:	d9d6      	bls.n	800499c <TP_Write_Byte+0x14>
	}
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40020800 	.word	0x40020800
 80049fc:	40021800 	.word	0x40021800

08004a00 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004a12:	2200      	movs	r2, #0
 8004a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a18:	482f      	ldr	r0, [pc, #188]	; (8004ad8 <TP_Read_AD+0xd8>)
 8004a1a:	f002 f871 	bl	8006b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a24:	482d      	ldr	r0, [pc, #180]	; (8004adc <TP_Read_AD+0xdc>)
 8004a26:	f002 f86b 	bl	8006b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	482a      	ldr	r0, [pc, #168]	; (8004ad8 <TP_Read_AD+0xd8>)
 8004a30:	f002 f866 	bl	8006b00 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff ffa6 	bl	8004988 <TP_Write_Byte>
	delay_us(6);
 8004a3c:	2006      	movs	r0, #6
 8004a3e:	f7ff fa85 	bl	8003f4c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004a42:	2200      	movs	r2, #0
 8004a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a48:	4823      	ldr	r0, [pc, #140]	; (8004ad8 <TP_Read_AD+0xd8>)
 8004a4a:	f002 f859 	bl	8006b00 <HAL_GPIO_WritePin>
	delay_us(1);
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f7ff fa7c 	bl	8003f4c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8004a54:	2201      	movs	r2, #1
 8004a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a5a:	481f      	ldr	r0, [pc, #124]	; (8004ad8 <TP_Read_AD+0xd8>)
 8004a5c:	f002 f850 	bl	8006b00 <HAL_GPIO_WritePin>
	delay_us(1);
 8004a60:	2001      	movs	r0, #1
 8004a62:	f7ff fa73 	bl	8003f4c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004a66:	2200      	movs	r2, #0
 8004a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a6c:	481a      	ldr	r0, [pc, #104]	; (8004ad8 <TP_Read_AD+0xd8>)
 8004a6e:	f002 f847 	bl	8006b00 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8004a72:	2300      	movs	r3, #0
 8004a74:	73fb      	strb	r3, [r7, #15]
 8004a76:	e01f      	b.n	8004ab8 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8004a78:	89bb      	ldrh	r3, [r7, #12]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a84:	4814      	ldr	r0, [pc, #80]	; (8004ad8 <TP_Read_AD+0xd8>)
 8004a86:	f002 f83b 	bl	8006b00 <HAL_GPIO_WritePin>
		delay_us(1);
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	f7ff fa5e 	bl	8003f4c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8004a90:	2201      	movs	r2, #1
 8004a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a96:	4810      	ldr	r0, [pc, #64]	; (8004ad8 <TP_Read_AD+0xd8>)
 8004a98:	f002 f832 	bl	8006b00 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8004a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aa0:	480e      	ldr	r0, [pc, #56]	; (8004adc <TP_Read_AD+0xdc>)
 8004aa2:	f002 f815 	bl	8006ad0 <HAL_GPIO_ReadPin>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <TP_Read_AD+0xb2>
 8004aac:	89bb      	ldrh	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d9dc      	bls.n	8004a78 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8004abe:	89bb      	ldrh	r3, [r7, #12]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2180      	movs	r1, #128	; 0x80
 8004ac8:	4803      	ldr	r0, [pc, #12]	; (8004ad8 <TP_Read_AD+0xd8>)
 8004aca:	f002 f819 	bl	8006b00 <HAL_GPIO_WritePin>
	return(Num);
 8004ace:	89bb      	ldrh	r3, [r7, #12]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40021800 	.word	0x40021800
 8004adc:	40020800 	.word	0x40020800

08004ae0 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b089      	sub	sp, #36	; 0x24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8004aee:	2300      	movs	r3, #0
 8004af0:	83fb      	strh	r3, [r7, #30]
 8004af2:	e00f      	b.n	8004b14 <TP_Read_XOY+0x34>
 8004af4:	8bfc      	ldrh	r4, [r7, #30]
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ff81 	bl	8004a00 <TP_Read_AD>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	0063      	lsls	r3, r4, #1
 8004b04:	f107 0120 	add.w	r1, r7, #32
 8004b08:	440b      	add	r3, r1
 8004b0a:	f823 2c14 	strh.w	r2, [r3, #-20]
 8004b0e:	8bfb      	ldrh	r3, [r7, #30]
 8004b10:	3301      	adds	r3, #1
 8004b12:	83fb      	strh	r3, [r7, #30]
 8004b14:	8bfb      	ldrh	r3, [r7, #30]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d9ec      	bls.n	8004af4 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	83fb      	strh	r3, [r7, #30]
 8004b1e:	e03b      	b.n	8004b98 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8004b20:	8bfb      	ldrh	r3, [r7, #30]
 8004b22:	3301      	adds	r3, #1
 8004b24:	83bb      	strh	r3, [r7, #28]
 8004b26:	e031      	b.n	8004b8c <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8004b28:	8bfb      	ldrh	r3, [r7, #30]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	f107 0220 	add.w	r2, r7, #32
 8004b30:	4413      	add	r3, r2
 8004b32:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8004b36:	8bbb      	ldrh	r3, [r7, #28]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	f107 0120 	add.w	r1, r7, #32
 8004b3e:	440b      	add	r3, r1
 8004b40:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d91e      	bls.n	8004b86 <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8004b48:	8bfb      	ldrh	r3, [r7, #30]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	f107 0220 	add.w	r2, r7, #32
 8004b50:	4413      	add	r3, r2
 8004b52:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004b56:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8004b58:	8bbb      	ldrh	r3, [r7, #28]
 8004b5a:	8bfa      	ldrh	r2, [r7, #30]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	f107 0120 	add.w	r1, r7, #32
 8004b62:	440b      	add	r3, r1
 8004b64:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8004b68:	0053      	lsls	r3, r2, #1
 8004b6a:	f107 0220 	add.w	r2, r7, #32
 8004b6e:	4413      	add	r3, r2
 8004b70:	460a      	mov	r2, r1
 8004b72:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8004b76:	8bbb      	ldrh	r3, [r7, #28]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	f107 0220 	add.w	r2, r7, #32
 8004b7e:	4413      	add	r3, r2
 8004b80:	8b3a      	ldrh	r2, [r7, #24]
 8004b82:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8004b86:	8bbb      	ldrh	r3, [r7, #28]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	83bb      	strh	r3, [r7, #28]
 8004b8c:	8bbb      	ldrh	r3, [r7, #28]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d9ca      	bls.n	8004b28 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8004b92:	8bfb      	ldrh	r3, [r7, #30]
 8004b94:	3301      	adds	r3, #1
 8004b96:	83fb      	strh	r3, [r7, #30]
 8004b98:	8bfb      	ldrh	r3, [r7, #30]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d9c0      	bls.n	8004b20 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	83fb      	strh	r3, [r7, #30]
 8004ba6:	e00c      	b.n	8004bc2 <TP_Read_XOY+0xe2>
 8004ba8:	8bfb      	ldrh	r3, [r7, #30]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	f107 0220 	add.w	r2, r7, #32
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8004bb6:	8b7b      	ldrh	r3, [r7, #26]
 8004bb8:	4413      	add	r3, r2
 8004bba:	837b      	strh	r3, [r7, #26]
 8004bbc:	8bfb      	ldrh	r3, [r7, #30]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	83fb      	strh	r3, [r7, #30]
 8004bc2:	8bfb      	ldrh	r3, [r7, #30]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d9ef      	bls.n	8004ba8 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8004bc8:	8b7b      	ldrh	r3, [r7, #26]
 8004bca:	4a05      	ldr	r2, [pc, #20]	; (8004be0 <TP_Read_XOY+0x100>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	833b      	strh	r3, [r7, #24]
	return temp;
 8004bd4:	8b3b      	ldrh	r3, [r7, #24]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3724      	adds	r7, #36	; 0x24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd90      	pop	{r4, r7, pc}
 8004bde:	bf00      	nop
 8004be0:	aaaaaaab 	.word	0xaaaaaaab

08004be4 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8004bee:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <TP_Read_XY+0x3c>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff74 	bl	8004ae0 <TP_Read_XOY>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <TP_Read_XY+0x40>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff ff6d 	bl	8004ae0 <TP_Read_XOY>
 8004c06:	4603      	mov	r3, r0
 8004c08:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	89fa      	ldrh	r2, [r7, #14]
 8004c0e:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	89ba      	ldrh	r2, [r7, #12]
 8004c14:	801a      	strh	r2, [r3, #0]
	return 1;
 8004c16:	2301      	movs	r3, #1
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	2000005c 	.word	0x2000005c
 8004c24:	2000005d 	.word	0x2000005d

08004c28 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8004c32:	f107 0212 	add.w	r2, r7, #18
 8004c36:	f107 0314 	add.w	r3, r7, #20
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff ffd1 	bl	8004be4 <TP_Read_XY>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <TP_Read_XY2+0x28>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e049      	b.n	8004ce4 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8004c50:	f107 020e 	add.w	r2, r7, #14
 8004c54:	f107 0310 	add.w	r3, r7, #16
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff ffc2 	bl	8004be4 <TP_Read_XY>
 8004c60:	4603      	mov	r3, r0
 8004c62:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <TP_Read_XY2+0x46>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e03a      	b.n	8004ce4 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8004c6e:	8a3a      	ldrh	r2, [r7, #16]
 8004c70:	8abb      	ldrh	r3, [r7, #20]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d804      	bhi.n	8004c80 <TP_Read_XY2+0x58>
 8004c76:	8a3b      	ldrh	r3, [r7, #16]
 8004c78:	3363      	adds	r3, #99	; 0x63
 8004c7a:	8aba      	ldrh	r2, [r7, #20]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	da08      	bge.n	8004c92 <TP_Read_XY2+0x6a>
 8004c80:	8aba      	ldrh	r2, [r7, #20]
 8004c82:	8a3b      	ldrh	r3, [r7, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d82c      	bhi.n	8004ce2 <TP_Read_XY2+0xba>
 8004c88:	8abb      	ldrh	r3, [r7, #20]
 8004c8a:	3363      	adds	r3, #99	; 0x63
 8004c8c:	8a3a      	ldrh	r2, [r7, #16]
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	db27      	blt.n	8004ce2 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8004c92:	89fa      	ldrh	r2, [r7, #14]
 8004c94:	8a7b      	ldrh	r3, [r7, #18]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d804      	bhi.n	8004ca4 <TP_Read_XY2+0x7c>
 8004c9a:	89fb      	ldrh	r3, [r7, #14]
 8004c9c:	3363      	adds	r3, #99	; 0x63
 8004c9e:	8a7a      	ldrh	r2, [r7, #18]
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	da08      	bge.n	8004cb6 <TP_Read_XY2+0x8e>
 8004ca4:	8a7a      	ldrh	r2, [r7, #18]
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d81a      	bhi.n	8004ce2 <TP_Read_XY2+0xba>
 8004cac:	8a7b      	ldrh	r3, [r7, #18]
 8004cae:	3363      	adds	r3, #99	; 0x63
 8004cb0:	89fa      	ldrh	r2, [r7, #14]
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	db15      	blt.n	8004ce2 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8004cb6:	8abb      	ldrh	r3, [r7, #20]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	8a3b      	ldrh	r3, [r7, #16]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	0fda      	lsrs	r2, r3, #31
 8004cc0:	4413      	add	r3, r2
 8004cc2:	105b      	asrs	r3, r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8004cca:	8a7b      	ldrh	r3, [r7, #18]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	89fb      	ldrh	r3, [r7, #14]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	0fda      	lsrs	r2, r3, #31
 8004cd4:	4413      	add	r3, r2
 8004cd6:	105b      	asrs	r3, r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	801a      	strh	r2, [r3, #0]
		return 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <TP_Read_XY2+0xbc>
	}else return 0;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	80fb      	strh	r3, [r7, #6]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	80bb      	strh	r3, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	3b0c      	subs	r3, #12
 8004d02:	b298      	uxth	r0, r3
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	330d      	adds	r3, #13
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	88bc      	ldrh	r4, [r7, #4]
 8004d0c:	88b9      	ldrh	r1, [r7, #4]
 8004d0e:	887b      	ldrh	r3, [r7, #2]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4623      	mov	r3, r4
 8004d14:	f7fd ffab 	bl	8002c6e <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8004d18:	88bb      	ldrh	r3, [r7, #4]
 8004d1a:	3b0c      	subs	r3, #12
 8004d1c:	b299      	uxth	r1, r3
 8004d1e:	88bb      	ldrh	r3, [r7, #4]
 8004d20:	330d      	adds	r3, #13
 8004d22:	b29c      	uxth	r4, r3
 8004d24:	88fa      	ldrh	r2, [r7, #6]
 8004d26:	88f8      	ldrh	r0, [r7, #6]
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	f7fd ff9e 	bl	8002c6e <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	3301      	adds	r3, #1
 8004d36:	b298      	uxth	r0, r3
 8004d38:	88bb      	ldrh	r3, [r7, #4]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	887a      	ldrh	r2, [r7, #2]
 8004d40:	4619      	mov	r1, r3
 8004d42:	f7fd ff7d 	bl	8002c40 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b298      	uxth	r0, r3
 8004d4c:	88bb      	ldrh	r3, [r7, #4]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	887a      	ldrh	r2, [r7, #2]
 8004d54:	4619      	mov	r1, r3
 8004d56:	f7fd ff73 	bl	8002c40 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	b298      	uxth	r0, r3
 8004d60:	88bb      	ldrh	r3, [r7, #4]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fd ff69 	bl	8002c40 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b298      	uxth	r0, r3
 8004d74:	88bb      	ldrh	r3, [r7, #4]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f7fd ff5f 	bl	8002c40 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8004d82:	88f8      	ldrh	r0, [r7, #6]
 8004d84:	88b9      	ldrh	r1, [r7, #4]
 8004d86:	887a      	ldrh	r2, [r7, #2]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2306      	movs	r3, #6
 8004d8e:	f7fe fbf8 	bl	8003582 <lcd_DrawCircle>
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd90      	pop	{r4, r7, pc}
	...

08004d9c <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8004da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004daa:	4843      	ldr	r0, [pc, #268]	; (8004eb8 <TP_Scan+0x11c>)
 8004dac:	f001 fe90 	bl	8006ad0 <HAL_GPIO_ReadPin>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d157      	bne.n	8004e66 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <TP_Scan+0x2a>
 8004dbc:	493f      	ldr	r1, [pc, #252]	; (8004ebc <TP_Scan+0x120>)
 8004dbe:	4840      	ldr	r0, [pc, #256]	; (8004ec0 <TP_Scan+0x124>)
 8004dc0:	f7ff ff32 	bl	8004c28 <TP_Read_XY2>
 8004dc4:	e03c      	b.n	8004e40 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8004dc6:	493d      	ldr	r1, [pc, #244]	; (8004ebc <TP_Scan+0x120>)
 8004dc8:	483d      	ldr	r0, [pc, #244]	; (8004ec0 <TP_Scan+0x124>)
 8004dca:	f7ff ff2d 	bl	8004c28 <TP_Read_XY2>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d035      	beq.n	8004e40 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8004dd4:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <TP_Scan+0x128>)
 8004dd6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004dda:	4b3a      	ldr	r3, [pc, #232]	; (8004ec4 <TP_Scan+0x128>)
 8004ddc:	899b      	ldrh	r3, [r3, #12]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dea:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <TP_Scan+0x128>)
 8004dec:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e00:	ee17 3a90 	vmov	r3, s15
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <TP_Scan+0x128>)
 8004e08:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8004e0a:	4b2e      	ldr	r3, [pc, #184]	; (8004ec4 <TP_Scan+0x128>)
 8004e0c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004e10:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <TP_Scan+0x128>)
 8004e12:	8adb      	ldrh	r3, [r3, #22]
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <TP_Scan+0x128>)
 8004e22:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e36:	ee17 3a90 	vmov	r3, s15
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <TP_Scan+0x128>)
 8004e3e:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8004e40:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <TP_Scan+0x128>)
 8004e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e46:	b25b      	sxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db2a      	blt.n	8004ea2 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <TP_Scan+0x128>)
 8004e4e:	22c0      	movs	r2, #192	; 0xc0
 8004e50:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <TP_Scan+0x128>)
 8004e56:	899a      	ldrh	r2, [r3, #12]
 8004e58:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <TP_Scan+0x128>)
 8004e5a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <TP_Scan+0x128>)
 8004e5e:	8ada      	ldrh	r2, [r3, #22]
 8004e60:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <TP_Scan+0x128>)
 8004e62:	83da      	strh	r2, [r3, #30]
 8004e64:	e01d      	b.n	8004ea2 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8004e66:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <TP_Scan+0x128>)
 8004e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e6c:	b25b      	sxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da09      	bge.n	8004e86 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8004e72:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <TP_Scan+0x128>)
 8004e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <TP_Scan+0x128>)
 8004e80:	f883 2020 	strb.w	r2, [r3, #32]
 8004e84:	e00d      	b.n	8004ea2 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8004e86:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <TP_Scan+0x128>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <TP_Scan+0x128>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8004e92:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <TP_Scan+0x128>)
 8004e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e98:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <TP_Scan+0x128>)
 8004e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ea0:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <TP_Scan+0x128>)
 8004ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004eac:	b2db      	uxtb	r3, r3
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40020800 	.word	0x40020800
 8004ebc:	2000003e 	.word	0x2000003e
 8004ec0:	20000034 	.word	0x20000034
 8004ec4:	20000028 	.word	0x20000028

08004ec8 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004ecc:	220e      	movs	r2, #14
 8004ece:	4905      	ldr	r1, [pc, #20]	; (8004ee4 <TP_Save_Adjdata+0x1c>)
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f7fc f959 	bl	8001188 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	200e      	movs	r0, #14
 8004eda:	f7fc f8f5 	bl	80010c8 <at24c_WriteOneByte>
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	2000004c 	.word	0x2000004c

08004ee8 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8004ef2:	200e      	movs	r0, #14
 8004ef4:	f7fc f8cc 	bl	8001090 <at24c_ReadOneByte>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004f02:	220e      	movs	r2, #14
 8004f04:	4905      	ldr	r1, [pc, #20]	; (8004f1c <TP_Get_Adjdata+0x34>)
 8004f06:	2000      	movs	r0, #0
 8004f08:	f7fc f91f 	bl	800114a <at24c_Read>
		return 1;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2000004c 	.word	0x2000004c

08004f20 <touch_Adjust>:


void touch_Adjust(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08e      	sub	sp, #56	; 0x38
 8004f24:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8004f32:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <touch_Adjust+0x198>)
 8004f34:	881a      	ldrh	r2, [r3, #0]
 8004f36:	4b60      	ldr	r3, [pc, #384]	; (80050b8 <touch_Adjust+0x198>)
 8004f38:	885b      	ldrh	r3, [r3, #2]
 8004f3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f3e:	9100      	str	r1, [sp, #0]
 8004f40:	2100      	movs	r1, #0
 8004f42:	2000      	movs	r0, #0
 8004f44:	f7fd fe46 	bl	8002bd4 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9302      	str	r3, [sp, #8]
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f5a:	4a58      	ldr	r2, [pc, #352]	; (80050bc <touch_Adjust+0x19c>)
 8004f5c:	2128      	movs	r1, #40	; 0x28
 8004f5e:	2005      	movs	r0, #5
 8004f60:	f7fe fb7c 	bl	800365c <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8004f64:	2300      	movs	r3, #0
 8004f66:	9302      	str	r3, [sp, #8]
 8004f68:	2310      	movs	r3, #16
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f76:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <touch_Adjust+0x1a0>)
 8004f78:	2141      	movs	r1, #65	; 0x41
 8004f7a:	2005      	movs	r0, #5
 8004f7c:	f7fe fb6e 	bl	800365c <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8004f80:	2300      	movs	r3, #0
 8004f82:	9302      	str	r3, [sp, #8]
 8004f84:	2310      	movs	r3, #16
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f92:	4a4c      	ldr	r2, [pc, #304]	; (80050c4 <touch_Adjust+0x1a4>)
 8004f94:	215a      	movs	r1, #90	; 0x5a
 8004f96:	2005      	movs	r0, #5
 8004f98:	f7fe fb60 	bl	800365c <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8004f9c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004fa0:	2114      	movs	r1, #20
 8004fa2:	2014      	movs	r0, #20
 8004fa4:	f7ff fea2 	bl	8004cec <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8004fa8:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <touch_Adjust+0x1a8>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8004fb0:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <touch_Adjust+0x1a8>)
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8004fb8:	2032      	movs	r0, #50	; 0x32
 8004fba:	f000 fcd9 	bl	8005970 <HAL_Delay>
		tp_dev.scan(1);
 8004fbe:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <touch_Adjust+0x1a8>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8004fc6:	4b40      	ldr	r3, [pc, #256]	; (80050c8 <touch_Adjust+0x1a8>)
 8004fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	f040 835e 	bne.w	8005692 <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8004fd6:	4b3c      	ldr	r3, [pc, #240]	; (80050c8 <touch_Adjust+0x1a8>)
 8004fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <touch_Adjust+0x1a8>)
 8004fe4:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8004fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fec:	4a36      	ldr	r2, [pc, #216]	; (80050c8 <touch_Adjust+0x1a8>)
 8004fee:	8992      	ldrh	r2, [r2, #12]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004ff6:	440b      	add	r3, r1
 8004ff8:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8004ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005000:	4a31      	ldr	r2, [pc, #196]	; (80050c8 <touch_Adjust+0x1a8>)
 8005002:	8ad2      	ldrh	r2, [r2, #22]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800500a:	440b      	add	r3, r1
 800500c:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8005010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005014:	3301      	adds	r3, #1
 8005016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 800501a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800501e:	3b01      	subs	r3, #1
 8005020:	2b03      	cmp	r3, #3
 8005022:	d8c9      	bhi.n	8004fb8 <touch_Adjust+0x98>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <touch_Adjust+0x10c>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	0800503d 	.word	0x0800503d
 8005030:	0800505f 	.word	0x0800505f
 8005034:	08005089 	.word	0x08005089
 8005038:	080050cd 	.word	0x080050cd
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 800503c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005040:	2114      	movs	r1, #20
 8005042:	2014      	movs	r0, #20
 8005044:	f7ff fe52 	bl	8004cec <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8005048:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <touch_Adjust+0x198>)
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	3b14      	subs	r3, #20
 800504e:	b29b      	uxth	r3, r3
 8005050:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005054:	2114      	movs	r1, #20
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fe48 	bl	8004cec <TP_Drow_Touch_Point>
					break;
 800505c:	e31a      	b.n	8005694 <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <touch_Adjust+0x198>)
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	3b14      	subs	r3, #20
 8005064:	b29b      	uxth	r3, r3
 8005066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800506a:	2114      	movs	r1, #20
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fe3d 	bl	8004cec <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8005072:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <touch_Adjust+0x198>)
 8005074:	885b      	ldrh	r3, [r3, #2]
 8005076:	3b14      	subs	r3, #20
 8005078:	b29b      	uxth	r3, r3
 800507a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800507e:	4619      	mov	r1, r3
 8005080:	2014      	movs	r0, #20
 8005082:	f7ff fe33 	bl	8004cec <TP_Drow_Touch_Point>
					break;
 8005086:	e305      	b.n	8005694 <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <touch_Adjust+0x198>)
 800508a:	885b      	ldrh	r3, [r3, #2]
 800508c:	3b14      	subs	r3, #20
 800508e:	b29b      	uxth	r3, r3
 8005090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005094:	4619      	mov	r1, r3
 8005096:	2014      	movs	r0, #20
 8005098:	f7ff fe28 	bl	8004cec <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <touch_Adjust+0x198>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	3b14      	subs	r3, #20
 80050a2:	b298      	uxth	r0, r3
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <touch_Adjust+0x198>)
 80050a6:	885b      	ldrh	r3, [r3, #2]
 80050a8:	3b14      	subs	r3, #20
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80050b0:	4619      	mov	r1, r3
 80050b2:	f7ff fe1b 	bl	8004cec <TP_Drow_Touch_Point>
					break;
 80050b6:	e2ed      	b.n	8005694 <touch_Adjust+0x774>
 80050b8:	200005d0 	.word	0x200005d0
 80050bc:	0800d1c8 	.word	0x0800d1c8
 80050c0:	0800d1e4 	.word	0x0800d1e4
 80050c4:	0800d1fc 	.word	0x0800d1fc
 80050c8:	20000028 	.word	0x20000028
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 80050cc:	883b      	ldrh	r3, [r7, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	88bb      	ldrh	r3, [r7, #4]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bfb8      	it	lt
 80050d8:	425b      	neglt	r3, r3
 80050da:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	461a      	mov	r2, r3
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bfb8      	it	lt
 80050e8:	425b      	neglt	r3, r3
 80050ea:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	fb03 f303 	mul.w	r3, r3, r3
 80050f2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	fb03 f303 	mul.w	r3, r3, r3
 80050fa:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80050fc:	6a3a      	ldr	r2, [r7, #32]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f7fb f9f6 	bl	80004f4 <__aeabi_ui2d>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	ec43 2b10 	vmov	d0, r2, r3
 8005110:	f007 f8d6 	bl	800c2c0 <sqrt>
 8005114:	ec53 2b10 	vmov	r2, r3, d0
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	f7fb fd3c 	bl	8000b98 <__aeabi_d2uiz>
 8005120:	4603      	mov	r3, r0
 8005122:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8005124:	893b      	ldrh	r3, [r7, #8]
 8005126:	461a      	mov	r2, r3
 8005128:	89bb      	ldrh	r3, [r7, #12]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfb8      	it	lt
 8005130:	425b      	neglt	r3, r3
 8005132:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8005134:	897b      	ldrh	r3, [r7, #10]
 8005136:	461a      	mov	r2, r3
 8005138:	89fb      	ldrh	r3, [r7, #14]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	bfb8      	it	lt
 8005140:	425b      	neglt	r3, r3
 8005142:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	fb03 f303 	mul.w	r3, r3, r3
 800514a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	fb03 f303 	mul.w	r3, r3, r3
 8005152:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb f9ca 	bl	80004f4 <__aeabi_ui2d>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	ec43 2b10 	vmov	d0, r2, r3
 8005168:	f007 f8aa 	bl	800c2c0 <sqrt>
 800516c:	ec53 2b10 	vmov	r2, r3, d0
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	f7fb fd10 	bl	8000b98 <__aeabi_d2uiz>
 8005178:	4603      	mov	r3, r0
 800517a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800517c:	8b7b      	ldrh	r3, [r7, #26]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005186:	8b3b      	ldrh	r3, [r7, #24]
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005190:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005194:	ee16 0a90 	vmov	r0, s13
 8005198:	f7fb f9ce 	bl	8000538 <__aeabi_f2d>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 80051a4:	a384      	add	r3, pc, #528	; (adr r3, 80053b8 <touch_Adjust+0x498>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051ae:	f7fb fc8d 	bl	8000acc <__aeabi_dcmplt>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10f      	bne.n	80051d8 <touch_Adjust+0x2b8>
 80051b8:	a381      	add	r3, pc, #516	; (adr r3, 80053c0 <touch_Adjust+0x4a0>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051c2:	f7fb fca1 	bl	8000b08 <__aeabi_dcmpgt>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <touch_Adjust+0x2b8>
 80051cc:	8b7b      	ldrh	r3, [r7, #26]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <touch_Adjust+0x2b8>
 80051d2:	8b3b      	ldrh	r3, [r7, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d136      	bne.n	8005246 <touch_Adjust+0x326>
					{
						cnt=0;
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80051de:	4b7a      	ldr	r3, [pc, #488]	; (80053c8 <touch_Adjust+0x4a8>)
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	3b14      	subs	r3, #20
 80051e4:	b298      	uxth	r0, r3
 80051e6:	4b78      	ldr	r3, [pc, #480]	; (80053c8 <touch_Adjust+0x4a8>)
 80051e8:	885b      	ldrh	r3, [r3, #2]
 80051ea:	3b14      	subs	r3, #20
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051f2:	4619      	mov	r1, r3
 80051f4:	f7ff fd7a 	bl	8004cec <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80051f8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80051fc:	2114      	movs	r1, #20
 80051fe:	2014      	movs	r0, #20
 8005200:	f7ff fd74 	bl	8004cec <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005204:	2300      	movs	r3, #0
 8005206:	9302      	str	r3, [sp, #8]
 8005208:	2310      	movs	r3, #16
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005216:	4a6d      	ldr	r2, [pc, #436]	; (80053cc <touch_Adjust+0x4ac>)
 8005218:	2128      	movs	r1, #40	; 0x28
 800521a:	2005      	movs	r0, #5
 800521c:	f7fe fa1e 	bl	800365c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005220:	2300      	movs	r3, #0
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	2310      	movs	r3, #16
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005232:	4a67      	ldr	r2, [pc, #412]	; (80053d0 <touch_Adjust+0x4b0>)
 8005234:	213c      	movs	r1, #60	; 0x3c
 8005236:	2005      	movs	r0, #5
 8005238:	f7fe fa10 	bl	800365c <lcd_ShowStr>
						HAL_Delay(1000);
 800523c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005240:	f000 fb96 	bl	8005970 <HAL_Delay>
 						continue;
 8005244:	e226      	b.n	8005694 <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8005246:	883b      	ldrh	r3, [r7, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	893b      	ldrh	r3, [r7, #8]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	bfb8      	it	lt
 8005252:	425b      	neglt	r3, r3
 8005254:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	461a      	mov	r2, r3
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	bfb8      	it	lt
 8005262:	425b      	neglt	r3, r3
 8005264:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	fb03 f303 	mul.w	r3, r3, r3
 800526c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	fb03 f303 	mul.w	r3, r3, r3
 8005274:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005276:	6a3a      	ldr	r2, [r7, #32]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f7fb f939 	bl	80004f4 <__aeabi_ui2d>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	ec43 2b10 	vmov	d0, r2, r3
 800528a:	f007 f819 	bl	800c2c0 <sqrt>
 800528e:	ec53 2b10 	vmov	r2, r3, d0
 8005292:	4610      	mov	r0, r2
 8005294:	4619      	mov	r1, r3
 8005296:	f7fb fc7f 	bl	8000b98 <__aeabi_d2uiz>
 800529a:	4603      	mov	r3, r0
 800529c:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 800529e:	88bb      	ldrh	r3, [r7, #4]
 80052a0:	461a      	mov	r2, r3
 80052a2:	89bb      	ldrh	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfb8      	it	lt
 80052aa:	425b      	neglt	r3, r3
 80052ac:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	461a      	mov	r2, r3
 80052b2:	89fb      	ldrh	r3, [r7, #14]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfb8      	it	lt
 80052ba:	425b      	neglt	r3, r3
 80052bc:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	fb03 f303 	mul.w	r3, r3, r3
 80052c4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	fb03 f303 	mul.w	r3, r3, r3
 80052cc:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fb f90d 	bl	80004f4 <__aeabi_ui2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	ec43 2b10 	vmov	d0, r2, r3
 80052e2:	f006 ffed 	bl	800c2c0 <sqrt>
 80052e6:	ec53 2b10 	vmov	r2, r3, d0
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	f7fb fc53 	bl	8000b98 <__aeabi_d2uiz>
 80052f2:	4603      	mov	r3, r0
 80052f4:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80052f6:	8b7b      	ldrh	r3, [r7, #26]
 80052f8:	ee07 3a90 	vmov	s15, r3
 80052fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005300:	8b3b      	ldrh	r3, [r7, #24]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800530a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800530e:	ee16 0a90 	vmov	r0, s13
 8005312:	f7fb f911 	bl	8000538 <__aeabi_f2d>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 800531e:	a326      	add	r3, pc, #152	; (adr r3, 80053b8 <touch_Adjust+0x498>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005328:	f7fb fbd0 	bl	8000acc <__aeabi_dcmplt>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <touch_Adjust+0x426>
 8005332:	a323      	add	r3, pc, #140	; (adr r3, 80053c0 <touch_Adjust+0x4a0>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800533c:	f7fb fbe4 	bl	8000b08 <__aeabi_dcmpgt>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d046      	beq.n	80053d4 <touch_Adjust+0x4b4>
					{
						cnt=0;
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800534c:	4b1e      	ldr	r3, [pc, #120]	; (80053c8 <touch_Adjust+0x4a8>)
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	3b14      	subs	r3, #20
 8005352:	b298      	uxth	r0, r3
 8005354:	4b1c      	ldr	r3, [pc, #112]	; (80053c8 <touch_Adjust+0x4a8>)
 8005356:	885b      	ldrh	r3, [r3, #2]
 8005358:	3b14      	subs	r3, #20
 800535a:	b29b      	uxth	r3, r3
 800535c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005360:	4619      	mov	r1, r3
 8005362:	f7ff fcc3 	bl	8004cec <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005366:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800536a:	2114      	movs	r1, #20
 800536c:	2014      	movs	r0, #20
 800536e:	f7ff fcbd 	bl	8004cec <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005372:	2300      	movs	r3, #0
 8005374:	9302      	str	r3, [sp, #8]
 8005376:	2310      	movs	r3, #16
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005384:	4a11      	ldr	r2, [pc, #68]	; (80053cc <touch_Adjust+0x4ac>)
 8005386:	2128      	movs	r1, #40	; 0x28
 8005388:	2005      	movs	r0, #5
 800538a:	f7fe f967 	bl	800365c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 800538e:	2300      	movs	r3, #0
 8005390:	9302      	str	r3, [sp, #8]
 8005392:	2310      	movs	r3, #16
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053a0:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <touch_Adjust+0x4b0>)
 80053a2:	213c      	movs	r1, #60	; 0x3c
 80053a4:	2005      	movs	r0, #5
 80053a6:	f7fe f959 	bl	800365c <lcd_ShowStr>
						HAL_Delay(1000);
 80053aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053ae:	f000 fadf 	bl	8005970 <HAL_Delay>
						continue;
 80053b2:	e16f      	b.n	8005694 <touch_Adjust+0x774>
 80053b4:	f3af 8000 	nop.w
 80053b8:	66666666 	.word	0x66666666
 80053bc:	3fee6666 	.word	0x3fee6666
 80053c0:	cccccccd 	.word	0xcccccccd
 80053c4:	3ff0cccc 	.word	0x3ff0cccc
 80053c8:	200005d0 	.word	0x200005d0
 80053cc:	0800d210 	.word	0x0800d210
 80053d0:	0800d230 	.word	0x0800d230
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 80053d4:	88bb      	ldrh	r3, [r7, #4]
 80053d6:	461a      	mov	r2, r3
 80053d8:	893b      	ldrh	r3, [r7, #8]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bfb8      	it	lt
 80053e0:	425b      	neglt	r3, r3
 80053e2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	461a      	mov	r2, r3
 80053e8:	897b      	ldrh	r3, [r7, #10]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bfb8      	it	lt
 80053f0:	425b      	neglt	r3, r3
 80053f2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	fb03 f303 	mul.w	r3, r3, r3
 80053fa:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	fb03 f303 	mul.w	r3, r3, r3
 8005402:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f7fb f872 	bl	80004f4 <__aeabi_ui2d>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	ec43 2b10 	vmov	d0, r2, r3
 8005418:	f006 ff52 	bl	800c2c0 <sqrt>
 800541c:	ec53 2b10 	vmov	r2, r3, d0
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	f7fb fbb8 	bl	8000b98 <__aeabi_d2uiz>
 8005428:	4603      	mov	r3, r0
 800542a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 800542c:	883b      	ldrh	r3, [r7, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	89bb      	ldrh	r3, [r7, #12]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	bfb8      	it	lt
 8005438:	425b      	neglt	r3, r3
 800543a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 800543c:	887b      	ldrh	r3, [r7, #2]
 800543e:	461a      	mov	r2, r3
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	bfb8      	it	lt
 8005448:	425b      	neglt	r3, r3
 800544a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	fb03 f303 	mul.w	r3, r3, r3
 8005452:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	fb03 f303 	mul.w	r3, r3, r3
 800545a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	4618      	mov	r0, r3
 8005464:	f7fb f846 	bl	80004f4 <__aeabi_ui2d>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	ec43 2b10 	vmov	d0, r2, r3
 8005470:	f006 ff26 	bl	800c2c0 <sqrt>
 8005474:	ec53 2b10 	vmov	r2, r3, d0
 8005478:	4610      	mov	r0, r2
 800547a:	4619      	mov	r1, r3
 800547c:	f7fb fb8c 	bl	8000b98 <__aeabi_d2uiz>
 8005480:	4603      	mov	r3, r0
 8005482:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005484:	8b7b      	ldrh	r3, [r7, #26]
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800548e:	8b3b      	ldrh	r3, [r7, #24]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005498:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800549c:	ee16 0a90 	vmov	r0, s13
 80054a0:	f7fb f84a 	bl	8000538 <__aeabi_f2d>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80054ac:	a383      	add	r3, pc, #524	; (adr r3, 80056bc <touch_Adjust+0x79c>)
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054b6:	f7fb fb09 	bl	8000acc <__aeabi_dcmplt>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <touch_Adjust+0x5b4>
 80054c0:	a380      	add	r3, pc, #512	; (adr r3, 80056c4 <touch_Adjust+0x7a4>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054ca:	f7fb fb1d 	bl	8000b08 <__aeabi_dcmpgt>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d036      	beq.n	8005542 <touch_Adjust+0x622>
					{
						cnt=0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80054da:	4b71      	ldr	r3, [pc, #452]	; (80056a0 <touch_Adjust+0x780>)
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	3b14      	subs	r3, #20
 80054e0:	b298      	uxth	r0, r3
 80054e2:	4b6f      	ldr	r3, [pc, #444]	; (80056a0 <touch_Adjust+0x780>)
 80054e4:	885b      	ldrh	r3, [r3, #2]
 80054e6:	3b14      	subs	r3, #20
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ee:	4619      	mov	r1, r3
 80054f0:	f7ff fbfc 	bl	8004cec <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80054f4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80054f8:	2114      	movs	r1, #20
 80054fa:	2014      	movs	r0, #20
 80054fc:	f7ff fbf6 	bl	8004cec <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005500:	2300      	movs	r3, #0
 8005502:	9302      	str	r3, [sp, #8]
 8005504:	2310      	movs	r3, #16
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005512:	4a64      	ldr	r2, [pc, #400]	; (80056a4 <touch_Adjust+0x784>)
 8005514:	2128      	movs	r1, #40	; 0x28
 8005516:	2005      	movs	r0, #5
 8005518:	f7fe f8a0 	bl	800365c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 800551c:	2300      	movs	r3, #0
 800551e:	9302      	str	r3, [sp, #8]
 8005520:	2310      	movs	r3, #16
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800552e:	4a5e      	ldr	r2, [pc, #376]	; (80056a8 <touch_Adjust+0x788>)
 8005530:	213c      	movs	r1, #60	; 0x3c
 8005532:	2005      	movs	r0, #5
 8005534:	f7fe f892 	bl	800365c <lcd_ShowStr>

						HAL_Delay(1000);
 8005538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800553c:	f000 fa18 	bl	8005970 <HAL_Delay>
 							continue;
 8005540:	e0a8      	b.n	8005694 <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8005542:	4b57      	ldr	r3, [pc, #348]	; (80056a0 <touch_Adjust+0x780>)
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	3b28      	subs	r3, #40	; 0x28
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005550:	88bb      	ldrh	r3, [r7, #4]
 8005552:	461a      	mov	r2, r3
 8005554:	883b      	ldrh	r3, [r7, #0]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	ee07 3a90 	vmov	s15, r3
 800555c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005564:	4b51      	ldr	r3, [pc, #324]	; (80056ac <touch_Adjust+0x78c>)
 8005566:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 800556a:	4b4d      	ldr	r3, [pc, #308]	; (80056a0 <touch_Adjust+0x780>)
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005576:	4b4d      	ldr	r3, [pc, #308]	; (80056ac <touch_Adjust+0x78c>)
 8005578:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800557c:	88bb      	ldrh	r3, [r7, #4]
 800557e:	461a      	mov	r2, r3
 8005580:	883b      	ldrh	r3, [r7, #0]
 8005582:	4413      	add	r3, r2
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800558c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005590:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005594:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800559c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a0:	ee17 3a90 	vmov	r3, s15
 80055a4:	b21a      	sxth	r2, r3
 80055a6:	4b41      	ldr	r3, [pc, #260]	; (80056ac <touch_Adjust+0x78c>)
 80055a8:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 80055aa:	4b3d      	ldr	r3, [pc, #244]	; (80056a0 <touch_Adjust+0x780>)
 80055ac:	885b      	ldrh	r3, [r3, #2]
 80055ae:	3b28      	subs	r3, #40	; 0x28
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80055b8:	897b      	ldrh	r3, [r7, #10]
 80055ba:	461a      	mov	r2, r3
 80055bc:	887b      	ldrh	r3, [r7, #2]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055cc:	4b37      	ldr	r3, [pc, #220]	; (80056ac <touch_Adjust+0x78c>)
 80055ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 80055d2:	4b33      	ldr	r3, [pc, #204]	; (80056a0 <touch_Adjust+0x780>)
 80055d4:	885b      	ldrh	r3, [r3, #2]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055de:	4b33      	ldr	r3, [pc, #204]	; (80056ac <touch_Adjust+0x78c>)
 80055e0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80055e4:	897b      	ldrh	r3, [r7, #10]
 80055e6:	461a      	mov	r2, r3
 80055e8:	887b      	ldrh	r3, [r7, #2]
 80055ea:	4413      	add	r3, r2
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005608:	ee17 3a90 	vmov	r3, s15
 800560c:	b21a      	sxth	r2, r3
 800560e:	4b27      	ldr	r3, [pc, #156]	; (80056ac <touch_Adjust+0x78c>)
 8005610:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <touch_Adjust+0x780>)
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	3b14      	subs	r3, #20
 8005618:	b298      	uxth	r0, r3
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <touch_Adjust+0x780>)
 800561c:	885b      	ldrh	r3, [r3, #2]
 800561e:	3b14      	subs	r3, #20
 8005620:	b29b      	uxth	r3, r3
 8005622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005626:	4619      	mov	r1, r3
 8005628:	f7ff fb60 	bl	8004cec <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 800562c:	2300      	movs	r3, #0
 800562e:	9302      	str	r3, [sp, #8]
 8005630:	2310      	movs	r3, #16
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800563e:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <touch_Adjust+0x790>)
 8005640:	2128      	movs	r1, #40	; 0x28
 8005642:	2005      	movs	r0, #5
 8005644:	f7fe f80a 	bl	800365c <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005648:	2300      	movs	r3, #0
 800564a:	9302      	str	r3, [sp, #8]
 800564c:	2310      	movs	r3, #16
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800565a:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <touch_Adjust+0x794>)
 800565c:	213c      	movs	r1, #60	; 0x3c
 800565e:	2005      	movs	r0, #5
 8005660:	f7fd fffc 	bl	800365c <lcd_ShowStr>
					HAL_Delay(1000);
 8005664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005668:	f000 f982 	bl	8005970 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 800566c:	2300      	movs	r3, #0
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	2310      	movs	r3, #16
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800567e:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <touch_Adjust+0x798>)
 8005680:	2128      	movs	r1, #40	; 0x28
 8005682:	2005      	movs	r0, #5
 8005684:	f7fd ffea 	bl	800365c <lcd_ShowStr>
					TP_Save_Adjdata();
 8005688:	f7ff fc1e 	bl	8004ec8 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 800568c:	f7ff fc2c 	bl	8004ee8 <TP_Get_Adjdata>
					return;
 8005690:	e001      	b.n	8005696 <touch_Adjust+0x776>
			}
		}
 8005692:	bf00      	nop
		HAL_Delay(50);
 8005694:	e490      	b.n	8004fb8 <touch_Adjust+0x98>
 	}
}
 8005696:	3728      	adds	r7, #40	; 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	f3af 8000 	nop.w
 80056a0:	200005d0 	.word	0x200005d0
 80056a4:	0800d210 	.word	0x0800d210
 80056a8:	0800d230 	.word	0x0800d230
 80056ac:	20000028 	.word	0x20000028
 80056b0:	0800d250 	.word	0x0800d250
 80056b4:	0800d270 	.word	0x0800d270
 80056b8:	0800d290 	.word	0x0800d290
 80056bc:	66666666 	.word	0x66666666
 80056c0:	3fee6666 	.word	0x3fee6666
 80056c4:	cccccccd 	.word	0xcccccccd
 80056c8:	3ff0cccc 	.word	0x3ff0cccc

080056cc <touch_init>:

void touch_init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 80056d0:	4904      	ldr	r1, [pc, #16]	; (80056e4 <touch_init+0x18>)
 80056d2:	4805      	ldr	r0, [pc, #20]	; (80056e8 <touch_init+0x1c>)
 80056d4:	f7ff fa86 	bl	8004be4 <TP_Read_XY>
	at24c_init();
 80056d8:	f7fb fcd4 	bl	8001084 <at24c_init>
	TP_Get_Adjdata();
 80056dc:	f7ff fc04 	bl	8004ee8 <TP_Get_Adjdata>
}
 80056e0:	bf00      	nop
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	2000003e 	.word	0x2000003e
 80056e8:	20000034 	.word	0x20000034

080056ec <touch_Scan>:

void touch_Scan(){
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <touch_Scan+0x10>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2000      	movs	r0, #0
 80056f6:	4798      	blx	r3
}
 80056f8:	bf00      	nop
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000028 	.word	0x20000028

08005700 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8005704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005708:	4805      	ldr	r0, [pc, #20]	; (8005720 <touch_IsTouched+0x20>)
 800570a:	f001 f9e1 	bl	8006ad0 <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
}
 800571a:	4618      	mov	r0, r3
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40020800 	.word	0x40020800

08005724 <touch_GetX>:

uint16_t touch_GetX(){
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <touch_GetX+0x14>)
 800572a:	899b      	ldrh	r3, [r3, #12]
}
 800572c:	4618      	mov	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000028 	.word	0x20000028

0800573c <touch_GetY>:

uint16_t touch_GetY(){
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005740:	4b03      	ldr	r3, [pc, #12]	; (8005750 <touch_GetY+0x14>)
 8005742:	8adb      	ldrh	r3, [r3, #22]
}
 8005744:	4618      	mov	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20000028 	.word	0x20000028

08005754 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a08      	ldr	r2, [pc, #32]	; (8005784 <HAL_UART_RxCpltCallback+0x30>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10a      	bne.n	800577c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8005766:	230a      	movs	r3, #10
 8005768:	2201      	movs	r2, #1
 800576a:	4907      	ldr	r1, [pc, #28]	; (8005788 <HAL_UART_RxCpltCallback+0x34>)
 800576c:	4807      	ldr	r0, [pc, #28]	; (800578c <HAL_UART_RxCpltCallback+0x38>)
 800576e:	f004 fc1e 	bl	8009fae <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8005772:	2201      	movs	r2, #1
 8005774:	4904      	ldr	r1, [pc, #16]	; (8005788 <HAL_UART_RxCpltCallback+0x34>)
 8005776:	4805      	ldr	r0, [pc, #20]	; (800578c <HAL_UART_RxCpltCallback+0x38>)
 8005778:	f004 fcab 	bl	800a0d2 <HAL_UART_Receive_IT>
	}
}
 800577c:	bf00      	nop
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40011000 	.word	0x40011000
 8005788:	2000012c 	.word	0x2000012c
 800578c:	2000079c 	.word	0x2000079c

08005790 <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005794:	4b11      	ldr	r3, [pc, #68]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <MX_USART1_UART_Init+0x50>)
 8005798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 800579c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80057a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057a2:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057b4:	4b09      	ldr	r3, [pc, #36]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 80057b6:	220c      	movs	r2, #12
 80057b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057c6:	4805      	ldr	r0, [pc, #20]	; (80057dc <MX_USART1_UART_Init+0x4c>)
 80057c8:	f004 fba4 	bl	8009f14 <HAL_UART_Init>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80057d2:	f7fe f955 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	2000079c 	.word	0x2000079c
 80057e0:	40011000 	.word	0x40011000

080057e4 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 80057ea:	4a12      	ldr	r2, [pc, #72]	; (8005834 <MX_USART2_UART_Init+0x50>)
 80057ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 80057f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80057f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005808:	4b09      	ldr	r3, [pc, #36]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 800580a:	220c      	movs	r2, #12
 800580c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 8005810:	2200      	movs	r2, #0
 8005812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 8005816:	2200      	movs	r2, #0
 8005818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800581a:	4805      	ldr	r0, [pc, #20]	; (8005830 <MX_USART2_UART_Init+0x4c>)
 800581c:	f004 fb7a 	bl	8009f14 <HAL_UART_Init>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005826:	f7fe f92b 	bl	8003a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800582a:	bf00      	nop
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	200007e0 	.word	0x200007e0
 8005834:	40004400 	.word	0x40004400

08005838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800583c:	480d      	ldr	r0, [pc, #52]	; (8005874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800583e:	490e      	ldr	r1, [pc, #56]	; (8005878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005840:	4a0e      	ldr	r2, [pc, #56]	; (800587c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005844:	e002      	b.n	800584c <LoopCopyDataInit>

08005846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800584a:	3304      	adds	r3, #4

0800584c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800584c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800584e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005850:	d3f9      	bcc.n	8005846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005852:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005854:	4c0b      	ldr	r4, [pc, #44]	; (8005884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005858:	e001      	b.n	800585e <LoopFillZerobss>

0800585a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800585a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800585c:	3204      	adds	r2, #4

0800585e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800585e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005860:	d3fb      	bcc.n	800585a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005862:	f7fe ff95 	bl	8004790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005866:	f005 fbf3 	bl	800b050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800586a:	f7fe f817 	bl	800389c <main>
  bx  lr    
 800586e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005878:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800587c:	080f1408 	.word	0x080f1408
  ldr r2, =_sbss
 8005880:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8005884:	20000838 	.word	0x20000838

08005888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005888:	e7fe      	b.n	8005888 <ADC_IRQHandler>
	...

0800588c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005890:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <HAL_Init+0x40>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <HAL_Init+0x40>)
 8005896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800589a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800589c:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <HAL_Init+0x40>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <HAL_Init+0x40>)
 80058a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058a8:	4b08      	ldr	r3, [pc, #32]	; (80058cc <HAL_Init+0x40>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a07      	ldr	r2, [pc, #28]	; (80058cc <HAL_Init+0x40>)
 80058ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058b4:	2003      	movs	r0, #3
 80058b6:	f000 fbb1 	bl	800601c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058ba:	200f      	movs	r0, #15
 80058bc:	f000 f808 	bl	80058d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058c0:	f7fe fb94 	bl	8003fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40023c00 	.word	0x40023c00

080058d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_InitTick+0x54>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b12      	ldr	r3, [pc, #72]	; (8005928 <HAL_InitTick+0x58>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80058ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fbc9 	bl	8006086 <HAL_SYSTICK_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e00e      	b.n	800591c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b0f      	cmp	r3, #15
 8005902:	d80a      	bhi.n	800591a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005904:	2200      	movs	r2, #0
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	f000 fb91 	bl	8006032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005910:	4a06      	ldr	r2, [pc, #24]	; (800592c <HAL_InitTick+0x5c>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000024 	.word	0x20000024
 8005928:	20000064 	.word	0x20000064
 800592c:	20000060 	.word	0x20000060

08005930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_IncTick+0x20>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_IncTick+0x24>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4413      	add	r3, r2
 8005940:	4a04      	ldr	r2, [pc, #16]	; (8005954 <HAL_IncTick+0x24>)
 8005942:	6013      	str	r3, [r2, #0]
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000064 	.word	0x20000064
 8005954:	20000824 	.word	0x20000824

08005958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return uwTick;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <HAL_GetTick+0x14>)
 800595e:	681b      	ldr	r3, [r3, #0]
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000824 	.word	0x20000824

08005970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005978:	f7ff ffee 	bl	8005958 <HAL_GetTick>
 800597c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d005      	beq.n	8005996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <HAL_Delay+0x44>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005996:	bf00      	nop
 8005998:	f7ff ffde 	bl	8005958 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d8f7      	bhi.n	8005998 <HAL_Delay+0x28>
  {
  }
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000064 	.word	0x20000064

080059b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e033      	b.n	8005a36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fe fb30 	bl	800403c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d118      	bne.n	8005a28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80059fe:	f023 0302 	bic.w	r3, r3, #2
 8005a02:	f043 0202 	orr.w	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f93a 	bl	8005c84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
 8005a26:	e001      	b.n	8005a2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x1c>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e105      	b.n	8005c68 <HAL_ADC_ConfigChannel+0x228>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d925      	bls.n	8005ab8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68d9      	ldr	r1, [r3, #12]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	4413      	add	r3, r2
 8005a80:	3b1e      	subs	r3, #30
 8005a82:	2207      	movs	r2, #7
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43da      	mvns	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	400a      	ands	r2, r1
 8005a90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68d9      	ldr	r1, [r3, #12]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	4403      	add	r3, r0
 8005aaa:	3b1e      	subs	r3, #30
 8005aac:	409a      	lsls	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	e022      	b.n	8005afe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6919      	ldr	r1, [r3, #16]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	2207      	movs	r2, #7
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	400a      	ands	r2, r1
 8005ada:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6919      	ldr	r1, [r3, #16]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	4618      	mov	r0, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4403      	add	r3, r0
 8005af4:	409a      	lsls	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b06      	cmp	r3, #6
 8005b04:	d824      	bhi.n	8005b50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	3b05      	subs	r3, #5
 8005b18:	221f      	movs	r2, #31
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43da      	mvns	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	400a      	ands	r2, r1
 8005b26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4618      	mov	r0, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	3b05      	subs	r3, #5
 8005b42:	fa00 f203 	lsl.w	r2, r0, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8005b4e:	e04c      	b.n	8005bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b0c      	cmp	r3, #12
 8005b56:	d824      	bhi.n	8005ba2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	3b23      	subs	r3, #35	; 0x23
 8005b6a:	221f      	movs	r2, #31
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43da      	mvns	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	400a      	ands	r2, r1
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4618      	mov	r0, r3
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	3b23      	subs	r3, #35	; 0x23
 8005b94:	fa00 f203 	lsl.w	r2, r0, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8005ba0:	e023      	b.n	8005bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3b41      	subs	r3, #65	; 0x41
 8005bb4:	221f      	movs	r2, #31
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	3b41      	subs	r3, #65	; 0x41
 8005bde:	fa00 f203 	lsl.w	r2, r0, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <HAL_ADC_ConfigChannel+0x234>)
 8005bec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <HAL_ADC_ConfigChannel+0x238>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d109      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x1cc>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b12      	cmp	r3, #18
 8005bfe:	d105      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <HAL_ADC_ConfigChannel+0x238>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d123      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x21e>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d003      	beq.n	8005c26 <HAL_ADC_ConfigChannel+0x1e6>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b11      	cmp	r3, #17
 8005c24:	d11b      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d111      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_ADC_ConfigChannel+0x23c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <HAL_ADC_ConfigChannel+0x240>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	0c9a      	lsrs	r2, r3, #18
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c50:	e002      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f9      	bne.n	8005c52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40012300 	.word	0x40012300
 8005c78:	40012000 	.word	0x40012000
 8005c7c:	20000024 	.word	0x20000024
 8005c80:	431bde83 	.word	0x431bde83

08005c84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c8c:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <ADC_Init+0x1f0>)
 8005c8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6859      	ldr	r1, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	021a      	lsls	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6859      	ldr	r1, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	4a58      	ldr	r2, [pc, #352]	; (8005e78 <ADC_Init+0x1f4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6899      	ldr	r1, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6899      	ldr	r1, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	e00f      	b.n	8005d82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0202 	bic.w	r2, r2, #2
 8005d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6899      	ldr	r1, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7e1b      	ldrb	r3, [r3, #24]
 8005d9c:	005a      	lsls	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01b      	beq.n	8005de8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005dce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	035a      	lsls	r2, r3, #13
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	e007      	b.n	8005df8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005df6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	051a      	lsls	r2, r3, #20
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6899      	ldr	r1, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e3a:	025a      	lsls	r2, r3, #9
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6899      	ldr	r1, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	029a      	lsls	r2, r3, #10
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40012300 	.word	0x40012300
 8005e78:	0f000001 	.word	0x0f000001

08005e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eae:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	60d3      	str	r3, [r2, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	e000ed00 	.word	0xe000ed00

08005ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <__NVIC_GetPriorityGrouping+0x18>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	f003 0307 	and.w	r3, r3, #7
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db0b      	blt.n	8005f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	f003 021f 	and.w	r2, r3, #31
 8005ef8:	4907      	ldr	r1, [pc, #28]	; (8005f18 <__NVIC_EnableIRQ+0x38>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2001      	movs	r0, #1
 8005f02:	fa00 f202 	lsl.w	r2, r0, r2
 8005f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	e000e100 	.word	0xe000e100

08005f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	6039      	str	r1, [r7, #0]
 8005f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db0a      	blt.n	8005f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	490c      	ldr	r1, [pc, #48]	; (8005f68 <__NVIC_SetPriority+0x4c>)
 8005f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3a:	0112      	lsls	r2, r2, #4
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	440b      	add	r3, r1
 8005f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f44:	e00a      	b.n	8005f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	4908      	ldr	r1, [pc, #32]	; (8005f6c <__NVIC_SetPriority+0x50>)
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	3b04      	subs	r3, #4
 8005f54:	0112      	lsls	r2, r2, #4
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	440b      	add	r3, r1
 8005f5a:	761a      	strb	r2, [r3, #24]
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	e000e100 	.word	0xe000e100
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b089      	sub	sp, #36	; 0x24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f1c3 0307 	rsb	r3, r3, #7
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	bf28      	it	cs
 8005f8e:	2304      	movcs	r3, #4
 8005f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	3304      	adds	r3, #4
 8005f96:	2b06      	cmp	r3, #6
 8005f98:	d902      	bls.n	8005fa0 <NVIC_EncodePriority+0x30>
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3b03      	subs	r3, #3
 8005f9e:	e000      	b.n	8005fa2 <NVIC_EncodePriority+0x32>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43da      	mvns	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	43d9      	mvns	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc8:	4313      	orrs	r3, r2
         );
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3724      	adds	r7, #36	; 0x24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fe8:	d301      	bcc.n	8005fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fea:	2301      	movs	r3, #1
 8005fec:	e00f      	b.n	800600e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fee:	4a0a      	ldr	r2, [pc, #40]	; (8006018 <SysTick_Config+0x40>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ff6:	210f      	movs	r1, #15
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	f7ff ff8e 	bl	8005f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <SysTick_Config+0x40>)
 8006002:	2200      	movs	r2, #0
 8006004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006006:	4b04      	ldr	r3, [pc, #16]	; (8006018 <SysTick_Config+0x40>)
 8006008:	2207      	movs	r2, #7
 800600a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	e000e010 	.word	0xe000e010

0800601c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff29 	bl	8005e7c <__NVIC_SetPriorityGrouping>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006044:	f7ff ff3e 	bl	8005ec4 <__NVIC_GetPriorityGrouping>
 8006048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	6978      	ldr	r0, [r7, #20]
 8006050:	f7ff ff8e 	bl	8005f70 <NVIC_EncodePriority>
 8006054:	4602      	mov	r2, r0
 8006056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff5d 	bl	8005f1c <__NVIC_SetPriority>
}
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	4603      	mov	r3, r0
 8006072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff ff31 	bl	8005ee0 <__NVIC_EnableIRQ>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ffa2 	bl	8005fd8 <SysTick_Config>
 8006094:	4603      	mov	r3, r0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060ac:	f7ff fc54 	bl	8005958 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e099      	b.n	80061f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060dc:	e00f      	b.n	80060fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060de:	f7ff fc3b 	bl	8005958 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	d908      	bls.n	80060fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2203      	movs	r2, #3
 80060f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e078      	b.n	80061f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e8      	bne.n	80060de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4b38      	ldr	r3, [pc, #224]	; (80061f8 <HAL_DMA_Init+0x158>)
 8006118:	4013      	ands	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800612a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	2b04      	cmp	r3, #4
 8006156:	d107      	bne.n	8006168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	4313      	orrs	r3, r2
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0307 	bic.w	r3, r3, #7
 800617e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b04      	cmp	r3, #4
 8006190:	d117      	bne.n	80061c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00e      	beq.n	80061c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fa7b 	bl	80066a0 <DMA_CheckFifoParam>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2240      	movs	r2, #64	; 0x40
 80061b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80061be:	2301      	movs	r3, #1
 80061c0:	e016      	b.n	80061f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa32 	bl	8006634 <DMA_CalcBaseAndBitshift>
 80061d0:	4603      	mov	r3, r0
 80061d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d8:	223f      	movs	r2, #63	; 0x3f
 80061da:	409a      	lsls	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	f010803f 	.word	0xf010803f

080061fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006208:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800620a:	f7ff fba5 	bl	8005958 <HAL_GetTick>
 800620e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d008      	beq.n	800622e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2280      	movs	r2, #128	; 0x80
 8006220:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e052      	b.n	80062d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0216 	bic.w	r2, r2, #22
 800623c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695a      	ldr	r2, [r3, #20]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800624c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <HAL_DMA_Abort+0x62>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0208 	bic.w	r2, r2, #8
 800626c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800627e:	e013      	b.n	80062a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006280:	f7ff fb6a 	bl	8005958 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b05      	cmp	r3, #5
 800628c:	d90c      	bls.n	80062a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2203      	movs	r2, #3
 8006298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e015      	b.n	80062d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e4      	bne.n	8006280 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ba:	223f      	movs	r2, #63	; 0x3f
 80062bc:	409a      	lsls	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d004      	beq.n	80062fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2280      	movs	r2, #128	; 0x80
 80062f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e00c      	b.n	8006314 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2205      	movs	r2, #5
 80062fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800632c:	4b92      	ldr	r3, [pc, #584]	; (8006578 <HAL_DMA_IRQHandler+0x258>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a92      	ldr	r2, [pc, #584]	; (800657c <HAL_DMA_IRQHandler+0x25c>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	0a9b      	lsrs	r3, r3, #10
 8006338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634a:	2208      	movs	r2, #8
 800634c:	409a      	lsls	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4013      	ands	r3, r2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01a      	beq.n	800638c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0204 	bic.w	r2, r2, #4
 8006372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	2208      	movs	r2, #8
 800637a:	409a      	lsls	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006384:	f043 0201 	orr.w	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006390:	2201      	movs	r2, #1
 8006392:	409a      	lsls	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d012      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ae:	2201      	movs	r2, #1
 80063b0:	409a      	lsls	r2, r3
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ba:	f043 0202 	orr.w	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c6:	2204      	movs	r2, #4
 80063c8:	409a      	lsls	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d012      	beq.n	80063f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	2204      	movs	r2, #4
 80063e6:	409a      	lsls	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f0:	f043 0204 	orr.w	r2, r3, #4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	2210      	movs	r2, #16
 80063fe:	409a      	lsls	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d043      	beq.n	8006490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d03c      	beq.n	8006490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641a:	2210      	movs	r2, #16
 800641c:	409a      	lsls	r2, r3
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d018      	beq.n	8006462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d108      	bne.n	8006450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d024      	beq.n	8006490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
 800644e:	e01f      	b.n	8006490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01b      	beq.n	8006490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
 8006460:	e016      	b.n	8006490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646c:	2b00      	cmp	r3, #0
 800646e:	d107      	bne.n	8006480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0208 	bic.w	r2, r2, #8
 800647e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006494:	2220      	movs	r2, #32
 8006496:	409a      	lsls	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 808e 	beq.w	80065be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8086 	beq.w	80065be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b6:	2220      	movs	r2, #32
 80064b8:	409a      	lsls	r2, r3
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b05      	cmp	r3, #5
 80064c8:	d136      	bne.n	8006538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0216 	bic.w	r2, r2, #22
 80064d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <HAL_DMA_IRQHandler+0x1da>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0208 	bic.w	r2, r2, #8
 8006508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	223f      	movs	r2, #63	; 0x3f
 8006510:	409a      	lsls	r2, r3
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652a:	2b00      	cmp	r3, #0
 800652c:	d07d      	beq.n	800662a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
        }
        return;
 8006536:	e078      	b.n	800662a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01c      	beq.n	8006580 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d108      	bne.n	8006566 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006558:	2b00      	cmp	r3, #0
 800655a:	d030      	beq.n	80065be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
 8006564:	e02b      	b.n	80065be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d027      	beq.n	80065be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
 8006576:	e022      	b.n	80065be <HAL_DMA_IRQHandler+0x29e>
 8006578:	20000024 	.word	0x20000024
 800657c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0210 	bic.w	r2, r2, #16
 800659c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d032      	beq.n	800662c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d022      	beq.n	8006618 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2205      	movs	r2, #5
 80065d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d307      	bcc.n	8006606 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f2      	bne.n	80065ea <HAL_DMA_IRQHandler+0x2ca>
 8006604:	e000      	b.n	8006608 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006606:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
 8006628:	e000      	b.n	800662c <HAL_DMA_IRQHandler+0x30c>
        return;
 800662a:	bf00      	nop
    }
  }
}
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop

08006634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	3b10      	subs	r3, #16
 8006644:	4a14      	ldr	r2, [pc, #80]	; (8006698 <DMA_CalcBaseAndBitshift+0x64>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	091b      	lsrs	r3, r3, #4
 800664c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800664e:	4a13      	ldr	r2, [pc, #76]	; (800669c <DMA_CalcBaseAndBitshift+0x68>)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b03      	cmp	r3, #3
 8006660:	d909      	bls.n	8006676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	659a      	str	r2, [r3, #88]	; 0x58
 8006674:	e007      	b.n	8006686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	aaaaaaab 	.word	0xaaaaaaab
 800669c:	080f1240 	.word	0x080f1240

080066a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d11f      	bne.n	80066fa <DMA_CheckFifoParam+0x5a>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d856      	bhi.n	800676e <DMA_CheckFifoParam+0xce>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <DMA_CheckFifoParam+0x28>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066d9 	.word	0x080066d9
 80066cc:	080066eb 	.word	0x080066eb
 80066d0:	080066d9 	.word	0x080066d9
 80066d4:	0800676f 	.word	0x0800676f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d046      	beq.n	8006772 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066e8:	e043      	b.n	8006772 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066f2:	d140      	bne.n	8006776 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066f8:	e03d      	b.n	8006776 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006702:	d121      	bne.n	8006748 <DMA_CheckFifoParam+0xa8>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b03      	cmp	r3, #3
 8006708:	d837      	bhi.n	800677a <DMA_CheckFifoParam+0xda>
 800670a:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <DMA_CheckFifoParam+0x70>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006721 	.word	0x08006721
 8006714:	08006727 	.word	0x08006727
 8006718:	08006721 	.word	0x08006721
 800671c:	08006739 	.word	0x08006739
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
      break;
 8006724:	e030      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d025      	beq.n	800677e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006736:	e022      	b.n	800677e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006740:	d11f      	bne.n	8006782 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006746:	e01c      	b.n	8006782 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d903      	bls.n	8006756 <DMA_CheckFifoParam+0xb6>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d003      	beq.n	800675c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006754:	e018      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
      break;
 800675a:	e015      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
      break;
 800676c:	e00b      	b.n	8006786 <DMA_CheckFifoParam+0xe6>
      break;
 800676e:	bf00      	nop
 8006770:	e00a      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
      break;
 8006772:	bf00      	nop
 8006774:	e008      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
      break;
 8006776:	bf00      	nop
 8006778:	e006      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
      break;
 800677a:	bf00      	nop
 800677c:	e004      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
      break;
 800677e:	bf00      	nop
 8006780:	e002      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
      break;   
 8006782:	bf00      	nop
 8006784:	e000      	b.n	8006788 <DMA_CheckFifoParam+0xe8>
      break;
 8006786:	bf00      	nop
    }
  } 
  
  return status; 
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop

08006798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006798:	b480      	push	{r7}
 800679a:	b089      	sub	sp, #36	; 0x24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067ae:	2300      	movs	r3, #0
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	e16b      	b.n	8006a8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067b4:	2201      	movs	r2, #1
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4013      	ands	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	f040 815a 	bne.w	8006a86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d005      	beq.n	80067ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d130      	bne.n	800684c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	2203      	movs	r2, #3
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4013      	ands	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	4313      	orrs	r3, r2
 8006812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006820:	2201      	movs	r2, #1
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
 8006828:	43db      	mvns	r3, r3
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	4013      	ands	r3, r2
 800682e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	091b      	lsrs	r3, r3, #4
 8006836:	f003 0201 	and.w	r2, r3, #1
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	fa02 f303 	lsl.w	r3, r2, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	4313      	orrs	r3, r2
 8006844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	2b03      	cmp	r3, #3
 8006856:	d017      	beq.n	8006888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	2203      	movs	r2, #3
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	43db      	mvns	r3, r3
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	4013      	ands	r3, r2
 800686e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	fa02 f303 	lsl.w	r3, r2, r3
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	4313      	orrs	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d123      	bne.n	80068dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	08da      	lsrs	r2, r3, #3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3208      	adds	r2, #8
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	220f      	movs	r2, #15
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	43db      	mvns	r3, r3
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	4013      	ands	r3, r2
 80068b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	fa02 f303 	lsl.w	r3, r2, r3
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	08da      	lsrs	r2, r3, #3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3208      	adds	r2, #8
 80068d6:	69b9      	ldr	r1, [r7, #24]
 80068d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	2203      	movs	r2, #3
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	43db      	mvns	r3, r3
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	4013      	ands	r3, r2
 80068f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f003 0203 	and.w	r2, r3, #3
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	4313      	orrs	r3, r2
 8006908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 80b4 	beq.w	8006a86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	4b60      	ldr	r3, [pc, #384]	; (8006aa4 <HAL_GPIO_Init+0x30c>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	4a5f      	ldr	r2, [pc, #380]	; (8006aa4 <HAL_GPIO_Init+0x30c>)
 8006928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800692c:	6453      	str	r3, [r2, #68]	; 0x44
 800692e:	4b5d      	ldr	r3, [pc, #372]	; (8006aa4 <HAL_GPIO_Init+0x30c>)
 8006930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800693a:	4a5b      	ldr	r2, [pc, #364]	; (8006aa8 <HAL_GPIO_Init+0x310>)
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	089b      	lsrs	r3, r3, #2
 8006940:	3302      	adds	r3, #2
 8006942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	220f      	movs	r2, #15
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4013      	ands	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a52      	ldr	r2, [pc, #328]	; (8006aac <HAL_GPIO_Init+0x314>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d02b      	beq.n	80069be <HAL_GPIO_Init+0x226>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a51      	ldr	r2, [pc, #324]	; (8006ab0 <HAL_GPIO_Init+0x318>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d025      	beq.n	80069ba <HAL_GPIO_Init+0x222>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a50      	ldr	r2, [pc, #320]	; (8006ab4 <HAL_GPIO_Init+0x31c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01f      	beq.n	80069b6 <HAL_GPIO_Init+0x21e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a4f      	ldr	r2, [pc, #316]	; (8006ab8 <HAL_GPIO_Init+0x320>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d019      	beq.n	80069b2 <HAL_GPIO_Init+0x21a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a4e      	ldr	r2, [pc, #312]	; (8006abc <HAL_GPIO_Init+0x324>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_GPIO_Init+0x216>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a4d      	ldr	r2, [pc, #308]	; (8006ac0 <HAL_GPIO_Init+0x328>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00d      	beq.n	80069aa <HAL_GPIO_Init+0x212>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a4c      	ldr	r2, [pc, #304]	; (8006ac4 <HAL_GPIO_Init+0x32c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <HAL_GPIO_Init+0x20e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a4b      	ldr	r2, [pc, #300]	; (8006ac8 <HAL_GPIO_Init+0x330>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d101      	bne.n	80069a2 <HAL_GPIO_Init+0x20a>
 800699e:	2307      	movs	r3, #7
 80069a0:	e00e      	b.n	80069c0 <HAL_GPIO_Init+0x228>
 80069a2:	2308      	movs	r3, #8
 80069a4:	e00c      	b.n	80069c0 <HAL_GPIO_Init+0x228>
 80069a6:	2306      	movs	r3, #6
 80069a8:	e00a      	b.n	80069c0 <HAL_GPIO_Init+0x228>
 80069aa:	2305      	movs	r3, #5
 80069ac:	e008      	b.n	80069c0 <HAL_GPIO_Init+0x228>
 80069ae:	2304      	movs	r3, #4
 80069b0:	e006      	b.n	80069c0 <HAL_GPIO_Init+0x228>
 80069b2:	2303      	movs	r3, #3
 80069b4:	e004      	b.n	80069c0 <HAL_GPIO_Init+0x228>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e002      	b.n	80069c0 <HAL_GPIO_Init+0x228>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <HAL_GPIO_Init+0x228>
 80069be:	2300      	movs	r3, #0
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	f002 0203 	and.w	r2, r2, #3
 80069c6:	0092      	lsls	r2, r2, #2
 80069c8:	4093      	lsls	r3, r2
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069d0:	4935      	ldr	r1, [pc, #212]	; (8006aa8 <HAL_GPIO_Init+0x310>)
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	089b      	lsrs	r3, r3, #2
 80069d6:	3302      	adds	r3, #2
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069de:	4b3b      	ldr	r3, [pc, #236]	; (8006acc <HAL_GPIO_Init+0x334>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	43db      	mvns	r3, r3
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	4013      	ands	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a02:	4a32      	ldr	r2, [pc, #200]	; (8006acc <HAL_GPIO_Init+0x334>)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006a08:	4b30      	ldr	r3, [pc, #192]	; (8006acc <HAL_GPIO_Init+0x334>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4013      	ands	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a2c:	4a27      	ldr	r2, [pc, #156]	; (8006acc <HAL_GPIO_Init+0x334>)
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a32:	4b26      	ldr	r3, [pc, #152]	; (8006acc <HAL_GPIO_Init+0x334>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a56:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <HAL_GPIO_Init+0x334>)
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <HAL_GPIO_Init+0x334>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a80:	4a12      	ldr	r2, [pc, #72]	; (8006acc <HAL_GPIO_Init+0x334>)
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	f67f ae90 	bls.w	80067b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	3724      	adds	r7, #36	; 0x24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	40013800 	.word	0x40013800
 8006aac:	40020000 	.word	0x40020000
 8006ab0:	40020400 	.word	0x40020400
 8006ab4:	40020800 	.word	0x40020800
 8006ab8:	40020c00 	.word	0x40020c00
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	40021400 	.word	0x40021400
 8006ac4:	40021800 	.word	0x40021800
 8006ac8:	40021c00 	.word	0x40021c00
 8006acc:	40013c00 	.word	0x40013c00

08006ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	887b      	ldrh	r3, [r7, #2]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
 8006aec:	e001      	b.n	8006af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	807b      	strh	r3, [r7, #2]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b10:	787b      	ldrb	r3, [r7, #1]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b16:	887a      	ldrh	r2, [r7, #2]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b1c:	e003      	b.n	8006b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b1e:	887b      	ldrh	r3, [r7, #2]
 8006b20:	041a      	lsls	r2, r3, #16
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	619a      	str	r2, [r3, #24]
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b44:	887a      	ldrh	r2, [r7, #2]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	041a      	lsls	r2, r3, #16
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	43d9      	mvns	r1, r3
 8006b50:	887b      	ldrh	r3, [r7, #2]
 8006b52:	400b      	ands	r3, r1
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	619a      	str	r2, [r3, #24]
}
 8006b5a:	bf00      	nop
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e12b      	b.n	8006dd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fd fae8 	bl	8004164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2224      	movs	r2, #36	; 0x24
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006bcc:	f001 fbd8 	bl	8008380 <HAL_RCC_GetPCLK1Freq>
 8006bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4a81      	ldr	r2, [pc, #516]	; (8006ddc <HAL_I2C_Init+0x274>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d807      	bhi.n	8006bec <HAL_I2C_Init+0x84>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4a80      	ldr	r2, [pc, #512]	; (8006de0 <HAL_I2C_Init+0x278>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	bf94      	ite	ls
 8006be4:	2301      	movls	r3, #1
 8006be6:	2300      	movhi	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e006      	b.n	8006bfa <HAL_I2C_Init+0x92>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a7d      	ldr	r2, [pc, #500]	; (8006de4 <HAL_I2C_Init+0x27c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	bf94      	ite	ls
 8006bf4:	2301      	movls	r3, #1
 8006bf6:	2300      	movhi	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e0e7      	b.n	8006dd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a78      	ldr	r2, [pc, #480]	; (8006de8 <HAL_I2C_Init+0x280>)
 8006c06:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0a:	0c9b      	lsrs	r3, r3, #18
 8006c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a6a      	ldr	r2, [pc, #424]	; (8006ddc <HAL_I2C_Init+0x274>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d802      	bhi.n	8006c3c <HAL_I2C_Init+0xd4>
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	e009      	b.n	8006c50 <HAL_I2C_Init+0xe8>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006c42:	fb02 f303 	mul.w	r3, r2, r3
 8006c46:	4a69      	ldr	r2, [pc, #420]	; (8006dec <HAL_I2C_Init+0x284>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	099b      	lsrs	r3, r3, #6
 8006c4e:	3301      	adds	r3, #1
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	495c      	ldr	r1, [pc, #368]	; (8006ddc <HAL_I2C_Init+0x274>)
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	d819      	bhi.n	8006ca4 <HAL_I2C_Init+0x13c>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	1e59      	subs	r1, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c84:	400b      	ands	r3, r1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_I2C_Init+0x138>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	1e59      	subs	r1, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c9e:	e051      	b.n	8006d44 <HAL_I2C_Init+0x1dc>
 8006ca0:	2304      	movs	r3, #4
 8006ca2:	e04f      	b.n	8006d44 <HAL_I2C_Init+0x1dc>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d111      	bne.n	8006cd0 <HAL_I2C_Init+0x168>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	1e58      	subs	r0, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6859      	ldr	r1, [r3, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	440b      	add	r3, r1
 8006cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2301      	moveq	r3, #1
 8006cca:	2300      	movne	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	e012      	b.n	8006cf6 <HAL_I2C_Init+0x18e>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1e58      	subs	r0, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	440b      	add	r3, r1
 8006cde:	0099      	lsls	r1, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bf0c      	ite	eq
 8006cf0:	2301      	moveq	r3, #1
 8006cf2:	2300      	movne	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <HAL_I2C_Init+0x196>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e022      	b.n	8006d44 <HAL_I2C_Init+0x1dc>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10e      	bne.n	8006d24 <HAL_I2C_Init+0x1bc>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1e58      	subs	r0, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6859      	ldr	r1, [r3, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	440b      	add	r3, r1
 8006d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d22:	e00f      	b.n	8006d44 <HAL_I2C_Init+0x1dc>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	1e58      	subs	r0, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6859      	ldr	r1, [r3, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	0099      	lsls	r1, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	6809      	ldr	r1, [r1, #0]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69da      	ldr	r2, [r3, #28]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6911      	ldr	r1, [r2, #16]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68d2      	ldr	r2, [r2, #12]
 8006d7e:	4311      	orrs	r1, r2
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6812      	ldr	r2, [r2, #0]
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	000186a0 	.word	0x000186a0
 8006de0:	001e847f 	.word	0x001e847f
 8006de4:	003d08ff 	.word	0x003d08ff
 8006de8:	431bde83 	.word	0x431bde83
 8006dec:	10624dd3 	.word	0x10624dd3

08006df0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	4608      	mov	r0, r1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4603      	mov	r3, r0
 8006e00:	817b      	strh	r3, [r7, #10]
 8006e02:	460b      	mov	r3, r1
 8006e04:	813b      	strh	r3, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e0a:	f7fe fda5 	bl	8005958 <HAL_GetTick>
 8006e0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	f040 80d9 	bne.w	8006fd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2319      	movs	r3, #25
 8006e24:	2201      	movs	r2, #1
 8006e26:	496d      	ldr	r1, [pc, #436]	; (8006fdc <HAL_I2C_Mem_Write+0x1ec>)
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fc7f 	bl	800772c <I2C_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006e34:	2302      	movs	r3, #2
 8006e36:	e0cc      	b.n	8006fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_I2C_Mem_Write+0x56>
 8006e42:	2302      	movs	r3, #2
 8006e44:	e0c5      	b.n	8006fd2 <HAL_I2C_Mem_Write+0x1e2>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d007      	beq.n	8006e6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2221      	movs	r2, #33	; 0x21
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2240      	movs	r2, #64	; 0x40
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a3a      	ldr	r2, [r7, #32]
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4a4d      	ldr	r2, [pc, #308]	; (8006fe0 <HAL_I2C_Mem_Write+0x1f0>)
 8006eac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006eae:	88f8      	ldrh	r0, [r7, #6]
 8006eb0:	893a      	ldrh	r2, [r7, #8]
 8006eb2:	8979      	ldrh	r1, [r7, #10]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fab6 	bl	8007430 <I2C_RequestMemoryWrite>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d052      	beq.n	8006f70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e081      	b.n	8006fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fd00 	bl	80078d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00d      	beq.n	8006efa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d107      	bne.n	8006ef6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e06b      	b.n	8006fd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d11b      	bne.n	8006f70 <HAL_I2C_Mem_Write+0x180>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d017      	beq.n	8006f70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	781a      	ldrb	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1aa      	bne.n	8006ece <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 fcec 	bl	800795a <I2C_WaitOnBTFFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00d      	beq.n	8006fa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d107      	bne.n	8006fa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e016      	b.n	8006fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e000      	b.n	8006fd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006fd0:	2302      	movs	r3, #2
  }
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	00100002 	.word	0x00100002
 8006fe0:	ffff0000 	.word	0xffff0000

08006fe4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08c      	sub	sp, #48	; 0x30
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	4608      	mov	r0, r1
 8006fee:	4611      	mov	r1, r2
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	817b      	strh	r3, [r7, #10]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	813b      	strh	r3, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ffe:	f7fe fcab 	bl	8005958 <HAL_GetTick>
 8007002:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b20      	cmp	r3, #32
 800700e:	f040 8208 	bne.w	8007422 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	2319      	movs	r3, #25
 8007018:	2201      	movs	r2, #1
 800701a:	497b      	ldr	r1, [pc, #492]	; (8007208 <HAL_I2C_Mem_Read+0x224>)
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fb85 	bl	800772c <I2C_WaitOnFlagUntilTimeout>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007028:	2302      	movs	r3, #2
 800702a:	e1fb      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_I2C_Mem_Read+0x56>
 8007036:	2302      	movs	r3, #2
 8007038:	e1f4      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b01      	cmp	r3, #1
 800704e:	d007      	beq.n	8007060 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0201 	orr.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800706e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2222      	movs	r2, #34	; 0x22
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2240      	movs	r2, #64	; 0x40
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a5b      	ldr	r2, [pc, #364]	; (800720c <HAL_I2C_Mem_Read+0x228>)
 80070a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070a2:	88f8      	ldrh	r0, [r7, #6]
 80070a4:	893a      	ldrh	r2, [r7, #8]
 80070a6:	8979      	ldrh	r1, [r7, #10]
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	4603      	mov	r3, r0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fa52 	bl	800755c <I2C_RequestMemoryRead>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e1b0      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d113      	bne.n	80070f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ca:	2300      	movs	r3, #0
 80070cc:	623b      	str	r3, [r7, #32]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	623b      	str	r3, [r7, #32]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	623b      	str	r3, [r7, #32]
 80070de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e184      	b.n	80073fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d11b      	bne.n	8007132 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800710a:	2300      	movs	r3, #0
 800710c:	61fb      	str	r3, [r7, #28]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	61fb      	str	r3, [r7, #28]
 800711e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e164      	b.n	80073fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007136:	2b02      	cmp	r3, #2
 8007138:	d11b      	bne.n	8007172 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	e144      	b.n	80073fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007188:	e138      	b.n	80073fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718e:	2b03      	cmp	r3, #3
 8007190:	f200 80f1 	bhi.w	8007376 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007198:	2b01      	cmp	r3, #1
 800719a:	d123      	bne.n	80071e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800719c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fc1b 	bl	80079dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e139      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071e2:	e10b      	b.n	80073fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d14e      	bne.n	800728a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	2200      	movs	r2, #0
 80071f4:	4906      	ldr	r1, [pc, #24]	; (8007210 <HAL_I2C_Mem_Read+0x22c>)
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fa98 	bl	800772c <I2C_WaitOnFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e10e      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
 8007206:	bf00      	nop
 8007208:	00100002 	.word	0x00100002
 800720c:	ffff0000 	.word	0xffff0000
 8007210:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691a      	ldr	r2, [r3, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727e:	b29b      	uxth	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007288:	e0b8      	b.n	80073fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	2200      	movs	r2, #0
 8007292:	4966      	ldr	r1, [pc, #408]	; (800742c <HAL_I2C_Mem_Read+0x448>)
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fa49 	bl	800772c <I2C_WaitOnFlagUntilTimeout>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e0bf      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	2200      	movs	r2, #0
 80072ee:	494f      	ldr	r1, [pc, #316]	; (800742c <HAL_I2C_Mem_Read+0x448>)
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 fa1b 	bl	800772c <I2C_WaitOnFlagUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e091      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800730e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007374:	e042      	b.n	80073fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 fb2e 	bl	80079dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e04c      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d118      	bne.n	80073fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007400:	2b00      	cmp	r3, #0
 8007402:	f47f aec2 	bne.w	800718a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	e000      	b.n	8007424 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
  }
}
 8007424:	4618      	mov	r0, r3
 8007426:	3728      	adds	r7, #40	; 0x28
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	00010004 	.word	0x00010004

08007430 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af02      	add	r7, sp, #8
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	4608      	mov	r0, r1
 800743a:	4611      	mov	r1, r2
 800743c:	461a      	mov	r2, r3
 800743e:	4603      	mov	r3, r0
 8007440:	817b      	strh	r3, [r7, #10]
 8007442:	460b      	mov	r3, r1
 8007444:	813b      	strh	r3, [r7, #8]
 8007446:	4613      	mov	r3, r2
 8007448:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	2200      	movs	r2, #0
 8007462:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 f960 	bl	800772c <I2C_WaitOnFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00d      	beq.n	800748e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007480:	d103      	bne.n	800748a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007488:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e05f      	b.n	800754e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800748e:	897b      	ldrh	r3, [r7, #10]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	461a      	mov	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800749c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	6a3a      	ldr	r2, [r7, #32]
 80074a2:	492d      	ldr	r1, [pc, #180]	; (8007558 <I2C_RequestMemoryWrite+0x128>)
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f998 	bl	80077da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e04c      	b.n	800754e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074cc:	6a39      	ldr	r1, [r7, #32]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fa02 	bl	80078d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00d      	beq.n	80074f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d107      	bne.n	80074f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e02b      	b.n	800754e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d105      	bne.n	8007508 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074fc:	893b      	ldrh	r3, [r7, #8]
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	611a      	str	r2, [r3, #16]
 8007506:	e021      	b.n	800754c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007508:	893b      	ldrh	r3, [r7, #8]
 800750a:	0a1b      	lsrs	r3, r3, #8
 800750c:	b29b      	uxth	r3, r3
 800750e:	b2da      	uxtb	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007518:	6a39      	ldr	r1, [r7, #32]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 f9dc 	bl	80078d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	2b04      	cmp	r3, #4
 800752c:	d107      	bne.n	800753e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800753c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e005      	b.n	800754e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007542:	893b      	ldrh	r3, [r7, #8]
 8007544:	b2da      	uxtb	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	00010002 	.word	0x00010002

0800755c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	4608      	mov	r0, r1
 8007566:	4611      	mov	r1, r2
 8007568:	461a      	mov	r2, r3
 800756a:	4603      	mov	r3, r0
 800756c:	817b      	strh	r3, [r7, #10]
 800756e:	460b      	mov	r3, r1
 8007570:	813b      	strh	r3, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007584:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007594:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	2200      	movs	r2, #0
 800759e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f8c2 	bl	800772c <I2C_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075bc:	d103      	bne.n	80075c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e0aa      	b.n	8007720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	6a3a      	ldr	r2, [r7, #32]
 80075de:	4952      	ldr	r1, [pc, #328]	; (8007728 <I2C_RequestMemoryRead+0x1cc>)
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f8fa 	bl	80077da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e097      	b.n	8007720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007608:	6a39      	ldr	r1, [r7, #32]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f964 	bl	80078d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00d      	beq.n	8007632 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	2b04      	cmp	r3, #4
 800761c:	d107      	bne.n	800762e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800762c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e076      	b.n	8007720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d105      	bne.n	8007644 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007638:	893b      	ldrh	r3, [r7, #8]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	611a      	str	r2, [r3, #16]
 8007642:	e021      	b.n	8007688 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007644:	893b      	ldrh	r3, [r7, #8]
 8007646:	0a1b      	lsrs	r3, r3, #8
 8007648:	b29b      	uxth	r3, r3
 800764a:	b2da      	uxtb	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007654:	6a39      	ldr	r1, [r7, #32]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 f93e 	bl	80078d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00d      	beq.n	800767e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	2b04      	cmp	r3, #4
 8007668:	d107      	bne.n	800767a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e050      	b.n	8007720 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768a:	6a39      	ldr	r1, [r7, #32]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f923 	bl	80078d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00d      	beq.n	80076b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	2b04      	cmp	r3, #4
 800769e:	d107      	bne.n	80076b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e035      	b.n	8007720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f82b 	bl	800772c <I2C_WaitOnFlagUntilTimeout>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00d      	beq.n	80076f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ea:	d103      	bne.n	80076f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e013      	b.n	8007720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80076f8:	897b      	ldrh	r3, [r7, #10]
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f043 0301 	orr.w	r3, r3, #1
 8007700:	b2da      	uxtb	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	6a3a      	ldr	r2, [r7, #32]
 800770c:	4906      	ldr	r1, [pc, #24]	; (8007728 <I2C_RequestMemoryRead+0x1cc>)
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f863 	bl	80077da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	00010002 	.word	0x00010002

0800772c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800773c:	e025      	b.n	800778a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d021      	beq.n	800778a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7fe f907 	bl	8005958 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d116      	bne.n	800778a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f043 0220 	orr.w	r2, r3, #32
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e023      	b.n	80077d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	0c1b      	lsrs	r3, r3, #16
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10d      	bne.n	80077b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	43da      	mvns	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf0c      	ite	eq
 80077a6:	2301      	moveq	r3, #1
 80077a8:	2300      	movne	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	461a      	mov	r2, r3
 80077ae:	e00c      	b.n	80077ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	43da      	mvns	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4013      	ands	r3, r2
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf0c      	ite	eq
 80077c2:	2301      	moveq	r3, #1
 80077c4:	2300      	movne	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d0b6      	beq.n	800773e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077e8:	e051      	b.n	800788e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f8:	d123      	bne.n	8007842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007808:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007812:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2220      	movs	r2, #32
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f043 0204 	orr.w	r2, r3, #4
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e046      	b.n	80078d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d021      	beq.n	800788e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800784a:	f7fe f885 	bl	8005958 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	d302      	bcc.n	8007860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d116      	bne.n	800788e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	f043 0220 	orr.w	r2, r3, #32
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e020      	b.n	80078d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	0c1b      	lsrs	r3, r3, #16
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10c      	bne.n	80078b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	43da      	mvns	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4013      	ands	r3, r2
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bf14      	ite	ne
 80078aa:	2301      	movne	r3, #1
 80078ac:	2300      	moveq	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	e00b      	b.n	80078ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	43da      	mvns	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4013      	ands	r3, r2
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bf14      	ite	ne
 80078c4:	2301      	movne	r3, #1
 80078c6:	2300      	moveq	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d18d      	bne.n	80077ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078e4:	e02d      	b.n	8007942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f8ce 	bl	8007a88 <I2C_IsAcknowledgeFailed>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e02d      	b.n	8007952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fc:	d021      	beq.n	8007942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fe:	f7fe f82b 	bl	8005958 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	d302      	bcc.n	8007914 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d116      	bne.n	8007942 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	f043 0220 	orr.w	r2, r3, #32
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e007      	b.n	8007952 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794c:	2b80      	cmp	r3, #128	; 0x80
 800794e:	d1ca      	bne.n	80078e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007966:	e02d      	b.n	80079c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f88d 	bl	8007a88 <I2C_IsAcknowledgeFailed>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e02d      	b.n	80079d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d021      	beq.n	80079c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007980:	f7fd ffea 	bl	8005958 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	429a      	cmp	r2, r3
 800798e:	d302      	bcc.n	8007996 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d116      	bne.n	80079c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b0:	f043 0220 	orr.w	r2, r3, #32
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e007      	b.n	80079d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d1ca      	bne.n	8007968 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079e8:	e042      	b.n	8007a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	f003 0310 	and.w	r3, r3, #16
 80079f4:	2b10      	cmp	r3, #16
 80079f6:	d119      	bne.n	8007a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0210 	mvn.w	r2, #16
 8007a00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e029      	b.n	8007a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2c:	f7fd ff94 	bl	8005958 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d302      	bcc.n	8007a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d116      	bne.n	8007a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	f043 0220 	orr.w	r2, r3, #32
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e007      	b.n	8007a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7a:	2b40      	cmp	r3, #64	; 0x40
 8007a7c:	d1b5      	bne.n	80079ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9e:	d11b      	bne.n	8007ad8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007aa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	f043 0204 	orr.w	r2, r3, #4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e000      	b.n	8007ada <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e264      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d075      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b06:	4ba3      	ldr	r3, [pc, #652]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f003 030c 	and.w	r3, r3, #12
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d00c      	beq.n	8007b2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b12:	4ba0      	ldr	r3, [pc, #640]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d112      	bne.n	8007b44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b1e:	4b9d      	ldr	r3, [pc, #628]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b2a:	d10b      	bne.n	8007b44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b2c:	4b99      	ldr	r3, [pc, #612]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d05b      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x108>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d157      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e23f      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b4c:	d106      	bne.n	8007b5c <HAL_RCC_OscConfig+0x74>
 8007b4e:	4b91      	ldr	r3, [pc, #580]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a90      	ldr	r2, [pc, #576]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	e01d      	b.n	8007b98 <HAL_RCC_OscConfig+0xb0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b64:	d10c      	bne.n	8007b80 <HAL_RCC_OscConfig+0x98>
 8007b66:	4b8b      	ldr	r3, [pc, #556]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a8a      	ldr	r2, [pc, #552]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	4b88      	ldr	r3, [pc, #544]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a87      	ldr	r2, [pc, #540]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	e00b      	b.n	8007b98 <HAL_RCC_OscConfig+0xb0>
 8007b80:	4b84      	ldr	r3, [pc, #528]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a83      	ldr	r2, [pc, #524]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	4b81      	ldr	r3, [pc, #516]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a80      	ldr	r2, [pc, #512]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d013      	beq.n	8007bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba0:	f7fd feda 	bl	8005958 <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ba8:	f7fd fed6 	bl	8005958 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b64      	cmp	r3, #100	; 0x64
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e204      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bba:	4b76      	ldr	r3, [pc, #472]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0f0      	beq.n	8007ba8 <HAL_RCC_OscConfig+0xc0>
 8007bc6:	e014      	b.n	8007bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bc8:	f7fd fec6 	bl	8005958 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bce:	e008      	b.n	8007be2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bd0:	f7fd fec2 	bl	8005958 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b64      	cmp	r3, #100	; 0x64
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e1f0      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007be2:	4b6c      	ldr	r3, [pc, #432]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1f0      	bne.n	8007bd0 <HAL_RCC_OscConfig+0xe8>
 8007bee:	e000      	b.n	8007bf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d063      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bfe:	4b65      	ldr	r3, [pc, #404]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 030c 	and.w	r3, r3, #12
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00b      	beq.n	8007c22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c0a:	4b62      	ldr	r3, [pc, #392]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d11c      	bne.n	8007c50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c16:	4b5f      	ldr	r3, [pc, #380]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d116      	bne.n	8007c50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c22:	4b5c      	ldr	r3, [pc, #368]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_RCC_OscConfig+0x152>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d001      	beq.n	8007c3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e1c4      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3a:	4b56      	ldr	r3, [pc, #344]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4952      	ldr	r1, [pc, #328]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c4e:	e03a      	b.n	8007cc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d020      	beq.n	8007c9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c58:	4b4f      	ldr	r3, [pc, #316]	; (8007d98 <HAL_RCC_OscConfig+0x2b0>)
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5e:	f7fd fe7b 	bl	8005958 <HAL_GetTick>
 8007c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c64:	e008      	b.n	8007c78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c66:	f7fd fe77 	bl	8005958 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d901      	bls.n	8007c78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e1a5      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c78:	4b46      	ldr	r3, [pc, #280]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0f0      	beq.n	8007c66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c84:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	4940      	ldr	r1, [pc, #256]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	600b      	str	r3, [r1, #0]
 8007c98:	e015      	b.n	8007cc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c9a:	4b3f      	ldr	r3, [pc, #252]	; (8007d98 <HAL_RCC_OscConfig+0x2b0>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fd fe5a 	bl	8005958 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ca8:	f7fd fe56 	bl	8005958 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e184      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cba:	4b36      	ldr	r3, [pc, #216]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1f0      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d030      	beq.n	8007d34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d016      	beq.n	8007d08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cda:	4b30      	ldr	r3, [pc, #192]	; (8007d9c <HAL_RCC_OscConfig+0x2b4>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce0:	f7fd fe3a 	bl	8005958 <HAL_GetTick>
 8007ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ce8:	f7fd fe36 	bl	8005958 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e164      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cfa:	4b26      	ldr	r3, [pc, #152]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f0      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x200>
 8007d06:	e015      	b.n	8007d34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d08:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <HAL_RCC_OscConfig+0x2b4>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d0e:	f7fd fe23 	bl	8005958 <HAL_GetTick>
 8007d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d16:	f7fd fe1f 	bl	8005958 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e14d      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d28:	4b1a      	ldr	r3, [pc, #104]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f0      	bne.n	8007d16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80a0 	beq.w	8007e82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d42:	2300      	movs	r3, #0
 8007d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d46:	4b13      	ldr	r3, [pc, #76]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10f      	bne.n	8007d72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d52:	2300      	movs	r3, #0
 8007d54:	60bb      	str	r3, [r7, #8]
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	4a0e      	ldr	r2, [pc, #56]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d60:	6413      	str	r3, [r2, #64]	; 0x40
 8007d62:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <HAL_RCC_OscConfig+0x2ac>)
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d6a:	60bb      	str	r3, [r7, #8]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d72:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <HAL_RCC_OscConfig+0x2b8>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d121      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d7e:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <HAL_RCC_OscConfig+0x2b8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a07      	ldr	r2, [pc, #28]	; (8007da0 <HAL_RCC_OscConfig+0x2b8>)
 8007d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d8a:	f7fd fde5 	bl	8005958 <HAL_GetTick>
 8007d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d90:	e011      	b.n	8007db6 <HAL_RCC_OscConfig+0x2ce>
 8007d92:	bf00      	nop
 8007d94:	40023800 	.word	0x40023800
 8007d98:	42470000 	.word	0x42470000
 8007d9c:	42470e80 	.word	0x42470e80
 8007da0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007da4:	f7fd fdd8 	bl	8005958 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e106      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007db6:	4b85      	ldr	r3, [pc, #532]	; (8007fcc <HAL_RCC_OscConfig+0x4e4>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0f0      	beq.n	8007da4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d106      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x2f0>
 8007dca:	4b81      	ldr	r3, [pc, #516]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	4a80      	ldr	r2, [pc, #512]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007dd6:	e01c      	b.n	8007e12 <HAL_RCC_OscConfig+0x32a>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b05      	cmp	r3, #5
 8007dde:	d10c      	bne.n	8007dfa <HAL_RCC_OscConfig+0x312>
 8007de0:	4b7b      	ldr	r3, [pc, #492]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de4:	4a7a      	ldr	r2, [pc, #488]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007de6:	f043 0304 	orr.w	r3, r3, #4
 8007dea:	6713      	str	r3, [r2, #112]	; 0x70
 8007dec:	4b78      	ldr	r3, [pc, #480]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df0:	4a77      	ldr	r2, [pc, #476]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007df2:	f043 0301 	orr.w	r3, r3, #1
 8007df6:	6713      	str	r3, [r2, #112]	; 0x70
 8007df8:	e00b      	b.n	8007e12 <HAL_RCC_OscConfig+0x32a>
 8007dfa:	4b75      	ldr	r3, [pc, #468]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfe:	4a74      	ldr	r2, [pc, #464]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	6713      	str	r3, [r2, #112]	; 0x70
 8007e06:	4b72      	ldr	r3, [pc, #456]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0a:	4a71      	ldr	r2, [pc, #452]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007e0c:	f023 0304 	bic.w	r3, r3, #4
 8007e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d015      	beq.n	8007e46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e1a:	f7fd fd9d 	bl	8005958 <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e20:	e00a      	b.n	8007e38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e22:	f7fd fd99 	bl	8005958 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d901      	bls.n	8007e38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e0c5      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e38:	4b65      	ldr	r3, [pc, #404]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0ee      	beq.n	8007e22 <HAL_RCC_OscConfig+0x33a>
 8007e44:	e014      	b.n	8007e70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e46:	f7fd fd87 	bl	8005958 <HAL_GetTick>
 8007e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e4c:	e00a      	b.n	8007e64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e4e:	f7fd fd83 	bl	8005958 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e0af      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e64:	4b5a      	ldr	r3, [pc, #360]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1ee      	bne.n	8007e4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d105      	bne.n	8007e82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e76:	4b56      	ldr	r3, [pc, #344]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	4a55      	ldr	r2, [pc, #340]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 809b 	beq.w	8007fc2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e8c:	4b50      	ldr	r3, [pc, #320]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 030c 	and.w	r3, r3, #12
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d05c      	beq.n	8007f52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d141      	bne.n	8007f24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea0:	4b4c      	ldr	r3, [pc, #304]	; (8007fd4 <HAL_RCC_OscConfig+0x4ec>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea6:	f7fd fd57 	bl	8005958 <HAL_GetTick>
 8007eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eac:	e008      	b.n	8007ec0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eae:	f7fd fd53 	bl	8005958 <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d901      	bls.n	8007ec0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e081      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ec0:	4b43      	ldr	r3, [pc, #268]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1f0      	bne.n	8007eae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	019b      	lsls	r3, r3, #6
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	041b      	lsls	r3, r3, #16
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	061b      	lsls	r3, r3, #24
 8007ef0:	4937      	ldr	r1, [pc, #220]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef6:	4b37      	ldr	r3, [pc, #220]	; (8007fd4 <HAL_RCC_OscConfig+0x4ec>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007efc:	f7fd fd2c 	bl	8005958 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f04:	f7fd fd28 	bl	8005958 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e056      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f16:	4b2e      	ldr	r3, [pc, #184]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0f0      	beq.n	8007f04 <HAL_RCC_OscConfig+0x41c>
 8007f22:	e04e      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f24:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <HAL_RCC_OscConfig+0x4ec>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f2a:	f7fd fd15 	bl	8005958 <HAL_GetTick>
 8007f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f32:	f7fd fd11 	bl	8005958 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e03f      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f44:	4b22      	ldr	r3, [pc, #136]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f0      	bne.n	8007f32 <HAL_RCC_OscConfig+0x44a>
 8007f50:	e037      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e032      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f5e:	4b1c      	ldr	r3, [pc, #112]	; (8007fd0 <HAL_RCC_OscConfig+0x4e8>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d028      	beq.n	8007fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d121      	bne.n	8007fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d11a      	bne.n	8007fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f8e:	4013      	ands	r3, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d111      	bne.n	8007fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d107      	bne.n	8007fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d001      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40007000 	.word	0x40007000
 8007fd0:	40023800 	.word	0x40023800
 8007fd4:	42470060 	.word	0x42470060

08007fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e0cc      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fec:	4b68      	ldr	r3, [pc, #416]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d90c      	bls.n	8008014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffa:	4b65      	ldr	r3, [pc, #404]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008002:	4b63      	ldr	r3, [pc, #396]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d001      	beq.n	8008014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e0b8      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d020      	beq.n	8008062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800802c:	4b59      	ldr	r3, [pc, #356]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	4a58      	ldr	r2, [pc, #352]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008044:	4b53      	ldr	r3, [pc, #332]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	4a52      	ldr	r2, [pc, #328]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800804a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800804e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008050:	4b50      	ldr	r3, [pc, #320]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	494d      	ldr	r1, [pc, #308]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800805e:	4313      	orrs	r3, r2
 8008060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d044      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d107      	bne.n	8008086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008076:	4b47      	ldr	r3, [pc, #284]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d119      	bne.n	80080b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e07f      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d003      	beq.n	8008096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008092:	2b03      	cmp	r3, #3
 8008094:	d107      	bne.n	80080a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008096:	4b3f      	ldr	r3, [pc, #252]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d109      	bne.n	80080b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e06f      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a6:	4b3b      	ldr	r3, [pc, #236]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e067      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080b6:	4b37      	ldr	r3, [pc, #220]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f023 0203 	bic.w	r2, r3, #3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	4934      	ldr	r1, [pc, #208]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080c8:	f7fd fc46 	bl	8005958 <HAL_GetTick>
 80080cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ce:	e00a      	b.n	80080e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d0:	f7fd fc42 	bl	8005958 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	f241 3288 	movw	r2, #5000	; 0x1388
 80080de:	4293      	cmp	r3, r2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e04f      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080e6:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f003 020c 	and.w	r2, r3, #12
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d1eb      	bne.n	80080d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080f8:	4b25      	ldr	r3, [pc, #148]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d20c      	bcs.n	8008120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008106:	4b22      	ldr	r3, [pc, #136]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800810e:	4b20      	ldr	r3, [pc, #128]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d001      	beq.n	8008120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e032      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d008      	beq.n	800813e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800812c:	4b19      	ldr	r3, [pc, #100]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	4916      	ldr	r1, [pc, #88]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800813a:	4313      	orrs	r3, r2
 800813c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800814a:	4b12      	ldr	r3, [pc, #72]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	490e      	ldr	r1, [pc, #56]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800815a:	4313      	orrs	r3, r2
 800815c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800815e:	f000 f821 	bl	80081a4 <HAL_RCC_GetSysClockFreq>
 8008162:	4602      	mov	r2, r0
 8008164:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	091b      	lsrs	r3, r3, #4
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	490a      	ldr	r1, [pc, #40]	; (8008198 <HAL_RCC_ClockConfig+0x1c0>)
 8008170:	5ccb      	ldrb	r3, [r1, r3]
 8008172:	fa22 f303 	lsr.w	r3, r2, r3
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <HAL_RCC_ClockConfig+0x1c4>)
 8008178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800817a:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <HAL_RCC_ClockConfig+0x1c8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f7fd fba6 	bl	80058d0 <HAL_InitTick>

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	40023c00 	.word	0x40023c00
 8008194:	40023800 	.word	0x40023800
 8008198:	080f1228 	.word	0x080f1228
 800819c:	20000024 	.word	0x20000024
 80081a0:	20000060 	.word	0x20000060

080081a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	607b      	str	r3, [r7, #4]
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081bc:	4b67      	ldr	r3, [pc, #412]	; (800835c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f003 030c 	and.w	r3, r3, #12
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d00d      	beq.n	80081e4 <HAL_RCC_GetSysClockFreq+0x40>
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	f200 80bd 	bhi.w	8008348 <HAL_RCC_GetSysClockFreq+0x1a4>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_RCC_GetSysClockFreq+0x34>
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d003      	beq.n	80081de <HAL_RCC_GetSysClockFreq+0x3a>
 80081d6:	e0b7      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081d8:	4b61      	ldr	r3, [pc, #388]	; (8008360 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80081da:	60bb      	str	r3, [r7, #8]
       break;
 80081dc:	e0b7      	b.n	800834e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081de:	4b61      	ldr	r3, [pc, #388]	; (8008364 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80081e0:	60bb      	str	r3, [r7, #8]
      break;
 80081e2:	e0b4      	b.n	800834e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081e4:	4b5d      	ldr	r3, [pc, #372]	; (800835c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081ee:	4b5b      	ldr	r3, [pc, #364]	; (800835c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d04d      	beq.n	8008296 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081fa:	4b58      	ldr	r3, [pc, #352]	; (800835c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	099b      	lsrs	r3, r3, #6
 8008200:	461a      	mov	r2, r3
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	f240 10ff 	movw	r0, #511	; 0x1ff
 800820a:	f04f 0100 	mov.w	r1, #0
 800820e:	ea02 0800 	and.w	r8, r2, r0
 8008212:	ea03 0901 	and.w	r9, r3, r1
 8008216:	4640      	mov	r0, r8
 8008218:	4649      	mov	r1, r9
 800821a:	f04f 0200 	mov.w	r2, #0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	014b      	lsls	r3, r1, #5
 8008224:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008228:	0142      	lsls	r2, r0, #5
 800822a:	4610      	mov	r0, r2
 800822c:	4619      	mov	r1, r3
 800822e:	ebb0 0008 	subs.w	r0, r0, r8
 8008232:	eb61 0109 	sbc.w	r1, r1, r9
 8008236:	f04f 0200 	mov.w	r2, #0
 800823a:	f04f 0300 	mov.w	r3, #0
 800823e:	018b      	lsls	r3, r1, #6
 8008240:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008244:	0182      	lsls	r2, r0, #6
 8008246:	1a12      	subs	r2, r2, r0
 8008248:	eb63 0301 	sbc.w	r3, r3, r1
 800824c:	f04f 0000 	mov.w	r0, #0
 8008250:	f04f 0100 	mov.w	r1, #0
 8008254:	00d9      	lsls	r1, r3, #3
 8008256:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800825a:	00d0      	lsls	r0, r2, #3
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	eb12 0208 	adds.w	r2, r2, r8
 8008264:	eb43 0309 	adc.w	r3, r3, r9
 8008268:	f04f 0000 	mov.w	r0, #0
 800826c:	f04f 0100 	mov.w	r1, #0
 8008270:	0259      	lsls	r1, r3, #9
 8008272:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008276:	0250      	lsls	r0, r2, #9
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4610      	mov	r0, r2
 800827e:	4619      	mov	r1, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	461a      	mov	r2, r3
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	f7f8 fcf6 	bl	8000c78 <__aeabi_uldivmod>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4613      	mov	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e04a      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008296:	4b31      	ldr	r3, [pc, #196]	; (800835c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	099b      	lsrs	r3, r3, #6
 800829c:	461a      	mov	r2, r3
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80082a6:	f04f 0100 	mov.w	r1, #0
 80082aa:	ea02 0400 	and.w	r4, r2, r0
 80082ae:	ea03 0501 	and.w	r5, r3, r1
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f04f 0200 	mov.w	r2, #0
 80082ba:	f04f 0300 	mov.w	r3, #0
 80082be:	014b      	lsls	r3, r1, #5
 80082c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80082c4:	0142      	lsls	r2, r0, #5
 80082c6:	4610      	mov	r0, r2
 80082c8:	4619      	mov	r1, r3
 80082ca:	1b00      	subs	r0, r0, r4
 80082cc:	eb61 0105 	sbc.w	r1, r1, r5
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	f04f 0300 	mov.w	r3, #0
 80082d8:	018b      	lsls	r3, r1, #6
 80082da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80082de:	0182      	lsls	r2, r0, #6
 80082e0:	1a12      	subs	r2, r2, r0
 80082e2:	eb63 0301 	sbc.w	r3, r3, r1
 80082e6:	f04f 0000 	mov.w	r0, #0
 80082ea:	f04f 0100 	mov.w	r1, #0
 80082ee:	00d9      	lsls	r1, r3, #3
 80082f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082f4:	00d0      	lsls	r0, r2, #3
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	1912      	adds	r2, r2, r4
 80082fc:	eb45 0303 	adc.w	r3, r5, r3
 8008300:	f04f 0000 	mov.w	r0, #0
 8008304:	f04f 0100 	mov.w	r1, #0
 8008308:	0299      	lsls	r1, r3, #10
 800830a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800830e:	0290      	lsls	r0, r2, #10
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4610      	mov	r0, r2
 8008316:	4619      	mov	r1, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	461a      	mov	r2, r3
 800831c:	f04f 0300 	mov.w	r3, #0
 8008320:	f7f8 fcaa 	bl	8000c78 <__aeabi_uldivmod>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4613      	mov	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800832c:	4b0b      	ldr	r3, [pc, #44]	; (800835c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	0c1b      	lsrs	r3, r3, #16
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	3301      	adds	r3, #1
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	fbb2 f3f3 	udiv	r3, r2, r3
 8008344:	60bb      	str	r3, [r7, #8]
      break;
 8008346:	e002      	b.n	800834e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800834a:	60bb      	str	r3, [r7, #8]
      break;
 800834c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800834e:	68bb      	ldr	r3, [r7, #8]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800835a:	bf00      	nop
 800835c:	40023800 	.word	0x40023800
 8008360:	00f42400 	.word	0x00f42400
 8008364:	007a1200 	.word	0x007a1200

08008368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800836c:	4b03      	ldr	r3, [pc, #12]	; (800837c <HAL_RCC_GetHCLKFreq+0x14>)
 800836e:	681b      	ldr	r3, [r3, #0]
}
 8008370:	4618      	mov	r0, r3
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000024 	.word	0x20000024

08008380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008384:	f7ff fff0 	bl	8008368 <HAL_RCC_GetHCLKFreq>
 8008388:	4602      	mov	r2, r0
 800838a:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	0a9b      	lsrs	r3, r3, #10
 8008390:	f003 0307 	and.w	r3, r3, #7
 8008394:	4903      	ldr	r1, [pc, #12]	; (80083a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008396:	5ccb      	ldrb	r3, [r1, r3]
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800839c:	4618      	mov	r0, r3
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	40023800 	.word	0x40023800
 80083a4:	080f1238 	.word	0x080f1238

080083a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80083ac:	f7ff ffdc 	bl	8008368 <HAL_RCC_GetHCLKFreq>
 80083b0:	4602      	mov	r2, r0
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	0b5b      	lsrs	r3, r3, #13
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	4903      	ldr	r1, [pc, #12]	; (80083cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80083be:	5ccb      	ldrb	r3, [r1, r3]
 80083c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	40023800 	.word	0x40023800
 80083cc:	080f1238 	.word	0x080f1238

080083d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e07b      	b.n	80084da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d108      	bne.n	80083fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083f2:	d009      	beq.n	8008408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	61da      	str	r2, [r3, #28]
 80083fa:	e005      	b.n	8008408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fb fee6 	bl	80041f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800843e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848c:	ea42 0103 	orr.w	r1, r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	0c1b      	lsrs	r3, r3, #16
 80084a6:	f003 0104 	and.w	r1, r3, #4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	f003 0210 	and.w	r2, r3, #16
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b088      	sub	sp, #32
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	603b      	str	r3, [r7, #0]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_SPI_Transmit+0x22>
 8008500:	2302      	movs	r3, #2
 8008502:	e126      	b.n	8008752 <HAL_SPI_Transmit+0x270>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800850c:	f7fd fa24 	bl	8005958 <HAL_GetTick>
 8008510:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b01      	cmp	r3, #1
 8008520:	d002      	beq.n	8008528 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008522:	2302      	movs	r3, #2
 8008524:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008526:	e10b      	b.n	8008740 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <HAL_SPI_Transmit+0x52>
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008538:	e102      	b.n	8008740 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2203      	movs	r2, #3
 800853e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	88fa      	ldrh	r2, [r7, #6]
 8008552:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008580:	d10f      	bne.n	80085a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008590:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	d007      	beq.n	80085c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c8:	d14b      	bne.n	8008662 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <HAL_SPI_Transmit+0xf6>
 80085d2:	8afb      	ldrh	r3, [r7, #22]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d13e      	bne.n	8008656 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	881a      	ldrh	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	1c9a      	adds	r2, r3, #2
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085fc:	e02b      	b.n	8008656 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b02      	cmp	r3, #2
 800860a:	d112      	bne.n	8008632 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008610:	881a      	ldrh	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861c:	1c9a      	adds	r2, r3, #2
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008626:	b29b      	uxth	r3, r3
 8008628:	3b01      	subs	r3, #1
 800862a:	b29a      	uxth	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008630:	e011      	b.n	8008656 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008632:	f7fd f991 	bl	8005958 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d803      	bhi.n	800864a <HAL_SPI_Transmit+0x168>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d102      	bne.n	8008650 <HAL_SPI_Transmit+0x16e>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d102      	bne.n	8008656 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008654:	e074      	b.n	8008740 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ce      	bne.n	80085fe <HAL_SPI_Transmit+0x11c>
 8008660:	e04c      	b.n	80086fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_SPI_Transmit+0x18e>
 800866a:	8afb      	ldrh	r3, [r7, #22]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d140      	bne.n	80086f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	330c      	adds	r3, #12
 800867a:	7812      	ldrb	r2, [r2, #0]
 800867c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008696:	e02c      	b.n	80086f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d113      	bne.n	80086ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	330c      	adds	r3, #12
 80086b0:	7812      	ldrb	r2, [r2, #0]
 80086b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	3b01      	subs	r3, #1
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80086cc:	e011      	b.n	80086f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086ce:	f7fd f943 	bl	8005958 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d803      	bhi.n	80086e6 <HAL_SPI_Transmit+0x204>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e4:	d102      	bne.n	80086ec <HAL_SPI_Transmit+0x20a>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086f0:	e026      	b.n	8008740 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1cd      	bne.n	8008698 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 fbcb 	bl	8008e9c <SPI_EndRxTxTransaction>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800871a:	2300      	movs	r3, #0
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	613b      	str	r3, [r7, #16]
 800872e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	77fb      	strb	r3, [r7, #31]
 800873c:	e000      	b.n	8008740 <HAL_SPI_Transmit+0x25e>
  }

error:
 800873e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008750:	7ffb      	ldrb	r3, [r7, #31]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3720      	adds	r7, #32
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b088      	sub	sp, #32
 800875e:	af02      	add	r7, sp, #8
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	603b      	str	r3, [r7, #0]
 8008766:	4613      	mov	r3, r2
 8008768:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008776:	d112      	bne.n	800879e <HAL_SPI_Receive+0x44>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10e      	bne.n	800879e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2204      	movs	r2, #4
 8008784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008788:	88fa      	ldrh	r2, [r7, #6]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	4613      	mov	r3, r2
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f8f1 	bl	800897c <HAL_SPI_TransmitReceive>
 800879a:	4603      	mov	r3, r0
 800879c:	e0ea      	b.n	8008974 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d101      	bne.n	80087ac <HAL_SPI_Receive+0x52>
 80087a8:	2302      	movs	r3, #2
 80087aa:	e0e3      	b.n	8008974 <HAL_SPI_Receive+0x21a>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087b4:	f7fd f8d0 	bl	8005958 <HAL_GetTick>
 80087b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d002      	beq.n	80087cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80087c6:	2302      	movs	r3, #2
 80087c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087ca:	e0ca      	b.n	8008962 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <HAL_SPI_Receive+0x7e>
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087dc:	e0c1      	b.n	8008962 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2204      	movs	r2, #4
 80087e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	88fa      	ldrh	r2, [r7, #6]
 80087f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	88fa      	ldrh	r2, [r7, #6]
 80087fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008824:	d10f      	bne.n	8008846 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008844:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d007      	beq.n	8008864 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008862:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d162      	bne.n	8008932 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800886c:	e02e      	b.n	80088cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	d115      	bne.n	80088a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f103 020c 	add.w	r2, r3, #12
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	7812      	ldrb	r2, [r2, #0]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088a6:	e011      	b.n	80088cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088a8:	f7fd f856 	bl	8005958 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d803      	bhi.n	80088c0 <HAL_SPI_Receive+0x166>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d102      	bne.n	80088c6 <HAL_SPI_Receive+0x16c>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088ca:	e04a      	b.n	8008962 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1cb      	bne.n	800886e <HAL_SPI_Receive+0x114>
 80088d6:	e031      	b.n	800893c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d113      	bne.n	800890e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f0:	b292      	uxth	r2, r2
 80088f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f8:	1c9a      	adds	r2, r3, #2
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008902:	b29b      	uxth	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b29a      	uxth	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800890c:	e011      	b.n	8008932 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800890e:	f7fd f823 	bl	8005958 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	429a      	cmp	r2, r3
 800891c:	d803      	bhi.n	8008926 <HAL_SPI_Receive+0x1cc>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d102      	bne.n	800892c <HAL_SPI_Receive+0x1d2>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008930:	e017      	b.n	8008962 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008936:	b29b      	uxth	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1cd      	bne.n	80088d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 fa45 	bl	8008dd0 <SPI_EndRxTransaction>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2220      	movs	r2, #32
 8008950:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	75fb      	strb	r3, [r7, #23]
 800895e:	e000      	b.n	8008962 <HAL_SPI_Receive+0x208>
  }

error :
 8008960:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08c      	sub	sp, #48	; 0x30
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800898a:	2301      	movs	r3, #1
 800898c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800899a:	2b01      	cmp	r3, #1
 800899c:	d101      	bne.n	80089a2 <HAL_SPI_TransmitReceive+0x26>
 800899e:	2302      	movs	r3, #2
 80089a0:	e18a      	b.n	8008cb8 <HAL_SPI_TransmitReceive+0x33c>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089aa:	f7fc ffd5 	bl	8005958 <HAL_GetTick>
 80089ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80089c0:	887b      	ldrh	r3, [r7, #2]
 80089c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80089c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d00f      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x70>
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d2:	d107      	bne.n	80089e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <HAL_SPI_TransmitReceive+0x68>
 80089dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d003      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80089ea:	e15b      	b.n	8008ca4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d005      	beq.n	80089fe <HAL_SPI_TransmitReceive+0x82>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_SPI_TransmitReceive+0x82>
 80089f8:	887b      	ldrh	r3, [r7, #2]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d103      	bne.n	8008a06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a04:	e14e      	b.n	8008ca4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d003      	beq.n	8008a1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2205      	movs	r2, #5
 8008a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	887a      	ldrh	r2, [r7, #2]
 8008a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	887a      	ldrh	r2, [r7, #2]
 8008a30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	887a      	ldrh	r2, [r7, #2]
 8008a3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	887a      	ldrh	r2, [r7, #2]
 8008a42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5a:	2b40      	cmp	r3, #64	; 0x40
 8008a5c:	d007      	beq.n	8008a6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a76:	d178      	bne.n	8008b6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <HAL_SPI_TransmitReceive+0x10a>
 8008a80:	8b7b      	ldrh	r3, [r7, #26]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d166      	bne.n	8008b54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	881a      	ldrh	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008aaa:	e053      	b.n	8008b54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d11b      	bne.n	8008af2 <HAL_SPI_TransmitReceive+0x176>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d016      	beq.n	8008af2 <HAL_SPI_TransmitReceive+0x176>
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d113      	bne.n	8008af2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	881a      	ldrh	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	1c9a      	adds	r2, r3, #2
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d119      	bne.n	8008b34 <HAL_SPI_TransmitReceive+0x1b8>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d014      	beq.n	8008b34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	b292      	uxth	r2, r2
 8008b16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	1c9a      	adds	r2, r3, #2
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b30:	2301      	movs	r3, #1
 8008b32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b34:	f7fc ff10 	bl	8005958 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d807      	bhi.n	8008b54 <HAL_SPI_TransmitReceive+0x1d8>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4a:	d003      	beq.n	8008b54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b52:	e0a7      	b.n	8008ca4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1a6      	bne.n	8008aac <HAL_SPI_TransmitReceive+0x130>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1a1      	bne.n	8008aac <HAL_SPI_TransmitReceive+0x130>
 8008b68:	e07c      	b.n	8008c64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <HAL_SPI_TransmitReceive+0x1fc>
 8008b72:	8b7b      	ldrh	r3, [r7, #26]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d16b      	bne.n	8008c50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	330c      	adds	r3, #12
 8008b82:	7812      	ldrb	r2, [r2, #0]
 8008b84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	3b01      	subs	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b9e:	e057      	b.n	8008c50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d11c      	bne.n	8008be8 <HAL_SPI_TransmitReceive+0x26c>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d017      	beq.n	8008be8 <HAL_SPI_TransmitReceive+0x26c>
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d114      	bne.n	8008be8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	330c      	adds	r3, #12
 8008bc8:	7812      	ldrb	r2, [r2, #0]
 8008bca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d119      	bne.n	8008c2a <HAL_SPI_TransmitReceive+0x2ae>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d014      	beq.n	8008c2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c26:	2301      	movs	r3, #1
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c2a:	f7fc fe95 	bl	8005958 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d803      	bhi.n	8008c42 <HAL_SPI_TransmitReceive+0x2c6>
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d102      	bne.n	8008c48 <HAL_SPI_TransmitReceive+0x2cc>
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c4e:	e029      	b.n	8008ca4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1a2      	bne.n	8008ba0 <HAL_SPI_TransmitReceive+0x224>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d19d      	bne.n	8008ba0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f917 	bl	8008e9c <SPI_EndRxTxTransaction>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d006      	beq.n	8008c82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008c80:	e010      	b.n	8008ca4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10b      	bne.n	8008ca2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	e000      	b.n	8008ca4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3730      	adds	r7, #48	; 0x30
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	603b      	str	r3, [r7, #0]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008cd0:	f7fc fe42 	bl	8005958 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	4413      	add	r3, r2
 8008cde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ce0:	f7fc fe3a 	bl	8005958 <HAL_GetTick>
 8008ce4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ce6:	4b39      	ldr	r3, [pc, #228]	; (8008dcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	015b      	lsls	r3, r3, #5
 8008cec:	0d1b      	lsrs	r3, r3, #20
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	fb02 f303 	mul.w	r3, r2, r3
 8008cf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cf6:	e054      	b.n	8008da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfe:	d050      	beq.n	8008da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d00:	f7fc fe2a 	bl	8005958 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	69fa      	ldr	r2, [r7, #28]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d902      	bls.n	8008d16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d13d      	bne.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d2e:	d111      	bne.n	8008d54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d38:	d004      	beq.n	8008d44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d42:	d107      	bne.n	8008d54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d5c:	d10f      	bne.n	8008d7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e017      	b.n	8008dc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	4013      	ands	r3, r2
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	bf0c      	ite	eq
 8008db2:	2301      	moveq	r3, #1
 8008db4:	2300      	movne	r3, #0
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d19b      	bne.n	8008cf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3720      	adds	r7, #32
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000024 	.word	0x20000024

08008dd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af02      	add	r7, sp, #8
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008de4:	d111      	bne.n	8008e0a <SPI_EndRxTransaction+0x3a>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dee:	d004      	beq.n	8008dfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008df8:	d107      	bne.n	8008e0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e12:	d12a      	bne.n	8008e6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e1c:	d012      	beq.n	8008e44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2200      	movs	r2, #0
 8008e26:	2180      	movs	r1, #128	; 0x80
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7ff ff49 	bl	8008cc0 <SPI_WaitFlagStateUntilTimeout>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d02d      	beq.n	8008e90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e38:	f043 0220 	orr.w	r2, r3, #32
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e026      	b.n	8008e92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7ff ff36 	bl	8008cc0 <SPI_WaitFlagStateUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01a      	beq.n	8008e90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5e:	f043 0220 	orr.w	r2, r3, #32
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e013      	b.n	8008e92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2200      	movs	r2, #0
 8008e72:	2101      	movs	r1, #1
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff ff23 	bl	8008cc0 <SPI_WaitFlagStateUntilTimeout>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e84:	f043 0220 	orr.w	r2, r3, #32
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e000      	b.n	8008e92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ea8:	4b1b      	ldr	r3, [pc, #108]	; (8008f18 <SPI_EndRxTxTransaction+0x7c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1b      	ldr	r2, [pc, #108]	; (8008f1c <SPI_EndRxTxTransaction+0x80>)
 8008eae:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb2:	0d5b      	lsrs	r3, r3, #21
 8008eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008eb8:	fb02 f303 	mul.w	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ec6:	d112      	bne.n	8008eee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2180      	movs	r1, #128	; 0x80
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f7ff fef4 	bl	8008cc0 <SPI_WaitFlagStateUntilTimeout>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d016      	beq.n	8008f0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	f043 0220 	orr.w	r2, r3, #32
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e00f      	b.n	8008f0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f04:	2b80      	cmp	r3, #128	; 0x80
 8008f06:	d0f2      	beq.n	8008eee <SPI_EndRxTxTransaction+0x52>
 8008f08:	e000      	b.n	8008f0c <SPI_EndRxTxTransaction+0x70>
        break;
 8008f0a:	bf00      	nop
  }

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20000024 	.word	0x20000024
 8008f1c:	165e9f81 	.word	0x165e9f81

08008f20 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e034      	b.n	8008fa0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d106      	bne.n	8008f50 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f7fb fafe 	bl	800454c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3308      	adds	r3, #8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	f001 ffa2 	bl	800aea4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	f001 ffec 	bl	800af48 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6858      	ldr	r0, [r3, #4]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	f002 f821 	bl	800afc4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	6892      	ldr	r2, [r2, #8]
 8008f8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	6892      	ldr	r2, [r2, #8]
 8008f96:	f041 0101 	orr.w	r1, r1, #1
 8008f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e041      	b.n	800903e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d106      	bne.n	8008fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7fb f958 	bl	8004284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f000 fc1a 	bl	8009820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b01      	cmp	r3, #1
 800905a:	d001      	beq.n	8009060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e046      	b.n	80090ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a23      	ldr	r2, [pc, #140]	; (80090fc <HAL_TIM_Base_Start+0xb4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d022      	beq.n	80090b8 <HAL_TIM_Base_Start+0x70>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907a:	d01d      	beq.n	80090b8 <HAL_TIM_Base_Start+0x70>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1f      	ldr	r2, [pc, #124]	; (8009100 <HAL_TIM_Base_Start+0xb8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d018      	beq.n	80090b8 <HAL_TIM_Base_Start+0x70>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a1e      	ldr	r2, [pc, #120]	; (8009104 <HAL_TIM_Base_Start+0xbc>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d013      	beq.n	80090b8 <HAL_TIM_Base_Start+0x70>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a1c      	ldr	r2, [pc, #112]	; (8009108 <HAL_TIM_Base_Start+0xc0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00e      	beq.n	80090b8 <HAL_TIM_Base_Start+0x70>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a1b      	ldr	r2, [pc, #108]	; (800910c <HAL_TIM_Base_Start+0xc4>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d009      	beq.n	80090b8 <HAL_TIM_Base_Start+0x70>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a19      	ldr	r2, [pc, #100]	; (8009110 <HAL_TIM_Base_Start+0xc8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d004      	beq.n	80090b8 <HAL_TIM_Base_Start+0x70>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a18      	ldr	r2, [pc, #96]	; (8009114 <HAL_TIM_Base_Start+0xcc>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d111      	bne.n	80090dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 0307 	and.w	r3, r3, #7
 80090c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b06      	cmp	r3, #6
 80090c8:	d010      	beq.n	80090ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f042 0201 	orr.w	r2, r2, #1
 80090d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090da:	e007      	b.n	80090ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f042 0201 	orr.w	r2, r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40010000 	.word	0x40010000
 8009100:	40000400 	.word	0x40000400
 8009104:	40000800 	.word	0x40000800
 8009108:	40000c00 	.word	0x40000c00
 800910c:	40010400 	.word	0x40010400
 8009110:	40014000 	.word	0x40014000
 8009114:	40001800 	.word	0x40001800

08009118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b01      	cmp	r3, #1
 800912a:	d001      	beq.n	8009130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e04e      	b.n	80091ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0201 	orr.w	r2, r2, #1
 8009146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a23      	ldr	r2, [pc, #140]	; (80091dc <HAL_TIM_Base_Start_IT+0xc4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d022      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x80>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915a:	d01d      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x80>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1f      	ldr	r2, [pc, #124]	; (80091e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d018      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x80>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d013      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x80>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a1c      	ldr	r2, [pc, #112]	; (80091e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00e      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x80>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <HAL_TIM_Base_Start_IT+0xd4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d009      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x80>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a19      	ldr	r2, [pc, #100]	; (80091f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <HAL_TIM_Base_Start_IT+0x80>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a18      	ldr	r2, [pc, #96]	; (80091f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d111      	bne.n	80091bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b06      	cmp	r3, #6
 80091a8:	d010      	beq.n	80091cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f042 0201 	orr.w	r2, r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ba:	e007      	b.n	80091cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	40010000 	.word	0x40010000
 80091e0:	40000400 	.word	0x40000400
 80091e4:	40000800 	.word	0x40000800
 80091e8:	40000c00 	.word	0x40000c00
 80091ec:	40010400 	.word	0x40010400
 80091f0:	40014000 	.word	0x40014000
 80091f4:	40001800 	.word	0x40001800

080091f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e041      	b.n	800928e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d106      	bne.n	8009224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f839 	bl	8009296 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3304      	adds	r3, #4
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f000 faf2 	bl	8009820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d122      	bne.n	8009306 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d11b      	bne.n	8009306 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f06f 0202 	mvn.w	r2, #2
 80092d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fa78 	bl	80097e2 <HAL_TIM_IC_CaptureCallback>
 80092f2:	e005      	b.n	8009300 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fa6a 	bl	80097ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa7b 	bl	80097f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b04      	cmp	r3, #4
 8009312:	d122      	bne.n	800935a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f003 0304 	and.w	r3, r3, #4
 800931e:	2b04      	cmp	r3, #4
 8009320:	d11b      	bne.n	800935a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f06f 0204 	mvn.w	r2, #4
 800932a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fa4e 	bl	80097e2 <HAL_TIM_IC_CaptureCallback>
 8009346:	e005      	b.n	8009354 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fa40 	bl	80097ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa51 	bl	80097f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b08      	cmp	r3, #8
 8009366:	d122      	bne.n	80093ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b08      	cmp	r3, #8
 8009374:	d11b      	bne.n	80093ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f06f 0208 	mvn.w	r2, #8
 800937e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2204      	movs	r2, #4
 8009384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	f003 0303 	and.w	r3, r3, #3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fa24 	bl	80097e2 <HAL_TIM_IC_CaptureCallback>
 800939a:	e005      	b.n	80093a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa16 	bl	80097ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fa27 	bl	80097f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	f003 0310 	and.w	r3, r3, #16
 80093b8:	2b10      	cmp	r3, #16
 80093ba:	d122      	bne.n	8009402 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f003 0310 	and.w	r3, r3, #16
 80093c6:	2b10      	cmp	r3, #16
 80093c8:	d11b      	bne.n	8009402 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f06f 0210 	mvn.w	r2, #16
 80093d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2208      	movs	r2, #8
 80093d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d003      	beq.n	80093f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f9fa 	bl	80097e2 <HAL_TIM_IC_CaptureCallback>
 80093ee:	e005      	b.n	80093fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f9ec 	bl	80097ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f9fd 	bl	80097f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b01      	cmp	r3, #1
 800940e:	d10e      	bne.n	800942e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b01      	cmp	r3, #1
 800941c:	d107      	bne.n	800942e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f06f 0201 	mvn.w	r2, #1
 8009426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7fa fd49 	bl	8003ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009438:	2b80      	cmp	r3, #128	; 0x80
 800943a:	d10e      	bne.n	800945a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009446:	2b80      	cmp	r3, #128	; 0x80
 8009448:	d107      	bne.n	800945a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fd53 	bl	8009f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d10e      	bne.n	8009486 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	d107      	bne.n	8009486 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800947e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9c2 	bl	800980a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b20      	cmp	r3, #32
 8009492:	d10e      	bne.n	80094b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b20      	cmp	r3, #32
 80094a0:	d107      	bne.n	80094b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f06f 0220 	mvn.w	r2, #32
 80094aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fd1d 	bl	8009eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e0ae      	b.n	8009638 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b0c      	cmp	r3, #12
 80094e6:	f200 809f 	bhi.w	8009628 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80094ea:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f0:	08009525 	.word	0x08009525
 80094f4:	08009629 	.word	0x08009629
 80094f8:	08009629 	.word	0x08009629
 80094fc:	08009629 	.word	0x08009629
 8009500:	08009565 	.word	0x08009565
 8009504:	08009629 	.word	0x08009629
 8009508:	08009629 	.word	0x08009629
 800950c:	08009629 	.word	0x08009629
 8009510:	080095a7 	.word	0x080095a7
 8009514:	08009629 	.word	0x08009629
 8009518:	08009629 	.word	0x08009629
 800951c:	08009629 	.word	0x08009629
 8009520:	080095e7 	.word	0x080095e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fa18 	bl	8009960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0208 	orr.w	r2, r2, #8
 800953e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699a      	ldr	r2, [r3, #24]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0204 	bic.w	r2, r2, #4
 800954e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6999      	ldr	r1, [r3, #24]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	691a      	ldr	r2, [r3, #16]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	619a      	str	r2, [r3, #24]
      break;
 8009562:	e064      	b.n	800962e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fa68 	bl	8009a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	699a      	ldr	r2, [r3, #24]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800957e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800958e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6999      	ldr	r1, [r3, #24]
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	021a      	lsls	r2, r3, #8
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	619a      	str	r2, [r3, #24]
      break;
 80095a4:	e043      	b.n	800962e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fabd 	bl	8009b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69da      	ldr	r2, [r3, #28]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0208 	orr.w	r2, r2, #8
 80095c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69da      	ldr	r2, [r3, #28]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0204 	bic.w	r2, r2, #4
 80095d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69d9      	ldr	r1, [r3, #28]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	430a      	orrs	r2, r1
 80095e2:	61da      	str	r2, [r3, #28]
      break;
 80095e4:	e023      	b.n	800962e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fb11 	bl	8009c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69da      	ldr	r2, [r3, #28]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	69da      	ldr	r2, [r3, #28]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	69d9      	ldr	r1, [r3, #28]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	021a      	lsls	r2, r3, #8
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	430a      	orrs	r2, r1
 8009624:	61da      	str	r2, [r3, #28]
      break;
 8009626:	e002      	b.n	800962e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	75fb      	strb	r3, [r7, #23]
      break;
 800962c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d101      	bne.n	800965c <HAL_TIM_ConfigClockSource+0x1c>
 8009658:	2302      	movs	r3, #2
 800965a:	e0b4      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x186>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800967a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009694:	d03e      	beq.n	8009714 <HAL_TIM_ConfigClockSource+0xd4>
 8009696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800969a:	f200 8087 	bhi.w	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 800969e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a2:	f000 8086 	beq.w	80097b2 <HAL_TIM_ConfigClockSource+0x172>
 80096a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096aa:	d87f      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096ac:	2b70      	cmp	r3, #112	; 0x70
 80096ae:	d01a      	beq.n	80096e6 <HAL_TIM_ConfigClockSource+0xa6>
 80096b0:	2b70      	cmp	r3, #112	; 0x70
 80096b2:	d87b      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096b4:	2b60      	cmp	r3, #96	; 0x60
 80096b6:	d050      	beq.n	800975a <HAL_TIM_ConfigClockSource+0x11a>
 80096b8:	2b60      	cmp	r3, #96	; 0x60
 80096ba:	d877      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096bc:	2b50      	cmp	r3, #80	; 0x50
 80096be:	d03c      	beq.n	800973a <HAL_TIM_ConfigClockSource+0xfa>
 80096c0:	2b50      	cmp	r3, #80	; 0x50
 80096c2:	d873      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096c4:	2b40      	cmp	r3, #64	; 0x40
 80096c6:	d058      	beq.n	800977a <HAL_TIM_ConfigClockSource+0x13a>
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d86f      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096cc:	2b30      	cmp	r3, #48	; 0x30
 80096ce:	d064      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x15a>
 80096d0:	2b30      	cmp	r3, #48	; 0x30
 80096d2:	d86b      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d060      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x15a>
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d867      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d05c      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x15a>
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d05a      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x15a>
 80096e4:	e062      	b.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	6899      	ldr	r1, [r3, #8]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f000 fb5d 	bl	8009db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	609a      	str	r2, [r3, #8]
      break;
 8009712:	e04f      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	6899      	ldr	r1, [r3, #8]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f000 fb46 	bl	8009db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689a      	ldr	r2, [r3, #8]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009736:	609a      	str	r2, [r3, #8]
      break;
 8009738:	e03c      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	6859      	ldr	r1, [r3, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	461a      	mov	r2, r3
 8009748:	f000 faba 	bl	8009cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2150      	movs	r1, #80	; 0x50
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fb13 	bl	8009d7e <TIM_ITRx_SetConfig>
      break;
 8009758:	e02c      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	6859      	ldr	r1, [r3, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	461a      	mov	r2, r3
 8009768:	f000 fad9 	bl	8009d1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2160      	movs	r1, #96	; 0x60
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fb03 	bl	8009d7e <TIM_ITRx_SetConfig>
      break;
 8009778:	e01c      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	6859      	ldr	r1, [r3, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	461a      	mov	r2, r3
 8009788:	f000 fa9a 	bl	8009cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2140      	movs	r1, #64	; 0x40
 8009792:	4618      	mov	r0, r3
 8009794:	f000 faf3 	bl	8009d7e <TIM_ITRx_SetConfig>
      break;
 8009798:	e00c      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f000 faea 	bl	8009d7e <TIM_ITRx_SetConfig>
      break;
 80097aa:	e003      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	73fb      	strb	r3, [r7, #15]
      break;
 80097b0:	e000      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a40      	ldr	r2, [pc, #256]	; (8009934 <TIM_Base_SetConfig+0x114>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d013      	beq.n	8009860 <TIM_Base_SetConfig+0x40>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983e:	d00f      	beq.n	8009860 <TIM_Base_SetConfig+0x40>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a3d      	ldr	r2, [pc, #244]	; (8009938 <TIM_Base_SetConfig+0x118>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00b      	beq.n	8009860 <TIM_Base_SetConfig+0x40>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a3c      	ldr	r2, [pc, #240]	; (800993c <TIM_Base_SetConfig+0x11c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d007      	beq.n	8009860 <TIM_Base_SetConfig+0x40>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a3b      	ldr	r2, [pc, #236]	; (8009940 <TIM_Base_SetConfig+0x120>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d003      	beq.n	8009860 <TIM_Base_SetConfig+0x40>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a3a      	ldr	r2, [pc, #232]	; (8009944 <TIM_Base_SetConfig+0x124>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d108      	bne.n	8009872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4313      	orrs	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a2f      	ldr	r2, [pc, #188]	; (8009934 <TIM_Base_SetConfig+0x114>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d02b      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009880:	d027      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a2c      	ldr	r2, [pc, #176]	; (8009938 <TIM_Base_SetConfig+0x118>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d023      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a2b      	ldr	r2, [pc, #172]	; (800993c <TIM_Base_SetConfig+0x11c>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d01f      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a2a      	ldr	r2, [pc, #168]	; (8009940 <TIM_Base_SetConfig+0x120>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d01b      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a29      	ldr	r2, [pc, #164]	; (8009944 <TIM_Base_SetConfig+0x124>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d017      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a28      	ldr	r2, [pc, #160]	; (8009948 <TIM_Base_SetConfig+0x128>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d013      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a27      	ldr	r2, [pc, #156]	; (800994c <TIM_Base_SetConfig+0x12c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00f      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a26      	ldr	r2, [pc, #152]	; (8009950 <TIM_Base_SetConfig+0x130>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00b      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a25      	ldr	r2, [pc, #148]	; (8009954 <TIM_Base_SetConfig+0x134>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d007      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a24      	ldr	r2, [pc, #144]	; (8009958 <TIM_Base_SetConfig+0x138>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d003      	beq.n	80098d2 <TIM_Base_SetConfig+0xb2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a23      	ldr	r2, [pc, #140]	; (800995c <TIM_Base_SetConfig+0x13c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d108      	bne.n	80098e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a0a      	ldr	r2, [pc, #40]	; (8009934 <TIM_Base_SetConfig+0x114>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d003      	beq.n	8009918 <TIM_Base_SetConfig+0xf8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a0c      	ldr	r2, [pc, #48]	; (8009944 <TIM_Base_SetConfig+0x124>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d103      	bne.n	8009920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	691a      	ldr	r2, [r3, #16]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	615a      	str	r2, [r3, #20]
}
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	40010000 	.word	0x40010000
 8009938:	40000400 	.word	0x40000400
 800993c:	40000800 	.word	0x40000800
 8009940:	40000c00 	.word	0x40000c00
 8009944:	40010400 	.word	0x40010400
 8009948:	40014000 	.word	0x40014000
 800994c:	40014400 	.word	0x40014400
 8009950:	40014800 	.word	0x40014800
 8009954:	40001800 	.word	0x40001800
 8009958:	40001c00 	.word	0x40001c00
 800995c:	40002000 	.word	0x40002000

08009960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	f023 0201 	bic.w	r2, r3, #1
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f023 0303 	bic.w	r3, r3, #3
 8009996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f023 0302 	bic.w	r3, r3, #2
 80099a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a20      	ldr	r2, [pc, #128]	; (8009a38 <TIM_OC1_SetConfig+0xd8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d003      	beq.n	80099c4 <TIM_OC1_SetConfig+0x64>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a1f      	ldr	r2, [pc, #124]	; (8009a3c <TIM_OC1_SetConfig+0xdc>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d10c      	bne.n	80099de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f023 0308 	bic.w	r3, r3, #8
 80099ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f023 0304 	bic.w	r3, r3, #4
 80099dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <TIM_OC1_SetConfig+0xd8>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d003      	beq.n	80099ee <TIM_OC1_SetConfig+0x8e>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a14      	ldr	r2, [pc, #80]	; (8009a3c <TIM_OC1_SetConfig+0xdc>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d111      	bne.n	8009a12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	621a      	str	r2, [r3, #32]
}
 8009a2c:	bf00      	nop
 8009a2e:	371c      	adds	r7, #28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	40010000 	.word	0x40010000
 8009a3c:	40010400 	.word	0x40010400

08009a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	f023 0210 	bic.w	r2, r3, #16
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f023 0320 	bic.w	r3, r3, #32
 8009a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a22      	ldr	r2, [pc, #136]	; (8009b24 <TIM_OC2_SetConfig+0xe4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <TIM_OC2_SetConfig+0x68>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a21      	ldr	r2, [pc, #132]	; (8009b28 <TIM_OC2_SetConfig+0xe8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d10d      	bne.n	8009ac4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a17      	ldr	r2, [pc, #92]	; (8009b24 <TIM_OC2_SetConfig+0xe4>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d003      	beq.n	8009ad4 <TIM_OC2_SetConfig+0x94>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a16      	ldr	r2, [pc, #88]	; (8009b28 <TIM_OC2_SetConfig+0xe8>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d113      	bne.n	8009afc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	621a      	str	r2, [r3, #32]
}
 8009b16:	bf00      	nop
 8009b18:	371c      	adds	r7, #28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	40010000 	.word	0x40010000
 8009b28:	40010400 	.word	0x40010400

08009b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f023 0303 	bic.w	r3, r3, #3
 8009b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a21      	ldr	r2, [pc, #132]	; (8009c0c <TIM_OC3_SetConfig+0xe0>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d003      	beq.n	8009b92 <TIM_OC3_SetConfig+0x66>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a20      	ldr	r2, [pc, #128]	; (8009c10 <TIM_OC3_SetConfig+0xe4>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d10d      	bne.n	8009bae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a16      	ldr	r2, [pc, #88]	; (8009c0c <TIM_OC3_SetConfig+0xe0>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d003      	beq.n	8009bbe <TIM_OC3_SetConfig+0x92>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <TIM_OC3_SetConfig+0xe4>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d113      	bne.n	8009be6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	621a      	str	r2, [r3, #32]
}
 8009c00:	bf00      	nop
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	40010000 	.word	0x40010000
 8009c10:	40010400 	.word	0x40010400

08009c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	031b      	lsls	r3, r3, #12
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a12      	ldr	r2, [pc, #72]	; (8009cb8 <TIM_OC4_SetConfig+0xa4>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d003      	beq.n	8009c7c <TIM_OC4_SetConfig+0x68>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a11      	ldr	r2, [pc, #68]	; (8009cbc <TIM_OC4_SetConfig+0xa8>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d109      	bne.n	8009c90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	019b      	lsls	r3, r3, #6
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	621a      	str	r2, [r3, #32]
}
 8009caa:	bf00      	nop
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	40010000 	.word	0x40010000
 8009cbc:	40010400 	.word	0x40010400

08009cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	f023 0201 	bic.w	r2, r3, #1
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f023 030a 	bic.w	r3, r3, #10
 8009cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	621a      	str	r2, [r3, #32]
}
 8009d12:	bf00      	nop
 8009d14:	371c      	adds	r7, #28
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b087      	sub	sp, #28
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	f023 0210 	bic.w	r2, r3, #16
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	031b      	lsls	r3, r3, #12
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	011b      	lsls	r3, r3, #4
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	621a      	str	r2, [r3, #32]
}
 8009d72:	bf00      	nop
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b085      	sub	sp, #20
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	f043 0307 	orr.w	r3, r3, #7
 8009da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	609a      	str	r2, [r3, #8]
}
 8009da8:	bf00      	nop
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	021a      	lsls	r2, r3, #8
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	609a      	str	r2, [r3, #8]
}
 8009de8:	bf00      	nop
 8009dea:	371c      	adds	r7, #28
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d101      	bne.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	e05a      	b.n	8009ec2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a21      	ldr	r2, [pc, #132]	; (8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d022      	beq.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e58:	d01d      	beq.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a1d      	ldr	r2, [pc, #116]	; (8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d018      	beq.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a1b      	ldr	r2, [pc, #108]	; (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d013      	beq.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a1a      	ldr	r2, [pc, #104]	; (8009edc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00e      	beq.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a18      	ldr	r2, [pc, #96]	; (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d009      	beq.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a17      	ldr	r2, [pc, #92]	; (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d004      	beq.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d10c      	bne.n	8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	40010000 	.word	0x40010000
 8009ed4:	40000400 	.word	0x40000400
 8009ed8:	40000800 	.word	0x40000800
 8009edc:	40000c00 	.word	0x40000c00
 8009ee0:	40010400 	.word	0x40010400
 8009ee4:	40014000 	.word	0x40014000
 8009ee8:	40001800 	.word	0x40001800

08009eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e03f      	b.n	8009fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7fa fa2e 	bl	800439c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2224      	movs	r2, #36	; 0x24
 8009f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fddb 	bl	800ab14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	691a      	ldr	r2, [r3, #16]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	695a      	ldr	r2, [r3, #20]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68da      	ldr	r2, [r3, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b08a      	sub	sp, #40	; 0x28
 8009fb2:	af02      	add	r7, sp, #8
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	603b      	str	r3, [r7, #0]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b20      	cmp	r3, #32
 8009fcc:	d17c      	bne.n	800a0c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <HAL_UART_Transmit+0x2c>
 8009fd4:	88fb      	ldrh	r3, [r7, #6]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e075      	b.n	800a0ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d101      	bne.n	8009fec <HAL_UART_Transmit+0x3e>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	e06e      	b.n	800a0ca <HAL_UART_Transmit+0x11c>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2221      	movs	r2, #33	; 0x21
 8009ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a002:	f7fb fca9 	bl	8005958 <HAL_GetTick>
 800a006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	88fa      	ldrh	r2, [r7, #6]
 800a00c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	88fa      	ldrh	r2, [r7, #6]
 800a012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a01c:	d108      	bne.n	800a030 <HAL_UART_Transmit+0x82>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d104      	bne.n	800a030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	e003      	b.n	800a038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a040:	e02a      	b.n	800a098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2200      	movs	r2, #0
 800a04a:	2180      	movs	r1, #128	; 0x80
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fb1f 	bl	800a690 <UART_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e036      	b.n	800a0ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10b      	bne.n	800a07a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	3302      	adds	r3, #2
 800a076:	61bb      	str	r3, [r7, #24]
 800a078:	e007      	b.n	800a08a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	781a      	ldrb	r2, [r3, #0]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	3301      	adds	r3, #1
 800a088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a08e:	b29b      	uxth	r3, r3
 800a090:	3b01      	subs	r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1cf      	bne.n	800a042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2140      	movs	r1, #64	; 0x40
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 faef 	bl	800a690 <UART_WaitOnFlagUntilTimeout>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e006      	b.n	800a0ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e000      	b.n	800a0ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a0c8:	2302      	movs	r3, #2
  }
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	d11d      	bne.n	800a128 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <HAL_UART_Receive_IT+0x26>
 800a0f2:	88fb      	ldrh	r3, [r7, #6]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e016      	b.n	800a12a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a102:	2b01      	cmp	r3, #1
 800a104:	d101      	bne.n	800a10a <HAL_UART_Receive_IT+0x38>
 800a106:	2302      	movs	r3, #2
 800a108:	e00f      	b.n	800a12a <HAL_UART_Receive_IT+0x58>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a118:	88fb      	ldrh	r3, [r7, #6]
 800a11a:	461a      	mov	r2, r3
 800a11c:	68b9      	ldr	r1, [r7, #8]
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 fb24 	bl	800a76c <UART_Start_Receive_IT>
 800a124:	4603      	mov	r3, r0
 800a126:	e000      	b.n	800a12a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a128:	2302      	movs	r3, #2
  }
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b0ba      	sub	sp, #232	; 0xe8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a160:	2300      	movs	r3, #0
 800a162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10f      	bne.n	800a19a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17e:	f003 0320 	and.w	r3, r3, #32
 800a182:	2b00      	cmp	r3, #0
 800a184:	d009      	beq.n	800a19a <HAL_UART_IRQHandler+0x66>
 800a186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a18a:	f003 0320 	and.w	r3, r3, #32
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fc03 	bl	800a99e <UART_Receive_IT>
      return;
 800a198:	e256      	b.n	800a648 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a19a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 80de 	beq.w	800a360 <HAL_UART_IRQHandler+0x22c>
 800a1a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d106      	bne.n	800a1be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80d1 	beq.w	800a360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00b      	beq.n	800a1e2 <HAL_UART_IRQHandler+0xae>
 800a1ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	f043 0201 	orr.w	r2, r3, #1
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e6:	f003 0304 	and.w	r3, r3, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00b      	beq.n	800a206 <HAL_UART_IRQHandler+0xd2>
 800a1ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d005      	beq.n	800a206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	f043 0202 	orr.w	r2, r3, #2
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00b      	beq.n	800a22a <HAL_UART_IRQHandler+0xf6>
 800a212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	f043 0204 	orr.w	r2, r3, #4
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a22e:	f003 0308 	and.w	r3, r3, #8
 800a232:	2b00      	cmp	r3, #0
 800a234:	d011      	beq.n	800a25a <HAL_UART_IRQHandler+0x126>
 800a236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a23a:	f003 0320 	and.w	r3, r3, #32
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d105      	bne.n	800a24e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d005      	beq.n	800a25a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a252:	f043 0208 	orr.w	r2, r3, #8
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 81ed 	beq.w	800a63e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a268:	f003 0320 	and.w	r3, r3, #32
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d008      	beq.n	800a282 <HAL_UART_IRQHandler+0x14e>
 800a270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a274:	f003 0320 	and.w	r3, r3, #32
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fb8e 	bl	800a99e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28c:	2b40      	cmp	r3, #64	; 0x40
 800a28e:	bf0c      	ite	eq
 800a290:	2301      	moveq	r3, #1
 800a292:	2300      	movne	r3, #0
 800a294:	b2db      	uxtb	r3, r3
 800a296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	f003 0308 	and.w	r3, r3, #8
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d103      	bne.n	800a2ae <HAL_UART_IRQHandler+0x17a>
 800a2a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d04f      	beq.n	800a34e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fa96 	bl	800a7e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2be:	2b40      	cmp	r3, #64	; 0x40
 800a2c0:	d141      	bne.n	800a346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3314      	adds	r3, #20
 800a2c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2d0:	e853 3f00 	ldrex	r3, [r3]
 800a2d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3314      	adds	r3, #20
 800a2ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a2fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1d9      	bne.n	800a2c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a312:	2b00      	cmp	r3, #0
 800a314:	d013      	beq.n	800a33e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31a:	4a7d      	ldr	r2, [pc, #500]	; (800a510 <HAL_UART_IRQHandler+0x3dc>)
 800a31c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	4618      	mov	r0, r3
 800a324:	f7fb ffda 	bl	80062dc <HAL_DMA_Abort_IT>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d016      	beq.n	800a35c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a33c:	e00e      	b.n	800a35c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f990 	bl	800a664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a344:	e00a      	b.n	800a35c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f98c 	bl	800a664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a34c:	e006      	b.n	800a35c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f988 	bl	800a664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a35a:	e170      	b.n	800a63e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a35c:	bf00      	nop
    return;
 800a35e:	e16e      	b.n	800a63e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a364:	2b01      	cmp	r3, #1
 800a366:	f040 814a 	bne.w	800a5fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36e:	f003 0310 	and.w	r3, r3, #16
 800a372:	2b00      	cmp	r3, #0
 800a374:	f000 8143 	beq.w	800a5fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a37c:	f003 0310 	and.w	r3, r3, #16
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 813c 	beq.w	800a5fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a386:	2300      	movs	r3, #0
 800a388:	60bb      	str	r3, [r7, #8]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	60bb      	str	r3, [r7, #8]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	60bb      	str	r3, [r7, #8]
 800a39a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a6:	2b40      	cmp	r3, #64	; 0x40
 800a3a8:	f040 80b4 	bne.w	800a514 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8140 	beq.w	800a642 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	f080 8139 	bcs.w	800a642 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3e2:	f000 8088 	beq.w	800a4f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	330c      	adds	r3, #12
 800a3ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3f4:	e853 3f00 	ldrex	r3, [r3]
 800a3f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a3fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	330c      	adds	r3, #12
 800a40e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a41e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a422:	e841 2300 	strex	r3, r2, [r1]
 800a426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a42a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1d9      	bne.n	800a3e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3314      	adds	r3, #20
 800a438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a444:	f023 0301 	bic.w	r3, r3, #1
 800a448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3314      	adds	r3, #20
 800a452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a456:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a45a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a45e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e1      	bne.n	800a432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3314      	adds	r3, #20
 800a474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a478:	e853 3f00 	ldrex	r3, [r3]
 800a47c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a47e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3314      	adds	r3, #20
 800a48e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a492:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a498:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e3      	bne.n	800a46e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	330c      	adds	r3, #12
 800a4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4be:	e853 3f00 	ldrex	r3, [r3]
 800a4c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c6:	f023 0310 	bic.w	r3, r3, #16
 800a4ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	330c      	adds	r3, #12
 800a4d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4d8:	65ba      	str	r2, [r7, #88]	; 0x58
 800a4da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4e0:	e841 2300 	strex	r3, r2, [r1]
 800a4e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e3      	bne.n	800a4b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fb fe83 	bl	80061fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	b29b      	uxth	r3, r3
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f8b6 	bl	800a678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a50c:	e099      	b.n	800a642 <HAL_UART_IRQHandler+0x50e>
 800a50e:	bf00      	nop
 800a510:	0800a8a7 	.word	0x0800a8a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 808b 	beq.w	800a646 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 8086 	beq.w	800a646 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	330c      	adds	r3, #12
 800a540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	330c      	adds	r3, #12
 800a55a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a55e:	647a      	str	r2, [r7, #68]	; 0x44
 800a560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e3      	bne.n	800a53a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3314      	adds	r3, #20
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	623b      	str	r3, [r7, #32]
   return(result);
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	f023 0301 	bic.w	r3, r3, #1
 800a588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3314      	adds	r3, #20
 800a592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a596:	633a      	str	r2, [r7, #48]	; 0x30
 800a598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e3      	bne.n	800a572 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	330c      	adds	r3, #12
 800a5be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	e853 3f00 	ldrex	r3, [r3]
 800a5c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f023 0310 	bic.w	r3, r3, #16
 800a5ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	330c      	adds	r3, #12
 800a5d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a5dc:	61fa      	str	r2, [r7, #28]
 800a5de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	69b9      	ldr	r1, [r7, #24]
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e3      	bne.n	800a5b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f83e 	bl	800a678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5fc:	e023      	b.n	800a646 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a606:	2b00      	cmp	r3, #0
 800a608:	d009      	beq.n	800a61e <HAL_UART_IRQHandler+0x4ea>
 800a60a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f959 	bl	800a8ce <UART_Transmit_IT>
    return;
 800a61c:	e014      	b.n	800a648 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <HAL_UART_IRQHandler+0x514>
 800a62a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d008      	beq.n	800a648 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f999 	bl	800a96e <UART_EndTransmit_IT>
    return;
 800a63c:	e004      	b.n	800a648 <HAL_UART_IRQHandler+0x514>
    return;
 800a63e:	bf00      	nop
 800a640:	e002      	b.n	800a648 <HAL_UART_IRQHandler+0x514>
      return;
 800a642:	bf00      	nop
 800a644:	e000      	b.n	800a648 <HAL_UART_IRQHandler+0x514>
      return;
 800a646:	bf00      	nop
  }
}
 800a648:	37e8      	adds	r7, #232	; 0xe8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop

0800a650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b090      	sub	sp, #64	; 0x40
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	603b      	str	r3, [r7, #0]
 800a69c:	4613      	mov	r3, r2
 800a69e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6a0:	e050      	b.n	800a744 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d04c      	beq.n	800a744 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d007      	beq.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6b0:	f7fb f952 	bl	8005958 <HAL_GetTick>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d241      	bcs.n	800a744 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	330c      	adds	r3, #12
 800a6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	330c      	adds	r3, #12
 800a6de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6e0:	637a      	str	r2, [r7, #52]	; 0x34
 800a6e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6e8:	e841 2300 	strex	r3, r2, [r1]
 800a6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e5      	bne.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3314      	adds	r3, #20
 800a6fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	613b      	str	r3, [r7, #16]
   return(result);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3314      	adds	r3, #20
 800a712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a714:	623a      	str	r2, [r7, #32]
 800a716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	69f9      	ldr	r1, [r7, #28]
 800a71a:	6a3a      	ldr	r2, [r7, #32]
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	61bb      	str	r3, [r7, #24]
   return(result);
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e5      	bne.n	800a6f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2220      	movs	r2, #32
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2220      	movs	r2, #32
 800a734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e00f      	b.n	800a764 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	4013      	ands	r3, r2
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	429a      	cmp	r2, r3
 800a752:	bf0c      	ite	eq
 800a754:	2301      	moveq	r3, #1
 800a756:	2300      	movne	r3, #0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	461a      	mov	r2, r3
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d09f      	beq.n	800a6a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3740      	adds	r7, #64	; 0x40
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4613      	mov	r3, r2
 800a778:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	88fa      	ldrh	r2, [r7, #6]
 800a784:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	88fa      	ldrh	r2, [r7, #6]
 800a78a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2222      	movs	r2, #34	; 0x22
 800a796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	695a      	ldr	r2, [r3, #20]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f042 0201 	orr.w	r2, r2, #1
 800a7c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68da      	ldr	r2, [r3, #12]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f042 0220 	orr.w	r2, r2, #32
 800a7d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b095      	sub	sp, #84	; 0x54
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	330c      	adds	r3, #12
 800a7ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f2:	e853 3f00 	ldrex	r3, [r3]
 800a7f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	330c      	adds	r3, #12
 800a806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a808:	643a      	str	r2, [r7, #64]	; 0x40
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a80e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e5      	bne.n	800a7e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3314      	adds	r3, #20
 800a822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f023 0301 	bic.w	r3, r3, #1
 800a832:	64bb      	str	r3, [r7, #72]	; 0x48
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3314      	adds	r3, #20
 800a83a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a83c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a83e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e5      	bne.n	800a81c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a854:	2b01      	cmp	r3, #1
 800a856:	d119      	bne.n	800a88c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	330c      	adds	r3, #12
 800a85e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	e853 3f00 	ldrex	r3, [r3]
 800a866:	60bb      	str	r3, [r7, #8]
   return(result);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	f023 0310 	bic.w	r3, r3, #16
 800a86e:	647b      	str	r3, [r7, #68]	; 0x44
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	330c      	adds	r3, #12
 800a876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a878:	61ba      	str	r2, [r7, #24]
 800a87a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87c:	6979      	ldr	r1, [r7, #20]
 800a87e:	69ba      	ldr	r2, [r7, #24]
 800a880:	e841 2300 	strex	r3, r2, [r1]
 800a884:	613b      	str	r3, [r7, #16]
   return(result);
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1e5      	bne.n	800a858 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2220      	movs	r2, #32
 800a890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a89a:	bf00      	nop
 800a89c:	3754      	adds	r7, #84	; 0x54
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f7ff fecf 	bl	800a664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b21      	cmp	r3, #33	; 0x21
 800a8e0:	d13e      	bne.n	800a960 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ea:	d114      	bne.n	800a916 <UART_Transmit_IT+0x48>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d110      	bne.n	800a916 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a908:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	1c9a      	adds	r2, r3, #2
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	621a      	str	r2, [r3, #32]
 800a914:	e008      	b.n	800a928 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	1c59      	adds	r1, r3, #1
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	6211      	str	r1, [r2, #32]
 800a920:	781a      	ldrb	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3b01      	subs	r3, #1
 800a930:	b29b      	uxth	r3, r3
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	4619      	mov	r1, r3
 800a936:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10f      	bne.n	800a95c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a94a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68da      	ldr	r2, [r3, #12]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a95a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	e000      	b.n	800a962 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a960:	2302      	movs	r3, #2
  }
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68da      	ldr	r2, [r3, #12]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a984:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2220      	movs	r2, #32
 800a98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fe5e 	bl	800a650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b08c      	sub	sp, #48	; 0x30
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b22      	cmp	r3, #34	; 0x22
 800a9b0:	f040 80ab 	bne.w	800ab0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9bc:	d117      	bne.n	800a9ee <UART_Receive_IT+0x50>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d113      	bne.n	800a9ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e6:	1c9a      	adds	r2, r3, #2
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	629a      	str	r2, [r3, #40]	; 0x28
 800a9ec:	e026      	b.n	800aa3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa00:	d007      	beq.n	800aa12 <UART_Receive_IT+0x74>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10a      	bne.n	800aa20 <UART_Receive_IT+0x82>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d106      	bne.n	800aa20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	e008      	b.n	800aa32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	3b01      	subs	r3, #1
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d15a      	bne.n	800ab06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68da      	ldr	r2, [r3, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f022 0220 	bic.w	r2, r2, #32
 800aa5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68da      	ldr	r2, [r3, #12]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	695a      	ldr	r2, [r3, #20]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0201 	bic.w	r2, r2, #1
 800aa7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2220      	movs	r2, #32
 800aa84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d135      	bne.n	800aafc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	330c      	adds	r3, #12
 800aa9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	e853 3f00 	ldrex	r3, [r3]
 800aaa4:	613b      	str	r3, [r7, #16]
   return(result);
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	f023 0310 	bic.w	r3, r3, #16
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	330c      	adds	r3, #12
 800aab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab6:	623a      	str	r2, [r7, #32]
 800aab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	69f9      	ldr	r1, [r7, #28]
 800aabc:	6a3a      	ldr	r2, [r7, #32]
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e5      	bne.n	800aa96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0310 	and.w	r3, r3, #16
 800aad4:	2b10      	cmp	r3, #16
 800aad6:	d10a      	bne.n	800aaee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aad8:	2300      	movs	r3, #0
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff fdbf 	bl	800a678 <HAL_UARTEx_RxEventCallback>
 800aafa:	e002      	b.n	800ab02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7fa fe29 	bl	8005754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	e002      	b.n	800ab0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	e000      	b.n	800ab0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ab0a:	2302      	movs	r3, #2
  }
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3730      	adds	r7, #48	; 0x30
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab18:	b09f      	sub	sp, #124	; 0x7c
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2a:	68d9      	ldr	r1, [r3, #12]
 800ab2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	ea40 0301 	orr.w	r3, r0, r1
 800ab34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	431a      	orrs	r2, r3
 800ab46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ab4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ab58:	f021 010c 	bic.w	r1, r1, #12
 800ab5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab62:	430b      	orrs	r3, r1
 800ab64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab72:	6999      	ldr	r1, [r3, #24]
 800ab74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	ea40 0301 	orr.w	r3, r0, r1
 800ab7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	4bc5      	ldr	r3, [pc, #788]	; (800ae98 <UART_SetConfig+0x384>)
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d004      	beq.n	800ab92 <UART_SetConfig+0x7e>
 800ab88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	4bc3      	ldr	r3, [pc, #780]	; (800ae9c <UART_SetConfig+0x388>)
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d103      	bne.n	800ab9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab92:	f7fd fc09 	bl	80083a8 <HAL_RCC_GetPCLK2Freq>
 800ab96:	6778      	str	r0, [r7, #116]	; 0x74
 800ab98:	e002      	b.n	800aba0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab9a:	f7fd fbf1 	bl	8008380 <HAL_RCC_GetPCLK1Freq>
 800ab9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aba8:	f040 80b6 	bne.w	800ad18 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800abac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abae:	461c      	mov	r4, r3
 800abb0:	f04f 0500 	mov.w	r5, #0
 800abb4:	4622      	mov	r2, r4
 800abb6:	462b      	mov	r3, r5
 800abb8:	1891      	adds	r1, r2, r2
 800abba:	6439      	str	r1, [r7, #64]	; 0x40
 800abbc:	415b      	adcs	r3, r3
 800abbe:	647b      	str	r3, [r7, #68]	; 0x44
 800abc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800abc4:	1912      	adds	r2, r2, r4
 800abc6:	eb45 0303 	adc.w	r3, r5, r3
 800abca:	f04f 0000 	mov.w	r0, #0
 800abce:	f04f 0100 	mov.w	r1, #0
 800abd2:	00d9      	lsls	r1, r3, #3
 800abd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800abd8:	00d0      	lsls	r0, r2, #3
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	1911      	adds	r1, r2, r4
 800abe0:	6639      	str	r1, [r7, #96]	; 0x60
 800abe2:	416b      	adcs	r3, r5
 800abe4:	667b      	str	r3, [r7, #100]	; 0x64
 800abe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	461a      	mov	r2, r3
 800abec:	f04f 0300 	mov.w	r3, #0
 800abf0:	1891      	adds	r1, r2, r2
 800abf2:	63b9      	str	r1, [r7, #56]	; 0x38
 800abf4:	415b      	adcs	r3, r3
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800abfc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ac00:	f7f6 f83a 	bl	8000c78 <__aeabi_uldivmod>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4ba5      	ldr	r3, [pc, #660]	; (800aea0 <UART_SetConfig+0x38c>)
 800ac0a:	fba3 2302 	umull	r2, r3, r3, r2
 800ac0e:	095b      	lsrs	r3, r3, #5
 800ac10:	011e      	lsls	r6, r3, #4
 800ac12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac14:	461c      	mov	r4, r3
 800ac16:	f04f 0500 	mov.w	r5, #0
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	462b      	mov	r3, r5
 800ac1e:	1891      	adds	r1, r2, r2
 800ac20:	6339      	str	r1, [r7, #48]	; 0x30
 800ac22:	415b      	adcs	r3, r3
 800ac24:	637b      	str	r3, [r7, #52]	; 0x34
 800ac26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ac2a:	1912      	adds	r2, r2, r4
 800ac2c:	eb45 0303 	adc.w	r3, r5, r3
 800ac30:	f04f 0000 	mov.w	r0, #0
 800ac34:	f04f 0100 	mov.w	r1, #0
 800ac38:	00d9      	lsls	r1, r3, #3
 800ac3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac3e:	00d0      	lsls	r0, r2, #3
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	1911      	adds	r1, r2, r4
 800ac46:	65b9      	str	r1, [r7, #88]	; 0x58
 800ac48:	416b      	adcs	r3, r5
 800ac4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	461a      	mov	r2, r3
 800ac52:	f04f 0300 	mov.w	r3, #0
 800ac56:	1891      	adds	r1, r2, r2
 800ac58:	62b9      	str	r1, [r7, #40]	; 0x28
 800ac5a:	415b      	adcs	r3, r3
 800ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ac62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ac66:	f7f6 f807 	bl	8000c78 <__aeabi_uldivmod>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4b8c      	ldr	r3, [pc, #560]	; (800aea0 <UART_SetConfig+0x38c>)
 800ac70:	fba3 1302 	umull	r1, r3, r3, r2
 800ac74:	095b      	lsrs	r3, r3, #5
 800ac76:	2164      	movs	r1, #100	; 0x64
 800ac78:	fb01 f303 	mul.w	r3, r1, r3
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	3332      	adds	r3, #50	; 0x32
 800ac82:	4a87      	ldr	r2, [pc, #540]	; (800aea0 <UART_SetConfig+0x38c>)
 800ac84:	fba2 2303 	umull	r2, r3, r2, r3
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac90:	441e      	add	r6, r3
 800ac92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac94:	4618      	mov	r0, r3
 800ac96:	f04f 0100 	mov.w	r1, #0
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	1894      	adds	r4, r2, r2
 800aca0:	623c      	str	r4, [r7, #32]
 800aca2:	415b      	adcs	r3, r3
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
 800aca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800acaa:	1812      	adds	r2, r2, r0
 800acac:	eb41 0303 	adc.w	r3, r1, r3
 800acb0:	f04f 0400 	mov.w	r4, #0
 800acb4:	f04f 0500 	mov.w	r5, #0
 800acb8:	00dd      	lsls	r5, r3, #3
 800acba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800acbe:	00d4      	lsls	r4, r2, #3
 800acc0:	4622      	mov	r2, r4
 800acc2:	462b      	mov	r3, r5
 800acc4:	1814      	adds	r4, r2, r0
 800acc6:	653c      	str	r4, [r7, #80]	; 0x50
 800acc8:	414b      	adcs	r3, r1
 800acca:	657b      	str	r3, [r7, #84]	; 0x54
 800accc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	461a      	mov	r2, r3
 800acd2:	f04f 0300 	mov.w	r3, #0
 800acd6:	1891      	adds	r1, r2, r2
 800acd8:	61b9      	str	r1, [r7, #24]
 800acda:	415b      	adcs	r3, r3
 800acdc:	61fb      	str	r3, [r7, #28]
 800acde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ace2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ace6:	f7f5 ffc7 	bl	8000c78 <__aeabi_uldivmod>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	4b6c      	ldr	r3, [pc, #432]	; (800aea0 <UART_SetConfig+0x38c>)
 800acf0:	fba3 1302 	umull	r1, r3, r3, r2
 800acf4:	095b      	lsrs	r3, r3, #5
 800acf6:	2164      	movs	r1, #100	; 0x64
 800acf8:	fb01 f303 	mul.w	r3, r1, r3
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	3332      	adds	r3, #50	; 0x32
 800ad02:	4a67      	ldr	r2, [pc, #412]	; (800aea0 <UART_SetConfig+0x38c>)
 800ad04:	fba2 2303 	umull	r2, r3, r2, r3
 800ad08:	095b      	lsrs	r3, r3, #5
 800ad0a:	f003 0207 	and.w	r2, r3, #7
 800ad0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4432      	add	r2, r6
 800ad14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad16:	e0b9      	b.n	800ae8c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad1a:	461c      	mov	r4, r3
 800ad1c:	f04f 0500 	mov.w	r5, #0
 800ad20:	4622      	mov	r2, r4
 800ad22:	462b      	mov	r3, r5
 800ad24:	1891      	adds	r1, r2, r2
 800ad26:	6139      	str	r1, [r7, #16]
 800ad28:	415b      	adcs	r3, r3
 800ad2a:	617b      	str	r3, [r7, #20]
 800ad2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad30:	1912      	adds	r2, r2, r4
 800ad32:	eb45 0303 	adc.w	r3, r5, r3
 800ad36:	f04f 0000 	mov.w	r0, #0
 800ad3a:	f04f 0100 	mov.w	r1, #0
 800ad3e:	00d9      	lsls	r1, r3, #3
 800ad40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad44:	00d0      	lsls	r0, r2, #3
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	eb12 0804 	adds.w	r8, r2, r4
 800ad4e:	eb43 0905 	adc.w	r9, r3, r5
 800ad52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f04f 0100 	mov.w	r1, #0
 800ad5c:	f04f 0200 	mov.w	r2, #0
 800ad60:	f04f 0300 	mov.w	r3, #0
 800ad64:	008b      	lsls	r3, r1, #2
 800ad66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ad6a:	0082      	lsls	r2, r0, #2
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4649      	mov	r1, r9
 800ad70:	f7f5 ff82 	bl	8000c78 <__aeabi_uldivmod>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4b49      	ldr	r3, [pc, #292]	; (800aea0 <UART_SetConfig+0x38c>)
 800ad7a:	fba3 2302 	umull	r2, r3, r3, r2
 800ad7e:	095b      	lsrs	r3, r3, #5
 800ad80:	011e      	lsls	r6, r3, #4
 800ad82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad84:	4618      	mov	r0, r3
 800ad86:	f04f 0100 	mov.w	r1, #0
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	1894      	adds	r4, r2, r2
 800ad90:	60bc      	str	r4, [r7, #8]
 800ad92:	415b      	adcs	r3, r3
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad9a:	1812      	adds	r2, r2, r0
 800ad9c:	eb41 0303 	adc.w	r3, r1, r3
 800ada0:	f04f 0400 	mov.w	r4, #0
 800ada4:	f04f 0500 	mov.w	r5, #0
 800ada8:	00dd      	lsls	r5, r3, #3
 800adaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800adae:	00d4      	lsls	r4, r2, #3
 800adb0:	4622      	mov	r2, r4
 800adb2:	462b      	mov	r3, r5
 800adb4:	1814      	adds	r4, r2, r0
 800adb6:	64bc      	str	r4, [r7, #72]	; 0x48
 800adb8:	414b      	adcs	r3, r1
 800adba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f04f 0100 	mov.w	r1, #0
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	008b      	lsls	r3, r1, #2
 800add0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800add4:	0082      	lsls	r2, r0, #2
 800add6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800adda:	f7f5 ff4d 	bl	8000c78 <__aeabi_uldivmod>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4b2f      	ldr	r3, [pc, #188]	; (800aea0 <UART_SetConfig+0x38c>)
 800ade4:	fba3 1302 	umull	r1, r3, r3, r2
 800ade8:	095b      	lsrs	r3, r3, #5
 800adea:	2164      	movs	r1, #100	; 0x64
 800adec:	fb01 f303 	mul.w	r3, r1, r3
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	011b      	lsls	r3, r3, #4
 800adf4:	3332      	adds	r3, #50	; 0x32
 800adf6:	4a2a      	ldr	r2, [pc, #168]	; (800aea0 <UART_SetConfig+0x38c>)
 800adf8:	fba2 2303 	umull	r2, r3, r2, r3
 800adfc:	095b      	lsrs	r3, r3, #5
 800adfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae02:	441e      	add	r6, r3
 800ae04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae06:	4618      	mov	r0, r3
 800ae08:	f04f 0100 	mov.w	r1, #0
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	1894      	adds	r4, r2, r2
 800ae12:	603c      	str	r4, [r7, #0]
 800ae14:	415b      	adcs	r3, r3
 800ae16:	607b      	str	r3, [r7, #4]
 800ae18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae1c:	1812      	adds	r2, r2, r0
 800ae1e:	eb41 0303 	adc.w	r3, r1, r3
 800ae22:	f04f 0400 	mov.w	r4, #0
 800ae26:	f04f 0500 	mov.w	r5, #0
 800ae2a:	00dd      	lsls	r5, r3, #3
 800ae2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ae30:	00d4      	lsls	r4, r2, #3
 800ae32:	4622      	mov	r2, r4
 800ae34:	462b      	mov	r3, r5
 800ae36:	eb12 0a00 	adds.w	sl, r2, r0
 800ae3a:	eb43 0b01 	adc.w	fp, r3, r1
 800ae3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f04f 0100 	mov.w	r1, #0
 800ae48:	f04f 0200 	mov.w	r2, #0
 800ae4c:	f04f 0300 	mov.w	r3, #0
 800ae50:	008b      	lsls	r3, r1, #2
 800ae52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ae56:	0082      	lsls	r2, r0, #2
 800ae58:	4650      	mov	r0, sl
 800ae5a:	4659      	mov	r1, fp
 800ae5c:	f7f5 ff0c 	bl	8000c78 <__aeabi_uldivmod>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4b0e      	ldr	r3, [pc, #56]	; (800aea0 <UART_SetConfig+0x38c>)
 800ae66:	fba3 1302 	umull	r1, r3, r3, r2
 800ae6a:	095b      	lsrs	r3, r3, #5
 800ae6c:	2164      	movs	r1, #100	; 0x64
 800ae6e:	fb01 f303 	mul.w	r3, r1, r3
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	011b      	lsls	r3, r3, #4
 800ae76:	3332      	adds	r3, #50	; 0x32
 800ae78:	4a09      	ldr	r2, [pc, #36]	; (800aea0 <UART_SetConfig+0x38c>)
 800ae7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7e:	095b      	lsrs	r3, r3, #5
 800ae80:	f003 020f 	and.w	r2, r3, #15
 800ae84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4432      	add	r2, r6
 800ae8a:	609a      	str	r2, [r3, #8]
}
 800ae8c:	bf00      	nop
 800ae8e:	377c      	adds	r7, #124	; 0x7c
 800ae90:	46bd      	mov	sp, r7
 800ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae96:	bf00      	nop
 800ae98:	40011000 	.word	0x40011000
 800ae9c:	40011400 	.word	0x40011400
 800aea0:	51eb851f 	.word	0x51eb851f

0800aea4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aebc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	4b20      	ldr	r3, [pc, #128]	; (800af44 <FSMC_NORSRAM_Init+0xa0>)
 800aec2:	4013      	ands	r3, r2
 800aec4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aece:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800aed4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800aeda:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800aee0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800aee6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800aeec:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800aef2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800aef8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800aefe:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800af04:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800af0a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800af10:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4313      	orrs	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	2b08      	cmp	r3, #8
 800af1e:	d103      	bne.n	800af28 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af26:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	fff00080 	.word	0xfff00080

0800af48 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800af54:	2300      	movs	r3, #0
 800af56:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	1c5a      	adds	r2, r3, #1
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af62:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800af6a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800af76:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800af7e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800af86:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800af90:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	3b02      	subs	r3, #2
 800af98:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800af9a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800afa0:	4313      	orrs	r3, r2
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6979      	ldr	r1, [r7, #20]
 800afb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
	...

0800afc4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afdc:	d122      	bne.n	800b024 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	4b15      	ldr	r3, [pc, #84]	; (800b040 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800afec:	4013      	ands	r3, r2
 800afee:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800affa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b002:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800b00a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b010:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	4313      	orrs	r3, r2
 800b016:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6979      	ldr	r1, [r7, #20]
 800b01e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b022:	e005      	b.n	800b030 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b02c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	cff00000 	.word	0xcff00000

0800b044 <__errno>:
 800b044:	4b01      	ldr	r3, [pc, #4]	; (800b04c <__errno+0x8>)
 800b046:	6818      	ldr	r0, [r3, #0]
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	20000068 	.word	0x20000068

0800b050 <__libc_init_array>:
 800b050:	b570      	push	{r4, r5, r6, lr}
 800b052:	4d0d      	ldr	r5, [pc, #52]	; (800b088 <__libc_init_array+0x38>)
 800b054:	4c0d      	ldr	r4, [pc, #52]	; (800b08c <__libc_init_array+0x3c>)
 800b056:	1b64      	subs	r4, r4, r5
 800b058:	10a4      	asrs	r4, r4, #2
 800b05a:	2600      	movs	r6, #0
 800b05c:	42a6      	cmp	r6, r4
 800b05e:	d109      	bne.n	800b074 <__libc_init_array+0x24>
 800b060:	4d0b      	ldr	r5, [pc, #44]	; (800b090 <__libc_init_array+0x40>)
 800b062:	4c0c      	ldr	r4, [pc, #48]	; (800b094 <__libc_init_array+0x44>)
 800b064:	f002 f866 	bl	800d134 <_init>
 800b068:	1b64      	subs	r4, r4, r5
 800b06a:	10a4      	asrs	r4, r4, #2
 800b06c:	2600      	movs	r6, #0
 800b06e:	42a6      	cmp	r6, r4
 800b070:	d105      	bne.n	800b07e <__libc_init_array+0x2e>
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	f855 3b04 	ldr.w	r3, [r5], #4
 800b078:	4798      	blx	r3
 800b07a:	3601      	adds	r6, #1
 800b07c:	e7ee      	b.n	800b05c <__libc_init_array+0xc>
 800b07e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b082:	4798      	blx	r3
 800b084:	3601      	adds	r6, #1
 800b086:	e7f2      	b.n	800b06e <__libc_init_array+0x1e>
 800b088:	080f1400 	.word	0x080f1400
 800b08c:	080f1400 	.word	0x080f1400
 800b090:	080f1400 	.word	0x080f1400
 800b094:	080f1404 	.word	0x080f1404

0800b098 <__itoa>:
 800b098:	1e93      	subs	r3, r2, #2
 800b09a:	2b22      	cmp	r3, #34	; 0x22
 800b09c:	b510      	push	{r4, lr}
 800b09e:	460c      	mov	r4, r1
 800b0a0:	d904      	bls.n	800b0ac <__itoa+0x14>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	700b      	strb	r3, [r1, #0]
 800b0a6:	461c      	mov	r4, r3
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	bd10      	pop	{r4, pc}
 800b0ac:	2a0a      	cmp	r2, #10
 800b0ae:	d109      	bne.n	800b0c4 <__itoa+0x2c>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	da07      	bge.n	800b0c4 <__itoa+0x2c>
 800b0b4:	232d      	movs	r3, #45	; 0x2d
 800b0b6:	700b      	strb	r3, [r1, #0]
 800b0b8:	4240      	negs	r0, r0
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	4421      	add	r1, r4
 800b0be:	f000 f84d 	bl	800b15c <__utoa>
 800b0c2:	e7f1      	b.n	800b0a8 <__itoa+0x10>
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	e7f9      	b.n	800b0bc <__itoa+0x24>

0800b0c8 <itoa>:
 800b0c8:	f7ff bfe6 	b.w	800b098 <__itoa>

0800b0cc <memset>:
 800b0cc:	4402      	add	r2, r0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d100      	bne.n	800b0d6 <memset+0xa>
 800b0d4:	4770      	bx	lr
 800b0d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0da:	e7f9      	b.n	800b0d0 <memset+0x4>

0800b0dc <rand>:
 800b0dc:	4b17      	ldr	r3, [pc, #92]	; (800b13c <rand+0x60>)
 800b0de:	b510      	push	{r4, lr}
 800b0e0:	681c      	ldr	r4, [r3, #0]
 800b0e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b0e4:	b9b3      	cbnz	r3, 800b114 <rand+0x38>
 800b0e6:	2018      	movs	r0, #24
 800b0e8:	f000 f8aa 	bl	800b240 <malloc>
 800b0ec:	63a0      	str	r0, [r4, #56]	; 0x38
 800b0ee:	b928      	cbnz	r0, 800b0fc <rand+0x20>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	4b13      	ldr	r3, [pc, #76]	; (800b140 <rand+0x64>)
 800b0f4:	4813      	ldr	r0, [pc, #76]	; (800b144 <rand+0x68>)
 800b0f6:	214e      	movs	r1, #78	; 0x4e
 800b0f8:	f000 f872 	bl	800b1e0 <__assert_func>
 800b0fc:	4a12      	ldr	r2, [pc, #72]	; (800b148 <rand+0x6c>)
 800b0fe:	4b13      	ldr	r3, [pc, #76]	; (800b14c <rand+0x70>)
 800b100:	e9c0 2300 	strd	r2, r3, [r0]
 800b104:	4b12      	ldr	r3, [pc, #72]	; (800b150 <rand+0x74>)
 800b106:	6083      	str	r3, [r0, #8]
 800b108:	230b      	movs	r3, #11
 800b10a:	8183      	strh	r3, [r0, #12]
 800b10c:	2201      	movs	r2, #1
 800b10e:	2300      	movs	r3, #0
 800b110:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b114:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b116:	480f      	ldr	r0, [pc, #60]	; (800b154 <rand+0x78>)
 800b118:	690a      	ldr	r2, [r1, #16]
 800b11a:	694b      	ldr	r3, [r1, #20]
 800b11c:	4c0e      	ldr	r4, [pc, #56]	; (800b158 <rand+0x7c>)
 800b11e:	4350      	muls	r0, r2
 800b120:	fb04 0003 	mla	r0, r4, r3, r0
 800b124:	fba2 3404 	umull	r3, r4, r2, r4
 800b128:	1c5a      	adds	r2, r3, #1
 800b12a:	4404      	add	r4, r0
 800b12c:	f144 0000 	adc.w	r0, r4, #0
 800b130:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800b134:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	bf00      	nop
 800b13c:	20000068 	.word	0x20000068
 800b140:	080f124c 	.word	0x080f124c
 800b144:	080f1263 	.word	0x080f1263
 800b148:	abcd330e 	.word	0xabcd330e
 800b14c:	e66d1234 	.word	0xe66d1234
 800b150:	0005deec 	.word	0x0005deec
 800b154:	5851f42d 	.word	0x5851f42d
 800b158:	4c957f2d 	.word	0x4c957f2d

0800b15c <__utoa>:
 800b15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b15e:	4c1f      	ldr	r4, [pc, #124]	; (800b1dc <__utoa+0x80>)
 800b160:	b08b      	sub	sp, #44	; 0x2c
 800b162:	4605      	mov	r5, r0
 800b164:	460b      	mov	r3, r1
 800b166:	466e      	mov	r6, sp
 800b168:	f104 0c20 	add.w	ip, r4, #32
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	6861      	ldr	r1, [r4, #4]
 800b170:	4637      	mov	r7, r6
 800b172:	c703      	stmia	r7!, {r0, r1}
 800b174:	3408      	adds	r4, #8
 800b176:	4564      	cmp	r4, ip
 800b178:	463e      	mov	r6, r7
 800b17a:	d1f7      	bne.n	800b16c <__utoa+0x10>
 800b17c:	7921      	ldrb	r1, [r4, #4]
 800b17e:	7139      	strb	r1, [r7, #4]
 800b180:	1e91      	subs	r1, r2, #2
 800b182:	6820      	ldr	r0, [r4, #0]
 800b184:	6038      	str	r0, [r7, #0]
 800b186:	2922      	cmp	r1, #34	; 0x22
 800b188:	f04f 0100 	mov.w	r1, #0
 800b18c:	d904      	bls.n	800b198 <__utoa+0x3c>
 800b18e:	7019      	strb	r1, [r3, #0]
 800b190:	460b      	mov	r3, r1
 800b192:	4618      	mov	r0, r3
 800b194:	b00b      	add	sp, #44	; 0x2c
 800b196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b198:	1e58      	subs	r0, r3, #1
 800b19a:	4684      	mov	ip, r0
 800b19c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b1a0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b1a4:	fb02 5617 	mls	r6, r2, r7, r5
 800b1a8:	4476      	add	r6, lr
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b1b0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b1b4:	462e      	mov	r6, r5
 800b1b6:	42b2      	cmp	r2, r6
 800b1b8:	f101 0101 	add.w	r1, r1, #1
 800b1bc:	463d      	mov	r5, r7
 800b1be:	d9ed      	bls.n	800b19c <__utoa+0x40>
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	545a      	strb	r2, [r3, r1]
 800b1c4:	1919      	adds	r1, r3, r4
 800b1c6:	1aa5      	subs	r5, r4, r2
 800b1c8:	42aa      	cmp	r2, r5
 800b1ca:	dae2      	bge.n	800b192 <__utoa+0x36>
 800b1cc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b1d0:	780e      	ldrb	r6, [r1, #0]
 800b1d2:	7006      	strb	r6, [r0, #0]
 800b1d4:	3201      	adds	r2, #1
 800b1d6:	f801 5901 	strb.w	r5, [r1], #-1
 800b1da:	e7f4      	b.n	800b1c6 <__utoa+0x6a>
 800b1dc:	080f12c2 	.word	0x080f12c2

0800b1e0 <__assert_func>:
 800b1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1e2:	4614      	mov	r4, r2
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	4b09      	ldr	r3, [pc, #36]	; (800b20c <__assert_func+0x2c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	68d8      	ldr	r0, [r3, #12]
 800b1ee:	b14c      	cbz	r4, 800b204 <__assert_func+0x24>
 800b1f0:	4b07      	ldr	r3, [pc, #28]	; (800b210 <__assert_func+0x30>)
 800b1f2:	9100      	str	r1, [sp, #0]
 800b1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1f8:	4906      	ldr	r1, [pc, #24]	; (800b214 <__assert_func+0x34>)
 800b1fa:	462b      	mov	r3, r5
 800b1fc:	f000 f80e 	bl	800b21c <fiprintf>
 800b200:	f000 fc8e 	bl	800bb20 <abort>
 800b204:	4b04      	ldr	r3, [pc, #16]	; (800b218 <__assert_func+0x38>)
 800b206:	461c      	mov	r4, r3
 800b208:	e7f3      	b.n	800b1f2 <__assert_func+0x12>
 800b20a:	bf00      	nop
 800b20c:	20000068 	.word	0x20000068
 800b210:	080f12e7 	.word	0x080f12e7
 800b214:	080f12f4 	.word	0x080f12f4
 800b218:	080f1322 	.word	0x080f1322

0800b21c <fiprintf>:
 800b21c:	b40e      	push	{r1, r2, r3}
 800b21e:	b503      	push	{r0, r1, lr}
 800b220:	4601      	mov	r1, r0
 800b222:	ab03      	add	r3, sp, #12
 800b224:	4805      	ldr	r0, [pc, #20]	; (800b23c <fiprintf+0x20>)
 800b226:	f853 2b04 	ldr.w	r2, [r3], #4
 800b22a:	6800      	ldr	r0, [r0, #0]
 800b22c:	9301      	str	r3, [sp, #4]
 800b22e:	f000 f8e3 	bl	800b3f8 <_vfiprintf_r>
 800b232:	b002      	add	sp, #8
 800b234:	f85d eb04 	ldr.w	lr, [sp], #4
 800b238:	b003      	add	sp, #12
 800b23a:	4770      	bx	lr
 800b23c:	20000068 	.word	0x20000068

0800b240 <malloc>:
 800b240:	4b02      	ldr	r3, [pc, #8]	; (800b24c <malloc+0xc>)
 800b242:	4601      	mov	r1, r0
 800b244:	6818      	ldr	r0, [r3, #0]
 800b246:	f000 b853 	b.w	800b2f0 <_malloc_r>
 800b24a:	bf00      	nop
 800b24c:	20000068 	.word	0x20000068

0800b250 <_free_r>:
 800b250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b252:	2900      	cmp	r1, #0
 800b254:	d048      	beq.n	800b2e8 <_free_r+0x98>
 800b256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25a:	9001      	str	r0, [sp, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f1a1 0404 	sub.w	r4, r1, #4
 800b262:	bfb8      	it	lt
 800b264:	18e4      	addlt	r4, r4, r3
 800b266:	f000 fe81 	bl	800bf6c <__malloc_lock>
 800b26a:	4a20      	ldr	r2, [pc, #128]	; (800b2ec <_free_r+0x9c>)
 800b26c:	9801      	ldr	r0, [sp, #4]
 800b26e:	6813      	ldr	r3, [r2, #0]
 800b270:	4615      	mov	r5, r2
 800b272:	b933      	cbnz	r3, 800b282 <_free_r+0x32>
 800b274:	6063      	str	r3, [r4, #4]
 800b276:	6014      	str	r4, [r2, #0]
 800b278:	b003      	add	sp, #12
 800b27a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b27e:	f000 be7b 	b.w	800bf78 <__malloc_unlock>
 800b282:	42a3      	cmp	r3, r4
 800b284:	d90b      	bls.n	800b29e <_free_r+0x4e>
 800b286:	6821      	ldr	r1, [r4, #0]
 800b288:	1862      	adds	r2, r4, r1
 800b28a:	4293      	cmp	r3, r2
 800b28c:	bf04      	itt	eq
 800b28e:	681a      	ldreq	r2, [r3, #0]
 800b290:	685b      	ldreq	r3, [r3, #4]
 800b292:	6063      	str	r3, [r4, #4]
 800b294:	bf04      	itt	eq
 800b296:	1852      	addeq	r2, r2, r1
 800b298:	6022      	streq	r2, [r4, #0]
 800b29a:	602c      	str	r4, [r5, #0]
 800b29c:	e7ec      	b.n	800b278 <_free_r+0x28>
 800b29e:	461a      	mov	r2, r3
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	b10b      	cbz	r3, 800b2a8 <_free_r+0x58>
 800b2a4:	42a3      	cmp	r3, r4
 800b2a6:	d9fa      	bls.n	800b29e <_free_r+0x4e>
 800b2a8:	6811      	ldr	r1, [r2, #0]
 800b2aa:	1855      	adds	r5, r2, r1
 800b2ac:	42a5      	cmp	r5, r4
 800b2ae:	d10b      	bne.n	800b2c8 <_free_r+0x78>
 800b2b0:	6824      	ldr	r4, [r4, #0]
 800b2b2:	4421      	add	r1, r4
 800b2b4:	1854      	adds	r4, r2, r1
 800b2b6:	42a3      	cmp	r3, r4
 800b2b8:	6011      	str	r1, [r2, #0]
 800b2ba:	d1dd      	bne.n	800b278 <_free_r+0x28>
 800b2bc:	681c      	ldr	r4, [r3, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	6053      	str	r3, [r2, #4]
 800b2c2:	4421      	add	r1, r4
 800b2c4:	6011      	str	r1, [r2, #0]
 800b2c6:	e7d7      	b.n	800b278 <_free_r+0x28>
 800b2c8:	d902      	bls.n	800b2d0 <_free_r+0x80>
 800b2ca:	230c      	movs	r3, #12
 800b2cc:	6003      	str	r3, [r0, #0]
 800b2ce:	e7d3      	b.n	800b278 <_free_r+0x28>
 800b2d0:	6825      	ldr	r5, [r4, #0]
 800b2d2:	1961      	adds	r1, r4, r5
 800b2d4:	428b      	cmp	r3, r1
 800b2d6:	bf04      	itt	eq
 800b2d8:	6819      	ldreq	r1, [r3, #0]
 800b2da:	685b      	ldreq	r3, [r3, #4]
 800b2dc:	6063      	str	r3, [r4, #4]
 800b2de:	bf04      	itt	eq
 800b2e0:	1949      	addeq	r1, r1, r5
 800b2e2:	6021      	streq	r1, [r4, #0]
 800b2e4:	6054      	str	r4, [r2, #4]
 800b2e6:	e7c7      	b.n	800b278 <_free_r+0x28>
 800b2e8:	b003      	add	sp, #12
 800b2ea:	bd30      	pop	{r4, r5, pc}
 800b2ec:	20000130 	.word	0x20000130

0800b2f0 <_malloc_r>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	1ccd      	adds	r5, r1, #3
 800b2f4:	f025 0503 	bic.w	r5, r5, #3
 800b2f8:	3508      	adds	r5, #8
 800b2fa:	2d0c      	cmp	r5, #12
 800b2fc:	bf38      	it	cc
 800b2fe:	250c      	movcc	r5, #12
 800b300:	2d00      	cmp	r5, #0
 800b302:	4606      	mov	r6, r0
 800b304:	db01      	blt.n	800b30a <_malloc_r+0x1a>
 800b306:	42a9      	cmp	r1, r5
 800b308:	d903      	bls.n	800b312 <_malloc_r+0x22>
 800b30a:	230c      	movs	r3, #12
 800b30c:	6033      	str	r3, [r6, #0]
 800b30e:	2000      	movs	r0, #0
 800b310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b312:	f000 fe2b 	bl	800bf6c <__malloc_lock>
 800b316:	4921      	ldr	r1, [pc, #132]	; (800b39c <_malloc_r+0xac>)
 800b318:	680a      	ldr	r2, [r1, #0]
 800b31a:	4614      	mov	r4, r2
 800b31c:	b99c      	cbnz	r4, 800b346 <_malloc_r+0x56>
 800b31e:	4f20      	ldr	r7, [pc, #128]	; (800b3a0 <_malloc_r+0xb0>)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	b923      	cbnz	r3, 800b32e <_malloc_r+0x3e>
 800b324:	4621      	mov	r1, r4
 800b326:	4630      	mov	r0, r6
 800b328:	f000 fb2a 	bl	800b980 <_sbrk_r>
 800b32c:	6038      	str	r0, [r7, #0]
 800b32e:	4629      	mov	r1, r5
 800b330:	4630      	mov	r0, r6
 800b332:	f000 fb25 	bl	800b980 <_sbrk_r>
 800b336:	1c43      	adds	r3, r0, #1
 800b338:	d123      	bne.n	800b382 <_malloc_r+0x92>
 800b33a:	230c      	movs	r3, #12
 800b33c:	6033      	str	r3, [r6, #0]
 800b33e:	4630      	mov	r0, r6
 800b340:	f000 fe1a 	bl	800bf78 <__malloc_unlock>
 800b344:	e7e3      	b.n	800b30e <_malloc_r+0x1e>
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	1b5b      	subs	r3, r3, r5
 800b34a:	d417      	bmi.n	800b37c <_malloc_r+0x8c>
 800b34c:	2b0b      	cmp	r3, #11
 800b34e:	d903      	bls.n	800b358 <_malloc_r+0x68>
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	441c      	add	r4, r3
 800b354:	6025      	str	r5, [r4, #0]
 800b356:	e004      	b.n	800b362 <_malloc_r+0x72>
 800b358:	6863      	ldr	r3, [r4, #4]
 800b35a:	42a2      	cmp	r2, r4
 800b35c:	bf0c      	ite	eq
 800b35e:	600b      	streq	r3, [r1, #0]
 800b360:	6053      	strne	r3, [r2, #4]
 800b362:	4630      	mov	r0, r6
 800b364:	f000 fe08 	bl	800bf78 <__malloc_unlock>
 800b368:	f104 000b 	add.w	r0, r4, #11
 800b36c:	1d23      	adds	r3, r4, #4
 800b36e:	f020 0007 	bic.w	r0, r0, #7
 800b372:	1ac2      	subs	r2, r0, r3
 800b374:	d0cc      	beq.n	800b310 <_malloc_r+0x20>
 800b376:	1a1b      	subs	r3, r3, r0
 800b378:	50a3      	str	r3, [r4, r2]
 800b37a:	e7c9      	b.n	800b310 <_malloc_r+0x20>
 800b37c:	4622      	mov	r2, r4
 800b37e:	6864      	ldr	r4, [r4, #4]
 800b380:	e7cc      	b.n	800b31c <_malloc_r+0x2c>
 800b382:	1cc4      	adds	r4, r0, #3
 800b384:	f024 0403 	bic.w	r4, r4, #3
 800b388:	42a0      	cmp	r0, r4
 800b38a:	d0e3      	beq.n	800b354 <_malloc_r+0x64>
 800b38c:	1a21      	subs	r1, r4, r0
 800b38e:	4630      	mov	r0, r6
 800b390:	f000 faf6 	bl	800b980 <_sbrk_r>
 800b394:	3001      	adds	r0, #1
 800b396:	d1dd      	bne.n	800b354 <_malloc_r+0x64>
 800b398:	e7cf      	b.n	800b33a <_malloc_r+0x4a>
 800b39a:	bf00      	nop
 800b39c:	20000130 	.word	0x20000130
 800b3a0:	20000134 	.word	0x20000134

0800b3a4 <__sfputc_r>:
 800b3a4:	6893      	ldr	r3, [r2, #8]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	b410      	push	{r4}
 800b3ac:	6093      	str	r3, [r2, #8]
 800b3ae:	da08      	bge.n	800b3c2 <__sfputc_r+0x1e>
 800b3b0:	6994      	ldr	r4, [r2, #24]
 800b3b2:	42a3      	cmp	r3, r4
 800b3b4:	db01      	blt.n	800b3ba <__sfputc_r+0x16>
 800b3b6:	290a      	cmp	r1, #10
 800b3b8:	d103      	bne.n	800b3c2 <__sfputc_r+0x1e>
 800b3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3be:	f000 baef 	b.w	800b9a0 <__swbuf_r>
 800b3c2:	6813      	ldr	r3, [r2, #0]
 800b3c4:	1c58      	adds	r0, r3, #1
 800b3c6:	6010      	str	r0, [r2, #0]
 800b3c8:	7019      	strb	r1, [r3, #0]
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <__sfputs_r>:
 800b3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	460f      	mov	r7, r1
 800b3d8:	4614      	mov	r4, r2
 800b3da:	18d5      	adds	r5, r2, r3
 800b3dc:	42ac      	cmp	r4, r5
 800b3de:	d101      	bne.n	800b3e4 <__sfputs_r+0x12>
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e007      	b.n	800b3f4 <__sfputs_r+0x22>
 800b3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e8:	463a      	mov	r2, r7
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ffda 	bl	800b3a4 <__sfputc_r>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d1f3      	bne.n	800b3dc <__sfputs_r+0xa>
 800b3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3f8 <_vfiprintf_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	460d      	mov	r5, r1
 800b3fe:	b09d      	sub	sp, #116	; 0x74
 800b400:	4614      	mov	r4, r2
 800b402:	4698      	mov	r8, r3
 800b404:	4606      	mov	r6, r0
 800b406:	b118      	cbz	r0, 800b410 <_vfiprintf_r+0x18>
 800b408:	6983      	ldr	r3, [r0, #24]
 800b40a:	b90b      	cbnz	r3, 800b410 <_vfiprintf_r+0x18>
 800b40c:	f000 fcaa 	bl	800bd64 <__sinit>
 800b410:	4b89      	ldr	r3, [pc, #548]	; (800b638 <_vfiprintf_r+0x240>)
 800b412:	429d      	cmp	r5, r3
 800b414:	d11b      	bne.n	800b44e <_vfiprintf_r+0x56>
 800b416:	6875      	ldr	r5, [r6, #4]
 800b418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b41a:	07d9      	lsls	r1, r3, #31
 800b41c:	d405      	bmi.n	800b42a <_vfiprintf_r+0x32>
 800b41e:	89ab      	ldrh	r3, [r5, #12]
 800b420:	059a      	lsls	r2, r3, #22
 800b422:	d402      	bmi.n	800b42a <_vfiprintf_r+0x32>
 800b424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b426:	f000 fd3b 	bl	800bea0 <__retarget_lock_acquire_recursive>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	071b      	lsls	r3, r3, #28
 800b42e:	d501      	bpl.n	800b434 <_vfiprintf_r+0x3c>
 800b430:	692b      	ldr	r3, [r5, #16]
 800b432:	b9eb      	cbnz	r3, 800b470 <_vfiprintf_r+0x78>
 800b434:	4629      	mov	r1, r5
 800b436:	4630      	mov	r0, r6
 800b438:	f000 fb04 	bl	800ba44 <__swsetup_r>
 800b43c:	b1c0      	cbz	r0, 800b470 <_vfiprintf_r+0x78>
 800b43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b440:	07dc      	lsls	r4, r3, #31
 800b442:	d50e      	bpl.n	800b462 <_vfiprintf_r+0x6a>
 800b444:	f04f 30ff 	mov.w	r0, #4294967295
 800b448:	b01d      	add	sp, #116	; 0x74
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	4b7b      	ldr	r3, [pc, #492]	; (800b63c <_vfiprintf_r+0x244>)
 800b450:	429d      	cmp	r5, r3
 800b452:	d101      	bne.n	800b458 <_vfiprintf_r+0x60>
 800b454:	68b5      	ldr	r5, [r6, #8]
 800b456:	e7df      	b.n	800b418 <_vfiprintf_r+0x20>
 800b458:	4b79      	ldr	r3, [pc, #484]	; (800b640 <_vfiprintf_r+0x248>)
 800b45a:	429d      	cmp	r5, r3
 800b45c:	bf08      	it	eq
 800b45e:	68f5      	ldreq	r5, [r6, #12]
 800b460:	e7da      	b.n	800b418 <_vfiprintf_r+0x20>
 800b462:	89ab      	ldrh	r3, [r5, #12]
 800b464:	0598      	lsls	r0, r3, #22
 800b466:	d4ed      	bmi.n	800b444 <_vfiprintf_r+0x4c>
 800b468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b46a:	f000 fd1a 	bl	800bea2 <__retarget_lock_release_recursive>
 800b46e:	e7e9      	b.n	800b444 <_vfiprintf_r+0x4c>
 800b470:	2300      	movs	r3, #0
 800b472:	9309      	str	r3, [sp, #36]	; 0x24
 800b474:	2320      	movs	r3, #32
 800b476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b47a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b47e:	2330      	movs	r3, #48	; 0x30
 800b480:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b644 <_vfiprintf_r+0x24c>
 800b484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b488:	f04f 0901 	mov.w	r9, #1
 800b48c:	4623      	mov	r3, r4
 800b48e:	469a      	mov	sl, r3
 800b490:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b494:	b10a      	cbz	r2, 800b49a <_vfiprintf_r+0xa2>
 800b496:	2a25      	cmp	r2, #37	; 0x25
 800b498:	d1f9      	bne.n	800b48e <_vfiprintf_r+0x96>
 800b49a:	ebba 0b04 	subs.w	fp, sl, r4
 800b49e:	d00b      	beq.n	800b4b8 <_vfiprintf_r+0xc0>
 800b4a0:	465b      	mov	r3, fp
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f7ff ff93 	bl	800b3d2 <__sfputs_r>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	f000 80aa 	beq.w	800b606 <_vfiprintf_r+0x20e>
 800b4b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4b4:	445a      	add	r2, fp
 800b4b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 80a2 	beq.w	800b606 <_vfiprintf_r+0x20e>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4cc:	f10a 0a01 	add.w	sl, sl, #1
 800b4d0:	9304      	str	r3, [sp, #16]
 800b4d2:	9307      	str	r3, [sp, #28]
 800b4d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b4da:	4654      	mov	r4, sl
 800b4dc:	2205      	movs	r2, #5
 800b4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e2:	4858      	ldr	r0, [pc, #352]	; (800b644 <_vfiprintf_r+0x24c>)
 800b4e4:	f7f4 fe74 	bl	80001d0 <memchr>
 800b4e8:	9a04      	ldr	r2, [sp, #16]
 800b4ea:	b9d8      	cbnz	r0, 800b524 <_vfiprintf_r+0x12c>
 800b4ec:	06d1      	lsls	r1, r2, #27
 800b4ee:	bf44      	itt	mi
 800b4f0:	2320      	movmi	r3, #32
 800b4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f6:	0713      	lsls	r3, r2, #28
 800b4f8:	bf44      	itt	mi
 800b4fa:	232b      	movmi	r3, #43	; 0x2b
 800b4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b500:	f89a 3000 	ldrb.w	r3, [sl]
 800b504:	2b2a      	cmp	r3, #42	; 0x2a
 800b506:	d015      	beq.n	800b534 <_vfiprintf_r+0x13c>
 800b508:	9a07      	ldr	r2, [sp, #28]
 800b50a:	4654      	mov	r4, sl
 800b50c:	2000      	movs	r0, #0
 800b50e:	f04f 0c0a 	mov.w	ip, #10
 800b512:	4621      	mov	r1, r4
 800b514:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b518:	3b30      	subs	r3, #48	; 0x30
 800b51a:	2b09      	cmp	r3, #9
 800b51c:	d94e      	bls.n	800b5bc <_vfiprintf_r+0x1c4>
 800b51e:	b1b0      	cbz	r0, 800b54e <_vfiprintf_r+0x156>
 800b520:	9207      	str	r2, [sp, #28]
 800b522:	e014      	b.n	800b54e <_vfiprintf_r+0x156>
 800b524:	eba0 0308 	sub.w	r3, r0, r8
 800b528:	fa09 f303 	lsl.w	r3, r9, r3
 800b52c:	4313      	orrs	r3, r2
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	46a2      	mov	sl, r4
 800b532:	e7d2      	b.n	800b4da <_vfiprintf_r+0xe2>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	1d19      	adds	r1, r3, #4
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	9103      	str	r1, [sp, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	bfbb      	ittet	lt
 800b540:	425b      	neglt	r3, r3
 800b542:	f042 0202 	orrlt.w	r2, r2, #2
 800b546:	9307      	strge	r3, [sp, #28]
 800b548:	9307      	strlt	r3, [sp, #28]
 800b54a:	bfb8      	it	lt
 800b54c:	9204      	strlt	r2, [sp, #16]
 800b54e:	7823      	ldrb	r3, [r4, #0]
 800b550:	2b2e      	cmp	r3, #46	; 0x2e
 800b552:	d10c      	bne.n	800b56e <_vfiprintf_r+0x176>
 800b554:	7863      	ldrb	r3, [r4, #1]
 800b556:	2b2a      	cmp	r3, #42	; 0x2a
 800b558:	d135      	bne.n	800b5c6 <_vfiprintf_r+0x1ce>
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	1d1a      	adds	r2, r3, #4
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	9203      	str	r2, [sp, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	bfb8      	it	lt
 800b566:	f04f 33ff 	movlt.w	r3, #4294967295
 800b56a:	3402      	adds	r4, #2
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b654 <_vfiprintf_r+0x25c>
 800b572:	7821      	ldrb	r1, [r4, #0]
 800b574:	2203      	movs	r2, #3
 800b576:	4650      	mov	r0, sl
 800b578:	f7f4 fe2a 	bl	80001d0 <memchr>
 800b57c:	b140      	cbz	r0, 800b590 <_vfiprintf_r+0x198>
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	eba0 000a 	sub.w	r0, r0, sl
 800b584:	fa03 f000 	lsl.w	r0, r3, r0
 800b588:	9b04      	ldr	r3, [sp, #16]
 800b58a:	4303      	orrs	r3, r0
 800b58c:	3401      	adds	r4, #1
 800b58e:	9304      	str	r3, [sp, #16]
 800b590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b594:	482c      	ldr	r0, [pc, #176]	; (800b648 <_vfiprintf_r+0x250>)
 800b596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b59a:	2206      	movs	r2, #6
 800b59c:	f7f4 fe18 	bl	80001d0 <memchr>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d03f      	beq.n	800b624 <_vfiprintf_r+0x22c>
 800b5a4:	4b29      	ldr	r3, [pc, #164]	; (800b64c <_vfiprintf_r+0x254>)
 800b5a6:	bb1b      	cbnz	r3, 800b5f0 <_vfiprintf_r+0x1f8>
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	3307      	adds	r3, #7
 800b5ac:	f023 0307 	bic.w	r3, r3, #7
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	9303      	str	r3, [sp, #12]
 800b5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b6:	443b      	add	r3, r7
 800b5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ba:	e767      	b.n	800b48c <_vfiprintf_r+0x94>
 800b5bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	e7a5      	b.n	800b512 <_vfiprintf_r+0x11a>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	3401      	adds	r4, #1
 800b5ca:	9305      	str	r3, [sp, #20]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	f04f 0c0a 	mov.w	ip, #10
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d8:	3a30      	subs	r2, #48	; 0x30
 800b5da:	2a09      	cmp	r2, #9
 800b5dc:	d903      	bls.n	800b5e6 <_vfiprintf_r+0x1ee>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0c5      	beq.n	800b56e <_vfiprintf_r+0x176>
 800b5e2:	9105      	str	r1, [sp, #20]
 800b5e4:	e7c3      	b.n	800b56e <_vfiprintf_r+0x176>
 800b5e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e7f0      	b.n	800b5d2 <_vfiprintf_r+0x1da>
 800b5f0:	ab03      	add	r3, sp, #12
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4b16      	ldr	r3, [pc, #88]	; (800b650 <_vfiprintf_r+0x258>)
 800b5f8:	a904      	add	r1, sp, #16
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f3af 8000 	nop.w
 800b600:	4607      	mov	r7, r0
 800b602:	1c78      	adds	r0, r7, #1
 800b604:	d1d6      	bne.n	800b5b4 <_vfiprintf_r+0x1bc>
 800b606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b608:	07d9      	lsls	r1, r3, #31
 800b60a:	d405      	bmi.n	800b618 <_vfiprintf_r+0x220>
 800b60c:	89ab      	ldrh	r3, [r5, #12]
 800b60e:	059a      	lsls	r2, r3, #22
 800b610:	d402      	bmi.n	800b618 <_vfiprintf_r+0x220>
 800b612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b614:	f000 fc45 	bl	800bea2 <__retarget_lock_release_recursive>
 800b618:	89ab      	ldrh	r3, [r5, #12]
 800b61a:	065b      	lsls	r3, r3, #25
 800b61c:	f53f af12 	bmi.w	800b444 <_vfiprintf_r+0x4c>
 800b620:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b622:	e711      	b.n	800b448 <_vfiprintf_r+0x50>
 800b624:	ab03      	add	r3, sp, #12
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	462a      	mov	r2, r5
 800b62a:	4b09      	ldr	r3, [pc, #36]	; (800b650 <_vfiprintf_r+0x258>)
 800b62c:	a904      	add	r1, sp, #16
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 f880 	bl	800b734 <_printf_i>
 800b634:	e7e4      	b.n	800b600 <_vfiprintf_r+0x208>
 800b636:	bf00      	nop
 800b638:	080f1378 	.word	0x080f1378
 800b63c:	080f1398 	.word	0x080f1398
 800b640:	080f1358 	.word	0x080f1358
 800b644:	080f1323 	.word	0x080f1323
 800b648:	080f132d 	.word	0x080f132d
 800b64c:	00000000 	.word	0x00000000
 800b650:	0800b3d3 	.word	0x0800b3d3
 800b654:	080f1329 	.word	0x080f1329

0800b658 <_printf_common>:
 800b658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b65c:	4616      	mov	r6, r2
 800b65e:	4699      	mov	r9, r3
 800b660:	688a      	ldr	r2, [r1, #8]
 800b662:	690b      	ldr	r3, [r1, #16]
 800b664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b668:	4293      	cmp	r3, r2
 800b66a:	bfb8      	it	lt
 800b66c:	4613      	movlt	r3, r2
 800b66e:	6033      	str	r3, [r6, #0]
 800b670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b674:	4607      	mov	r7, r0
 800b676:	460c      	mov	r4, r1
 800b678:	b10a      	cbz	r2, 800b67e <_printf_common+0x26>
 800b67a:	3301      	adds	r3, #1
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	0699      	lsls	r1, r3, #26
 800b682:	bf42      	ittt	mi
 800b684:	6833      	ldrmi	r3, [r6, #0]
 800b686:	3302      	addmi	r3, #2
 800b688:	6033      	strmi	r3, [r6, #0]
 800b68a:	6825      	ldr	r5, [r4, #0]
 800b68c:	f015 0506 	ands.w	r5, r5, #6
 800b690:	d106      	bne.n	800b6a0 <_printf_common+0x48>
 800b692:	f104 0a19 	add.w	sl, r4, #25
 800b696:	68e3      	ldr	r3, [r4, #12]
 800b698:	6832      	ldr	r2, [r6, #0]
 800b69a:	1a9b      	subs	r3, r3, r2
 800b69c:	42ab      	cmp	r3, r5
 800b69e:	dc26      	bgt.n	800b6ee <_printf_common+0x96>
 800b6a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6a4:	1e13      	subs	r3, r2, #0
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	bf18      	it	ne
 800b6aa:	2301      	movne	r3, #1
 800b6ac:	0692      	lsls	r2, r2, #26
 800b6ae:	d42b      	bmi.n	800b708 <_printf_common+0xb0>
 800b6b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	47c0      	blx	r8
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d01e      	beq.n	800b6fc <_printf_common+0xa4>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	68e5      	ldr	r5, [r4, #12]
 800b6c2:	6832      	ldr	r2, [r6, #0]
 800b6c4:	f003 0306 	and.w	r3, r3, #6
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	bf08      	it	eq
 800b6cc:	1aad      	subeq	r5, r5, r2
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	6922      	ldr	r2, [r4, #16]
 800b6d2:	bf0c      	ite	eq
 800b6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6d8:	2500      	movne	r5, #0
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	bfc4      	itt	gt
 800b6de:	1a9b      	subgt	r3, r3, r2
 800b6e0:	18ed      	addgt	r5, r5, r3
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	341a      	adds	r4, #26
 800b6e6:	42b5      	cmp	r5, r6
 800b6e8:	d11a      	bne.n	800b720 <_printf_common+0xc8>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e008      	b.n	800b700 <_printf_common+0xa8>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4652      	mov	r2, sl
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	47c0      	blx	r8
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	d103      	bne.n	800b704 <_printf_common+0xac>
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b704:	3501      	adds	r5, #1
 800b706:	e7c6      	b.n	800b696 <_printf_common+0x3e>
 800b708:	18e1      	adds	r1, r4, r3
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	2030      	movs	r0, #48	; 0x30
 800b70e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b712:	4422      	add	r2, r4
 800b714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b71c:	3302      	adds	r3, #2
 800b71e:	e7c7      	b.n	800b6b0 <_printf_common+0x58>
 800b720:	2301      	movs	r3, #1
 800b722:	4622      	mov	r2, r4
 800b724:	4649      	mov	r1, r9
 800b726:	4638      	mov	r0, r7
 800b728:	47c0      	blx	r8
 800b72a:	3001      	adds	r0, #1
 800b72c:	d0e6      	beq.n	800b6fc <_printf_common+0xa4>
 800b72e:	3601      	adds	r6, #1
 800b730:	e7d9      	b.n	800b6e6 <_printf_common+0x8e>
	...

0800b734 <_printf_i>:
 800b734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b738:	460c      	mov	r4, r1
 800b73a:	4691      	mov	r9, r2
 800b73c:	7e27      	ldrb	r7, [r4, #24]
 800b73e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b740:	2f78      	cmp	r7, #120	; 0x78
 800b742:	4680      	mov	r8, r0
 800b744:	469a      	mov	sl, r3
 800b746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b74a:	d807      	bhi.n	800b75c <_printf_i+0x28>
 800b74c:	2f62      	cmp	r7, #98	; 0x62
 800b74e:	d80a      	bhi.n	800b766 <_printf_i+0x32>
 800b750:	2f00      	cmp	r7, #0
 800b752:	f000 80d8 	beq.w	800b906 <_printf_i+0x1d2>
 800b756:	2f58      	cmp	r7, #88	; 0x58
 800b758:	f000 80a3 	beq.w	800b8a2 <_printf_i+0x16e>
 800b75c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b764:	e03a      	b.n	800b7dc <_printf_i+0xa8>
 800b766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b76a:	2b15      	cmp	r3, #21
 800b76c:	d8f6      	bhi.n	800b75c <_printf_i+0x28>
 800b76e:	a001      	add	r0, pc, #4	; (adr r0, 800b774 <_printf_i+0x40>)
 800b770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b774:	0800b7cd 	.word	0x0800b7cd
 800b778:	0800b7e1 	.word	0x0800b7e1
 800b77c:	0800b75d 	.word	0x0800b75d
 800b780:	0800b75d 	.word	0x0800b75d
 800b784:	0800b75d 	.word	0x0800b75d
 800b788:	0800b75d 	.word	0x0800b75d
 800b78c:	0800b7e1 	.word	0x0800b7e1
 800b790:	0800b75d 	.word	0x0800b75d
 800b794:	0800b75d 	.word	0x0800b75d
 800b798:	0800b75d 	.word	0x0800b75d
 800b79c:	0800b75d 	.word	0x0800b75d
 800b7a0:	0800b8ed 	.word	0x0800b8ed
 800b7a4:	0800b811 	.word	0x0800b811
 800b7a8:	0800b8cf 	.word	0x0800b8cf
 800b7ac:	0800b75d 	.word	0x0800b75d
 800b7b0:	0800b75d 	.word	0x0800b75d
 800b7b4:	0800b90f 	.word	0x0800b90f
 800b7b8:	0800b75d 	.word	0x0800b75d
 800b7bc:	0800b811 	.word	0x0800b811
 800b7c0:	0800b75d 	.word	0x0800b75d
 800b7c4:	0800b75d 	.word	0x0800b75d
 800b7c8:	0800b8d7 	.word	0x0800b8d7
 800b7cc:	680b      	ldr	r3, [r1, #0]
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	600a      	str	r2, [r1, #0]
 800b7d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e0a3      	b.n	800b928 <_printf_i+0x1f4>
 800b7e0:	6825      	ldr	r5, [r4, #0]
 800b7e2:	6808      	ldr	r0, [r1, #0]
 800b7e4:	062e      	lsls	r6, r5, #24
 800b7e6:	f100 0304 	add.w	r3, r0, #4
 800b7ea:	d50a      	bpl.n	800b802 <_printf_i+0xce>
 800b7ec:	6805      	ldr	r5, [r0, #0]
 800b7ee:	600b      	str	r3, [r1, #0]
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	da03      	bge.n	800b7fc <_printf_i+0xc8>
 800b7f4:	232d      	movs	r3, #45	; 0x2d
 800b7f6:	426d      	negs	r5, r5
 800b7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7fc:	485e      	ldr	r0, [pc, #376]	; (800b978 <_printf_i+0x244>)
 800b7fe:	230a      	movs	r3, #10
 800b800:	e019      	b.n	800b836 <_printf_i+0x102>
 800b802:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b806:	6805      	ldr	r5, [r0, #0]
 800b808:	600b      	str	r3, [r1, #0]
 800b80a:	bf18      	it	ne
 800b80c:	b22d      	sxthne	r5, r5
 800b80e:	e7ef      	b.n	800b7f0 <_printf_i+0xbc>
 800b810:	680b      	ldr	r3, [r1, #0]
 800b812:	6825      	ldr	r5, [r4, #0]
 800b814:	1d18      	adds	r0, r3, #4
 800b816:	6008      	str	r0, [r1, #0]
 800b818:	0628      	lsls	r0, r5, #24
 800b81a:	d501      	bpl.n	800b820 <_printf_i+0xec>
 800b81c:	681d      	ldr	r5, [r3, #0]
 800b81e:	e002      	b.n	800b826 <_printf_i+0xf2>
 800b820:	0669      	lsls	r1, r5, #25
 800b822:	d5fb      	bpl.n	800b81c <_printf_i+0xe8>
 800b824:	881d      	ldrh	r5, [r3, #0]
 800b826:	4854      	ldr	r0, [pc, #336]	; (800b978 <_printf_i+0x244>)
 800b828:	2f6f      	cmp	r7, #111	; 0x6f
 800b82a:	bf0c      	ite	eq
 800b82c:	2308      	moveq	r3, #8
 800b82e:	230a      	movne	r3, #10
 800b830:	2100      	movs	r1, #0
 800b832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b836:	6866      	ldr	r6, [r4, #4]
 800b838:	60a6      	str	r6, [r4, #8]
 800b83a:	2e00      	cmp	r6, #0
 800b83c:	bfa2      	ittt	ge
 800b83e:	6821      	ldrge	r1, [r4, #0]
 800b840:	f021 0104 	bicge.w	r1, r1, #4
 800b844:	6021      	strge	r1, [r4, #0]
 800b846:	b90d      	cbnz	r5, 800b84c <_printf_i+0x118>
 800b848:	2e00      	cmp	r6, #0
 800b84a:	d04d      	beq.n	800b8e8 <_printf_i+0x1b4>
 800b84c:	4616      	mov	r6, r2
 800b84e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b852:	fb03 5711 	mls	r7, r3, r1, r5
 800b856:	5dc7      	ldrb	r7, [r0, r7]
 800b858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b85c:	462f      	mov	r7, r5
 800b85e:	42bb      	cmp	r3, r7
 800b860:	460d      	mov	r5, r1
 800b862:	d9f4      	bls.n	800b84e <_printf_i+0x11a>
 800b864:	2b08      	cmp	r3, #8
 800b866:	d10b      	bne.n	800b880 <_printf_i+0x14c>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	07df      	lsls	r7, r3, #31
 800b86c:	d508      	bpl.n	800b880 <_printf_i+0x14c>
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	6861      	ldr	r1, [r4, #4]
 800b872:	4299      	cmp	r1, r3
 800b874:	bfde      	ittt	le
 800b876:	2330      	movle	r3, #48	; 0x30
 800b878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b87c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b880:	1b92      	subs	r2, r2, r6
 800b882:	6122      	str	r2, [r4, #16]
 800b884:	f8cd a000 	str.w	sl, [sp]
 800b888:	464b      	mov	r3, r9
 800b88a:	aa03      	add	r2, sp, #12
 800b88c:	4621      	mov	r1, r4
 800b88e:	4640      	mov	r0, r8
 800b890:	f7ff fee2 	bl	800b658 <_printf_common>
 800b894:	3001      	adds	r0, #1
 800b896:	d14c      	bne.n	800b932 <_printf_i+0x1fe>
 800b898:	f04f 30ff 	mov.w	r0, #4294967295
 800b89c:	b004      	add	sp, #16
 800b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a2:	4835      	ldr	r0, [pc, #212]	; (800b978 <_printf_i+0x244>)
 800b8a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	680e      	ldr	r6, [r1, #0]
 800b8ac:	061f      	lsls	r7, r3, #24
 800b8ae:	f856 5b04 	ldr.w	r5, [r6], #4
 800b8b2:	600e      	str	r6, [r1, #0]
 800b8b4:	d514      	bpl.n	800b8e0 <_printf_i+0x1ac>
 800b8b6:	07d9      	lsls	r1, r3, #31
 800b8b8:	bf44      	itt	mi
 800b8ba:	f043 0320 	orrmi.w	r3, r3, #32
 800b8be:	6023      	strmi	r3, [r4, #0]
 800b8c0:	b91d      	cbnz	r5, 800b8ca <_printf_i+0x196>
 800b8c2:	6823      	ldr	r3, [r4, #0]
 800b8c4:	f023 0320 	bic.w	r3, r3, #32
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	2310      	movs	r3, #16
 800b8cc:	e7b0      	b.n	800b830 <_printf_i+0xfc>
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	f043 0320 	orr.w	r3, r3, #32
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	2378      	movs	r3, #120	; 0x78
 800b8d8:	4828      	ldr	r0, [pc, #160]	; (800b97c <_printf_i+0x248>)
 800b8da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8de:	e7e3      	b.n	800b8a8 <_printf_i+0x174>
 800b8e0:	065e      	lsls	r6, r3, #25
 800b8e2:	bf48      	it	mi
 800b8e4:	b2ad      	uxthmi	r5, r5
 800b8e6:	e7e6      	b.n	800b8b6 <_printf_i+0x182>
 800b8e8:	4616      	mov	r6, r2
 800b8ea:	e7bb      	b.n	800b864 <_printf_i+0x130>
 800b8ec:	680b      	ldr	r3, [r1, #0]
 800b8ee:	6826      	ldr	r6, [r4, #0]
 800b8f0:	6960      	ldr	r0, [r4, #20]
 800b8f2:	1d1d      	adds	r5, r3, #4
 800b8f4:	600d      	str	r5, [r1, #0]
 800b8f6:	0635      	lsls	r5, r6, #24
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	d501      	bpl.n	800b900 <_printf_i+0x1cc>
 800b8fc:	6018      	str	r0, [r3, #0]
 800b8fe:	e002      	b.n	800b906 <_printf_i+0x1d2>
 800b900:	0671      	lsls	r1, r6, #25
 800b902:	d5fb      	bpl.n	800b8fc <_printf_i+0x1c8>
 800b904:	8018      	strh	r0, [r3, #0]
 800b906:	2300      	movs	r3, #0
 800b908:	6123      	str	r3, [r4, #16]
 800b90a:	4616      	mov	r6, r2
 800b90c:	e7ba      	b.n	800b884 <_printf_i+0x150>
 800b90e:	680b      	ldr	r3, [r1, #0]
 800b910:	1d1a      	adds	r2, r3, #4
 800b912:	600a      	str	r2, [r1, #0]
 800b914:	681e      	ldr	r6, [r3, #0]
 800b916:	6862      	ldr	r2, [r4, #4]
 800b918:	2100      	movs	r1, #0
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7f4 fc58 	bl	80001d0 <memchr>
 800b920:	b108      	cbz	r0, 800b926 <_printf_i+0x1f2>
 800b922:	1b80      	subs	r0, r0, r6
 800b924:	6060      	str	r0, [r4, #4]
 800b926:	6863      	ldr	r3, [r4, #4]
 800b928:	6123      	str	r3, [r4, #16]
 800b92a:	2300      	movs	r3, #0
 800b92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b930:	e7a8      	b.n	800b884 <_printf_i+0x150>
 800b932:	6923      	ldr	r3, [r4, #16]
 800b934:	4632      	mov	r2, r6
 800b936:	4649      	mov	r1, r9
 800b938:	4640      	mov	r0, r8
 800b93a:	47d0      	blx	sl
 800b93c:	3001      	adds	r0, #1
 800b93e:	d0ab      	beq.n	800b898 <_printf_i+0x164>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	079b      	lsls	r3, r3, #30
 800b944:	d413      	bmi.n	800b96e <_printf_i+0x23a>
 800b946:	68e0      	ldr	r0, [r4, #12]
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	4298      	cmp	r0, r3
 800b94c:	bfb8      	it	lt
 800b94e:	4618      	movlt	r0, r3
 800b950:	e7a4      	b.n	800b89c <_printf_i+0x168>
 800b952:	2301      	movs	r3, #1
 800b954:	4632      	mov	r2, r6
 800b956:	4649      	mov	r1, r9
 800b958:	4640      	mov	r0, r8
 800b95a:	47d0      	blx	sl
 800b95c:	3001      	adds	r0, #1
 800b95e:	d09b      	beq.n	800b898 <_printf_i+0x164>
 800b960:	3501      	adds	r5, #1
 800b962:	68e3      	ldr	r3, [r4, #12]
 800b964:	9903      	ldr	r1, [sp, #12]
 800b966:	1a5b      	subs	r3, r3, r1
 800b968:	42ab      	cmp	r3, r5
 800b96a:	dcf2      	bgt.n	800b952 <_printf_i+0x21e>
 800b96c:	e7eb      	b.n	800b946 <_printf_i+0x212>
 800b96e:	2500      	movs	r5, #0
 800b970:	f104 0619 	add.w	r6, r4, #25
 800b974:	e7f5      	b.n	800b962 <_printf_i+0x22e>
 800b976:	bf00      	nop
 800b978:	080f1334 	.word	0x080f1334
 800b97c:	080f1345 	.word	0x080f1345

0800b980 <_sbrk_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_sbrk_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f8 feca 	bl	8004724 <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_sbrk_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_sbrk_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20000834 	.word	0x20000834

0800b9a0 <__swbuf_r>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	460e      	mov	r6, r1
 800b9a4:	4614      	mov	r4, r2
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	b118      	cbz	r0, 800b9b2 <__swbuf_r+0x12>
 800b9aa:	6983      	ldr	r3, [r0, #24]
 800b9ac:	b90b      	cbnz	r3, 800b9b2 <__swbuf_r+0x12>
 800b9ae:	f000 f9d9 	bl	800bd64 <__sinit>
 800b9b2:	4b21      	ldr	r3, [pc, #132]	; (800ba38 <__swbuf_r+0x98>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	d12b      	bne.n	800ba10 <__swbuf_r+0x70>
 800b9b8:	686c      	ldr	r4, [r5, #4]
 800b9ba:	69a3      	ldr	r3, [r4, #24]
 800b9bc:	60a3      	str	r3, [r4, #8]
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	071a      	lsls	r2, r3, #28
 800b9c2:	d52f      	bpl.n	800ba24 <__swbuf_r+0x84>
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	b36b      	cbz	r3, 800ba24 <__swbuf_r+0x84>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	6820      	ldr	r0, [r4, #0]
 800b9cc:	1ac0      	subs	r0, r0, r3
 800b9ce:	6963      	ldr	r3, [r4, #20]
 800b9d0:	b2f6      	uxtb	r6, r6
 800b9d2:	4283      	cmp	r3, r0
 800b9d4:	4637      	mov	r7, r6
 800b9d6:	dc04      	bgt.n	800b9e2 <__swbuf_r+0x42>
 800b9d8:	4621      	mov	r1, r4
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 f92e 	bl	800bc3c <_fflush_r>
 800b9e0:	bb30      	cbnz	r0, 800ba30 <__swbuf_r+0x90>
 800b9e2:	68a3      	ldr	r3, [r4, #8]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	60a3      	str	r3, [r4, #8]
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	6022      	str	r2, [r4, #0]
 800b9ee:	701e      	strb	r6, [r3, #0]
 800b9f0:	6963      	ldr	r3, [r4, #20]
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	4283      	cmp	r3, r0
 800b9f6:	d004      	beq.n	800ba02 <__swbuf_r+0x62>
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	07db      	lsls	r3, r3, #31
 800b9fc:	d506      	bpl.n	800ba0c <__swbuf_r+0x6c>
 800b9fe:	2e0a      	cmp	r6, #10
 800ba00:	d104      	bne.n	800ba0c <__swbuf_r+0x6c>
 800ba02:	4621      	mov	r1, r4
 800ba04:	4628      	mov	r0, r5
 800ba06:	f000 f919 	bl	800bc3c <_fflush_r>
 800ba0a:	b988      	cbnz	r0, 800ba30 <__swbuf_r+0x90>
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <__swbuf_r+0x9c>)
 800ba12:	429c      	cmp	r4, r3
 800ba14:	d101      	bne.n	800ba1a <__swbuf_r+0x7a>
 800ba16:	68ac      	ldr	r4, [r5, #8]
 800ba18:	e7cf      	b.n	800b9ba <__swbuf_r+0x1a>
 800ba1a:	4b09      	ldr	r3, [pc, #36]	; (800ba40 <__swbuf_r+0xa0>)
 800ba1c:	429c      	cmp	r4, r3
 800ba1e:	bf08      	it	eq
 800ba20:	68ec      	ldreq	r4, [r5, #12]
 800ba22:	e7ca      	b.n	800b9ba <__swbuf_r+0x1a>
 800ba24:	4621      	mov	r1, r4
 800ba26:	4628      	mov	r0, r5
 800ba28:	f000 f80c 	bl	800ba44 <__swsetup_r>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d0cb      	beq.n	800b9c8 <__swbuf_r+0x28>
 800ba30:	f04f 37ff 	mov.w	r7, #4294967295
 800ba34:	e7ea      	b.n	800ba0c <__swbuf_r+0x6c>
 800ba36:	bf00      	nop
 800ba38:	080f1378 	.word	0x080f1378
 800ba3c:	080f1398 	.word	0x080f1398
 800ba40:	080f1358 	.word	0x080f1358

0800ba44 <__swsetup_r>:
 800ba44:	4b32      	ldr	r3, [pc, #200]	; (800bb10 <__swsetup_r+0xcc>)
 800ba46:	b570      	push	{r4, r5, r6, lr}
 800ba48:	681d      	ldr	r5, [r3, #0]
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	b125      	cbz	r5, 800ba5a <__swsetup_r+0x16>
 800ba50:	69ab      	ldr	r3, [r5, #24]
 800ba52:	b913      	cbnz	r3, 800ba5a <__swsetup_r+0x16>
 800ba54:	4628      	mov	r0, r5
 800ba56:	f000 f985 	bl	800bd64 <__sinit>
 800ba5a:	4b2e      	ldr	r3, [pc, #184]	; (800bb14 <__swsetup_r+0xd0>)
 800ba5c:	429c      	cmp	r4, r3
 800ba5e:	d10f      	bne.n	800ba80 <__swsetup_r+0x3c>
 800ba60:	686c      	ldr	r4, [r5, #4]
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba68:	0719      	lsls	r1, r3, #28
 800ba6a:	d42c      	bmi.n	800bac6 <__swsetup_r+0x82>
 800ba6c:	06dd      	lsls	r5, r3, #27
 800ba6e:	d411      	bmi.n	800ba94 <__swsetup_r+0x50>
 800ba70:	2309      	movs	r3, #9
 800ba72:	6033      	str	r3, [r6, #0]
 800ba74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7e:	e03e      	b.n	800bafe <__swsetup_r+0xba>
 800ba80:	4b25      	ldr	r3, [pc, #148]	; (800bb18 <__swsetup_r+0xd4>)
 800ba82:	429c      	cmp	r4, r3
 800ba84:	d101      	bne.n	800ba8a <__swsetup_r+0x46>
 800ba86:	68ac      	ldr	r4, [r5, #8]
 800ba88:	e7eb      	b.n	800ba62 <__swsetup_r+0x1e>
 800ba8a:	4b24      	ldr	r3, [pc, #144]	; (800bb1c <__swsetup_r+0xd8>)
 800ba8c:	429c      	cmp	r4, r3
 800ba8e:	bf08      	it	eq
 800ba90:	68ec      	ldreq	r4, [r5, #12]
 800ba92:	e7e6      	b.n	800ba62 <__swsetup_r+0x1e>
 800ba94:	0758      	lsls	r0, r3, #29
 800ba96:	d512      	bpl.n	800babe <__swsetup_r+0x7a>
 800ba98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba9a:	b141      	cbz	r1, 800baae <__swsetup_r+0x6a>
 800ba9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baa0:	4299      	cmp	r1, r3
 800baa2:	d002      	beq.n	800baaa <__swsetup_r+0x66>
 800baa4:	4630      	mov	r0, r6
 800baa6:	f7ff fbd3 	bl	800b250 <_free_r>
 800baaa:	2300      	movs	r3, #0
 800baac:	6363      	str	r3, [r4, #52]	; 0x34
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	2300      	movs	r3, #0
 800bab8:	6063      	str	r3, [r4, #4]
 800baba:	6923      	ldr	r3, [r4, #16]
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	89a3      	ldrh	r3, [r4, #12]
 800bac0:	f043 0308 	orr.w	r3, r3, #8
 800bac4:	81a3      	strh	r3, [r4, #12]
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	b94b      	cbnz	r3, 800bade <__swsetup_r+0x9a>
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bad4:	d003      	beq.n	800bade <__swsetup_r+0x9a>
 800bad6:	4621      	mov	r1, r4
 800bad8:	4630      	mov	r0, r6
 800bada:	f000 fa07 	bl	800beec <__smakebuf_r>
 800bade:	89a0      	ldrh	r0, [r4, #12]
 800bae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bae4:	f010 0301 	ands.w	r3, r0, #1
 800bae8:	d00a      	beq.n	800bb00 <__swsetup_r+0xbc>
 800baea:	2300      	movs	r3, #0
 800baec:	60a3      	str	r3, [r4, #8]
 800baee:	6963      	ldr	r3, [r4, #20]
 800baf0:	425b      	negs	r3, r3
 800baf2:	61a3      	str	r3, [r4, #24]
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	b943      	cbnz	r3, 800bb0a <__swsetup_r+0xc6>
 800baf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bafc:	d1ba      	bne.n	800ba74 <__swsetup_r+0x30>
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	0781      	lsls	r1, r0, #30
 800bb02:	bf58      	it	pl
 800bb04:	6963      	ldrpl	r3, [r4, #20]
 800bb06:	60a3      	str	r3, [r4, #8]
 800bb08:	e7f4      	b.n	800baf4 <__swsetup_r+0xb0>
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	e7f7      	b.n	800bafe <__swsetup_r+0xba>
 800bb0e:	bf00      	nop
 800bb10:	20000068 	.word	0x20000068
 800bb14:	080f1378 	.word	0x080f1378
 800bb18:	080f1398 	.word	0x080f1398
 800bb1c:	080f1358 	.word	0x080f1358

0800bb20 <abort>:
 800bb20:	b508      	push	{r3, lr}
 800bb22:	2006      	movs	r0, #6
 800bb24:	f000 fa56 	bl	800bfd4 <raise>
 800bb28:	2001      	movs	r0, #1
 800bb2a:	f7f8 fd83 	bl	8004634 <_exit>
	...

0800bb30 <__sflush_r>:
 800bb30:	898a      	ldrh	r2, [r1, #12]
 800bb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb36:	4605      	mov	r5, r0
 800bb38:	0710      	lsls	r0, r2, #28
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	d458      	bmi.n	800bbf0 <__sflush_r+0xc0>
 800bb3e:	684b      	ldr	r3, [r1, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dc05      	bgt.n	800bb50 <__sflush_r+0x20>
 800bb44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dc02      	bgt.n	800bb50 <__sflush_r+0x20>
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb52:	2e00      	cmp	r6, #0
 800bb54:	d0f9      	beq.n	800bb4a <__sflush_r+0x1a>
 800bb56:	2300      	movs	r3, #0
 800bb58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb5c:	682f      	ldr	r7, [r5, #0]
 800bb5e:	602b      	str	r3, [r5, #0]
 800bb60:	d032      	beq.n	800bbc8 <__sflush_r+0x98>
 800bb62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	075a      	lsls	r2, r3, #29
 800bb68:	d505      	bpl.n	800bb76 <__sflush_r+0x46>
 800bb6a:	6863      	ldr	r3, [r4, #4]
 800bb6c:	1ac0      	subs	r0, r0, r3
 800bb6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb70:	b10b      	cbz	r3, 800bb76 <__sflush_r+0x46>
 800bb72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb74:	1ac0      	subs	r0, r0, r3
 800bb76:	2300      	movs	r3, #0
 800bb78:	4602      	mov	r2, r0
 800bb7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb7c:	6a21      	ldr	r1, [r4, #32]
 800bb7e:	4628      	mov	r0, r5
 800bb80:	47b0      	blx	r6
 800bb82:	1c43      	adds	r3, r0, #1
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	d106      	bne.n	800bb96 <__sflush_r+0x66>
 800bb88:	6829      	ldr	r1, [r5, #0]
 800bb8a:	291d      	cmp	r1, #29
 800bb8c:	d82c      	bhi.n	800bbe8 <__sflush_r+0xb8>
 800bb8e:	4a2a      	ldr	r2, [pc, #168]	; (800bc38 <__sflush_r+0x108>)
 800bb90:	40ca      	lsrs	r2, r1
 800bb92:	07d6      	lsls	r6, r2, #31
 800bb94:	d528      	bpl.n	800bbe8 <__sflush_r+0xb8>
 800bb96:	2200      	movs	r2, #0
 800bb98:	6062      	str	r2, [r4, #4]
 800bb9a:	04d9      	lsls	r1, r3, #19
 800bb9c:	6922      	ldr	r2, [r4, #16]
 800bb9e:	6022      	str	r2, [r4, #0]
 800bba0:	d504      	bpl.n	800bbac <__sflush_r+0x7c>
 800bba2:	1c42      	adds	r2, r0, #1
 800bba4:	d101      	bne.n	800bbaa <__sflush_r+0x7a>
 800bba6:	682b      	ldr	r3, [r5, #0]
 800bba8:	b903      	cbnz	r3, 800bbac <__sflush_r+0x7c>
 800bbaa:	6560      	str	r0, [r4, #84]	; 0x54
 800bbac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbae:	602f      	str	r7, [r5, #0]
 800bbb0:	2900      	cmp	r1, #0
 800bbb2:	d0ca      	beq.n	800bb4a <__sflush_r+0x1a>
 800bbb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	d002      	beq.n	800bbc2 <__sflush_r+0x92>
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	f7ff fb47 	bl	800b250 <_free_r>
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	6360      	str	r0, [r4, #52]	; 0x34
 800bbc6:	e7c1      	b.n	800bb4c <__sflush_r+0x1c>
 800bbc8:	6a21      	ldr	r1, [r4, #32]
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4628      	mov	r0, r5
 800bbce:	47b0      	blx	r6
 800bbd0:	1c41      	adds	r1, r0, #1
 800bbd2:	d1c7      	bne.n	800bb64 <__sflush_r+0x34>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d0c4      	beq.n	800bb64 <__sflush_r+0x34>
 800bbda:	2b1d      	cmp	r3, #29
 800bbdc:	d001      	beq.n	800bbe2 <__sflush_r+0xb2>
 800bbde:	2b16      	cmp	r3, #22
 800bbe0:	d101      	bne.n	800bbe6 <__sflush_r+0xb6>
 800bbe2:	602f      	str	r7, [r5, #0]
 800bbe4:	e7b1      	b.n	800bb4a <__sflush_r+0x1a>
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbec:	81a3      	strh	r3, [r4, #12]
 800bbee:	e7ad      	b.n	800bb4c <__sflush_r+0x1c>
 800bbf0:	690f      	ldr	r7, [r1, #16]
 800bbf2:	2f00      	cmp	r7, #0
 800bbf4:	d0a9      	beq.n	800bb4a <__sflush_r+0x1a>
 800bbf6:	0793      	lsls	r3, r2, #30
 800bbf8:	680e      	ldr	r6, [r1, #0]
 800bbfa:	bf08      	it	eq
 800bbfc:	694b      	ldreq	r3, [r1, #20]
 800bbfe:	600f      	str	r7, [r1, #0]
 800bc00:	bf18      	it	ne
 800bc02:	2300      	movne	r3, #0
 800bc04:	eba6 0807 	sub.w	r8, r6, r7
 800bc08:	608b      	str	r3, [r1, #8]
 800bc0a:	f1b8 0f00 	cmp.w	r8, #0
 800bc0e:	dd9c      	ble.n	800bb4a <__sflush_r+0x1a>
 800bc10:	6a21      	ldr	r1, [r4, #32]
 800bc12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc14:	4643      	mov	r3, r8
 800bc16:	463a      	mov	r2, r7
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b0      	blx	r6
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	dc06      	bgt.n	800bc2e <__sflush_r+0xfe>
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2c:	e78e      	b.n	800bb4c <__sflush_r+0x1c>
 800bc2e:	4407      	add	r7, r0
 800bc30:	eba8 0800 	sub.w	r8, r8, r0
 800bc34:	e7e9      	b.n	800bc0a <__sflush_r+0xda>
 800bc36:	bf00      	nop
 800bc38:	20400001 	.word	0x20400001

0800bc3c <_fflush_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	690b      	ldr	r3, [r1, #16]
 800bc40:	4605      	mov	r5, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	b913      	cbnz	r3, 800bc4c <_fflush_r+0x10>
 800bc46:	2500      	movs	r5, #0
 800bc48:	4628      	mov	r0, r5
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	b118      	cbz	r0, 800bc56 <_fflush_r+0x1a>
 800bc4e:	6983      	ldr	r3, [r0, #24]
 800bc50:	b90b      	cbnz	r3, 800bc56 <_fflush_r+0x1a>
 800bc52:	f000 f887 	bl	800bd64 <__sinit>
 800bc56:	4b14      	ldr	r3, [pc, #80]	; (800bca8 <_fflush_r+0x6c>)
 800bc58:	429c      	cmp	r4, r3
 800bc5a:	d11b      	bne.n	800bc94 <_fflush_r+0x58>
 800bc5c:	686c      	ldr	r4, [r5, #4]
 800bc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0ef      	beq.n	800bc46 <_fflush_r+0xa>
 800bc66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc68:	07d0      	lsls	r0, r2, #31
 800bc6a:	d404      	bmi.n	800bc76 <_fflush_r+0x3a>
 800bc6c:	0599      	lsls	r1, r3, #22
 800bc6e:	d402      	bmi.n	800bc76 <_fflush_r+0x3a>
 800bc70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc72:	f000 f915 	bl	800bea0 <__retarget_lock_acquire_recursive>
 800bc76:	4628      	mov	r0, r5
 800bc78:	4621      	mov	r1, r4
 800bc7a:	f7ff ff59 	bl	800bb30 <__sflush_r>
 800bc7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc80:	07da      	lsls	r2, r3, #31
 800bc82:	4605      	mov	r5, r0
 800bc84:	d4e0      	bmi.n	800bc48 <_fflush_r+0xc>
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	059b      	lsls	r3, r3, #22
 800bc8a:	d4dd      	bmi.n	800bc48 <_fflush_r+0xc>
 800bc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc8e:	f000 f908 	bl	800bea2 <__retarget_lock_release_recursive>
 800bc92:	e7d9      	b.n	800bc48 <_fflush_r+0xc>
 800bc94:	4b05      	ldr	r3, [pc, #20]	; (800bcac <_fflush_r+0x70>)
 800bc96:	429c      	cmp	r4, r3
 800bc98:	d101      	bne.n	800bc9e <_fflush_r+0x62>
 800bc9a:	68ac      	ldr	r4, [r5, #8]
 800bc9c:	e7df      	b.n	800bc5e <_fflush_r+0x22>
 800bc9e:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <_fflush_r+0x74>)
 800bca0:	429c      	cmp	r4, r3
 800bca2:	bf08      	it	eq
 800bca4:	68ec      	ldreq	r4, [r5, #12]
 800bca6:	e7da      	b.n	800bc5e <_fflush_r+0x22>
 800bca8:	080f1378 	.word	0x080f1378
 800bcac:	080f1398 	.word	0x080f1398
 800bcb0:	080f1358 	.word	0x080f1358

0800bcb4 <std>:
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	4604      	mov	r4, r0
 800bcba:	e9c0 3300 	strd	r3, r3, [r0]
 800bcbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcc2:	6083      	str	r3, [r0, #8]
 800bcc4:	8181      	strh	r1, [r0, #12]
 800bcc6:	6643      	str	r3, [r0, #100]	; 0x64
 800bcc8:	81c2      	strh	r2, [r0, #14]
 800bcca:	6183      	str	r3, [r0, #24]
 800bccc:	4619      	mov	r1, r3
 800bcce:	2208      	movs	r2, #8
 800bcd0:	305c      	adds	r0, #92	; 0x5c
 800bcd2:	f7ff f9fb 	bl	800b0cc <memset>
 800bcd6:	4b05      	ldr	r3, [pc, #20]	; (800bcec <std+0x38>)
 800bcd8:	6263      	str	r3, [r4, #36]	; 0x24
 800bcda:	4b05      	ldr	r3, [pc, #20]	; (800bcf0 <std+0x3c>)
 800bcdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcde:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <std+0x40>)
 800bce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bce2:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <std+0x44>)
 800bce4:	6224      	str	r4, [r4, #32]
 800bce6:	6323      	str	r3, [r4, #48]	; 0x30
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	bf00      	nop
 800bcec:	0800c00d 	.word	0x0800c00d
 800bcf0:	0800c02f 	.word	0x0800c02f
 800bcf4:	0800c067 	.word	0x0800c067
 800bcf8:	0800c08b 	.word	0x0800c08b

0800bcfc <_cleanup_r>:
 800bcfc:	4901      	ldr	r1, [pc, #4]	; (800bd04 <_cleanup_r+0x8>)
 800bcfe:	f000 b8af 	b.w	800be60 <_fwalk_reent>
 800bd02:	bf00      	nop
 800bd04:	0800bc3d 	.word	0x0800bc3d

0800bd08 <__sfmoreglue>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	1e4a      	subs	r2, r1, #1
 800bd0c:	2568      	movs	r5, #104	; 0x68
 800bd0e:	4355      	muls	r5, r2
 800bd10:	460e      	mov	r6, r1
 800bd12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd16:	f7ff faeb 	bl	800b2f0 <_malloc_r>
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	b140      	cbz	r0, 800bd30 <__sfmoreglue+0x28>
 800bd1e:	2100      	movs	r1, #0
 800bd20:	e9c0 1600 	strd	r1, r6, [r0]
 800bd24:	300c      	adds	r0, #12
 800bd26:	60a0      	str	r0, [r4, #8]
 800bd28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd2c:	f7ff f9ce 	bl	800b0cc <memset>
 800bd30:	4620      	mov	r0, r4
 800bd32:	bd70      	pop	{r4, r5, r6, pc}

0800bd34 <__sfp_lock_acquire>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__sfp_lock_acquire+0x8>)
 800bd36:	f000 b8b3 	b.w	800bea0 <__retarget_lock_acquire_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	20000830 	.word	0x20000830

0800bd40 <__sfp_lock_release>:
 800bd40:	4801      	ldr	r0, [pc, #4]	; (800bd48 <__sfp_lock_release+0x8>)
 800bd42:	f000 b8ae 	b.w	800bea2 <__retarget_lock_release_recursive>
 800bd46:	bf00      	nop
 800bd48:	20000830 	.word	0x20000830

0800bd4c <__sinit_lock_acquire>:
 800bd4c:	4801      	ldr	r0, [pc, #4]	; (800bd54 <__sinit_lock_acquire+0x8>)
 800bd4e:	f000 b8a7 	b.w	800bea0 <__retarget_lock_acquire_recursive>
 800bd52:	bf00      	nop
 800bd54:	2000082b 	.word	0x2000082b

0800bd58 <__sinit_lock_release>:
 800bd58:	4801      	ldr	r0, [pc, #4]	; (800bd60 <__sinit_lock_release+0x8>)
 800bd5a:	f000 b8a2 	b.w	800bea2 <__retarget_lock_release_recursive>
 800bd5e:	bf00      	nop
 800bd60:	2000082b 	.word	0x2000082b

0800bd64 <__sinit>:
 800bd64:	b510      	push	{r4, lr}
 800bd66:	4604      	mov	r4, r0
 800bd68:	f7ff fff0 	bl	800bd4c <__sinit_lock_acquire>
 800bd6c:	69a3      	ldr	r3, [r4, #24]
 800bd6e:	b11b      	cbz	r3, 800bd78 <__sinit+0x14>
 800bd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd74:	f7ff bff0 	b.w	800bd58 <__sinit_lock_release>
 800bd78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd7c:	6523      	str	r3, [r4, #80]	; 0x50
 800bd7e:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <__sinit+0x68>)
 800bd80:	4a13      	ldr	r2, [pc, #76]	; (800bdd0 <__sinit+0x6c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd86:	42a3      	cmp	r3, r4
 800bd88:	bf04      	itt	eq
 800bd8a:	2301      	moveq	r3, #1
 800bd8c:	61a3      	streq	r3, [r4, #24]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 f820 	bl	800bdd4 <__sfp>
 800bd94:	6060      	str	r0, [r4, #4]
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 f81c 	bl	800bdd4 <__sfp>
 800bd9c:	60a0      	str	r0, [r4, #8]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 f818 	bl	800bdd4 <__sfp>
 800bda4:	2200      	movs	r2, #0
 800bda6:	60e0      	str	r0, [r4, #12]
 800bda8:	2104      	movs	r1, #4
 800bdaa:	6860      	ldr	r0, [r4, #4]
 800bdac:	f7ff ff82 	bl	800bcb4 <std>
 800bdb0:	68a0      	ldr	r0, [r4, #8]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	2109      	movs	r1, #9
 800bdb6:	f7ff ff7d 	bl	800bcb4 <std>
 800bdba:	68e0      	ldr	r0, [r4, #12]
 800bdbc:	2202      	movs	r2, #2
 800bdbe:	2112      	movs	r1, #18
 800bdc0:	f7ff ff78 	bl	800bcb4 <std>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	61a3      	str	r3, [r4, #24]
 800bdc8:	e7d2      	b.n	800bd70 <__sinit+0xc>
 800bdca:	bf00      	nop
 800bdcc:	080f1248 	.word	0x080f1248
 800bdd0:	0800bcfd 	.word	0x0800bcfd

0800bdd4 <__sfp>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	4607      	mov	r7, r0
 800bdd8:	f7ff ffac 	bl	800bd34 <__sfp_lock_acquire>
 800bddc:	4b1e      	ldr	r3, [pc, #120]	; (800be58 <__sfp+0x84>)
 800bdde:	681e      	ldr	r6, [r3, #0]
 800bde0:	69b3      	ldr	r3, [r6, #24]
 800bde2:	b913      	cbnz	r3, 800bdea <__sfp+0x16>
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff ffbd 	bl	800bd64 <__sinit>
 800bdea:	3648      	adds	r6, #72	; 0x48
 800bdec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	d503      	bpl.n	800bdfc <__sfp+0x28>
 800bdf4:	6833      	ldr	r3, [r6, #0]
 800bdf6:	b30b      	cbz	r3, 800be3c <__sfp+0x68>
 800bdf8:	6836      	ldr	r6, [r6, #0]
 800bdfa:	e7f7      	b.n	800bdec <__sfp+0x18>
 800bdfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be00:	b9d5      	cbnz	r5, 800be38 <__sfp+0x64>
 800be02:	4b16      	ldr	r3, [pc, #88]	; (800be5c <__sfp+0x88>)
 800be04:	60e3      	str	r3, [r4, #12]
 800be06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be0a:	6665      	str	r5, [r4, #100]	; 0x64
 800be0c:	f000 f847 	bl	800be9e <__retarget_lock_init_recursive>
 800be10:	f7ff ff96 	bl	800bd40 <__sfp_lock_release>
 800be14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be1c:	6025      	str	r5, [r4, #0]
 800be1e:	61a5      	str	r5, [r4, #24]
 800be20:	2208      	movs	r2, #8
 800be22:	4629      	mov	r1, r5
 800be24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be28:	f7ff f950 	bl	800b0cc <memset>
 800be2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be34:	4620      	mov	r0, r4
 800be36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be38:	3468      	adds	r4, #104	; 0x68
 800be3a:	e7d9      	b.n	800bdf0 <__sfp+0x1c>
 800be3c:	2104      	movs	r1, #4
 800be3e:	4638      	mov	r0, r7
 800be40:	f7ff ff62 	bl	800bd08 <__sfmoreglue>
 800be44:	4604      	mov	r4, r0
 800be46:	6030      	str	r0, [r6, #0]
 800be48:	2800      	cmp	r0, #0
 800be4a:	d1d5      	bne.n	800bdf8 <__sfp+0x24>
 800be4c:	f7ff ff78 	bl	800bd40 <__sfp_lock_release>
 800be50:	230c      	movs	r3, #12
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	e7ee      	b.n	800be34 <__sfp+0x60>
 800be56:	bf00      	nop
 800be58:	080f1248 	.word	0x080f1248
 800be5c:	ffff0001 	.word	0xffff0001

0800be60 <_fwalk_reent>:
 800be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4606      	mov	r6, r0
 800be66:	4688      	mov	r8, r1
 800be68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be6c:	2700      	movs	r7, #0
 800be6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be72:	f1b9 0901 	subs.w	r9, r9, #1
 800be76:	d505      	bpl.n	800be84 <_fwalk_reent+0x24>
 800be78:	6824      	ldr	r4, [r4, #0]
 800be7a:	2c00      	cmp	r4, #0
 800be7c:	d1f7      	bne.n	800be6e <_fwalk_reent+0xe>
 800be7e:	4638      	mov	r0, r7
 800be80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be84:	89ab      	ldrh	r3, [r5, #12]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d907      	bls.n	800be9a <_fwalk_reent+0x3a>
 800be8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be8e:	3301      	adds	r3, #1
 800be90:	d003      	beq.n	800be9a <_fwalk_reent+0x3a>
 800be92:	4629      	mov	r1, r5
 800be94:	4630      	mov	r0, r6
 800be96:	47c0      	blx	r8
 800be98:	4307      	orrs	r7, r0
 800be9a:	3568      	adds	r5, #104	; 0x68
 800be9c:	e7e9      	b.n	800be72 <_fwalk_reent+0x12>

0800be9e <__retarget_lock_init_recursive>:
 800be9e:	4770      	bx	lr

0800bea0 <__retarget_lock_acquire_recursive>:
 800bea0:	4770      	bx	lr

0800bea2 <__retarget_lock_release_recursive>:
 800bea2:	4770      	bx	lr

0800bea4 <__swhatbuf_r>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	460e      	mov	r6, r1
 800bea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beac:	2900      	cmp	r1, #0
 800beae:	b096      	sub	sp, #88	; 0x58
 800beb0:	4614      	mov	r4, r2
 800beb2:	461d      	mov	r5, r3
 800beb4:	da07      	bge.n	800bec6 <__swhatbuf_r+0x22>
 800beb6:	2300      	movs	r3, #0
 800beb8:	602b      	str	r3, [r5, #0]
 800beba:	89b3      	ldrh	r3, [r6, #12]
 800bebc:	061a      	lsls	r2, r3, #24
 800bebe:	d410      	bmi.n	800bee2 <__swhatbuf_r+0x3e>
 800bec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec4:	e00e      	b.n	800bee4 <__swhatbuf_r+0x40>
 800bec6:	466a      	mov	r2, sp
 800bec8:	f000 f906 	bl	800c0d8 <_fstat_r>
 800becc:	2800      	cmp	r0, #0
 800bece:	dbf2      	blt.n	800beb6 <__swhatbuf_r+0x12>
 800bed0:	9a01      	ldr	r2, [sp, #4]
 800bed2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bed6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800beda:	425a      	negs	r2, r3
 800bedc:	415a      	adcs	r2, r3
 800bede:	602a      	str	r2, [r5, #0]
 800bee0:	e7ee      	b.n	800bec0 <__swhatbuf_r+0x1c>
 800bee2:	2340      	movs	r3, #64	; 0x40
 800bee4:	2000      	movs	r0, #0
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	b016      	add	sp, #88	; 0x58
 800beea:	bd70      	pop	{r4, r5, r6, pc}

0800beec <__smakebuf_r>:
 800beec:	898b      	ldrh	r3, [r1, #12]
 800beee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bef0:	079d      	lsls	r5, r3, #30
 800bef2:	4606      	mov	r6, r0
 800bef4:	460c      	mov	r4, r1
 800bef6:	d507      	bpl.n	800bf08 <__smakebuf_r+0x1c>
 800bef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	6123      	str	r3, [r4, #16]
 800bf00:	2301      	movs	r3, #1
 800bf02:	6163      	str	r3, [r4, #20]
 800bf04:	b002      	add	sp, #8
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	ab01      	add	r3, sp, #4
 800bf0a:	466a      	mov	r2, sp
 800bf0c:	f7ff ffca 	bl	800bea4 <__swhatbuf_r>
 800bf10:	9900      	ldr	r1, [sp, #0]
 800bf12:	4605      	mov	r5, r0
 800bf14:	4630      	mov	r0, r6
 800bf16:	f7ff f9eb 	bl	800b2f0 <_malloc_r>
 800bf1a:	b948      	cbnz	r0, 800bf30 <__smakebuf_r+0x44>
 800bf1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf20:	059a      	lsls	r2, r3, #22
 800bf22:	d4ef      	bmi.n	800bf04 <__smakebuf_r+0x18>
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	f043 0302 	orr.w	r3, r3, #2
 800bf2c:	81a3      	strh	r3, [r4, #12]
 800bf2e:	e7e3      	b.n	800bef8 <__smakebuf_r+0xc>
 800bf30:	4b0d      	ldr	r3, [pc, #52]	; (800bf68 <__smakebuf_r+0x7c>)
 800bf32:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf34:	89a3      	ldrh	r3, [r4, #12]
 800bf36:	6020      	str	r0, [r4, #0]
 800bf38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf3c:	81a3      	strh	r3, [r4, #12]
 800bf3e:	9b00      	ldr	r3, [sp, #0]
 800bf40:	6163      	str	r3, [r4, #20]
 800bf42:	9b01      	ldr	r3, [sp, #4]
 800bf44:	6120      	str	r0, [r4, #16]
 800bf46:	b15b      	cbz	r3, 800bf60 <__smakebuf_r+0x74>
 800bf48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f000 f8d5 	bl	800c0fc <_isatty_r>
 800bf52:	b128      	cbz	r0, 800bf60 <__smakebuf_r+0x74>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f023 0303 	bic.w	r3, r3, #3
 800bf5a:	f043 0301 	orr.w	r3, r3, #1
 800bf5e:	81a3      	strh	r3, [r4, #12]
 800bf60:	89a0      	ldrh	r0, [r4, #12]
 800bf62:	4305      	orrs	r5, r0
 800bf64:	81a5      	strh	r5, [r4, #12]
 800bf66:	e7cd      	b.n	800bf04 <__smakebuf_r+0x18>
 800bf68:	0800bcfd 	.word	0x0800bcfd

0800bf6c <__malloc_lock>:
 800bf6c:	4801      	ldr	r0, [pc, #4]	; (800bf74 <__malloc_lock+0x8>)
 800bf6e:	f7ff bf97 	b.w	800bea0 <__retarget_lock_acquire_recursive>
 800bf72:	bf00      	nop
 800bf74:	2000082c 	.word	0x2000082c

0800bf78 <__malloc_unlock>:
 800bf78:	4801      	ldr	r0, [pc, #4]	; (800bf80 <__malloc_unlock+0x8>)
 800bf7a:	f7ff bf92 	b.w	800bea2 <__retarget_lock_release_recursive>
 800bf7e:	bf00      	nop
 800bf80:	2000082c 	.word	0x2000082c

0800bf84 <_raise_r>:
 800bf84:	291f      	cmp	r1, #31
 800bf86:	b538      	push	{r3, r4, r5, lr}
 800bf88:	4604      	mov	r4, r0
 800bf8a:	460d      	mov	r5, r1
 800bf8c:	d904      	bls.n	800bf98 <_raise_r+0x14>
 800bf8e:	2316      	movs	r3, #22
 800bf90:	6003      	str	r3, [r0, #0]
 800bf92:	f04f 30ff 	mov.w	r0, #4294967295
 800bf96:	bd38      	pop	{r3, r4, r5, pc}
 800bf98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf9a:	b112      	cbz	r2, 800bfa2 <_raise_r+0x1e>
 800bf9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfa0:	b94b      	cbnz	r3, 800bfb6 <_raise_r+0x32>
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 f830 	bl	800c008 <_getpid_r>
 800bfa8:	462a      	mov	r2, r5
 800bfaa:	4601      	mov	r1, r0
 800bfac:	4620      	mov	r0, r4
 800bfae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfb2:	f000 b817 	b.w	800bfe4 <_kill_r>
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d00a      	beq.n	800bfd0 <_raise_r+0x4c>
 800bfba:	1c59      	adds	r1, r3, #1
 800bfbc:	d103      	bne.n	800bfc6 <_raise_r+0x42>
 800bfbe:	2316      	movs	r3, #22
 800bfc0:	6003      	str	r3, [r0, #0]
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	e7e7      	b.n	800bf96 <_raise_r+0x12>
 800bfc6:	2400      	movs	r4, #0
 800bfc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfcc:	4628      	mov	r0, r5
 800bfce:	4798      	blx	r3
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	e7e0      	b.n	800bf96 <_raise_r+0x12>

0800bfd4 <raise>:
 800bfd4:	4b02      	ldr	r3, [pc, #8]	; (800bfe0 <raise+0xc>)
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	f7ff bfd3 	b.w	800bf84 <_raise_r>
 800bfde:	bf00      	nop
 800bfe0:	20000068 	.word	0x20000068

0800bfe4 <_kill_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d07      	ldr	r5, [pc, #28]	; (800c004 <_kill_r+0x20>)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4604      	mov	r4, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	602b      	str	r3, [r5, #0]
 800bff2:	f7f8 fb0f 	bl	8004614 <_kill>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	d102      	bne.n	800c000 <_kill_r+0x1c>
 800bffa:	682b      	ldr	r3, [r5, #0]
 800bffc:	b103      	cbz	r3, 800c000 <_kill_r+0x1c>
 800bffe:	6023      	str	r3, [r4, #0]
 800c000:	bd38      	pop	{r3, r4, r5, pc}
 800c002:	bf00      	nop
 800c004:	20000834 	.word	0x20000834

0800c008 <_getpid_r>:
 800c008:	f7f8 bafc 	b.w	8004604 <_getpid>

0800c00c <__sread>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	460c      	mov	r4, r1
 800c010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c014:	f000 f894 	bl	800c140 <_read_r>
 800c018:	2800      	cmp	r0, #0
 800c01a:	bfab      	itete	ge
 800c01c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c01e:	89a3      	ldrhlt	r3, [r4, #12]
 800c020:	181b      	addge	r3, r3, r0
 800c022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c026:	bfac      	ite	ge
 800c028:	6563      	strge	r3, [r4, #84]	; 0x54
 800c02a:	81a3      	strhlt	r3, [r4, #12]
 800c02c:	bd10      	pop	{r4, pc}

0800c02e <__swrite>:
 800c02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c032:	461f      	mov	r7, r3
 800c034:	898b      	ldrh	r3, [r1, #12]
 800c036:	05db      	lsls	r3, r3, #23
 800c038:	4605      	mov	r5, r0
 800c03a:	460c      	mov	r4, r1
 800c03c:	4616      	mov	r6, r2
 800c03e:	d505      	bpl.n	800c04c <__swrite+0x1e>
 800c040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c044:	2302      	movs	r3, #2
 800c046:	2200      	movs	r2, #0
 800c048:	f000 f868 	bl	800c11c <_lseek_r>
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c056:	81a3      	strh	r3, [r4, #12]
 800c058:	4632      	mov	r2, r6
 800c05a:	463b      	mov	r3, r7
 800c05c:	4628      	mov	r0, r5
 800c05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c062:	f000 b817 	b.w	800c094 <_write_r>

0800c066 <__sseek>:
 800c066:	b510      	push	{r4, lr}
 800c068:	460c      	mov	r4, r1
 800c06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06e:	f000 f855 	bl	800c11c <_lseek_r>
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	bf15      	itete	ne
 800c078:	6560      	strne	r0, [r4, #84]	; 0x54
 800c07a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c07e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c082:	81a3      	strheq	r3, [r4, #12]
 800c084:	bf18      	it	ne
 800c086:	81a3      	strhne	r3, [r4, #12]
 800c088:	bd10      	pop	{r4, pc}

0800c08a <__sclose>:
 800c08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c08e:	f000 b813 	b.w	800c0b8 <_close_r>
	...

0800c094 <_write_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d07      	ldr	r5, [pc, #28]	; (800c0b4 <_write_r+0x20>)
 800c098:	4604      	mov	r4, r0
 800c09a:	4608      	mov	r0, r1
 800c09c:	4611      	mov	r1, r2
 800c09e:	2200      	movs	r2, #0
 800c0a0:	602a      	str	r2, [r5, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f7f8 faed 	bl	8004682 <_write>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	d102      	bne.n	800c0b2 <_write_r+0x1e>
 800c0ac:	682b      	ldr	r3, [r5, #0]
 800c0ae:	b103      	cbz	r3, 800c0b2 <_write_r+0x1e>
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	20000834 	.word	0x20000834

0800c0b8 <_close_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d06      	ldr	r5, [pc, #24]	; (800c0d4 <_close_r+0x1c>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	f7f8 faf9 	bl	80046ba <_close>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_close_r+0x1a>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_close_r+0x1a>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	20000834 	.word	0x20000834

0800c0d8 <_fstat_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d07      	ldr	r5, [pc, #28]	; (800c0f8 <_fstat_r+0x20>)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4604      	mov	r4, r0
 800c0e0:	4608      	mov	r0, r1
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	f7f8 faf4 	bl	80046d2 <_fstat>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d102      	bne.n	800c0f4 <_fstat_r+0x1c>
 800c0ee:	682b      	ldr	r3, [r5, #0]
 800c0f0:	b103      	cbz	r3, 800c0f4 <_fstat_r+0x1c>
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	bd38      	pop	{r3, r4, r5, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000834 	.word	0x20000834

0800c0fc <_isatty_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d06      	ldr	r5, [pc, #24]	; (800c118 <_isatty_r+0x1c>)
 800c100:	2300      	movs	r3, #0
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	602b      	str	r3, [r5, #0]
 800c108:	f7f8 faf3 	bl	80046f2 <_isatty>
 800c10c:	1c43      	adds	r3, r0, #1
 800c10e:	d102      	bne.n	800c116 <_isatty_r+0x1a>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	b103      	cbz	r3, 800c116 <_isatty_r+0x1a>
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	bd38      	pop	{r3, r4, r5, pc}
 800c118:	20000834 	.word	0x20000834

0800c11c <_lseek_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d07      	ldr	r5, [pc, #28]	; (800c13c <_lseek_r+0x20>)
 800c120:	4604      	mov	r4, r0
 800c122:	4608      	mov	r0, r1
 800c124:	4611      	mov	r1, r2
 800c126:	2200      	movs	r2, #0
 800c128:	602a      	str	r2, [r5, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	f7f8 faec 	bl	8004708 <_lseek>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_lseek_r+0x1e>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_lseek_r+0x1e>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	20000834 	.word	0x20000834

0800c140 <_read_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4d07      	ldr	r5, [pc, #28]	; (800c160 <_read_r+0x20>)
 800c144:	4604      	mov	r4, r0
 800c146:	4608      	mov	r0, r1
 800c148:	4611      	mov	r1, r2
 800c14a:	2200      	movs	r2, #0
 800c14c:	602a      	str	r2, [r5, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	f7f8 fa7a 	bl	8004648 <_read>
 800c154:	1c43      	adds	r3, r0, #1
 800c156:	d102      	bne.n	800c15e <_read_r+0x1e>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	b103      	cbz	r3, 800c15e <_read_r+0x1e>
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	20000834 	.word	0x20000834

0800c164 <pow>:
 800c164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c168:	ec59 8b10 	vmov	r8, r9, d0
 800c16c:	ec57 6b11 	vmov	r6, r7, d1
 800c170:	f000 f8da 	bl	800c328 <__ieee754_pow>
 800c174:	4b4e      	ldr	r3, [pc, #312]	; (800c2b0 <pow+0x14c>)
 800c176:	f993 3000 	ldrsb.w	r3, [r3]
 800c17a:	3301      	adds	r3, #1
 800c17c:	ec55 4b10 	vmov	r4, r5, d0
 800c180:	d015      	beq.n	800c1ae <pow+0x4a>
 800c182:	4632      	mov	r2, r6
 800c184:	463b      	mov	r3, r7
 800c186:	4630      	mov	r0, r6
 800c188:	4639      	mov	r1, r7
 800c18a:	f7f4 fcc7 	bl	8000b1c <__aeabi_dcmpun>
 800c18e:	b970      	cbnz	r0, 800c1ae <pow+0x4a>
 800c190:	4642      	mov	r2, r8
 800c192:	464b      	mov	r3, r9
 800c194:	4640      	mov	r0, r8
 800c196:	4649      	mov	r1, r9
 800c198:	f7f4 fcc0 	bl	8000b1c <__aeabi_dcmpun>
 800c19c:	2200      	movs	r2, #0
 800c19e:	2300      	movs	r3, #0
 800c1a0:	b148      	cbz	r0, 800c1b6 <pow+0x52>
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	f7f4 fc87 	bl	8000ab8 <__aeabi_dcmpeq>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d17d      	bne.n	800c2aa <pow+0x146>
 800c1ae:	ec45 4b10 	vmov	d0, r4, r5
 800c1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	4649      	mov	r1, r9
 800c1ba:	f7f4 fc7d 	bl	8000ab8 <__aeabi_dcmpeq>
 800c1be:	b1e0      	cbz	r0, 800c1fa <pow+0x96>
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	4639      	mov	r1, r7
 800c1c8:	f7f4 fc76 	bl	8000ab8 <__aeabi_dcmpeq>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d16c      	bne.n	800c2aa <pow+0x146>
 800c1d0:	ec47 6b10 	vmov	d0, r6, r7
 800c1d4:	f000 fe87 	bl	800cee6 <finite>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d0e8      	beq.n	800c1ae <pow+0x4a>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2300      	movs	r3, #0
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	f7f4 fc72 	bl	8000acc <__aeabi_dcmplt>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d0e0      	beq.n	800c1ae <pow+0x4a>
 800c1ec:	f7fe ff2a 	bl	800b044 <__errno>
 800c1f0:	2321      	movs	r3, #33	; 0x21
 800c1f2:	6003      	str	r3, [r0, #0]
 800c1f4:	2400      	movs	r4, #0
 800c1f6:	4d2f      	ldr	r5, [pc, #188]	; (800c2b4 <pow+0x150>)
 800c1f8:	e7d9      	b.n	800c1ae <pow+0x4a>
 800c1fa:	ec45 4b10 	vmov	d0, r4, r5
 800c1fe:	f000 fe72 	bl	800cee6 <finite>
 800c202:	bbb8      	cbnz	r0, 800c274 <pow+0x110>
 800c204:	ec49 8b10 	vmov	d0, r8, r9
 800c208:	f000 fe6d 	bl	800cee6 <finite>
 800c20c:	b390      	cbz	r0, 800c274 <pow+0x110>
 800c20e:	ec47 6b10 	vmov	d0, r6, r7
 800c212:	f000 fe68 	bl	800cee6 <finite>
 800c216:	b368      	cbz	r0, 800c274 <pow+0x110>
 800c218:	4622      	mov	r2, r4
 800c21a:	462b      	mov	r3, r5
 800c21c:	4620      	mov	r0, r4
 800c21e:	4629      	mov	r1, r5
 800c220:	f7f4 fc7c 	bl	8000b1c <__aeabi_dcmpun>
 800c224:	b160      	cbz	r0, 800c240 <pow+0xdc>
 800c226:	f7fe ff0d 	bl	800b044 <__errno>
 800c22a:	2321      	movs	r3, #33	; 0x21
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	2200      	movs	r2, #0
 800c230:	2300      	movs	r3, #0
 800c232:	4610      	mov	r0, r2
 800c234:	4619      	mov	r1, r3
 800c236:	f7f4 fb01 	bl	800083c <__aeabi_ddiv>
 800c23a:	4604      	mov	r4, r0
 800c23c:	460d      	mov	r5, r1
 800c23e:	e7b6      	b.n	800c1ae <pow+0x4a>
 800c240:	f7fe ff00 	bl	800b044 <__errno>
 800c244:	2322      	movs	r3, #34	; 0x22
 800c246:	6003      	str	r3, [r0, #0]
 800c248:	2200      	movs	r2, #0
 800c24a:	2300      	movs	r3, #0
 800c24c:	4640      	mov	r0, r8
 800c24e:	4649      	mov	r1, r9
 800c250:	f7f4 fc3c 	bl	8000acc <__aeabi_dcmplt>
 800c254:	2400      	movs	r4, #0
 800c256:	b158      	cbz	r0, 800c270 <pow+0x10c>
 800c258:	ec47 6b10 	vmov	d0, r6, r7
 800c25c:	f000 fe58 	bl	800cf10 <rint>
 800c260:	4632      	mov	r2, r6
 800c262:	ec51 0b10 	vmov	r0, r1, d0
 800c266:	463b      	mov	r3, r7
 800c268:	f7f4 fc26 	bl	8000ab8 <__aeabi_dcmpeq>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d0c2      	beq.n	800c1f6 <pow+0x92>
 800c270:	4d11      	ldr	r5, [pc, #68]	; (800c2b8 <pow+0x154>)
 800c272:	e79c      	b.n	800c1ae <pow+0x4a>
 800c274:	2200      	movs	r2, #0
 800c276:	2300      	movs	r3, #0
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f4 fc1c 	bl	8000ab8 <__aeabi_dcmpeq>
 800c280:	2800      	cmp	r0, #0
 800c282:	d094      	beq.n	800c1ae <pow+0x4a>
 800c284:	ec49 8b10 	vmov	d0, r8, r9
 800c288:	f000 fe2d 	bl	800cee6 <finite>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d08e      	beq.n	800c1ae <pow+0x4a>
 800c290:	ec47 6b10 	vmov	d0, r6, r7
 800c294:	f000 fe27 	bl	800cee6 <finite>
 800c298:	2800      	cmp	r0, #0
 800c29a:	d088      	beq.n	800c1ae <pow+0x4a>
 800c29c:	f7fe fed2 	bl	800b044 <__errno>
 800c2a0:	2322      	movs	r3, #34	; 0x22
 800c2a2:	6003      	str	r3, [r0, #0]
 800c2a4:	2400      	movs	r4, #0
 800c2a6:	2500      	movs	r5, #0
 800c2a8:	e781      	b.n	800c1ae <pow+0x4a>
 800c2aa:	4d04      	ldr	r5, [pc, #16]	; (800c2bc <pow+0x158>)
 800c2ac:	2400      	movs	r4, #0
 800c2ae:	e77e      	b.n	800c1ae <pow+0x4a>
 800c2b0:	200000cc 	.word	0x200000cc
 800c2b4:	fff00000 	.word	0xfff00000
 800c2b8:	7ff00000 	.word	0x7ff00000
 800c2bc:	3ff00000 	.word	0x3ff00000

0800c2c0 <sqrt>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	ed2d 8b02 	vpush	{d8}
 800c2c6:	ec55 4b10 	vmov	r4, r5, d0
 800c2ca:	f000 fd4f 	bl	800cd6c <__ieee754_sqrt>
 800c2ce:	4b15      	ldr	r3, [pc, #84]	; (800c324 <sqrt+0x64>)
 800c2d0:	eeb0 8a40 	vmov.f32	s16, s0
 800c2d4:	eef0 8a60 	vmov.f32	s17, s1
 800c2d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	d019      	beq.n	800c314 <sqrt+0x54>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f4 fc18 	bl	8000b1c <__aeabi_dcmpun>
 800c2ec:	b990      	cbnz	r0, 800c314 <sqrt+0x54>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	f7f4 fbe9 	bl	8000acc <__aeabi_dcmplt>
 800c2fa:	b158      	cbz	r0, 800c314 <sqrt+0x54>
 800c2fc:	f7fe fea2 	bl	800b044 <__errno>
 800c300:	2321      	movs	r3, #33	; 0x21
 800c302:	6003      	str	r3, [r0, #0]
 800c304:	2200      	movs	r2, #0
 800c306:	2300      	movs	r3, #0
 800c308:	4610      	mov	r0, r2
 800c30a:	4619      	mov	r1, r3
 800c30c:	f7f4 fa96 	bl	800083c <__aeabi_ddiv>
 800c310:	ec41 0b18 	vmov	d8, r0, r1
 800c314:	eeb0 0a48 	vmov.f32	s0, s16
 800c318:	eef0 0a68 	vmov.f32	s1, s17
 800c31c:	ecbd 8b02 	vpop	{d8}
 800c320:	bd38      	pop	{r3, r4, r5, pc}
 800c322:	bf00      	nop
 800c324:	200000cc 	.word	0x200000cc

0800c328 <__ieee754_pow>:
 800c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32c:	ed2d 8b06 	vpush	{d8-d10}
 800c330:	b08d      	sub	sp, #52	; 0x34
 800c332:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c336:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c33a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c33e:	ea56 0100 	orrs.w	r1, r6, r0
 800c342:	ec53 2b10 	vmov	r2, r3, d0
 800c346:	f000 84d1 	beq.w	800ccec <__ieee754_pow+0x9c4>
 800c34a:	497f      	ldr	r1, [pc, #508]	; (800c548 <__ieee754_pow+0x220>)
 800c34c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c350:	428c      	cmp	r4, r1
 800c352:	ee10 8a10 	vmov	r8, s0
 800c356:	4699      	mov	r9, r3
 800c358:	dc09      	bgt.n	800c36e <__ieee754_pow+0x46>
 800c35a:	d103      	bne.n	800c364 <__ieee754_pow+0x3c>
 800c35c:	b97a      	cbnz	r2, 800c37e <__ieee754_pow+0x56>
 800c35e:	42a6      	cmp	r6, r4
 800c360:	dd02      	ble.n	800c368 <__ieee754_pow+0x40>
 800c362:	e00c      	b.n	800c37e <__ieee754_pow+0x56>
 800c364:	428e      	cmp	r6, r1
 800c366:	dc02      	bgt.n	800c36e <__ieee754_pow+0x46>
 800c368:	428e      	cmp	r6, r1
 800c36a:	d110      	bne.n	800c38e <__ieee754_pow+0x66>
 800c36c:	b178      	cbz	r0, 800c38e <__ieee754_pow+0x66>
 800c36e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c372:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c376:	ea54 0308 	orrs.w	r3, r4, r8
 800c37a:	f000 84b7 	beq.w	800ccec <__ieee754_pow+0x9c4>
 800c37e:	4873      	ldr	r0, [pc, #460]	; (800c54c <__ieee754_pow+0x224>)
 800c380:	b00d      	add	sp, #52	; 0x34
 800c382:	ecbd 8b06 	vpop	{d8-d10}
 800c386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	f000 bdb9 	b.w	800cf00 <nan>
 800c38e:	f1b9 0f00 	cmp.w	r9, #0
 800c392:	da36      	bge.n	800c402 <__ieee754_pow+0xda>
 800c394:	496e      	ldr	r1, [pc, #440]	; (800c550 <__ieee754_pow+0x228>)
 800c396:	428e      	cmp	r6, r1
 800c398:	dc51      	bgt.n	800c43e <__ieee754_pow+0x116>
 800c39a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c39e:	428e      	cmp	r6, r1
 800c3a0:	f340 84af 	ble.w	800cd02 <__ieee754_pow+0x9da>
 800c3a4:	1531      	asrs	r1, r6, #20
 800c3a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c3aa:	2914      	cmp	r1, #20
 800c3ac:	dd0f      	ble.n	800c3ce <__ieee754_pow+0xa6>
 800c3ae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c3b2:	fa20 fc01 	lsr.w	ip, r0, r1
 800c3b6:	fa0c f101 	lsl.w	r1, ip, r1
 800c3ba:	4281      	cmp	r1, r0
 800c3bc:	f040 84a1 	bne.w	800cd02 <__ieee754_pow+0x9da>
 800c3c0:	f00c 0c01 	and.w	ip, ip, #1
 800c3c4:	f1cc 0102 	rsb	r1, ip, #2
 800c3c8:	9100      	str	r1, [sp, #0]
 800c3ca:	b180      	cbz	r0, 800c3ee <__ieee754_pow+0xc6>
 800c3cc:	e059      	b.n	800c482 <__ieee754_pow+0x15a>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d155      	bne.n	800c47e <__ieee754_pow+0x156>
 800c3d2:	f1c1 0114 	rsb	r1, r1, #20
 800c3d6:	fa46 fc01 	asr.w	ip, r6, r1
 800c3da:	fa0c f101 	lsl.w	r1, ip, r1
 800c3de:	42b1      	cmp	r1, r6
 800c3e0:	f040 848c 	bne.w	800ccfc <__ieee754_pow+0x9d4>
 800c3e4:	f00c 0c01 	and.w	ip, ip, #1
 800c3e8:	f1cc 0102 	rsb	r1, ip, #2
 800c3ec:	9100      	str	r1, [sp, #0]
 800c3ee:	4959      	ldr	r1, [pc, #356]	; (800c554 <__ieee754_pow+0x22c>)
 800c3f0:	428e      	cmp	r6, r1
 800c3f2:	d12d      	bne.n	800c450 <__ieee754_pow+0x128>
 800c3f4:	2f00      	cmp	r7, #0
 800c3f6:	da79      	bge.n	800c4ec <__ieee754_pow+0x1c4>
 800c3f8:	4956      	ldr	r1, [pc, #344]	; (800c554 <__ieee754_pow+0x22c>)
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	f7f4 fa1e 	bl	800083c <__aeabi_ddiv>
 800c400:	e016      	b.n	800c430 <__ieee754_pow+0x108>
 800c402:	2100      	movs	r1, #0
 800c404:	9100      	str	r1, [sp, #0]
 800c406:	2800      	cmp	r0, #0
 800c408:	d13b      	bne.n	800c482 <__ieee754_pow+0x15a>
 800c40a:	494f      	ldr	r1, [pc, #316]	; (800c548 <__ieee754_pow+0x220>)
 800c40c:	428e      	cmp	r6, r1
 800c40e:	d1ee      	bne.n	800c3ee <__ieee754_pow+0xc6>
 800c410:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c414:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c418:	ea53 0308 	orrs.w	r3, r3, r8
 800c41c:	f000 8466 	beq.w	800ccec <__ieee754_pow+0x9c4>
 800c420:	4b4d      	ldr	r3, [pc, #308]	; (800c558 <__ieee754_pow+0x230>)
 800c422:	429c      	cmp	r4, r3
 800c424:	dd0d      	ble.n	800c442 <__ieee754_pow+0x11a>
 800c426:	2f00      	cmp	r7, #0
 800c428:	f280 8464 	bge.w	800ccf4 <__ieee754_pow+0x9cc>
 800c42c:	2000      	movs	r0, #0
 800c42e:	2100      	movs	r1, #0
 800c430:	ec41 0b10 	vmov	d0, r0, r1
 800c434:	b00d      	add	sp, #52	; 0x34
 800c436:	ecbd 8b06 	vpop	{d8-d10}
 800c43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43e:	2102      	movs	r1, #2
 800c440:	e7e0      	b.n	800c404 <__ieee754_pow+0xdc>
 800c442:	2f00      	cmp	r7, #0
 800c444:	daf2      	bge.n	800c42c <__ieee754_pow+0x104>
 800c446:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c44a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c44e:	e7ef      	b.n	800c430 <__ieee754_pow+0x108>
 800c450:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c454:	d104      	bne.n	800c460 <__ieee754_pow+0x138>
 800c456:	4610      	mov	r0, r2
 800c458:	4619      	mov	r1, r3
 800c45a:	f7f4 f8c5 	bl	80005e8 <__aeabi_dmul>
 800c45e:	e7e7      	b.n	800c430 <__ieee754_pow+0x108>
 800c460:	493e      	ldr	r1, [pc, #248]	; (800c55c <__ieee754_pow+0x234>)
 800c462:	428f      	cmp	r7, r1
 800c464:	d10d      	bne.n	800c482 <__ieee754_pow+0x15a>
 800c466:	f1b9 0f00 	cmp.w	r9, #0
 800c46a:	db0a      	blt.n	800c482 <__ieee754_pow+0x15a>
 800c46c:	ec43 2b10 	vmov	d0, r2, r3
 800c470:	b00d      	add	sp, #52	; 0x34
 800c472:	ecbd 8b06 	vpop	{d8-d10}
 800c476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47a:	f000 bc77 	b.w	800cd6c <__ieee754_sqrt>
 800c47e:	2100      	movs	r1, #0
 800c480:	9100      	str	r1, [sp, #0]
 800c482:	ec43 2b10 	vmov	d0, r2, r3
 800c486:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c48a:	f000 fd23 	bl	800ced4 <fabs>
 800c48e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c492:	ec51 0b10 	vmov	r0, r1, d0
 800c496:	f1b8 0f00 	cmp.w	r8, #0
 800c49a:	d12a      	bne.n	800c4f2 <__ieee754_pow+0x1ca>
 800c49c:	b12c      	cbz	r4, 800c4aa <__ieee754_pow+0x182>
 800c49e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c554 <__ieee754_pow+0x22c>
 800c4a2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c4a6:	45e6      	cmp	lr, ip
 800c4a8:	d123      	bne.n	800c4f2 <__ieee754_pow+0x1ca>
 800c4aa:	2f00      	cmp	r7, #0
 800c4ac:	da05      	bge.n	800c4ba <__ieee754_pow+0x192>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	4927      	ldr	r1, [pc, #156]	; (800c554 <__ieee754_pow+0x22c>)
 800c4b6:	f7f4 f9c1 	bl	800083c <__aeabi_ddiv>
 800c4ba:	f1b9 0f00 	cmp.w	r9, #0
 800c4be:	dab7      	bge.n	800c430 <__ieee754_pow+0x108>
 800c4c0:	9b00      	ldr	r3, [sp, #0]
 800c4c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c4c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c4ca:	4323      	orrs	r3, r4
 800c4cc:	d108      	bne.n	800c4e0 <__ieee754_pow+0x1b8>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	f7f3 fecf 	bl	8000278 <__aeabi_dsub>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	e78d      	b.n	800c3fc <__ieee754_pow+0xd4>
 800c4e0:	9b00      	ldr	r3, [sp, #0]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d1a4      	bne.n	800c430 <__ieee754_pow+0x108>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	e79e      	b.n	800c430 <__ieee754_pow+0x108>
 800c4f2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c4f6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c4fa:	950a      	str	r5, [sp, #40]	; 0x28
 800c4fc:	9d00      	ldr	r5, [sp, #0]
 800c4fe:	46ac      	mov	ip, r5
 800c500:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c502:	ea5c 0505 	orrs.w	r5, ip, r5
 800c506:	d0e4      	beq.n	800c4d2 <__ieee754_pow+0x1aa>
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <__ieee754_pow+0x238>)
 800c50a:	429e      	cmp	r6, r3
 800c50c:	f340 80fc 	ble.w	800c708 <__ieee754_pow+0x3e0>
 800c510:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c514:	429e      	cmp	r6, r3
 800c516:	4b10      	ldr	r3, [pc, #64]	; (800c558 <__ieee754_pow+0x230>)
 800c518:	dd07      	ble.n	800c52a <__ieee754_pow+0x202>
 800c51a:	429c      	cmp	r4, r3
 800c51c:	dc0a      	bgt.n	800c534 <__ieee754_pow+0x20c>
 800c51e:	2f00      	cmp	r7, #0
 800c520:	da84      	bge.n	800c42c <__ieee754_pow+0x104>
 800c522:	a307      	add	r3, pc, #28	; (adr r3, 800c540 <__ieee754_pow+0x218>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	e795      	b.n	800c456 <__ieee754_pow+0x12e>
 800c52a:	429c      	cmp	r4, r3
 800c52c:	dbf7      	blt.n	800c51e <__ieee754_pow+0x1f6>
 800c52e:	4b09      	ldr	r3, [pc, #36]	; (800c554 <__ieee754_pow+0x22c>)
 800c530:	429c      	cmp	r4, r3
 800c532:	dd17      	ble.n	800c564 <__ieee754_pow+0x23c>
 800c534:	2f00      	cmp	r7, #0
 800c536:	dcf4      	bgt.n	800c522 <__ieee754_pow+0x1fa>
 800c538:	e778      	b.n	800c42c <__ieee754_pow+0x104>
 800c53a:	bf00      	nop
 800c53c:	f3af 8000 	nop.w
 800c540:	8800759c 	.word	0x8800759c
 800c544:	7e37e43c 	.word	0x7e37e43c
 800c548:	7ff00000 	.word	0x7ff00000
 800c54c:	080f1322 	.word	0x080f1322
 800c550:	433fffff 	.word	0x433fffff
 800c554:	3ff00000 	.word	0x3ff00000
 800c558:	3fefffff 	.word	0x3fefffff
 800c55c:	3fe00000 	.word	0x3fe00000
 800c560:	41e00000 	.word	0x41e00000
 800c564:	4b64      	ldr	r3, [pc, #400]	; (800c6f8 <__ieee754_pow+0x3d0>)
 800c566:	2200      	movs	r2, #0
 800c568:	f7f3 fe86 	bl	8000278 <__aeabi_dsub>
 800c56c:	a356      	add	r3, pc, #344	; (adr r3, 800c6c8 <__ieee754_pow+0x3a0>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	4604      	mov	r4, r0
 800c574:	460d      	mov	r5, r1
 800c576:	f7f4 f837 	bl	80005e8 <__aeabi_dmul>
 800c57a:	a355      	add	r3, pc, #340	; (adr r3, 800c6d0 <__ieee754_pow+0x3a8>)
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	4606      	mov	r6, r0
 800c582:	460f      	mov	r7, r1
 800c584:	4620      	mov	r0, r4
 800c586:	4629      	mov	r1, r5
 800c588:	f7f4 f82e 	bl	80005e8 <__aeabi_dmul>
 800c58c:	4b5b      	ldr	r3, [pc, #364]	; (800c6fc <__ieee754_pow+0x3d4>)
 800c58e:	4682      	mov	sl, r0
 800c590:	468b      	mov	fp, r1
 800c592:	2200      	movs	r2, #0
 800c594:	4620      	mov	r0, r4
 800c596:	4629      	mov	r1, r5
 800c598:	f7f4 f826 	bl	80005e8 <__aeabi_dmul>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	a14d      	add	r1, pc, #308	; (adr r1, 800c6d8 <__ieee754_pow+0x3b0>)
 800c5a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5a6:	f7f3 fe67 	bl	8000278 <__aeabi_dsub>
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	f7f4 f81b 	bl	80005e8 <__aeabi_dmul>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	4951      	ldr	r1, [pc, #324]	; (800c700 <__ieee754_pow+0x3d8>)
 800c5ba:	f7f3 fe5d 	bl	8000278 <__aeabi_dsub>
 800c5be:	4622      	mov	r2, r4
 800c5c0:	4680      	mov	r8, r0
 800c5c2:	4689      	mov	r9, r1
 800c5c4:	462b      	mov	r3, r5
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f4 f80d 	bl	80005e8 <__aeabi_dmul>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4640      	mov	r0, r8
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	f7f4 f807 	bl	80005e8 <__aeabi_dmul>
 800c5da:	a341      	add	r3, pc, #260	; (adr r3, 800c6e0 <__ieee754_pow+0x3b8>)
 800c5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e0:	f7f4 f802 	bl	80005e8 <__aeabi_dmul>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4650      	mov	r0, sl
 800c5ea:	4659      	mov	r1, fp
 800c5ec:	f7f3 fe44 	bl	8000278 <__aeabi_dsub>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4689      	mov	r9, r1
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	4639      	mov	r1, r7
 800c5fc:	f7f3 fe3e 	bl	800027c <__adddf3>
 800c600:	2400      	movs	r4, #0
 800c602:	4632      	mov	r2, r6
 800c604:	463b      	mov	r3, r7
 800c606:	4620      	mov	r0, r4
 800c608:	460d      	mov	r5, r1
 800c60a:	f7f3 fe35 	bl	8000278 <__aeabi_dsub>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4640      	mov	r0, r8
 800c614:	4649      	mov	r1, r9
 800c616:	f7f3 fe2f 	bl	8000278 <__aeabi_dsub>
 800c61a:	9b00      	ldr	r3, [sp, #0]
 800c61c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c61e:	3b01      	subs	r3, #1
 800c620:	4313      	orrs	r3, r2
 800c622:	4682      	mov	sl, r0
 800c624:	468b      	mov	fp, r1
 800c626:	f040 81f1 	bne.w	800ca0c <__ieee754_pow+0x6e4>
 800c62a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c6e8 <__ieee754_pow+0x3c0>
 800c62e:	eeb0 8a47 	vmov.f32	s16, s14
 800c632:	eef0 8a67 	vmov.f32	s17, s15
 800c636:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c63a:	2600      	movs	r6, #0
 800c63c:	4632      	mov	r2, r6
 800c63e:	463b      	mov	r3, r7
 800c640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c644:	f7f3 fe18 	bl	8000278 <__aeabi_dsub>
 800c648:	4622      	mov	r2, r4
 800c64a:	462b      	mov	r3, r5
 800c64c:	f7f3 ffcc 	bl	80005e8 <__aeabi_dmul>
 800c650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c654:	4680      	mov	r8, r0
 800c656:	4689      	mov	r9, r1
 800c658:	4650      	mov	r0, sl
 800c65a:	4659      	mov	r1, fp
 800c65c:	f7f3 ffc4 	bl	80005e8 <__aeabi_dmul>
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	4640      	mov	r0, r8
 800c666:	4649      	mov	r1, r9
 800c668:	f7f3 fe08 	bl	800027c <__adddf3>
 800c66c:	4632      	mov	r2, r6
 800c66e:	463b      	mov	r3, r7
 800c670:	4680      	mov	r8, r0
 800c672:	4689      	mov	r9, r1
 800c674:	4620      	mov	r0, r4
 800c676:	4629      	mov	r1, r5
 800c678:	f7f3 ffb6 	bl	80005e8 <__aeabi_dmul>
 800c67c:	460b      	mov	r3, r1
 800c67e:	4604      	mov	r4, r0
 800c680:	460d      	mov	r5, r1
 800c682:	4602      	mov	r2, r0
 800c684:	4649      	mov	r1, r9
 800c686:	4640      	mov	r0, r8
 800c688:	f7f3 fdf8 	bl	800027c <__adddf3>
 800c68c:	4b1d      	ldr	r3, [pc, #116]	; (800c704 <__ieee754_pow+0x3dc>)
 800c68e:	4299      	cmp	r1, r3
 800c690:	ec45 4b19 	vmov	d9, r4, r5
 800c694:	4606      	mov	r6, r0
 800c696:	460f      	mov	r7, r1
 800c698:	468b      	mov	fp, r1
 800c69a:	f340 82fe 	ble.w	800cc9a <__ieee754_pow+0x972>
 800c69e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c6a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c6a6:	4303      	orrs	r3, r0
 800c6a8:	f000 81f0 	beq.w	800ca8c <__ieee754_pow+0x764>
 800c6ac:	a310      	add	r3, pc, #64	; (adr r3, 800c6f0 <__ieee754_pow+0x3c8>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	ec51 0b18 	vmov	r0, r1, d8
 800c6b6:	f7f3 ff97 	bl	80005e8 <__aeabi_dmul>
 800c6ba:	a30d      	add	r3, pc, #52	; (adr r3, 800c6f0 <__ieee754_pow+0x3c8>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	e6cb      	b.n	800c45a <__ieee754_pow+0x132>
 800c6c2:	bf00      	nop
 800c6c4:	f3af 8000 	nop.w
 800c6c8:	60000000 	.word	0x60000000
 800c6cc:	3ff71547 	.word	0x3ff71547
 800c6d0:	f85ddf44 	.word	0xf85ddf44
 800c6d4:	3e54ae0b 	.word	0x3e54ae0b
 800c6d8:	55555555 	.word	0x55555555
 800c6dc:	3fd55555 	.word	0x3fd55555
 800c6e0:	652b82fe 	.word	0x652b82fe
 800c6e4:	3ff71547 	.word	0x3ff71547
 800c6e8:	00000000 	.word	0x00000000
 800c6ec:	bff00000 	.word	0xbff00000
 800c6f0:	8800759c 	.word	0x8800759c
 800c6f4:	7e37e43c 	.word	0x7e37e43c
 800c6f8:	3ff00000 	.word	0x3ff00000
 800c6fc:	3fd00000 	.word	0x3fd00000
 800c700:	3fe00000 	.word	0x3fe00000
 800c704:	408fffff 	.word	0x408fffff
 800c708:	4bd7      	ldr	r3, [pc, #860]	; (800ca68 <__ieee754_pow+0x740>)
 800c70a:	ea03 0309 	and.w	r3, r3, r9
 800c70e:	2200      	movs	r2, #0
 800c710:	b92b      	cbnz	r3, 800c71e <__ieee754_pow+0x3f6>
 800c712:	4bd6      	ldr	r3, [pc, #856]	; (800ca6c <__ieee754_pow+0x744>)
 800c714:	f7f3 ff68 	bl	80005e8 <__aeabi_dmul>
 800c718:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c71c:	460c      	mov	r4, r1
 800c71e:	1523      	asrs	r3, r4, #20
 800c720:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c724:	4413      	add	r3, r2
 800c726:	9309      	str	r3, [sp, #36]	; 0x24
 800c728:	4bd1      	ldr	r3, [pc, #836]	; (800ca70 <__ieee754_pow+0x748>)
 800c72a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c72e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c732:	429c      	cmp	r4, r3
 800c734:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c738:	dd08      	ble.n	800c74c <__ieee754_pow+0x424>
 800c73a:	4bce      	ldr	r3, [pc, #824]	; (800ca74 <__ieee754_pow+0x74c>)
 800c73c:	429c      	cmp	r4, r3
 800c73e:	f340 8163 	ble.w	800ca08 <__ieee754_pow+0x6e0>
 800c742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c744:	3301      	adds	r3, #1
 800c746:	9309      	str	r3, [sp, #36]	; 0x24
 800c748:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c74c:	2400      	movs	r4, #0
 800c74e:	00e3      	lsls	r3, r4, #3
 800c750:	930b      	str	r3, [sp, #44]	; 0x2c
 800c752:	4bc9      	ldr	r3, [pc, #804]	; (800ca78 <__ieee754_pow+0x750>)
 800c754:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c758:	ed93 7b00 	vldr	d7, [r3]
 800c75c:	4629      	mov	r1, r5
 800c75e:	ec53 2b17 	vmov	r2, r3, d7
 800c762:	eeb0 8a47 	vmov.f32	s16, s14
 800c766:	eef0 8a67 	vmov.f32	s17, s15
 800c76a:	4682      	mov	sl, r0
 800c76c:	f7f3 fd84 	bl	8000278 <__aeabi_dsub>
 800c770:	4652      	mov	r2, sl
 800c772:	4606      	mov	r6, r0
 800c774:	460f      	mov	r7, r1
 800c776:	462b      	mov	r3, r5
 800c778:	ec51 0b18 	vmov	r0, r1, d8
 800c77c:	f7f3 fd7e 	bl	800027c <__adddf3>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	2000      	movs	r0, #0
 800c786:	49bd      	ldr	r1, [pc, #756]	; (800ca7c <__ieee754_pow+0x754>)
 800c788:	f7f4 f858 	bl	800083c <__aeabi_ddiv>
 800c78c:	ec41 0b19 	vmov	d9, r0, r1
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	4630      	mov	r0, r6
 800c796:	4639      	mov	r1, r7
 800c798:	f7f3 ff26 	bl	80005e8 <__aeabi_dmul>
 800c79c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c7a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	9304      	str	r3, [sp, #16]
 800c7ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c7b0:	46ab      	mov	fp, r5
 800c7b2:	106d      	asrs	r5, r5, #1
 800c7b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c7b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c7bc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	4614      	mov	r4, r2
 800c7c8:	461d      	mov	r5, r3
 800c7ca:	f7f3 ff0d 	bl	80005e8 <__aeabi_dmul>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	4639      	mov	r1, r7
 800c7d6:	f7f3 fd4f 	bl	8000278 <__aeabi_dsub>
 800c7da:	ec53 2b18 	vmov	r2, r3, d8
 800c7de:	4606      	mov	r6, r0
 800c7e0:	460f      	mov	r7, r1
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	f7f3 fd47 	bl	8000278 <__aeabi_dsub>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4650      	mov	r0, sl
 800c7f0:	4659      	mov	r1, fp
 800c7f2:	f7f3 fd41 	bl	8000278 <__aeabi_dsub>
 800c7f6:	4642      	mov	r2, r8
 800c7f8:	464b      	mov	r3, r9
 800c7fa:	f7f3 fef5 	bl	80005e8 <__aeabi_dmul>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4630      	mov	r0, r6
 800c804:	4639      	mov	r1, r7
 800c806:	f7f3 fd37 	bl	8000278 <__aeabi_dsub>
 800c80a:	ec53 2b19 	vmov	r2, r3, d9
 800c80e:	f7f3 feeb 	bl	80005e8 <__aeabi_dmul>
 800c812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c816:	ec41 0b18 	vmov	d8, r0, r1
 800c81a:	4610      	mov	r0, r2
 800c81c:	4619      	mov	r1, r3
 800c81e:	f7f3 fee3 	bl	80005e8 <__aeabi_dmul>
 800c822:	a37d      	add	r3, pc, #500	; (adr r3, 800ca18 <__ieee754_pow+0x6f0>)
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	4604      	mov	r4, r0
 800c82a:	460d      	mov	r5, r1
 800c82c:	f7f3 fedc 	bl	80005e8 <__aeabi_dmul>
 800c830:	a37b      	add	r3, pc, #492	; (adr r3, 800ca20 <__ieee754_pow+0x6f8>)
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	f7f3 fd21 	bl	800027c <__adddf3>
 800c83a:	4622      	mov	r2, r4
 800c83c:	462b      	mov	r3, r5
 800c83e:	f7f3 fed3 	bl	80005e8 <__aeabi_dmul>
 800c842:	a379      	add	r3, pc, #484	; (adr r3, 800ca28 <__ieee754_pow+0x700>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f7f3 fd18 	bl	800027c <__adddf3>
 800c84c:	4622      	mov	r2, r4
 800c84e:	462b      	mov	r3, r5
 800c850:	f7f3 feca 	bl	80005e8 <__aeabi_dmul>
 800c854:	a376      	add	r3, pc, #472	; (adr r3, 800ca30 <__ieee754_pow+0x708>)
 800c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85a:	f7f3 fd0f 	bl	800027c <__adddf3>
 800c85e:	4622      	mov	r2, r4
 800c860:	462b      	mov	r3, r5
 800c862:	f7f3 fec1 	bl	80005e8 <__aeabi_dmul>
 800c866:	a374      	add	r3, pc, #464	; (adr r3, 800ca38 <__ieee754_pow+0x710>)
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	f7f3 fd06 	bl	800027c <__adddf3>
 800c870:	4622      	mov	r2, r4
 800c872:	462b      	mov	r3, r5
 800c874:	f7f3 feb8 	bl	80005e8 <__aeabi_dmul>
 800c878:	a371      	add	r3, pc, #452	; (adr r3, 800ca40 <__ieee754_pow+0x718>)
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f7f3 fcfd 	bl	800027c <__adddf3>
 800c882:	4622      	mov	r2, r4
 800c884:	4606      	mov	r6, r0
 800c886:	460f      	mov	r7, r1
 800c888:	462b      	mov	r3, r5
 800c88a:	4620      	mov	r0, r4
 800c88c:	4629      	mov	r1, r5
 800c88e:	f7f3 feab 	bl	80005e8 <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4630      	mov	r0, r6
 800c898:	4639      	mov	r1, r7
 800c89a:	f7f3 fea5 	bl	80005e8 <__aeabi_dmul>
 800c89e:	4642      	mov	r2, r8
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	460d      	mov	r5, r1
 800c8a4:	464b      	mov	r3, r9
 800c8a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8aa:	f7f3 fce7 	bl	800027c <__adddf3>
 800c8ae:	ec53 2b18 	vmov	r2, r3, d8
 800c8b2:	f7f3 fe99 	bl	80005e8 <__aeabi_dmul>
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	462b      	mov	r3, r5
 800c8ba:	f7f3 fcdf 	bl	800027c <__adddf3>
 800c8be:	4642      	mov	r2, r8
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	468b      	mov	fp, r1
 800c8c4:	464b      	mov	r3, r9
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	f7f3 fe8d 	bl	80005e8 <__aeabi_dmul>
 800c8ce:	4b6c      	ldr	r3, [pc, #432]	; (800ca80 <__ieee754_pow+0x758>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460f      	mov	r7, r1
 800c8d6:	f7f3 fcd1 	bl	800027c <__adddf3>
 800c8da:	4652      	mov	r2, sl
 800c8dc:	465b      	mov	r3, fp
 800c8de:	f7f3 fccd 	bl	800027c <__adddf3>
 800c8e2:	9c04      	ldr	r4, [sp, #16]
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	4640      	mov	r0, r8
 800c8ec:	4649      	mov	r1, r9
 800c8ee:	f7f3 fe7b 	bl	80005e8 <__aeabi_dmul>
 800c8f2:	4b63      	ldr	r3, [pc, #396]	; (800ca80 <__ieee754_pow+0x758>)
 800c8f4:	4680      	mov	r8, r0
 800c8f6:	4689      	mov	r9, r1
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	f7f3 fcbb 	bl	8000278 <__aeabi_dsub>
 800c902:	4632      	mov	r2, r6
 800c904:	463b      	mov	r3, r7
 800c906:	f7f3 fcb7 	bl	8000278 <__aeabi_dsub>
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	4650      	mov	r0, sl
 800c910:	4659      	mov	r1, fp
 800c912:	f7f3 fcb1 	bl	8000278 <__aeabi_dsub>
 800c916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c91a:	f7f3 fe65 	bl	80005e8 <__aeabi_dmul>
 800c91e:	4622      	mov	r2, r4
 800c920:	4606      	mov	r6, r0
 800c922:	460f      	mov	r7, r1
 800c924:	462b      	mov	r3, r5
 800c926:	ec51 0b18 	vmov	r0, r1, d8
 800c92a:	f7f3 fe5d 	bl	80005e8 <__aeabi_dmul>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	4630      	mov	r0, r6
 800c934:	4639      	mov	r1, r7
 800c936:	f7f3 fca1 	bl	800027c <__adddf3>
 800c93a:	4606      	mov	r6, r0
 800c93c:	460f      	mov	r7, r1
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4640      	mov	r0, r8
 800c944:	4649      	mov	r1, r9
 800c946:	f7f3 fc99 	bl	800027c <__adddf3>
 800c94a:	9c04      	ldr	r4, [sp, #16]
 800c94c:	a33e      	add	r3, pc, #248	; (adr r3, 800ca48 <__ieee754_pow+0x720>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	4620      	mov	r0, r4
 800c954:	460d      	mov	r5, r1
 800c956:	f7f3 fe47 	bl	80005e8 <__aeabi_dmul>
 800c95a:	4642      	mov	r2, r8
 800c95c:	ec41 0b18 	vmov	d8, r0, r1
 800c960:	464b      	mov	r3, r9
 800c962:	4620      	mov	r0, r4
 800c964:	4629      	mov	r1, r5
 800c966:	f7f3 fc87 	bl	8000278 <__aeabi_dsub>
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	4630      	mov	r0, r6
 800c970:	4639      	mov	r1, r7
 800c972:	f7f3 fc81 	bl	8000278 <__aeabi_dsub>
 800c976:	a336      	add	r3, pc, #216	; (adr r3, 800ca50 <__ieee754_pow+0x728>)
 800c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97c:	f7f3 fe34 	bl	80005e8 <__aeabi_dmul>
 800c980:	a335      	add	r3, pc, #212	; (adr r3, 800ca58 <__ieee754_pow+0x730>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	4606      	mov	r6, r0
 800c988:	460f      	mov	r7, r1
 800c98a:	4620      	mov	r0, r4
 800c98c:	4629      	mov	r1, r5
 800c98e:	f7f3 fe2b 	bl	80005e8 <__aeabi_dmul>
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	4630      	mov	r0, r6
 800c998:	4639      	mov	r1, r7
 800c99a:	f7f3 fc6f 	bl	800027c <__adddf3>
 800c99e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9a0:	4b38      	ldr	r3, [pc, #224]	; (800ca84 <__ieee754_pow+0x75c>)
 800c9a2:	4413      	add	r3, r2
 800c9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a8:	f7f3 fc68 	bl	800027c <__adddf3>
 800c9ac:	4682      	mov	sl, r0
 800c9ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9b0:	468b      	mov	fp, r1
 800c9b2:	f7f3 fdaf 	bl	8000514 <__aeabi_i2d>
 800c9b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9b8:	4b33      	ldr	r3, [pc, #204]	; (800ca88 <__ieee754_pow+0x760>)
 800c9ba:	4413      	add	r3, r2
 800c9bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	460f      	mov	r7, r1
 800c9c4:	4652      	mov	r2, sl
 800c9c6:	465b      	mov	r3, fp
 800c9c8:	ec51 0b18 	vmov	r0, r1, d8
 800c9cc:	f7f3 fc56 	bl	800027c <__adddf3>
 800c9d0:	4642      	mov	r2, r8
 800c9d2:	464b      	mov	r3, r9
 800c9d4:	f7f3 fc52 	bl	800027c <__adddf3>
 800c9d8:	4632      	mov	r2, r6
 800c9da:	463b      	mov	r3, r7
 800c9dc:	f7f3 fc4e 	bl	800027c <__adddf3>
 800c9e0:	9c04      	ldr	r4, [sp, #16]
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	463b      	mov	r3, r7
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	460d      	mov	r5, r1
 800c9ea:	f7f3 fc45 	bl	8000278 <__aeabi_dsub>
 800c9ee:	4642      	mov	r2, r8
 800c9f0:	464b      	mov	r3, r9
 800c9f2:	f7f3 fc41 	bl	8000278 <__aeabi_dsub>
 800c9f6:	ec53 2b18 	vmov	r2, r3, d8
 800c9fa:	f7f3 fc3d 	bl	8000278 <__aeabi_dsub>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	4650      	mov	r0, sl
 800ca04:	4659      	mov	r1, fp
 800ca06:	e606      	b.n	800c616 <__ieee754_pow+0x2ee>
 800ca08:	2401      	movs	r4, #1
 800ca0a:	e6a0      	b.n	800c74e <__ieee754_pow+0x426>
 800ca0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ca60 <__ieee754_pow+0x738>
 800ca10:	e60d      	b.n	800c62e <__ieee754_pow+0x306>
 800ca12:	bf00      	nop
 800ca14:	f3af 8000 	nop.w
 800ca18:	4a454eef 	.word	0x4a454eef
 800ca1c:	3fca7e28 	.word	0x3fca7e28
 800ca20:	93c9db65 	.word	0x93c9db65
 800ca24:	3fcd864a 	.word	0x3fcd864a
 800ca28:	a91d4101 	.word	0xa91d4101
 800ca2c:	3fd17460 	.word	0x3fd17460
 800ca30:	518f264d 	.word	0x518f264d
 800ca34:	3fd55555 	.word	0x3fd55555
 800ca38:	db6fabff 	.word	0xdb6fabff
 800ca3c:	3fdb6db6 	.word	0x3fdb6db6
 800ca40:	33333303 	.word	0x33333303
 800ca44:	3fe33333 	.word	0x3fe33333
 800ca48:	e0000000 	.word	0xe0000000
 800ca4c:	3feec709 	.word	0x3feec709
 800ca50:	dc3a03fd 	.word	0xdc3a03fd
 800ca54:	3feec709 	.word	0x3feec709
 800ca58:	145b01f5 	.word	0x145b01f5
 800ca5c:	be3e2fe0 	.word	0xbe3e2fe0
 800ca60:	00000000 	.word	0x00000000
 800ca64:	3ff00000 	.word	0x3ff00000
 800ca68:	7ff00000 	.word	0x7ff00000
 800ca6c:	43400000 	.word	0x43400000
 800ca70:	0003988e 	.word	0x0003988e
 800ca74:	000bb679 	.word	0x000bb679
 800ca78:	080f13b8 	.word	0x080f13b8
 800ca7c:	3ff00000 	.word	0x3ff00000
 800ca80:	40080000 	.word	0x40080000
 800ca84:	080f13d8 	.word	0x080f13d8
 800ca88:	080f13c8 	.word	0x080f13c8
 800ca8c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cd64 <__ieee754_pow+0xa3c>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	4640      	mov	r0, r8
 800ca94:	4649      	mov	r1, r9
 800ca96:	f7f3 fbf1 	bl	800027c <__adddf3>
 800ca9a:	4622      	mov	r2, r4
 800ca9c:	ec41 0b1a 	vmov	d10, r0, r1
 800caa0:	462b      	mov	r3, r5
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7f3 fbe7 	bl	8000278 <__aeabi_dsub>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	ec51 0b1a 	vmov	r0, r1, d10
 800cab2:	f7f4 f829 	bl	8000b08 <__aeabi_dcmpgt>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f47f adf8 	bne.w	800c6ac <__ieee754_pow+0x384>
 800cabc:	4aa4      	ldr	r2, [pc, #656]	; (800cd50 <__ieee754_pow+0xa28>)
 800cabe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cac2:	4293      	cmp	r3, r2
 800cac4:	f340 810b 	ble.w	800ccde <__ieee754_pow+0x9b6>
 800cac8:	151b      	asrs	r3, r3, #20
 800caca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cace:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cad2:	fa4a f303 	asr.w	r3, sl, r3
 800cad6:	445b      	add	r3, fp
 800cad8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cadc:	4e9d      	ldr	r6, [pc, #628]	; (800cd54 <__ieee754_pow+0xa2c>)
 800cade:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cae2:	4116      	asrs	r6, r2
 800cae4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cae8:	2000      	movs	r0, #0
 800caea:	ea23 0106 	bic.w	r1, r3, r6
 800caee:	f1c2 0214 	rsb	r2, r2, #20
 800caf2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800caf6:	fa4a fa02 	asr.w	sl, sl, r2
 800cafa:	f1bb 0f00 	cmp.w	fp, #0
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4620      	mov	r0, r4
 800cb04:	4629      	mov	r1, r5
 800cb06:	bfb8      	it	lt
 800cb08:	f1ca 0a00 	rsblt	sl, sl, #0
 800cb0c:	f7f3 fbb4 	bl	8000278 <__aeabi_dsub>
 800cb10:	ec41 0b19 	vmov	d9, r0, r1
 800cb14:	4642      	mov	r2, r8
 800cb16:	464b      	mov	r3, r9
 800cb18:	ec51 0b19 	vmov	r0, r1, d9
 800cb1c:	f7f3 fbae 	bl	800027c <__adddf3>
 800cb20:	2400      	movs	r4, #0
 800cb22:	a379      	add	r3, pc, #484	; (adr r3, 800cd08 <__ieee754_pow+0x9e0>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	4620      	mov	r0, r4
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	f7f3 fd5c 	bl	80005e8 <__aeabi_dmul>
 800cb30:	ec53 2b19 	vmov	r2, r3, d9
 800cb34:	4606      	mov	r6, r0
 800cb36:	460f      	mov	r7, r1
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f7f3 fb9c 	bl	8000278 <__aeabi_dsub>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4640      	mov	r0, r8
 800cb46:	4649      	mov	r1, r9
 800cb48:	f7f3 fb96 	bl	8000278 <__aeabi_dsub>
 800cb4c:	a370      	add	r3, pc, #448	; (adr r3, 800cd10 <__ieee754_pow+0x9e8>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fd49 	bl	80005e8 <__aeabi_dmul>
 800cb56:	a370      	add	r3, pc, #448	; (adr r3, 800cd18 <__ieee754_pow+0x9f0>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	4689      	mov	r9, r1
 800cb60:	4620      	mov	r0, r4
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7f3 fd40 	bl	80005e8 <__aeabi_dmul>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4640      	mov	r0, r8
 800cb6e:	4649      	mov	r1, r9
 800cb70:	f7f3 fb84 	bl	800027c <__adddf3>
 800cb74:	4604      	mov	r4, r0
 800cb76:	460d      	mov	r5, r1
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	4639      	mov	r1, r7
 800cb80:	f7f3 fb7c 	bl	800027c <__adddf3>
 800cb84:	4632      	mov	r2, r6
 800cb86:	463b      	mov	r3, r7
 800cb88:	4680      	mov	r8, r0
 800cb8a:	4689      	mov	r9, r1
 800cb8c:	f7f3 fb74 	bl	8000278 <__aeabi_dsub>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	4620      	mov	r0, r4
 800cb96:	4629      	mov	r1, r5
 800cb98:	f7f3 fb6e 	bl	8000278 <__aeabi_dsub>
 800cb9c:	4642      	mov	r2, r8
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	464b      	mov	r3, r9
 800cba4:	4640      	mov	r0, r8
 800cba6:	4649      	mov	r1, r9
 800cba8:	f7f3 fd1e 	bl	80005e8 <__aeabi_dmul>
 800cbac:	a35c      	add	r3, pc, #368	; (adr r3, 800cd20 <__ieee754_pow+0x9f8>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	460d      	mov	r5, r1
 800cbb6:	f7f3 fd17 	bl	80005e8 <__aeabi_dmul>
 800cbba:	a35b      	add	r3, pc, #364	; (adr r3, 800cd28 <__ieee754_pow+0xa00>)
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	f7f3 fb5a 	bl	8000278 <__aeabi_dsub>
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	462b      	mov	r3, r5
 800cbc8:	f7f3 fd0e 	bl	80005e8 <__aeabi_dmul>
 800cbcc:	a358      	add	r3, pc, #352	; (adr r3, 800cd30 <__ieee754_pow+0xa08>)
 800cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd2:	f7f3 fb53 	bl	800027c <__adddf3>
 800cbd6:	4622      	mov	r2, r4
 800cbd8:	462b      	mov	r3, r5
 800cbda:	f7f3 fd05 	bl	80005e8 <__aeabi_dmul>
 800cbde:	a356      	add	r3, pc, #344	; (adr r3, 800cd38 <__ieee754_pow+0xa10>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f7f3 fb48 	bl	8000278 <__aeabi_dsub>
 800cbe8:	4622      	mov	r2, r4
 800cbea:	462b      	mov	r3, r5
 800cbec:	f7f3 fcfc 	bl	80005e8 <__aeabi_dmul>
 800cbf0:	a353      	add	r3, pc, #332	; (adr r3, 800cd40 <__ieee754_pow+0xa18>)
 800cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf6:	f7f3 fb41 	bl	800027c <__adddf3>
 800cbfa:	4622      	mov	r2, r4
 800cbfc:	462b      	mov	r3, r5
 800cbfe:	f7f3 fcf3 	bl	80005e8 <__aeabi_dmul>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4640      	mov	r0, r8
 800cc08:	4649      	mov	r1, r9
 800cc0a:	f7f3 fb35 	bl	8000278 <__aeabi_dsub>
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4640      	mov	r0, r8
 800cc18:	4649      	mov	r1, r9
 800cc1a:	f7f3 fce5 	bl	80005e8 <__aeabi_dmul>
 800cc1e:	2200      	movs	r2, #0
 800cc20:	ec41 0b19 	vmov	d9, r0, r1
 800cc24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc28:	4620      	mov	r0, r4
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f7f3 fb24 	bl	8000278 <__aeabi_dsub>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	ec51 0b19 	vmov	r0, r1, d9
 800cc38:	f7f3 fe00 	bl	800083c <__aeabi_ddiv>
 800cc3c:	4632      	mov	r2, r6
 800cc3e:	4604      	mov	r4, r0
 800cc40:	460d      	mov	r5, r1
 800cc42:	463b      	mov	r3, r7
 800cc44:	4640      	mov	r0, r8
 800cc46:	4649      	mov	r1, r9
 800cc48:	f7f3 fcce 	bl	80005e8 <__aeabi_dmul>
 800cc4c:	4632      	mov	r2, r6
 800cc4e:	463b      	mov	r3, r7
 800cc50:	f7f3 fb14 	bl	800027c <__adddf3>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4620      	mov	r0, r4
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	f7f3 fb0c 	bl	8000278 <__aeabi_dsub>
 800cc60:	4642      	mov	r2, r8
 800cc62:	464b      	mov	r3, r9
 800cc64:	f7f3 fb08 	bl	8000278 <__aeabi_dsub>
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	493a      	ldr	r1, [pc, #232]	; (800cd58 <__ieee754_pow+0xa30>)
 800cc6e:	2000      	movs	r0, #0
 800cc70:	f7f3 fb02 	bl	8000278 <__aeabi_dsub>
 800cc74:	e9cd 0100 	strd	r0, r1, [sp]
 800cc78:	9b01      	ldr	r3, [sp, #4]
 800cc7a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cc7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc82:	da2f      	bge.n	800cce4 <__ieee754_pow+0x9bc>
 800cc84:	4650      	mov	r0, sl
 800cc86:	ed9d 0b00 	vldr	d0, [sp]
 800cc8a:	f000 f9cd 	bl	800d028 <scalbn>
 800cc8e:	ec51 0b10 	vmov	r0, r1, d0
 800cc92:	ec53 2b18 	vmov	r2, r3, d8
 800cc96:	f7ff bbe0 	b.w	800c45a <__ieee754_pow+0x132>
 800cc9a:	4b30      	ldr	r3, [pc, #192]	; (800cd5c <__ieee754_pow+0xa34>)
 800cc9c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cca0:	429e      	cmp	r6, r3
 800cca2:	f77f af0b 	ble.w	800cabc <__ieee754_pow+0x794>
 800cca6:	4b2e      	ldr	r3, [pc, #184]	; (800cd60 <__ieee754_pow+0xa38>)
 800cca8:	440b      	add	r3, r1
 800ccaa:	4303      	orrs	r3, r0
 800ccac:	d00b      	beq.n	800ccc6 <__ieee754_pow+0x99e>
 800ccae:	a326      	add	r3, pc, #152	; (adr r3, 800cd48 <__ieee754_pow+0xa20>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	ec51 0b18 	vmov	r0, r1, d8
 800ccb8:	f7f3 fc96 	bl	80005e8 <__aeabi_dmul>
 800ccbc:	a322      	add	r3, pc, #136	; (adr r3, 800cd48 <__ieee754_pow+0xa20>)
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	f7ff bbca 	b.w	800c45a <__ieee754_pow+0x132>
 800ccc6:	4622      	mov	r2, r4
 800ccc8:	462b      	mov	r3, r5
 800ccca:	f7f3 fad5 	bl	8000278 <__aeabi_dsub>
 800ccce:	4642      	mov	r2, r8
 800ccd0:	464b      	mov	r3, r9
 800ccd2:	f7f3 ff0f 	bl	8000af4 <__aeabi_dcmpge>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	f43f aef0 	beq.w	800cabc <__ieee754_pow+0x794>
 800ccdc:	e7e7      	b.n	800ccae <__ieee754_pow+0x986>
 800ccde:	f04f 0a00 	mov.w	sl, #0
 800cce2:	e717      	b.n	800cb14 <__ieee754_pow+0x7ec>
 800cce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cce8:	4619      	mov	r1, r3
 800ccea:	e7d2      	b.n	800cc92 <__ieee754_pow+0x96a>
 800ccec:	491a      	ldr	r1, [pc, #104]	; (800cd58 <__ieee754_pow+0xa30>)
 800ccee:	2000      	movs	r0, #0
 800ccf0:	f7ff bb9e 	b.w	800c430 <__ieee754_pow+0x108>
 800ccf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccf8:	f7ff bb9a 	b.w	800c430 <__ieee754_pow+0x108>
 800ccfc:	9000      	str	r0, [sp, #0]
 800ccfe:	f7ff bb76 	b.w	800c3ee <__ieee754_pow+0xc6>
 800cd02:	2100      	movs	r1, #0
 800cd04:	f7ff bb60 	b.w	800c3c8 <__ieee754_pow+0xa0>
 800cd08:	00000000 	.word	0x00000000
 800cd0c:	3fe62e43 	.word	0x3fe62e43
 800cd10:	fefa39ef 	.word	0xfefa39ef
 800cd14:	3fe62e42 	.word	0x3fe62e42
 800cd18:	0ca86c39 	.word	0x0ca86c39
 800cd1c:	be205c61 	.word	0xbe205c61
 800cd20:	72bea4d0 	.word	0x72bea4d0
 800cd24:	3e663769 	.word	0x3e663769
 800cd28:	c5d26bf1 	.word	0xc5d26bf1
 800cd2c:	3ebbbd41 	.word	0x3ebbbd41
 800cd30:	af25de2c 	.word	0xaf25de2c
 800cd34:	3f11566a 	.word	0x3f11566a
 800cd38:	16bebd93 	.word	0x16bebd93
 800cd3c:	3f66c16c 	.word	0x3f66c16c
 800cd40:	5555553e 	.word	0x5555553e
 800cd44:	3fc55555 	.word	0x3fc55555
 800cd48:	c2f8f359 	.word	0xc2f8f359
 800cd4c:	01a56e1f 	.word	0x01a56e1f
 800cd50:	3fe00000 	.word	0x3fe00000
 800cd54:	000fffff 	.word	0x000fffff
 800cd58:	3ff00000 	.word	0x3ff00000
 800cd5c:	4090cbff 	.word	0x4090cbff
 800cd60:	3f6f3400 	.word	0x3f6f3400
 800cd64:	652b82fe 	.word	0x652b82fe
 800cd68:	3c971547 	.word	0x3c971547

0800cd6c <__ieee754_sqrt>:
 800cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd70:	ec55 4b10 	vmov	r4, r5, d0
 800cd74:	4e56      	ldr	r6, [pc, #344]	; (800ced0 <__ieee754_sqrt+0x164>)
 800cd76:	43ae      	bics	r6, r5
 800cd78:	ee10 0a10 	vmov	r0, s0
 800cd7c:	ee10 3a10 	vmov	r3, s0
 800cd80:	4629      	mov	r1, r5
 800cd82:	462a      	mov	r2, r5
 800cd84:	d110      	bne.n	800cda8 <__ieee754_sqrt+0x3c>
 800cd86:	ee10 2a10 	vmov	r2, s0
 800cd8a:	462b      	mov	r3, r5
 800cd8c:	f7f3 fc2c 	bl	80005e8 <__aeabi_dmul>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4620      	mov	r0, r4
 800cd96:	4629      	mov	r1, r5
 800cd98:	f7f3 fa70 	bl	800027c <__adddf3>
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	460d      	mov	r5, r1
 800cda0:	ec45 4b10 	vmov	d0, r4, r5
 800cda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda8:	2d00      	cmp	r5, #0
 800cdaa:	dc10      	bgt.n	800cdce <__ieee754_sqrt+0x62>
 800cdac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cdb0:	4330      	orrs	r0, r6
 800cdb2:	d0f5      	beq.n	800cda0 <__ieee754_sqrt+0x34>
 800cdb4:	b15d      	cbz	r5, 800cdce <__ieee754_sqrt+0x62>
 800cdb6:	ee10 2a10 	vmov	r2, s0
 800cdba:	462b      	mov	r3, r5
 800cdbc:	ee10 0a10 	vmov	r0, s0
 800cdc0:	f7f3 fa5a 	bl	8000278 <__aeabi_dsub>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	f7f3 fd38 	bl	800083c <__aeabi_ddiv>
 800cdcc:	e7e6      	b.n	800cd9c <__ieee754_sqrt+0x30>
 800cdce:	1509      	asrs	r1, r1, #20
 800cdd0:	d076      	beq.n	800cec0 <__ieee754_sqrt+0x154>
 800cdd2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cdd6:	07ce      	lsls	r6, r1, #31
 800cdd8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cddc:	bf5e      	ittt	pl
 800cdde:	0fda      	lsrpl	r2, r3, #31
 800cde0:	005b      	lslpl	r3, r3, #1
 800cde2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cde6:	0fda      	lsrs	r2, r3, #31
 800cde8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cdec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	106d      	asrs	r5, r5, #1
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	f04f 0e16 	mov.w	lr, #22
 800cdfa:	4684      	mov	ip, r0
 800cdfc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce00:	eb0c 0401 	add.w	r4, ip, r1
 800ce04:	4294      	cmp	r4, r2
 800ce06:	bfde      	ittt	le
 800ce08:	1b12      	suble	r2, r2, r4
 800ce0a:	eb04 0c01 	addle.w	ip, r4, r1
 800ce0e:	1840      	addle	r0, r0, r1
 800ce10:	0052      	lsls	r2, r2, #1
 800ce12:	f1be 0e01 	subs.w	lr, lr, #1
 800ce16:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ce1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ce1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce22:	d1ed      	bne.n	800ce00 <__ieee754_sqrt+0x94>
 800ce24:	4671      	mov	r1, lr
 800ce26:	2720      	movs	r7, #32
 800ce28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ce2c:	4562      	cmp	r2, ip
 800ce2e:	eb04 060e 	add.w	r6, r4, lr
 800ce32:	dc02      	bgt.n	800ce3a <__ieee754_sqrt+0xce>
 800ce34:	d113      	bne.n	800ce5e <__ieee754_sqrt+0xf2>
 800ce36:	429e      	cmp	r6, r3
 800ce38:	d811      	bhi.n	800ce5e <__ieee754_sqrt+0xf2>
 800ce3a:	2e00      	cmp	r6, #0
 800ce3c:	eb06 0e04 	add.w	lr, r6, r4
 800ce40:	da43      	bge.n	800ceca <__ieee754_sqrt+0x15e>
 800ce42:	f1be 0f00 	cmp.w	lr, #0
 800ce46:	db40      	blt.n	800ceca <__ieee754_sqrt+0x15e>
 800ce48:	f10c 0801 	add.w	r8, ip, #1
 800ce4c:	eba2 020c 	sub.w	r2, r2, ip
 800ce50:	429e      	cmp	r6, r3
 800ce52:	bf88      	it	hi
 800ce54:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ce58:	1b9b      	subs	r3, r3, r6
 800ce5a:	4421      	add	r1, r4
 800ce5c:	46c4      	mov	ip, r8
 800ce5e:	0052      	lsls	r2, r2, #1
 800ce60:	3f01      	subs	r7, #1
 800ce62:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ce66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ce6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce6e:	d1dd      	bne.n	800ce2c <__ieee754_sqrt+0xc0>
 800ce70:	4313      	orrs	r3, r2
 800ce72:	d006      	beq.n	800ce82 <__ieee754_sqrt+0x116>
 800ce74:	1c4c      	adds	r4, r1, #1
 800ce76:	bf13      	iteet	ne
 800ce78:	3101      	addne	r1, #1
 800ce7a:	3001      	addeq	r0, #1
 800ce7c:	4639      	moveq	r1, r7
 800ce7e:	f021 0101 	bicne.w	r1, r1, #1
 800ce82:	1043      	asrs	r3, r0, #1
 800ce84:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ce88:	0849      	lsrs	r1, r1, #1
 800ce8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ce8e:	07c2      	lsls	r2, r0, #31
 800ce90:	bf48      	it	mi
 800ce92:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ce96:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	463d      	mov	r5, r7
 800ce9e:	e77f      	b.n	800cda0 <__ieee754_sqrt+0x34>
 800cea0:	0ada      	lsrs	r2, r3, #11
 800cea2:	3815      	subs	r0, #21
 800cea4:	055b      	lsls	r3, r3, #21
 800cea6:	2a00      	cmp	r2, #0
 800cea8:	d0fa      	beq.n	800cea0 <__ieee754_sqrt+0x134>
 800ceaa:	02d7      	lsls	r7, r2, #11
 800ceac:	d50a      	bpl.n	800cec4 <__ieee754_sqrt+0x158>
 800ceae:	f1c1 0420 	rsb	r4, r1, #32
 800ceb2:	fa23 f404 	lsr.w	r4, r3, r4
 800ceb6:	1e4d      	subs	r5, r1, #1
 800ceb8:	408b      	lsls	r3, r1
 800ceba:	4322      	orrs	r2, r4
 800cebc:	1b41      	subs	r1, r0, r5
 800cebe:	e788      	b.n	800cdd2 <__ieee754_sqrt+0x66>
 800cec0:	4608      	mov	r0, r1
 800cec2:	e7f0      	b.n	800cea6 <__ieee754_sqrt+0x13a>
 800cec4:	0052      	lsls	r2, r2, #1
 800cec6:	3101      	adds	r1, #1
 800cec8:	e7ef      	b.n	800ceaa <__ieee754_sqrt+0x13e>
 800ceca:	46e0      	mov	r8, ip
 800cecc:	e7be      	b.n	800ce4c <__ieee754_sqrt+0xe0>
 800cece:	bf00      	nop
 800ced0:	7ff00000 	.word	0x7ff00000

0800ced4 <fabs>:
 800ced4:	ec51 0b10 	vmov	r0, r1, d0
 800ced8:	ee10 2a10 	vmov	r2, s0
 800cedc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cee0:	ec43 2b10 	vmov	d0, r2, r3
 800cee4:	4770      	bx	lr

0800cee6 <finite>:
 800cee6:	b082      	sub	sp, #8
 800cee8:	ed8d 0b00 	vstr	d0, [sp]
 800ceec:	9801      	ldr	r0, [sp, #4]
 800ceee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cef2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cef6:	0fc0      	lsrs	r0, r0, #31
 800cef8:	b002      	add	sp, #8
 800cefa:	4770      	bx	lr
 800cefc:	0000      	movs	r0, r0
	...

0800cf00 <nan>:
 800cf00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf08 <nan+0x8>
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	00000000 	.word	0x00000000
 800cf0c:	7ff80000 	.word	0x7ff80000

0800cf10 <rint>:
 800cf10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf12:	ec51 0b10 	vmov	r0, r1, d0
 800cf16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cf1a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cf1e:	2e13      	cmp	r6, #19
 800cf20:	ee10 4a10 	vmov	r4, s0
 800cf24:	460b      	mov	r3, r1
 800cf26:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800cf2a:	dc58      	bgt.n	800cfde <rint+0xce>
 800cf2c:	2e00      	cmp	r6, #0
 800cf2e:	da2b      	bge.n	800cf88 <rint+0x78>
 800cf30:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cf34:	4302      	orrs	r2, r0
 800cf36:	d023      	beq.n	800cf80 <rint+0x70>
 800cf38:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cf3c:	4302      	orrs	r2, r0
 800cf3e:	4254      	negs	r4, r2
 800cf40:	4314      	orrs	r4, r2
 800cf42:	0c4b      	lsrs	r3, r1, #17
 800cf44:	0b24      	lsrs	r4, r4, #12
 800cf46:	045b      	lsls	r3, r3, #17
 800cf48:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cf4c:	ea44 0103 	orr.w	r1, r4, r3
 800cf50:	4b32      	ldr	r3, [pc, #200]	; (800d01c <rint+0x10c>)
 800cf52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cf56:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	4630      	mov	r0, r6
 800cf60:	4639      	mov	r1, r7
 800cf62:	f7f3 f98b 	bl	800027c <__adddf3>
 800cf66:	e9cd 0100 	strd	r0, r1, [sp]
 800cf6a:	463b      	mov	r3, r7
 800cf6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf70:	4632      	mov	r2, r6
 800cf72:	f7f3 f981 	bl	8000278 <__aeabi_dsub>
 800cf76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf7a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cf7e:	4639      	mov	r1, r7
 800cf80:	ec41 0b10 	vmov	d0, r0, r1
 800cf84:	b003      	add	sp, #12
 800cf86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf88:	4a25      	ldr	r2, [pc, #148]	; (800d020 <rint+0x110>)
 800cf8a:	4132      	asrs	r2, r6
 800cf8c:	ea01 0702 	and.w	r7, r1, r2
 800cf90:	4307      	orrs	r7, r0
 800cf92:	d0f5      	beq.n	800cf80 <rint+0x70>
 800cf94:	0851      	lsrs	r1, r2, #1
 800cf96:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cf9a:	4314      	orrs	r4, r2
 800cf9c:	d00c      	beq.n	800cfb8 <rint+0xa8>
 800cf9e:	ea23 0201 	bic.w	r2, r3, r1
 800cfa2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cfa6:	2e13      	cmp	r6, #19
 800cfa8:	fa43 f606 	asr.w	r6, r3, r6
 800cfac:	bf0c      	ite	eq
 800cfae:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cfb2:	2400      	movne	r4, #0
 800cfb4:	ea42 0306 	orr.w	r3, r2, r6
 800cfb8:	4918      	ldr	r1, [pc, #96]	; (800d01c <rint+0x10c>)
 800cfba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	f7f3 f958 	bl	800027c <__adddf3>
 800cfcc:	e9cd 0100 	strd	r0, r1, [sp]
 800cfd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	f7f3 f94e 	bl	8000278 <__aeabi_dsub>
 800cfdc:	e7d0      	b.n	800cf80 <rint+0x70>
 800cfde:	2e33      	cmp	r6, #51	; 0x33
 800cfe0:	dd07      	ble.n	800cff2 <rint+0xe2>
 800cfe2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cfe6:	d1cb      	bne.n	800cf80 <rint+0x70>
 800cfe8:	ee10 2a10 	vmov	r2, s0
 800cfec:	f7f3 f946 	bl	800027c <__adddf3>
 800cff0:	e7c6      	b.n	800cf80 <rint+0x70>
 800cff2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cff6:	f04f 36ff 	mov.w	r6, #4294967295
 800cffa:	40d6      	lsrs	r6, r2
 800cffc:	4230      	tst	r0, r6
 800cffe:	d0bf      	beq.n	800cf80 <rint+0x70>
 800d000:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800d004:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800d008:	bf1f      	itttt	ne
 800d00a:	ea24 0101 	bicne.w	r1, r4, r1
 800d00e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d012:	fa44 f202 	asrne.w	r2, r4, r2
 800d016:	ea41 0402 	orrne.w	r4, r1, r2
 800d01a:	e7cd      	b.n	800cfb8 <rint+0xa8>
 800d01c:	080f13e8 	.word	0x080f13e8
 800d020:	000fffff 	.word	0x000fffff
 800d024:	00000000 	.word	0x00000000

0800d028 <scalbn>:
 800d028:	b570      	push	{r4, r5, r6, lr}
 800d02a:	ec55 4b10 	vmov	r4, r5, d0
 800d02e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d032:	4606      	mov	r6, r0
 800d034:	462b      	mov	r3, r5
 800d036:	b99a      	cbnz	r2, 800d060 <scalbn+0x38>
 800d038:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d03c:	4323      	orrs	r3, r4
 800d03e:	d036      	beq.n	800d0ae <scalbn+0x86>
 800d040:	4b39      	ldr	r3, [pc, #228]	; (800d128 <scalbn+0x100>)
 800d042:	4629      	mov	r1, r5
 800d044:	ee10 0a10 	vmov	r0, s0
 800d048:	2200      	movs	r2, #0
 800d04a:	f7f3 facd 	bl	80005e8 <__aeabi_dmul>
 800d04e:	4b37      	ldr	r3, [pc, #220]	; (800d12c <scalbn+0x104>)
 800d050:	429e      	cmp	r6, r3
 800d052:	4604      	mov	r4, r0
 800d054:	460d      	mov	r5, r1
 800d056:	da10      	bge.n	800d07a <scalbn+0x52>
 800d058:	a32b      	add	r3, pc, #172	; (adr r3, 800d108 <scalbn+0xe0>)
 800d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05e:	e03a      	b.n	800d0d6 <scalbn+0xae>
 800d060:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d064:	428a      	cmp	r2, r1
 800d066:	d10c      	bne.n	800d082 <scalbn+0x5a>
 800d068:	ee10 2a10 	vmov	r2, s0
 800d06c:	4620      	mov	r0, r4
 800d06e:	4629      	mov	r1, r5
 800d070:	f7f3 f904 	bl	800027c <__adddf3>
 800d074:	4604      	mov	r4, r0
 800d076:	460d      	mov	r5, r1
 800d078:	e019      	b.n	800d0ae <scalbn+0x86>
 800d07a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d07e:	460b      	mov	r3, r1
 800d080:	3a36      	subs	r2, #54	; 0x36
 800d082:	4432      	add	r2, r6
 800d084:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d088:	428a      	cmp	r2, r1
 800d08a:	dd08      	ble.n	800d09e <scalbn+0x76>
 800d08c:	2d00      	cmp	r5, #0
 800d08e:	a120      	add	r1, pc, #128	; (adr r1, 800d110 <scalbn+0xe8>)
 800d090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d094:	da1c      	bge.n	800d0d0 <scalbn+0xa8>
 800d096:	a120      	add	r1, pc, #128	; (adr r1, 800d118 <scalbn+0xf0>)
 800d098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d09c:	e018      	b.n	800d0d0 <scalbn+0xa8>
 800d09e:	2a00      	cmp	r2, #0
 800d0a0:	dd08      	ble.n	800d0b4 <scalbn+0x8c>
 800d0a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d0ae:	ec45 4b10 	vmov	d0, r4, r5
 800d0b2:	bd70      	pop	{r4, r5, r6, pc}
 800d0b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d0b8:	da19      	bge.n	800d0ee <scalbn+0xc6>
 800d0ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d0be:	429e      	cmp	r6, r3
 800d0c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d0c4:	dd0a      	ble.n	800d0dc <scalbn+0xb4>
 800d0c6:	a112      	add	r1, pc, #72	; (adr r1, 800d110 <scalbn+0xe8>)
 800d0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1e2      	bne.n	800d096 <scalbn+0x6e>
 800d0d0:	a30f      	add	r3, pc, #60	; (adr r3, 800d110 <scalbn+0xe8>)
 800d0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d6:	f7f3 fa87 	bl	80005e8 <__aeabi_dmul>
 800d0da:	e7cb      	b.n	800d074 <scalbn+0x4c>
 800d0dc:	a10a      	add	r1, pc, #40	; (adr r1, 800d108 <scalbn+0xe0>)
 800d0de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0b8      	beq.n	800d058 <scalbn+0x30>
 800d0e6:	a10e      	add	r1, pc, #56	; (adr r1, 800d120 <scalbn+0xf8>)
 800d0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0ec:	e7b4      	b.n	800d058 <scalbn+0x30>
 800d0ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0f2:	3236      	adds	r2, #54	; 0x36
 800d0f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	4b0c      	ldr	r3, [pc, #48]	; (800d130 <scalbn+0x108>)
 800d100:	2200      	movs	r2, #0
 800d102:	e7e8      	b.n	800d0d6 <scalbn+0xae>
 800d104:	f3af 8000 	nop.w
 800d108:	c2f8f359 	.word	0xc2f8f359
 800d10c:	01a56e1f 	.word	0x01a56e1f
 800d110:	8800759c 	.word	0x8800759c
 800d114:	7e37e43c 	.word	0x7e37e43c
 800d118:	8800759c 	.word	0x8800759c
 800d11c:	fe37e43c 	.word	0xfe37e43c
 800d120:	c2f8f359 	.word	0xc2f8f359
 800d124:	81a56e1f 	.word	0x81a56e1f
 800d128:	43500000 	.word	0x43500000
 800d12c:	ffff3cb0 	.word	0xffff3cb0
 800d130:	3c900000 	.word	0x3c900000

0800d134 <_init>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	bf00      	nop
 800d138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13a:	bc08      	pop	{r3}
 800d13c:	469e      	mov	lr, r3
 800d13e:	4770      	bx	lr

0800d140 <_fini>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	bf00      	nop
 800d144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d146:	bc08      	pop	{r3}
 800d148:	469e      	mov	lr, r3
 800d14a:	4770      	bx	lr
