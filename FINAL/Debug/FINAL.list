
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e42a8  0800cd48  0800cd48  0001cd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080f0ff0  080f0ff0  001100d0  2**0
                  CONTENTS
  4 .ARM          00000008  080f0ff0  080f0ff0  00100ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080f0ff8  080f0ff8  001100d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080f0ff8  080f0ff8  00100ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080f0ffc  080f0ffc  00100ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080f1000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  001100d0  2**0
                  CONTENTS
 10 .bss          00000764  200000d0  200000d0  001100d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000834  20000834  001100d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  001100d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002689f  00000000  00000000  00110100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005027  00000000  00000000  0013699f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  0013b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001798  00000000  00000000  0013d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f11  00000000  00000000  0013eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023b26  00000000  00000000  00167a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2237  00000000  00000000  0018b56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0026d7a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000766c  00000000  00000000  0026d7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd2c 	.word	0x0800cd2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800cd2c 	.word	0x0800cd2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f84:	4a3d      	ldr	r2, [pc, #244]	; (800107c <MX_ADC1_Init+0x10c>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <MX_ADC1_Init+0x108>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <MX_ADC1_Init+0x108>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fb0:	4a33      	ldr	r2, [pc, #204]	; (8001080 <MX_ADC1_Init+0x110>)
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fce:	482a      	ldr	r0, [pc, #168]	; (8001078 <MX_ADC1_Init+0x108>)
 8000fd0:	f004 fb54 	bl	800567c <HAL_ADC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f002 fbdb 	bl	8003794 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4822      	ldr	r0, [pc, #136]	; (8001078 <MX_ADC1_Init+0x108>)
 8000ff0:	f004 fb88 	bl	8005704 <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ffa:	f002 fbcb 	bl	8003794 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ffe:	2309      	movs	r3, #9
 8001000:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <MX_ADC1_Init+0x108>)
 800100c:	f004 fb7a 	bl	8005704 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001016:	f002 fbbd 	bl	8003794 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800101e:	2303      	movs	r3, #3
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_ADC1_Init+0x108>)
 8001028:	f004 fb6c 	bl	8005704 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001032:	f002 fbaf 	bl	8003794 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001036:	230b      	movs	r3, #11
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800103a:	2304      	movs	r3, #4
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_ADC1_Init+0x108>)
 8001044:	f004 fb5e 	bl	8005704 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800104e:	f002 fba1 	bl	8003794 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001052:	230c      	movs	r3, #12
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001056:	2305      	movs	r3, #5
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC1_Init+0x108>)
 8001060:	f004 fb50 	bl	8005704 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800106a:	f002 fb93 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000134 	.word	0x20000134
 800107c:	40012000 	.word	0x40012000
 8001080:	0f000001 	.word	0x0f000001

08001084 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	at24c_Check();
 8001088:	f000 f83c 	bl	8001104 <at24c_Check>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	230a      	movs	r3, #10
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	2301      	movs	r3, #1
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	f107 030f 	add.w	r3, r7, #15
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2310      	movs	r3, #16
 80010b0:	21a0      	movs	r1, #160	; 0xa0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <at24c_ReadOneByte+0x34>)
 80010b4:	f005 fdf8 	bl	8006ca8 <HAL_I2C_Mem_Read>
	return temp;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000578 	.word	0x20000578

080010c8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	80fb      	strh	r3, [r7, #6]
 80010d4:	4613      	mov	r3, r2
 80010d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80010d8:	88fa      	ldrh	r2, [r7, #6]
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1d7b      	adds	r3, r7, #5
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2310      	movs	r3, #16
 80010e8:	21a0      	movs	r1, #160	; 0xa0
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <at24c_WriteOneByte+0x38>)
 80010ec:	f005 fce2 	bl	8006ab4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80010f0:	2005      	movs	r0, #5
 80010f2:	f004 fa9f 	bl	8005634 <HAL_Delay>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000578 	.word	0x20000578

08001104 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800110a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800110e:	f7ff ffbf 	bl	8001090 <at24c_ReadOneByte>
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b55      	cmp	r3, #85	; 0x55
 800111a:	d101      	bne.n	8001120 <at24c_Check+0x1c>
 800111c:	2300      	movs	r3, #0
 800111e:	e010      	b.n	8001142 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001120:	2155      	movs	r1, #85	; 0x55
 8001122:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001126:	f7ff ffcf 	bl	80010c8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800112a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800112e:	f7ff ffaf 	bl	8001090 <at24c_ReadOneByte>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b55      	cmp	r3, #85	; 0x55
 800113a:	d101      	bne.n	8001140 <at24c_Check+0x3c>
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <at24c_Check+0x3e>
	}
	return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	80fb      	strh	r3, [r7, #6]
 8001156:	4613      	mov	r3, r2
 8001158:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800115a:	e00d      	b.n	8001178 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	80fa      	strh	r2, [r7, #6]
 8001162:	683c      	ldr	r4, [r7, #0]
 8001164:	1c62      	adds	r2, r4, #1
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff91 	bl	8001090 <at24c_ReadOneByte>
 800116e:	4603      	mov	r3, r0
 8001170:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	3b01      	subs	r3, #1
 8001176:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1ee      	bne.n	800115c <at24c_Read+0x12>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001198:	e00c      	b.n	80011b4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff90 	bl	80010c8 <at24c_WriteOneByte>
		WriteAddr++;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	3301      	adds	r3, #1
 80011ac:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	80ba      	strh	r2, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ed      	bne.n	800119a <at24c_Write+0x12>
	}
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2108      	movs	r1, #8
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <button_init+0x14>)
 80011d2:	f005 faf7 	bl	80067c4 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	482f      	ldr	r0, [pc, #188]	; (80012a8 <button_Scan+0xc8>)
 80011ec:	f005 faea 	bl	80067c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2108      	movs	r1, #8
 80011f4:	482c      	ldr	r0, [pc, #176]	; (80012a8 <button_Scan+0xc8>)
 80011f6:	f005 fae5 	bl	80067c4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80011fa:	230a      	movs	r3, #10
 80011fc:	2202      	movs	r2, #2
 80011fe:	492b      	ldr	r1, [pc, #172]	; (80012ac <button_Scan+0xcc>)
 8001200:	482b      	ldr	r0, [pc, #172]	; (80012b0 <button_Scan+0xd0>)
 8001202:	f007 f90c 	bl	800841e <HAL_SPI_Receive>
	  int button_index = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800120a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	e03f      	b.n	8001296 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db06      	blt.n	800122a <button_Scan+0x4a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b03      	cmp	r3, #3
 8001220:	dc03      	bgt.n	800122a <button_Scan+0x4a>
			  button_index = i + 4;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3304      	adds	r3, #4
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e018      	b.n	800125c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b03      	cmp	r3, #3
 800122e:	dd07      	ble.n	8001240 <button_Scan+0x60>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b07      	cmp	r3, #7
 8001234:	dc04      	bgt.n	8001240 <button_Scan+0x60>
			  button_index = 7 - i;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f1c3 0307 	rsb	r3, r3, #7
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	e00d      	b.n	800125c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b07      	cmp	r3, #7
 8001244:	dd06      	ble.n	8001254 <button_Scan+0x74>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0b      	cmp	r3, #11
 800124a:	dc03      	bgt.n	8001254 <button_Scan+0x74>
			  button_index = i + 4;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3304      	adds	r3, #4
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e003      	b.n	800125c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f1c3 0317 	rsb	r3, r3, #23
 800125a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <button_Scan+0xcc>)
 800125e:	881a      	ldrh	r2, [r3, #0]
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	4013      	ands	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <button_Scan+0x96>
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <button_Scan+0xd4>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2100      	movs	r1, #0
 8001270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001274:	e009      	b.n	800128a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <button_Scan+0xd4>)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127e:	3301      	adds	r3, #1
 8001280:	b299      	uxth	r1, r3
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <button_Scan+0xd4>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	ddbc      	ble.n	8001216 <button_Scan+0x36>
	  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	200000ec 	.word	0x200000ec
 80012b0:	20000668 	.word	0x20000668
 80012b4:	2000017c 	.word	0x2000017c

080012b8 <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2038      	movs	r0, #56	; 0x38
 80012e0:	f004 fd09 	bl	8005cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012e4:	2038      	movs	r0, #56	; 0x38
 80012e6:	f004 fd22 	bl	8005d2e <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <temp_game>:

#include "fsm.h"

uint32_t counter = 0;

void temp_game(){
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	tempFlag = 1;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <temp_game+0x24>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
	tempStatus = status;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <temp_game+0x28>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <temp_game+0x2c>)
 8001308:	6013      	str	r3, [r2, #0]
	tempMove = move;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <temp_game+0x30>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <temp_game+0x34>)
 8001310:	6013      	str	r3, [r2, #0]
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	20000104 	.word	0x20000104
 8001320:	200000f4 	.word	0x200000f4
 8001324:	20000108 	.word	0x20000108
 8001328:	200000f8 	.word	0x200000f8
 800132c:	2000010c 	.word	0x2000010c

08001330 <continue_game>:

void continue_game(){
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	status = tempStatus;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <continue_game+0x1c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a05      	ldr	r2, [pc, #20]	; (8001350 <continue_game+0x20>)
 800133a:	6013      	str	r3, [r2, #0]
	move = tempMove;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <continue_game+0x24>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <continue_game+0x28>)
 8001342:	6013      	str	r3, [r2, #0]
	reDraw_snake();
 8001344:	f002 fbc2 	bl	8003acc <reDraw_snake>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000108 	.word	0x20000108
 8001350:	200000f4 	.word	0x200000f4
 8001354:	2000010c 	.word	0x2000010c
 8001358:	200000f8 	.word	0x200000f8

0800135c <input_inGame>:

void input_inGame(){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	if (is_touch_right() == 1 && move != LEFT){
 8001360:	f000 fb02 	bl	8001968 <is_touch_right>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d107      	bne.n	800137a <input_inGame+0x1e>
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <input_inGame+0x8c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d003      	beq.n	800137a <input_inGame+0x1e>
		move = RIGHT;
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <input_inGame+0x8c>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e033      	b.n	80013e2 <input_inGame+0x86>
	}
	else if (is_touch_left() == 1 && move != RIGHT){
 800137a:	f000 fb19 	bl	80019b0 <is_touch_left>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	d107      	bne.n	8001394 <input_inGame+0x38>
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <input_inGame+0x8c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d003      	beq.n	8001394 <input_inGame+0x38>
		move = LEFT;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <input_inGame+0x8c>)
 800138e:	2202      	movs	r2, #2
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e026      	b.n	80013e2 <input_inGame+0x86>
	}
	else if (is_touch_up() == 1 && move != DOWN){
 8001394:	f000 fb30 	bl	80019f8 <is_touch_up>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <input_inGame+0x52>
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <input_inGame+0x8c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d003      	beq.n	80013ae <input_inGame+0x52>
		move = UP;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <input_inGame+0x8c>)
 80013a8:	2203      	movs	r2, #3
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e019      	b.n	80013e2 <input_inGame+0x86>
	}
	else if (is_touch_down() == 1 && move != UP){
 80013ae:	f000 fb45 	bl	8001a3c <is_touch_down>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d107      	bne.n	80013c8 <input_inGame+0x6c>
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <input_inGame+0x8c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d003      	beq.n	80013c8 <input_inGame+0x6c>
		move = DOWN;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <input_inGame+0x8c>)
 80013c2:	2204      	movs	r2, #4
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e00c      	b.n	80013e2 <input_inGame+0x86>
	}
	else if (is_touch_pause() == 1){
 80013c8:	f000 fbc3 	bl	8001b52 <is_touch_pause>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d107      	bne.n	80013e2 <input_inGame+0x86>
		temp_game();
 80013d2:	f7ff ff91 	bl	80012f8 <temp_game>
		move = NOT;
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <input_inGame+0x8c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
		pause_lcd();
 80013dc:	f001 f814 	bl	8002408 <pause_lcd>
	}
}
 80013e0:	e7ff      	b.n	80013e2 <input_inGame+0x86>
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000f8 	.word	0x200000f8

080013ec <input_process>:

void input_process(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	switch (status) {
 80013f0:	4b79      	ldr	r3, [pc, #484]	; (80015d8 <input_process+0x1ec>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b17      	cmp	r3, #23
 80013f6:	f200 80df 	bhi.w	80015b8 <input_process+0x1cc>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <input_process+0x14>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001461 	.word	0x08001461
 8001404:	080014bf 	.word	0x080014bf
 8001408:	080015b9 	.word	0x080015b9
 800140c:	08001539 	.word	0x08001539
 8001410:	080015b9 	.word	0x080015b9
 8001414:	080015b9 	.word	0x080015b9
 8001418:	080015b9 	.word	0x080015b9
 800141c:	080015b9 	.word	0x080015b9
 8001420:	080015b9 	.word	0x080015b9
 8001424:	080015b9 	.word	0x080015b9
 8001428:	080015b9 	.word	0x080015b9
 800142c:	0800154f 	.word	0x0800154f
 8001430:	08001555 	.word	0x08001555
 8001434:	0800155b 	.word	0x0800155b
 8001438:	080015b9 	.word	0x080015b9
 800143c:	080015b9 	.word	0x080015b9
 8001440:	080015b9 	.word	0x080015b9
 8001444:	080015b9 	.word	0x080015b9
 8001448:	080015b9 	.word	0x080015b9
 800144c:	080015b9 	.word	0x080015b9
 8001450:	080015b9 	.word	0x080015b9
 8001454:	08001593 	.word	0x08001593
 8001458:	08001567 	.word	0x08001567
 800145c:	0800157d 	.word	0x0800157d
		case HOME:
			if (is_touch_newGame() == 1 || button_count[0] == 1){
 8001460:	f000 fb9b 	bl	8001b9a <is_touch_newGame>
 8001464:	4603      	mov	r3, r0
 8001466:	2b01      	cmp	r3, #1
 8001468:	d003      	beq.n	8001472 <input_process+0x86>
 800146a:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <input_process+0x1f0>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d10a      	bne.n	8001488 <input_process+0x9c>
				tempFlag = 0;
 8001472:	4b5b      	ldr	r3, [pc, #364]	; (80015e0 <input_process+0x1f4>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
				status = MODE;
 8001478:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <input_process+0x1ec>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]
				snake_init();
 800147e:	f002 f98f 	bl	80037a0 <snake_init>
				mode_game_lcd();
 8001482:	f000 fe0b 	bl	800209c <mode_game_lcd>
			}
			else if (is_touch_highScore() == 1){
				status = HIGHSCORE;
				highscore_lcd();
			}
			break;
 8001486:	e099      	b.n	80015bc <input_process+0x1d0>
			else if (is_touch_continue() == 1){
 8001488:	f000 fc32 	bl	8001cf0 <is_touch_continue>
 800148c:	4603      	mov	r3, r0
 800148e:	2b01      	cmp	r3, #1
 8001490:	d109      	bne.n	80014a6 <input_process+0xba>
				if (tempFlag == 1)
 8001492:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <input_process+0x1f4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d102      	bne.n	80014a0 <input_process+0xb4>
					continue_game();
 800149a:	f7ff ff49 	bl	8001330 <continue_game>
			break;
 800149e:	e08d      	b.n	80015bc <input_process+0x1d0>
					home_second_lcd();
 80014a0:	f001 f8a0 	bl	80025e4 <home_second_lcd>
			break;
 80014a4:	e08a      	b.n	80015bc <input_process+0x1d0>
			else if (is_touch_highScore() == 1){
 80014a6:	f000 fb9a 	bl	8001bde <is_touch_highScore>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f040 8085 	bne.w	80015bc <input_process+0x1d0>
				status = HIGHSCORE;
 80014b2:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <input_process+0x1ec>)
 80014b4:	2203      	movs	r2, #3
 80014b6:	601a      	str	r2, [r3, #0]
				highscore_lcd();
 80014b8:	f000 fe5e 	bl	8002178 <highscore_lcd>
			break;
 80014bc:	e07e      	b.n	80015bc <input_process+0x1d0>
		case MODE:
			if (is_touch_classic() == 1){
 80014be:	f000 fbb1 	bl	8001c24 <is_touch_classic>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d10b      	bne.n	80014e0 <input_process+0xf4>
				status = CLASSIC;
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <input_process+0x1ec>)
 80014ca:	220b      	movs	r2, #11
 80014cc:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 80014ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d2:	f002 fb29 	bl	8003b28 <setTimer1>
				game_lcd();
 80014d6:	f000 ff1b 	bl	8002310 <game_lcd>
				score_lcd();
 80014da:	f000 ff7d 	bl	80023d8 <score_lcd>
 80014de:	e020      	b.n	8001522 <input_process+0x136>
			}
			else if (is_touch_speed() == 1){
 80014e0:	f000 fbc2 	bl	8001c68 <is_touch_speed>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10b      	bne.n	8001502 <input_process+0x116>
				status = SPEED;
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <input_process+0x1ec>)
 80014ec:	220c      	movs	r2, #12
 80014ee:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 80014f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f4:	f002 fb18 	bl	8003b28 <setTimer1>
				game_lcd();
 80014f8:	f000 ff0a 	bl	8002310 <game_lcd>
				score_lcd();
 80014fc:	f000 ff6c 	bl	80023d8 <score_lcd>
 8001500:	e00f      	b.n	8001522 <input_process+0x136>
			}
			else if (is_touch_time() == 1){
 8001502:	f000 fbd3 	bl	8001cac <is_touch_time>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10a      	bne.n	8001522 <input_process+0x136>
				status = TIME;
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <input_process+0x1ec>)
 800150e:	220d      	movs	r2, #13
 8001510:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8001512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001516:	f002 fb07 	bl	8003b28 <setTimer1>
				game_lcd();
 800151a:	f000 fef9 	bl	8002310 <game_lcd>
				score_lcd();
 800151e:	f000 ff5b 	bl	80023d8 <score_lcd>
			}
			if (is_touch_quit() == 1){
 8001522:	f000 faaf 	bl	8001a84 <is_touch_quit>
 8001526:	4603      	mov	r3, r0
 8001528:	2b01      	cmp	r3, #1
 800152a:	d149      	bne.n	80015c0 <input_process+0x1d4>
				status = HOME;
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <input_process+0x1ec>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001532:	f000 fd5b 	bl	8001fec <home_lcd>
			}
			break;
 8001536:	e043      	b.n	80015c0 <input_process+0x1d4>
		case HIGHSCORE:
			if (is_touch_quit() == 1){
 8001538:	f000 faa4 	bl	8001a84 <is_touch_quit>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d140      	bne.n	80015c4 <input_process+0x1d8>
				status = HOME;
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <input_process+0x1ec>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001548:	f000 fd50 	bl	8001fec <home_lcd>
			}
			break;
 800154c:	e03a      	b.n	80015c4 <input_process+0x1d8>
		case CLASSIC:
			input_inGame();
 800154e:	f7ff ff05 	bl	800135c <input_inGame>
			break;
 8001552:	e03e      	b.n	80015d2 <input_process+0x1e6>
		case SPEED:
			input_inGame();
 8001554:	f7ff ff02 	bl	800135c <input_inGame>
			break;
 8001558:	e03b      	b.n	80015d2 <input_process+0x1e6>
		case TIME:
			input_inGame();
 800155a:	f7ff feff 	bl	800135c <input_inGame>
			counter = 0;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <input_process+0x1f8>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
			break;
 8001564:	e035      	b.n	80015d2 <input_process+0x1e6>
		case GAMEOVER:
			if (is_touch_quit_end() == 1){
 8001566:	f000 fab0 	bl	8001aca <is_touch_quit_end>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d12b      	bne.n	80015c8 <input_process+0x1dc>
				status = MODE;
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <input_process+0x1ec>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 8001576:	f000 fd91 	bl	800209c <mode_game_lcd>
			}
			break;
 800157a:	e025      	b.n	80015c8 <input_process+0x1dc>
		case WIN:
			if (is_touch_quit_end() == 1){
 800157c:	f000 faa5 	bl	8001aca <is_touch_quit_end>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d122      	bne.n	80015cc <input_process+0x1e0>
				status = MODE;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <input_process+0x1ec>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 800158c:	f000 fd86 	bl	800209c <mode_game_lcd>
			}
			break;
 8001590:	e01c      	b.n	80015cc <input_process+0x1e0>
		case PAUSE:
			if (is_touch_quit_end() == 1){
 8001592:	f000 fa9a 	bl	8001aca <is_touch_quit_end>
 8001596:	4603      	mov	r3, r0
 8001598:	2b01      	cmp	r3, #1
 800159a:	d105      	bne.n	80015a8 <input_process+0x1bc>
				status = MODE;
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <input_process+0x1ec>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
				mode_game_lcd();
 80015a2:	f000 fd7b 	bl	800209c <mode_game_lcd>
			}
			else if (is_touch_resume() == 1){
				continue_game();
			}
			break;
 80015a6:	e013      	b.n	80015d0 <input_process+0x1e4>
			else if (is_touch_resume() == 1){
 80015a8:	f000 fab1 	bl	8001b0e <is_touch_resume>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d10e      	bne.n	80015d0 <input_process+0x1e4>
				continue_game();
 80015b2:	f7ff febd 	bl	8001330 <continue_game>
			break;
 80015b6:	e00b      	b.n	80015d0 <input_process+0x1e4>
		default:
			break;
 80015b8:	bf00      	nop
 80015ba:	e00a      	b.n	80015d2 <input_process+0x1e6>
			break;
 80015bc:	bf00      	nop
 80015be:	e008      	b.n	80015d2 <input_process+0x1e6>
			break;
 80015c0:	bf00      	nop
 80015c2:	e006      	b.n	80015d2 <input_process+0x1e6>
			break;
 80015c4:	bf00      	nop
 80015c6:	e004      	b.n	80015d2 <input_process+0x1e6>
			break;
 80015c8:	bf00      	nop
 80015ca:	e002      	b.n	80015d2 <input_process+0x1e6>
			break;
 80015cc:	bf00      	nop
 80015ce:	e000      	b.n	80015d2 <input_process+0x1e6>
			break;
 80015d0:	bf00      	nop
	}
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000f4 	.word	0x200000f4
 80015dc:	2000017c 	.word	0x2000017c
 80015e0:	20000104 	.word	0x20000104
 80015e4:	200000f0 	.word	0x200000f0

080015e8 <score_cal>:
//tinh toan cap nhat diem so
void score_cal(){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	current_score = current_score + (400 / counter_time_score) * 5 + 5;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <score_cal+0x30>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80015f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	441a      	add	r2, r3
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <score_cal+0x34>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	3305      	adds	r3, #5
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <score_cal+0x34>)
 8001608:	6013      	str	r3, [r2, #0]
	counter_time_score = 0;
 800160a:	4b03      	ldr	r3, [pc, #12]	; (8001618 <score_cal+0x30>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
	score_lcd();
 8001610:	f000 fee2 	bl	80023d8 <score_lcd>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200000fc 	.word	0x200000fc
 800161c:	20000004 	.word	0x20000004

08001620 <inGame>:

void inGame(){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	move_snake();
 8001624:	f002 f9f2 	bl	8003a0c <move_snake>
	if (is_collision() == 1){
 8001628:	f002 f934 	bl	8003894 <is_collision>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <inGame+0x22>
		status = GAMEOVER;
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <inGame+0x5c>)
 8001634:	2216      	movs	r2, #22
 8001636:	601a      	str	r2, [r3, #0]
		snake_init();
 8001638:	f002 f8b2 	bl	80037a0 <snake_init>
		game_over_lcd();
 800163c:	f000 ff24 	bl	8002488 <game_over_lcd>
	else if (length == 100){
		status = WIN;
		youwin_lcd();
		snake_init();
	}
}
 8001640:	e019      	b.n	8001676 <inGame+0x56>
	else if (is_eat() == 1){
 8001642:	f002 f965 	bl	8003910 <is_eat>
 8001646:	4603      	mov	r3, r0
 8001648:	2b01      	cmp	r3, #1
 800164a:	d109      	bne.n	8001660 <inGame+0x40>
		length++;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <inGame+0x60>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <inGame+0x60>)
 8001654:	6013      	str	r3, [r2, #0]
		score_cal();
 8001656:	f7ff ffc7 	bl	80015e8 <score_cal>
		rand_food();
 800165a:	f002 f9a5 	bl	80039a8 <rand_food>
}
 800165e:	e00a      	b.n	8001676 <inGame+0x56>
	else if (length == 100){
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <inGame+0x60>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d106      	bne.n	8001676 <inGame+0x56>
		status = WIN;
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <inGame+0x5c>)
 800166a:	2217      	movs	r2, #23
 800166c:	601a      	str	r2, [r3, #0]
		youwin_lcd();
 800166e:	f000 ff43 	bl	80024f8 <youwin_lcd>
		snake_init();
 8001672:	f002 f895 	bl	80037a0 <snake_init>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000f4 	.word	0x200000f4
 8001680:	20000008 	.word	0x20000008

08001684 <fsm_ingame>:

void fsm_ingame(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	switch (status) {
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <fsm_ingame+0x130>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b0d      	cmp	r3, #13
 800168e:	d03c      	beq.n	800170a <fsm_ingame+0x86>
 8001690:	2b0d      	cmp	r3, #13
 8001692:	f300 8085 	bgt.w	80017a0 <fsm_ingame+0x11c>
 8001696:	2b0b      	cmp	r3, #11
 8001698:	d002      	beq.n	80016a0 <fsm_ingame+0x1c>
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d00f      	beq.n	80016be <fsm_ingame+0x3a>
				game_over_lcd();
				snake_init();
			}
			break;
		default:
			break;
 800169e:	e07f      	b.n	80017a0 <fsm_ingame+0x11c>
			counter_time_score++;
 80016a0:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <fsm_ingame+0x134>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <fsm_ingame+0x134>)
 80016a8:	6013      	str	r3, [r2, #0]
			if (flag_timer1 == 1){
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <fsm_ingame+0x138>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d178      	bne.n	80017a4 <fsm_ingame+0x120>
				flag_timer1 = 0;
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <fsm_ingame+0x138>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
				inGame();
 80016b8:	f7ff ffb2 	bl	8001620 <inGame>
			break;
 80016bc:	e072      	b.n	80017a4 <fsm_ingame+0x120>
			counter_time_score++;
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <fsm_ingame+0x134>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a3c      	ldr	r2, [pc, #240]	; (80017b8 <fsm_ingame+0x134>)
 80016c6:	6013      	str	r3, [r2, #0]
			if (flag_timer1 == 1){
 80016c8:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <fsm_ingame+0x138>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d104      	bne.n	80016da <fsm_ingame+0x56>
				flag_timer1 = 0;
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <fsm_ingame+0x138>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	801a      	strh	r2, [r3, #0]
				inGame();
 80016d6:	f7ff ffa3 	bl	8001620 <inGame>
			if (length == 5){
 80016da:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <fsm_ingame+0x13c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d103      	bne.n	80016ea <fsm_ingame+0x66>
				setTimer1(200);
 80016e2:	20c8      	movs	r0, #200	; 0xc8
 80016e4:	f002 fa20 	bl	8003b28 <setTimer1>
			break;
 80016e8:	e05e      	b.n	80017a8 <fsm_ingame+0x124>
			else if (length == 10){
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <fsm_ingame+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d103      	bne.n	80016fa <fsm_ingame+0x76>
				setTimer1(100);
 80016f2:	2064      	movs	r0, #100	; 0x64
 80016f4:	f002 fa18 	bl	8003b28 <setTimer1>
			break;
 80016f8:	e056      	b.n	80017a8 <fsm_ingame+0x124>
			else if (length == 15){
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <fsm_ingame+0x13c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	d152      	bne.n	80017a8 <fsm_ingame+0x124>
				setTimer1(50);
 8001702:	2032      	movs	r0, #50	; 0x32
 8001704:	f002 fa10 	bl	8003b28 <setTimer1>
			break;
 8001708:	e04e      	b.n	80017a8 <fsm_ingame+0x124>
			counter_time_score++;
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <fsm_ingame+0x134>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <fsm_ingame+0x134>)
 8001712:	6013      	str	r3, [r2, #0]
			if (++counter % 20 == 0){
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <fsm_ingame+0x140>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	4a2a      	ldr	r2, [pc, #168]	; (80017c4 <fsm_ingame+0x140>)
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <fsm_ingame+0x140>)
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <fsm_ingame+0x144>)
 8001724:	fba3 2301 	umull	r2, r3, r3, r1
 8001728:	091a      	lsrs	r2, r3, #4
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	1aca      	subs	r2, r1, r3
 8001734:	2a00      	cmp	r2, #0
 8001736:	d106      	bne.n	8001746 <fsm_ingame+0xc2>
				counter_time--;
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <fsm_ingame+0x148>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <fsm_ingame+0x148>)
 8001740:	6013      	str	r3, [r2, #0]
				update_7seg_time();
 8001742:	f000 fffb 	bl	800273c <update_7seg_time>
			if (flag_timer1 == 1){
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <fsm_ingame+0x138>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d104      	bne.n	8001758 <fsm_ingame+0xd4>
				flag_timer1 = 0;
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <fsm_ingame+0x138>)
 8001750:	2200      	movs	r2, #0
 8001752:	801a      	strh	r2, [r3, #0]
				inGame();
 8001754:	f7ff ff64 	bl	8001620 <inGame>
			if (counter_time <= 50){
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <fsm_ingame+0x148>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b32      	cmp	r3, #50	; 0x32
 800175e:	d803      	bhi.n	8001768 <fsm_ingame+0xe4>
				setTimer1(200);
 8001760:	20c8      	movs	r0, #200	; 0xc8
 8001762:	f002 f9e1 	bl	8003b28 <setTimer1>
			break;
 8001766:	e021      	b.n	80017ac <fsm_ingame+0x128>
			else if (counter_time <= 35){
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <fsm_ingame+0x148>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b23      	cmp	r3, #35	; 0x23
 800176e:	d803      	bhi.n	8001778 <fsm_ingame+0xf4>
				setTimer1(100);
 8001770:	2064      	movs	r0, #100	; 0x64
 8001772:	f002 f9d9 	bl	8003b28 <setTimer1>
			break;
 8001776:	e019      	b.n	80017ac <fsm_ingame+0x128>
			else if (counter_time <= 20){
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <fsm_ingame+0x148>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b14      	cmp	r3, #20
 800177e:	d803      	bhi.n	8001788 <fsm_ingame+0x104>
				setTimer1(50);
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f002 f9d1 	bl	8003b28 <setTimer1>
			break;
 8001786:	e011      	b.n	80017ac <fsm_ingame+0x128>
			else if (counter_time <= 0){
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <fsm_ingame+0x148>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <fsm_ingame+0x128>
				status = GAMEOVER;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <fsm_ingame+0x130>)
 8001792:	2216      	movs	r2, #22
 8001794:	601a      	str	r2, [r3, #0]
				game_over_lcd();
 8001796:	f000 fe77 	bl	8002488 <game_over_lcd>
				snake_init();
 800179a:	f002 f801 	bl	80037a0 <snake_init>
			break;
 800179e:	e005      	b.n	80017ac <fsm_ingame+0x128>
			break;
 80017a0:	bf00      	nop
 80017a2:	e004      	b.n	80017ae <fsm_ingame+0x12a>
			break;
 80017a4:	bf00      	nop
 80017a6:	e002      	b.n	80017ae <fsm_ingame+0x12a>
			break;
 80017a8:	bf00      	nop
 80017aa:	e000      	b.n	80017ae <fsm_ingame+0x12a>
			break;
 80017ac:	bf00      	nop
	}
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000f4 	.word	0x200000f4
 80017b8:	200000fc 	.word	0x200000fc
 80017bc:	20000114 	.word	0x20000114
 80017c0:	20000008 	.word	0x20000008
 80017c4:	200000f0 	.word	0x200000f0
 80017c8:	cccccccd 	.word	0xcccccccd
 80017cc:	20000100 	.word	0x20000100

080017d0 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <MX_FSMC_Init+0xec>)
 80017fe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001802:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <MX_FSMC_Init+0xec>)
 8001806:	4a2e      	ldr	r2, [pc, #184]	; (80018c0 <MX_FSMC_Init+0xf0>)
 8001808:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <MX_FSMC_Init+0xec>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <MX_FSMC_Init+0xec>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <MX_FSMC_Init+0xec>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <MX_FSMC_Init+0xec>)
 800181e:	2210      	movs	r2, #16
 8001820:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <MX_FSMC_Init+0xec>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <MX_FSMC_Init+0xec>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <MX_FSMC_Init+0xec>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <MX_FSMC_Init+0xec>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <MX_FSMC_Init+0xec>)
 800183c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_FSMC_Init+0xec>)
 8001844:	2200      	movs	r2, #0
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_FSMC_Init+0xec>)
 800184a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_FSMC_Init+0xec>)
 8001852:	2200      	movs	r2, #0
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_FSMC_Init+0xec>)
 8001858:	2200      	movs	r2, #0
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_FSMC_Init+0xec>)
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001862:	230f      	movs	r3, #15
 8001864:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001866:	230f      	movs	r3, #15
 8001868:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800186a:	233c      	movs	r3, #60	; 0x3c
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001872:	2310      	movs	r3, #16
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001876:	2311      	movs	r3, #17
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800187e:	2308      	movs	r3, #8
 8001880:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001882:	230f      	movs	r3, #15
 8001884:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001886:	2309      	movs	r3, #9
 8001888:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800188e:	2310      	movs	r3, #16
 8001890:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001892:	2311      	movs	r3, #17
 8001894:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800189a:	463a      	mov	r2, r7
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_FSMC_Init+0xec>)
 80018a4:	f007 f99e 	bl	8008be4 <HAL_SRAM_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80018ae:	f001 ff71 	bl	8003794 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80018b2:	bf00      	nop
 80018b4:	3738      	adds	r7, #56	; 0x38
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000019c 	.word	0x2000019c
 80018c0:	a0000104 	.word	0xa0000104
 80018c4:	00000000 	.word	0x00000000

080018c8 <distance_of_two_point>:

#include "fun_touch.h"

// Tinh khoang cach hai diem
float distance_of_two_point(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	80fb      	strh	r3, [r7, #6]
 80018da:	4603      	mov	r3, r0
 80018dc:	80bb      	strh	r3, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	807b      	strh	r3, [r7, #2]
 80018e2:	4613      	mov	r3, r2
 80018e4:	803b      	strh	r3, [r7, #0]
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe11 	bl	8000514 <__aeabi_i2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001960 <distance_of_two_point+0x98>
 80018fa:	ec43 2b10 	vmov	d0, r2, r3
 80018fe:	f00a fa2b 	bl	800bd58 <pow>
 8001902:	ec55 4b10 	vmov	r4, r5, d0
 8001906:	88ba      	ldrh	r2, [r7, #4]
 8001908:	883b      	ldrh	r3, [r7, #0]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe01 	bl	8000514 <__aeabi_i2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001960 <distance_of_two_point+0x98>
 800191a:	ec43 2b10 	vmov	d0, r2, r3
 800191e:	f00a fa1b 	bl	800bd58 <pow>
 8001922:	ec53 2b10 	vmov	r2, r3, d0
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fca7 	bl	800027c <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	ec43 2b17 	vmov	d7, r2, r3
 8001936:	eeb0 0a47 	vmov.f32	s0, s14
 800193a:	eef0 0a67 	vmov.f32	s1, s15
 800193e:	f00a fab9 	bl	800beb4 <sqrt>
 8001942:	ec53 2b10 	vmov	r2, r3, d0
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f945 	bl	8000bd8 <__aeabi_d2f>
 800194e:	4603      	mov	r3, r0
 8001950:	ee07 3a90 	vmov	s15, r3
}
 8001954:	eeb0 0a67 	vmov.f32	s0, s15
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bdb0      	pop	{r4, r5, r7, pc}
 800195e:	bf00      	nop
 8001960:	00000000 	.word	0x00000000
 8001964:	40000000 	.word	0x40000000

08001968 <is_touch_right>:

int is_touch_right(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800196c:	f003 fd2a 	bl	80053c4 <touch_IsTouched>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <is_touch_right+0x12>
 8001976:	2300      	movs	r3, #0
 8001978:	e018      	b.n	80019ac <is_touch_right+0x44>
	return (touch_GetX() > POS_X_RIGHT
 800197a:	f003 fd35 	bl	80053e8 <touch_GetX>
 800197e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
			&& touch_GetY() > POS_Y_RIGHT
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001980:	2ba5      	cmp	r3, #165	; 0xa5
 8001982:	d912      	bls.n	80019aa <is_touch_right+0x42>
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
 8001984:	f003 fd30 	bl	80053e8 <touch_GetX>
 8001988:	4603      	mov	r3, r0
 800198a:	2bea      	cmp	r3, #234	; 0xea
 800198c:	d80d      	bhi.n	80019aa <is_touch_right+0x42>
			&& touch_GetY() > POS_Y_RIGHT
 800198e:	f003 fd37 	bl	8005400 <touch_GetY>
 8001992:	4603      	mov	r3, r0
 8001994:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001998:	d307      	bcc.n	80019aa <is_touch_right+0x42>
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 800199a:	f003 fd31 	bl	8005400 <touch_GetY>
 800199e:	4603      	mov	r3, r0
 80019a0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80019a4:	d801      	bhi.n	80019aa <is_touch_right+0x42>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <is_touch_right+0x44>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <is_touch_left>:

int is_touch_left()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80019b4:	f003 fd06 	bl	80053c4 <touch_IsTouched>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <is_touch_left+0x12>
 80019be:	2300      	movs	r3, #0
 80019c0:	e018      	b.n	80019f4 <is_touch_left+0x44>
	return (touch_GetX() > POS_X_LEFT
 80019c2:	f003 fd11 	bl	80053e8 <touch_GetX>
 80019c6:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
			&& touch_GetY() > POS_Y_LEFT
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d912      	bls.n	80019f2 <is_touch_left+0x42>
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
 80019cc:	f003 fd0c 	bl	80053e8 <touch_GetX>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b4a      	cmp	r3, #74	; 0x4a
 80019d4:	d80d      	bhi.n	80019f2 <is_touch_left+0x42>
			&& touch_GetY() > POS_Y_LEFT
 80019d6:	f003 fd13 	bl	8005400 <touch_GetY>
 80019da:	4603      	mov	r3, r0
 80019dc:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80019e0:	d307      	bcc.n	80019f2 <is_touch_left+0x42>
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 80019e2:	f003 fd0d 	bl	8005400 <touch_GetY>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80019ec:	d801      	bhi.n	80019f2 <is_touch_left+0x42>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <is_touch_left+0x44>
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <is_touch_up>:

int is_touch_up()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80019fc:	f003 fce2 	bl	80053c4 <touch_IsTouched>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <is_touch_up+0x12>
 8001a06:	2300      	movs	r3, #0
 8001a08:	e016      	b.n	8001a38 <is_touch_up+0x40>
	return (touch_GetX() > POS_X_UP
 8001a0a:	f003 fced 	bl	80053e8 <touch_GetX>
 8001a0e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
			&& touch_GetY() > POS_Y_UP
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001a10:	2b55      	cmp	r3, #85	; 0x55
 8001a12:	d910      	bls.n	8001a36 <is_touch_up+0x3e>
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
 8001a14:	f003 fce8 	bl	80053e8 <touch_GetX>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b9a      	cmp	r3, #154	; 0x9a
 8001a1c:	d80b      	bhi.n	8001a36 <is_touch_up+0x3e>
			&& touch_GetY() > POS_Y_UP
 8001a1e:	f003 fcef 	bl	8005400 <touch_GetY>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2bcd      	cmp	r3, #205	; 0xcd
 8001a26:	d906      	bls.n	8001a36 <is_touch_up+0x3e>
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001a28:	f003 fcea 	bl	8005400 <touch_GetY>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2bfe      	cmp	r3, #254	; 0xfe
 8001a30:	d801      	bhi.n	8001a36 <is_touch_up+0x3e>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <is_touch_up+0x40>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <is_touch_down>:

int is_touch_down()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001a40:	f003 fcc0 	bl	80053c4 <touch_IsTouched>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <is_touch_down+0x12>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e018      	b.n	8001a80 <is_touch_down+0x44>
	return (touch_GetX() > POS_X_DOWN
 8001a4e:	f003 fccb 	bl	80053e8 <touch_GetX>
 8001a52:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
			&& touch_GetY() > POS_Y_DOWN
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001a54:	2b55      	cmp	r3, #85	; 0x55
 8001a56:	d912      	bls.n	8001a7e <is_touch_down+0x42>
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
 8001a58:	f003 fcc6 	bl	80053e8 <touch_GetX>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b9a      	cmp	r3, #154	; 0x9a
 8001a60:	d80d      	bhi.n	8001a7e <is_touch_down+0x42>
			&& touch_GetY() > POS_Y_DOWN
 8001a62:	f003 fccd 	bl	8005400 <touch_GetY>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001a6c:	d307      	bcc.n	8001a7e <is_touch_down+0x42>
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001a6e:	f003 fcc7 	bl	8005400 <touch_GetY>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001a78:	d801      	bhi.n	8001a7e <is_touch_down+0x42>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <is_touch_down+0x44>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <is_touch_quit>:

int is_touch_quit()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001a88:	f003 fc9c 	bl	80053c4 <touch_IsTouched>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <is_touch_quit+0x12>
 8001a92:	2300      	movs	r3, #0
 8001a94:	e017      	b.n	8001ac6 <is_touch_quit+0x42>
	return (touch_GetX() > POS_X_FORTH
 8001a96:	f003 fca7 	bl	80053e8 <touch_GetX>
 8001a9a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001a9c:	2b41      	cmp	r3, #65	; 0x41
 8001a9e:	d911      	bls.n	8001ac4 <is_touch_quit+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8001aa0:	f003 fca2 	bl	80053e8 <touch_GetX>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2bb8      	cmp	r3, #184	; 0xb8
 8001aa8:	d80c      	bhi.n	8001ac4 <is_touch_quit+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8001aaa:	f003 fca9 	bl	8005400 <touch_GetY>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2bfa      	cmp	r3, #250	; 0xfa
 8001ab2:	d907      	bls.n	8001ac4 <is_touch_quit+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001ab4:	f003 fca4 	bl	8005400 <touch_GetY>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001abe:	d801      	bhi.n	8001ac4 <is_touch_quit+0x40>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <is_touch_quit+0x42>
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <is_touch_quit_end>:

int is_touch_quit_end(){
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001ace:	f003 fc79 	bl	80053c4 <touch_IsTouched>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <is_touch_quit_end+0x12>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e016      	b.n	8001b0a <is_touch_quit_end+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001adc:	f003 fc84 	bl	80053e8 <touch_GetX>
 8001ae0:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001ae2:	2b41      	cmp	r3, #65	; 0x41
 8001ae4:	d910      	bls.n	8001b08 <is_touch_quit_end+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001ae6:	f003 fc7f 	bl	80053e8 <touch_GetX>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2bb8      	cmp	r3, #184	; 0xb8
 8001aee:	d80b      	bhi.n	8001b08 <is_touch_quit_end+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001af0:	f003 fc86 	bl	8005400 <touch_GetY>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2bc8      	cmp	r3, #200	; 0xc8
 8001af8:	d906      	bls.n	8001b08 <is_touch_quit_end+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001afa:	f003 fc81 	bl	8005400 <touch_GetY>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2bea      	cmp	r3, #234	; 0xea
 8001b02:	d801      	bhi.n	8001b08 <is_touch_quit_end+0x3e>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <is_touch_quit_end+0x40>
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <is_touch_resume>:

int is_touch_resume(){
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001b12:	f003 fc57 	bl	80053c4 <touch_IsTouched>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <is_touch_resume+0x12>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e016      	b.n	8001b4e <is_touch_resume+0x40>
		return (touch_GetX() > POS_X_SECOND
 8001b20:	f003 fc62 	bl	80053e8 <touch_GetX>
 8001b24:	4603      	mov	r3, r0
				&& touch_GetX() < POS_X_SECOND + WIDTH
				&& touch_GetY() > POS_Y_SECOND
				&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001b26:	2b41      	cmp	r3, #65	; 0x41
 8001b28:	d910      	bls.n	8001b4c <is_touch_resume+0x3e>
				&& touch_GetX() < POS_X_SECOND + WIDTH
 8001b2a:	f003 fc5d 	bl	80053e8 <touch_GetX>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2bb8      	cmp	r3, #184	; 0xb8
 8001b32:	d80b      	bhi.n	8001b4c <is_touch_resume+0x3e>
				&& touch_GetY() > POS_Y_SECOND
 8001b34:	f003 fc64 	bl	8005400 <touch_GetY>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b96      	cmp	r3, #150	; 0x96
 8001b3c:	d906      	bls.n	8001b4c <is_touch_resume+0x3e>
				&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001b3e:	f003 fc5f 	bl	8005400 <touch_GetY>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2bb8      	cmp	r3, #184	; 0xb8
 8001b46:	d801      	bhi.n	8001b4c <is_touch_resume+0x3e>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <is_touch_resume+0x40>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <is_touch_pause>:
int is_touch_pause()
{
 8001b52:	b598      	push	{r3, r4, r7, lr}
 8001b54:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001b56:	f003 fc35 	bl	80053c4 <touch_IsTouched>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <is_touch_pause+0x12>
 8001b60:	2300      	movs	r3, #0
 8001b62:	e018      	b.n	8001b96 <is_touch_pause+0x44>
	return distance_of_two_point(touch_GetX(), touch_GetY(), POS_X_PAUSE, POS_Y_PAUSE) < BTN_HEIGHT / 2;
 8001b64:	f003 fc40 	bl	80053e8 <touch_GetX>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461c      	mov	r4, r3
 8001b6c:	f003 fc48 	bl	8005400 <touch_GetY>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4619      	mov	r1, r3
 8001b74:	23e6      	movs	r3, #230	; 0xe6
 8001b76:	22c8      	movs	r2, #200	; 0xc8
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff fea5 	bl	80018c8 <distance_of_two_point>
 8001b7e:	eef0 7a40 	vmov.f32	s15, s0
 8001b82:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	bf4c      	ite	mi
 8001b90:	2301      	movmi	r3, #1
 8001b92:	2300      	movpl	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd98      	pop	{r3, r4, r7, pc}

08001b9a <is_touch_newGame>:

int is_touch_newGame()
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001b9e:	f003 fc11 	bl	80053c4 <touch_IsTouched>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <is_touch_newGame+0x12>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e016      	b.n	8001bda <is_touch_newGame+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001bac:	f003 fc1c 	bl	80053e8 <touch_GetX>
 8001bb0:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001bb2:	2b41      	cmp	r3, #65	; 0x41
 8001bb4:	d910      	bls.n	8001bd8 <is_touch_newGame+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001bb6:	f003 fc17 	bl	80053e8 <touch_GetX>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2bb8      	cmp	r3, #184	; 0xb8
 8001bbe:	d80b      	bhi.n	8001bd8 <is_touch_newGame+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001bc0:	f003 fc1e 	bl	8005400 <touch_GetY>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b96      	cmp	r3, #150	; 0x96
 8001bc8:	d906      	bls.n	8001bd8 <is_touch_newGame+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001bca:	f003 fc19 	bl	8005400 <touch_GetY>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2bb8      	cmp	r3, #184	; 0xb8
 8001bd2:	d801      	bhi.n	8001bd8 <is_touch_newGame+0x3e>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <is_touch_newGame+0x40>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <is_touch_highScore>:

int is_touch_highScore()
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001be2:	f003 fbef 	bl	80053c4 <touch_IsTouched>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <is_touch_highScore+0x12>
 8001bec:	2300      	movs	r3, #0
 8001bee:	e017      	b.n	8001c20 <is_touch_highScore+0x42>
	return (touch_GetX() > POS_X_FORTH
 8001bf0:	f003 fbfa 	bl	80053e8 <touch_GetX>
 8001bf4:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001bf6:	2b41      	cmp	r3, #65	; 0x41
 8001bf8:	d911      	bls.n	8001c1e <is_touch_highScore+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8001bfa:	f003 fbf5 	bl	80053e8 <touch_GetX>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2bb8      	cmp	r3, #184	; 0xb8
 8001c02:	d80c      	bhi.n	8001c1e <is_touch_highScore+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8001c04:	f003 fbfc 	bl	8005400 <touch_GetY>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2bfa      	cmp	r3, #250	; 0xfa
 8001c0c:	d907      	bls.n	8001c1e <is_touch_highScore+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001c0e:	f003 fbf7 	bl	8005400 <touch_GetY>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001c18:	d801      	bhi.n	8001c1e <is_touch_highScore+0x40>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <is_touch_highScore+0x42>
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <is_touch_classic>:

int is_touch_classic()
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001c28:	f003 fbcc 	bl	80053c4 <touch_IsTouched>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <is_touch_classic+0x12>
 8001c32:	2300      	movs	r3, #0
 8001c34:	e016      	b.n	8001c64 <is_touch_classic+0x40>
	return (touch_GetX() > POS_X_FIRST
 8001c36:	f003 fbd7 	bl	80053e8 <touch_GetX>
 8001c3a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8001c3c:	2b41      	cmp	r3, #65	; 0x41
 8001c3e:	d910      	bls.n	8001c62 <is_touch_classic+0x3e>
			&& touch_GetX() < POS_X_FIRST + WIDTH
 8001c40:	f003 fbd2 	bl	80053e8 <touch_GetX>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2bb8      	cmp	r3, #184	; 0xb8
 8001c48:	d80b      	bhi.n	8001c62 <is_touch_classic+0x3e>
			&& touch_GetY() > POS_Y_FIRST
 8001c4a:	f003 fbd9 	bl	8005400 <touch_GetY>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d906      	bls.n	8001c62 <is_touch_classic+0x3e>
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8001c54:	f003 fbd4 	bl	8005400 <touch_GetY>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b86      	cmp	r3, #134	; 0x86
 8001c5c:	d801      	bhi.n	8001c62 <is_touch_classic+0x3e>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <is_touch_classic+0x40>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <is_touch_speed>:

int is_touch_speed()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001c6c:	f003 fbaa 	bl	80053c4 <touch_IsTouched>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <is_touch_speed+0x12>
 8001c76:	2300      	movs	r3, #0
 8001c78:	e016      	b.n	8001ca8 <is_touch_speed+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001c7a:	f003 fbb5 	bl	80053e8 <touch_GetX>
 8001c7e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001c80:	2b41      	cmp	r3, #65	; 0x41
 8001c82:	d910      	bls.n	8001ca6 <is_touch_speed+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001c84:	f003 fbb0 	bl	80053e8 <touch_GetX>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2bb8      	cmp	r3, #184	; 0xb8
 8001c8c:	d80b      	bhi.n	8001ca6 <is_touch_speed+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001c8e:	f003 fbb7 	bl	8005400 <touch_GetY>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b96      	cmp	r3, #150	; 0x96
 8001c96:	d906      	bls.n	8001ca6 <is_touch_speed+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001c98:	f003 fbb2 	bl	8005400 <touch_GetY>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2bb8      	cmp	r3, #184	; 0xb8
 8001ca0:	d801      	bhi.n	8001ca6 <is_touch_speed+0x3e>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <is_touch_speed+0x40>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}

08001cac <is_touch_time>:

int is_touch_time()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001cb0:	f003 fb88 	bl	80053c4 <touch_IsTouched>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <is_touch_time+0x12>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e016      	b.n	8001cec <is_touch_time+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001cbe:	f003 fb93 	bl	80053e8 <touch_GetX>
 8001cc2:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001cc4:	2b41      	cmp	r3, #65	; 0x41
 8001cc6:	d910      	bls.n	8001cea <is_touch_time+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001cc8:	f003 fb8e 	bl	80053e8 <touch_GetX>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2bb8      	cmp	r3, #184	; 0xb8
 8001cd0:	d80b      	bhi.n	8001cea <is_touch_time+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001cd2:	f003 fb95 	bl	8005400 <touch_GetY>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2bc8      	cmp	r3, #200	; 0xc8
 8001cda:	d906      	bls.n	8001cea <is_touch_time+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001cdc:	f003 fb90 	bl	8005400 <touch_GetY>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2bea      	cmp	r3, #234	; 0xea
 8001ce4:	d801      	bhi.n	8001cea <is_touch_time+0x3e>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <is_touch_time+0x40>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <is_touch_continue>:

int is_touch_continue()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001cf4:	f003 fb66 	bl	80053c4 <touch_IsTouched>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <is_touch_continue+0x12>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e016      	b.n	8001d30 <is_touch_continue+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001d02:	f003 fb71 	bl	80053e8 <touch_GetX>
 8001d06:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001d08:	2b41      	cmp	r3, #65	; 0x41
 8001d0a:	d910      	bls.n	8001d2e <is_touch_continue+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001d0c:	f003 fb6c 	bl	80053e8 <touch_GetX>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2bb8      	cmp	r3, #184	; 0xb8
 8001d14:	d80b      	bhi.n	8001d2e <is_touch_continue+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001d16:	f003 fb73 	bl	8005400 <touch_GetY>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2bc8      	cmp	r3, #200	; 0xc8
 8001d1e:	d906      	bls.n	8001d2e <is_touch_continue+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001d20:	f003 fb6e 	bl	8005400 <touch_GetY>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2bea      	cmp	r3, #234	; 0xea
 8001d28:	d801      	bhi.n	8001d2e <is_touch_continue+0x3e>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <is_touch_continue+0x40>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	; 0x38
 8001d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	4b89      	ldr	r3, [pc, #548]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a88      	ldr	r2, [pc, #544]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a81      	ldr	r2, [pc, #516]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	4b7b      	ldr	r3, [pc, #492]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a7a      	ldr	r2, [pc, #488]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d8c:	f043 0320 	orr.w	r3, r3, #32
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b78      	ldr	r3, [pc, #480]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a73      	ldr	r2, [pc, #460]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b6d      	ldr	r3, [pc, #436]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a6c      	ldr	r2, [pc, #432]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b66      	ldr	r3, [pc, #408]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a5e      	ldr	r2, [pc, #376]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <MX_GPIO_Init+0x240>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	4852      	ldr	r0, [pc, #328]	; (8001f78 <MX_GPIO_Init+0x244>)
 8001e30:	f004 fcc8 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001e3a:	4850      	ldr	r0, [pc, #320]	; (8001f7c <MX_GPIO_Init+0x248>)
 8001e3c:	f004 fcc2 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e46:	484e      	ldr	r0, [pc, #312]	; (8001f80 <MX_GPIO_Init+0x24c>)
 8001e48:	f004 fcbc 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001e52:	484c      	ldr	r0, [pc, #304]	; (8001f84 <MX_GPIO_Init+0x250>)
 8001e54:	f004 fcb6 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5e:	484a      	ldr	r0, [pc, #296]	; (8001f88 <MX_GPIO_Init+0x254>)
 8001e60:	f004 fcb0 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2108      	movs	r1, #8
 8001e68:	4848      	ldr	r0, [pc, #288]	; (8001f8c <MX_GPIO_Init+0x258>)
 8001e6a:	f004 fcab 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001e6e:	2310      	movs	r3, #16
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	4619      	mov	r1, r3
 8001e84:	483c      	ldr	r0, [pc, #240]	; (8001f78 <MX_GPIO_Init+0x244>)
 8001e86:	f004 fae9 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001e8a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4836      	ldr	r0, [pc, #216]	; (8001f7c <MX_GPIO_Init+0x248>)
 8001ea4:	f004 fada 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 8001ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4830      	ldr	r0, [pc, #192]	; (8001f80 <MX_GPIO_Init+0x24c>)
 8001ebe:	f004 facd 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 8001ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4829      	ldr	r0, [pc, #164]	; (8001f80 <MX_GPIO_Init+0x24c>)
 8001edc:	f004 fabe 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001ee0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4822      	ldr	r0, [pc, #136]	; (8001f84 <MX_GPIO_Init+0x250>)
 8001efa:	f004 faaf 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8001efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f10:	4619      	mov	r1, r3
 8001f12:	481a      	ldr	r0, [pc, #104]	; (8001f7c <MX_GPIO_Init+0x248>)
 8001f14:	f004 faa2 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4815      	ldr	r0, [pc, #84]	; (8001f88 <MX_GPIO_Init+0x254>)
 8001f32:	f004 fa93 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_GPIO_Init+0x248>)
 8001f4c:	f004 fa86 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001f50:	2308      	movs	r3, #8
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f64:	4619      	mov	r1, r3
 8001f66:	4809      	ldr	r0, [pc, #36]	; (8001f8c <MX_GPIO_Init+0x258>)
 8001f68:	f004 fa78 	bl	800645c <HAL_GPIO_Init>

}
 8001f6c:	bf00      	nop
 8001f6e:	3738      	adds	r7, #56	; 0x38
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40021400 	.word	0x40021400
 8001f84:	40021800 	.word	0x40021800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020c00 	.word	0x40020c00

08001f90 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001f96:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <MX_I2C1_Init+0x54>)
 8001f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <MX_I2C1_Init+0x58>)
 8001f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fce:	f004 fc2d 	bl	800682c <HAL_I2C_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fd8:	f001 fbdc 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000578 	.word	0x20000578
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	000186a0 	.word	0x000186a0

08001fec <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <home_lcd+0xa0>)
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001ffa:	22f0      	movs	r2, #240	; 0xf0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 fee2 	bl	8002dc8 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002004:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	23b9      	movs	r3, #185	; 0xb9
 800200c:	22b9      	movs	r2, #185	; 0xb9
 800200e:	2196      	movs	r1, #150	; 0x96
 8002010:	2041      	movs	r0, #65	; 0x41
 8002012:	f000 fc67 	bl	80028e4 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002016:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	23eb      	movs	r3, #235	; 0xeb
 800201e:	22b9      	movs	r2, #185	; 0xb9
 8002020:	21c8      	movs	r1, #200	; 0xc8
 8002022:	2041      	movs	r0, #65	; 0x41
 8002024:	f000 fc5e 	bl	80028e4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002028:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	f240 131d 	movw	r3, #285	; 0x11d
 8002032:	22b9      	movs	r2, #185	; 0xb9
 8002034:	21fa      	movs	r1, #250	; 0xfa
 8002036:	2041      	movs	r0, #65	; 0x41
 8002038:	f000 fc54 	bl	80028e4 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 800203c:	2301      	movs	r3, #1
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	2318      	movs	r3, #24
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <home_lcd+0xa4>)
 800204c:	219b      	movs	r1, #155	; 0x9b
 800204e:	2054      	movs	r0, #84	; 0x54
 8002050:	f001 f98c 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 8002054:	2301      	movs	r3, #1
 8002056:	9302      	str	r3, [sp, #8]
 8002058:	2318      	movs	r3, #24
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	2300      	movs	r3, #0
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <home_lcd+0xa8>)
 8002064:	21cd      	movs	r1, #205	; 0xcd
 8002066:	204d      	movs	r0, #77	; 0x4d
 8002068:	f001 f980 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 800206c:	2301      	movs	r3, #1
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	2318      	movs	r3, #24
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	2300      	movs	r3, #0
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2300      	movs	r3, #0
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <home_lcd+0xac>)
 800207c:	21ff      	movs	r1, #255	; 0xff
 800207e:	2048      	movs	r0, #72	; 0x48
 8002080:	f001 f974 	bl	800336c <lcd_ShowStr>
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	0800fe20 	.word	0x0800fe20
 8002090:	0800cd48 	.word	0x0800cd48
 8002094:	0800cd50 	.word	0x0800cd50
 8002098:	0800cd5c 	.word	0x0800cd5c

0800209c <mode_game_lcd>:

void mode_game_lcd(){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_mode);
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <mode_game_lcd+0xc8>)
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020aa:	22f0      	movs	r2, #240	; 0xf0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 fe8a 	bl	8002dc8 <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 80020b4:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2387      	movs	r3, #135	; 0x87
 80020bc:	22b9      	movs	r2, #185	; 0xb9
 80020be:	2164      	movs	r1, #100	; 0x64
 80020c0:	2041      	movs	r0, #65	; 0x41
 80020c2:	f000 fc0f 	bl	80028e4 <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 80020c6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	23b9      	movs	r3, #185	; 0xb9
 80020ce:	22b9      	movs	r2, #185	; 0xb9
 80020d0:	2196      	movs	r1, #150	; 0x96
 80020d2:	2041      	movs	r0, #65	; 0x41
 80020d4:	f000 fc06 	bl	80028e4 <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 80020d8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	23eb      	movs	r3, #235	; 0xeb
 80020e0:	22b9      	movs	r2, #185	; 0xb9
 80020e2:	21c8      	movs	r1, #200	; 0xc8
 80020e4:	2041      	movs	r0, #65	; 0x41
 80020e6:	f000 fbfd 	bl	80028e4 <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 80020ea:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	f240 131d 	movw	r3, #285	; 0x11d
 80020f4:	22b9      	movs	r2, #185	; 0xb9
 80020f6:	21fa      	movs	r1, #250	; 0xfa
 80020f8:	2041      	movs	r0, #65	; 0x41
 80020fa:	f000 fbf3 	bl	80028e4 <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 80020fe:	2301      	movs	r3, #1
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	2318      	movs	r3, #24
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	2300      	movs	r3, #0
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2300      	movs	r3, #0
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <mode_game_lcd+0xcc>)
 800210e:	2169      	movs	r1, #105	; 0x69
 8002110:	2054      	movs	r0, #84	; 0x54
 8002112:	f001 f92b 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 8002116:	2301      	movs	r3, #1
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	2318      	movs	r3, #24
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	2300      	movs	r3, #0
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2300      	movs	r3, #0
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <mode_game_lcd+0xd0>)
 8002126:	219b      	movs	r1, #155	; 0x9b
 8002128:	2060      	movs	r0, #96	; 0x60
 800212a:	f001 f91f 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 800212e:	2301      	movs	r3, #1
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	2318      	movs	r3, #24
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <mode_game_lcd+0xd4>)
 800213e:	21cd      	movs	r1, #205	; 0xcd
 8002140:	2060      	movs	r0, #96	; 0x60
 8002142:	f001 f913 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002146:	2301      	movs	r3, #1
 8002148:	9302      	str	r3, [sp, #8]
 800214a:	2318      	movs	r3, #24
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2300      	movs	r3, #0
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <mode_game_lcd+0xd8>)
 8002156:	21ff      	movs	r1, #255	; 0xff
 8002158:	2064      	movs	r0, #100	; 0x64
 800215a:	f001 f907 	bl	800336c <lcd_ShowStr>
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	08035620 	.word	0x08035620
 8002168:	0800cd68 	.word	0x0800cd68
 800216c:	0800cd70 	.word	0x0800cd70
 8002170:	0800cd78 	.word	0x0800cd78
 8002174:	0800cd80 	.word	0x0800cd80

08002178 <highscore_lcd>:

void highscore_lcd(){
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_highscore);
 800217e:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <highscore_lcd+0x17c>)
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002186:	22f0      	movs	r2, #240	; 0xf0
 8002188:	2100      	movs	r1, #0
 800218a:	2000      	movs	r0, #0
 800218c:	f000 fe1c 	bl	8002dc8 <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 8002190:	2301      	movs	r3, #1
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	2310      	movs	r3, #16
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	2300      	movs	r3, #0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2300      	movs	r3, #0
 800219e:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <highscore_lcd+0x180>)
 80021a0:	2150      	movs	r1, #80	; 0x50
 80021a2:	200a      	movs	r0, #10
 80021a4:	f001 f8e2 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 80021a8:	2301      	movs	r3, #1
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	2310      	movs	r3, #16
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	2300      	movs	r3, #0
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2300      	movs	r3, #0
 80021b6:	4a51      	ldr	r2, [pc, #324]	; (80022fc <highscore_lcd+0x184>)
 80021b8:	2150      	movs	r1, #80	; 0x50
 80021ba:	203c      	movs	r0, #60	; 0x3c
 80021bc:	f001 f8d6 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 80021c0:	2301      	movs	r3, #1
 80021c2:	9302      	str	r3, [sp, #8]
 80021c4:	2310      	movs	r3, #16
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2300      	movs	r3, #0
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2300      	movs	r3, #0
 80021ce:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <highscore_lcd+0x188>)
 80021d0:	2150      	movs	r1, #80	; 0x50
 80021d2:	20a0      	movs	r0, #160	; 0xa0
 80021d4:	f001 f8ca 	bl	800336c <lcd_ShowStr>
	char c[10] = "";
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e051      	b.n	8002290 <highscore_lcd+0x118>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	3305      	adds	r3, #5
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	b29c      	uxth	r4, r3
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	1d39      	adds	r1, r7, #4
 80021fa:	220a      	movs	r2, #10
 80021fc:	4618      	mov	r0, r3
 80021fe:	f008 fd5d 	bl	800acbc <itoa>
 8002202:	4602      	mov	r2, r0
 8002204:	2301      	movs	r3, #1
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	2310      	movs	r3, #16
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2300      	movs	r3, #0
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	4621      	mov	r1, r4
 8002214:	200a      	movs	r0, #10
 8002216:	f001 f8a9 	bl	800336c <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3305      	adds	r3, #5
 800221e:	b29b      	uxth	r3, r3
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	b299      	uxth	r1, r3
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	1e5a      	subs	r2, r3, #1
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4a34      	ldr	r2, [pc, #208]	; (8002304 <highscore_lcd+0x18c>)
 8002232:	441a      	add	r2, r3
 8002234:	2301      	movs	r3, #1
 8002236:	9302      	str	r3, [sp, #8]
 8002238:	2310      	movs	r3, #16
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2300      	movs	r3, #0
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2300      	movs	r3, #0
 8002242:	203c      	movs	r0, #60	; 0x3c
 8002244:	f001 f892 	bl	800336c <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	3305      	adds	r3, #5
 800224c:	b29b      	uxth	r3, r3
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	b29c      	uxth	r4, r3
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	492b      	ldr	r1, [pc, #172]	; (8002304 <highscore_lcd+0x18c>)
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	330a      	adds	r3, #10
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	220a      	movs	r2, #10
 800226c:	4619      	mov	r1, r3
 800226e:	f008 fd25 	bl	800acbc <itoa>
 8002272:	4602      	mov	r2, r0
 8002274:	2301      	movs	r3, #1
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	2310      	movs	r3, #16
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2300      	movs	r3, #0
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2300      	movs	r3, #0
 8002282:	4621      	mov	r1, r4
 8002284:	20a0      	movs	r0, #160	; 0xa0
 8002286:	f001 f871 	bl	800336c <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	3301      	adds	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <highscore_lcd+0x190>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	429a      	cmp	r2, r3
 8002298:	d9a8      	bls.n	80021ec <highscore_lcd+0x74>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 800229a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f240 131d 	movw	r3, #285	; 0x11d
 80022a4:	22b9      	movs	r2, #185	; 0xb9
 80022a6:	21fa      	movs	r1, #250	; 0xfa
 80022a8:	2041      	movs	r0, #65	; 0x41
 80022aa:	f000 fb1b 	bl	80028e4 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 80022ae:	2301      	movs	r3, #1
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2318      	movs	r3, #24
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2300      	movs	r3, #0
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <highscore_lcd+0x194>)
 80022be:	21ff      	movs	r1, #255	; 0xff
 80022c0:	2064      	movs	r0, #100	; 0x64
 80022c2:	f001 f853 	bl	800336c <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80022c6:	2300      	movs	r3, #0
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	f240 131d 	movw	r3, #285	; 0x11d
 80022ce:	22b9      	movs	r2, #185	; 0xb9
 80022d0:	21fa      	movs	r1, #250	; 0xfa
 80022d2:	2041      	movs	r0, #65	; 0x41
 80022d4:	f000 fbd7 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80022d8:	2300      	movs	r3, #0
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80022e0:	22b8      	movs	r2, #184	; 0xb8
 80022e2:	21fb      	movs	r1, #251	; 0xfb
 80022e4:	2042      	movs	r0, #66	; 0x42
 80022e6:	f000 fbce 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	0805ae20 	.word	0x0805ae20
 80022f8:	0800cd88 	.word	0x0800cd88
 80022fc:	0800cd90 	.word	0x0800cd90
 8002300:	0800cd98 	.word	0x0800cd98
 8002304:	2000050c 	.word	0x2000050c
 8002308:	20000000 	.word	0x20000000
 800230c:	0800cd80 	.word	0x0800cd80

08002310 <game_lcd>:

void game_lcd(){
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 8002316:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800231a:	f000 fab1 	bl	8002880 <lcd_Clear>
	lcd_Fill(0, 200, 239, 319, LGRAYBLUE);
 800231e:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f240 133f 	movw	r3, #319	; 0x13f
 8002328:	22ef      	movs	r2, #239	; 0xef
 800232a:	21c8      	movs	r1, #200	; 0xc8
 800232c:	2000      	movs	r0, #0
 800232e:	f000 fad9 	bl	80028e4 <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 8002332:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f240 133b 	movw	r3, #315	; 0x13b
 800233c:	224b      	movs	r2, #75	; 0x4b
 800233e:	f240 1109 	movw	r1, #265	; 0x109
 8002342:	2005      	movs	r0, #5
 8002344:	f000 face 	bl	80028e4 <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 8002348:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	f240 133b 	movw	r3, #315	; 0x13b
 8002352:	22eb      	movs	r2, #235	; 0xeb
 8002354:	f240 1109 	movw	r1, #265	; 0x109
 8002358:	20a5      	movs	r0, #165	; 0xa5
 800235a:	f000 fac3 	bl	80028e4 <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 800235e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	23ff      	movs	r3, #255	; 0xff
 8002366:	229b      	movs	r2, #155	; 0x9b
 8002368:	21cd      	movs	r1, #205	; 0xcd
 800236a:	2055      	movs	r0, #85	; 0x55
 800236c:	f000 faba 	bl	80028e4 <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 8002370:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	f240 133b 	movw	r3, #315	; 0x13b
 800237a:	229b      	movs	r2, #155	; 0x9b
 800237c:	f240 1109 	movw	r1, #265	; 0x109
 8002380:	2055      	movs	r0, #85	; 0x55
 8002382:	f000 faaf 	bl	80028e4 <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 8002386:	2301      	movs	r3, #1
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2319      	movs	r3, #25
 800238c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002390:	21e6      	movs	r1, #230	; 0xe6
 8002392:	20c8      	movs	r0, #200	; 0xc8
 8002394:	f000 ff7d 	bl	8003292 <lcd_DrawCircle>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 8002398:	2301      	movs	r3, #1
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	2310      	movs	r3, #16
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2300      	movs	r3, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <game_lcd+0xc0>)
 80023a8:	21de      	movs	r1, #222	; 0xde
 80023aa:	20b6      	movs	r0, #182	; 0xb6
 80023ac:	f000 ffde 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 80023b0:	2301      	movs	r3, #1
 80023b2:	9302      	str	r3, [sp, #8]
 80023b4:	2310      	movs	r3, #16
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <game_lcd+0xc4>)
 80023c0:	21cd      	movs	r1, #205	; 0xcd
 80023c2:	2005      	movs	r0, #5
 80023c4:	f000 ffd2 	bl	800336c <lcd_ShowStr>
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0800cda0 	.word	0x0800cda0
 80023d4:	0800cda8 	.word	0x0800cda8

080023d8 <score_lcd>:

void score_lcd(){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <score_lcd+0x2c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	2310      	movs	r3, #16
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	f24a 6351 	movw	r3, #42577	; 0xa651
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2305      	movs	r3, #5
 80023f4:	21dd      	movs	r1, #221	; 0xdd
 80023f6:	2005      	movs	r0, #5
 80023f8:	f000 fc68 	bl	8002ccc <lcd_ShowIntNum>
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000004 	.word	0x20000004

08002408 <pause_lcd>:

void pause_lcd(){
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_pause);
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <pause_lcd+0x74>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002416:	22f0      	movs	r2, #240	; 0xf0
 8002418:	2100      	movs	r1, #0
 800241a:	2000      	movs	r0, #0
 800241c:	f000 fcd4 	bl	8002dc8 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002420:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	23b9      	movs	r3, #185	; 0xb9
 8002428:	22b9      	movs	r2, #185	; 0xb9
 800242a:	2196      	movs	r1, #150	; 0x96
 800242c:	2041      	movs	r0, #65	; 0x41
 800242e:	f000 fa59 	bl	80028e4 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002432:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	23eb      	movs	r3, #235	; 0xeb
 800243a:	22b9      	movs	r2, #185	; 0xb9
 800243c:	21c8      	movs	r1, #200	; 0xc8
 800243e:	2041      	movs	r0, #65	; 0x41
 8002440:	f000 fa50 	bl	80028e4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 8002444:	2301      	movs	r3, #1
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	2318      	movs	r3, #24
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2300      	movs	r3, #0
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2300      	movs	r3, #0
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <pause_lcd+0x78>)
 8002454:	219b      	movs	r1, #155	; 0x9b
 8002456:	205a      	movs	r0, #90	; 0x5a
 8002458:	f000 ff88 	bl	800336c <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 800245c:	2301      	movs	r3, #1
 800245e:	9302      	str	r3, [sp, #8]
 8002460:	2318      	movs	r3, #24
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2300      	movs	r3, #0
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2300      	movs	r3, #0
 800246a:	4a06      	ldr	r2, [pc, #24]	; (8002484 <pause_lcd+0x7c>)
 800246c:	21cd      	movs	r1, #205	; 0xcd
 800246e:	2064      	movs	r0, #100	; 0x64
 8002470:	f000 ff7c 	bl	800336c <lcd_ShowStr>
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	08080620 	.word	0x08080620
 8002480:	0800cdb0 	.word	0x0800cdb0
 8002484:	0800cd80 	.word	0x0800cd80

08002488 <game_over_lcd>:

void game_over_lcd(){
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <game_over_lcd+0x68>)
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002496:	22f0      	movs	r2, #240	; 0xf0
 8002498:	2100      	movs	r1, #0
 800249a:	2000      	movs	r0, #0
 800249c:	f000 fc94 	bl	8002dc8 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 80024a0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	23eb      	movs	r3, #235	; 0xeb
 80024a8:	22b9      	movs	r2, #185	; 0xb9
 80024aa:	21c8      	movs	r1, #200	; 0xc8
 80024ac:	2041      	movs	r0, #65	; 0x41
 80024ae:	f000 fa19 	bl	80028e4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80024b2:	2300      	movs	r3, #0
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	23eb      	movs	r3, #235	; 0xeb
 80024b8:	22b9      	movs	r2, #185	; 0xb9
 80024ba:	21c8      	movs	r1, #200	; 0xc8
 80024bc:	2041      	movs	r0, #65	; 0x41
 80024be:	f000 fae2 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80024c2:	2300      	movs	r3, #0
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	23ea      	movs	r3, #234	; 0xea
 80024c8:	22b8      	movs	r2, #184	; 0xb8
 80024ca:	21c9      	movs	r1, #201	; 0xc9
 80024cc:	2042      	movs	r0, #66	; 0x42
 80024ce:	f000 fada 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 80024d2:	2301      	movs	r3, #1
 80024d4:	9302      	str	r3, [sp, #8]
 80024d6:	2318      	movs	r3, #24
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	2300      	movs	r3, #0
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2300      	movs	r3, #0
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <game_over_lcd+0x6c>)
 80024e2:	21cd      	movs	r1, #205	; 0xcd
 80024e4:	2064      	movs	r0, #100	; 0x64
 80024e6:	f000 ff41 	bl	800336c <lcd_ShowStr>
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	080a5e20 	.word	0x080a5e20
 80024f4:	0800cd80 	.word	0x0800cd80

080024f8 <youwin_lcd>:

void youwin_lcd(){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <youwin_lcd+0x68>)
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002506:	22f0      	movs	r2, #240	; 0xf0
 8002508:	2100      	movs	r1, #0
 800250a:	2000      	movs	r0, #0
 800250c:	f000 fc5c 	bl	8002dc8 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002510:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	23eb      	movs	r3, #235	; 0xeb
 8002518:	22b9      	movs	r2, #185	; 0xb9
 800251a:	21c8      	movs	r1, #200	; 0xc8
 800251c:	2041      	movs	r0, #65	; 0x41
 800251e:	f000 f9e1 	bl	80028e4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	23eb      	movs	r3, #235	; 0xeb
 8002528:	22b9      	movs	r2, #185	; 0xb9
 800252a:	21c8      	movs	r1, #200	; 0xc8
 800252c:	2041      	movs	r0, #65	; 0x41
 800252e:	f000 faaa 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8002532:	2300      	movs	r3, #0
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	23ea      	movs	r3, #234	; 0xea
 8002538:	22b8      	movs	r2, #184	; 0xb8
 800253a:	21c9      	movs	r1, #201	; 0xc9
 800253c:	2042      	movs	r0, #66	; 0x42
 800253e:	f000 faa2 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002542:	2301      	movs	r3, #1
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	2318      	movs	r3, #24
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2300      	movs	r3, #0
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <youwin_lcd+0x6c>)
 8002552:	21cd      	movs	r1, #205	; 0xcd
 8002554:	2064      	movs	r0, #100	; 0x64
 8002556:	f000 ff09 	bl	800336c <lcd_ShowStr>
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	080cb620 	.word	0x080cb620
 8002564:	0800cd80 	.word	0x0800cd80

08002568 <home_not_select>:

void home_not_select(){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 800256e:	f248 4330 	movw	r3, #33840	; 0x8430
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	23b9      	movs	r3, #185	; 0xb9
 8002576:	22b9      	movs	r2, #185	; 0xb9
 8002578:	2196      	movs	r1, #150	; 0x96
 800257a:	2041      	movs	r0, #65	; 0x41
 800257c:	f000 fa83 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8002580:	f248 4330 	movw	r3, #33840	; 0x8430
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	23b8      	movs	r3, #184	; 0xb8
 8002588:	22b8      	movs	r2, #184	; 0xb8
 800258a:	2197      	movs	r1, #151	; 0x97
 800258c:	2042      	movs	r0, #66	; 0x42
 800258e:	f000 fa7a 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002592:	f248 4330 	movw	r3, #33840	; 0x8430
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	23eb      	movs	r3, #235	; 0xeb
 800259a:	22b9      	movs	r2, #185	; 0xb9
 800259c:	21c8      	movs	r1, #200	; 0xc8
 800259e:	2041      	movs	r0, #65	; 0x41
 80025a0:	f000 fa71 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80025a4:	f248 4330 	movw	r3, #33840	; 0x8430
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	23ea      	movs	r3, #234	; 0xea
 80025ac:	22b8      	movs	r2, #184	; 0xb8
 80025ae:	21c9      	movs	r1, #201	; 0xc9
 80025b0:	2042      	movs	r0, #66	; 0x42
 80025b2:	f000 fa68 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80025b6:	f248 4330 	movw	r3, #33840	; 0x8430
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	f240 131d 	movw	r3, #285	; 0x11d
 80025c0:	22b9      	movs	r2, #185	; 0xb9
 80025c2:	21fa      	movs	r1, #250	; 0xfa
 80025c4:	2041      	movs	r0, #65	; 0x41
 80025c6:	f000 fa5e 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80025ca:	f248 4330 	movw	r3, #33840	; 0x8430
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80025d4:	22b8      	movs	r2, #184	; 0xb8
 80025d6:	21fb      	movs	r1, #251	; 0xfb
 80025d8:	2042      	movs	r0, #66	; 0x42
 80025da:	f000 fa54 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <home_second_lcd>:

void home_second_lcd(){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af02      	add	r7, sp, #8
	home_not_select();
 80025ea:	f7ff ffbd 	bl	8002568 <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80025ee:	2300      	movs	r3, #0
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	23b9      	movs	r3, #185	; 0xb9
 80025f4:	22b9      	movs	r2, #185	; 0xb9
 80025f6:	2196      	movs	r1, #150	; 0x96
 80025f8:	2041      	movs	r0, #65	; 0x41
 80025fa:	f000 fa44 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80025fe:	2300      	movs	r3, #0
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	23b8      	movs	r3, #184	; 0xb8
 8002604:	22b8      	movs	r2, #184	; 0xb8
 8002606:	2197      	movs	r1, #151	; 0x97
 8002608:	2042      	movs	r0, #66	; 0x42
 800260a:	f000 fa3c 	bl	8002a86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <point_head_lcd>:
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}

void point_head_lcd(struct Point head){
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af02      	add	r7, sp, #8
 800261a:	463b      	mov	r3, r7
 800261c:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(head.x, head.y, GREEN, RADIUS_SNAKE, 1);
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	2301      	movs	r3, #1
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2304      	movs	r3, #4
 800262a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800262e:	f000 fe30 	bl	8003292 <lcd_DrawCircle>
	lcd_DrawCircle(head.x, head.y, BLACK, 1, 1);
 8002632:	6838      	ldr	r0, [r7, #0]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	2301      	movs	r3, #1
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2301      	movs	r3, #1
 800263c:	2200      	movs	r2, #0
 800263e:	f000 fe28 	bl	8003292 <lcd_DrawCircle>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <point_snake_lcd>:

void point_snake_lcd(struct Point snake){
 800264a:	b590      	push	{r4, r7, lr}
 800264c:	b085      	sub	sp, #20
 800264e:	af02      	add	r7, sp, #8
 8002650:	463b      	mov	r3, r7
 8002652:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(snake.x, snake.y, GREEN, RADIUS_SNAKE, 1);
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	2301      	movs	r3, #1
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2304      	movs	r3, #4
 8002660:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002664:	f000 fe15 	bl	8003292 <lcd_DrawCircle>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b03      	subs	r3, #3
 800266e:	b298      	uxth	r0, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b03      	subs	r3, #3
 8002676:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8002678:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 800267a:	b29b      	uxth	r3, r3
 800267c:	3304      	adds	r3, #4
 800267e:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8002680:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8002682:	b29b      	uxth	r3, r3
 8002684:	3304      	adds	r3, #4
 8002686:	b29b      	uxth	r3, r3
 8002688:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800268c:	9400      	str	r4, [sp, #0]
 800268e:	f000 f976 	bl	800297e <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b03      	subs	r3, #3
 8002698:	b298      	uxth	r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b02      	subs	r3, #2
 80026a0:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80026a2:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3303      	adds	r3, #3
 80026a8:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80026aa:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3304      	adds	r3, #4
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80026b6:	9400      	str	r4, [sp, #0]
 80026b8:	f000 f961 	bl	800297e <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b02      	subs	r3, #2
 80026c2:	b298      	uxth	r0, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b03      	subs	r3, #3
 80026ca:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 80026cc:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3304      	adds	r3, #4
 80026d2:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 80026d4:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3303      	adds	r3, #3
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80026e0:	9400      	str	r4, [sp, #0]
 80026e2:	f000 f94c 	bl	800297e <lcd_DrawLine>
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}

080026ee <point_food_lcd>:

void point_food_lcd(struct Point food){
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af02      	add	r7, sp, #8
 80026f4:	463b      	mov	r3, r7
 80026f6:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(food.x, food.y, RED, RADIUS_SNAKE, 1);
 80026fa:	6838      	ldr	r0, [r7, #0]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	2301      	movs	r3, #1
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2304      	movs	r3, #4
 8002704:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002708:	f000 fdc3 	bl	8003292 <lcd_DrawCircle>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <point_clr>:

void point_clr(struct Point clr){
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af02      	add	r7, sp, #8
 800271a:	463b      	mov	r3, r7
 800271c:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(clr.x, clr.y, WHITE, RADIUS_SNAKE, 1);
 8002720:	6838      	ldr	r0, [r7, #0]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	2301      	movs	r3, #1
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2304      	movs	r3, #4
 800272a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800272e:	f000 fdb0 	bl	8003292 <lcd_DrawCircle>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <update_7seg_time>:
		default:
			break;
	}
}

void update_7seg_time(){
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
	led7_SetDigit(counter_time / 10, 3, 0);
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <update_7seg_time+0x40>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <update_7seg_time+0x44>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	08db      	lsrs	r3, r3, #3
 800274c:	2200      	movs	r2, #0
 800274e:	2103      	movs	r1, #3
 8002750:	4618      	mov	r0, r3
 8002752:	f000 ff07 	bl	8003564 <led7_SetDigit>
	led7_SetDigit(counter_time % 10, 4, 0);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <update_7seg_time+0x40>)
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <update_7seg_time+0x44>)
 800275c:	fba3 2301 	umull	r2, r3, r3, r1
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	1aca      	subs	r2, r1, r3
 800276c:	4613      	mov	r3, r2
 800276e:	2200      	movs	r2, #0
 8002770:	2104      	movs	r1, #4
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fef6 	bl	8003564 <led7_SetDigit>
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000100 	.word	0x20000100
 8002780:	cccccccd 	.word	0xcccccccd

08002784 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <LCD_WR_REG+0x1c>)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	8013      	strh	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	600ffffe 	.word	0x600ffffe

080027a4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <LCD_WR_DATA+0x1c>)
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	8053      	strh	r3, [r2, #2]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	600ffffe 	.word	0x600ffffe

080027c4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <LCD_RD_DATA+0x20>)
 80027cc:	885b      	ldrh	r3, [r3, #2]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	b29b      	uxth	r3, r3
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	600ffffe 	.word	0x600ffffe

080027e8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4604      	mov	r4, r0
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4623      	mov	r3, r4
 80027f8:	80fb      	strh	r3, [r7, #6]
 80027fa:	4603      	mov	r3, r0
 80027fc:	80bb      	strh	r3, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	807b      	strh	r3, [r7, #2]
 8002802:	4613      	mov	r3, r2
 8002804:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002806:	202a      	movs	r0, #42	; 0x2a
 8002808:	f7ff ffbc 	bl	8002784 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b29b      	uxth	r3, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ffc6 	bl	80027a4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	b29b      	uxth	r3, r3
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ffc0 	bl	80027a4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b29b      	uxth	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ffba 	bl	80027a4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	b29b      	uxth	r3, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ffb4 	bl	80027a4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800283c:	202b      	movs	r0, #43	; 0x2b
 800283e:	f7ff ffa1 	bl	8002784 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002842:	88bb      	ldrh	r3, [r7, #4]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	b29b      	uxth	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ffab 	bl	80027a4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800284e:	88bb      	ldrh	r3, [r7, #4]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	b29b      	uxth	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ffa5 	bl	80027a4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800285a:	883b      	ldrh	r3, [r7, #0]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff9f 	bl	80027a4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002866:	883b      	ldrh	r3, [r7, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff99 	bl	80027a4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002872:	202c      	movs	r0, #44	; 0x2c
 8002874:	f7ff ff86 	bl	8002784 <LCD_WR_REG>
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}

08002880 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <lcd_Clear+0x60>)
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <lcd_Clear+0x60>)
 8002894:	885b      	ldrh	r3, [r3, #2]
 8002896:	3b01      	subs	r3, #1
 8002898:	b29b      	uxth	r3, r3
 800289a:	2100      	movs	r1, #0
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff ffa3 	bl	80027e8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	81fb      	strh	r3, [r7, #14]
 80028a6:	e011      	b.n	80028cc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	81bb      	strh	r3, [r7, #12]
 80028ac:	e006      	b.n	80028bc <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff77 	bl	80027a4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80028b6:	89bb      	ldrh	r3, [r7, #12]
 80028b8:	3301      	adds	r3, #1
 80028ba:	81bb      	strh	r3, [r7, #12]
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <lcd_Clear+0x60>)
 80028be:	885b      	ldrh	r3, [r3, #2]
 80028c0:	89ba      	ldrh	r2, [r7, #12]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d3f3      	bcc.n	80028ae <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80028c6:	89fb      	ldrh	r3, [r7, #14]
 80028c8:	3301      	adds	r3, #1
 80028ca:	81fb      	strh	r3, [r7, #14]
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <lcd_Clear+0x60>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	89fa      	ldrh	r2, [r7, #14]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d3e8      	bcc.n	80028a8 <lcd_Clear+0x28>
		}
	}
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200005cc 	.word	0x200005cc

080028e4 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4604      	mov	r4, r0
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	80fb      	strh	r3, [r7, #6]
 80028f6:	4603      	mov	r3, r0
 80028f8:	80bb      	strh	r3, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	807b      	strh	r3, [r7, #2]
 80028fe:	4613      	mov	r3, r2
 8002900:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	883b      	ldrh	r3, [r7, #0]
 800290a:	3b01      	subs	r3, #1
 800290c:	b29b      	uxth	r3, r3
 800290e:	88b9      	ldrh	r1, [r7, #4]
 8002910:	88f8      	ldrh	r0, [r7, #6]
 8002912:	f7ff ff69 	bl	80027e8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002916:	88bb      	ldrh	r3, [r7, #4]
 8002918:	81fb      	strh	r3, [r7, #14]
 800291a:	e010      	b.n	800293e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	81bb      	strh	r3, [r7, #12]
 8002920:	e006      	b.n	8002930 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002922:	8c3b      	ldrh	r3, [r7, #32]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff3d 	bl	80027a4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800292a:	89bb      	ldrh	r3, [r7, #12]
 800292c:	3301      	adds	r3, #1
 800292e:	81bb      	strh	r3, [r7, #12]
 8002930:	89ba      	ldrh	r2, [r7, #12]
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	429a      	cmp	r2, r3
 8002936:	d3f4      	bcc.n	8002922 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002938:	89fb      	ldrh	r3, [r7, #14]
 800293a:	3301      	adds	r3, #1
 800293c:	81fb      	strh	r3, [r7, #14]
 800293e:	89fa      	ldrh	r2, [r7, #14]
 8002940:	883b      	ldrh	r3, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d3ea      	bcc.n	800291c <lcd_Fill+0x38>
		}
	}
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}

08002950 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
 800295a:	460b      	mov	r3, r1
 800295c:	80bb      	strh	r3, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002962:	88bb      	ldrh	r3, [r7, #4]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	88b9      	ldrh	r1, [r7, #4]
 8002968:	88f8      	ldrh	r0, [r7, #6]
 800296a:	f7ff ff3d 	bl	80027e8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff17 	bl	80027a4 <LCD_WR_DATA>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 800297e:	b590      	push	{r4, r7, lr}
 8002980:	b08d      	sub	sp, #52	; 0x34
 8002982:	af00      	add	r7, sp, #0
 8002984:	4604      	mov	r4, r0
 8002986:	4608      	mov	r0, r1
 8002988:	4611      	mov	r1, r2
 800298a:	461a      	mov	r2, r3
 800298c:	4623      	mov	r3, r4
 800298e:	80fb      	strh	r3, [r7, #6]
 8002990:	4603      	mov	r3, r0
 8002992:	80bb      	strh	r3, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80029a4:	887a      	ldrh	r2, [r7, #2]
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80029ac:	883a      	ldrh	r2, [r7, #0]
 80029ae:	88bb      	ldrh	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80029b8:	88bb      	ldrh	r3, [r7, #4]
 80029ba:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	dd02      	ble.n	80029c8 <lcd_DrawLine+0x4a>
 80029c2:	2301      	movs	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e00b      	b.n	80029e0 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <lcd_DrawLine+0x56>
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	e005      	b.n	80029e0 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	425b      	negs	r3, r3
 80029de:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	dd02      	ble.n	80029ec <lcd_DrawLine+0x6e>
 80029e6:	2301      	movs	r3, #1
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	e00b      	b.n	8002a04 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <lcd_DrawLine+0x7a>
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	e005      	b.n	8002a04 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	425b      	negs	r3, r3
 8002a02:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dd02      	ble.n	8002a12 <lcd_DrawLine+0x94>
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e001      	b.n	8002a16 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002a1a:	e02b      	b.n	8002a74 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	b291      	uxth	r1, r2
 8002a24:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff91 	bl	8002950 <lcd_DrawPoint>
		xerr+=delta_x;
 8002a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	4413      	add	r3, r2
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8002a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dd07      	ble.n	8002a56 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8002a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	dd07      	ble.n	8002a6e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8002a6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a70:	3301      	adds	r3, #1
 8002a72:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002a74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dacf      	bge.n	8002a1c <lcd_DrawLine+0x9e>
		}
	}
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3734      	adds	r7, #52	; 0x34
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd90      	pop	{r4, r7, pc}

08002a86 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8002a86:	b590      	push	{r4, r7, lr}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af02      	add	r7, sp, #8
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	4608      	mov	r0, r1
 8002a90:	4611      	mov	r1, r2
 8002a92:	461a      	mov	r2, r3
 8002a94:	4623      	mov	r3, r4
 8002a96:	80fb      	strh	r3, [r7, #6]
 8002a98:	4603      	mov	r3, r0
 8002a9a:	80bb      	strh	r3, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8002aa4:	88bc      	ldrh	r4, [r7, #4]
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	88b9      	ldrh	r1, [r7, #4]
 8002aaa:	88f8      	ldrh	r0, [r7, #6]
 8002aac:	8b3b      	ldrh	r3, [r7, #24]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4623      	mov	r3, r4
 8002ab2:	f7ff ff64 	bl	800297e <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8002ab6:	883c      	ldrh	r4, [r7, #0]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	88b9      	ldrh	r1, [r7, #4]
 8002abc:	88f8      	ldrh	r0, [r7, #6]
 8002abe:	8b3b      	ldrh	r3, [r7, #24]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	f7ff ff5b 	bl	800297e <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8002ac8:	883c      	ldrh	r4, [r7, #0]
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	8839      	ldrh	r1, [r7, #0]
 8002ace:	88f8      	ldrh	r0, [r7, #6]
 8002ad0:	8b3b      	ldrh	r3, [r7, #24]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4623      	mov	r3, r4
 8002ad6:	f7ff ff52 	bl	800297e <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8002ada:	883c      	ldrh	r4, [r7, #0]
 8002adc:	887a      	ldrh	r2, [r7, #2]
 8002ade:	88b9      	ldrh	r1, [r7, #4]
 8002ae0:	8878      	ldrh	r0, [r7, #2]
 8002ae2:	8b3b      	ldrh	r3, [r7, #24]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	f7ff ff49 	bl	800297e <lcd_DrawLine>
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd90      	pop	{r4, r7, pc}

08002af4 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4604      	mov	r4, r0
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	80fb      	strh	r3, [r7, #6]
 8002b06:	4603      	mov	r3, r0
 8002b08:	80bb      	strh	r3, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8002b1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf14      	ite	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	2300      	moveq	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	fb12 f303 	smulbb	r3, r2, r3
 8002b4a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	3b20      	subs	r3, #32
 8002b50:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	4413      	add	r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29c      	uxth	r4, r3
 8002b60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	88b9      	ldrh	r1, [r7, #4]
 8002b72:	88f8      	ldrh	r0, [r7, #6]
 8002b74:	4622      	mov	r2, r4
 8002b76:	f7ff fe37 	bl	80027e8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	827b      	strh	r3, [r7, #18]
 8002b7e:	e07a      	b.n	8002c76 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002b80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d028      	beq.n	8002bda <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8002b88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d108      	bne.n	8002ba2 <lcd_ShowChar+0xae>
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	8a7b      	ldrh	r3, [r7, #18]
 8002b94:	493c      	ldr	r1, [pc, #240]	; (8002c88 <lcd_ShowChar+0x194>)
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	440a      	add	r2, r1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	75fb      	strb	r3, [r7, #23]
 8002ba0:	e01b      	b.n	8002bda <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8002ba2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ba6:	2b18      	cmp	r3, #24
 8002ba8:	d10b      	bne.n	8002bc2 <lcd_ShowChar+0xce>
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	8a79      	ldrh	r1, [r7, #18]
 8002bae:	4837      	ldr	r0, [pc, #220]	; (8002c8c <lcd_ShowChar+0x198>)
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	4403      	add	r3, r0
 8002bba:	440b      	add	r3, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	75fb      	strb	r3, [r7, #23]
 8002bc0:	e00b      	b.n	8002bda <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8002bc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d15a      	bne.n	8002c80 <lcd_ShowChar+0x18c>
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	8a7b      	ldrh	r3, [r7, #18]
 8002bce:	4930      	ldr	r1, [pc, #192]	; (8002c90 <lcd_ShowChar+0x19c>)
 8002bd0:	0192      	lsls	r2, r2, #6
 8002bd2:	440a      	add	r2, r1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75bb      	strb	r3, [r7, #22]
 8002bde:	e044      	b.n	8002c6a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002be0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d120      	bne.n	8002c2a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002be8:	7dfa      	ldrb	r2, [r7, #23]
 8002bea:	7dbb      	ldrb	r3, [r7, #22]
 8002bec:	fa42 f303 	asr.w	r3, r2, r3
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <lcd_ShowChar+0x10e>
 8002bf8:	883b      	ldrh	r3, [r7, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fdd2 	bl	80027a4 <LCD_WR_DATA>
 8002c00:	e003      	b.n	8002c0a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8002c02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fdcd 	bl	80027a4 <LCD_WR_DATA>
				m++;
 8002c0a:	7d7b      	ldrb	r3, [r7, #21]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002c10:	7d7b      	ldrb	r3, [r7, #21]
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c18:	fb02 f201 	mul.w	r2, r2, r1
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11f      	bne.n	8002c64 <lcd_ShowChar+0x170>
				{
					m=0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	757b      	strb	r3, [r7, #21]
					break;
 8002c28:	e022      	b.n	8002c70 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002c2a:	7dfa      	ldrb	r2, [r7, #23]
 8002c2c:	7dbb      	ldrb	r3, [r7, #22]
 8002c2e:	fa42 f303 	asr.w	r3, r2, r3
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <lcd_ShowChar+0x152>
 8002c3a:	883a      	ldrh	r2, [r7, #0]
 8002c3c:	88b9      	ldrh	r1, [r7, #4]
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fe85 	bl	8002950 <lcd_DrawPoint>
				x++;
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	8a3b      	ldrh	r3, [r7, #16]
 8002c50:	1ad2      	subs	r2, r2, r3
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d105      	bne.n	8002c64 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002c58:	8a3b      	ldrh	r3, [r7, #16]
 8002c5a:	80fb      	strh	r3, [r7, #6]
					y++;
 8002c5c:	88bb      	ldrh	r3, [r7, #4]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	80bb      	strh	r3, [r7, #4]
					break;
 8002c62:	e005      	b.n	8002c70 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002c64:	7dbb      	ldrb	r3, [r7, #22]
 8002c66:	3301      	adds	r3, #1
 8002c68:	75bb      	strb	r3, [r7, #22]
 8002c6a:	7dbb      	ldrb	r3, [r7, #22]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d9b7      	bls.n	8002be0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002c70:	8a7b      	ldrh	r3, [r7, #18]
 8002c72:	3301      	adds	r3, #1
 8002c74:	827b      	strh	r3, [r7, #18]
 8002c76:	8a7a      	ldrh	r2, [r7, #18]
 8002c78:	89bb      	ldrh	r3, [r7, #12]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d380      	bcc.n	8002b80 <lcd_ShowChar+0x8c>
 8002c7e:	e000      	b.n	8002c82 <lcd_ShowChar+0x18e>
		else return;
 8002c80:	bf00      	nop
				}
			}
		}
	}
}
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	0800cea0 	.word	0x0800cea0
 8002c8c:	0800d490 	.word	0x0800d490
 8002c90:	0800e660 	.word	0x0800e660

08002c94 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	71fb      	strb	r3, [r7, #7]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002ca8:	e004      	b.n	8002cb4 <mypow+0x20>
 8002caa:	79fa      	ldrb	r2, [r7, #7]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	79bb      	ldrb	r3, [r7, #6]
 8002cb6:	1e5a      	subs	r2, r3, #1
 8002cb8:	71ba      	strb	r2, [r7, #6]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f5      	bne.n	8002caa <mypow+0x16>
	return result;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	80fb      	strh	r3, [r7, #6]
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80bb      	strh	r3, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	807b      	strh	r3, [r7, #2]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002cee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	e059      	b.n	8002db0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002cfc:	887c      	ldrh	r4, [r7, #2]
 8002cfe:	787a      	ldrb	r2, [r7, #1]
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	200a      	movs	r0, #10
 8002d0e:	f7ff ffc1 	bl	8002c94 <mypow>
 8002d12:	4603      	mov	r3, r0
 8002d14:	fbb4 f1f3 	udiv	r1, r4, r3
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <lcd_ShowIntNum+0xf8>)
 8002d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	1aca      	subs	r2, r1, r3
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8002d2e:	7bbb      	ldrb	r3, [r7, #14]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d121      	bne.n	8002d78 <lcd_ShowIntNum+0xac>
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	787b      	ldrb	r3, [r7, #1]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	da1c      	bge.n	8002d78 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002d3e:	7b3b      	ldrb	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d117      	bne.n	8002d74 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	7b7b      	ldrb	r3, [r7, #13]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	fb12 f303 	smulbb	r3, r2, r3
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	4413      	add	r3, r2
 8002d56:	b298      	uxth	r0, r3
 8002d58:	8c3a      	ldrh	r2, [r7, #32]
 8002d5a:	88b9      	ldrh	r1, [r7, #4]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f7ff fec1 	bl	8002af4 <lcd_ShowChar>
				continue;
 8002d72:	e01a      	b.n	8002daa <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	7b7b      	ldrb	r3, [r7, #13]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	fb12 f303 	smulbb	r3, r2, r3
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	4413      	add	r3, r2
 8002d8a:	b298      	uxth	r0, r3
 8002d8c:	7b3b      	ldrb	r3, [r7, #12]
 8002d8e:	3330      	adds	r3, #48	; 0x30
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8c3c      	ldrh	r4, [r7, #32]
 8002d94:	88b9      	ldrh	r1, [r7, #4]
 8002d96:	2300      	movs	r3, #0
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4623      	mov	r3, r4
 8002da6:	f7ff fea5 	bl	8002af4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	3301      	adds	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	787b      	ldrb	r3, [r7, #1]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3a1      	bcc.n	8002cfc <lcd_ShowIntNum+0x30>
	}
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	cccccccd 	.word	0xcccccccd

08002dc8 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	80fb      	strh	r3, [r7, #6]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80bb      	strh	r3, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	807b      	strh	r3, [r7, #2]
 8002de2:	4613      	mov	r3, r2
 8002de4:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8002dea:	88fa      	ldrh	r2, [r7, #6]
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	4413      	add	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29c      	uxth	r4, r3
 8002df6:	88ba      	ldrh	r2, [r7, #4]
 8002df8:	883b      	ldrh	r3, [r7, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	88b9      	ldrh	r1, [r7, #4]
 8002e04:	88f8      	ldrh	r0, [r7, #6]
 8002e06:	4622      	mov	r2, r4
 8002e08:	f7ff fcee 	bl	80027e8 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	82fb      	strh	r3, [r7, #22]
 8002e10:	e027      	b.n	8002e62 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	82bb      	strh	r3, [r7, #20]
 8002e16:	e01d      	b.n	8002e54 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	3301      	adds	r3, #1
 8002e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2c:	4413      	add	r3, r2
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	b21a      	sxth	r2, r3
 8002e38:	7bbb      	ldrb	r3, [r7, #14]
 8002e3a:	b21b      	sxth	r3, r3
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fcae 	bl	80027a4 <LCD_WR_DATA>
			k++;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8002e4e:	8abb      	ldrh	r3, [r7, #20]
 8002e50:	3301      	adds	r3, #1
 8002e52:	82bb      	strh	r3, [r7, #20]
 8002e54:	8aba      	ldrh	r2, [r7, #20]
 8002e56:	883b      	ldrh	r3, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3dd      	bcc.n	8002e18 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8002e5c:	8afb      	ldrh	r3, [r7, #22]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	82fb      	strh	r3, [r7, #22]
 8002e62:	8afa      	ldrh	r2, [r7, #22]
 8002e64:	887b      	ldrh	r3, [r7, #2]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d3d3      	bcc.n	8002e12 <lcd_ShowPicture+0x4a>
		}
	}
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd90      	pop	{r4, r7, pc}

08002e74 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <lcd_SetDir+0x44>)
 8002e90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e94:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <lcd_SetDir+0x44>)
 8002e98:	22f0      	movs	r2, #240	; 0xf0
 8002e9a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002e9c:	e006      	b.n	8002eac <lcd_SetDir+0x38>
		lcddev.width=240;
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <lcd_SetDir+0x44>)
 8002ea0:	22f0      	movs	r2, #240	; 0xf0
 8002ea2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <lcd_SetDir+0x44>)
 8002ea6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002eaa:	805a      	strh	r2, [r3, #2]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	200005cc 	.word	0x200005cc

08002ebc <lcd_init>:


void lcd_init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec6:	48aa      	ldr	r0, [pc, #680]	; (8003170 <lcd_init+0x2b4>)
 8002ec8:	f003 fc7c 	bl	80067c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002ecc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ed0:	f002 fbb0 	bl	8005634 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eda:	48a5      	ldr	r0, [pc, #660]	; (8003170 <lcd_init+0x2b4>)
 8002edc:	f003 fc72 	bl	80067c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002ee0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ee4:	f002 fba6 	bl	8005634 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7ff ffc3 	bl	8002e74 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002eee:	20d3      	movs	r0, #211	; 0xd3
 8002ef0:	f7ff fc48 	bl	8002784 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002ef4:	f7ff fc66 	bl	80027c4 <LCD_RD_DATA>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b9d      	ldr	r3, [pc, #628]	; (8003174 <lcd_init+0x2b8>)
 8002efe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002f00:	f7ff fc60 	bl	80027c4 <LCD_RD_DATA>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b9a      	ldr	r3, [pc, #616]	; (8003174 <lcd_init+0x2b8>)
 8002f0a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002f0c:	f7ff fc5a 	bl	80027c4 <LCD_RD_DATA>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b97      	ldr	r3, [pc, #604]	; (8003174 <lcd_init+0x2b8>)
 8002f16:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002f18:	4b96      	ldr	r3, [pc, #600]	; (8003174 <lcd_init+0x2b8>)
 8002f1a:	889b      	ldrh	r3, [r3, #4]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b94      	ldr	r3, [pc, #592]	; (8003174 <lcd_init+0x2b8>)
 8002f22:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002f24:	f7ff fc4e 	bl	80027c4 <LCD_RD_DATA>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b91      	ldr	r3, [pc, #580]	; (8003174 <lcd_init+0x2b8>)
 8002f2e:	889b      	ldrh	r3, [r3, #4]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	4b8f      	ldr	r3, [pc, #572]	; (8003174 <lcd_init+0x2b8>)
 8002f36:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002f38:	20cf      	movs	r0, #207	; 0xcf
 8002f3a:	f7ff fc23 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7ff fc30 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002f44:	20c1      	movs	r0, #193	; 0xc1
 8002f46:	f7ff fc2d 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002f4a:	2030      	movs	r0, #48	; 0x30
 8002f4c:	f7ff fc2a 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002f50:	20ed      	movs	r0, #237	; 0xed
 8002f52:	f7ff fc17 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002f56:	2064      	movs	r0, #100	; 0x64
 8002f58:	f7ff fc24 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002f5c:	2003      	movs	r0, #3
 8002f5e:	f7ff fc21 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002f62:	2012      	movs	r0, #18
 8002f64:	f7ff fc1e 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002f68:	2081      	movs	r0, #129	; 0x81
 8002f6a:	f7ff fc1b 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002f6e:	20e8      	movs	r0, #232	; 0xe8
 8002f70:	f7ff fc08 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002f74:	2085      	movs	r0, #133	; 0x85
 8002f76:	f7ff fc15 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002f7a:	2010      	movs	r0, #16
 8002f7c:	f7ff fc12 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002f80:	207a      	movs	r0, #122	; 0x7a
 8002f82:	f7ff fc0f 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002f86:	20cb      	movs	r0, #203	; 0xcb
 8002f88:	f7ff fbfc 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002f8c:	2039      	movs	r0, #57	; 0x39
 8002f8e:	f7ff fc09 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002f92:	202c      	movs	r0, #44	; 0x2c
 8002f94:	f7ff fc06 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff fc03 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002f9e:	2034      	movs	r0, #52	; 0x34
 8002fa0:	f7ff fc00 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f7ff fbfd 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002faa:	20f7      	movs	r0, #247	; 0xf7
 8002fac:	f7ff fbea 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002fb0:	2020      	movs	r0, #32
 8002fb2:	f7ff fbf7 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002fb6:	20ea      	movs	r0, #234	; 0xea
 8002fb8:	f7ff fbe4 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7ff fbf1 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7ff fbee 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002fc8:	20c0      	movs	r0, #192	; 0xc0
 8002fca:	f7ff fbdb 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002fce:	201b      	movs	r0, #27
 8002fd0:	f7ff fbe8 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002fd4:	20c1      	movs	r0, #193	; 0xc1
 8002fd6:	f7ff fbd5 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f7ff fbe2 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002fe0:	20c5      	movs	r0, #197	; 0xc5
 8002fe2:	f7ff fbcf 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002fe6:	2030      	movs	r0, #48	; 0x30
 8002fe8:	f7ff fbdc 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002fec:	2030      	movs	r0, #48	; 0x30
 8002fee:	f7ff fbd9 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002ff2:	20c7      	movs	r0, #199	; 0xc7
 8002ff4:	f7ff fbc6 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002ff8:	20b7      	movs	r0, #183	; 0xb7
 8002ffa:	f7ff fbd3 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002ffe:	2036      	movs	r0, #54	; 0x36
 8003000:	f7ff fbc0 	bl	8002784 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8003004:	2008      	movs	r0, #8
 8003006:	f7ff fbcd 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800300a:	203a      	movs	r0, #58	; 0x3a
 800300c:	f7ff fbba 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8003010:	2055      	movs	r0, #85	; 0x55
 8003012:	f7ff fbc7 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8003016:	20b1      	movs	r0, #177	; 0xb1
 8003018:	f7ff fbb4 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800301c:	2000      	movs	r0, #0
 800301e:	f7ff fbc1 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8003022:	201a      	movs	r0, #26
 8003024:	f7ff fbbe 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8003028:	20b6      	movs	r0, #182	; 0xb6
 800302a:	f7ff fbab 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800302e:	200a      	movs	r0, #10
 8003030:	f7ff fbb8 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8003034:	20a2      	movs	r0, #162	; 0xa2
 8003036:	f7ff fbb5 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800303a:	20f2      	movs	r0, #242	; 0xf2
 800303c:	f7ff fba2 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003040:	2000      	movs	r0, #0
 8003042:	f7ff fbaf 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8003046:	2026      	movs	r0, #38	; 0x26
 8003048:	f7ff fb9c 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800304c:	2001      	movs	r0, #1
 800304e:	f7ff fba9 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8003052:	20e0      	movs	r0, #224	; 0xe0
 8003054:	f7ff fb96 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8003058:	200f      	movs	r0, #15
 800305a:	f7ff fba3 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800305e:	202a      	movs	r0, #42	; 0x2a
 8003060:	f7ff fba0 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8003064:	2028      	movs	r0, #40	; 0x28
 8003066:	f7ff fb9d 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800306a:	2008      	movs	r0, #8
 800306c:	f7ff fb9a 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8003070:	200e      	movs	r0, #14
 8003072:	f7ff fb97 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003076:	2008      	movs	r0, #8
 8003078:	f7ff fb94 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800307c:	2054      	movs	r0, #84	; 0x54
 800307e:	f7ff fb91 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8003082:	20a9      	movs	r0, #169	; 0xa9
 8003084:	f7ff fb8e 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8003088:	2043      	movs	r0, #67	; 0x43
 800308a:	f7ff fb8b 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800308e:	200a      	movs	r0, #10
 8003090:	f7ff fb88 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8003094:	200f      	movs	r0, #15
 8003096:	f7ff fb85 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7ff fb82 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7ff fb7f 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7ff fb7c 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7ff fb79 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80030b2:	20e1      	movs	r0, #225	; 0xe1
 80030b4:	f7ff fb66 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7ff fb73 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80030be:	2015      	movs	r0, #21
 80030c0:	f7ff fb70 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80030c4:	2017      	movs	r0, #23
 80030c6:	f7ff fb6d 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80030ca:	2007      	movs	r0, #7
 80030cc:	f7ff fb6a 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80030d0:	2011      	movs	r0, #17
 80030d2:	f7ff fb67 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80030d6:	2006      	movs	r0, #6
 80030d8:	f7ff fb64 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80030dc:	202b      	movs	r0, #43	; 0x2b
 80030de:	f7ff fb61 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80030e2:	2056      	movs	r0, #86	; 0x56
 80030e4:	f7ff fb5e 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80030e8:	203c      	movs	r0, #60	; 0x3c
 80030ea:	f7ff fb5b 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80030ee:	2005      	movs	r0, #5
 80030f0:	f7ff fb58 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80030f4:	2010      	movs	r0, #16
 80030f6:	f7ff fb55 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80030fa:	200f      	movs	r0, #15
 80030fc:	f7ff fb52 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003100:	203f      	movs	r0, #63	; 0x3f
 8003102:	f7ff fb4f 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003106:	203f      	movs	r0, #63	; 0x3f
 8003108:	f7ff fb4c 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800310c:	200f      	movs	r0, #15
 800310e:	f7ff fb49 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8003112:	202b      	movs	r0, #43	; 0x2b
 8003114:	f7ff fb36 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003118:	2000      	movs	r0, #0
 800311a:	f7ff fb43 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800311e:	2000      	movs	r0, #0
 8003120:	f7ff fb40 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8003124:	2001      	movs	r0, #1
 8003126:	f7ff fb3d 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800312a:	203f      	movs	r0, #63	; 0x3f
 800312c:	f7ff fb3a 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8003130:	202a      	movs	r0, #42	; 0x2a
 8003132:	f7ff fb27 	bl	8002784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003136:	2000      	movs	r0, #0
 8003138:	f7ff fb34 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7ff fb31 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003142:	2000      	movs	r0, #0
 8003144:	f7ff fb2e 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8003148:	20ef      	movs	r0, #239	; 0xef
 800314a:	f7ff fb2b 	bl	80027a4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800314e:	2011      	movs	r0, #17
 8003150:	f7ff fb18 	bl	8002784 <LCD_WR_REG>
	HAL_Delay(120);
 8003154:	2078      	movs	r0, #120	; 0x78
 8003156:	f002 fa6d 	bl	8005634 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800315a:	2029      	movs	r0, #41	; 0x29
 800315c:	f7ff fb12 	bl	8002784 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8003160:	2201      	movs	r2, #1
 8003162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003166:	4804      	ldr	r0, [pc, #16]	; (8003178 <lcd_init+0x2bc>)
 8003168:	f003 fb2c 	bl	80067c4 <HAL_GPIO_WritePin>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40020800 	.word	0x40020800
 8003174:	200005cc 	.word	0x200005cc
 8003178:	40020000 	.word	0x40020000

0800317c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	b29b      	uxth	r3, r3
 8003192:	4413      	add	r3, r2
 8003194:	b298      	uxth	r0, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	b29a      	uxth	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	4413      	add	r3, r2
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	8b3a      	ldrh	r2, [r7, #24]
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7ff fbd3 	bl	8002950 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	b298      	uxth	r0, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	4413      	add	r3, r2
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8b3a      	ldrh	r2, [r7, #24]
 80031c4:	4619      	mov	r1, r3
 80031c6:	f7ff fbc3 	bl	8002950 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	b298      	uxth	r0, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	8b3a      	ldrh	r2, [r7, #24]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f7ff fbb3 	bl	8002950 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	b298      	uxth	r0, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	b29b      	uxth	r3, r3
 8003202:	8b3a      	ldrh	r2, [r7, #24]
 8003204:	4619      	mov	r1, r3
 8003206:	f7ff fba3 	bl	8002950 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	b29a      	uxth	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	4413      	add	r3, r2
 8003214:	b298      	uxth	r0, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	b29a      	uxth	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	b29b      	uxth	r3, r3
 800321e:	4413      	add	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	8b3a      	ldrh	r2, [r7, #24]
 8003224:	4619      	mov	r1, r3
 8003226:	f7ff fb93 	bl	8002950 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	b29a      	uxth	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	b298      	uxth	r0, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	b29a      	uxth	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	b29b      	uxth	r3, r3
 800323e:	4413      	add	r3, r2
 8003240:	b29b      	uxth	r3, r3
 8003242:	8b3a      	ldrh	r2, [r7, #24]
 8003244:	4619      	mov	r1, r3
 8003246:	f7ff fb83 	bl	8002950 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	b29a      	uxth	r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	4413      	add	r3, r2
 8003254:	b298      	uxth	r0, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	b29b      	uxth	r3, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	8b3a      	ldrh	r2, [r7, #24]
 8003264:	4619      	mov	r1, r3
 8003266:	f7ff fb73 	bl	8002950 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	b29a      	uxth	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	b298      	uxth	r0, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	b29b      	uxth	r3, r3
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	b29b      	uxth	r3, r3
 8003282:	8b3a      	ldrh	r2, [r7, #24]
 8003284:	4619      	mov	r1, r3
 8003286:	f7ff fb63 	bl	8002950 <lcd_DrawPoint>
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b08a      	sub	sp, #40	; 0x28
 8003296:	af02      	add	r7, sp, #8
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	f1c3 0303 	rsb	r3, r3, #3
 80032b2:	613b      	str	r3, [r7, #16]


	if (fill)
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d04f      	beq.n	800335a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80032ba:	e029      	b.n	8003310 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e00a      	b.n	80032d8 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff ff55 	bl	800317c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3301      	adds	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	429a      	cmp	r2, r3
 80032de:	ddf0      	ble.n	80032c2 <lcd_DrawCircle+0x30>

			if (d < 0) {
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	da06      	bge.n	80032f4 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	009a      	lsls	r2, r3, #2
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	3306      	adds	r3, #6
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e00a      	b.n	800330a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	009a      	lsls	r2, r3, #2
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	330a      	adds	r3, #10
 8003302:	613b      	str	r3, [r7, #16]
				y--;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	3b01      	subs	r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	429a      	cmp	r2, r3
 8003316:	ddd1      	ble.n	80032bc <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8003318:	e023      	b.n	8003362 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff ff29 	bl	800317c <_draw_circle_8>
			if (d < 0) {
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	da06      	bge.n	800333e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	009a      	lsls	r2, r3, #2
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	3306      	adds	r3, #6
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	e00a      	b.n	8003354 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	009a      	lsls	r2, r3, #2
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	330a      	adds	r3, #10
 800334c:	613b      	str	r3, [r7, #16]
				y--;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	3b01      	subs	r3, #1
 8003352:	61bb      	str	r3, [r7, #24]
			x++;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	3301      	adds	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	429a      	cmp	r2, r3
 8003360:	dddb      	ble.n	800331a <lcd_DrawCircle+0x88>
}
 8003362:	bf00      	nop
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b08b      	sub	sp, #44	; 0x2c
 8003370:	af04      	add	r7, sp, #16
 8003372:	60ba      	str	r2, [r7, #8]
 8003374:	461a      	mov	r2, r3
 8003376:	4603      	mov	r3, r0
 8003378:	81fb      	strh	r3, [r7, #14]
 800337a:	460b      	mov	r3, r1
 800337c:	81bb      	strh	r3, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8003382:	89fb      	ldrh	r3, [r7, #14]
 8003384:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8003386:	2300      	movs	r3, #0
 8003388:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800338a:	e048      	b.n	800341e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d145      	bne.n	800341e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003392:	89fa      	ldrh	r2, [r7, #14]
 8003394:	4b26      	ldr	r3, [pc, #152]	; (8003430 <lcd_ShowStr+0xc4>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	1acb      	subs	r3, r1, r3
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dc3f      	bgt.n	8003428 <lcd_ShowStr+0xbc>
 80033a8:	89ba      	ldrh	r2, [r7, #12]
 80033aa:	4b21      	ldr	r3, [pc, #132]	; (8003430 <lcd_ShowStr+0xc4>)
 80033ac:	885b      	ldrh	r3, [r3, #2]
 80033ae:	4619      	mov	r1, r3
 80033b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033b4:	1acb      	subs	r3, r1, r3
 80033b6:	429a      	cmp	r2, r3
 80033b8:	dc36      	bgt.n	8003428 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b80      	cmp	r3, #128	; 0x80
 80033c0:	d902      	bls.n	80033c8 <lcd_ShowStr+0x5c>
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
 80033c6:	e02a      	b.n	800341e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b0d      	cmp	r3, #13
 80033ce:	d10b      	bne.n	80033e8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80033d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	89bb      	ldrh	r3, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80033dc:	8abb      	ldrh	r3, [r7, #20]
 80033de:	81fb      	strh	r3, [r7, #14]
					str++;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	e017      	b.n	8003418 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	88fc      	ldrh	r4, [r7, #6]
 80033ee:	89b9      	ldrh	r1, [r7, #12]
 80033f0:	89f8      	ldrh	r0, [r7, #14]
 80033f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80033f6:	9302      	str	r3, [sp, #8]
 80033f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	4623      	mov	r3, r4
 8003404:	f7ff fb76 	bl	8002af4 <lcd_ShowChar>
					x+=sizey/2;
 8003408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	b29a      	uxth	r2, r3
 8003412:	89fb      	ldrh	r3, [r7, #14]
 8003414:	4413      	add	r3, r2
 8003416:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3301      	adds	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1b2      	bne.n	800338c <lcd_ShowStr+0x20>
 8003426:	e000      	b.n	800342a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003428:	bf00      	nop
			}
		}
	}
}
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd90      	pop	{r4, r7, pc}
 8003430:	200005cc 	.word	0x200005cc

08003434 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003438:	2201      	movs	r2, #1
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <led7_init+0x14>)
 800343e:	f003 f9c1 	bl	80067c4 <HAL_GPIO_WritePin>
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021800 	.word	0x40021800

0800344c <led7_Scan>:

void led7_Scan(){
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <led7_Scan+0x104>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <led7_Scan+0x104>)
 800345a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800345c:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <led7_Scan+0x108>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <led7_Scan+0x10c>)
 8003464:	5c9b      	ldrb	r3, [r3, r2]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	b21a      	sxth	r2, r3
 800346a:	4b39      	ldr	r3, [pc, #228]	; (8003550 <led7_Scan+0x104>)
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b21b      	sxth	r3, r3
 8003470:	4313      	orrs	r3, r2
 8003472:	b21b      	sxth	r3, r3
 8003474:	b29a      	uxth	r2, r3
 8003476:	4b36      	ldr	r3, [pc, #216]	; (8003550 <led7_Scan+0x104>)
 8003478:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800347a:	4b36      	ldr	r3, [pc, #216]	; (8003554 <led7_Scan+0x108>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d846      	bhi.n	8003510 <led7_Scan+0xc4>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <led7_Scan+0x3c>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	080034b7 	.word	0x080034b7
 8003490:	080034d5 	.word	0x080034d5
 8003494:	080034f3 	.word	0x080034f3
	case 0:
		spi_buffer |= 0x00b0;
 8003498:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <led7_Scan+0x104>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <led7_Scan+0x104>)
 80034a4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <led7_Scan+0x104>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <led7_Scan+0x104>)
 80034b2:	801a      	strh	r2, [r3, #0]
		break;
 80034b4:	e02d      	b.n	8003512 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80034b6:	4b26      	ldr	r3, [pc, #152]	; (8003550 <led7_Scan+0x104>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <led7_Scan+0x104>)
 80034c2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80034c4:	4b22      	ldr	r3, [pc, #136]	; (8003550 <led7_Scan+0x104>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	f023 0320 	bic.w	r3, r3, #32
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <led7_Scan+0x104>)
 80034d0:	801a      	strh	r2, [r3, #0]
		break;
 80034d2:	e01e      	b.n	8003512 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <led7_Scan+0x104>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80034dc:	b29a      	uxth	r2, r3
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <led7_Scan+0x104>)
 80034e0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <led7_Scan+0x104>)
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	f023 0310 	bic.w	r3, r3, #16
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <led7_Scan+0x104>)
 80034ee:	801a      	strh	r2, [r3, #0]
		break;
 80034f0:	e00f      	b.n	8003512 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <led7_Scan+0x104>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <led7_Scan+0x104>)
 80034fe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <led7_Scan+0x104>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <led7_Scan+0x104>)
 800350c:	801a      	strh	r2, [r3, #0]
		break;
 800350e:	e000      	b.n	8003512 <led7_Scan+0xc6>
	default:
		break;
 8003510:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <led7_Scan+0x108>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	425a      	negs	r2, r3
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	f002 0203 	and.w	r2, r2, #3
 8003522:	bf58      	it	pl
 8003524:	4253      	negpl	r3, r2
 8003526:	b29a      	uxth	r2, r3
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <led7_Scan+0x108>)
 800352a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	2140      	movs	r1, #64	; 0x40
 8003530:	480a      	ldr	r0, [pc, #40]	; (800355c <led7_Scan+0x110>)
 8003532:	f003 f947 	bl	80067c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8003536:	2301      	movs	r3, #1
 8003538:	2202      	movs	r2, #2
 800353a:	4905      	ldr	r1, [pc, #20]	; (8003550 <led7_Scan+0x104>)
 800353c:	4808      	ldr	r0, [pc, #32]	; (8003560 <led7_Scan+0x114>)
 800353e:	f004 fe32 	bl	80081a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003542:	2201      	movs	r2, #1
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	4805      	ldr	r0, [pc, #20]	; (800355c <led7_Scan+0x110>)
 8003548:	f003 f93c 	bl	80067c4 <HAL_GPIO_WritePin>
}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000022 	.word	0x20000022
 8003554:	20000110 	.word	0x20000110
 8003558:	20000014 	.word	0x20000014
 800355c:	40021800 	.word	0x40021800
 8003560:	20000668 	.word	0x20000668

08003564 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	db0e      	blt.n	8003596 <led7_SetDigit+0x32>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b09      	cmp	r3, #9
 800357c:	dc0b      	bgt.n	8003596 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <led7_SetDigit+0x40>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	b2d9      	uxtb	r1, r3
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <led7_SetDigit+0x44>)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4413      	add	r3, r2
 8003592:	460a      	mov	r2, r1
 8003594:	701a      	strb	r2, [r3, #0]
	}
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000018 	.word	0x20000018
 80035a8:	20000014 	.word	0x20000014

080035ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035b0:	f001 ffce 	bl	8005550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035b4:	f000 f82c 	bl	8003610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035b8:	f7fe fbbc 	bl	8001d34 <MX_GPIO_Init>
  MX_DMA_Init();
 80035bc:	f7fd fe7c 	bl	80012b8 <MX_DMA_Init>
  MX_ADC1_Init();
 80035c0:	f7fd fcd6 	bl	8000f70 <MX_ADC1_Init>
  MX_FSMC_Init();
 80035c4:	f7fe f904 	bl	80017d0 <MX_FSMC_Init>
  MX_I2C1_Init();
 80035c8:	f7fe fce2 	bl	8001f90 <MX_I2C1_Init>
  MX_SPI1_Init();
 80035cc:	f000 fb44 	bl	8003c58 <MX_SPI1_Init>
  MX_TIM2_Init();
 80035d0:	f000 ffac 	bl	800452c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80035d4:	f001 ff3e 	bl	8005454 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80035d8:	f000 ff58 	bl	800448c <MX_TIM1_Init>
  MX_TIM13_Init();
 80035dc:	f000 fff2 	bl	80045c4 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 80035e0:	f001 ff62 	bl	80054a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80035e4:	f000 f87e 	bl	80036e4 <system_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while (!flag_timer2);
 80035e8:	bf00      	nop
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <main+0x60>)
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0fb      	beq.n	80035ea <main+0x3e>
	  flag_timer2 = 0;
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <main+0x60>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	801a      	strh	r2, [r3, #0]
	  //touch_Scan();
	  button_Scan();
 80035f8:	f7fd fdf2 	bl	80011e0 <button_Scan>

	  input_process();
 80035fc:	f7fd fef6 	bl	80013ec <input_process>
	  fsm_ingame();
 8003600:	f7fe f840 	bl	8001684 <fsm_ingame>

	  test_led();
 8003604:	f000 f8a0 	bl	8003748 <test_led>
	  while (!flag_timer2);
 8003608:	e7ee      	b.n	80035e8 <main+0x3c>
 800360a:	bf00      	nop
 800360c:	2000011a 	.word	0x2000011a

08003610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b094      	sub	sp, #80	; 0x50
 8003614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003616:	f107 0320 	add.w	r3, r7, #32
 800361a:	2230      	movs	r2, #48	; 0x30
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f007 fb4e 	bl	800acc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003624:	f107 030c 	add.w	r3, r7, #12
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <SystemClock_Config+0xcc>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <SystemClock_Config+0xcc>)
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003642:	6413      	str	r3, [r2, #64]	; 0x40
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <SystemClock_Config+0xcc>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003650:	2300      	movs	r3, #0
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <SystemClock_Config+0xd0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <SystemClock_Config+0xd0>)
 800365a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <SystemClock_Config+0xd0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800366c:	2302      	movs	r3, #2
 800366e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003670:	2301      	movs	r3, #1
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003674:	2310      	movs	r3, #16
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003678:	2302      	movs	r3, #2
 800367a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003680:	2308      	movs	r3, #8
 8003682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003684:	23a8      	movs	r3, #168	; 0xa8
 8003686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003688:	2302      	movs	r3, #2
 800368a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800368c:	2304      	movs	r3, #4
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003690:	f107 0320 	add.w	r3, r7, #32
 8003694:	4618      	mov	r0, r3
 8003696:	f004 f889 	bl	80077ac <HAL_RCC_OscConfig>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80036a0:	f000 f878 	bl	8003794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036a4:	230f      	movs	r3, #15
 80036a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036a8:	2302      	movs	r3, #2
 80036aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80036b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	2105      	movs	r1, #5
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 faea 	bl	8007c9c <HAL_RCC_ClockConfig>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80036ce:	f000 f861 	bl	8003794 <Error_Handler>
  }
}
 80036d2:	bf00      	nop
 80036d4:	3750      	adds	r7, #80	; 0x50
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40007000 	.word	0x40007000

080036e4 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
	  timer_init();
 80036e8:	f000 fa14 	bl	8003b14 <timer_init>
	  button_init();
 80036ec:	f7fd fd6c 	bl	80011c8 <button_init>
	  lcd_init();
 80036f0:	f7ff fbe4 	bl	8002ebc <lcd_init>
	  touch_init();
 80036f4:	f001 fe56 	bl	80053a4 <touch_init>
	  led7_init();
 80036f8:	f7ff fe9c 	bl	8003434 <led7_init>
	  button_init();
 80036fc:	f7fd fd64 	bl	80011c8 <button_init>

	  home_lcd();				//hien thi man hinh vua moi dau
 8003700:	f7fe fc74 	bl	8001fec <home_lcd>
	  snake_init();				//khoi tao ran
 8003704:	f000 f84c 	bl	80037a0 <snake_init>
	  //ds3231_init();
	  //uart_init_esp();

	  strcpy(history[0].name, "abc");
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <system_init+0x54>)
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <system_init+0x58>)
 800370c:	6810      	ldr	r0, [r2, #0]
 800370e:	6018      	str	r0, [r3, #0]
	  history[0].score = 1000;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <system_init+0x54>)
 8003712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003716:	815a      	strh	r2, [r3, #10]
	  strcpy(history[1].name, "def");
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <system_init+0x5c>)
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <system_init+0x60>)
 800371c:	6810      	ldr	r0, [r2, #0]
 800371e:	6018      	str	r0, [r3, #0]
	  history[1].score = 124;
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <system_init+0x54>)
 8003722:	227c      	movs	r2, #124	; 0x7c
 8003724:	82da      	strh	r2, [r3, #22]

	  setTimer1(50);
 8003726:	2032      	movs	r0, #50	; 0x32
 8003728:	f000 f9fe 	bl	8003b28 <setTimer1>
	  setTimer2(50);
 800372c:	2032      	movs	r0, #50	; 0x32
 800372e:	f000 fa17 	bl	8003b60 <setTimer2>
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2000050c 	.word	0x2000050c
 800373c:	0800cdb8 	.word	0x0800cdb8
 8003740:	20000518 	.word	0x20000518
 8003744:	0800cdbc 	.word	0x0800cdbc

08003748 <test_led>:

uint8_t counter_led = 0;

void test_led(){
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	if (++counter_led % 20 == 0){
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <test_led+0x40>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <test_led+0x40>)
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <test_led+0x40>)
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <test_led+0x44>)
 800375e:	fba3 1302 	umull	r1, r3, r3, r2
 8003762:	0919      	lsrs	r1, r3, #4
 8003764:	460b      	mov	r3, r1
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <test_led+0x3a>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8003774:	2110      	movs	r1, #16
 8003776:	4806      	ldr	r0, [pc, #24]	; (8003790 <test_led+0x48>)
 8003778:	f003 f83d 	bl	80067f6 <HAL_GPIO_TogglePin>
		counter_led = 0;
 800377c:	4b02      	ldr	r3, [pc, #8]	; (8003788 <test_led+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
	}
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000112 	.word	0x20000112
 800378c:	cccccccd 	.word	0xcccccccd
 8003790:	40021000 	.word	0x40021000

08003794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003798:	b672      	cpsid	i
}
 800379a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800379c:	e7fe      	b.n	800379c <Error_Handler+0x8>
	...

080037a0 <snake_init>:
 *      Author: ADMIN
 */

#include "snake.h"

void snake_init(){
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
	snake[0].x = (POS_X_MAX - POS_X_MIN) / 2;
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <snake_init+0x64>)
 80037a8:	2277      	movs	r2, #119	; 0x77
 80037aa:	601a      	str	r2, [r3, #0]
	snake[0].y = (POS_Y_MAX - POS_Y_MIN) / 2;
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <snake_init+0x64>)
 80037ae:	2263      	movs	r2, #99	; 0x63
 80037b0:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 80037b2:	2301      	movs	r3, #1
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	e00d      	b.n	80037d4 <snake_init+0x34>
		snake[i].x = 0;
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <snake_init+0x64>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2100      	movs	r1, #0
 80037be:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 80037c2:	4a10      	ldr	r2, [pc, #64]	; (8003804 <snake_init+0x64>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	2200      	movs	r2, #0
 80037cc:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3301      	adds	r3, #1
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b63      	cmp	r3, #99	; 0x63
 80037d8:	ddee      	ble.n	80037b8 <snake_init+0x18>
	}
	length = 1;
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <snake_init+0x68>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]
	current_score = 0;
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <snake_init+0x6c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
	counter_time_score = 0;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <snake_init+0x70>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
	counter_time = 60;
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <snake_init+0x74>)
 80037ee:	223c      	movs	r2, #60	; 0x3c
 80037f0:	601a      	str	r2, [r3, #0]
	tempFlag = 0;
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <snake_init+0x78>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	200001ec 	.word	0x200001ec
 8003808:	20000008 	.word	0x20000008
 800380c:	20000004 	.word	0x20000004
 8003810:	200000fc 	.word	0x200000fc
 8003814:	20000100 	.word	0x20000100
 8003818:	20000104 	.word	0x20000104

0800381c <is_collision_food>:

int is_collision_food(struct Point p){
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	463b      	mov	r3, r7
 8003824:	e883 0003 	stmia.w	r3, {r0, r1}
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	dd08      	ble.n	8003840 <is_collision_food+0x24>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2bee      	cmp	r3, #238	; 0xee
 8003832:	dc05      	bgt.n	8003840 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8003834:	687b      	ldr	r3, [r7, #4]
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8003836:	2b00      	cmp	r3, #0
 8003838:	dd02      	ble.n	8003840 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2bc6      	cmp	r3, #198	; 0xc6
 800383e:	dd01      	ble.n	8003844 <is_collision_food+0x28>
		return 1;
 8003840:	2301      	movs	r3, #1
 8003842:	e01c      	b.n	800387e <is_collision_food+0x62>
	}
	for (int i = 0; i < length; i++){
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e013      	b.n	8003872 <is_collision_food+0x56>
		if (p.x == snake[i].x && p.y == snake[i].y)
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	490f      	ldr	r1, [pc, #60]	; (800388c <is_collision_food+0x70>)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8003854:	429a      	cmp	r2, r3
 8003856:	d109      	bne.n	800386c <is_collision_food+0x50>
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	490c      	ldr	r1, [pc, #48]	; (800388c <is_collision_food+0x70>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	d101      	bne.n	800386c <is_collision_food+0x50>
			return 1;
 8003868:	2301      	movs	r3, #1
 800386a:	e008      	b.n	800387e <is_collision_food+0x62>
	for (int i = 0; i < length; i++){
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3301      	adds	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <is_collision_food+0x74>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d3e6      	bcc.n	800384a <is_collision_food+0x2e>
	}
	return 0;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	200001ec 	.word	0x200001ec
 8003890:	20000008 	.word	0x20000008

08003894 <is_collision>:

int is_collision(){
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <is_collision+0x74>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	dd0b      	ble.n	80038ba <is_collision+0x26>
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <is_collision+0x74>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2bee      	cmp	r3, #238	; 0xee
 80038a8:	dc07      	bgt.n	80038ba <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <is_collision+0x74>)
 80038ac:	685b      	ldr	r3, [r3, #4]
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	dd03      	ble.n	80038ba <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <is_collision+0x74>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2bc6      	cmp	r3, #198	; 0xc6
 80038b8:	dd01      	ble.n	80038be <is_collision+0x2a>
		return 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e01e      	b.n	80038fc <is_collision+0x68>
	}
	for (int i = 1; i < length; i++){
 80038be:	2301      	movs	r3, #1
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	e015      	b.n	80038f0 <is_collision+0x5c>
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
 80038c4:	4b10      	ldr	r3, [pc, #64]	; (8003908 <is_collision+0x74>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	490f      	ldr	r1, [pc, #60]	; (8003908 <is_collision+0x74>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d10a      	bne.n	80038ea <is_collision+0x56>
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <is_collision+0x74>)
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	490b      	ldr	r1, [pc, #44]	; (8003908 <is_collision+0x74>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	440b      	add	r3, r1
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d101      	bne.n	80038ea <is_collision+0x56>
			return 1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e008      	b.n	80038fc <is_collision+0x68>
	for (int i = 1; i < length; i++){
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3301      	adds	r3, #1
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <is_collision+0x78>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d3e4      	bcc.n	80038c4 <is_collision+0x30>
	}
	return 0;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	200001ec 	.word	0x200001ec
 800390c:	20000008 	.word	0x20000008

08003910 <is_eat>:

int is_eat(){
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
	if (snake[0].x == food.x && snake[0].y == food.y) return 1;
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <is_eat+0x2c>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <is_eat+0x30>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d107      	bne.n	8003930 <is_eat+0x20>
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <is_eat+0x2c>)
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <is_eat+0x30>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d101      	bne.n	8003930 <is_eat+0x20>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <is_eat+0x22>
	return 0;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	200001ec 	.word	0x200001ec
 8003940:	2000000c 	.word	0x2000000c

08003944 <get_rand>:

int get_rand(int max){
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	return 0 + (int)(rand()*(max - 0 + 1.0)/(1.0 + RAND_MAX));
 800394c:	f007 f9c0 	bl	800acd0 <rand>
 8003950:	4603      	mov	r3, r0
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fdde 	bl	8000514 <__aeabi_i2d>
 8003958:	4604      	mov	r4, r0
 800395a:	460d      	mov	r5, r1
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fc fdd9 	bl	8000514 <__aeabi_i2d>
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <get_rand+0x5c>)
 8003968:	f7fc fc88 	bl	800027c <__adddf3>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4620      	mov	r0, r4
 8003972:	4629      	mov	r1, r5
 8003974:	f7fc fe38 	bl	80005e8 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <get_rand+0x60>)
 8003986:	f7fc ff59 	bl	800083c <__aeabi_ddiv>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	f7fd f8d9 	bl	8000b48 <__aeabi_d2iz>
 8003996:	4603      	mov	r3, r0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bdb0      	pop	{r4, r5, r7, pc}
 80039a0:	3ff00000 	.word	0x3ff00000
 80039a4:	41e00000 	.word	0x41e00000

080039a8 <rand_food>:

void rand_food(){
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
	struct Point p;
	p.x = get_rand(POS_X_MAX);
 80039ae:	20ef      	movs	r0, #239	; 0xef
 80039b0:	f7ff ffc8 	bl	8003944 <get_rand>
 80039b4:	4603      	mov	r3, r0
 80039b6:	603b      	str	r3, [r7, #0]
	p.y = get_rand(POS_Y_MAX);
 80039b8:	20c7      	movs	r0, #199	; 0xc7
 80039ba:	f7ff ffc3 	bl	8003944 <get_rand>
 80039be:	4603      	mov	r3, r0
 80039c0:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 80039c2:	e009      	b.n	80039d8 <rand_food+0x30>
		p.x = get_rand(POS_X_MAX);
 80039c4:	20ef      	movs	r0, #239	; 0xef
 80039c6:	f7ff ffbd 	bl	8003944 <get_rand>
 80039ca:	4603      	mov	r3, r0
 80039cc:	603b      	str	r3, [r7, #0]
		p.y = get_rand(POS_Y_MAX);
 80039ce:	20c7      	movs	r0, #199	; 0xc7
 80039d0:	f7ff ffb8 	bl	8003944 <get_rand>
 80039d4:	4603      	mov	r3, r0
 80039d6:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 80039d8:	463b      	mov	r3, r7
 80039da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039de:	f7ff ff1d 	bl	800381c <is_collision_food>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d0ed      	beq.n	80039c4 <rand_food+0x1c>
	}
	food = p;
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <rand_food+0x60>)
 80039ea:	461a      	mov	r2, r3
 80039ec:	463b      	mov	r3, r7
 80039ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039f2:	e882 0003 	stmia.w	r2, {r0, r1}
	point_food_lcd(food);
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <rand_food+0x60>)
 80039f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039fc:	f7fe fe77 	bl	80026ee <point_food_lcd>
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	2000000c 	.word	0x2000000c

08003a0c <move_snake>:

void move_snake(){
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
	point_clr(snake[length - 1]);
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <move_snake+0xb4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <move_snake+0xb8>)
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a22:	f7fe fe77 	bl	8002714 <point_clr>
	for (int i = length - 1; i > 0; i--){
 8003a26:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <move_snake+0xb4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	e016      	b.n	8003a5e <move_snake+0x52>
		snake[i].x = snake[i-1].x;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <move_snake+0xb8>)
 8003a36:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003a3a:	4922      	ldr	r1, [pc, #136]	; (8003ac4 <move_snake+0xb8>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[i].y = snake[i-1].y;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <move_snake+0xb8>)
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	491d      	ldr	r1, [pc, #116]	; (8003ac4 <move_snake+0xb8>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	605a      	str	r2, [r3, #4]
	for (int i = length - 1; i > 0; i--){
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	dce5      	bgt.n	8003a30 <move_snake+0x24>
	}
	switch (move) {
 8003a64:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <move_snake+0xbc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d822      	bhi.n	8003ab4 <move_snake+0xa8>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <move_snake+0x68>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a91 	.word	0x08003a91
 8003a7c:	08003a9d 	.word	0x08003a9d
 8003a80:	08003aa9 	.word	0x08003aa9
		case RIGHT:
			snake[0].x += 1;
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <move_snake+0xb8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <move_snake+0xb8>)
 8003a8c:	6013      	str	r3, [r2, #0]
			break;
 8003a8e:	e012      	b.n	8003ab6 <move_snake+0xaa>
		case LEFT:
			snake[0].x -= 1;
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <move_snake+0xb8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <move_snake+0xb8>)
 8003a98:	6013      	str	r3, [r2, #0]
			break;
 8003a9a:	e00c      	b.n	8003ab6 <move_snake+0xaa>
		case UP:
			snake[0].y += 1;
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <move_snake+0xb8>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <move_snake+0xb8>)
 8003aa4:	6053      	str	r3, [r2, #4]
			break;
 8003aa6:	e006      	b.n	8003ab6 <move_snake+0xaa>
		case DOWN:
			snake[0].y -= 1;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <move_snake+0xb8>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <move_snake+0xb8>)
 8003ab0:	6053      	str	r3, [r2, #4]
			break;
 8003ab2:	e000      	b.n	8003ab6 <move_snake+0xaa>
		default:
			break;
 8003ab4:	bf00      	nop
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000008 	.word	0x20000008
 8003ac4:	200001ec 	.word	0x200001ec
 8003ac8:	200000f8 	.word	0x200000f8

08003acc <reDraw_snake>:

void reDraw_snake(){
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
	point_head_lcd(snake[0]);
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <reDraw_snake+0x40>)
 8003ad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ad8:	f7fe fd9c 	bl	8002614 <point_head_lcd>
	for (int i = 1; i < length; i++){
 8003adc:	2301      	movs	r3, #1
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	e00a      	b.n	8003af8 <reDraw_snake+0x2c>
		point_snake_lcd(snake[i]);
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <reDraw_snake+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aee:	f7fe fdac 	bl	800264a <point_snake_lcd>
	for (int i = 1; i < length; i++){
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3301      	adds	r3, #1
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <reDraw_snake+0x44>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d3ef      	bcc.n	8003ae2 <reDraw_snake+0x16>
	}
}
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	200001ec 	.word	0x200001ec
 8003b10:	20000008 	.word	0x20000008

08003b14 <timer_init>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void timer_init(){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <timer_init+0x10>)
 8003b1a:	f005 f8f7 	bl	8008d0c <HAL_TIM_Base_Start_IT>
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000750 	.word	0x20000750

08003b28 <setTimer1>:

void setTimer1(uint16_t duration){
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	80fb      	strh	r3, [r7, #6]
	timer1_MUL = duration / TIMER_CYCLE_2;
 8003b32:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <setTimer1+0x2c>)
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	8013      	strh	r3, [r2, #0]
	timer1_counter = timer1_MUL;
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <setTimer1+0x2c>)
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <setTimer1+0x30>)
 8003b3e:	801a      	strh	r2, [r3, #0]
	flag_timer1 = 0;
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <setTimer1+0x34>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	801a      	strh	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000118 	.word	0x20000118
 8003b58:	20000116 	.word	0x20000116
 8003b5c:	20000114 	.word	0x20000114

08003b60 <setTimer2>:

void setTimer2(uint16_t duration){
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration / TIMER_CYCLE_2;
 8003b6a:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <setTimer2+0x2c>)
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <setTimer2+0x2c>)
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <setTimer2+0x30>)
 8003b76:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <setTimer2+0x34>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	801a      	strh	r2, [r3, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	2000011e 	.word	0x2000011e
 8003b90:	2000011c 	.word	0x2000011c
 8003b94:	2000011a 	.word	0x2000011a

08003b98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba8:	d12b      	bne.n	8003c02 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer1_counter > 0){
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d010      	beq.n	8003bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer1_counter--;
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bbc:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0) {
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer1 = 1;
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bd2:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer2_counter > 0){
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_TIM_PeriodElapsedCallback+0x66>
			timer2_counter--;
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003be6:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer2 = 1;
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003bfc:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8003bfe:	f7ff fc25 	bl	800344c <led7_Scan>
	}
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000116 	.word	0x20000116
 8003c10:	20000114 	.word	0x20000114
 8003c14:	20000118 	.word	0x20000118
 8003c18:	2000011c 	.word	0x2000011c
 8003c1c:	2000011a 	.word	0x2000011a
 8003c20:	2000011e 	.word	0x2000011e

08003c24 <delay_us>:

void delay_us (uint16_t us)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <delay_us+0x30>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8003c36:	bf00      	nop
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <delay_us+0x30>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3f9      	bcc.n	8003c38 <delay_us+0x14>
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000708 	.word	0x20000708

08003c58 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <MX_SPI1_Init+0x68>)
 8003c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c62:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c76:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003ca4:	220a      	movs	r2, #10
 8003ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ca8:	4804      	ldr	r0, [pc, #16]	; (8003cbc <MX_SPI1_Init+0x64>)
 8003caa:	f004 f9f3 	bl	8008094 <HAL_SPI_Init>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cb4:	f7ff fd6e 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000668 	.word	0x20000668
 8003cc0:	40013000 	.word	0x40013000

08003cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_MspInit+0x4c>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <HAL_MspInit+0x4c>)
 8003cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_MspInit+0x4c>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_MspInit+0x4c>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <HAL_MspInit+0x4c>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_MspInit+0x4c>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3c      	ldr	r2, [pc, #240]	; (8003e24 <HAL_ADC_MspInit+0x110>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d171      	bne.n	8003e1a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	4a3a      	ldr	r2, [pc, #232]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6453      	str	r3, [r2, #68]	; 0x44
 8003d46:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	4a33      	ldr	r2, [pc, #204]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	6313      	str	r3, [r2, #48]	; 0x30
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_ADC_MspInit+0x114>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003d8a:	2307      	movs	r3, #7
 8003d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4823      	ldr	r0, [pc, #140]	; (8003e2c <HAL_ADC_MspInit+0x118>)
 8003d9e:	f002 fb5d 	bl	800645c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003da2:	2303      	movs	r3, #3
 8003da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003da6:	2303      	movs	r3, #3
 8003da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dae:	f107 0314 	add.w	r3, r7, #20
 8003db2:	4619      	mov	r1, r3
 8003db4:	481e      	ldr	r0, [pc, #120]	; (8003e30 <HAL_ADC_MspInit+0x11c>)
 8003db6:	f002 fb51 	bl	800645c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003dba:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <HAL_ADC_MspInit+0x124>)
 8003dbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003de8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003dfe:	480d      	ldr	r0, [pc, #52]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003e00:	f001 ffb0 	bl	8005d64 <HAL_DMA_Init>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003e0a:	f7ff fcc3 	bl	8003794 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
 8003e14:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <HAL_ADC_MspInit+0x120>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e1a:	bf00      	nop
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40012000 	.word	0x40012000
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020400 	.word	0x40020400
 8003e34:	20000608 	.word	0x20000608
 8003e38:	40026410 	.word	0x40026410

08003e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_I2C_MspInit+0x84>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d12b      	bne.n	8003eb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <HAL_I2C_MspInit+0x88>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <HAL_I2C_MspInit+0x88>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_I2C_MspInit+0x88>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e7a:	23c0      	movs	r3, #192	; 0xc0
 8003e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e7e:	2312      	movs	r3, #18
 8003e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e86:	2303      	movs	r3, #3
 8003e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8e:	f107 0314 	add.w	r3, r7, #20
 8003e92:	4619      	mov	r1, r3
 8003e94:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <HAL_I2C_MspInit+0x8c>)
 8003e96:	f002 fae1 	bl	800645c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_I2C_MspInit+0x88>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <HAL_I2C_MspInit+0x88>)
 8003ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_I2C_MspInit+0x88>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003eb6:	bf00      	nop
 8003eb8:	3728      	adds	r7, #40	; 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40005400 	.word	0x40005400
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020400 	.word	0x40020400

08003ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_SPI_MspInit+0x84>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d12b      	bne.n	8003f46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <HAL_SPI_MspInit+0x88>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_SPI_MspInit+0x88>)
 8003ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003efc:	6453      	str	r3, [r2, #68]	; 0x44
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_SPI_MspInit+0x88>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_SPI_MspInit+0x88>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <HAL_SPI_MspInit+0x88>)
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <HAL_SPI_MspInit+0x88>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003f26:	2338      	movs	r3, #56	; 0x38
 8003f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f32:	2303      	movs	r3, #3
 8003f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f36:	2305      	movs	r3, #5
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4805      	ldr	r0, [pc, #20]	; (8003f58 <HAL_SPI_MspInit+0x8c>)
 8003f42:	f002 fa8b 	bl	800645c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f46:	bf00      	nop
 8003f48:	3728      	adds	r7, #40	; 0x28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40013000 	.word	0x40013000
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40020400 	.word	0x40020400

08003f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <HAL_TIM_Base_MspInit+0x98>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003f8a:	e02e      	b.n	8003fea <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d116      	bne.n	8003fc4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	201c      	movs	r0, #28
 8003fb8:	f001 fe9d 	bl	8005cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fbc:	201c      	movs	r0, #28
 8003fbe:	f001 feb6 	bl	8005d2e <HAL_NVIC_EnableIRQ>
}
 8003fc2:	e012      	b.n	8003fea <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <HAL_TIM_Base_MspInit+0xa0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10d      	bne.n	8003fea <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	4a08      	ldr	r2, [pc, #32]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_TIM_Base_MspInit+0x9c>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
}
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40001c00 	.word	0x40001c00

08004000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	f107 030c 	add.w	r3, r7, #12
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a12      	ldr	r2, [pc, #72]	; (8004068 <HAL_TIM_MspPostInit+0x68>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d11e      	bne.n	8004060 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_TIM_MspPostInit+0x6c>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a10      	ldr	r2, [pc, #64]	; (800406c <HAL_TIM_MspPostInit+0x6c>)
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <HAL_TIM_MspPostInit+0x6c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800403e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004042:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004050:	2309      	movs	r3, #9
 8004052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	4619      	mov	r1, r3
 800405a:	4805      	ldr	r0, [pc, #20]	; (8004070 <HAL_TIM_MspPostInit+0x70>)
 800405c:	f002 f9fe 	bl	800645c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8004060:	bf00      	nop
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40001c00 	.word	0x40001c00
 800406c:	40023800 	.word	0x40023800
 8004070:	40021400 	.word	0x40021400

08004074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08c      	sub	sp, #48	; 0x30
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407c:	f107 031c 	add.w	r3, r7, #28
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a3a      	ldr	r2, [pc, #232]	; (800417c <HAL_UART_MspInit+0x108>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d135      	bne.n	8004102 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	4b39      	ldr	r3, [pc, #228]	; (8004180 <HAL_UART_MspInit+0x10c>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	4a38      	ldr	r2, [pc, #224]	; (8004180 <HAL_UART_MspInit+0x10c>)
 80040a0:	f043 0310 	orr.w	r3, r3, #16
 80040a4:	6453      	str	r3, [r2, #68]	; 0x44
 80040a6:	4b36      	ldr	r3, [pc, #216]	; (8004180 <HAL_UART_MspInit+0x10c>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_UART_MspInit+0x10c>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a31      	ldr	r2, [pc, #196]	; (8004180 <HAL_UART_MspInit+0x10c>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <HAL_UART_MspInit+0x10c>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
 80040d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040dc:	2303      	movs	r3, #3
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040e0:	2307      	movs	r3, #7
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e4:	f107 031c 	add.w	r3, r7, #28
 80040e8:	4619      	mov	r1, r3
 80040ea:	4826      	ldr	r0, [pc, #152]	; (8004184 <HAL_UART_MspInit+0x110>)
 80040ec:	f002 f9b6 	bl	800645c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040f0:	2200      	movs	r2, #0
 80040f2:	2100      	movs	r1, #0
 80040f4:	2025      	movs	r0, #37	; 0x25
 80040f6:	f001 fdfe 	bl	8005cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040fa:	2025      	movs	r0, #37	; 0x25
 80040fc:	f001 fe17 	bl	8005d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004100:	e038      	b.n	8004174 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a20      	ldr	r2, [pc, #128]	; (8004188 <HAL_UART_MspInit+0x114>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d133      	bne.n	8004174 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_UART_MspInit+0x10c>)
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <HAL_UART_MspInit+0x10c>)
 8004116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411a:	6413      	str	r3, [r2, #64]	; 0x40
 800411c:	4b18      	ldr	r3, [pc, #96]	; (8004180 <HAL_UART_MspInit+0x10c>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_UART_MspInit+0x10c>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	4a13      	ldr	r2, [pc, #76]	; (8004180 <HAL_UART_MspInit+0x10c>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6313      	str	r3, [r2, #48]	; 0x30
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_UART_MspInit+0x10c>)
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004144:	230c      	movs	r3, #12
 8004146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004148:	2302      	movs	r3, #2
 800414a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004150:	2303      	movs	r3, #3
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004154:	2307      	movs	r3, #7
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004158:	f107 031c 	add.w	r3, r7, #28
 800415c:	4619      	mov	r1, r3
 800415e:	4809      	ldr	r0, [pc, #36]	; (8004184 <HAL_UART_MspInit+0x110>)
 8004160:	f002 f97c 	bl	800645c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004164:	2200      	movs	r2, #0
 8004166:	2100      	movs	r1, #0
 8004168:	2026      	movs	r0, #38	; 0x26
 800416a:	f001 fdc4 	bl	8005cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800416e:	2026      	movs	r0, #38	; 0x26
 8004170:	f001 fddd 	bl	8005d2e <HAL_NVIC_EnableIRQ>
}
 8004174:	bf00      	nop
 8004176:	3730      	adds	r7, #48	; 0x30
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40011000 	.word	0x40011000
 8004180:	40023800 	.word	0x40023800
 8004184:	40020000 	.word	0x40020000
 8004188:	40004400 	.word	0x40004400

0800418c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <HAL_FSMC_MspInit+0x88>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d131      	bne.n	800420c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_FSMC_MspInit+0x88>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_FSMC_MspInit+0x8c>)
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <HAL_FSMC_MspInit+0x8c>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6393      	str	r3, [r2, #56]	; 0x38
 80041be:	4b16      	ldr	r3, [pc, #88]	; (8004218 <HAL_FSMC_MspInit+0x8c>)
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80041ca:	f64f 7388 	movw	r3, #65416	; 0xff88
 80041ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d0:	2302      	movs	r3, #2
 80041d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d8:	2303      	movs	r3, #3
 80041da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80041dc:	230c      	movs	r3, #12
 80041de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	480d      	ldr	r0, [pc, #52]	; (800421c <HAL_FSMC_MspInit+0x90>)
 80041e6:	f002 f939 	bl	800645c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80041ea:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80041ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f8:	2303      	movs	r3, #3
 80041fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80041fc:	230c      	movs	r3, #12
 80041fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	4619      	mov	r1, r3
 8004204:	4806      	ldr	r0, [pc, #24]	; (8004220 <HAL_FSMC_MspInit+0x94>)
 8004206:	f002 f929 	bl	800645c <HAL_GPIO_Init>
 800420a:	e000      	b.n	800420e <HAL_FSMC_MspInit+0x82>
    return;
 800420c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000120 	.word	0x20000120
 8004218:	40023800 	.word	0x40023800
 800421c:	40021000 	.word	0x40021000
 8004220:	40020c00 	.word	0x40020c00

08004224 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800422c:	f7ff ffae 	bl	800418c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800423c:	e7fe      	b.n	800423c <NMI_Handler+0x4>

0800423e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004242:	e7fe      	b.n	8004242 <HardFault_Handler+0x4>

08004244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004248:	e7fe      	b.n	8004248 <MemManage_Handler+0x4>

0800424a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800424e:	e7fe      	b.n	800424e <BusFault_Handler+0x4>

08004250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004254:	e7fe      	b.n	8004254 <UsageFault_Handler+0x4>

08004256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004256:	b480      	push	{r7}
 8004258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800425a:	bf00      	nop
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004284:	f001 f9b6 	bl	80055f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}

0800428c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004290:	4802      	ldr	r0, [pc, #8]	; (800429c <TIM2_IRQHandler+0x10>)
 8004292:	f004 fe04 	bl	8008e9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000750 	.word	0x20000750

080042a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042a4:	4802      	ldr	r0, [pc, #8]	; (80042b0 <USART1_IRQHandler+0x10>)
 80042a6:	f005 fd3f 	bl	8009d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000798 	.word	0x20000798

080042b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042b8:	4802      	ldr	r0, [pc, #8]	; (80042c4 <USART2_IRQHandler+0x10>)
 80042ba:	f005 fd35 	bl	8009d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200007dc 	.word	0x200007dc

080042c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042cc:	4802      	ldr	r0, [pc, #8]	; (80042d8 <DMA2_Stream0_IRQHandler+0x10>)
 80042ce:	f001 fe89 	bl	8005fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000608 	.word	0x20000608

080042dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
	return 1;
 80042e0:	2301      	movs	r3, #1
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <_kill>:

int _kill(int pid, int sig)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042f6:	f006 fc9f 	bl	800ac38 <__errno>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2216      	movs	r2, #22
 80042fe:	601a      	str	r2, [r3, #0]
	return -1;
 8004300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <_exit>:

void _exit (int status)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004314:	f04f 31ff 	mov.w	r1, #4294967295
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ffe7 	bl	80042ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800431e:	e7fe      	b.n	800431e <_exit+0x12>

08004320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e00a      	b.n	8004348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004332:	f3af 8000 	nop.w
 8004336:	4601      	mov	r1, r0
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	60ba      	str	r2, [r7, #8]
 800433e:	b2ca      	uxtb	r2, r1
 8004340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3301      	adds	r3, #1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	dbf0      	blt.n	8004332 <_read+0x12>
	}

return len;
 8004350:	687b      	ldr	r3, [r7, #4]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e009      	b.n	8004380 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	60ba      	str	r2, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	3301      	adds	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	dbf1      	blt.n	800436c <_write+0x12>
	}
	return len;
 8004388:	687b      	ldr	r3, [r7, #4]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <_close>:

int _close(int file)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
	return -1;
 800439a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043ba:	605a      	str	r2, [r3, #4]
	return 0;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <_isatty>:

int _isatty(int file)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
	return 1;
 80043d2:	2301      	movs	r3, #1
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
	return 0;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <_sbrk+0x5c>)
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <_sbrk+0x60>)
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004410:	4b13      	ldr	r3, [pc, #76]	; (8004460 <_sbrk+0x64>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <_sbrk+0x64>)
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <_sbrk+0x68>)
 800441c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <_sbrk+0x64>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4413      	add	r3, r2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	d207      	bcs.n	800443c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800442c:	f006 fc04 	bl	800ac38 <__errno>
 8004430:	4603      	mov	r3, r0
 8004432:	220c      	movs	r2, #12
 8004434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	e009      	b.n	8004450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <_sbrk+0x64>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <_sbrk+0x64>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	4a05      	ldr	r2, [pc, #20]	; (8004460 <_sbrk+0x64>)
 800444c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20020000 	.word	0x20020000
 800445c:	00000400 	.word	0x00000400
 8004460:	20000124 	.word	0x20000124
 8004464:	20000838 	.word	0x20000838

08004468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <SystemInit+0x20>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	4a05      	ldr	r2, [pc, #20]	; (8004488 <SystemInit+0x20>)
 8004474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004492:	f107 0308 	add.w	r3, r7, #8
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a0:	463b      	mov	r3, r7
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <MX_TIM1_Init+0x98>)
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <MX_TIM1_Init+0x9c>)
 80044ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <MX_TIM1_Init+0x98>)
 80044b0:	2253      	movs	r2, #83	; 0x53
 80044b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <MX_TIM1_Init+0x98>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <MX_TIM1_Init+0x98>)
 80044bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <MX_TIM1_Init+0x98>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044c8:	4b16      	ldr	r3, [pc, #88]	; (8004524 <MX_TIM1_Init+0x98>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ce:	4b15      	ldr	r3, [pc, #84]	; (8004524 <MX_TIM1_Init+0x98>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044d4:	4813      	ldr	r0, [pc, #76]	; (8004524 <MX_TIM1_Init+0x98>)
 80044d6:	f004 fbc9 	bl	8008c6c <HAL_TIM_Base_Init>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80044e0:	f7ff f958 	bl	8003794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044ea:	f107 0308 	add.w	r3, r7, #8
 80044ee:	4619      	mov	r1, r3
 80044f0:	480c      	ldr	r0, [pc, #48]	; (8004524 <MX_TIM1_Init+0x98>)
 80044f2:	f004 fe9f 	bl	8009234 <HAL_TIM_ConfigClockSource>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80044fc:	f7ff f94a 	bl	8003794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004500:	2300      	movs	r3, #0
 8004502:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004504:	2300      	movs	r3, #0
 8004506:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004508:	463b      	mov	r3, r7
 800450a:	4619      	mov	r1, r3
 800450c:	4805      	ldr	r0, [pc, #20]	; (8004524 <MX_TIM1_Init+0x98>)
 800450e:	f005 fa6b 	bl	80099e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004518:	f7ff f93c 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800451c:	bf00      	nop
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000708 	.word	0x20000708
 8004528:	40010000 	.word	0x40010000

0800452c <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	605a      	str	r2, [r3, #4]
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004540:	463b      	mov	r3, r7
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <MX_TIM2_Init+0x94>)
 800454a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800454e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <MX_TIM2_Init+0x94>)
 8004552:	f240 3247 	movw	r2, #839	; 0x347
 8004556:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004558:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <MX_TIM2_Init+0x94>)
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <MX_TIM2_Init+0x94>)
 8004560:	2263      	movs	r2, #99	; 0x63
 8004562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004564:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <MX_TIM2_Init+0x94>)
 8004566:	2200      	movs	r2, #0
 8004568:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <MX_TIM2_Init+0x94>)
 800456c:	2200      	movs	r2, #0
 800456e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004570:	4813      	ldr	r0, [pc, #76]	; (80045c0 <MX_TIM2_Init+0x94>)
 8004572:	f004 fb7b 	bl	8008c6c <HAL_TIM_Base_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800457c:	f7ff f90a 	bl	8003794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004584:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	4619      	mov	r1, r3
 800458c:	480c      	ldr	r0, [pc, #48]	; (80045c0 <MX_TIM2_Init+0x94>)
 800458e:	f004 fe51 	bl	8009234 <HAL_TIM_ConfigClockSource>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004598:	f7ff f8fc 	bl	8003794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800459c:	2300      	movs	r3, #0
 800459e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045a4:	463b      	mov	r3, r7
 80045a6:	4619      	mov	r1, r3
 80045a8:	4805      	ldr	r0, [pc, #20]	; (80045c0 <MX_TIM2_Init+0x94>)
 80045aa:	f005 fa1d 	bl	80099e8 <HAL_TIMEx_MasterConfigSynchronization>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80045b4:	f7ff f8ee 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80045b8:	bf00      	nop
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000750 	.word	0x20000750

080045c4 <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80045ca:	1d3b      	adds	r3, r7, #4
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	611a      	str	r2, [r3, #16]
 80045d8:	615a      	str	r2, [r3, #20]
 80045da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80045dc:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <MX_TIM13_Init+0x94>)
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <MX_TIM13_Init+0x98>)
 80045e0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <MX_TIM13_Init+0x94>)
 80045e4:	f240 3247 	movw	r2, #839	; 0x347
 80045e8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ea:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <MX_TIM13_Init+0x94>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <MX_TIM13_Init+0x94>)
 80045f2:	2263      	movs	r2, #99	; 0x63
 80045f4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <MX_TIM13_Init+0x94>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045fc:	4b16      	ldr	r3, [pc, #88]	; (8004658 <MX_TIM13_Init+0x94>)
 80045fe:	2200      	movs	r2, #0
 8004600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004602:	4815      	ldr	r0, [pc, #84]	; (8004658 <MX_TIM13_Init+0x94>)
 8004604:	f004 fb32 	bl	8008c6c <HAL_TIM_Base_Init>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800460e:	f7ff f8c1 	bl	8003794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004612:	4811      	ldr	r0, [pc, #68]	; (8004658 <MX_TIM13_Init+0x94>)
 8004614:	f004 fbea 	bl	8008dec <HAL_TIM_PWM_Init>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800461e:	f7ff f8b9 	bl	8003794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004622:	2360      	movs	r3, #96	; 0x60
 8004624:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004632:	1d3b      	adds	r3, r7, #4
 8004634:	2200      	movs	r2, #0
 8004636:	4619      	mov	r1, r3
 8004638:	4807      	ldr	r0, [pc, #28]	; (8004658 <MX_TIM13_Init+0x94>)
 800463a:	f004 fd39 	bl	80090b0 <HAL_TIM_PWM_ConfigChannel>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8004644:	f7ff f8a6 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004648:	4803      	ldr	r0, [pc, #12]	; (8004658 <MX_TIM13_Init+0x94>)
 800464a:	f7ff fcd9 	bl	8004000 <HAL_TIM_MspPostInit>

}
 800464e:	bf00      	nop
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200006c0 	.word	0x200006c0
 800465c:	40001c00 	.word	0x40001c00

08004660 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]
 8004672:	e025      	b.n	80046c0 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8004674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	da06      	bge.n	800468a <TP_Write_Byte+0x2a>
 800467c:	2201      	movs	r2, #1
 800467e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004682:	4813      	ldr	r0, [pc, #76]	; (80046d0 <TP_Write_Byte+0x70>)
 8004684:	f002 f89e 	bl	80067c4 <HAL_GPIO_WritePin>
 8004688:	e005      	b.n	8004696 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004690:	480f      	ldr	r0, [pc, #60]	; (80046d0 <TP_Write_Byte+0x70>)
 8004692:	f002 f897 	bl	80067c4 <HAL_GPIO_WritePin>
		num<<=1;
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800469c:	2200      	movs	r2, #0
 800469e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046a2:	480c      	ldr	r0, [pc, #48]	; (80046d4 <TP_Write_Byte+0x74>)
 80046a4:	f002 f88e 	bl	80067c4 <HAL_GPIO_WritePin>
		delay_us(1);
 80046a8:	2001      	movs	r0, #1
 80046aa:	f7ff fabb 	bl	8003c24 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80046ae:	2201      	movs	r2, #1
 80046b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046b4:	4807      	ldr	r0, [pc, #28]	; (80046d4 <TP_Write_Byte+0x74>)
 80046b6:	f002 f885 	bl	80067c4 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	3301      	adds	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b07      	cmp	r3, #7
 80046c4:	d9d6      	bls.n	8004674 <TP_Write_Byte+0x14>
	}
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40020800 	.word	0x40020800
 80046d4:	40021800 	.word	0x40021800

080046d8 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046f0:	482f      	ldr	r0, [pc, #188]	; (80047b0 <TP_Read_AD+0xd8>)
 80046f2:	f002 f867 	bl	80067c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80046f6:	2200      	movs	r2, #0
 80046f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046fc:	482d      	ldr	r0, [pc, #180]	; (80047b4 <TP_Read_AD+0xdc>)
 80046fe:	f002 f861 	bl	80067c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	; 0x80
 8004706:	482a      	ldr	r0, [pc, #168]	; (80047b0 <TP_Read_AD+0xd8>)
 8004708:	f002 f85c 	bl	80067c4 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ffa6 	bl	8004660 <TP_Write_Byte>
	delay_us(6);
 8004714:	2006      	movs	r0, #6
 8004716:	f7ff fa85 	bl	8003c24 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004720:	4823      	ldr	r0, [pc, #140]	; (80047b0 <TP_Read_AD+0xd8>)
 8004722:	f002 f84f 	bl	80067c4 <HAL_GPIO_WritePin>
	delay_us(1);
 8004726:	2001      	movs	r0, #1
 8004728:	f7ff fa7c 	bl	8003c24 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800472c:	2201      	movs	r2, #1
 800472e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004732:	481f      	ldr	r0, [pc, #124]	; (80047b0 <TP_Read_AD+0xd8>)
 8004734:	f002 f846 	bl	80067c4 <HAL_GPIO_WritePin>
	delay_us(1);
 8004738:	2001      	movs	r0, #1
 800473a:	f7ff fa73 	bl	8003c24 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800473e:	2200      	movs	r2, #0
 8004740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004744:	481a      	ldr	r0, [pc, #104]	; (80047b0 <TP_Read_AD+0xd8>)
 8004746:	f002 f83d 	bl	80067c4 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	e01f      	b.n	8004790 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8004750:	89bb      	ldrh	r3, [r7, #12]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004756:	2200      	movs	r2, #0
 8004758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800475c:	4814      	ldr	r0, [pc, #80]	; (80047b0 <TP_Read_AD+0xd8>)
 800475e:	f002 f831 	bl	80067c4 <HAL_GPIO_WritePin>
		delay_us(1);
 8004762:	2001      	movs	r0, #1
 8004764:	f7ff fa5e 	bl	8003c24 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8004768:	2201      	movs	r2, #1
 800476a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800476e:	4810      	ldr	r0, [pc, #64]	; (80047b0 <TP_Read_AD+0xd8>)
 8004770:	f002 f828 	bl	80067c4 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8004774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004778:	480e      	ldr	r0, [pc, #56]	; (80047b4 <TP_Read_AD+0xdc>)
 800477a:	f002 f80b 	bl	8006794 <HAL_GPIO_ReadPin>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <TP_Read_AD+0xb2>
 8004784:	89bb      	ldrh	r3, [r7, #12]
 8004786:	3301      	adds	r3, #1
 8004788:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	3301      	adds	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b0f      	cmp	r3, #15
 8004794:	d9dc      	bls.n	8004750 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8004796:	89bb      	ldrh	r3, [r7, #12]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 800479c:	2201      	movs	r2, #1
 800479e:	2180      	movs	r1, #128	; 0x80
 80047a0:	4803      	ldr	r0, [pc, #12]	; (80047b0 <TP_Read_AD+0xd8>)
 80047a2:	f002 f80f 	bl	80067c4 <HAL_GPIO_WritePin>
	return(Num);
 80047a6:	89bb      	ldrh	r3, [r7, #12]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021800 	.word	0x40021800
 80047b4:	40020800 	.word	0x40020800

080047b8 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b089      	sub	sp, #36	; 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 80047c6:	2300      	movs	r3, #0
 80047c8:	83fb      	strh	r3, [r7, #30]
 80047ca:	e00f      	b.n	80047ec <TP_Read_XOY+0x34>
 80047cc:	8bfc      	ldrh	r4, [r7, #30]
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff81 	bl	80046d8 <TP_Read_AD>
 80047d6:	4603      	mov	r3, r0
 80047d8:	461a      	mov	r2, r3
 80047da:	0063      	lsls	r3, r4, #1
 80047dc:	f107 0120 	add.w	r1, r7, #32
 80047e0:	440b      	add	r3, r1
 80047e2:	f823 2c14 	strh.w	r2, [r3, #-20]
 80047e6:	8bfb      	ldrh	r3, [r7, #30]
 80047e8:	3301      	adds	r3, #1
 80047ea:	83fb      	strh	r3, [r7, #30]
 80047ec:	8bfb      	ldrh	r3, [r7, #30]
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d9ec      	bls.n	80047cc <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	83fb      	strh	r3, [r7, #30]
 80047f6:	e03b      	b.n	8004870 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 80047f8:	8bfb      	ldrh	r3, [r7, #30]
 80047fa:	3301      	adds	r3, #1
 80047fc:	83bb      	strh	r3, [r7, #28]
 80047fe:	e031      	b.n	8004864 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8004800:	8bfb      	ldrh	r3, [r7, #30]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	f107 0220 	add.w	r2, r7, #32
 8004808:	4413      	add	r3, r2
 800480a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800480e:	8bbb      	ldrh	r3, [r7, #28]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	f107 0120 	add.w	r1, r7, #32
 8004816:	440b      	add	r3, r1
 8004818:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800481c:	429a      	cmp	r2, r3
 800481e:	d91e      	bls.n	800485e <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8004820:	8bfb      	ldrh	r3, [r7, #30]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	f107 0220 	add.w	r2, r7, #32
 8004828:	4413      	add	r3, r2
 800482a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800482e:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8004830:	8bbb      	ldrh	r3, [r7, #28]
 8004832:	8bfa      	ldrh	r2, [r7, #30]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	f107 0120 	add.w	r1, r7, #32
 800483a:	440b      	add	r3, r1
 800483c:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8004840:	0053      	lsls	r3, r2, #1
 8004842:	f107 0220 	add.w	r2, r7, #32
 8004846:	4413      	add	r3, r2
 8004848:	460a      	mov	r2, r1
 800484a:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 800484e:	8bbb      	ldrh	r3, [r7, #28]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	f107 0220 	add.w	r2, r7, #32
 8004856:	4413      	add	r3, r2
 8004858:	8b3a      	ldrh	r2, [r7, #24]
 800485a:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 800485e:	8bbb      	ldrh	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	83bb      	strh	r3, [r7, #28]
 8004864:	8bbb      	ldrh	r3, [r7, #28]
 8004866:	2b04      	cmp	r3, #4
 8004868:	d9ca      	bls.n	8004800 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 800486a:	8bfb      	ldrh	r3, [r7, #30]
 800486c:	3301      	adds	r3, #1
 800486e:	83fb      	strh	r3, [r7, #30]
 8004870:	8bfb      	ldrh	r3, [r7, #30]
 8004872:	2b03      	cmp	r3, #3
 8004874:	d9c0      	bls.n	80047f8 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8004876:	2300      	movs	r3, #0
 8004878:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 800487a:	2301      	movs	r3, #1
 800487c:	83fb      	strh	r3, [r7, #30]
 800487e:	e00c      	b.n	800489a <TP_Read_XOY+0xe2>
 8004880:	8bfb      	ldrh	r3, [r7, #30]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	f107 0220 	add.w	r2, r7, #32
 8004888:	4413      	add	r3, r2
 800488a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800488e:	8b7b      	ldrh	r3, [r7, #26]
 8004890:	4413      	add	r3, r2
 8004892:	837b      	strh	r3, [r7, #26]
 8004894:	8bfb      	ldrh	r3, [r7, #30]
 8004896:	3301      	adds	r3, #1
 8004898:	83fb      	strh	r3, [r7, #30]
 800489a:	8bfb      	ldrh	r3, [r7, #30]
 800489c:	2b03      	cmp	r3, #3
 800489e:	d9ef      	bls.n	8004880 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 80048a0:	8b7b      	ldrh	r3, [r7, #26]
 80048a2:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <TP_Read_XOY+0x100>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	833b      	strh	r3, [r7, #24]
	return temp;
 80048ac:	8b3b      	ldrh	r3, [r7, #24]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3724      	adds	r7, #36	; 0x24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd90      	pop	{r4, r7, pc}
 80048b6:	bf00      	nop
 80048b8:	aaaaaaab 	.word	0xaaaaaaab

080048bc <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <TP_Read_XY+0x3c>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff ff74 	bl	80047b8 <TP_Read_XOY>
 80048d0:	4603      	mov	r3, r0
 80048d2:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 80048d4:	4b09      	ldr	r3, [pc, #36]	; (80048fc <TP_Read_XY+0x40>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ff6d 	bl	80047b8 <TP_Read_XOY>
 80048de:	4603      	mov	r3, r0
 80048e0:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	89fa      	ldrh	r2, [r7, #14]
 80048e6:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	89ba      	ldrh	r2, [r7, #12]
 80048ec:	801a      	strh	r2, [r3, #0]
	return 1;
 80048ee:	2301      	movs	r3, #1
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	2000005c 	.word	0x2000005c
 80048fc:	2000005d 	.word	0x2000005d

08004900 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 800490a:	f107 0212 	add.w	r2, r7, #18
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ffd1 	bl	80048bc <TP_Read_XY>
 800491a:	4603      	mov	r3, r0
 800491c:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <TP_Read_XY2+0x28>
 8004924:	2300      	movs	r3, #0
 8004926:	e049      	b.n	80049bc <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8004928:	f107 020e 	add.w	r2, r7, #14
 800492c:	f107 0310 	add.w	r3, r7, #16
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ffc2 	bl	80048bc <TP_Read_XY>
 8004938:	4603      	mov	r3, r0
 800493a:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <TP_Read_XY2+0x46>
 8004942:	2300      	movs	r3, #0
 8004944:	e03a      	b.n	80049bc <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8004946:	8a3a      	ldrh	r2, [r7, #16]
 8004948:	8abb      	ldrh	r3, [r7, #20]
 800494a:	429a      	cmp	r2, r3
 800494c:	d804      	bhi.n	8004958 <TP_Read_XY2+0x58>
 800494e:	8a3b      	ldrh	r3, [r7, #16]
 8004950:	3363      	adds	r3, #99	; 0x63
 8004952:	8aba      	ldrh	r2, [r7, #20]
 8004954:	4293      	cmp	r3, r2
 8004956:	da08      	bge.n	800496a <TP_Read_XY2+0x6a>
 8004958:	8aba      	ldrh	r2, [r7, #20]
 800495a:	8a3b      	ldrh	r3, [r7, #16]
 800495c:	429a      	cmp	r2, r3
 800495e:	d82c      	bhi.n	80049ba <TP_Read_XY2+0xba>
 8004960:	8abb      	ldrh	r3, [r7, #20]
 8004962:	3363      	adds	r3, #99	; 0x63
 8004964:	8a3a      	ldrh	r2, [r7, #16]
 8004966:	4293      	cmp	r3, r2
 8004968:	db27      	blt.n	80049ba <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800496a:	89fa      	ldrh	r2, [r7, #14]
 800496c:	8a7b      	ldrh	r3, [r7, #18]
 800496e:	429a      	cmp	r2, r3
 8004970:	d804      	bhi.n	800497c <TP_Read_XY2+0x7c>
 8004972:	89fb      	ldrh	r3, [r7, #14]
 8004974:	3363      	adds	r3, #99	; 0x63
 8004976:	8a7a      	ldrh	r2, [r7, #18]
 8004978:	4293      	cmp	r3, r2
 800497a:	da08      	bge.n	800498e <TP_Read_XY2+0x8e>
 800497c:	8a7a      	ldrh	r2, [r7, #18]
 800497e:	89fb      	ldrh	r3, [r7, #14]
 8004980:	429a      	cmp	r2, r3
 8004982:	d81a      	bhi.n	80049ba <TP_Read_XY2+0xba>
 8004984:	8a7b      	ldrh	r3, [r7, #18]
 8004986:	3363      	adds	r3, #99	; 0x63
 8004988:	89fa      	ldrh	r2, [r7, #14]
 800498a:	4293      	cmp	r3, r2
 800498c:	db15      	blt.n	80049ba <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 800498e:	8abb      	ldrh	r3, [r7, #20]
 8004990:	461a      	mov	r2, r3
 8004992:	8a3b      	ldrh	r3, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	0fda      	lsrs	r2, r3, #31
 8004998:	4413      	add	r3, r2
 800499a:	105b      	asrs	r3, r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 80049a2:	8a7b      	ldrh	r3, [r7, #18]
 80049a4:	461a      	mov	r2, r3
 80049a6:	89fb      	ldrh	r3, [r7, #14]
 80049a8:	4413      	add	r3, r2
 80049aa:	0fda      	lsrs	r2, r3, #31
 80049ac:	4413      	add	r3, r2
 80049ae:	105b      	asrs	r3, r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	801a      	strh	r2, [r3, #0]
		return 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <TP_Read_XY2+0xbc>
	}else return 0;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	4603      	mov	r3, r0
 80049cc:	80fb      	strh	r3, [r7, #6]
 80049ce:	460b      	mov	r3, r1
 80049d0:	80bb      	strh	r3, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	3b0c      	subs	r3, #12
 80049da:	b298      	uxth	r0, r3
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	330d      	adds	r3, #13
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	88bc      	ldrh	r4, [r7, #4]
 80049e4:	88b9      	ldrh	r1, [r7, #4]
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4623      	mov	r3, r4
 80049ec:	f7fd ffc7 	bl	800297e <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 80049f0:	88bb      	ldrh	r3, [r7, #4]
 80049f2:	3b0c      	subs	r3, #12
 80049f4:	b299      	uxth	r1, r3
 80049f6:	88bb      	ldrh	r3, [r7, #4]
 80049f8:	330d      	adds	r3, #13
 80049fa:	b29c      	uxth	r4, r3
 80049fc:	88fa      	ldrh	r2, [r7, #6]
 80049fe:	88f8      	ldrh	r0, [r7, #6]
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4623      	mov	r3, r4
 8004a06:	f7fd ffba 	bl	800297e <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b298      	uxth	r0, r3
 8004a10:	88bb      	ldrh	r3, [r7, #4]
 8004a12:	3301      	adds	r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f7fd ff99 	bl	8002950 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b298      	uxth	r0, r3
 8004a24:	88bb      	ldrh	r3, [r7, #4]
 8004a26:	3301      	adds	r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f7fd ff8f 	bl	8002950 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	3301      	adds	r3, #1
 8004a36:	b298      	uxth	r0, r3
 8004a38:	88bb      	ldrh	r3, [r7, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	4619      	mov	r1, r3
 8004a42:	f7fd ff85 	bl	8002950 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b298      	uxth	r0, r3
 8004a4c:	88bb      	ldrh	r3, [r7, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	4619      	mov	r1, r3
 8004a56:	f7fd ff7b 	bl	8002950 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8004a5a:	88f8      	ldrh	r0, [r7, #6]
 8004a5c:	88b9      	ldrh	r1, [r7, #4]
 8004a5e:	887a      	ldrh	r2, [r7, #2]
 8004a60:	2300      	movs	r3, #0
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	2306      	movs	r3, #6
 8004a66:	f7fe fc14 	bl	8003292 <lcd_DrawCircle>
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd90      	pop	{r4, r7, pc}
	...

08004a74 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8004a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a82:	4843      	ldr	r0, [pc, #268]	; (8004b90 <TP_Scan+0x11c>)
 8004a84:	f001 fe86 	bl	8006794 <HAL_GPIO_ReadPin>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d157      	bne.n	8004b3e <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <TP_Scan+0x2a>
 8004a94:	493f      	ldr	r1, [pc, #252]	; (8004b94 <TP_Scan+0x120>)
 8004a96:	4840      	ldr	r0, [pc, #256]	; (8004b98 <TP_Scan+0x124>)
 8004a98:	f7ff ff32 	bl	8004900 <TP_Read_XY2>
 8004a9c:	e03c      	b.n	8004b18 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8004a9e:	493d      	ldr	r1, [pc, #244]	; (8004b94 <TP_Scan+0x120>)
 8004aa0:	483d      	ldr	r0, [pc, #244]	; (8004b98 <TP_Scan+0x124>)
 8004aa2:	f7ff ff2d 	bl	8004900 <TP_Read_XY2>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d035      	beq.n	8004b18 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8004aac:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <TP_Scan+0x128>)
 8004aae:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004ab2:	4b3a      	ldr	r3, [pc, #232]	; (8004b9c <TP_Scan+0x128>)
 8004ab4:	899b      	ldrh	r3, [r3, #12]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ac2:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <TP_Scan+0x128>)
 8004ac4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad8:	ee17 3a90 	vmov	r3, s15
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <TP_Scan+0x128>)
 8004ae0:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8004ae2:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <TP_Scan+0x128>)
 8004ae4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004ae8:	4b2c      	ldr	r3, [pc, #176]	; (8004b9c <TP_Scan+0x128>)
 8004aea:	8adb      	ldrh	r3, [r3, #22]
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <TP_Scan+0x128>)
 8004afa:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0e:	ee17 3a90 	vmov	r3, s15
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	4b21      	ldr	r3, [pc, #132]	; (8004b9c <TP_Scan+0x128>)
 8004b16:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <TP_Scan+0x128>)
 8004b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b1e:	b25b      	sxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db2a      	blt.n	8004b7a <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8004b24:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <TP_Scan+0x128>)
 8004b26:	22c0      	movs	r2, #192	; 0xc0
 8004b28:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <TP_Scan+0x128>)
 8004b2e:	899a      	ldrh	r2, [r3, #12]
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <TP_Scan+0x128>)
 8004b32:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <TP_Scan+0x128>)
 8004b36:	8ada      	ldrh	r2, [r3, #22]
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <TP_Scan+0x128>)
 8004b3a:	83da      	strh	r2, [r3, #30]
 8004b3c:	e01d      	b.n	8004b7a <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8004b3e:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <TP_Scan+0x128>)
 8004b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da09      	bge.n	8004b5e <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <TP_Scan+0x128>)
 8004b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <TP_Scan+0x128>)
 8004b58:	f883 2020 	strb.w	r2, [r3, #32]
 8004b5c:	e00d      	b.n	8004b7a <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <TP_Scan+0x128>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8004b64:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <TP_Scan+0x128>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <TP_Scan+0x128>)
 8004b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b70:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <TP_Scan+0x128>)
 8004b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b78:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <TP_Scan+0x128>)
 8004b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b84:	b2db      	uxtb	r3, r3
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40020800 	.word	0x40020800
 8004b94:	2000003e 	.word	0x2000003e
 8004b98:	20000034 	.word	0x20000034
 8004b9c:	20000028 	.word	0x20000028

08004ba0 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004ba4:	220e      	movs	r2, #14
 8004ba6:	4905      	ldr	r1, [pc, #20]	; (8004bbc <TP_Save_Adjdata+0x1c>)
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7fc faed 	bl	8001188 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	200e      	movs	r0, #14
 8004bb2:	f7fc fa89 	bl	80010c8 <at24c_WriteOneByte>
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	2000004c 	.word	0x2000004c

08004bc0 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8004bca:	200e      	movs	r0, #14
 8004bcc:	f7fc fa60 	bl	8001090 <at24c_ReadOneByte>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004bda:	220e      	movs	r2, #14
 8004bdc:	4905      	ldr	r1, [pc, #20]	; (8004bf4 <TP_Get_Adjdata+0x34>)
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7fc fab3 	bl	800114a <at24c_Read>
		return 1;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	2000004c 	.word	0x2000004c

08004bf8 <touch_Adjust>:


void touch_Adjust(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	; 0x38
 8004bfc:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8004c0a:	4b61      	ldr	r3, [pc, #388]	; (8004d90 <touch_Adjust+0x198>)
 8004c0c:	881a      	ldrh	r2, [r3, #0]
 8004c0e:	4b60      	ldr	r3, [pc, #384]	; (8004d90 <touch_Adjust+0x198>)
 8004c10:	885b      	ldrh	r3, [r3, #2]
 8004c12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c16:	9100      	str	r1, [sp, #0]
 8004c18:	2100      	movs	r1, #0
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f7fd fe62 	bl	80028e4 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8004c20:	2300      	movs	r3, #0
 8004c22:	9302      	str	r3, [sp, #8]
 8004c24:	2310      	movs	r3, #16
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c32:	4a58      	ldr	r2, [pc, #352]	; (8004d94 <touch_Adjust+0x19c>)
 8004c34:	2128      	movs	r1, #40	; 0x28
 8004c36:	2005      	movs	r0, #5
 8004c38:	f7fe fb98 	bl	800336c <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	2310      	movs	r3, #16
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c4e:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <touch_Adjust+0x1a0>)
 8004c50:	2141      	movs	r1, #65	; 0x41
 8004c52:	2005      	movs	r0, #5
 8004c54:	f7fe fb8a 	bl	800336c <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9302      	str	r3, [sp, #8]
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c6a:	4a4c      	ldr	r2, [pc, #304]	; (8004d9c <touch_Adjust+0x1a4>)
 8004c6c:	215a      	movs	r1, #90	; 0x5a
 8004c6e:	2005      	movs	r0, #5
 8004c70:	f7fe fb7c 	bl	800336c <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8004c74:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c78:	2114      	movs	r1, #20
 8004c7a:	2014      	movs	r0, #20
 8004c7c:	f7ff fea2 	bl	80049c4 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8004c80:	4b47      	ldr	r3, [pc, #284]	; (8004da0 <touch_Adjust+0x1a8>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8004c88:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <touch_Adjust+0x1a8>)
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8004c90:	2032      	movs	r0, #50	; 0x32
 8004c92:	f000 fccf 	bl	8005634 <HAL_Delay>
		tp_dev.scan(1);
 8004c96:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <touch_Adjust+0x1a8>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8004c9e:	4b40      	ldr	r3, [pc, #256]	; (8004da0 <touch_Adjust+0x1a8>)
 8004ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	f040 835e 	bne.w	800536a <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8004cae:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <touch_Adjust+0x1a8>)
 8004cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <touch_Adjust+0x1a8>)
 8004cbc:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8004cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cc4:	4a36      	ldr	r2, [pc, #216]	; (8004da0 <touch_Adjust+0x1a8>)
 8004cc6:	8992      	ldrh	r2, [r2, #12]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004cce:	440b      	add	r3, r1
 8004cd0:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8004cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd8:	4a31      	ldr	r2, [pc, #196]	; (8004da0 <touch_Adjust+0x1a8>)
 8004cda:	8ad2      	ldrh	r2, [r2, #22]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8004ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cec:	3301      	adds	r3, #1
 8004cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8004cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d8c9      	bhi.n	8004c90 <touch_Adjust+0x98>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <touch_Adjust+0x10c>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d37 	.word	0x08004d37
 8004d0c:	08004d61 	.word	0x08004d61
 8004d10:	08004da5 	.word	0x08004da5
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8004d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d18:	2114      	movs	r1, #20
 8004d1a:	2014      	movs	r0, #20
 8004d1c:	f7ff fe52 	bl	80049c4 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <touch_Adjust+0x198>)
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	3b14      	subs	r3, #20
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d2c:	2114      	movs	r1, #20
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fe48 	bl	80049c4 <TP_Drow_Touch_Point>
					break;
 8004d34:	e31a      	b.n	800536c <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <touch_Adjust+0x198>)
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	3b14      	subs	r3, #20
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d42:	2114      	movs	r1, #20
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fe3d 	bl	80049c4 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <touch_Adjust+0x198>)
 8004d4c:	885b      	ldrh	r3, [r3, #2]
 8004d4e:	3b14      	subs	r3, #20
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d56:	4619      	mov	r1, r3
 8004d58:	2014      	movs	r0, #20
 8004d5a:	f7ff fe33 	bl	80049c4 <TP_Drow_Touch_Point>
					break;
 8004d5e:	e305      	b.n	800536c <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <touch_Adjust+0x198>)
 8004d62:	885b      	ldrh	r3, [r3, #2]
 8004d64:	3b14      	subs	r3, #20
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	2014      	movs	r0, #20
 8004d70:	f7ff fe28 	bl	80049c4 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <touch_Adjust+0x198>)
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	3b14      	subs	r3, #20
 8004d7a:	b298      	uxth	r0, r3
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <touch_Adjust+0x198>)
 8004d7e:	885b      	ldrh	r3, [r3, #2]
 8004d80:	3b14      	subs	r3, #20
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f7ff fe1b 	bl	80049c4 <TP_Drow_Touch_Point>
					break;
 8004d8e:	e2ed      	b.n	800536c <touch_Adjust+0x774>
 8004d90:	200005cc 	.word	0x200005cc
 8004d94:	0800cdc0 	.word	0x0800cdc0
 8004d98:	0800cddc 	.word	0x0800cddc
 8004d9c:	0800cdf4 	.word	0x0800cdf4
 8004da0:	20000028 	.word	0x20000028
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8004da4:	883b      	ldrh	r3, [r7, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	88bb      	ldrh	r3, [r7, #4]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bfb8      	it	lt
 8004db0:	425b      	neglt	r3, r3
 8004db2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8004db4:	887b      	ldrh	r3, [r7, #2]
 8004db6:	461a      	mov	r2, r3
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bfb8      	it	lt
 8004dc0:	425b      	neglt	r3, r3
 8004dc2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	fb03 f303 	mul.w	r3, r3, r3
 8004dca:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	fb03 f303 	mul.w	r3, r3, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb fb8a 	bl	80004f4 <__aeabi_ui2d>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	ec43 2b10 	vmov	d0, r2, r3
 8004de8:	f007 f864 	bl	800beb4 <sqrt>
 8004dec:	ec53 2b10 	vmov	r2, r3, d0
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	f7fb fed0 	bl	8000b98 <__aeabi_d2uiz>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8004dfc:	893b      	ldrh	r3, [r7, #8]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	89bb      	ldrh	r3, [r7, #12]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bfb8      	it	lt
 8004e08:	425b      	neglt	r3, r3
 8004e0a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8004e0c:	897b      	ldrh	r3, [r7, #10]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	89fb      	ldrh	r3, [r7, #14]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bfb8      	it	lt
 8004e18:	425b      	neglt	r3, r3
 8004e1a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	fb03 f303 	mul.w	r3, r3, r3
 8004e22:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	fb03 f303 	mul.w	r3, r3, r3
 8004e2a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004e2c:	6a3a      	ldr	r2, [r7, #32]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb fb5e 	bl	80004f4 <__aeabi_ui2d>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	ec43 2b10 	vmov	d0, r2, r3
 8004e40:	f007 f838 	bl	800beb4 <sqrt>
 8004e44:	ec53 2b10 	vmov	r2, r3, d0
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f7fb fea4 	bl	8000b98 <__aeabi_d2uiz>
 8004e50:	4603      	mov	r3, r0
 8004e52:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e5e:	8b3b      	ldrh	r3, [r7, #24]
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e6c:	ee16 0a90 	vmov	r0, s13
 8004e70:	f7fb fb62 	bl	8000538 <__aeabi_f2d>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8004e7c:	a384      	add	r3, pc, #528	; (adr r3, 8005090 <touch_Adjust+0x498>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e86:	f7fb fe21 	bl	8000acc <__aeabi_dcmplt>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10f      	bne.n	8004eb0 <touch_Adjust+0x2b8>
 8004e90:	a381      	add	r3, pc, #516	; (adr r3, 8005098 <touch_Adjust+0x4a0>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e9a:	f7fb fe35 	bl	8000b08 <__aeabi_dcmpgt>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <touch_Adjust+0x2b8>
 8004ea4:	8b7b      	ldrh	r3, [r7, #26]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <touch_Adjust+0x2b8>
 8004eaa:	8b3b      	ldrh	r3, [r7, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d136      	bne.n	8004f1e <touch_Adjust+0x326>
					{
						cnt=0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004eb6:	4b7a      	ldr	r3, [pc, #488]	; (80050a0 <touch_Adjust+0x4a8>)
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	3b14      	subs	r3, #20
 8004ebc:	b298      	uxth	r0, r3
 8004ebe:	4b78      	ldr	r3, [pc, #480]	; (80050a0 <touch_Adjust+0x4a8>)
 8004ec0:	885b      	ldrh	r3, [r3, #2]
 8004ec2:	3b14      	subs	r3, #20
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f7ff fd7a 	bl	80049c4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004ed0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004ed4:	2114      	movs	r1, #20
 8004ed6:	2014      	movs	r0, #20
 8004ed8:	f7ff fd74 	bl	80049c4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004edc:	2300      	movs	r3, #0
 8004ede:	9302      	str	r3, [sp, #8]
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eee:	4a6d      	ldr	r2, [pc, #436]	; (80050a4 <touch_Adjust+0x4ac>)
 8004ef0:	2128      	movs	r1, #40	; 0x28
 8004ef2:	2005      	movs	r0, #5
 8004ef4:	f7fe fa3a 	bl	800336c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	2310      	movs	r3, #16
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f0a:	4a67      	ldr	r2, [pc, #412]	; (80050a8 <touch_Adjust+0x4b0>)
 8004f0c:	213c      	movs	r1, #60	; 0x3c
 8004f0e:	2005      	movs	r0, #5
 8004f10:	f7fe fa2c 	bl	800336c <lcd_ShowStr>
						HAL_Delay(1000);
 8004f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f18:	f000 fb8c 	bl	8005634 <HAL_Delay>
 						continue;
 8004f1c:	e226      	b.n	800536c <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8004f1e:	883b      	ldrh	r3, [r7, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	893b      	ldrh	r3, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfb8      	it	lt
 8004f2a:	425b      	neglt	r3, r3
 8004f2c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8004f2e:	887b      	ldrh	r3, [r7, #2]
 8004f30:	461a      	mov	r2, r3
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bfb8      	it	lt
 8004f3a:	425b      	neglt	r3, r3
 8004f3c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	fb03 f303 	mul.w	r3, r3, r3
 8004f44:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	fb03 f303 	mul.w	r3, r3, r3
 8004f4c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004f4e:	6a3a      	ldr	r2, [r7, #32]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb facd 	bl	80004f4 <__aeabi_ui2d>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	ec43 2b10 	vmov	d0, r2, r3
 8004f62:	f006 ffa7 	bl	800beb4 <sqrt>
 8004f66:	ec53 2b10 	vmov	r2, r3, d0
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f7fb fe13 	bl	8000b98 <__aeabi_d2uiz>
 8004f72:	4603      	mov	r3, r0
 8004f74:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8004f76:	88bb      	ldrh	r3, [r7, #4]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	89bb      	ldrh	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfb8      	it	lt
 8004f82:	425b      	neglt	r3, r3
 8004f84:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	89fb      	ldrh	r3, [r7, #14]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bfb8      	it	lt
 8004f92:	425b      	neglt	r3, r3
 8004f94:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	fb03 f303 	mul.w	r3, r3, r3
 8004f9c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fb03 f303 	mul.w	r3, r3, r3
 8004fa4:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fb faa1 	bl	80004f4 <__aeabi_ui2d>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	ec43 2b10 	vmov	d0, r2, r3
 8004fba:	f006 ff7b 	bl	800beb4 <sqrt>
 8004fbe:	ec53 2b10 	vmov	r2, r3, d0
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	f7fb fde7 	bl	8000b98 <__aeabi_d2uiz>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004fce:	8b7b      	ldrh	r3, [r7, #26]
 8004fd0:	ee07 3a90 	vmov	s15, r3
 8004fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fd8:	8b3b      	ldrh	r3, [r7, #24]
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fe2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004fe6:	ee16 0a90 	vmov	r0, s13
 8004fea:	f7fb faa5 	bl	8000538 <__aeabi_f2d>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8004ff6:	a326      	add	r3, pc, #152	; (adr r3, 8005090 <touch_Adjust+0x498>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005000:	f7fb fd64 	bl	8000acc <__aeabi_dcmplt>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <touch_Adjust+0x426>
 800500a:	a323      	add	r3, pc, #140	; (adr r3, 8005098 <touch_Adjust+0x4a0>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005014:	f7fb fd78 	bl	8000b08 <__aeabi_dcmpgt>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d046      	beq.n	80050ac <touch_Adjust+0x4b4>
					{
						cnt=0;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005024:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <touch_Adjust+0x4a8>)
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	3b14      	subs	r3, #20
 800502a:	b298      	uxth	r0, r3
 800502c:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <touch_Adjust+0x4a8>)
 800502e:	885b      	ldrh	r3, [r3, #2]
 8005030:	3b14      	subs	r3, #20
 8005032:	b29b      	uxth	r3, r3
 8005034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005038:	4619      	mov	r1, r3
 800503a:	f7ff fcc3 	bl	80049c4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800503e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005042:	2114      	movs	r1, #20
 8005044:	2014      	movs	r0, #20
 8005046:	f7ff fcbd 	bl	80049c4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800504a:	2300      	movs	r3, #0
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	2310      	movs	r3, #16
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800505c:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <touch_Adjust+0x4ac>)
 800505e:	2128      	movs	r1, #40	; 0x28
 8005060:	2005      	movs	r0, #5
 8005062:	f7fe f983 	bl	800336c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005066:	2300      	movs	r3, #0
 8005068:	9302      	str	r3, [sp, #8]
 800506a:	2310      	movs	r3, #16
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005078:	4a0b      	ldr	r2, [pc, #44]	; (80050a8 <touch_Adjust+0x4b0>)
 800507a:	213c      	movs	r1, #60	; 0x3c
 800507c:	2005      	movs	r0, #5
 800507e:	f7fe f975 	bl	800336c <lcd_ShowStr>
						HAL_Delay(1000);
 8005082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005086:	f000 fad5 	bl	8005634 <HAL_Delay>
						continue;
 800508a:	e16f      	b.n	800536c <touch_Adjust+0x774>
 800508c:	f3af 8000 	nop.w
 8005090:	66666666 	.word	0x66666666
 8005094:	3fee6666 	.word	0x3fee6666
 8005098:	cccccccd 	.word	0xcccccccd
 800509c:	3ff0cccc 	.word	0x3ff0cccc
 80050a0:	200005cc 	.word	0x200005cc
 80050a4:	0800ce08 	.word	0x0800ce08
 80050a8:	0800ce28 	.word	0x0800ce28
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 80050ac:	88bb      	ldrh	r3, [r7, #4]
 80050ae:	461a      	mov	r2, r3
 80050b0:	893b      	ldrh	r3, [r7, #8]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bfb8      	it	lt
 80050b8:	425b      	neglt	r3, r3
 80050ba:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	461a      	mov	r2, r3
 80050c0:	897b      	ldrh	r3, [r7, #10]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bfb8      	it	lt
 80050c8:	425b      	neglt	r3, r3
 80050ca:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	fb03 f303 	mul.w	r3, r3, r3
 80050d2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	fb03 f303 	mul.w	r3, r3, r3
 80050da:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fb fa06 	bl	80004f4 <__aeabi_ui2d>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	ec43 2b10 	vmov	d0, r2, r3
 80050f0:	f006 fee0 	bl	800beb4 <sqrt>
 80050f4:	ec53 2b10 	vmov	r2, r3, d0
 80050f8:	4610      	mov	r0, r2
 80050fa:	4619      	mov	r1, r3
 80050fc:	f7fb fd4c 	bl	8000b98 <__aeabi_d2uiz>
 8005100:	4603      	mov	r3, r0
 8005102:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8005104:	883b      	ldrh	r3, [r7, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	89bb      	ldrh	r3, [r7, #12]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfb8      	it	lt
 8005110:	425b      	neglt	r3, r3
 8005112:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	461a      	mov	r2, r3
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	bfb8      	it	lt
 8005120:	425b      	neglt	r3, r3
 8005122:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	fb03 f303 	mul.w	r3, r3, r3
 800512a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	fb03 f303 	mul.w	r3, r3, r3
 8005132:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005134:	6a3a      	ldr	r2, [r7, #32]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f7fb f9da 	bl	80004f4 <__aeabi_ui2d>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	ec43 2b10 	vmov	d0, r2, r3
 8005148:	f006 feb4 	bl	800beb4 <sqrt>
 800514c:	ec53 2b10 	vmov	r2, r3, d0
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	f7fb fd20 	bl	8000b98 <__aeabi_d2uiz>
 8005158:	4603      	mov	r3, r0
 800515a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800515c:	8b7b      	ldrh	r3, [r7, #26]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005166:	8b3b      	ldrh	r3, [r7, #24]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005170:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005174:	ee16 0a90 	vmov	r0, s13
 8005178:	f7fb f9de 	bl	8000538 <__aeabi_f2d>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005184:	a383      	add	r3, pc, #524	; (adr r3, 8005394 <touch_Adjust+0x79c>)
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800518e:	f7fb fc9d 	bl	8000acc <__aeabi_dcmplt>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <touch_Adjust+0x5b4>
 8005198:	a380      	add	r3, pc, #512	; (adr r3, 800539c <touch_Adjust+0x7a4>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051a2:	f7fb fcb1 	bl	8000b08 <__aeabi_dcmpgt>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d036      	beq.n	800521a <touch_Adjust+0x622>
					{
						cnt=0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80051b2:	4b71      	ldr	r3, [pc, #452]	; (8005378 <touch_Adjust+0x780>)
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	3b14      	subs	r3, #20
 80051b8:	b298      	uxth	r0, r3
 80051ba:	4b6f      	ldr	r3, [pc, #444]	; (8005378 <touch_Adjust+0x780>)
 80051bc:	885b      	ldrh	r3, [r3, #2]
 80051be:	3b14      	subs	r3, #20
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7ff fbfc 	bl	80049c4 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80051cc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80051d0:	2114      	movs	r1, #20
 80051d2:	2014      	movs	r0, #20
 80051d4:	f7ff fbf6 	bl	80049c4 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80051d8:	2300      	movs	r3, #0
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	2310      	movs	r3, #16
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051ea:	4a64      	ldr	r2, [pc, #400]	; (800537c <touch_Adjust+0x784>)
 80051ec:	2128      	movs	r1, #40	; 0x28
 80051ee:	2005      	movs	r0, #5
 80051f0:	f7fe f8bc 	bl	800336c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80051f4:	2300      	movs	r3, #0
 80051f6:	9302      	str	r3, [sp, #8]
 80051f8:	2310      	movs	r3, #16
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005206:	4a5e      	ldr	r2, [pc, #376]	; (8005380 <touch_Adjust+0x788>)
 8005208:	213c      	movs	r1, #60	; 0x3c
 800520a:	2005      	movs	r0, #5
 800520c:	f7fe f8ae 	bl	800336c <lcd_ShowStr>

						HAL_Delay(1000);
 8005210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005214:	f000 fa0e 	bl	8005634 <HAL_Delay>
 							continue;
 8005218:	e0a8      	b.n	800536c <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 800521a:	4b57      	ldr	r3, [pc, #348]	; (8005378 <touch_Adjust+0x780>)
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	3b28      	subs	r3, #40	; 0x28
 8005220:	ee07 3a90 	vmov	s15, r3
 8005224:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005228:	88bb      	ldrh	r3, [r7, #4]
 800522a:	461a      	mov	r2, r3
 800522c:	883b      	ldrh	r3, [r7, #0]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523c:	4b51      	ldr	r3, [pc, #324]	; (8005384 <touch_Adjust+0x78c>)
 800523e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8005242:	4b4d      	ldr	r3, [pc, #308]	; (8005378 <touch_Adjust+0x780>)
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800524e:	4b4d      	ldr	r3, [pc, #308]	; (8005384 <touch_Adjust+0x78c>)
 8005250:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005254:	88bb      	ldrh	r3, [r7, #4]
 8005256:	461a      	mov	r2, r3
 8005258:	883b      	ldrh	r3, [r7, #0]
 800525a:	4413      	add	r3, r2
 800525c:	ee07 3a90 	vmov	s15, r3
 8005260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005268:	ee37 7a67 	vsub.f32	s14, s14, s15
 800526c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005278:	ee17 3a90 	vmov	r3, s15
 800527c:	b21a      	sxth	r2, r3
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <touch_Adjust+0x78c>)
 8005280:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8005282:	4b3d      	ldr	r3, [pc, #244]	; (8005378 <touch_Adjust+0x780>)
 8005284:	885b      	ldrh	r3, [r3, #2]
 8005286:	3b28      	subs	r3, #40	; 0x28
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005290:	897b      	ldrh	r3, [r7, #10]
 8005292:	461a      	mov	r2, r3
 8005294:	887b      	ldrh	r3, [r7, #2]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	ee07 3a90 	vmov	s15, r3
 800529c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a4:	4b37      	ldr	r3, [pc, #220]	; (8005384 <touch_Adjust+0x78c>)
 80052a6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 80052aa:	4b33      	ldr	r3, [pc, #204]	; (8005378 <touch_Adjust+0x780>)
 80052ac:	885b      	ldrh	r3, [r3, #2]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052b6:	4b33      	ldr	r3, [pc, #204]	; (8005384 <touch_Adjust+0x78c>)
 80052b8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80052bc:	897b      	ldrh	r3, [r7, #10]
 80052be:	461a      	mov	r2, r3
 80052c0:	887b      	ldrh	r3, [r7, #2]
 80052c2:	4413      	add	r3, r2
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80052d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052e0:	ee17 3a90 	vmov	r3, s15
 80052e4:	b21a      	sxth	r2, r3
 80052e6:	4b27      	ldr	r3, [pc, #156]	; (8005384 <touch_Adjust+0x78c>)
 80052e8:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <touch_Adjust+0x780>)
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	3b14      	subs	r3, #20
 80052f0:	b298      	uxth	r0, r3
 80052f2:	4b21      	ldr	r3, [pc, #132]	; (8005378 <touch_Adjust+0x780>)
 80052f4:	885b      	ldrh	r3, [r3, #2]
 80052f6:	3b14      	subs	r3, #20
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052fe:	4619      	mov	r1, r3
 8005300:	f7ff fb60 	bl	80049c4 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8005304:	2300      	movs	r3, #0
 8005306:	9302      	str	r3, [sp, #8]
 8005308:	2310      	movs	r3, #16
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005316:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <touch_Adjust+0x790>)
 8005318:	2128      	movs	r1, #40	; 0x28
 800531a:	2005      	movs	r0, #5
 800531c:	f7fe f826 	bl	800336c <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005320:	2300      	movs	r3, #0
 8005322:	9302      	str	r3, [sp, #8]
 8005324:	2310      	movs	r3, #16
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005332:	4a16      	ldr	r2, [pc, #88]	; (800538c <touch_Adjust+0x794>)
 8005334:	213c      	movs	r1, #60	; 0x3c
 8005336:	2005      	movs	r0, #5
 8005338:	f7fe f818 	bl	800336c <lcd_ShowStr>
					HAL_Delay(1000);
 800533c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005340:	f000 f978 	bl	8005634 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8005344:	2300      	movs	r3, #0
 8005346:	9302      	str	r3, [sp, #8]
 8005348:	2310      	movs	r3, #16
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005356:	4a0e      	ldr	r2, [pc, #56]	; (8005390 <touch_Adjust+0x798>)
 8005358:	2128      	movs	r1, #40	; 0x28
 800535a:	2005      	movs	r0, #5
 800535c:	f7fe f806 	bl	800336c <lcd_ShowStr>
					TP_Save_Adjdata();
 8005360:	f7ff fc1e 	bl	8004ba0 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8005364:	f7ff fc2c 	bl	8004bc0 <TP_Get_Adjdata>
					return;
 8005368:	e001      	b.n	800536e <touch_Adjust+0x776>
			}
		}
 800536a:	bf00      	nop
		HAL_Delay(50);
 800536c:	e490      	b.n	8004c90 <touch_Adjust+0x98>
 	}
}
 800536e:	3728      	adds	r7, #40	; 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	f3af 8000 	nop.w
 8005378:	200005cc 	.word	0x200005cc
 800537c:	0800ce08 	.word	0x0800ce08
 8005380:	0800ce28 	.word	0x0800ce28
 8005384:	20000028 	.word	0x20000028
 8005388:	0800ce48 	.word	0x0800ce48
 800538c:	0800ce68 	.word	0x0800ce68
 8005390:	0800ce88 	.word	0x0800ce88
 8005394:	66666666 	.word	0x66666666
 8005398:	3fee6666 	.word	0x3fee6666
 800539c:	cccccccd 	.word	0xcccccccd
 80053a0:	3ff0cccc 	.word	0x3ff0cccc

080053a4 <touch_init>:

void touch_init(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 80053a8:	4904      	ldr	r1, [pc, #16]	; (80053bc <touch_init+0x18>)
 80053aa:	4805      	ldr	r0, [pc, #20]	; (80053c0 <touch_init+0x1c>)
 80053ac:	f7ff fa86 	bl	80048bc <TP_Read_XY>
	at24c_init();
 80053b0:	f7fb fe68 	bl	8001084 <at24c_init>
	TP_Get_Adjdata();
 80053b4:	f7ff fc04 	bl	8004bc0 <TP_Get_Adjdata>
}
 80053b8:	bf00      	nop
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	2000003e 	.word	0x2000003e
 80053c0:	20000034 	.word	0x20000034

080053c4 <touch_IsTouched>:

void touch_Scan(){
	  tp_dev.scan(0);
}

uint8_t touch_IsTouched(){
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 80053c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053cc:	4805      	ldr	r0, [pc, #20]	; (80053e4 <touch_IsTouched+0x20>)
 80053ce:	f001 f9e1 	bl	8006794 <HAL_GPIO_ReadPin>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
}
 80053de:	4618      	mov	r0, r3
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40020800 	.word	0x40020800

080053e8 <touch_GetX>:

uint16_t touch_GetX(){
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <touch_GetX+0x14>)
 80053ee:	899b      	ldrh	r3, [r3, #12]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000028 	.word	0x20000028

08005400 <touch_GetY>:

uint16_t touch_GetY(){
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <touch_GetY+0x14>)
 8005406:	8adb      	ldrh	r3, [r3, #22]
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000028 	.word	0x20000028

08005418 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a08      	ldr	r2, [pc, #32]	; (8005448 <HAL_UART_RxCpltCallback+0x30>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10a      	bne.n	8005440 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800542a:	230a      	movs	r3, #10
 800542c:	2201      	movs	r2, #1
 800542e:	4907      	ldr	r1, [pc, #28]	; (800544c <HAL_UART_RxCpltCallback+0x34>)
 8005430:	4807      	ldr	r0, [pc, #28]	; (8005450 <HAL_UART_RxCpltCallback+0x38>)
 8005432:	f004 fbb6 	bl	8009ba2 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8005436:	2201      	movs	r2, #1
 8005438:	4904      	ldr	r1, [pc, #16]	; (800544c <HAL_UART_RxCpltCallback+0x34>)
 800543a:	4805      	ldr	r0, [pc, #20]	; (8005450 <HAL_UART_RxCpltCallback+0x38>)
 800543c:	f004 fc43 	bl	8009cc6 <HAL_UART_Receive_IT>
	}
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40011000 	.word	0x40011000
 800544c:	20000128 	.word	0x20000128
 8005450:	20000798 	.word	0x20000798

08005454 <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005458:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 800545a:	4a12      	ldr	r2, [pc, #72]	; (80054a4 <MX_USART1_UART_Init+0x50>)
 800545c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800545e:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 8005460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 8005468:	2200      	movs	r2, #0
 800546a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 800546e:	2200      	movs	r2, #0
 8005470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 8005474:	2200      	movs	r2, #0
 8005476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 800547a:	220c      	movs	r2, #12
 800547c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 8005480:	2200      	movs	r2, #0
 8005482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 8005486:	2200      	movs	r2, #0
 8005488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800548a:	4805      	ldr	r0, [pc, #20]	; (80054a0 <MX_USART1_UART_Init+0x4c>)
 800548c:	f004 fb3c 	bl	8009b08 <HAL_UART_Init>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005496:	f7fe f97d 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000798 	.word	0x20000798
 80054a4:	40011000 	.word	0x40011000

080054a8 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054ae:	4a12      	ldr	r2, [pc, #72]	; (80054f8 <MX_USART2_UART_Init+0x50>)
 80054b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80054ba:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054bc:	2200      	movs	r2, #0
 80054be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80054c6:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054ce:	220c      	movs	r2, #12
 80054d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80054de:	4805      	ldr	r0, [pc, #20]	; (80054f4 <MX_USART2_UART_Init+0x4c>)
 80054e0:	f004 fb12 	bl	8009b08 <HAL_UART_Init>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80054ea:	f7fe f953 	bl	8003794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	200007dc 	.word	0x200007dc
 80054f8:	40004400 	.word	0x40004400

080054fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80054fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005500:	480d      	ldr	r0, [pc, #52]	; (8005538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005502:	490e      	ldr	r1, [pc, #56]	; (800553c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005504:	4a0e      	ldr	r2, [pc, #56]	; (8005540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005508:	e002      	b.n	8005510 <LoopCopyDataInit>

0800550a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800550a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800550c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800550e:	3304      	adds	r3, #4

08005510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005514:	d3f9      	bcc.n	800550a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005516:	4a0b      	ldr	r2, [pc, #44]	; (8005544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005518:	4c0b      	ldr	r4, [pc, #44]	; (8005548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800551a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800551c:	e001      	b.n	8005522 <LoopFillZerobss>

0800551e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800551e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005520:	3204      	adds	r2, #4

08005522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005524:	d3fb      	bcc.n	800551e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005526:	f7fe ff9f 	bl	8004468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800552a:	f005 fb8b 	bl	800ac44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800552e:	f7fe f83d 	bl	80035ac <main>
  bx  lr    
 8005532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800553c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005540:	080f1000 	.word	0x080f1000
  ldr r2, =_sbss
 8005544:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8005548:	20000834 	.word	0x20000834

0800554c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800554c:	e7fe      	b.n	800554c <ADC_IRQHandler>
	...

08005550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005554:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <HAL_Init+0x40>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <HAL_Init+0x40>)
 800555a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800555e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_Init+0x40>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <HAL_Init+0x40>)
 8005566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800556a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800556c:	4b08      	ldr	r3, [pc, #32]	; (8005590 <HAL_Init+0x40>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a07      	ldr	r2, [pc, #28]	; (8005590 <HAL_Init+0x40>)
 8005572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005578:	2003      	movs	r0, #3
 800557a:	f000 fbb1 	bl	8005ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800557e:	200f      	movs	r0, #15
 8005580:	f000 f808 	bl	8005594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005584:	f7fe fb9e 	bl	8003cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40023c00 	.word	0x40023c00

08005594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_InitTick+0x54>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_InitTick+0x58>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fbc9 	bl	8005d4a <HAL_SYSTICK_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e00e      	b.n	80055e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b0f      	cmp	r3, #15
 80055c6:	d80a      	bhi.n	80055de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055c8:	2200      	movs	r2, #0
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	f000 fb91 	bl	8005cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055d4:	4a06      	ldr	r2, [pc, #24]	; (80055f0 <HAL_InitTick+0x5c>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e000      	b.n	80055e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000024 	.word	0x20000024
 80055ec:	20000064 	.word	0x20000064
 80055f0:	20000060 	.word	0x20000060

080055f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_IncTick+0x20>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_IncTick+0x24>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4413      	add	r3, r2
 8005604:	4a04      	ldr	r2, [pc, #16]	; (8005618 <HAL_IncTick+0x24>)
 8005606:	6013      	str	r3, [r2, #0]
}
 8005608:	bf00      	nop
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000064 	.word	0x20000064
 8005618:	20000820 	.word	0x20000820

0800561c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  return uwTick;
 8005620:	4b03      	ldr	r3, [pc, #12]	; (8005630 <HAL_GetTick+0x14>)
 8005622:	681b      	ldr	r3, [r3, #0]
}
 8005624:	4618      	mov	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	20000820 	.word	0x20000820

08005634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800563c:	f7ff ffee 	bl	800561c <HAL_GetTick>
 8005640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d005      	beq.n	800565a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HAL_Delay+0x44>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800565a:	bf00      	nop
 800565c:	f7ff ffde 	bl	800561c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	429a      	cmp	r2, r3
 800566a:	d8f7      	bhi.n	800565c <HAL_Delay+0x28>
  {
  }
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000064 	.word	0x20000064

0800567c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e033      	b.n	80056fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fe fb3a 	bl	8003d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d118      	bne.n	80056ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056c2:	f023 0302 	bic.w	r3, r3, #2
 80056c6:	f043 0202 	orr.w	r2, r3, #2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f93a 	bl	8005948 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	f043 0201 	orr.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
 80056ea:	e001      	b.n	80056f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x1c>
 800571c:	2302      	movs	r3, #2
 800571e:	e105      	b.n	800592c <HAL_ADC_ConfigChannel+0x228>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b09      	cmp	r3, #9
 800572e:	d925      	bls.n	800577c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68d9      	ldr	r1, [r3, #12]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	3b1e      	subs	r3, #30
 8005746:	2207      	movs	r2, #7
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43da      	mvns	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	400a      	ands	r2, r1
 8005754:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68d9      	ldr	r1, [r3, #12]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	4618      	mov	r0, r3
 8005768:	4603      	mov	r3, r0
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4403      	add	r3, r0
 800576e:	3b1e      	subs	r3, #30
 8005770:	409a      	lsls	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	e022      	b.n	80057c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6919      	ldr	r1, [r3, #16]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	2207      	movs	r2, #7
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43da      	mvns	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	400a      	ands	r2, r1
 800579e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6919      	ldr	r1, [r3, #16]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	4618      	mov	r0, r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4403      	add	r3, r0
 80057b8:	409a      	lsls	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b06      	cmp	r3, #6
 80057c8:	d824      	bhi.n	8005814 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	3b05      	subs	r3, #5
 80057dc:	221f      	movs	r2, #31
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43da      	mvns	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	400a      	ands	r2, r1
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	4618      	mov	r0, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	3b05      	subs	r3, #5
 8005806:	fa00 f203 	lsl.w	r2, r0, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	635a      	str	r2, [r3, #52]	; 0x34
 8005812:	e04c      	b.n	80058ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d824      	bhi.n	8005866 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	3b23      	subs	r3, #35	; 0x23
 800582e:	221f      	movs	r2, #31
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43da      	mvns	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	400a      	ands	r2, r1
 800583c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	4618      	mov	r0, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	3b23      	subs	r3, #35	; 0x23
 8005858:	fa00 f203 	lsl.w	r2, r0, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
 8005864:	e023      	b.n	80058ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	3b41      	subs	r3, #65	; 0x41
 8005878:	221f      	movs	r2, #31
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43da      	mvns	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	400a      	ands	r2, r1
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	4618      	mov	r0, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	3b41      	subs	r3, #65	; 0x41
 80058a2:	fa00 f203 	lsl.w	r2, r0, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <HAL_ADC_ConfigChannel+0x234>)
 80058b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a21      	ldr	r2, [pc, #132]	; (800593c <HAL_ADC_ConfigChannel+0x238>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d109      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x1cc>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b12      	cmp	r3, #18
 80058c2:	d105      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <HAL_ADC_ConfigChannel+0x238>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d123      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x21e>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d003      	beq.n	80058ea <HAL_ADC_ConfigChannel+0x1e6>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b11      	cmp	r3, #17
 80058e8:	d11b      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b10      	cmp	r3, #16
 80058fc:	d111      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80058fe:	4b10      	ldr	r3, [pc, #64]	; (8005940 <HAL_ADC_ConfigChannel+0x23c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a10      	ldr	r2, [pc, #64]	; (8005944 <HAL_ADC_ConfigChannel+0x240>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	0c9a      	lsrs	r2, r3, #18
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005914:	e002      	b.n	800591c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	3b01      	subs	r3, #1
 800591a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f9      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40012300 	.word	0x40012300
 800593c:	40012000 	.word	0x40012000
 8005940:	20000024 	.word	0x20000024
 8005944:	431bde83 	.word	0x431bde83

08005948 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005950:	4b79      	ldr	r3, [pc, #484]	; (8005b38 <ADC_Init+0x1f0>)
 8005952:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800597c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6859      	ldr	r1, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	021a      	lsls	r2, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6859      	ldr	r1, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6899      	ldr	r1, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	4a58      	ldr	r2, [pc, #352]	; (8005b3c <ADC_Init+0x1f4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6899      	ldr	r1, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6899      	ldr	r1, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	609a      	str	r2, [r3, #8]
 8005a24:	e00f      	b.n	8005a46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0202 	bic.w	r2, r2, #2
 8005a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6899      	ldr	r1, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7e1b      	ldrb	r3, [r3, #24]
 8005a60:	005a      	lsls	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01b      	beq.n	8005aac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005a92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6859      	ldr	r1, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	035a      	lsls	r2, r3, #13
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	e007      	b.n	8005abc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	051a      	lsls	r2, r3, #20
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6899      	ldr	r1, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005afe:	025a      	lsls	r2, r3, #9
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6899      	ldr	r1, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	029a      	lsls	r2, r3, #10
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40012300 	.word	0x40012300
 8005b3c:	0f000001 	.word	0x0f000001

08005b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <__NVIC_SetPriorityGrouping+0x44>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b72:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <__NVIC_SetPriorityGrouping+0x44>)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	60d3      	str	r3, [r2, #12]
}
 8005b78:	bf00      	nop
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b8c:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	0a1b      	lsrs	r3, r3, #8
 8005b92:	f003 0307 	and.w	r3, r3, #7
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	e000ed00 	.word	0xe000ed00

08005ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4603      	mov	r3, r0
 8005bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	db0b      	blt.n	8005bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	f003 021f 	and.w	r2, r3, #31
 8005bbc:	4907      	ldr	r1, [pc, #28]	; (8005bdc <__NVIC_EnableIRQ+0x38>)
 8005bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	e000e100 	.word	0xe000e100

08005be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	6039      	str	r1, [r7, #0]
 8005bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db0a      	blt.n	8005c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	490c      	ldr	r1, [pc, #48]	; (8005c2c <__NVIC_SetPriority+0x4c>)
 8005bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfe:	0112      	lsls	r2, r2, #4
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	440b      	add	r3, r1
 8005c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c08:	e00a      	b.n	8005c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4908      	ldr	r1, [pc, #32]	; (8005c30 <__NVIC_SetPriority+0x50>)
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	3b04      	subs	r3, #4
 8005c18:	0112      	lsls	r2, r2, #4
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	761a      	strb	r2, [r3, #24]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	e000e100 	.word	0xe000e100
 8005c30:	e000ed00 	.word	0xe000ed00

08005c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b089      	sub	sp, #36	; 0x24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f1c3 0307 	rsb	r3, r3, #7
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	bf28      	it	cs
 8005c52:	2304      	movcs	r3, #4
 8005c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	2b06      	cmp	r3, #6
 8005c5c:	d902      	bls.n	8005c64 <NVIC_EncodePriority+0x30>
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3b03      	subs	r3, #3
 8005c62:	e000      	b.n	8005c66 <NVIC_EncodePriority+0x32>
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c68:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43da      	mvns	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	401a      	ands	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	fa01 f303 	lsl.w	r3, r1, r3
 8005c86:	43d9      	mvns	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c8c:	4313      	orrs	r3, r2
         );
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3724      	adds	r7, #36	; 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cac:	d301      	bcc.n	8005cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e00f      	b.n	8005cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <SysTick_Config+0x40>)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cba:	210f      	movs	r1, #15
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc0:	f7ff ff8e 	bl	8005be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <SysTick_Config+0x40>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cca:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <SysTick_Config+0x40>)
 8005ccc:	2207      	movs	r2, #7
 8005cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	e000e010 	.word	0xe000e010

08005ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ff29 	bl	8005b40 <__NVIC_SetPriorityGrouping>
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b086      	sub	sp, #24
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d08:	f7ff ff3e 	bl	8005b88 <__NVIC_GetPriorityGrouping>
 8005d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	6978      	ldr	r0, [r7, #20]
 8005d14:	f7ff ff8e 	bl	8005c34 <NVIC_EncodePriority>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff5d 	bl	8005be0 <__NVIC_SetPriority>
}
 8005d26:	bf00      	nop
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	4603      	mov	r3, r0
 8005d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ff31 	bl	8005ba4 <__NVIC_EnableIRQ>
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff ffa2 	bl	8005c9c <SysTick_Config>
 8005d58:	4603      	mov	r3, r0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d70:	f7ff fc54 	bl	800561c <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e099      	b.n	8005eb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005da0:	e00f      	b.n	8005dc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005da2:	f7ff fc3b 	bl	800561c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d908      	bls.n	8005dc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2203      	movs	r2, #3
 8005dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e078      	b.n	8005eb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e8      	bne.n	8005da2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4b38      	ldr	r3, [pc, #224]	; (8005ebc <HAL_DMA_Init+0x158>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d107      	bne.n	8005e2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	4313      	orrs	r3, r2
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f023 0307 	bic.w	r3, r3, #7
 8005e42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d117      	bne.n	8005e86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00e      	beq.n	8005e86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa7b 	bl	8006364 <DMA_CheckFifoParam>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2240      	movs	r2, #64	; 0x40
 8005e78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e82:	2301      	movs	r3, #1
 8005e84:	e016      	b.n	8005eb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa32 	bl	80062f8 <DMA_CalcBaseAndBitshift>
 8005e94:	4603      	mov	r3, r0
 8005e96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9c:	223f      	movs	r2, #63	; 0x3f
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	f010803f 	.word	0xf010803f

08005ec0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ece:	f7ff fba5 	bl	800561c <HAL_GetTick>
 8005ed2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d008      	beq.n	8005ef2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2280      	movs	r2, #128	; 0x80
 8005ee4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e052      	b.n	8005f98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0216 	bic.w	r2, r2, #22
 8005f00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_DMA_Abort+0x62>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0208 	bic.w	r2, r2, #8
 8005f30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f42:	e013      	b.n	8005f6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f44:	f7ff fb6a 	bl	800561c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d90c      	bls.n	8005f6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e015      	b.n	8005f98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e4      	bne.n	8005f44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7e:	223f      	movs	r2, #63	; 0x3f
 8005f80:	409a      	lsls	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d004      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2280      	movs	r2, #128	; 0x80
 8005fb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e00c      	b.n	8005fd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2205      	movs	r2, #5
 8005fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ff0:	4b92      	ldr	r3, [pc, #584]	; (800623c <HAL_DMA_IRQHandler+0x258>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a92      	ldr	r2, [pc, #584]	; (8006240 <HAL_DMA_IRQHandler+0x25c>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	0a9b      	lsrs	r3, r3, #10
 8005ffc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006002:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600e:	2208      	movs	r2, #8
 8006010:	409a      	lsls	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01a      	beq.n	8006050 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d013      	beq.n	8006050 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0204 	bic.w	r2, r2, #4
 8006036:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603c:	2208      	movs	r2, #8
 800603e:	409a      	lsls	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006048:	f043 0201 	orr.w	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006054:	2201      	movs	r2, #1
 8006056:	409a      	lsls	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	2201      	movs	r2, #1
 8006074:	409a      	lsls	r2, r3
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607e:	f043 0202 	orr.w	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	2204      	movs	r2, #4
 800608c:	409a      	lsls	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d012      	beq.n	80060bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a8:	2204      	movs	r2, #4
 80060aa:	409a      	lsls	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	f043 0204 	orr.w	r2, r3, #4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c0:	2210      	movs	r2, #16
 80060c2:	409a      	lsls	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d043      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03c      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060de:	2210      	movs	r2, #16
 80060e0:	409a      	lsls	r2, r3
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d018      	beq.n	8006126 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d024      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
 8006112:	e01f      	b.n	8006154 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01b      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	e016      	b.n	8006154 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0208 	bic.w	r2, r2, #8
 8006142:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006158:	2220      	movs	r2, #32
 800615a:	409a      	lsls	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 808e 	beq.w	8006282 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8086 	beq.w	8006282 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617a:	2220      	movs	r2, #32
 800617c:	409a      	lsls	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b05      	cmp	r3, #5
 800618c:	d136      	bne.n	80061fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0216 	bic.w	r2, r2, #22
 800619c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <HAL_DMA_IRQHandler+0x1da>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0208 	bic.w	r2, r2, #8
 80061cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d2:	223f      	movs	r2, #63	; 0x3f
 80061d4:	409a      	lsls	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d07d      	beq.n	80062ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
        }
        return;
 80061fa:	e078      	b.n	80062ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01c      	beq.n	8006244 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d108      	bne.n	800622a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621c:	2b00      	cmp	r3, #0
 800621e:	d030      	beq.n	8006282 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
 8006228:	e02b      	b.n	8006282 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d027      	beq.n	8006282 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
 800623a:	e022      	b.n	8006282 <HAL_DMA_IRQHandler+0x29e>
 800623c:	20000024 	.word	0x20000024
 8006240:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10f      	bne.n	8006272 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0210 	bic.w	r2, r2, #16
 8006260:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	2b00      	cmp	r3, #0
 8006288:	d032      	beq.n	80062f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d022      	beq.n	80062dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2205      	movs	r2, #5
 800629a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60bb      	str	r3, [r7, #8]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d307      	bcc.n	80062ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1f2      	bne.n	80062ae <HAL_DMA_IRQHandler+0x2ca>
 80062c8:	e000      	b.n	80062cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80062ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	4798      	blx	r3
 80062ec:	e000      	b.n	80062f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80062ee:	bf00      	nop
    }
  }
}
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop

080062f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	3b10      	subs	r3, #16
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <DMA_CalcBaseAndBitshift+0x64>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	091b      	lsrs	r3, r3, #4
 8006310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006312:	4a13      	ldr	r2, [pc, #76]	; (8006360 <DMA_CalcBaseAndBitshift+0x68>)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b03      	cmp	r3, #3
 8006324:	d909      	bls.n	800633a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	1d1a      	adds	r2, r3, #4
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	659a      	str	r2, [r3, #88]	; 0x58
 8006338:	e007      	b.n	800634a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	aaaaaaab 	.word	0xaaaaaaab
 8006360:	080f0e38 	.word	0x080f0e38

08006364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d11f      	bne.n	80063be <DMA_CheckFifoParam+0x5a>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d856      	bhi.n	8006432 <DMA_CheckFifoParam+0xce>
 8006384:	a201      	add	r2, pc, #4	; (adr r2, 800638c <DMA_CheckFifoParam+0x28>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063af 	.word	0x080063af
 8006394:	0800639d 	.word	0x0800639d
 8006398:	08006433 	.word	0x08006433
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d046      	beq.n	8006436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ac:	e043      	b.n	8006436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063b6:	d140      	bne.n	800643a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063bc:	e03d      	b.n	800643a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c6:	d121      	bne.n	800640c <DMA_CheckFifoParam+0xa8>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d837      	bhi.n	800643e <DMA_CheckFifoParam+0xda>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <DMA_CheckFifoParam+0x70>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063eb 	.word	0x080063eb
 80063dc:	080063e5 	.word	0x080063e5
 80063e0:	080063fd 	.word	0x080063fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      break;
 80063e8:	e030      	b.n	800644c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d025      	beq.n	8006442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fa:	e022      	b.n	8006442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006404:	d11f      	bne.n	8006446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800640a:	e01c      	b.n	8006446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d903      	bls.n	800641a <DMA_CheckFifoParam+0xb6>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d003      	beq.n	8006420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006418:	e018      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
      break;
 800641e:	e015      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00e      	beq.n	800644a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      break;
 8006430:	e00b      	b.n	800644a <DMA_CheckFifoParam+0xe6>
      break;
 8006432:	bf00      	nop
 8006434:	e00a      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 8006436:	bf00      	nop
 8006438:	e008      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 800643a:	bf00      	nop
 800643c:	e006      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 800643e:	bf00      	nop
 8006440:	e004      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 8006442:	bf00      	nop
 8006444:	e002      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;   
 8006446:	bf00      	nop
 8006448:	e000      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 800644a:	bf00      	nop
    }
  } 
  
  return status; 
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800645c:	b480      	push	{r7}
 800645e:	b089      	sub	sp, #36	; 0x24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	e16b      	b.n	8006750 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006478:	2201      	movs	r2, #1
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4013      	ands	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	429a      	cmp	r2, r3
 8006492:	f040 815a 	bne.w	800674a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d005      	beq.n	80064ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d130      	bne.n	8006510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	2203      	movs	r2, #3
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064e4:	2201      	movs	r2, #1
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4013      	ands	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 0201 	and.w	r2, r3, #1
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	4313      	orrs	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b03      	cmp	r3, #3
 800651a:	d017      	beq.n	800654c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	2203      	movs	r2, #3
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4313      	orrs	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f003 0303 	and.w	r3, r3, #3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d123      	bne.n	80065a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	08da      	lsrs	r2, r3, #3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3208      	adds	r2, #8
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	220f      	movs	r2, #15
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	43db      	mvns	r3, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4013      	ands	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	4313      	orrs	r3, r2
 8006590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	08da      	lsrs	r2, r3, #3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3208      	adds	r2, #8
 800659a:	69b9      	ldr	r1, [r7, #24]
 800659c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	2203      	movs	r2, #3
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	43db      	mvns	r3, r3
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 0203 	and.w	r2, r3, #3
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 80b4 	beq.w	800674a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	4b60      	ldr	r3, [pc, #384]	; (8006768 <HAL_GPIO_Init+0x30c>)
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	4a5f      	ldr	r2, [pc, #380]	; (8006768 <HAL_GPIO_Init+0x30c>)
 80065ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065f0:	6453      	str	r3, [r2, #68]	; 0x44
 80065f2:	4b5d      	ldr	r3, [pc, #372]	; (8006768 <HAL_GPIO_Init+0x30c>)
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065fe:	4a5b      	ldr	r2, [pc, #364]	; (800676c <HAL_GPIO_Init+0x310>)
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	3302      	adds	r3, #2
 8006606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	220f      	movs	r2, #15
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4013      	ands	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a52      	ldr	r2, [pc, #328]	; (8006770 <HAL_GPIO_Init+0x314>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d02b      	beq.n	8006682 <HAL_GPIO_Init+0x226>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a51      	ldr	r2, [pc, #324]	; (8006774 <HAL_GPIO_Init+0x318>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d025      	beq.n	800667e <HAL_GPIO_Init+0x222>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a50      	ldr	r2, [pc, #320]	; (8006778 <HAL_GPIO_Init+0x31c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01f      	beq.n	800667a <HAL_GPIO_Init+0x21e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a4f      	ldr	r2, [pc, #316]	; (800677c <HAL_GPIO_Init+0x320>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d019      	beq.n	8006676 <HAL_GPIO_Init+0x21a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a4e      	ldr	r2, [pc, #312]	; (8006780 <HAL_GPIO_Init+0x324>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_GPIO_Init+0x216>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a4d      	ldr	r2, [pc, #308]	; (8006784 <HAL_GPIO_Init+0x328>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00d      	beq.n	800666e <HAL_GPIO_Init+0x212>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a4c      	ldr	r2, [pc, #304]	; (8006788 <HAL_GPIO_Init+0x32c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d007      	beq.n	800666a <HAL_GPIO_Init+0x20e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a4b      	ldr	r2, [pc, #300]	; (800678c <HAL_GPIO_Init+0x330>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d101      	bne.n	8006666 <HAL_GPIO_Init+0x20a>
 8006662:	2307      	movs	r3, #7
 8006664:	e00e      	b.n	8006684 <HAL_GPIO_Init+0x228>
 8006666:	2308      	movs	r3, #8
 8006668:	e00c      	b.n	8006684 <HAL_GPIO_Init+0x228>
 800666a:	2306      	movs	r3, #6
 800666c:	e00a      	b.n	8006684 <HAL_GPIO_Init+0x228>
 800666e:	2305      	movs	r3, #5
 8006670:	e008      	b.n	8006684 <HAL_GPIO_Init+0x228>
 8006672:	2304      	movs	r3, #4
 8006674:	e006      	b.n	8006684 <HAL_GPIO_Init+0x228>
 8006676:	2303      	movs	r3, #3
 8006678:	e004      	b.n	8006684 <HAL_GPIO_Init+0x228>
 800667a:	2302      	movs	r3, #2
 800667c:	e002      	b.n	8006684 <HAL_GPIO_Init+0x228>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_GPIO_Init+0x228>
 8006682:	2300      	movs	r3, #0
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	f002 0203 	and.w	r2, r2, #3
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	4093      	lsls	r3, r2
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4313      	orrs	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006694:	4935      	ldr	r1, [pc, #212]	; (800676c <HAL_GPIO_Init+0x310>)
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	089b      	lsrs	r3, r3, #2
 800669a:	3302      	adds	r3, #2
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066a2:	4b3b      	ldr	r3, [pc, #236]	; (8006790 <HAL_GPIO_Init+0x334>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	43db      	mvns	r3, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4013      	ands	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066c6:	4a32      	ldr	r2, [pc, #200]	; (8006790 <HAL_GPIO_Init+0x334>)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80066cc:	4b30      	ldr	r3, [pc, #192]	; (8006790 <HAL_GPIO_Init+0x334>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <HAL_GPIO_Init+0x334>)
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066f6:	4b26      	ldr	r3, [pc, #152]	; (8006790 <HAL_GPIO_Init+0x334>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	43db      	mvns	r3, r3
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	4013      	ands	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800671a:	4a1d      	ldr	r2, [pc, #116]	; (8006790 <HAL_GPIO_Init+0x334>)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006720:	4b1b      	ldr	r3, [pc, #108]	; (8006790 <HAL_GPIO_Init+0x334>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	43db      	mvns	r3, r3
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	4013      	ands	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006744:	4a12      	ldr	r2, [pc, #72]	; (8006790 <HAL_GPIO_Init+0x334>)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	2b0f      	cmp	r3, #15
 8006754:	f67f ae90 	bls.w	8006478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	3724      	adds	r7, #36	; 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40023800 	.word	0x40023800
 800676c:	40013800 	.word	0x40013800
 8006770:	40020000 	.word	0x40020000
 8006774:	40020400 	.word	0x40020400
 8006778:	40020800 	.word	0x40020800
 800677c:	40020c00 	.word	0x40020c00
 8006780:	40021000 	.word	0x40021000
 8006784:	40021400 	.word	0x40021400
 8006788:	40021800 	.word	0x40021800
 800678c:	40021c00 	.word	0x40021c00
 8006790:	40013c00 	.word	0x40013c00

08006794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	e001      	b.n	80067b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	807b      	strh	r3, [r7, #2]
 80067d0:	4613      	mov	r3, r2
 80067d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067d4:	787b      	ldrb	r3, [r7, #1]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067da:	887a      	ldrh	r2, [r7, #2]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067e0:	e003      	b.n	80067ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067e2:	887b      	ldrh	r3, [r7, #2]
 80067e4:	041a      	lsls	r2, r3, #16
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	619a      	str	r2, [r3, #24]
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006808:	887a      	ldrh	r2, [r7, #2]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4013      	ands	r3, r2
 800680e:	041a      	lsls	r2, r3, #16
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	43d9      	mvns	r1, r3
 8006814:	887b      	ldrh	r3, [r7, #2]
 8006816:	400b      	ands	r3, r1
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	619a      	str	r2, [r3, #24]
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e12b      	b.n	8006a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fd faf2 	bl	8003e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2224      	movs	r2, #36	; 0x24
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800687e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800688e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006890:	f001 fbd8 	bl	8008044 <HAL_RCC_GetPCLK1Freq>
 8006894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4a81      	ldr	r2, [pc, #516]	; (8006aa0 <HAL_I2C_Init+0x274>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d807      	bhi.n	80068b0 <HAL_I2C_Init+0x84>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4a80      	ldr	r2, [pc, #512]	; (8006aa4 <HAL_I2C_Init+0x278>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	bf94      	ite	ls
 80068a8:	2301      	movls	r3, #1
 80068aa:	2300      	movhi	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	e006      	b.n	80068be <HAL_I2C_Init+0x92>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a7d      	ldr	r2, [pc, #500]	; (8006aa8 <HAL_I2C_Init+0x27c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	bf94      	ite	ls
 80068b8:	2301      	movls	r3, #1
 80068ba:	2300      	movhi	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e0e7      	b.n	8006a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4a78      	ldr	r2, [pc, #480]	; (8006aac <HAL_I2C_Init+0x280>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	0c9b      	lsrs	r3, r3, #18
 80068d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4a6a      	ldr	r2, [pc, #424]	; (8006aa0 <HAL_I2C_Init+0x274>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d802      	bhi.n	8006900 <HAL_I2C_Init+0xd4>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	3301      	adds	r3, #1
 80068fe:	e009      	b.n	8006914 <HAL_I2C_Init+0xe8>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	4a69      	ldr	r2, [pc, #420]	; (8006ab0 <HAL_I2C_Init+0x284>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	099b      	lsrs	r3, r3, #6
 8006912:	3301      	adds	r3, #1
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	430b      	orrs	r3, r1
 800691a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	495c      	ldr	r1, [pc, #368]	; (8006aa0 <HAL_I2C_Init+0x274>)
 8006930:	428b      	cmp	r3, r1
 8006932:	d819      	bhi.n	8006968 <HAL_I2C_Init+0x13c>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	1e59      	subs	r1, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006942:	1c59      	adds	r1, r3, #1
 8006944:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006948:	400b      	ands	r3, r1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <HAL_I2C_Init+0x138>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1e59      	subs	r1, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	fbb1 f3f3 	udiv	r3, r1, r3
 800695c:	3301      	adds	r3, #1
 800695e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006962:	e051      	b.n	8006a08 <HAL_I2C_Init+0x1dc>
 8006964:	2304      	movs	r3, #4
 8006966:	e04f      	b.n	8006a08 <HAL_I2C_Init+0x1dc>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d111      	bne.n	8006994 <HAL_I2C_Init+0x168>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1e58      	subs	r0, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6859      	ldr	r1, [r3, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	440b      	add	r3, r1
 800697e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006982:	3301      	adds	r3, #1
 8006984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006988:	2b00      	cmp	r3, #0
 800698a:	bf0c      	ite	eq
 800698c:	2301      	moveq	r3, #1
 800698e:	2300      	movne	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	e012      	b.n	80069ba <HAL_I2C_Init+0x18e>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	1e58      	subs	r0, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6859      	ldr	r1, [r3, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	0099      	lsls	r1, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069aa:	3301      	adds	r3, #1
 80069ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_I2C_Init+0x196>
 80069be:	2301      	movs	r3, #1
 80069c0:	e022      	b.n	8006a08 <HAL_I2C_Init+0x1dc>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10e      	bne.n	80069e8 <HAL_I2C_Init+0x1bc>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1e58      	subs	r0, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6859      	ldr	r1, [r3, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	440b      	add	r3, r1
 80069d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80069dc:	3301      	adds	r3, #1
 80069de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e6:	e00f      	b.n	8006a08 <HAL_I2C_Init+0x1dc>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	1e58      	subs	r0, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6859      	ldr	r1, [r3, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	0099      	lsls	r1, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80069fe:	3301      	adds	r3, #1
 8006a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	6809      	ldr	r1, [r1, #0]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69da      	ldr	r2, [r3, #28]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6911      	ldr	r1, [r2, #16]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68d2      	ldr	r2, [r2, #12]
 8006a42:	4311      	orrs	r1, r2
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695a      	ldr	r2, [r3, #20]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	000186a0 	.word	0x000186a0
 8006aa4:	001e847f 	.word	0x001e847f
 8006aa8:	003d08ff 	.word	0x003d08ff
 8006aac:	431bde83 	.word	0x431bde83
 8006ab0:	10624dd3 	.word	0x10624dd3

08006ab4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	4608      	mov	r0, r1
 8006abe:	4611      	mov	r1, r2
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	817b      	strh	r3, [r7, #10]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	813b      	strh	r3, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ace:	f7fe fda5 	bl	800561c <HAL_GetTick>
 8006ad2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	f040 80d9 	bne.w	8006c94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	2319      	movs	r3, #25
 8006ae8:	2201      	movs	r2, #1
 8006aea:	496d      	ldr	r1, [pc, #436]	; (8006ca0 <HAL_I2C_Mem_Write+0x1ec>)
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fc7f 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
 8006afa:	e0cc      	b.n	8006c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_I2C_Mem_Write+0x56>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e0c5      	b.n	8006c96 <HAL_I2C_Mem_Write+0x1e2>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d007      	beq.n	8006b30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2221      	movs	r2, #33	; 0x21
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2240      	movs	r2, #64	; 0x40
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a3a      	ldr	r2, [r7, #32]
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4a4d      	ldr	r2, [pc, #308]	; (8006ca4 <HAL_I2C_Mem_Write+0x1f0>)
 8006b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b72:	88f8      	ldrh	r0, [r7, #6]
 8006b74:	893a      	ldrh	r2, [r7, #8]
 8006b76:	8979      	ldrh	r1, [r7, #10]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	4603      	mov	r3, r0
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fab6 	bl	80070f4 <I2C_RequestMemoryWrite>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d052      	beq.n	8006c34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e081      	b.n	8006c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fd00 	bl	800759c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00d      	beq.n	8006bbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d107      	bne.n	8006bba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e06b      	b.n	8006c96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d11b      	bne.n	8006c34 <HAL_I2C_Mem_Write+0x180>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d017      	beq.n	8006c34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1aa      	bne.n	8006b92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fcec 	bl	800761e <I2C_WaitOnBTFFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d107      	bne.n	8006c64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e016      	b.n	8006c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e000      	b.n	8006c96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c94:	2302      	movs	r3, #2
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	00100002 	.word	0x00100002
 8006ca4:	ffff0000 	.word	0xffff0000

08006ca8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08c      	sub	sp, #48	; 0x30
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	817b      	strh	r3, [r7, #10]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	813b      	strh	r3, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cc2:	f7fe fcab 	bl	800561c <HAL_GetTick>
 8006cc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	f040 8208 	bne.w	80070e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	2319      	movs	r3, #25
 8006cdc:	2201      	movs	r2, #1
 8006cde:	497b      	ldr	r1, [pc, #492]	; (8006ecc <HAL_I2C_Mem_Read+0x224>)
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fb85 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006cec:	2302      	movs	r3, #2
 8006cee:	e1fb      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d101      	bne.n	8006cfe <HAL_I2C_Mem_Read+0x56>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e1f4      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d007      	beq.n	8006d24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2222      	movs	r2, #34	; 0x22
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a5b      	ldr	r2, [pc, #364]	; (8006ed0 <HAL_I2C_Mem_Read+0x228>)
 8006d64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d66:	88f8      	ldrh	r0, [r7, #6]
 8006d68:	893a      	ldrh	r2, [r7, #8]
 8006d6a:	8979      	ldrh	r1, [r7, #10]
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	4603      	mov	r3, r0
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 fa52 	bl	8007220 <I2C_RequestMemoryRead>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e1b0      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d113      	bne.n	8006db6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d8e:	2300      	movs	r3, #0
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	623b      	str	r3, [r7, #32]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	623b      	str	r3, [r7, #32]
 8006da2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	e184      	b.n	80070c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d11b      	bne.n	8006df6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	61fb      	str	r3, [r7, #28]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e164      	b.n	80070c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d11b      	bne.n	8006e36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	e144      	b.n	80070c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e4c:	e138      	b.n	80070c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	f200 80f1 	bhi.w	800703a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d123      	bne.n	8006ea8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fc1b 	bl	80076a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e139      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ea6:	e10b      	b.n	80070c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d14e      	bne.n	8006f4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4906      	ldr	r1, [pc, #24]	; (8006ed4 <HAL_I2C_Mem_Read+0x22c>)
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa98 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d008      	beq.n	8006ed8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e10e      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
 8006eca:	bf00      	nop
 8006ecc:	00100002 	.word	0x00100002
 8006ed0:	ffff0000 	.word	0xffff0000
 8006ed4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f4c:	e0b8      	b.n	80070c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	2200      	movs	r2, #0
 8006f56:	4966      	ldr	r1, [pc, #408]	; (80070f0 <HAL_I2C_Mem_Read+0x448>)
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fa49 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0bf      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	494f      	ldr	r1, [pc, #316]	; (80070f0 <HAL_I2C_Mem_Read+0x448>)
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 fa1b 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e091      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007038:	e042      	b.n	80070c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fb2e 	bl	80076a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e04c      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b04      	cmp	r3, #4
 800708c:	d118      	bne.n	80070c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f47f aec2 	bne.w	8006e4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	e000      	b.n	80070e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070e6:	2302      	movs	r3, #2
  }
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3728      	adds	r7, #40	; 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	00010004 	.word	0x00010004

080070f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	461a      	mov	r2, r3
 8007102:	4603      	mov	r3, r0
 8007104:	817b      	strh	r3, [r7, #10]
 8007106:	460b      	mov	r3, r1
 8007108:	813b      	strh	r3, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800711c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	2200      	movs	r2, #0
 8007126:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f960 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00d      	beq.n	8007152 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007144:	d103      	bne.n	800714e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800714c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e05f      	b.n	8007212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007152:	897b      	ldrh	r3, [r7, #10]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	6a3a      	ldr	r2, [r7, #32]
 8007166:	492d      	ldr	r1, [pc, #180]	; (800721c <I2C_RequestMemoryWrite+0x128>)
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f998 	bl	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e04c      	b.n	8007212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800718e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007190:	6a39      	ldr	r1, [r7, #32]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fa02 	bl	800759c <I2C_WaitOnTXEFlagUntilTimeout>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00d      	beq.n	80071ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d107      	bne.n	80071b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e02b      	b.n	8007212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d105      	bne.n	80071cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071c0:	893b      	ldrh	r3, [r7, #8]
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	611a      	str	r2, [r3, #16]
 80071ca:	e021      	b.n	8007210 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071cc:	893b      	ldrh	r3, [r7, #8]
 80071ce:	0a1b      	lsrs	r3, r3, #8
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071dc:	6a39      	ldr	r1, [r7, #32]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f9dc 	bl	800759c <I2C_WaitOnTXEFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d107      	bne.n	8007202 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e005      	b.n	8007212 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	b2da      	uxtb	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	00010002 	.word	0x00010002

08007220 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	4608      	mov	r0, r1
 800722a:	4611      	mov	r1, r2
 800722c:	461a      	mov	r2, r3
 800722e:	4603      	mov	r3, r0
 8007230:	817b      	strh	r3, [r7, #10]
 8007232:	460b      	mov	r3, r1
 8007234:	813b      	strh	r3, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007248:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	2200      	movs	r2, #0
 8007262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f8c2 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007280:	d103      	bne.n	800728a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e0aa      	b.n	80073e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800728e:	897b      	ldrh	r3, [r7, #10]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	461a      	mov	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800729c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	6a3a      	ldr	r2, [r7, #32]
 80072a2:	4952      	ldr	r1, [pc, #328]	; (80073ec <I2C_RequestMemoryRead+0x1cc>)
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f8fa 	bl	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e097      	b.n	80073e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072cc:	6a39      	ldr	r1, [r7, #32]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f964 	bl	800759c <I2C_WaitOnTXEFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00d      	beq.n	80072f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d107      	bne.n	80072f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e076      	b.n	80073e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d105      	bne.n	8007308 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072fc:	893b      	ldrh	r3, [r7, #8]
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	611a      	str	r2, [r3, #16]
 8007306:	e021      	b.n	800734c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007308:	893b      	ldrh	r3, [r7, #8]
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	b29b      	uxth	r3, r3
 800730e:	b2da      	uxtb	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007318:	6a39      	ldr	r1, [r7, #32]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f93e 	bl	800759c <I2C_WaitOnTXEFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00d      	beq.n	8007342 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	2b04      	cmp	r3, #4
 800732c:	d107      	bne.n	800733e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800733c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e050      	b.n	80073e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007342:	893b      	ldrh	r3, [r7, #8]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800734c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734e:	6a39      	ldr	r1, [r7, #32]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f923 	bl	800759c <I2C_WaitOnTXEFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00d      	beq.n	8007378 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	2b04      	cmp	r3, #4
 8007362:	d107      	bne.n	8007374 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007372:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e035      	b.n	80073e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007386:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	2200      	movs	r2, #0
 8007390:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f82b 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00d      	beq.n	80073bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ae:	d103      	bne.n	80073b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e013      	b.n	80073e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073bc:	897b      	ldrh	r3, [r7, #10]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	6a3a      	ldr	r2, [r7, #32]
 80073d0:	4906      	ldr	r1, [pc, #24]	; (80073ec <I2C_RequestMemoryRead+0x1cc>)
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f863 	bl	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e000      	b.n	80073e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	00010002 	.word	0x00010002

080073f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007400:	e025      	b.n	800744e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d021      	beq.n	800744e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740a:	f7fe f907 	bl	800561c <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d302      	bcc.n	8007420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d116      	bne.n	800744e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	f043 0220 	orr.w	r2, r3, #32
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e023      	b.n	8007496 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b01      	cmp	r3, #1
 8007456:	d10d      	bne.n	8007474 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	43da      	mvns	r2, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4013      	ands	r3, r2
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	e00c      	b.n	800748e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	43da      	mvns	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4013      	ands	r3, r2
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf0c      	ite	eq
 8007486:	2301      	moveq	r3, #1
 8007488:	2300      	movne	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	429a      	cmp	r2, r3
 8007492:	d0b6      	beq.n	8007402 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
 80074aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ac:	e051      	b.n	8007552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074bc:	d123      	bne.n	8007506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	f043 0204 	orr.w	r2, r3, #4
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e046      	b.n	8007594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	d021      	beq.n	8007552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750e:	f7fe f885 	bl	800561c <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	429a      	cmp	r2, r3
 800751c:	d302      	bcc.n	8007524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d116      	bne.n	8007552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f043 0220 	orr.w	r2, r3, #32
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e020      	b.n	8007594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b01      	cmp	r3, #1
 800755a:	d10c      	bne.n	8007576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	43da      	mvns	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4013      	ands	r3, r2
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	e00b      	b.n	800758e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	43da      	mvns	r2, r3
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	4013      	ands	r3, r2
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	bf14      	ite	ne
 8007588:	2301      	movne	r3, #1
 800758a:	2300      	moveq	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d18d      	bne.n	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075a8:	e02d      	b.n	8007606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 f8ce 	bl	800774c <I2C_IsAcknowledgeFailed>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e02d      	b.n	8007616 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d021      	beq.n	8007606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c2:	f7fe f82b 	bl	800561c <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d302      	bcc.n	80075d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d116      	bne.n	8007606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e007      	b.n	8007616 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d1ca      	bne.n	80075aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800762a:	e02d      	b.n	8007688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f88d 	bl	800774c <I2C_IsAcknowledgeFailed>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e02d      	b.n	8007698 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d021      	beq.n	8007688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007644:	f7fd ffea 	bl	800561c <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	429a      	cmp	r2, r3
 8007652:	d302      	bcc.n	800765a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d116      	bne.n	8007688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	f043 0220 	orr.w	r2, r3, #32
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e007      	b.n	8007698 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b04      	cmp	r3, #4
 8007694:	d1ca      	bne.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076ac:	e042      	b.n	8007734 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d119      	bne.n	80076f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f06f 0210 	mvn.w	r2, #16
 80076c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e029      	b.n	8007744 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f0:	f7fd ff94 	bl	800561c <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d302      	bcc.n	8007706 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d116      	bne.n	8007734 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	f043 0220 	orr.w	r2, r3, #32
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e007      	b.n	8007744 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d1b5      	bne.n	80076ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800775e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007762:	d11b      	bne.n	800779c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800776c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	f043 0204 	orr.w	r2, r3, #4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
	...

080077ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e264      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d075      	beq.n	80078b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ca:	4ba3      	ldr	r3, [pc, #652]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 030c 	and.w	r3, r3, #12
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d00c      	beq.n	80077f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077d6:	4ba0      	ldr	r3, [pc, #640]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d112      	bne.n	8007808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077e2:	4b9d      	ldr	r3, [pc, #628]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ee:	d10b      	bne.n	8007808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f0:	4b99      	ldr	r3, [pc, #612]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d05b      	beq.n	80078b4 <HAL_RCC_OscConfig+0x108>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d157      	bne.n	80078b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e23f      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007810:	d106      	bne.n	8007820 <HAL_RCC_OscConfig+0x74>
 8007812:	4b91      	ldr	r3, [pc, #580]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a90      	ldr	r2, [pc, #576]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	e01d      	b.n	800785c <HAL_RCC_OscConfig+0xb0>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007828:	d10c      	bne.n	8007844 <HAL_RCC_OscConfig+0x98>
 800782a:	4b8b      	ldr	r3, [pc, #556]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a8a      	ldr	r2, [pc, #552]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	4b88      	ldr	r3, [pc, #544]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a87      	ldr	r2, [pc, #540]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 800783c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e00b      	b.n	800785c <HAL_RCC_OscConfig+0xb0>
 8007844:	4b84      	ldr	r3, [pc, #528]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a83      	ldr	r2, [pc, #524]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 800784a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	4b81      	ldr	r3, [pc, #516]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a80      	ldr	r2, [pc, #512]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800785a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d013      	beq.n	800788c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007864:	f7fd feda 	bl	800561c <HAL_GetTick>
 8007868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786a:	e008      	b.n	800787e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800786c:	f7fd fed6 	bl	800561c <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	2b64      	cmp	r3, #100	; 0x64
 8007878:	d901      	bls.n	800787e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e204      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787e:	4b76      	ldr	r3, [pc, #472]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0f0      	beq.n	800786c <HAL_RCC_OscConfig+0xc0>
 800788a:	e014      	b.n	80078b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788c:	f7fd fec6 	bl	800561c <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007894:	f7fd fec2 	bl	800561c <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b64      	cmp	r3, #100	; 0x64
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e1f0      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078a6:	4b6c      	ldr	r3, [pc, #432]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1f0      	bne.n	8007894 <HAL_RCC_OscConfig+0xe8>
 80078b2:	e000      	b.n	80078b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d063      	beq.n	800798a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078c2:	4b65      	ldr	r3, [pc, #404]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 030c 	and.w	r3, r3, #12
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ce:	4b62      	ldr	r3, [pc, #392]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d11c      	bne.n	8007914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078da:	4b5f      	ldr	r3, [pc, #380]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d116      	bne.n	8007914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078e6:	4b5c      	ldr	r3, [pc, #368]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_RCC_OscConfig+0x152>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d001      	beq.n	80078fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e1c4      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078fe:	4b56      	ldr	r3, [pc, #344]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4952      	ldr	r1, [pc, #328]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 800790e:	4313      	orrs	r3, r2
 8007910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007912:	e03a      	b.n	800798a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d020      	beq.n	800795e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800791c:	4b4f      	ldr	r3, [pc, #316]	; (8007a5c <HAL_RCC_OscConfig+0x2b0>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007922:	f7fd fe7b 	bl	800561c <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800792a:	f7fd fe77 	bl	800561c <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e1a5      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800793c:	4b46      	ldr	r3, [pc, #280]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0f0      	beq.n	800792a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007948:	4b43      	ldr	r3, [pc, #268]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	4940      	ldr	r1, [pc, #256]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007958:	4313      	orrs	r3, r2
 800795a:	600b      	str	r3, [r1, #0]
 800795c:	e015      	b.n	800798a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800795e:	4b3f      	ldr	r3, [pc, #252]	; (8007a5c <HAL_RCC_OscConfig+0x2b0>)
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007964:	f7fd fe5a 	bl	800561c <HAL_GetTick>
 8007968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800796c:	f7fd fe56 	bl	800561c <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e184      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800797e:	4b36      	ldr	r3, [pc, #216]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f0      	bne.n	800796c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d030      	beq.n	80079f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d016      	beq.n	80079cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800799e:	4b30      	ldr	r3, [pc, #192]	; (8007a60 <HAL_RCC_OscConfig+0x2b4>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a4:	f7fd fe3a 	bl	800561c <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079ac:	f7fd fe36 	bl	800561c <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e164      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079be:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80079c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <HAL_RCC_OscConfig+0x200>
 80079ca:	e015      	b.n	80079f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079cc:	4b24      	ldr	r3, [pc, #144]	; (8007a60 <HAL_RCC_OscConfig+0x2b4>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079d2:	f7fd fe23 	bl	800561c <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079d8:	e008      	b.n	80079ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079da:	f7fd fe1f 	bl	800561c <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e14d      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079ec:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 80079ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1f0      	bne.n	80079da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 80a0 	beq.w	8007b46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a06:	2300      	movs	r3, #0
 8007a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a0a:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10f      	bne.n	8007a36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a16:	2300      	movs	r3, #0
 8007a18:	60bb      	str	r3, [r7, #8]
 8007a1a:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	4a0e      	ldr	r2, [pc, #56]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a24:	6413      	str	r3, [r2, #64]	; 0x40
 8007a26:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <HAL_RCC_OscConfig+0x2ac>)
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a2e:	60bb      	str	r3, [r7, #8]
 8007a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a32:	2301      	movs	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <HAL_RCC_OscConfig+0x2b8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d121      	bne.n	8007a86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a42:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <HAL_RCC_OscConfig+0x2b8>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a07      	ldr	r2, [pc, #28]	; (8007a64 <HAL_RCC_OscConfig+0x2b8>)
 8007a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a4e:	f7fd fde5 	bl	800561c <HAL_GetTick>
 8007a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a54:	e011      	b.n	8007a7a <HAL_RCC_OscConfig+0x2ce>
 8007a56:	bf00      	nop
 8007a58:	40023800 	.word	0x40023800
 8007a5c:	42470000 	.word	0x42470000
 8007a60:	42470e80 	.word	0x42470e80
 8007a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a68:	f7fd fdd8 	bl	800561c <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e106      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a7a:	4b85      	ldr	r3, [pc, #532]	; (8007c90 <HAL_RCC_OscConfig+0x4e4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f0      	beq.n	8007a68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d106      	bne.n	8007a9c <HAL_RCC_OscConfig+0x2f0>
 8007a8e:	4b81      	ldr	r3, [pc, #516]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	4a80      	ldr	r2, [pc, #512]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007a94:	f043 0301 	orr.w	r3, r3, #1
 8007a98:	6713      	str	r3, [r2, #112]	; 0x70
 8007a9a:	e01c      	b.n	8007ad6 <HAL_RCC_OscConfig+0x32a>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b05      	cmp	r3, #5
 8007aa2:	d10c      	bne.n	8007abe <HAL_RCC_OscConfig+0x312>
 8007aa4:	4b7b      	ldr	r3, [pc, #492]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa8:	4a7a      	ldr	r2, [pc, #488]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007aaa:	f043 0304 	orr.w	r3, r3, #4
 8007aae:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab0:	4b78      	ldr	r3, [pc, #480]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab4:	4a77      	ldr	r2, [pc, #476]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	6713      	str	r3, [r2, #112]	; 0x70
 8007abc:	e00b      	b.n	8007ad6 <HAL_RCC_OscConfig+0x32a>
 8007abe:	4b75      	ldr	r3, [pc, #468]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac2:	4a74      	ldr	r2, [pc, #464]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007ac4:	f023 0301 	bic.w	r3, r3, #1
 8007ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aca:	4b72      	ldr	r3, [pc, #456]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ace:	4a71      	ldr	r2, [pc, #452]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007ad0:	f023 0304 	bic.w	r3, r3, #4
 8007ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d015      	beq.n	8007b0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ade:	f7fd fd9d 	bl	800561c <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae4:	e00a      	b.n	8007afc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ae6:	f7fd fd99 	bl	800561c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e0c5      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afc:	4b65      	ldr	r3, [pc, #404]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0ee      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x33a>
 8007b08:	e014      	b.n	8007b34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b0a:	f7fd fd87 	bl	800561c <HAL_GetTick>
 8007b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b10:	e00a      	b.n	8007b28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b12:	f7fd fd83 	bl	800561c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e0af      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b28:	4b5a      	ldr	r3, [pc, #360]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1ee      	bne.n	8007b12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d105      	bne.n	8007b46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b3a:	4b56      	ldr	r3, [pc, #344]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	4a55      	ldr	r2, [pc, #340]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 809b 	beq.w	8007c86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b50:	4b50      	ldr	r3, [pc, #320]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f003 030c 	and.w	r3, r3, #12
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d05c      	beq.n	8007c16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d141      	bne.n	8007be8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b64:	4b4c      	ldr	r3, [pc, #304]	; (8007c98 <HAL_RCC_OscConfig+0x4ec>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6a:	f7fd fd57 	bl	800561c <HAL_GetTick>
 8007b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b70:	e008      	b.n	8007b84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b72:	f7fd fd53 	bl	800561c <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e081      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b84:	4b43      	ldr	r3, [pc, #268]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f0      	bne.n	8007b72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	019b      	lsls	r3, r3, #6
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	041b      	lsls	r3, r3, #16
 8007bac:	431a      	orrs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	061b      	lsls	r3, r3, #24
 8007bb4:	4937      	ldr	r1, [pc, #220]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bba:	4b37      	ldr	r3, [pc, #220]	; (8007c98 <HAL_RCC_OscConfig+0x4ec>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bc0:	f7fd fd2c 	bl	800561c <HAL_GetTick>
 8007bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bc8:	f7fd fd28 	bl	800561c <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e056      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bda:	4b2e      	ldr	r3, [pc, #184]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f0      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x41c>
 8007be6:	e04e      	b.n	8007c86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be8:	4b2b      	ldr	r3, [pc, #172]	; (8007c98 <HAL_RCC_OscConfig+0x4ec>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bee:	f7fd fd15 	bl	800561c <HAL_GetTick>
 8007bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf4:	e008      	b.n	8007c08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf6:	f7fd fd11 	bl	800561c <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e03f      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c08:	4b22      	ldr	r3, [pc, #136]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1f0      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x44a>
 8007c14:	e037      	b.n	8007c86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d101      	bne.n	8007c22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e032      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c22:	4b1c      	ldr	r3, [pc, #112]	; (8007c94 <HAL_RCC_OscConfig+0x4e8>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d028      	beq.n	8007c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d121      	bne.n	8007c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d11a      	bne.n	8007c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c52:	4013      	ands	r3, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d111      	bne.n	8007c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	085b      	lsrs	r3, r3, #1
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d107      	bne.n	8007c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d001      	beq.n	8007c86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40007000 	.word	0x40007000
 8007c94:	40023800 	.word	0x40023800
 8007c98:	42470060 	.word	0x42470060

08007c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e0cc      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cb0:	4b68      	ldr	r3, [pc, #416]	; (8007e54 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0307 	and.w	r3, r3, #7
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d90c      	bls.n	8007cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cbe:	4b65      	ldr	r3, [pc, #404]	; (8007e54 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cc6:	4b63      	ldr	r3, [pc, #396]	; (8007e54 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0307 	and.w	r3, r3, #7
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d001      	beq.n	8007cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0b8      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d020      	beq.n	8007d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cf0:	4b59      	ldr	r3, [pc, #356]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	4a58      	ldr	r2, [pc, #352]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d08:	4b53      	ldr	r3, [pc, #332]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	4a52      	ldr	r2, [pc, #328]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d14:	4b50      	ldr	r3, [pc, #320]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	494d      	ldr	r1, [pc, #308]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d044      	beq.n	8007dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d107      	bne.n	8007d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d3a:	4b47      	ldr	r3, [pc, #284]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d119      	bne.n	8007d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e07f      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d003      	beq.n	8007d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d107      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d5a:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e06f      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d6a:	4b3b      	ldr	r3, [pc, #236]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e067      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d7a:	4b37      	ldr	r3, [pc, #220]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f023 0203 	bic.w	r2, r3, #3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4934      	ldr	r1, [pc, #208]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d8c:	f7fd fc46 	bl	800561c <HAL_GetTick>
 8007d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d92:	e00a      	b.n	8007daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d94:	f7fd fc42 	bl	800561c <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e04f      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007daa:	4b2b      	ldr	r3, [pc, #172]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 020c 	and.w	r2, r3, #12
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d1eb      	bne.n	8007d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dbc:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <HAL_RCC_ClockConfig+0x1b8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d20c      	bcs.n	8007de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dca:	4b22      	ldr	r3, [pc, #136]	; (8007e54 <HAL_RCC_ClockConfig+0x1b8>)
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd2:	4b20      	ldr	r3, [pc, #128]	; (8007e54 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d001      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e032      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007df0:	4b19      	ldr	r3, [pc, #100]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	4916      	ldr	r1, [pc, #88]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e0e:	4b12      	ldr	r3, [pc, #72]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	490e      	ldr	r1, [pc, #56]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e22:	f000 f821 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 8007e26:	4602      	mov	r2, r0
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	091b      	lsrs	r3, r3, #4
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	490a      	ldr	r1, [pc, #40]	; (8007e5c <HAL_RCC_ClockConfig+0x1c0>)
 8007e34:	5ccb      	ldrb	r3, [r1, r3]
 8007e36:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3a:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <HAL_RCC_ClockConfig+0x1c4>)
 8007e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e3e:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <HAL_RCC_ClockConfig+0x1c8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fd fba6 	bl	8005594 <HAL_InitTick>

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40023c00 	.word	0x40023c00
 8007e58:	40023800 	.word	0x40023800
 8007e5c:	080f0e20 	.word	0x080f0e20
 8007e60:	20000024 	.word	0x20000024
 8007e64:	20000060 	.word	0x20000060

08007e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e80:	4b67      	ldr	r3, [pc, #412]	; (8008020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 030c 	and.w	r3, r3, #12
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d00d      	beq.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	f200 80bd 	bhi.w	800800c <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_RCC_GetSysClockFreq+0x34>
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d003      	beq.n	8007ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e9a:	e0b7      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e9c:	4b61      	ldr	r3, [pc, #388]	; (8008024 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e9e:	60bb      	str	r3, [r7, #8]
       break;
 8007ea0:	e0b7      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ea2:	4b61      	ldr	r3, [pc, #388]	; (8008028 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007ea4:	60bb      	str	r3, [r7, #8]
      break;
 8007ea6:	e0b4      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ea8:	4b5d      	ldr	r3, [pc, #372]	; (8008020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eb2:	4b5b      	ldr	r3, [pc, #364]	; (8008020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d04d      	beq.n	8007f5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ebe:	4b58      	ldr	r3, [pc, #352]	; (8008020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	099b      	lsrs	r3, r3, #6
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ece:	f04f 0100 	mov.w	r1, #0
 8007ed2:	ea02 0800 	and.w	r8, r2, r0
 8007ed6:	ea03 0901 	and.w	r9, r3, r1
 8007eda:	4640      	mov	r0, r8
 8007edc:	4649      	mov	r1, r9
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	014b      	lsls	r3, r1, #5
 8007ee8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007eec:	0142      	lsls	r2, r0, #5
 8007eee:	4610      	mov	r0, r2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	ebb0 0008 	subs.w	r0, r0, r8
 8007ef6:	eb61 0109 	sbc.w	r1, r1, r9
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	018b      	lsls	r3, r1, #6
 8007f04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f08:	0182      	lsls	r2, r0, #6
 8007f0a:	1a12      	subs	r2, r2, r0
 8007f0c:	eb63 0301 	sbc.w	r3, r3, r1
 8007f10:	f04f 0000 	mov.w	r0, #0
 8007f14:	f04f 0100 	mov.w	r1, #0
 8007f18:	00d9      	lsls	r1, r3, #3
 8007f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f1e:	00d0      	lsls	r0, r2, #3
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	eb12 0208 	adds.w	r2, r2, r8
 8007f28:	eb43 0309 	adc.w	r3, r3, r9
 8007f2c:	f04f 0000 	mov.w	r0, #0
 8007f30:	f04f 0100 	mov.w	r1, #0
 8007f34:	0259      	lsls	r1, r3, #9
 8007f36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007f3a:	0250      	lsls	r0, r2, #9
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4610      	mov	r0, r2
 8007f42:	4619      	mov	r1, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	f7f8 fe94 	bl	8000c78 <__aeabi_uldivmod>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4613      	mov	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	e04a      	b.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f5a:	4b31      	ldr	r3, [pc, #196]	; (8008020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	099b      	lsrs	r3, r3, #6
 8007f60:	461a      	mov	r2, r3
 8007f62:	f04f 0300 	mov.w	r3, #0
 8007f66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f6a:	f04f 0100 	mov.w	r1, #0
 8007f6e:	ea02 0400 	and.w	r4, r2, r0
 8007f72:	ea03 0501 	and.w	r5, r3, r1
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	014b      	lsls	r3, r1, #5
 8007f84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f88:	0142      	lsls	r2, r0, #5
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	1b00      	subs	r0, r0, r4
 8007f90:	eb61 0105 	sbc.w	r1, r1, r5
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	018b      	lsls	r3, r1, #6
 8007f9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007fa2:	0182      	lsls	r2, r0, #6
 8007fa4:	1a12      	subs	r2, r2, r0
 8007fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8007faa:	f04f 0000 	mov.w	r0, #0
 8007fae:	f04f 0100 	mov.w	r1, #0
 8007fb2:	00d9      	lsls	r1, r3, #3
 8007fb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fb8:	00d0      	lsls	r0, r2, #3
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	1912      	adds	r2, r2, r4
 8007fc0:	eb45 0303 	adc.w	r3, r5, r3
 8007fc4:	f04f 0000 	mov.w	r0, #0
 8007fc8:	f04f 0100 	mov.w	r1, #0
 8007fcc:	0299      	lsls	r1, r3, #10
 8007fce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007fd2:	0290      	lsls	r0, r2, #10
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4619      	mov	r1, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	f7f8 fe48 	bl	8000c78 <__aeabi_uldivmod>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4613      	mov	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	fbb2 f3f3 	udiv	r3, r2, r3
 8008008:	60bb      	str	r3, [r7, #8]
      break;
 800800a:	e002      	b.n	8008012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800800e:	60bb      	str	r3, [r7, #8]
      break;
 8008010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008012:	68bb      	ldr	r3, [r7, #8]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800801e:	bf00      	nop
 8008020:	40023800 	.word	0x40023800
 8008024:	00f42400 	.word	0x00f42400
 8008028:	007a1200 	.word	0x007a1200

0800802c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008030:	4b03      	ldr	r3, [pc, #12]	; (8008040 <HAL_RCC_GetHCLKFreq+0x14>)
 8008032:	681b      	ldr	r3, [r3, #0]
}
 8008034:	4618      	mov	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20000024 	.word	0x20000024

08008044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008048:	f7ff fff0 	bl	800802c <HAL_RCC_GetHCLKFreq>
 800804c:	4602      	mov	r2, r0
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	0a9b      	lsrs	r3, r3, #10
 8008054:	f003 0307 	and.w	r3, r3, #7
 8008058:	4903      	ldr	r1, [pc, #12]	; (8008068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800805a:	5ccb      	ldrb	r3, [r1, r3]
 800805c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008060:	4618      	mov	r0, r3
 8008062:	bd80      	pop	{r7, pc}
 8008064:	40023800 	.word	0x40023800
 8008068:	080f0e30 	.word	0x080f0e30

0800806c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008070:	f7ff ffdc 	bl	800802c <HAL_RCC_GetHCLKFreq>
 8008074:	4602      	mov	r2, r0
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	0b5b      	lsrs	r3, r3, #13
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	4903      	ldr	r1, [pc, #12]	; (8008090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008082:	5ccb      	ldrb	r3, [r1, r3]
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008088:	4618      	mov	r0, r3
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40023800 	.word	0x40023800
 8008090:	080f0e30 	.word	0x080f0e30

08008094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e07b      	b.n	800819e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d108      	bne.n	80080c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080b6:	d009      	beq.n	80080cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	61da      	str	r2, [r3, #28]
 80080be:	e005      	b.n	80080cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fb fef0 	bl	8003ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	431a      	orrs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008150:	ea42 0103 	orr.w	r1, r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	0c1b      	lsrs	r3, r3, #16
 800816a:	f003 0104 	and.w	r1, r3, #4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	f003 0210 	and.w	r2, r3, #16
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800818c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b088      	sub	sp, #32
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	603b      	str	r3, [r7, #0]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_SPI_Transmit+0x22>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e126      	b.n	8008416 <HAL_SPI_Transmit+0x270>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081d0:	f7fd fa24 	bl	800561c <HAL_GetTick>
 80081d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d002      	beq.n	80081ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80081e6:	2302      	movs	r3, #2
 80081e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081ea:	e10b      	b.n	8008404 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <HAL_SPI_Transmit+0x52>
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081fc:	e102      	b.n	8008404 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2203      	movs	r2, #3
 8008202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	88fa      	ldrh	r2, [r7, #6]
 8008216:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	88fa      	ldrh	r2, [r7, #6]
 800821c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008244:	d10f      	bne.n	8008266 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b40      	cmp	r3, #64	; 0x40
 8008272:	d007      	beq.n	8008284 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828c:	d14b      	bne.n	8008326 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <HAL_SPI_Transmit+0xf6>
 8008296:	8afb      	ldrh	r3, [r7, #22]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d13e      	bne.n	800831a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	881a      	ldrh	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	1c9a      	adds	r2, r3, #2
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	3b01      	subs	r3, #1
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80082c0:	e02b      	b.n	800831a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d112      	bne.n	80082f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d4:	881a      	ldrh	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	1c9a      	adds	r2, r3, #2
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80082f4:	e011      	b.n	800831a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082f6:	f7fd f991 	bl	800561c <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d803      	bhi.n	800830e <HAL_SPI_Transmit+0x168>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d102      	bne.n	8008314 <HAL_SPI_Transmit+0x16e>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008318:	e074      	b.n	8008404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ce      	bne.n	80082c2 <HAL_SPI_Transmit+0x11c>
 8008324:	e04c      	b.n	80083c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <HAL_SPI_Transmit+0x18e>
 800832e:	8afb      	ldrh	r3, [r7, #22]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d140      	bne.n	80083b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	330c      	adds	r3, #12
 800833e:	7812      	ldrb	r2, [r2, #0]
 8008340:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800835a:	e02c      	b.n	80083b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b02      	cmp	r3, #2
 8008368:	d113      	bne.n	8008392 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	330c      	adds	r3, #12
 8008374:	7812      	ldrb	r2, [r2, #0]
 8008376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008386:	b29b      	uxth	r3, r3
 8008388:	3b01      	subs	r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008390:	e011      	b.n	80083b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008392:	f7fd f943 	bl	800561c <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d803      	bhi.n	80083aa <HAL_SPI_Transmit+0x204>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d102      	bne.n	80083b0 <HAL_SPI_Transmit+0x20a>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80083b4:	e026      	b.n	8008404 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1cd      	bne.n	800835c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fbcb 	bl	8008b60 <SPI_EndRxTxTransaction>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2220      	movs	r2, #32
 80083d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	613b      	str	r3, [r7, #16]
 80083f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e000      	b.n	8008404 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008414:	7ffb      	ldrb	r3, [r7, #31]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3720      	adds	r7, #32
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b088      	sub	sp, #32
 8008422:	af02      	add	r7, sp, #8
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	4613      	mov	r3, r2
 800842c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800843a:	d112      	bne.n	8008462 <HAL_SPI_Receive+0x44>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10e      	bne.n	8008462 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2204      	movs	r2, #4
 8008448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800844c:	88fa      	ldrh	r2, [r7, #6]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	4613      	mov	r3, r2
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 f8f1 	bl	8008640 <HAL_SPI_TransmitReceive>
 800845e:	4603      	mov	r3, r0
 8008460:	e0ea      	b.n	8008638 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_SPI_Receive+0x52>
 800846c:	2302      	movs	r3, #2
 800846e:	e0e3      	b.n	8008638 <HAL_SPI_Receive+0x21a>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008478:	f7fd f8d0 	bl	800561c <HAL_GetTick>
 800847c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b01      	cmp	r3, #1
 8008488:	d002      	beq.n	8008490 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800848a:	2302      	movs	r3, #2
 800848c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800848e:	e0ca      	b.n	8008626 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_SPI_Receive+0x7e>
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80084a0:	e0c1      	b.n	8008626 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2204      	movs	r2, #4
 80084a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	88fa      	ldrh	r2, [r7, #6]
 80084ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	88fa      	ldrh	r2, [r7, #6]
 80084c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e8:	d10f      	bne.n	800850a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008508:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008514:	2b40      	cmp	r3, #64	; 0x40
 8008516:	d007      	beq.n	8008528 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008526:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d162      	bne.n	80085f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008530:	e02e      	b.n	8008590 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b01      	cmp	r3, #1
 800853e:	d115      	bne.n	800856c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f103 020c 	add.w	r2, r3, #12
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	7812      	ldrb	r2, [r2, #0]
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008560:	b29b      	uxth	r3, r3
 8008562:	3b01      	subs	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800856a:	e011      	b.n	8008590 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800856c:	f7fd f856 	bl	800561c <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d803      	bhi.n	8008584 <HAL_SPI_Receive+0x166>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008582:	d102      	bne.n	800858a <HAL_SPI_Receive+0x16c>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d102      	bne.n	8008590 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800858e:	e04a      	b.n	8008626 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008594:	b29b      	uxth	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1cb      	bne.n	8008532 <HAL_SPI_Receive+0x114>
 800859a:	e031      	b.n	8008600 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d113      	bne.n	80085d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	b292      	uxth	r2, r2
 80085b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	1c9a      	adds	r2, r3, #2
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085d0:	e011      	b.n	80085f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085d2:	f7fd f823 	bl	800561c <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d803      	bhi.n	80085ea <HAL_SPI_Receive+0x1cc>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d102      	bne.n	80085f0 <HAL_SPI_Receive+0x1d2>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80085f4:	e017      	b.n	8008626 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1cd      	bne.n	800859c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fa45 	bl	8008a94 <SPI_EndRxTransaction>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2220      	movs	r2, #32
 8008614:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	75fb      	strb	r3, [r7, #23]
 8008622:	e000      	b.n	8008626 <HAL_SPI_Receive+0x208>
  }

error :
 8008624:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08c      	sub	sp, #48	; 0x30
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800864e:	2301      	movs	r3, #1
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800865e:	2b01      	cmp	r3, #1
 8008660:	d101      	bne.n	8008666 <HAL_SPI_TransmitReceive+0x26>
 8008662:	2302      	movs	r3, #2
 8008664:	e18a      	b.n	800897c <HAL_SPI_TransmitReceive+0x33c>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800866e:	f7fc ffd5 	bl	800561c <HAL_GetTick>
 8008672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800867a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008684:	887b      	ldrh	r3, [r7, #2]
 8008686:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800868c:	2b01      	cmp	r3, #1
 800868e:	d00f      	beq.n	80086b0 <HAL_SPI_TransmitReceive+0x70>
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008696:	d107      	bne.n	80086a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <HAL_SPI_TransmitReceive+0x68>
 80086a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d003      	beq.n	80086b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80086a8:	2302      	movs	r3, #2
 80086aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80086ae:	e15b      	b.n	8008968 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <HAL_SPI_TransmitReceive+0x82>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <HAL_SPI_TransmitReceive+0x82>
 80086bc:	887b      	ldrh	r3, [r7, #2]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d103      	bne.n	80086ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80086c8:	e14e      	b.n	8008968 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d003      	beq.n	80086de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2205      	movs	r2, #5
 80086da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	887a      	ldrh	r2, [r7, #2]
 80086ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	887a      	ldrh	r2, [r7, #2]
 80086f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	887a      	ldrh	r2, [r7, #2]
 8008700:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	887a      	ldrh	r2, [r7, #2]
 8008706:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871e:	2b40      	cmp	r3, #64	; 0x40
 8008720:	d007      	beq.n	8008732 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008730:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800873a:	d178      	bne.n	800882e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <HAL_SPI_TransmitReceive+0x10a>
 8008744:	8b7b      	ldrh	r3, [r7, #26]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d166      	bne.n	8008818 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874e:	881a      	ldrh	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875a:	1c9a      	adds	r2, r3, #2
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	b29a      	uxth	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800876e:	e053      	b.n	8008818 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b02      	cmp	r3, #2
 800877c:	d11b      	bne.n	80087b6 <HAL_SPI_TransmitReceive+0x176>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d016      	beq.n	80087b6 <HAL_SPI_TransmitReceive+0x176>
 8008788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d113      	bne.n	80087b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008792:	881a      	ldrh	r2, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	1c9a      	adds	r2, r3, #2
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d119      	bne.n	80087f8 <HAL_SPI_TransmitReceive+0x1b8>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d014      	beq.n	80087f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	b292      	uxth	r2, r2
 80087da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	1c9a      	adds	r2, r3, #2
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087f4:	2301      	movs	r3, #1
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087f8:	f7fc ff10 	bl	800561c <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008804:	429a      	cmp	r2, r3
 8008806:	d807      	bhi.n	8008818 <HAL_SPI_TransmitReceive+0x1d8>
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d003      	beq.n	8008818 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008816:	e0a7      	b.n	8008968 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800881c:	b29b      	uxth	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1a6      	bne.n	8008770 <HAL_SPI_TransmitReceive+0x130>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1a1      	bne.n	8008770 <HAL_SPI_TransmitReceive+0x130>
 800882c:	e07c      	b.n	8008928 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <HAL_SPI_TransmitReceive+0x1fc>
 8008836:	8b7b      	ldrh	r3, [r7, #26]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d16b      	bne.n	8008914 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	330c      	adds	r3, #12
 8008846:	7812      	ldrb	r2, [r2, #0]
 8008848:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008858:	b29b      	uxth	r3, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008862:	e057      	b.n	8008914 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b02      	cmp	r3, #2
 8008870:	d11c      	bne.n	80088ac <HAL_SPI_TransmitReceive+0x26c>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d017      	beq.n	80088ac <HAL_SPI_TransmitReceive+0x26c>
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	2b01      	cmp	r3, #1
 8008880:	d114      	bne.n	80088ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	330c      	adds	r3, #12
 800888c:	7812      	ldrb	r2, [r2, #0]
 800888e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d119      	bne.n	80088ee <HAL_SPI_TransmitReceive+0x2ae>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088be:	b29b      	uxth	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d014      	beq.n	80088ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	3b01      	subs	r3, #1
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088ea:	2301      	movs	r3, #1
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088ee:	f7fc fe95 	bl	800561c <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d803      	bhi.n	8008906 <HAL_SPI_TransmitReceive+0x2c6>
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d102      	bne.n	800890c <HAL_SPI_TransmitReceive+0x2cc>
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	d103      	bne.n	8008914 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008912:	e029      	b.n	8008968 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1a2      	bne.n	8008864 <HAL_SPI_TransmitReceive+0x224>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008922:	b29b      	uxth	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d19d      	bne.n	8008864 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 f917 	bl	8008b60 <SPI_EndRxTxTransaction>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d006      	beq.n	8008946 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2220      	movs	r2, #32
 8008942:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008944:	e010      	b.n	8008968 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10b      	bne.n	8008966 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	e000      	b.n	8008968 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008978:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800897c:	4618      	mov	r0, r3
 800897e:	3730      	adds	r7, #48	; 0x30
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	4613      	mov	r3, r2
 8008992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008994:	f7fc fe42 	bl	800561c <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	4413      	add	r3, r2
 80089a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80089a4:	f7fc fe3a 	bl	800561c <HAL_GetTick>
 80089a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80089aa:	4b39      	ldr	r3, [pc, #228]	; (8008a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	015b      	lsls	r3, r3, #5
 80089b0:	0d1b      	lsrs	r3, r3, #20
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	fb02 f303 	mul.w	r3, r2, r3
 80089b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089ba:	e054      	b.n	8008a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c2:	d050      	beq.n	8008a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089c4:	f7fc fe2a 	bl	800561c <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d902      	bls.n	80089da <SPI_WaitFlagStateUntilTimeout+0x56>
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d13d      	bne.n	8008a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089f2:	d111      	bne.n	8008a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fc:	d004      	beq.n	8008a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a06:	d107      	bne.n	8008a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a20:	d10f      	bne.n	8008a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e017      	b.n	8008a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	bf0c      	ite	eq
 8008a76:	2301      	moveq	r3, #1
 8008a78:	2300      	movne	r3, #0
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d19b      	bne.n	80089bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3720      	adds	r7, #32
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000024 	.word	0x20000024

08008a94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af02      	add	r7, sp, #8
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aa8:	d111      	bne.n	8008ace <SPI_EndRxTransaction+0x3a>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab2:	d004      	beq.n	8008abe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008abc:	d107      	bne.n	8008ace <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008acc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ad6:	d12a      	bne.n	8008b2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae0:	d012      	beq.n	8008b08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2180      	movs	r1, #128	; 0x80
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7ff ff49 	bl	8008984 <SPI_WaitFlagStateUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d02d      	beq.n	8008b54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afc:	f043 0220 	orr.w	r2, r3, #32
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e026      	b.n	8008b56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2101      	movs	r1, #1
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f7ff ff36 	bl	8008984 <SPI_WaitFlagStateUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d01a      	beq.n	8008b54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	f043 0220 	orr.w	r2, r3, #32
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e013      	b.n	8008b56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	2101      	movs	r1, #1
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7ff ff23 	bl	8008984 <SPI_WaitFlagStateUntilTimeout>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d007      	beq.n	8008b54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b48:	f043 0220 	orr.w	r2, r3, #32
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e000      	b.n	8008b56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b6c:	4b1b      	ldr	r3, [pc, #108]	; (8008bdc <SPI_EndRxTxTransaction+0x7c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1b      	ldr	r2, [pc, #108]	; (8008be0 <SPI_EndRxTxTransaction+0x80>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	0d5b      	lsrs	r3, r3, #21
 8008b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b7c:	fb02 f303 	mul.w	r3, r2, r3
 8008b80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b8a:	d112      	bne.n	8008bb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2200      	movs	r2, #0
 8008b94:	2180      	movs	r1, #128	; 0x80
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7ff fef4 	bl	8008984 <SPI_WaitFlagStateUntilTimeout>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d016      	beq.n	8008bd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba6:	f043 0220 	orr.w	r2, r3, #32
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e00f      	b.n	8008bd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00a      	beq.n	8008bce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc8:	2b80      	cmp	r3, #128	; 0x80
 8008bca:	d0f2      	beq.n	8008bb2 <SPI_EndRxTxTransaction+0x52>
 8008bcc:	e000      	b.n	8008bd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8008bce:	bf00      	nop
  }

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000024 	.word	0x20000024
 8008be0:	165e9f81 	.word	0x165e9f81

08008be4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e034      	b.n	8008c64 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f7fb fb08 	bl	8004224 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f001 ff3a 	bl	800aa98 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	f001 ff84 	bl	800ab3c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6858      	ldr	r0, [r3, #4]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	f001 ffb9 	bl	800abb8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	6892      	ldr	r2, [r2, #8]
 8008c4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	6892      	ldr	r2, [r2, #8]
 8008c5a:	f041 0101 	orr.w	r1, r1, #1
 8008c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e041      	b.n	8008d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d106      	bne.n	8008c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7fb f962 	bl	8003f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f000 fbb2 	bl	8009414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d001      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e04e      	b.n	8008dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0201 	orr.w	r2, r2, #1
 8008d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d022      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x80>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d4e:	d01d      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x80>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d018      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x80>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1e      	ldr	r2, [pc, #120]	; (8008dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d013      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x80>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1c      	ldr	r2, [pc, #112]	; (8008ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00e      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x80>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1b      	ldr	r2, [pc, #108]	; (8008de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d009      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x80>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a19      	ldr	r2, [pc, #100]	; (8008de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d004      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x80>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a18      	ldr	r2, [pc, #96]	; (8008de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d111      	bne.n	8008db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b06      	cmp	r3, #6
 8008d9c:	d010      	beq.n	8008dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0201 	orr.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dae:	e007      	b.n	8008dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f042 0201 	orr.w	r2, r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40000800 	.word	0x40000800
 8008ddc:	40000c00 	.word	0x40000c00
 8008de0:	40010400 	.word	0x40010400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40001800 	.word	0x40001800

08008dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e041      	b.n	8008e82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f839 	bl	8008e8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3304      	adds	r3, #4
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	f000 faf2 	bl	8009414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e92:	bf00      	nop
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d122      	bne.n	8008efa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d11b      	bne.n	8008efa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f06f 0202 	mvn.w	r2, #2
 8008eca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fa78 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
 8008ee6:	e005      	b.n	8008ef4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa6a 	bl	80093c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa7b 	bl	80093ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d122      	bne.n	8008f4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d11b      	bne.n	8008f4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f06f 0204 	mvn.w	r2, #4
 8008f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa4e 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
 8008f3a:	e005      	b.n	8008f48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fa40 	bl	80093c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa51 	bl	80093ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d122      	bne.n	8008fa2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f003 0308 	and.w	r3, r3, #8
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d11b      	bne.n	8008fa2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f06f 0208 	mvn.w	r2, #8
 8008f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2204      	movs	r2, #4
 8008f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	f003 0303 	and.w	r3, r3, #3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fa24 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
 8008f8e:	e005      	b.n	8008f9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fa16 	bl	80093c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fa27 	bl	80093ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b10      	cmp	r3, #16
 8008fae:	d122      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f003 0310 	and.w	r3, r3, #16
 8008fba:	2b10      	cmp	r3, #16
 8008fbc:	d11b      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f06f 0210 	mvn.w	r2, #16
 8008fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2208      	movs	r2, #8
 8008fcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9fa 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
 8008fe2:	e005      	b.n	8008ff0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f9ec 	bl	80093c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f9fd 	bl	80093ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b01      	cmp	r3, #1
 8009002:	d10e      	bne.n	8009022 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b01      	cmp	r3, #1
 8009010:	d107      	bne.n	8009022 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f06f 0201 	mvn.w	r2, #1
 800901a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7fa fdbb 	bl	8003b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902c:	2b80      	cmp	r3, #128	; 0x80
 800902e:	d10e      	bne.n	800904e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903a:	2b80      	cmp	r3, #128	; 0x80
 800903c:	d107      	bne.n	800904e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fd53 	bl	8009af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	d10e      	bne.n	800907a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009066:	2b40      	cmp	r3, #64	; 0x40
 8009068:	d107      	bne.n	800907a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9c2 	bl	80093fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b20      	cmp	r3, #32
 8009086:	d10e      	bne.n	80090a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b20      	cmp	r3, #32
 8009094:	d107      	bne.n	80090a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f06f 0220 	mvn.w	r2, #32
 800909e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fd1d 	bl	8009ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d101      	bne.n	80090ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e0ae      	b.n	800922c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b0c      	cmp	r3, #12
 80090da:	f200 809f 	bhi.w	800921c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80090de:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	08009119 	.word	0x08009119
 80090e8:	0800921d 	.word	0x0800921d
 80090ec:	0800921d 	.word	0x0800921d
 80090f0:	0800921d 	.word	0x0800921d
 80090f4:	08009159 	.word	0x08009159
 80090f8:	0800921d 	.word	0x0800921d
 80090fc:	0800921d 	.word	0x0800921d
 8009100:	0800921d 	.word	0x0800921d
 8009104:	0800919b 	.word	0x0800919b
 8009108:	0800921d 	.word	0x0800921d
 800910c:	0800921d 	.word	0x0800921d
 8009110:	0800921d 	.word	0x0800921d
 8009114:	080091db 	.word	0x080091db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fa18 	bl	8009554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f042 0208 	orr.w	r2, r2, #8
 8009132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699a      	ldr	r2, [r3, #24]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0204 	bic.w	r2, r2, #4
 8009142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6999      	ldr	r1, [r3, #24]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	691a      	ldr	r2, [r3, #16]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	619a      	str	r2, [r3, #24]
      break;
 8009156:	e064      	b.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68b9      	ldr	r1, [r7, #8]
 800915e:	4618      	mov	r0, r3
 8009160:	f000 fa68 	bl	8009634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	699a      	ldr	r2, [r3, #24]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	699a      	ldr	r2, [r3, #24]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6999      	ldr	r1, [r3, #24]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	021a      	lsls	r2, r3, #8
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	619a      	str	r2, [r3, #24]
      break;
 8009198:	e043      	b.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fabd 	bl	8009720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69da      	ldr	r2, [r3, #28]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0208 	orr.w	r2, r2, #8
 80091b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69da      	ldr	r2, [r3, #28]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 0204 	bic.w	r2, r2, #4
 80091c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	69d9      	ldr	r1, [r3, #28]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	61da      	str	r2, [r3, #28]
      break;
 80091d8:	e023      	b.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fb11 	bl	8009808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69da      	ldr	r2, [r3, #28]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	69d9      	ldr	r1, [r3, #28]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	021a      	lsls	r2, r3, #8
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	61da      	str	r2, [r3, #28]
      break;
 800921a:	e002      	b.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]
      break;
 8009220:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_TIM_ConfigClockSource+0x1c>
 800924c:	2302      	movs	r3, #2
 800924e:	e0b4      	b.n	80093ba <HAL_TIM_ConfigClockSource+0x186>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800926e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009288:	d03e      	beq.n	8009308 <HAL_TIM_ConfigClockSource+0xd4>
 800928a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800928e:	f200 8087 	bhi.w	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
 8009292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009296:	f000 8086 	beq.w	80093a6 <HAL_TIM_ConfigClockSource+0x172>
 800929a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800929e:	d87f      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
 80092a0:	2b70      	cmp	r3, #112	; 0x70
 80092a2:	d01a      	beq.n	80092da <HAL_TIM_ConfigClockSource+0xa6>
 80092a4:	2b70      	cmp	r3, #112	; 0x70
 80092a6:	d87b      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
 80092a8:	2b60      	cmp	r3, #96	; 0x60
 80092aa:	d050      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x11a>
 80092ac:	2b60      	cmp	r3, #96	; 0x60
 80092ae:	d877      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
 80092b0:	2b50      	cmp	r3, #80	; 0x50
 80092b2:	d03c      	beq.n	800932e <HAL_TIM_ConfigClockSource+0xfa>
 80092b4:	2b50      	cmp	r3, #80	; 0x50
 80092b6:	d873      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
 80092b8:	2b40      	cmp	r3, #64	; 0x40
 80092ba:	d058      	beq.n	800936e <HAL_TIM_ConfigClockSource+0x13a>
 80092bc:	2b40      	cmp	r3, #64	; 0x40
 80092be:	d86f      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
 80092c0:	2b30      	cmp	r3, #48	; 0x30
 80092c2:	d064      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x15a>
 80092c4:	2b30      	cmp	r3, #48	; 0x30
 80092c6:	d86b      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	d060      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x15a>
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d867      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d05c      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x15a>
 80092d4:	2b10      	cmp	r3, #16
 80092d6:	d05a      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x15a>
 80092d8:	e062      	b.n	80093a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6818      	ldr	r0, [r3, #0]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	6899      	ldr	r1, [r3, #8]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	f000 fb5d 	bl	80099a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	609a      	str	r2, [r3, #8]
      break;
 8009306:	e04f      	b.n	80093a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	6899      	ldr	r1, [r3, #8]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f000 fb46 	bl	80099a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689a      	ldr	r2, [r3, #8]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800932a:	609a      	str	r2, [r3, #8]
      break;
 800932c:	e03c      	b.n	80093a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6859      	ldr	r1, [r3, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	461a      	mov	r2, r3
 800933c:	f000 faba 	bl	80098b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2150      	movs	r1, #80	; 0x50
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fb13 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 800934c:	e02c      	b.n	80093a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	6859      	ldr	r1, [r3, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	461a      	mov	r2, r3
 800935c:	f000 fad9 	bl	8009912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2160      	movs	r1, #96	; 0x60
 8009366:	4618      	mov	r0, r3
 8009368:	f000 fb03 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 800936c:	e01c      	b.n	80093a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	6859      	ldr	r1, [r3, #4]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	461a      	mov	r2, r3
 800937c:	f000 fa9a 	bl	80098b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2140      	movs	r1, #64	; 0x40
 8009386:	4618      	mov	r0, r3
 8009388:	f000 faf3 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 800938c:	e00c      	b.n	80093a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4619      	mov	r1, r3
 8009398:	4610      	mov	r0, r2
 800939a:	f000 faea 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 800939e:	e003      	b.n	80093a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	73fb      	strb	r3, [r7, #15]
      break;
 80093a4:	e000      	b.n	80093a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093ca:	bf00      	nop
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
	...

08009414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a40      	ldr	r2, [pc, #256]	; (8009528 <TIM_Base_SetConfig+0x114>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d013      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009432:	d00f      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a3d      	ldr	r2, [pc, #244]	; (800952c <TIM_Base_SetConfig+0x118>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00b      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a3c      	ldr	r2, [pc, #240]	; (8009530 <TIM_Base_SetConfig+0x11c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d007      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a3b      	ldr	r2, [pc, #236]	; (8009534 <TIM_Base_SetConfig+0x120>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d003      	beq.n	8009454 <TIM_Base_SetConfig+0x40>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a3a      	ldr	r2, [pc, #232]	; (8009538 <TIM_Base_SetConfig+0x124>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d108      	bne.n	8009466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a2f      	ldr	r2, [pc, #188]	; (8009528 <TIM_Base_SetConfig+0x114>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d02b      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009474:	d027      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a2c      	ldr	r2, [pc, #176]	; (800952c <TIM_Base_SetConfig+0x118>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d023      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a2b      	ldr	r2, [pc, #172]	; (8009530 <TIM_Base_SetConfig+0x11c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d01f      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a2a      	ldr	r2, [pc, #168]	; (8009534 <TIM_Base_SetConfig+0x120>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d01b      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a29      	ldr	r2, [pc, #164]	; (8009538 <TIM_Base_SetConfig+0x124>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d017      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a28      	ldr	r2, [pc, #160]	; (800953c <TIM_Base_SetConfig+0x128>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d013      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a27      	ldr	r2, [pc, #156]	; (8009540 <TIM_Base_SetConfig+0x12c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d00f      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a26      	ldr	r2, [pc, #152]	; (8009544 <TIM_Base_SetConfig+0x130>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00b      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a25      	ldr	r2, [pc, #148]	; (8009548 <TIM_Base_SetConfig+0x134>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d007      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a24      	ldr	r2, [pc, #144]	; (800954c <TIM_Base_SetConfig+0x138>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d003      	beq.n	80094c6 <TIM_Base_SetConfig+0xb2>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a23      	ldr	r2, [pc, #140]	; (8009550 <TIM_Base_SetConfig+0x13c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d108      	bne.n	80094d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a0a      	ldr	r2, [pc, #40]	; (8009528 <TIM_Base_SetConfig+0x114>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d003      	beq.n	800950c <TIM_Base_SetConfig+0xf8>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a0c      	ldr	r2, [pc, #48]	; (8009538 <TIM_Base_SetConfig+0x124>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d103      	bne.n	8009514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	691a      	ldr	r2, [r3, #16]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	615a      	str	r2, [r3, #20]
}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	40010000 	.word	0x40010000
 800952c:	40000400 	.word	0x40000400
 8009530:	40000800 	.word	0x40000800
 8009534:	40000c00 	.word	0x40000c00
 8009538:	40010400 	.word	0x40010400
 800953c:	40014000 	.word	0x40014000
 8009540:	40014400 	.word	0x40014400
 8009544:	40014800 	.word	0x40014800
 8009548:	40001800 	.word	0x40001800
 800954c:	40001c00 	.word	0x40001c00
 8009550:	40002000 	.word	0x40002000

08009554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	f023 0201 	bic.w	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f023 0302 	bic.w	r3, r3, #2
 800959c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a20      	ldr	r2, [pc, #128]	; (800962c <TIM_OC1_SetConfig+0xd8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <TIM_OC1_SetConfig+0x64>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a1f      	ldr	r2, [pc, #124]	; (8009630 <TIM_OC1_SetConfig+0xdc>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d10c      	bne.n	80095d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f023 0308 	bic.w	r3, r3, #8
 80095be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f023 0304 	bic.w	r3, r3, #4
 80095d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a15      	ldr	r2, [pc, #84]	; (800962c <TIM_OC1_SetConfig+0xd8>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d003      	beq.n	80095e2 <TIM_OC1_SetConfig+0x8e>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a14      	ldr	r2, [pc, #80]	; (8009630 <TIM_OC1_SetConfig+0xdc>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d111      	bne.n	8009606 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	621a      	str	r2, [r3, #32]
}
 8009620:	bf00      	nop
 8009622:	371c      	adds	r7, #28
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	40010000 	.word	0x40010000
 8009630:	40010400 	.word	0x40010400

08009634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	f023 0210 	bic.w	r2, r3, #16
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800966a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	021b      	lsls	r3, r3, #8
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4313      	orrs	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f023 0320 	bic.w	r3, r3, #32
 800967e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	4313      	orrs	r3, r2
 800968a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a22      	ldr	r2, [pc, #136]	; (8009718 <TIM_OC2_SetConfig+0xe4>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d003      	beq.n	800969c <TIM_OC2_SetConfig+0x68>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a21      	ldr	r2, [pc, #132]	; (800971c <TIM_OC2_SetConfig+0xe8>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d10d      	bne.n	80096b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a17      	ldr	r2, [pc, #92]	; (8009718 <TIM_OC2_SetConfig+0xe4>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d003      	beq.n	80096c8 <TIM_OC2_SetConfig+0x94>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a16      	ldr	r2, [pc, #88]	; (800971c <TIM_OC2_SetConfig+0xe8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d113      	bne.n	80096f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	621a      	str	r2, [r3, #32]
}
 800970a:	bf00      	nop
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	40010000 	.word	0x40010000
 800971c:	40010400 	.word	0x40010400

08009720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0303 	bic.w	r3, r3, #3
 8009756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a21      	ldr	r2, [pc, #132]	; (8009800 <TIM_OC3_SetConfig+0xe0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d003      	beq.n	8009786 <TIM_OC3_SetConfig+0x66>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a20      	ldr	r2, [pc, #128]	; (8009804 <TIM_OC3_SetConfig+0xe4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d10d      	bne.n	80097a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800978c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a16      	ldr	r2, [pc, #88]	; (8009800 <TIM_OC3_SetConfig+0xe0>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d003      	beq.n	80097b2 <TIM_OC3_SetConfig+0x92>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a15      	ldr	r2, [pc, #84]	; (8009804 <TIM_OC3_SetConfig+0xe4>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d113      	bne.n	80097da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	011b      	lsls	r3, r3, #4
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	621a      	str	r2, [r3, #32]
}
 80097f4:	bf00      	nop
 80097f6:	371c      	adds	r7, #28
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	40010000 	.word	0x40010000
 8009804:	40010400 	.word	0x40010400

08009808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800983e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	4313      	orrs	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	031b      	lsls	r3, r3, #12
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a12      	ldr	r2, [pc, #72]	; (80098ac <TIM_OC4_SetConfig+0xa4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d003      	beq.n	8009870 <TIM_OC4_SetConfig+0x68>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a11      	ldr	r2, [pc, #68]	; (80098b0 <TIM_OC4_SetConfig+0xa8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d109      	bne.n	8009884 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	019b      	lsls	r3, r3, #6
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	4313      	orrs	r3, r2
 8009882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	40010000 	.word	0x40010000
 80098b0:	40010400 	.word	0x40010400

080098b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	f023 0201 	bic.w	r2, r3, #1
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f023 030a 	bic.w	r3, r3, #10
 80098f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	621a      	str	r2, [r3, #32]
}
 8009906:	bf00      	nop
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009912:	b480      	push	{r7}
 8009914:	b087      	sub	sp, #28
 8009916:	af00      	add	r7, sp, #0
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0210 	bic.w	r2, r3, #16
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800993c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	031b      	lsls	r3, r3, #12
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800994e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	011b      	lsls	r3, r3, #4
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4313      	orrs	r3, r2
 8009990:	f043 0307 	orr.w	r3, r3, #7
 8009994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	609a      	str	r2, [r3, #8]
}
 800999c:	bf00      	nop
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	021a      	lsls	r2, r3, #8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	431a      	orrs	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	609a      	str	r2, [r3, #8]
}
 80099dc:	bf00      	nop
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d101      	bne.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099fc:	2302      	movs	r3, #2
 80099fe:	e05a      	b.n	8009ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a21      	ldr	r2, [pc, #132]	; (8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d022      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a4c:	d01d      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a1d      	ldr	r2, [pc, #116]	; (8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d018      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a1b      	ldr	r2, [pc, #108]	; (8009acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d013      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a1a      	ldr	r2, [pc, #104]	; (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d00e      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a18      	ldr	r2, [pc, #96]	; (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d009      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a17      	ldr	r2, [pc, #92]	; (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d004      	beq.n	8009a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a15      	ldr	r2, [pc, #84]	; (8009adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d10c      	bne.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	40010000 	.word	0x40010000
 8009ac8:	40000400 	.word	0x40000400
 8009acc:	40000800 	.word	0x40000800
 8009ad0:	40000c00 	.word	0x40000c00
 8009ad4:	40010400 	.word	0x40010400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40001800 	.word	0x40001800

08009ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e03f      	b.n	8009b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7fa faa0 	bl	8004074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2224      	movs	r2, #36	; 0x24
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fddb 	bl	800a708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	691a      	ldr	r2, [r3, #16]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	695a      	ldr	r2, [r3, #20]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b08a      	sub	sp, #40	; 0x28
 8009ba6:	af02      	add	r7, sp, #8
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	603b      	str	r3, [r7, #0]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b20      	cmp	r3, #32
 8009bc0:	d17c      	bne.n	8009cbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <HAL_UART_Transmit+0x2c>
 8009bc8:	88fb      	ldrh	r3, [r7, #6]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e075      	b.n	8009cbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <HAL_UART_Transmit+0x3e>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e06e      	b.n	8009cbe <HAL_UART_Transmit+0x11c>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2221      	movs	r2, #33	; 0x21
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bf6:	f7fb fd11 	bl	800561c <HAL_GetTick>
 8009bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	88fa      	ldrh	r2, [r7, #6]
 8009c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	88fa      	ldrh	r2, [r7, #6]
 8009c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c10:	d108      	bne.n	8009c24 <HAL_UART_Transmit+0x82>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d104      	bne.n	8009c24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	e003      	b.n	8009c2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c34:	e02a      	b.n	8009c8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2180      	movs	r1, #128	; 0x80
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fb1f 	bl	800a284 <UART_WaitOnFlagUntilTimeout>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e036      	b.n	8009cbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10b      	bne.n	8009c6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	3302      	adds	r3, #2
 8009c6a:	61bb      	str	r3, [r7, #24]
 8009c6c:	e007      	b.n	8009c7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	781a      	ldrb	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1cf      	bne.n	8009c36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2140      	movs	r1, #64	; 0x40
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 faef 	bl	800a284 <UART_WaitOnFlagUntilTimeout>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e006      	b.n	8009cbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e000      	b.n	8009cbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009cbc:	2302      	movs	r3, #2
  }
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3720      	adds	r7, #32
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b20      	cmp	r3, #32
 8009cde:	d11d      	bne.n	8009d1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <HAL_UART_Receive_IT+0x26>
 8009ce6:	88fb      	ldrh	r3, [r7, #6]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e016      	b.n	8009d1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d101      	bne.n	8009cfe <HAL_UART_Receive_IT+0x38>
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	e00f      	b.n	8009d1e <HAL_UART_Receive_IT+0x58>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68b9      	ldr	r1, [r7, #8]
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 fb24 	bl	800a360 <UART_Start_Receive_IT>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	e000      	b.n	8009d1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009d1c:	2302      	movs	r3, #2
  }
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b0ba      	sub	sp, #232	; 0xe8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d5e:	f003 030f 	and.w	r3, r3, #15
 8009d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10f      	bne.n	8009d8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <HAL_UART_IRQHandler+0x66>
 8009d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fc03 	bl	800a592 <UART_Receive_IT>
      return;
 8009d8c:	e256      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 80de 	beq.w	8009f54 <HAL_UART_IRQHandler+0x22c>
 8009d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d106      	bne.n	8009db2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 80d1 	beq.w	8009f54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00b      	beq.n	8009dd6 <HAL_UART_IRQHandler+0xae>
 8009dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d005      	beq.n	8009dd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	f043 0201 	orr.w	r2, r3, #1
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dda:	f003 0304 	and.w	r3, r3, #4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <HAL_UART_IRQHandler+0xd2>
 8009de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d005      	beq.n	8009dfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	f043 0202 	orr.w	r2, r3, #2
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00b      	beq.n	8009e1e <HAL_UART_IRQHandler+0xf6>
 8009e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d005      	beq.n	8009e1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e16:	f043 0204 	orr.w	r2, r3, #4
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e22:	f003 0308 	and.w	r3, r3, #8
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d011      	beq.n	8009e4e <HAL_UART_IRQHandler+0x126>
 8009e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d105      	bne.n	8009e42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	f043 0208 	orr.w	r2, r3, #8
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 81ed 	beq.w	800a232 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d008      	beq.n	8009e76 <HAL_UART_IRQHandler+0x14e>
 8009e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fb8e 	bl	800a592 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e80:	2b40      	cmp	r3, #64	; 0x40
 8009e82:	bf0c      	ite	eq
 8009e84:	2301      	moveq	r3, #1
 8009e86:	2300      	movne	r3, #0
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	f003 0308 	and.w	r3, r3, #8
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d103      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x17a>
 8009e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d04f      	beq.n	8009f42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa96 	bl	800a3d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb2:	2b40      	cmp	r3, #64	; 0x40
 8009eb4:	d141      	bne.n	8009f3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3314      	adds	r3, #20
 8009ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3314      	adds	r3, #20
 8009ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1d9      	bne.n	8009eb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d013      	beq.n	8009f32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	4a7d      	ldr	r2, [pc, #500]	; (800a104 <HAL_UART_IRQHandler+0x3dc>)
 8009f10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fc f842 	bl	8005fa0 <HAL_DMA_Abort_IT>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d016      	beq.n	8009f50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f30:	e00e      	b.n	8009f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f990 	bl	800a258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f38:	e00a      	b.n	8009f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f98c 	bl	800a258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f40:	e006      	b.n	8009f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f988 	bl	800a258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f4e:	e170      	b.n	800a232 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f50:	bf00      	nop
    return;
 8009f52:	e16e      	b.n	800a232 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	f040 814a 	bne.w	800a1f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f62:	f003 0310 	and.w	r3, r3, #16
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 8143 	beq.w	800a1f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 813c 	beq.w	800a1f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60bb      	str	r3, [r7, #8]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	60bb      	str	r3, [r7, #8]
 8009f8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9a:	2b40      	cmp	r3, #64	; 0x40
 8009f9c:	f040 80b4 	bne.w	800a108 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8140 	beq.w	800a236 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	f080 8139 	bcs.w	800a236 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd6:	f000 8088 	beq.w	800a0ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	330c      	adds	r3, #12
 8009fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	330c      	adds	r3, #12
 800a002:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a006:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a00a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a012:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a01e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1d9      	bne.n	8009fda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3314      	adds	r3, #20
 800a02c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a038:	f023 0301 	bic.w	r3, r3, #1
 800a03c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3314      	adds	r3, #20
 800a046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a04a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a04e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a052:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e1      	bne.n	800a026 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3314      	adds	r3, #20
 800a068:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3314      	adds	r3, #20
 800a082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a086:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a08c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e3      	bne.n	800a062 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2220      	movs	r2, #32
 800a09e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	330c      	adds	r3, #12
 800a0ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b2:	e853 3f00 	ldrex	r3, [r3]
 800a0b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ba:	f023 0310 	bic.w	r3, r3, #16
 800a0be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	330c      	adds	r3, #12
 800a0c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a0cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0d4:	e841 2300 	strex	r3, r2, [r1]
 800a0d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1e3      	bne.n	800a0a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fb feeb 	bl	8005ec0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f8b6 	bl	800a26c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a100:	e099      	b.n	800a236 <HAL_UART_IRQHandler+0x50e>
 800a102:	bf00      	nop
 800a104:	0800a49b 	.word	0x0800a49b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a110:	b29b      	uxth	r3, r3
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 808b 	beq.w	800a23a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 8086 	beq.w	800a23a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	330c      	adds	r3, #12
 800a134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a144:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	330c      	adds	r3, #12
 800a14e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a152:	647a      	str	r2, [r7, #68]	; 0x44
 800a154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e3      	bne.n	800a12e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3314      	adds	r3, #20
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	623b      	str	r3, [r7, #32]
   return(result);
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	f023 0301 	bic.w	r3, r3, #1
 800a17c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3314      	adds	r3, #20
 800a186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a18a:	633a      	str	r2, [r7, #48]	; 0x30
 800a18c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e3      	bne.n	800a166 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	330c      	adds	r3, #12
 800a1b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 0310 	bic.w	r3, r3, #16
 800a1c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	330c      	adds	r3, #12
 800a1cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a1d0:	61fa      	str	r2, [r7, #28]
 800a1d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	69b9      	ldr	r1, [r7, #24]
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e3      	bne.n	800a1ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f83e 	bl	800a26c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1f0:	e023      	b.n	800a23a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d009      	beq.n	800a212 <HAL_UART_IRQHandler+0x4ea>
 800a1fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f959 	bl	800a4c2 <UART_Transmit_IT>
    return;
 800a210:	e014      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00e      	beq.n	800a23c <HAL_UART_IRQHandler+0x514>
 800a21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a226:	2b00      	cmp	r3, #0
 800a228:	d008      	beq.n	800a23c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f999 	bl	800a562 <UART_EndTransmit_IT>
    return;
 800a230:	e004      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
    return;
 800a232:	bf00      	nop
 800a234:	e002      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
      return;
 800a236:	bf00      	nop
 800a238:	e000      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
      return;
 800a23a:	bf00      	nop
  }
}
 800a23c:	37e8      	adds	r7, #232	; 0xe8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop

0800a244 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b090      	sub	sp, #64	; 0x40
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	4613      	mov	r3, r2
 800a292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a294:	e050      	b.n	800a338 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29c:	d04c      	beq.n	800a338 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d007      	beq.n	800a2b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2a4:	f7fb f9ba 	bl	800561c <HAL_GetTick>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d241      	bcs.n	800a338 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	330c      	adds	r3, #12
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	330c      	adds	r3, #12
 800a2d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2d4:	637a      	str	r2, [r7, #52]	; 0x34
 800a2d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e5      	bne.n	800a2b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3314      	adds	r3, #20
 800a2ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f023 0301 	bic.w	r3, r3, #1
 800a2fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3314      	adds	r3, #20
 800a306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a308:	623a      	str	r2, [r7, #32]
 800a30a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	69f9      	ldr	r1, [r7, #28]
 800a30e:	6a3a      	ldr	r2, [r7, #32]
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	61bb      	str	r3, [r7, #24]
   return(result);
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2220      	movs	r2, #32
 800a320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2220      	movs	r2, #32
 800a328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e00f      	b.n	800a358 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	4013      	ands	r3, r2
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	429a      	cmp	r2, r3
 800a346:	bf0c      	ite	eq
 800a348:	2301      	moveq	r3, #1
 800a34a:	2300      	movne	r3, #0
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	461a      	mov	r2, r3
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	429a      	cmp	r2, r3
 800a354:	d09f      	beq.n	800a296 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3740      	adds	r7, #64	; 0x40
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	4613      	mov	r3, r2
 800a36c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	88fa      	ldrh	r2, [r7, #6]
 800a378:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	88fa      	ldrh	r2, [r7, #6]
 800a37e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2222      	movs	r2, #34	; 0x22
 800a38a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3a4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	695a      	ldr	r2, [r3, #20]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f042 0201 	orr.w	r2, r2, #1
 800a3b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f042 0220 	orr.w	r2, r2, #32
 800a3c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b095      	sub	sp, #84	; 0x54
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	330c      	adds	r3, #12
 800a3e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e6:	e853 3f00 	ldrex	r3, [r3]
 800a3ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	330c      	adds	r3, #12
 800a3fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3fc:	643a      	str	r2, [r7, #64]	; 0x40
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a404:	e841 2300 	strex	r3, r2, [r1]
 800a408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e5      	bne.n	800a3dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3314      	adds	r3, #20
 800a416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	f023 0301 	bic.w	r3, r3, #1
 800a426:	64bb      	str	r3, [r7, #72]	; 0x48
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3314      	adds	r3, #20
 800a42e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a430:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e5      	bne.n	800a410 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d119      	bne.n	800a480 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	330c      	adds	r3, #12
 800a452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	e853 3f00 	ldrex	r3, [r3]
 800a45a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f023 0310 	bic.w	r3, r3, #16
 800a462:	647b      	str	r3, [r7, #68]	; 0x44
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	330c      	adds	r3, #12
 800a46a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a46c:	61ba      	str	r2, [r7, #24]
 800a46e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6979      	ldr	r1, [r7, #20]
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	613b      	str	r3, [r7, #16]
   return(result);
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e5      	bne.n	800a44c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2220      	movs	r2, #32
 800a484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a48e:	bf00      	nop
 800a490:	3754      	adds	r7, #84	; 0x54
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff fecf 	bl	800a258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ba:	bf00      	nop
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b21      	cmp	r3, #33	; 0x21
 800a4d4:	d13e      	bne.n	800a554 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4de:	d114      	bne.n	800a50a <UART_Transmit_IT+0x48>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d110      	bne.n	800a50a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	1c9a      	adds	r2, r3, #2
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	621a      	str	r2, [r3, #32]
 800a508:	e008      	b.n	800a51c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	1c59      	adds	r1, r3, #1
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	6211      	str	r1, [r2, #32]
 800a514:	781a      	ldrb	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a520:	b29b      	uxth	r3, r3
 800a522:	3b01      	subs	r3, #1
 800a524:	b29b      	uxth	r3, r3
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	4619      	mov	r1, r3
 800a52a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10f      	bne.n	800a550 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68da      	ldr	r2, [r3, #12]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a53e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68da      	ldr	r2, [r3, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a54e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	e000      	b.n	800a556 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a554:	2302      	movs	r3, #2
  }
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a578:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2220      	movs	r2, #32
 800a57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fe5e 	bl	800a244 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b08c      	sub	sp, #48	; 0x30
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b22      	cmp	r3, #34	; 0x22
 800a5a4:	f040 80ab 	bne.w	800a6fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b0:	d117      	bne.n	800a5e2 <UART_Receive_IT+0x50>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d113      	bne.n	800a5e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	1c9a      	adds	r2, r3, #2
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	629a      	str	r2, [r3, #40]	; 0x28
 800a5e0:	e026      	b.n	800a630 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f4:	d007      	beq.n	800a606 <UART_Receive_IT+0x74>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10a      	bne.n	800a614 <UART_Receive_IT+0x82>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d106      	bne.n	800a614 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	701a      	strb	r2, [r3, #0]
 800a612:	e008      	b.n	800a626 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a620:	b2da      	uxtb	r2, r3
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	b29b      	uxth	r3, r3
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	4619      	mov	r1, r3
 800a63e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a640:	2b00      	cmp	r3, #0
 800a642:	d15a      	bne.n	800a6fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0220 	bic.w	r2, r2, #32
 800a652:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	695a      	ldr	r2, [r3, #20]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 0201 	bic.w	r2, r2, #1
 800a672:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2220      	movs	r2, #32
 800a678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a680:	2b01      	cmp	r3, #1
 800a682:	d135      	bne.n	800a6f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	330c      	adds	r3, #12
 800a690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	613b      	str	r3, [r7, #16]
   return(result);
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f023 0310 	bic.w	r3, r3, #16
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	330c      	adds	r3, #12
 800a6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6aa:	623a      	str	r2, [r7, #32]
 800a6ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ae:	69f9      	ldr	r1, [r7, #28]
 800a6b0:	6a3a      	ldr	r2, [r7, #32]
 800a6b2:	e841 2300 	strex	r3, r2, [r1]
 800a6b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1e5      	bne.n	800a68a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 0310 	and.w	r3, r3, #16
 800a6c8:	2b10      	cmp	r3, #16
 800a6ca:	d10a      	bne.n	800a6e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60fb      	str	r3, [r7, #12]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff fdbf 	bl	800a26c <HAL_UARTEx_RxEventCallback>
 800a6ee:	e002      	b.n	800a6f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7fa fe91 	bl	8005418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	e002      	b.n	800a700 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e000      	b.n	800a700 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a6fe:	2302      	movs	r3, #2
  }
}
 800a700:	4618      	mov	r0, r3
 800a702:	3730      	adds	r7, #48	; 0x30
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	b09f      	sub	sp, #124	; 0x7c
 800a70e:	af00      	add	r7, sp, #0
 800a710:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a71c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a71e:	68d9      	ldr	r1, [r3, #12]
 800a720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	ea40 0301 	orr.w	r3, r0, r1
 800a728:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	431a      	orrs	r2, r3
 800a734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	431a      	orrs	r2, r3
 800a73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	4313      	orrs	r3, r2
 800a740:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a74c:	f021 010c 	bic.w	r1, r1, #12
 800a750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a756:	430b      	orrs	r3, r1
 800a758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a766:	6999      	ldr	r1, [r3, #24]
 800a768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	ea40 0301 	orr.w	r3, r0, r1
 800a770:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	4bc5      	ldr	r3, [pc, #788]	; (800aa8c <UART_SetConfig+0x384>)
 800a778:	429a      	cmp	r2, r3
 800a77a:	d004      	beq.n	800a786 <UART_SetConfig+0x7e>
 800a77c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	4bc3      	ldr	r3, [pc, #780]	; (800aa90 <UART_SetConfig+0x388>)
 800a782:	429a      	cmp	r2, r3
 800a784:	d103      	bne.n	800a78e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a786:	f7fd fc71 	bl	800806c <HAL_RCC_GetPCLK2Freq>
 800a78a:	6778      	str	r0, [r7, #116]	; 0x74
 800a78c:	e002      	b.n	800a794 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a78e:	f7fd fc59 	bl	8008044 <HAL_RCC_GetPCLK1Freq>
 800a792:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a796:	69db      	ldr	r3, [r3, #28]
 800a798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a79c:	f040 80b6 	bne.w	800a90c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7a2:	461c      	mov	r4, r3
 800a7a4:	f04f 0500 	mov.w	r5, #0
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	462b      	mov	r3, r5
 800a7ac:	1891      	adds	r1, r2, r2
 800a7ae:	6439      	str	r1, [r7, #64]	; 0x40
 800a7b0:	415b      	adcs	r3, r3
 800a7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a7b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a7b8:	1912      	adds	r2, r2, r4
 800a7ba:	eb45 0303 	adc.w	r3, r5, r3
 800a7be:	f04f 0000 	mov.w	r0, #0
 800a7c2:	f04f 0100 	mov.w	r1, #0
 800a7c6:	00d9      	lsls	r1, r3, #3
 800a7c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7cc:	00d0      	lsls	r0, r2, #3
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	1911      	adds	r1, r2, r4
 800a7d4:	6639      	str	r1, [r7, #96]	; 0x60
 800a7d6:	416b      	adcs	r3, r5
 800a7d8:	667b      	str	r3, [r7, #100]	; 0x64
 800a7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f04f 0300 	mov.w	r3, #0
 800a7e4:	1891      	adds	r1, r2, r2
 800a7e6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a7e8:	415b      	adcs	r3, r3
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a7f4:	f7f6 fa40 	bl	8000c78 <__aeabi_uldivmod>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4ba5      	ldr	r3, [pc, #660]	; (800aa94 <UART_SetConfig+0x38c>)
 800a7fe:	fba3 2302 	umull	r2, r3, r3, r2
 800a802:	095b      	lsrs	r3, r3, #5
 800a804:	011e      	lsls	r6, r3, #4
 800a806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a808:	461c      	mov	r4, r3
 800a80a:	f04f 0500 	mov.w	r5, #0
 800a80e:	4622      	mov	r2, r4
 800a810:	462b      	mov	r3, r5
 800a812:	1891      	adds	r1, r2, r2
 800a814:	6339      	str	r1, [r7, #48]	; 0x30
 800a816:	415b      	adcs	r3, r3
 800a818:	637b      	str	r3, [r7, #52]	; 0x34
 800a81a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a81e:	1912      	adds	r2, r2, r4
 800a820:	eb45 0303 	adc.w	r3, r5, r3
 800a824:	f04f 0000 	mov.w	r0, #0
 800a828:	f04f 0100 	mov.w	r1, #0
 800a82c:	00d9      	lsls	r1, r3, #3
 800a82e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a832:	00d0      	lsls	r0, r2, #3
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	1911      	adds	r1, r2, r4
 800a83a:	65b9      	str	r1, [r7, #88]	; 0x58
 800a83c:	416b      	adcs	r3, r5
 800a83e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	461a      	mov	r2, r3
 800a846:	f04f 0300 	mov.w	r3, #0
 800a84a:	1891      	adds	r1, r2, r2
 800a84c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a84e:	415b      	adcs	r3, r3
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a856:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a85a:	f7f6 fa0d 	bl	8000c78 <__aeabi_uldivmod>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4b8c      	ldr	r3, [pc, #560]	; (800aa94 <UART_SetConfig+0x38c>)
 800a864:	fba3 1302 	umull	r1, r3, r3, r2
 800a868:	095b      	lsrs	r3, r3, #5
 800a86a:	2164      	movs	r1, #100	; 0x64
 800a86c:	fb01 f303 	mul.w	r3, r1, r3
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	3332      	adds	r3, #50	; 0x32
 800a876:	4a87      	ldr	r2, [pc, #540]	; (800aa94 <UART_SetConfig+0x38c>)
 800a878:	fba2 2303 	umull	r2, r3, r2, r3
 800a87c:	095b      	lsrs	r3, r3, #5
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a884:	441e      	add	r6, r3
 800a886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a888:	4618      	mov	r0, r3
 800a88a:	f04f 0100 	mov.w	r1, #0
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	1894      	adds	r4, r2, r2
 800a894:	623c      	str	r4, [r7, #32]
 800a896:	415b      	adcs	r3, r3
 800a898:	627b      	str	r3, [r7, #36]	; 0x24
 800a89a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a89e:	1812      	adds	r2, r2, r0
 800a8a0:	eb41 0303 	adc.w	r3, r1, r3
 800a8a4:	f04f 0400 	mov.w	r4, #0
 800a8a8:	f04f 0500 	mov.w	r5, #0
 800a8ac:	00dd      	lsls	r5, r3, #3
 800a8ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a8b2:	00d4      	lsls	r4, r2, #3
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	462b      	mov	r3, r5
 800a8b8:	1814      	adds	r4, r2, r0
 800a8ba:	653c      	str	r4, [r7, #80]	; 0x50
 800a8bc:	414b      	adcs	r3, r1
 800a8be:	657b      	str	r3, [r7, #84]	; 0x54
 800a8c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	f04f 0300 	mov.w	r3, #0
 800a8ca:	1891      	adds	r1, r2, r2
 800a8cc:	61b9      	str	r1, [r7, #24]
 800a8ce:	415b      	adcs	r3, r3
 800a8d0:	61fb      	str	r3, [r7, #28]
 800a8d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a8da:	f7f6 f9cd 	bl	8000c78 <__aeabi_uldivmod>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4b6c      	ldr	r3, [pc, #432]	; (800aa94 <UART_SetConfig+0x38c>)
 800a8e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8e8:	095b      	lsrs	r3, r3, #5
 800a8ea:	2164      	movs	r1, #100	; 0x64
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	3332      	adds	r3, #50	; 0x32
 800a8f6:	4a67      	ldr	r2, [pc, #412]	; (800aa94 <UART_SetConfig+0x38c>)
 800a8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fc:	095b      	lsrs	r3, r3, #5
 800a8fe:	f003 0207 	and.w	r2, r3, #7
 800a902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4432      	add	r2, r6
 800a908:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a90a:	e0b9      	b.n	800aa80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a90c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a90e:	461c      	mov	r4, r3
 800a910:	f04f 0500 	mov.w	r5, #0
 800a914:	4622      	mov	r2, r4
 800a916:	462b      	mov	r3, r5
 800a918:	1891      	adds	r1, r2, r2
 800a91a:	6139      	str	r1, [r7, #16]
 800a91c:	415b      	adcs	r3, r3
 800a91e:	617b      	str	r3, [r7, #20]
 800a920:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a924:	1912      	adds	r2, r2, r4
 800a926:	eb45 0303 	adc.w	r3, r5, r3
 800a92a:	f04f 0000 	mov.w	r0, #0
 800a92e:	f04f 0100 	mov.w	r1, #0
 800a932:	00d9      	lsls	r1, r3, #3
 800a934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a938:	00d0      	lsls	r0, r2, #3
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	eb12 0804 	adds.w	r8, r2, r4
 800a942:	eb43 0905 	adc.w	r9, r3, r5
 800a946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f04f 0100 	mov.w	r1, #0
 800a950:	f04f 0200 	mov.w	r2, #0
 800a954:	f04f 0300 	mov.w	r3, #0
 800a958:	008b      	lsls	r3, r1, #2
 800a95a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a95e:	0082      	lsls	r2, r0, #2
 800a960:	4640      	mov	r0, r8
 800a962:	4649      	mov	r1, r9
 800a964:	f7f6 f988 	bl	8000c78 <__aeabi_uldivmod>
 800a968:	4602      	mov	r2, r0
 800a96a:	460b      	mov	r3, r1
 800a96c:	4b49      	ldr	r3, [pc, #292]	; (800aa94 <UART_SetConfig+0x38c>)
 800a96e:	fba3 2302 	umull	r2, r3, r3, r2
 800a972:	095b      	lsrs	r3, r3, #5
 800a974:	011e      	lsls	r6, r3, #4
 800a976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a978:	4618      	mov	r0, r3
 800a97a:	f04f 0100 	mov.w	r1, #0
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	1894      	adds	r4, r2, r2
 800a984:	60bc      	str	r4, [r7, #8]
 800a986:	415b      	adcs	r3, r3
 800a988:	60fb      	str	r3, [r7, #12]
 800a98a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a98e:	1812      	adds	r2, r2, r0
 800a990:	eb41 0303 	adc.w	r3, r1, r3
 800a994:	f04f 0400 	mov.w	r4, #0
 800a998:	f04f 0500 	mov.w	r5, #0
 800a99c:	00dd      	lsls	r5, r3, #3
 800a99e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a9a2:	00d4      	lsls	r4, r2, #3
 800a9a4:	4622      	mov	r2, r4
 800a9a6:	462b      	mov	r3, r5
 800a9a8:	1814      	adds	r4, r2, r0
 800a9aa:	64bc      	str	r4, [r7, #72]	; 0x48
 800a9ac:	414b      	adcs	r3, r1
 800a9ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f04f 0100 	mov.w	r1, #0
 800a9ba:	f04f 0200 	mov.w	r2, #0
 800a9be:	f04f 0300 	mov.w	r3, #0
 800a9c2:	008b      	lsls	r3, r1, #2
 800a9c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9c8:	0082      	lsls	r2, r0, #2
 800a9ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a9ce:	f7f6 f953 	bl	8000c78 <__aeabi_uldivmod>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4b2f      	ldr	r3, [pc, #188]	; (800aa94 <UART_SetConfig+0x38c>)
 800a9d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9dc:	095b      	lsrs	r3, r3, #5
 800a9de:	2164      	movs	r1, #100	; 0x64
 800a9e0:	fb01 f303 	mul.w	r3, r1, r3
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	3332      	adds	r3, #50	; 0x32
 800a9ea:	4a2a      	ldr	r2, [pc, #168]	; (800aa94 <UART_SetConfig+0x38c>)
 800a9ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f0:	095b      	lsrs	r3, r3, #5
 800a9f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9f6:	441e      	add	r6, r3
 800a9f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f04f 0100 	mov.w	r1, #0
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	1894      	adds	r4, r2, r2
 800aa06:	603c      	str	r4, [r7, #0]
 800aa08:	415b      	adcs	r3, r3
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa10:	1812      	adds	r2, r2, r0
 800aa12:	eb41 0303 	adc.w	r3, r1, r3
 800aa16:	f04f 0400 	mov.w	r4, #0
 800aa1a:	f04f 0500 	mov.w	r5, #0
 800aa1e:	00dd      	lsls	r5, r3, #3
 800aa20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa24:	00d4      	lsls	r4, r2, #3
 800aa26:	4622      	mov	r2, r4
 800aa28:	462b      	mov	r3, r5
 800aa2a:	eb12 0a00 	adds.w	sl, r2, r0
 800aa2e:	eb43 0b01 	adc.w	fp, r3, r1
 800aa32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f04f 0100 	mov.w	r1, #0
 800aa3c:	f04f 0200 	mov.w	r2, #0
 800aa40:	f04f 0300 	mov.w	r3, #0
 800aa44:	008b      	lsls	r3, r1, #2
 800aa46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa4a:	0082      	lsls	r2, r0, #2
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	4659      	mov	r1, fp
 800aa50:	f7f6 f912 	bl	8000c78 <__aeabi_uldivmod>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4b0e      	ldr	r3, [pc, #56]	; (800aa94 <UART_SetConfig+0x38c>)
 800aa5a:	fba3 1302 	umull	r1, r3, r3, r2
 800aa5e:	095b      	lsrs	r3, r3, #5
 800aa60:	2164      	movs	r1, #100	; 0x64
 800aa62:	fb01 f303 	mul.w	r3, r1, r3
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	3332      	adds	r3, #50	; 0x32
 800aa6c:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <UART_SetConfig+0x38c>)
 800aa6e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa72:	095b      	lsrs	r3, r3, #5
 800aa74:	f003 020f 	and.w	r2, r3, #15
 800aa78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4432      	add	r2, r6
 800aa7e:	609a      	str	r2, [r3, #8]
}
 800aa80:	bf00      	nop
 800aa82:	377c      	adds	r7, #124	; 0x7c
 800aa84:	46bd      	mov	sp, r7
 800aa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8a:	bf00      	nop
 800aa8c:	40011000 	.word	0x40011000
 800aa90:	40011400 	.word	0x40011400
 800aa94:	51eb851f 	.word	0x51eb851f

0800aa98 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4b20      	ldr	r3, [pc, #128]	; (800ab38 <FSMC_NORSRAM_Init+0xa0>)
 800aab6:	4013      	ands	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aac2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800aac8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800aace:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800aad4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800aada:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800aae0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800aae6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800aaec:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800aaf2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800aaf8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800aafe:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800ab04:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d103      	bne.n	800ab1c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab1a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	fff00080 	.word	0xfff00080

0800ab3c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab56:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ab5e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ab6a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ab72:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ab7a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	3b01      	subs	r3, #1
 800ab82:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ab84:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	3b02      	subs	r3, #2
 800ab8c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ab8e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ab94:	4313      	orrs	r3, r2
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6979      	ldr	r1, [r7, #20]
 800aba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
	...

0800abb8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abd0:	d122      	bne.n	800ac18 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abda:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	4b15      	ldr	r3, [pc, #84]	; (800ac34 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800abee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800abf6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800abfe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ac04:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	6979      	ldr	r1, [r7, #20]
 800ac12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ac16:	e005      	b.n	800ac24 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ac20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	371c      	adds	r7, #28
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	cff00000 	.word	0xcff00000

0800ac38 <__errno>:
 800ac38:	4b01      	ldr	r3, [pc, #4]	; (800ac40 <__errno+0x8>)
 800ac3a:	6818      	ldr	r0, [r3, #0]
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	20000068 	.word	0x20000068

0800ac44 <__libc_init_array>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	4d0d      	ldr	r5, [pc, #52]	; (800ac7c <__libc_init_array+0x38>)
 800ac48:	4c0d      	ldr	r4, [pc, #52]	; (800ac80 <__libc_init_array+0x3c>)
 800ac4a:	1b64      	subs	r4, r4, r5
 800ac4c:	10a4      	asrs	r4, r4, #2
 800ac4e:	2600      	movs	r6, #0
 800ac50:	42a6      	cmp	r6, r4
 800ac52:	d109      	bne.n	800ac68 <__libc_init_array+0x24>
 800ac54:	4d0b      	ldr	r5, [pc, #44]	; (800ac84 <__libc_init_array+0x40>)
 800ac56:	4c0c      	ldr	r4, [pc, #48]	; (800ac88 <__libc_init_array+0x44>)
 800ac58:	f002 f868 	bl	800cd2c <_init>
 800ac5c:	1b64      	subs	r4, r4, r5
 800ac5e:	10a4      	asrs	r4, r4, #2
 800ac60:	2600      	movs	r6, #0
 800ac62:	42a6      	cmp	r6, r4
 800ac64:	d105      	bne.n	800ac72 <__libc_init_array+0x2e>
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac6c:	4798      	blx	r3
 800ac6e:	3601      	adds	r6, #1
 800ac70:	e7ee      	b.n	800ac50 <__libc_init_array+0xc>
 800ac72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac76:	4798      	blx	r3
 800ac78:	3601      	adds	r6, #1
 800ac7a:	e7f2      	b.n	800ac62 <__libc_init_array+0x1e>
 800ac7c:	080f0ff8 	.word	0x080f0ff8
 800ac80:	080f0ff8 	.word	0x080f0ff8
 800ac84:	080f0ff8 	.word	0x080f0ff8
 800ac88:	080f0ffc 	.word	0x080f0ffc

0800ac8c <__itoa>:
 800ac8c:	1e93      	subs	r3, r2, #2
 800ac8e:	2b22      	cmp	r3, #34	; 0x22
 800ac90:	b510      	push	{r4, lr}
 800ac92:	460c      	mov	r4, r1
 800ac94:	d904      	bls.n	800aca0 <__itoa+0x14>
 800ac96:	2300      	movs	r3, #0
 800ac98:	700b      	strb	r3, [r1, #0]
 800ac9a:	461c      	mov	r4, r3
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	bd10      	pop	{r4, pc}
 800aca0:	2a0a      	cmp	r2, #10
 800aca2:	d109      	bne.n	800acb8 <__itoa+0x2c>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	da07      	bge.n	800acb8 <__itoa+0x2c>
 800aca8:	232d      	movs	r3, #45	; 0x2d
 800acaa:	700b      	strb	r3, [r1, #0]
 800acac:	4240      	negs	r0, r0
 800acae:	2101      	movs	r1, #1
 800acb0:	4421      	add	r1, r4
 800acb2:	f000 f84d 	bl	800ad50 <__utoa>
 800acb6:	e7f1      	b.n	800ac9c <__itoa+0x10>
 800acb8:	2100      	movs	r1, #0
 800acba:	e7f9      	b.n	800acb0 <__itoa+0x24>

0800acbc <itoa>:
 800acbc:	f7ff bfe6 	b.w	800ac8c <__itoa>

0800acc0 <memset>:
 800acc0:	4402      	add	r2, r0
 800acc2:	4603      	mov	r3, r0
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d100      	bne.n	800acca <memset+0xa>
 800acc8:	4770      	bx	lr
 800acca:	f803 1b01 	strb.w	r1, [r3], #1
 800acce:	e7f9      	b.n	800acc4 <memset+0x4>

0800acd0 <rand>:
 800acd0:	4b17      	ldr	r3, [pc, #92]	; (800ad30 <rand+0x60>)
 800acd2:	b510      	push	{r4, lr}
 800acd4:	681c      	ldr	r4, [r3, #0]
 800acd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800acd8:	b9b3      	cbnz	r3, 800ad08 <rand+0x38>
 800acda:	2018      	movs	r0, #24
 800acdc:	f000 f8aa 	bl	800ae34 <malloc>
 800ace0:	63a0      	str	r0, [r4, #56]	; 0x38
 800ace2:	b928      	cbnz	r0, 800acf0 <rand+0x20>
 800ace4:	4602      	mov	r2, r0
 800ace6:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <rand+0x64>)
 800ace8:	4813      	ldr	r0, [pc, #76]	; (800ad38 <rand+0x68>)
 800acea:	214e      	movs	r1, #78	; 0x4e
 800acec:	f000 f872 	bl	800add4 <__assert_func>
 800acf0:	4a12      	ldr	r2, [pc, #72]	; (800ad3c <rand+0x6c>)
 800acf2:	4b13      	ldr	r3, [pc, #76]	; (800ad40 <rand+0x70>)
 800acf4:	e9c0 2300 	strd	r2, r3, [r0]
 800acf8:	4b12      	ldr	r3, [pc, #72]	; (800ad44 <rand+0x74>)
 800acfa:	6083      	str	r3, [r0, #8]
 800acfc:	230b      	movs	r3, #11
 800acfe:	8183      	strh	r3, [r0, #12]
 800ad00:	2201      	movs	r2, #1
 800ad02:	2300      	movs	r3, #0
 800ad04:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ad08:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ad0a:	480f      	ldr	r0, [pc, #60]	; (800ad48 <rand+0x78>)
 800ad0c:	690a      	ldr	r2, [r1, #16]
 800ad0e:	694b      	ldr	r3, [r1, #20]
 800ad10:	4c0e      	ldr	r4, [pc, #56]	; (800ad4c <rand+0x7c>)
 800ad12:	4350      	muls	r0, r2
 800ad14:	fb04 0003 	mla	r0, r4, r3, r0
 800ad18:	fba2 3404 	umull	r3, r4, r2, r4
 800ad1c:	1c5a      	adds	r2, r3, #1
 800ad1e:	4404      	add	r4, r0
 800ad20:	f144 0000 	adc.w	r0, r4, #0
 800ad24:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ad28:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ad2c:	bd10      	pop	{r4, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000068 	.word	0x20000068
 800ad34:	080f0e44 	.word	0x080f0e44
 800ad38:	080f0e5b 	.word	0x080f0e5b
 800ad3c:	abcd330e 	.word	0xabcd330e
 800ad40:	e66d1234 	.word	0xe66d1234
 800ad44:	0005deec 	.word	0x0005deec
 800ad48:	5851f42d 	.word	0x5851f42d
 800ad4c:	4c957f2d 	.word	0x4c957f2d

0800ad50 <__utoa>:
 800ad50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad52:	4c1f      	ldr	r4, [pc, #124]	; (800add0 <__utoa+0x80>)
 800ad54:	b08b      	sub	sp, #44	; 0x2c
 800ad56:	4605      	mov	r5, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	466e      	mov	r6, sp
 800ad5c:	f104 0c20 	add.w	ip, r4, #32
 800ad60:	6820      	ldr	r0, [r4, #0]
 800ad62:	6861      	ldr	r1, [r4, #4]
 800ad64:	4637      	mov	r7, r6
 800ad66:	c703      	stmia	r7!, {r0, r1}
 800ad68:	3408      	adds	r4, #8
 800ad6a:	4564      	cmp	r4, ip
 800ad6c:	463e      	mov	r6, r7
 800ad6e:	d1f7      	bne.n	800ad60 <__utoa+0x10>
 800ad70:	7921      	ldrb	r1, [r4, #4]
 800ad72:	7139      	strb	r1, [r7, #4]
 800ad74:	1e91      	subs	r1, r2, #2
 800ad76:	6820      	ldr	r0, [r4, #0]
 800ad78:	6038      	str	r0, [r7, #0]
 800ad7a:	2922      	cmp	r1, #34	; 0x22
 800ad7c:	f04f 0100 	mov.w	r1, #0
 800ad80:	d904      	bls.n	800ad8c <__utoa+0x3c>
 800ad82:	7019      	strb	r1, [r3, #0]
 800ad84:	460b      	mov	r3, r1
 800ad86:	4618      	mov	r0, r3
 800ad88:	b00b      	add	sp, #44	; 0x2c
 800ad8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad8c:	1e58      	subs	r0, r3, #1
 800ad8e:	4684      	mov	ip, r0
 800ad90:	fbb5 f7f2 	udiv	r7, r5, r2
 800ad94:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800ad98:	fb02 5617 	mls	r6, r2, r7, r5
 800ad9c:	4476      	add	r6, lr
 800ad9e:	460c      	mov	r4, r1
 800ada0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ada4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ada8:	462e      	mov	r6, r5
 800adaa:	42b2      	cmp	r2, r6
 800adac:	f101 0101 	add.w	r1, r1, #1
 800adb0:	463d      	mov	r5, r7
 800adb2:	d9ed      	bls.n	800ad90 <__utoa+0x40>
 800adb4:	2200      	movs	r2, #0
 800adb6:	545a      	strb	r2, [r3, r1]
 800adb8:	1919      	adds	r1, r3, r4
 800adba:	1aa5      	subs	r5, r4, r2
 800adbc:	42aa      	cmp	r2, r5
 800adbe:	dae2      	bge.n	800ad86 <__utoa+0x36>
 800adc0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800adc4:	780e      	ldrb	r6, [r1, #0]
 800adc6:	7006      	strb	r6, [r0, #0]
 800adc8:	3201      	adds	r2, #1
 800adca:	f801 5901 	strb.w	r5, [r1], #-1
 800adce:	e7f4      	b.n	800adba <__utoa+0x6a>
 800add0:	080f0eba 	.word	0x080f0eba

0800add4 <__assert_func>:
 800add4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800add6:	4614      	mov	r4, r2
 800add8:	461a      	mov	r2, r3
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <__assert_func+0x2c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4605      	mov	r5, r0
 800ade0:	68d8      	ldr	r0, [r3, #12]
 800ade2:	b14c      	cbz	r4, 800adf8 <__assert_func+0x24>
 800ade4:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <__assert_func+0x30>)
 800ade6:	9100      	str	r1, [sp, #0]
 800ade8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adec:	4906      	ldr	r1, [pc, #24]	; (800ae08 <__assert_func+0x34>)
 800adee:	462b      	mov	r3, r5
 800adf0:	f000 f80e 	bl	800ae10 <fiprintf>
 800adf4:	f000 fc8e 	bl	800b714 <abort>
 800adf8:	4b04      	ldr	r3, [pc, #16]	; (800ae0c <__assert_func+0x38>)
 800adfa:	461c      	mov	r4, r3
 800adfc:	e7f3      	b.n	800ade6 <__assert_func+0x12>
 800adfe:	bf00      	nop
 800ae00:	20000068 	.word	0x20000068
 800ae04:	080f0edf 	.word	0x080f0edf
 800ae08:	080f0eec 	.word	0x080f0eec
 800ae0c:	080f0f1a 	.word	0x080f0f1a

0800ae10 <fiprintf>:
 800ae10:	b40e      	push	{r1, r2, r3}
 800ae12:	b503      	push	{r0, r1, lr}
 800ae14:	4601      	mov	r1, r0
 800ae16:	ab03      	add	r3, sp, #12
 800ae18:	4805      	ldr	r0, [pc, #20]	; (800ae30 <fiprintf+0x20>)
 800ae1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae1e:	6800      	ldr	r0, [r0, #0]
 800ae20:	9301      	str	r3, [sp, #4]
 800ae22:	f000 f8e3 	bl	800afec <_vfiprintf_r>
 800ae26:	b002      	add	sp, #8
 800ae28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae2c:	b003      	add	sp, #12
 800ae2e:	4770      	bx	lr
 800ae30:	20000068 	.word	0x20000068

0800ae34 <malloc>:
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <malloc+0xc>)
 800ae36:	4601      	mov	r1, r0
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	f000 b853 	b.w	800aee4 <_malloc_r>
 800ae3e:	bf00      	nop
 800ae40:	20000068 	.word	0x20000068

0800ae44 <_free_r>:
 800ae44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae46:	2900      	cmp	r1, #0
 800ae48:	d048      	beq.n	800aedc <_free_r+0x98>
 800ae4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae4e:	9001      	str	r0, [sp, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f1a1 0404 	sub.w	r4, r1, #4
 800ae56:	bfb8      	it	lt
 800ae58:	18e4      	addlt	r4, r4, r3
 800ae5a:	f000 fe81 	bl	800bb60 <__malloc_lock>
 800ae5e:	4a20      	ldr	r2, [pc, #128]	; (800aee0 <_free_r+0x9c>)
 800ae60:	9801      	ldr	r0, [sp, #4]
 800ae62:	6813      	ldr	r3, [r2, #0]
 800ae64:	4615      	mov	r5, r2
 800ae66:	b933      	cbnz	r3, 800ae76 <_free_r+0x32>
 800ae68:	6063      	str	r3, [r4, #4]
 800ae6a:	6014      	str	r4, [r2, #0]
 800ae6c:	b003      	add	sp, #12
 800ae6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae72:	f000 be7b 	b.w	800bb6c <__malloc_unlock>
 800ae76:	42a3      	cmp	r3, r4
 800ae78:	d90b      	bls.n	800ae92 <_free_r+0x4e>
 800ae7a:	6821      	ldr	r1, [r4, #0]
 800ae7c:	1862      	adds	r2, r4, r1
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	bf04      	itt	eq
 800ae82:	681a      	ldreq	r2, [r3, #0]
 800ae84:	685b      	ldreq	r3, [r3, #4]
 800ae86:	6063      	str	r3, [r4, #4]
 800ae88:	bf04      	itt	eq
 800ae8a:	1852      	addeq	r2, r2, r1
 800ae8c:	6022      	streq	r2, [r4, #0]
 800ae8e:	602c      	str	r4, [r5, #0]
 800ae90:	e7ec      	b.n	800ae6c <_free_r+0x28>
 800ae92:	461a      	mov	r2, r3
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	b10b      	cbz	r3, 800ae9c <_free_r+0x58>
 800ae98:	42a3      	cmp	r3, r4
 800ae9a:	d9fa      	bls.n	800ae92 <_free_r+0x4e>
 800ae9c:	6811      	ldr	r1, [r2, #0]
 800ae9e:	1855      	adds	r5, r2, r1
 800aea0:	42a5      	cmp	r5, r4
 800aea2:	d10b      	bne.n	800aebc <_free_r+0x78>
 800aea4:	6824      	ldr	r4, [r4, #0]
 800aea6:	4421      	add	r1, r4
 800aea8:	1854      	adds	r4, r2, r1
 800aeaa:	42a3      	cmp	r3, r4
 800aeac:	6011      	str	r1, [r2, #0]
 800aeae:	d1dd      	bne.n	800ae6c <_free_r+0x28>
 800aeb0:	681c      	ldr	r4, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	6053      	str	r3, [r2, #4]
 800aeb6:	4421      	add	r1, r4
 800aeb8:	6011      	str	r1, [r2, #0]
 800aeba:	e7d7      	b.n	800ae6c <_free_r+0x28>
 800aebc:	d902      	bls.n	800aec4 <_free_r+0x80>
 800aebe:	230c      	movs	r3, #12
 800aec0:	6003      	str	r3, [r0, #0]
 800aec2:	e7d3      	b.n	800ae6c <_free_r+0x28>
 800aec4:	6825      	ldr	r5, [r4, #0]
 800aec6:	1961      	adds	r1, r4, r5
 800aec8:	428b      	cmp	r3, r1
 800aeca:	bf04      	itt	eq
 800aecc:	6819      	ldreq	r1, [r3, #0]
 800aece:	685b      	ldreq	r3, [r3, #4]
 800aed0:	6063      	str	r3, [r4, #4]
 800aed2:	bf04      	itt	eq
 800aed4:	1949      	addeq	r1, r1, r5
 800aed6:	6021      	streq	r1, [r4, #0]
 800aed8:	6054      	str	r4, [r2, #4]
 800aeda:	e7c7      	b.n	800ae6c <_free_r+0x28>
 800aedc:	b003      	add	sp, #12
 800aede:	bd30      	pop	{r4, r5, pc}
 800aee0:	2000012c 	.word	0x2000012c

0800aee4 <_malloc_r>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	1ccd      	adds	r5, r1, #3
 800aee8:	f025 0503 	bic.w	r5, r5, #3
 800aeec:	3508      	adds	r5, #8
 800aeee:	2d0c      	cmp	r5, #12
 800aef0:	bf38      	it	cc
 800aef2:	250c      	movcc	r5, #12
 800aef4:	2d00      	cmp	r5, #0
 800aef6:	4606      	mov	r6, r0
 800aef8:	db01      	blt.n	800aefe <_malloc_r+0x1a>
 800aefa:	42a9      	cmp	r1, r5
 800aefc:	d903      	bls.n	800af06 <_malloc_r+0x22>
 800aefe:	230c      	movs	r3, #12
 800af00:	6033      	str	r3, [r6, #0]
 800af02:	2000      	movs	r0, #0
 800af04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af06:	f000 fe2b 	bl	800bb60 <__malloc_lock>
 800af0a:	4921      	ldr	r1, [pc, #132]	; (800af90 <_malloc_r+0xac>)
 800af0c:	680a      	ldr	r2, [r1, #0]
 800af0e:	4614      	mov	r4, r2
 800af10:	b99c      	cbnz	r4, 800af3a <_malloc_r+0x56>
 800af12:	4f20      	ldr	r7, [pc, #128]	; (800af94 <_malloc_r+0xb0>)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	b923      	cbnz	r3, 800af22 <_malloc_r+0x3e>
 800af18:	4621      	mov	r1, r4
 800af1a:	4630      	mov	r0, r6
 800af1c:	f000 fb2a 	bl	800b574 <_sbrk_r>
 800af20:	6038      	str	r0, [r7, #0]
 800af22:	4629      	mov	r1, r5
 800af24:	4630      	mov	r0, r6
 800af26:	f000 fb25 	bl	800b574 <_sbrk_r>
 800af2a:	1c43      	adds	r3, r0, #1
 800af2c:	d123      	bne.n	800af76 <_malloc_r+0x92>
 800af2e:	230c      	movs	r3, #12
 800af30:	6033      	str	r3, [r6, #0]
 800af32:	4630      	mov	r0, r6
 800af34:	f000 fe1a 	bl	800bb6c <__malloc_unlock>
 800af38:	e7e3      	b.n	800af02 <_malloc_r+0x1e>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	1b5b      	subs	r3, r3, r5
 800af3e:	d417      	bmi.n	800af70 <_malloc_r+0x8c>
 800af40:	2b0b      	cmp	r3, #11
 800af42:	d903      	bls.n	800af4c <_malloc_r+0x68>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	441c      	add	r4, r3
 800af48:	6025      	str	r5, [r4, #0]
 800af4a:	e004      	b.n	800af56 <_malloc_r+0x72>
 800af4c:	6863      	ldr	r3, [r4, #4]
 800af4e:	42a2      	cmp	r2, r4
 800af50:	bf0c      	ite	eq
 800af52:	600b      	streq	r3, [r1, #0]
 800af54:	6053      	strne	r3, [r2, #4]
 800af56:	4630      	mov	r0, r6
 800af58:	f000 fe08 	bl	800bb6c <__malloc_unlock>
 800af5c:	f104 000b 	add.w	r0, r4, #11
 800af60:	1d23      	adds	r3, r4, #4
 800af62:	f020 0007 	bic.w	r0, r0, #7
 800af66:	1ac2      	subs	r2, r0, r3
 800af68:	d0cc      	beq.n	800af04 <_malloc_r+0x20>
 800af6a:	1a1b      	subs	r3, r3, r0
 800af6c:	50a3      	str	r3, [r4, r2]
 800af6e:	e7c9      	b.n	800af04 <_malloc_r+0x20>
 800af70:	4622      	mov	r2, r4
 800af72:	6864      	ldr	r4, [r4, #4]
 800af74:	e7cc      	b.n	800af10 <_malloc_r+0x2c>
 800af76:	1cc4      	adds	r4, r0, #3
 800af78:	f024 0403 	bic.w	r4, r4, #3
 800af7c:	42a0      	cmp	r0, r4
 800af7e:	d0e3      	beq.n	800af48 <_malloc_r+0x64>
 800af80:	1a21      	subs	r1, r4, r0
 800af82:	4630      	mov	r0, r6
 800af84:	f000 faf6 	bl	800b574 <_sbrk_r>
 800af88:	3001      	adds	r0, #1
 800af8a:	d1dd      	bne.n	800af48 <_malloc_r+0x64>
 800af8c:	e7cf      	b.n	800af2e <_malloc_r+0x4a>
 800af8e:	bf00      	nop
 800af90:	2000012c 	.word	0x2000012c
 800af94:	20000130 	.word	0x20000130

0800af98 <__sfputc_r>:
 800af98:	6893      	ldr	r3, [r2, #8]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	b410      	push	{r4}
 800afa0:	6093      	str	r3, [r2, #8]
 800afa2:	da08      	bge.n	800afb6 <__sfputc_r+0x1e>
 800afa4:	6994      	ldr	r4, [r2, #24]
 800afa6:	42a3      	cmp	r3, r4
 800afa8:	db01      	blt.n	800afae <__sfputc_r+0x16>
 800afaa:	290a      	cmp	r1, #10
 800afac:	d103      	bne.n	800afb6 <__sfputc_r+0x1e>
 800afae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afb2:	f000 baef 	b.w	800b594 <__swbuf_r>
 800afb6:	6813      	ldr	r3, [r2, #0]
 800afb8:	1c58      	adds	r0, r3, #1
 800afba:	6010      	str	r0, [r2, #0]
 800afbc:	7019      	strb	r1, [r3, #0]
 800afbe:	4608      	mov	r0, r1
 800afc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <__sfputs_r>:
 800afc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc8:	4606      	mov	r6, r0
 800afca:	460f      	mov	r7, r1
 800afcc:	4614      	mov	r4, r2
 800afce:	18d5      	adds	r5, r2, r3
 800afd0:	42ac      	cmp	r4, r5
 800afd2:	d101      	bne.n	800afd8 <__sfputs_r+0x12>
 800afd4:	2000      	movs	r0, #0
 800afd6:	e007      	b.n	800afe8 <__sfputs_r+0x22>
 800afd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afdc:	463a      	mov	r2, r7
 800afde:	4630      	mov	r0, r6
 800afe0:	f7ff ffda 	bl	800af98 <__sfputc_r>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d1f3      	bne.n	800afd0 <__sfputs_r+0xa>
 800afe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afec <_vfiprintf_r>:
 800afec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff0:	460d      	mov	r5, r1
 800aff2:	b09d      	sub	sp, #116	; 0x74
 800aff4:	4614      	mov	r4, r2
 800aff6:	4698      	mov	r8, r3
 800aff8:	4606      	mov	r6, r0
 800affa:	b118      	cbz	r0, 800b004 <_vfiprintf_r+0x18>
 800affc:	6983      	ldr	r3, [r0, #24]
 800affe:	b90b      	cbnz	r3, 800b004 <_vfiprintf_r+0x18>
 800b000:	f000 fcaa 	bl	800b958 <__sinit>
 800b004:	4b89      	ldr	r3, [pc, #548]	; (800b22c <_vfiprintf_r+0x240>)
 800b006:	429d      	cmp	r5, r3
 800b008:	d11b      	bne.n	800b042 <_vfiprintf_r+0x56>
 800b00a:	6875      	ldr	r5, [r6, #4]
 800b00c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b00e:	07d9      	lsls	r1, r3, #31
 800b010:	d405      	bmi.n	800b01e <_vfiprintf_r+0x32>
 800b012:	89ab      	ldrh	r3, [r5, #12]
 800b014:	059a      	lsls	r2, r3, #22
 800b016:	d402      	bmi.n	800b01e <_vfiprintf_r+0x32>
 800b018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b01a:	f000 fd3b 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b01e:	89ab      	ldrh	r3, [r5, #12]
 800b020:	071b      	lsls	r3, r3, #28
 800b022:	d501      	bpl.n	800b028 <_vfiprintf_r+0x3c>
 800b024:	692b      	ldr	r3, [r5, #16]
 800b026:	b9eb      	cbnz	r3, 800b064 <_vfiprintf_r+0x78>
 800b028:	4629      	mov	r1, r5
 800b02a:	4630      	mov	r0, r6
 800b02c:	f000 fb04 	bl	800b638 <__swsetup_r>
 800b030:	b1c0      	cbz	r0, 800b064 <_vfiprintf_r+0x78>
 800b032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b034:	07dc      	lsls	r4, r3, #31
 800b036:	d50e      	bpl.n	800b056 <_vfiprintf_r+0x6a>
 800b038:	f04f 30ff 	mov.w	r0, #4294967295
 800b03c:	b01d      	add	sp, #116	; 0x74
 800b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b042:	4b7b      	ldr	r3, [pc, #492]	; (800b230 <_vfiprintf_r+0x244>)
 800b044:	429d      	cmp	r5, r3
 800b046:	d101      	bne.n	800b04c <_vfiprintf_r+0x60>
 800b048:	68b5      	ldr	r5, [r6, #8]
 800b04a:	e7df      	b.n	800b00c <_vfiprintf_r+0x20>
 800b04c:	4b79      	ldr	r3, [pc, #484]	; (800b234 <_vfiprintf_r+0x248>)
 800b04e:	429d      	cmp	r5, r3
 800b050:	bf08      	it	eq
 800b052:	68f5      	ldreq	r5, [r6, #12]
 800b054:	e7da      	b.n	800b00c <_vfiprintf_r+0x20>
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	0598      	lsls	r0, r3, #22
 800b05a:	d4ed      	bmi.n	800b038 <_vfiprintf_r+0x4c>
 800b05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b05e:	f000 fd1a 	bl	800ba96 <__retarget_lock_release_recursive>
 800b062:	e7e9      	b.n	800b038 <_vfiprintf_r+0x4c>
 800b064:	2300      	movs	r3, #0
 800b066:	9309      	str	r3, [sp, #36]	; 0x24
 800b068:	2320      	movs	r3, #32
 800b06a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b072:	2330      	movs	r3, #48	; 0x30
 800b074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b238 <_vfiprintf_r+0x24c>
 800b078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b07c:	f04f 0901 	mov.w	r9, #1
 800b080:	4623      	mov	r3, r4
 800b082:	469a      	mov	sl, r3
 800b084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b088:	b10a      	cbz	r2, 800b08e <_vfiprintf_r+0xa2>
 800b08a:	2a25      	cmp	r2, #37	; 0x25
 800b08c:	d1f9      	bne.n	800b082 <_vfiprintf_r+0x96>
 800b08e:	ebba 0b04 	subs.w	fp, sl, r4
 800b092:	d00b      	beq.n	800b0ac <_vfiprintf_r+0xc0>
 800b094:	465b      	mov	r3, fp
 800b096:	4622      	mov	r2, r4
 800b098:	4629      	mov	r1, r5
 800b09a:	4630      	mov	r0, r6
 800b09c:	f7ff ff93 	bl	800afc6 <__sfputs_r>
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	f000 80aa 	beq.w	800b1fa <_vfiprintf_r+0x20e>
 800b0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0a8:	445a      	add	r2, fp
 800b0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 80a2 	beq.w	800b1fa <_vfiprintf_r+0x20e>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0c0:	f10a 0a01 	add.w	sl, sl, #1
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b0ce:	4654      	mov	r4, sl
 800b0d0:	2205      	movs	r2, #5
 800b0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d6:	4858      	ldr	r0, [pc, #352]	; (800b238 <_vfiprintf_r+0x24c>)
 800b0d8:	f7f5 f87a 	bl	80001d0 <memchr>
 800b0dc:	9a04      	ldr	r2, [sp, #16]
 800b0de:	b9d8      	cbnz	r0, 800b118 <_vfiprintf_r+0x12c>
 800b0e0:	06d1      	lsls	r1, r2, #27
 800b0e2:	bf44      	itt	mi
 800b0e4:	2320      	movmi	r3, #32
 800b0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0ea:	0713      	lsls	r3, r2, #28
 800b0ec:	bf44      	itt	mi
 800b0ee:	232b      	movmi	r3, #43	; 0x2b
 800b0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b0fa:	d015      	beq.n	800b128 <_vfiprintf_r+0x13c>
 800b0fc:	9a07      	ldr	r2, [sp, #28]
 800b0fe:	4654      	mov	r4, sl
 800b100:	2000      	movs	r0, #0
 800b102:	f04f 0c0a 	mov.w	ip, #10
 800b106:	4621      	mov	r1, r4
 800b108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b10c:	3b30      	subs	r3, #48	; 0x30
 800b10e:	2b09      	cmp	r3, #9
 800b110:	d94e      	bls.n	800b1b0 <_vfiprintf_r+0x1c4>
 800b112:	b1b0      	cbz	r0, 800b142 <_vfiprintf_r+0x156>
 800b114:	9207      	str	r2, [sp, #28]
 800b116:	e014      	b.n	800b142 <_vfiprintf_r+0x156>
 800b118:	eba0 0308 	sub.w	r3, r0, r8
 800b11c:	fa09 f303 	lsl.w	r3, r9, r3
 800b120:	4313      	orrs	r3, r2
 800b122:	9304      	str	r3, [sp, #16]
 800b124:	46a2      	mov	sl, r4
 800b126:	e7d2      	b.n	800b0ce <_vfiprintf_r+0xe2>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	1d19      	adds	r1, r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	9103      	str	r1, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfbb      	ittet	lt
 800b134:	425b      	neglt	r3, r3
 800b136:	f042 0202 	orrlt.w	r2, r2, #2
 800b13a:	9307      	strge	r3, [sp, #28]
 800b13c:	9307      	strlt	r3, [sp, #28]
 800b13e:	bfb8      	it	lt
 800b140:	9204      	strlt	r2, [sp, #16]
 800b142:	7823      	ldrb	r3, [r4, #0]
 800b144:	2b2e      	cmp	r3, #46	; 0x2e
 800b146:	d10c      	bne.n	800b162 <_vfiprintf_r+0x176>
 800b148:	7863      	ldrb	r3, [r4, #1]
 800b14a:	2b2a      	cmp	r3, #42	; 0x2a
 800b14c:	d135      	bne.n	800b1ba <_vfiprintf_r+0x1ce>
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	1d1a      	adds	r2, r3, #4
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	9203      	str	r2, [sp, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	bfb8      	it	lt
 800b15a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b15e:	3402      	adds	r4, #2
 800b160:	9305      	str	r3, [sp, #20]
 800b162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b248 <_vfiprintf_r+0x25c>
 800b166:	7821      	ldrb	r1, [r4, #0]
 800b168:	2203      	movs	r2, #3
 800b16a:	4650      	mov	r0, sl
 800b16c:	f7f5 f830 	bl	80001d0 <memchr>
 800b170:	b140      	cbz	r0, 800b184 <_vfiprintf_r+0x198>
 800b172:	2340      	movs	r3, #64	; 0x40
 800b174:	eba0 000a 	sub.w	r0, r0, sl
 800b178:	fa03 f000 	lsl.w	r0, r3, r0
 800b17c:	9b04      	ldr	r3, [sp, #16]
 800b17e:	4303      	orrs	r3, r0
 800b180:	3401      	adds	r4, #1
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b188:	482c      	ldr	r0, [pc, #176]	; (800b23c <_vfiprintf_r+0x250>)
 800b18a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b18e:	2206      	movs	r2, #6
 800b190:	f7f5 f81e 	bl	80001d0 <memchr>
 800b194:	2800      	cmp	r0, #0
 800b196:	d03f      	beq.n	800b218 <_vfiprintf_r+0x22c>
 800b198:	4b29      	ldr	r3, [pc, #164]	; (800b240 <_vfiprintf_r+0x254>)
 800b19a:	bb1b      	cbnz	r3, 800b1e4 <_vfiprintf_r+0x1f8>
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	3307      	adds	r3, #7
 800b1a0:	f023 0307 	bic.w	r3, r3, #7
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	9303      	str	r3, [sp, #12]
 800b1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1aa:	443b      	add	r3, r7
 800b1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ae:	e767      	b.n	800b080 <_vfiprintf_r+0x94>
 800b1b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1b4:	460c      	mov	r4, r1
 800b1b6:	2001      	movs	r0, #1
 800b1b8:	e7a5      	b.n	800b106 <_vfiprintf_r+0x11a>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	3401      	adds	r4, #1
 800b1be:	9305      	str	r3, [sp, #20]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f04f 0c0a 	mov.w	ip, #10
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1cc:	3a30      	subs	r2, #48	; 0x30
 800b1ce:	2a09      	cmp	r2, #9
 800b1d0:	d903      	bls.n	800b1da <_vfiprintf_r+0x1ee>
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0c5      	beq.n	800b162 <_vfiprintf_r+0x176>
 800b1d6:	9105      	str	r1, [sp, #20]
 800b1d8:	e7c3      	b.n	800b162 <_vfiprintf_r+0x176>
 800b1da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1de:	4604      	mov	r4, r0
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e7f0      	b.n	800b1c6 <_vfiprintf_r+0x1da>
 800b1e4:	ab03      	add	r3, sp, #12
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	462a      	mov	r2, r5
 800b1ea:	4b16      	ldr	r3, [pc, #88]	; (800b244 <_vfiprintf_r+0x258>)
 800b1ec:	a904      	add	r1, sp, #16
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f3af 8000 	nop.w
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	1c78      	adds	r0, r7, #1
 800b1f8:	d1d6      	bne.n	800b1a8 <_vfiprintf_r+0x1bc>
 800b1fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1fc:	07d9      	lsls	r1, r3, #31
 800b1fe:	d405      	bmi.n	800b20c <_vfiprintf_r+0x220>
 800b200:	89ab      	ldrh	r3, [r5, #12]
 800b202:	059a      	lsls	r2, r3, #22
 800b204:	d402      	bmi.n	800b20c <_vfiprintf_r+0x220>
 800b206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b208:	f000 fc45 	bl	800ba96 <__retarget_lock_release_recursive>
 800b20c:	89ab      	ldrh	r3, [r5, #12]
 800b20e:	065b      	lsls	r3, r3, #25
 800b210:	f53f af12 	bmi.w	800b038 <_vfiprintf_r+0x4c>
 800b214:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b216:	e711      	b.n	800b03c <_vfiprintf_r+0x50>
 800b218:	ab03      	add	r3, sp, #12
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	462a      	mov	r2, r5
 800b21e:	4b09      	ldr	r3, [pc, #36]	; (800b244 <_vfiprintf_r+0x258>)
 800b220:	a904      	add	r1, sp, #16
 800b222:	4630      	mov	r0, r6
 800b224:	f000 f880 	bl	800b328 <_printf_i>
 800b228:	e7e4      	b.n	800b1f4 <_vfiprintf_r+0x208>
 800b22a:	bf00      	nop
 800b22c:	080f0f70 	.word	0x080f0f70
 800b230:	080f0f90 	.word	0x080f0f90
 800b234:	080f0f50 	.word	0x080f0f50
 800b238:	080f0f1b 	.word	0x080f0f1b
 800b23c:	080f0f25 	.word	0x080f0f25
 800b240:	00000000 	.word	0x00000000
 800b244:	0800afc7 	.word	0x0800afc7
 800b248:	080f0f21 	.word	0x080f0f21

0800b24c <_printf_common>:
 800b24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	4616      	mov	r6, r2
 800b252:	4699      	mov	r9, r3
 800b254:	688a      	ldr	r2, [r1, #8]
 800b256:	690b      	ldr	r3, [r1, #16]
 800b258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b25c:	4293      	cmp	r3, r2
 800b25e:	bfb8      	it	lt
 800b260:	4613      	movlt	r3, r2
 800b262:	6033      	str	r3, [r6, #0]
 800b264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b268:	4607      	mov	r7, r0
 800b26a:	460c      	mov	r4, r1
 800b26c:	b10a      	cbz	r2, 800b272 <_printf_common+0x26>
 800b26e:	3301      	adds	r3, #1
 800b270:	6033      	str	r3, [r6, #0]
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	0699      	lsls	r1, r3, #26
 800b276:	bf42      	ittt	mi
 800b278:	6833      	ldrmi	r3, [r6, #0]
 800b27a:	3302      	addmi	r3, #2
 800b27c:	6033      	strmi	r3, [r6, #0]
 800b27e:	6825      	ldr	r5, [r4, #0]
 800b280:	f015 0506 	ands.w	r5, r5, #6
 800b284:	d106      	bne.n	800b294 <_printf_common+0x48>
 800b286:	f104 0a19 	add.w	sl, r4, #25
 800b28a:	68e3      	ldr	r3, [r4, #12]
 800b28c:	6832      	ldr	r2, [r6, #0]
 800b28e:	1a9b      	subs	r3, r3, r2
 800b290:	42ab      	cmp	r3, r5
 800b292:	dc26      	bgt.n	800b2e2 <_printf_common+0x96>
 800b294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b298:	1e13      	subs	r3, r2, #0
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	bf18      	it	ne
 800b29e:	2301      	movne	r3, #1
 800b2a0:	0692      	lsls	r2, r2, #26
 800b2a2:	d42b      	bmi.n	800b2fc <_printf_common+0xb0>
 800b2a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	47c0      	blx	r8
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d01e      	beq.n	800b2f0 <_printf_common+0xa4>
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	68e5      	ldr	r5, [r4, #12]
 800b2b6:	6832      	ldr	r2, [r6, #0]
 800b2b8:	f003 0306 	and.w	r3, r3, #6
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	bf08      	it	eq
 800b2c0:	1aad      	subeq	r5, r5, r2
 800b2c2:	68a3      	ldr	r3, [r4, #8]
 800b2c4:	6922      	ldr	r2, [r4, #16]
 800b2c6:	bf0c      	ite	eq
 800b2c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2cc:	2500      	movne	r5, #0
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	bfc4      	itt	gt
 800b2d2:	1a9b      	subgt	r3, r3, r2
 800b2d4:	18ed      	addgt	r5, r5, r3
 800b2d6:	2600      	movs	r6, #0
 800b2d8:	341a      	adds	r4, #26
 800b2da:	42b5      	cmp	r5, r6
 800b2dc:	d11a      	bne.n	800b314 <_printf_common+0xc8>
 800b2de:	2000      	movs	r0, #0
 800b2e0:	e008      	b.n	800b2f4 <_printf_common+0xa8>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	47c0      	blx	r8
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d103      	bne.n	800b2f8 <_printf_common+0xac>
 800b2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	e7c6      	b.n	800b28a <_printf_common+0x3e>
 800b2fc:	18e1      	adds	r1, r4, r3
 800b2fe:	1c5a      	adds	r2, r3, #1
 800b300:	2030      	movs	r0, #48	; 0x30
 800b302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b306:	4422      	add	r2, r4
 800b308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b30c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b310:	3302      	adds	r3, #2
 800b312:	e7c7      	b.n	800b2a4 <_printf_common+0x58>
 800b314:	2301      	movs	r3, #1
 800b316:	4622      	mov	r2, r4
 800b318:	4649      	mov	r1, r9
 800b31a:	4638      	mov	r0, r7
 800b31c:	47c0      	blx	r8
 800b31e:	3001      	adds	r0, #1
 800b320:	d0e6      	beq.n	800b2f0 <_printf_common+0xa4>
 800b322:	3601      	adds	r6, #1
 800b324:	e7d9      	b.n	800b2da <_printf_common+0x8e>
	...

0800b328 <_printf_i>:
 800b328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b32c:	460c      	mov	r4, r1
 800b32e:	4691      	mov	r9, r2
 800b330:	7e27      	ldrb	r7, [r4, #24]
 800b332:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b334:	2f78      	cmp	r7, #120	; 0x78
 800b336:	4680      	mov	r8, r0
 800b338:	469a      	mov	sl, r3
 800b33a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b33e:	d807      	bhi.n	800b350 <_printf_i+0x28>
 800b340:	2f62      	cmp	r7, #98	; 0x62
 800b342:	d80a      	bhi.n	800b35a <_printf_i+0x32>
 800b344:	2f00      	cmp	r7, #0
 800b346:	f000 80d8 	beq.w	800b4fa <_printf_i+0x1d2>
 800b34a:	2f58      	cmp	r7, #88	; 0x58
 800b34c:	f000 80a3 	beq.w	800b496 <_printf_i+0x16e>
 800b350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b358:	e03a      	b.n	800b3d0 <_printf_i+0xa8>
 800b35a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b35e:	2b15      	cmp	r3, #21
 800b360:	d8f6      	bhi.n	800b350 <_printf_i+0x28>
 800b362:	a001      	add	r0, pc, #4	; (adr r0, 800b368 <_printf_i+0x40>)
 800b364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b368:	0800b3c1 	.word	0x0800b3c1
 800b36c:	0800b3d5 	.word	0x0800b3d5
 800b370:	0800b351 	.word	0x0800b351
 800b374:	0800b351 	.word	0x0800b351
 800b378:	0800b351 	.word	0x0800b351
 800b37c:	0800b351 	.word	0x0800b351
 800b380:	0800b3d5 	.word	0x0800b3d5
 800b384:	0800b351 	.word	0x0800b351
 800b388:	0800b351 	.word	0x0800b351
 800b38c:	0800b351 	.word	0x0800b351
 800b390:	0800b351 	.word	0x0800b351
 800b394:	0800b4e1 	.word	0x0800b4e1
 800b398:	0800b405 	.word	0x0800b405
 800b39c:	0800b4c3 	.word	0x0800b4c3
 800b3a0:	0800b351 	.word	0x0800b351
 800b3a4:	0800b351 	.word	0x0800b351
 800b3a8:	0800b503 	.word	0x0800b503
 800b3ac:	0800b351 	.word	0x0800b351
 800b3b0:	0800b405 	.word	0x0800b405
 800b3b4:	0800b351 	.word	0x0800b351
 800b3b8:	0800b351 	.word	0x0800b351
 800b3bc:	0800b4cb 	.word	0x0800b4cb
 800b3c0:	680b      	ldr	r3, [r1, #0]
 800b3c2:	1d1a      	adds	r2, r3, #4
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	600a      	str	r2, [r1, #0]
 800b3c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e0a3      	b.n	800b51c <_printf_i+0x1f4>
 800b3d4:	6825      	ldr	r5, [r4, #0]
 800b3d6:	6808      	ldr	r0, [r1, #0]
 800b3d8:	062e      	lsls	r6, r5, #24
 800b3da:	f100 0304 	add.w	r3, r0, #4
 800b3de:	d50a      	bpl.n	800b3f6 <_printf_i+0xce>
 800b3e0:	6805      	ldr	r5, [r0, #0]
 800b3e2:	600b      	str	r3, [r1, #0]
 800b3e4:	2d00      	cmp	r5, #0
 800b3e6:	da03      	bge.n	800b3f0 <_printf_i+0xc8>
 800b3e8:	232d      	movs	r3, #45	; 0x2d
 800b3ea:	426d      	negs	r5, r5
 800b3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3f0:	485e      	ldr	r0, [pc, #376]	; (800b56c <_printf_i+0x244>)
 800b3f2:	230a      	movs	r3, #10
 800b3f4:	e019      	b.n	800b42a <_printf_i+0x102>
 800b3f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b3fa:	6805      	ldr	r5, [r0, #0]
 800b3fc:	600b      	str	r3, [r1, #0]
 800b3fe:	bf18      	it	ne
 800b400:	b22d      	sxthne	r5, r5
 800b402:	e7ef      	b.n	800b3e4 <_printf_i+0xbc>
 800b404:	680b      	ldr	r3, [r1, #0]
 800b406:	6825      	ldr	r5, [r4, #0]
 800b408:	1d18      	adds	r0, r3, #4
 800b40a:	6008      	str	r0, [r1, #0]
 800b40c:	0628      	lsls	r0, r5, #24
 800b40e:	d501      	bpl.n	800b414 <_printf_i+0xec>
 800b410:	681d      	ldr	r5, [r3, #0]
 800b412:	e002      	b.n	800b41a <_printf_i+0xf2>
 800b414:	0669      	lsls	r1, r5, #25
 800b416:	d5fb      	bpl.n	800b410 <_printf_i+0xe8>
 800b418:	881d      	ldrh	r5, [r3, #0]
 800b41a:	4854      	ldr	r0, [pc, #336]	; (800b56c <_printf_i+0x244>)
 800b41c:	2f6f      	cmp	r7, #111	; 0x6f
 800b41e:	bf0c      	ite	eq
 800b420:	2308      	moveq	r3, #8
 800b422:	230a      	movne	r3, #10
 800b424:	2100      	movs	r1, #0
 800b426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b42a:	6866      	ldr	r6, [r4, #4]
 800b42c:	60a6      	str	r6, [r4, #8]
 800b42e:	2e00      	cmp	r6, #0
 800b430:	bfa2      	ittt	ge
 800b432:	6821      	ldrge	r1, [r4, #0]
 800b434:	f021 0104 	bicge.w	r1, r1, #4
 800b438:	6021      	strge	r1, [r4, #0]
 800b43a:	b90d      	cbnz	r5, 800b440 <_printf_i+0x118>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	d04d      	beq.n	800b4dc <_printf_i+0x1b4>
 800b440:	4616      	mov	r6, r2
 800b442:	fbb5 f1f3 	udiv	r1, r5, r3
 800b446:	fb03 5711 	mls	r7, r3, r1, r5
 800b44a:	5dc7      	ldrb	r7, [r0, r7]
 800b44c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b450:	462f      	mov	r7, r5
 800b452:	42bb      	cmp	r3, r7
 800b454:	460d      	mov	r5, r1
 800b456:	d9f4      	bls.n	800b442 <_printf_i+0x11a>
 800b458:	2b08      	cmp	r3, #8
 800b45a:	d10b      	bne.n	800b474 <_printf_i+0x14c>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	07df      	lsls	r7, r3, #31
 800b460:	d508      	bpl.n	800b474 <_printf_i+0x14c>
 800b462:	6923      	ldr	r3, [r4, #16]
 800b464:	6861      	ldr	r1, [r4, #4]
 800b466:	4299      	cmp	r1, r3
 800b468:	bfde      	ittt	le
 800b46a:	2330      	movle	r3, #48	; 0x30
 800b46c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b470:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b474:	1b92      	subs	r2, r2, r6
 800b476:	6122      	str	r2, [r4, #16]
 800b478:	f8cd a000 	str.w	sl, [sp]
 800b47c:	464b      	mov	r3, r9
 800b47e:	aa03      	add	r2, sp, #12
 800b480:	4621      	mov	r1, r4
 800b482:	4640      	mov	r0, r8
 800b484:	f7ff fee2 	bl	800b24c <_printf_common>
 800b488:	3001      	adds	r0, #1
 800b48a:	d14c      	bne.n	800b526 <_printf_i+0x1fe>
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	b004      	add	sp, #16
 800b492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b496:	4835      	ldr	r0, [pc, #212]	; (800b56c <_printf_i+0x244>)
 800b498:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	680e      	ldr	r6, [r1, #0]
 800b4a0:	061f      	lsls	r7, r3, #24
 800b4a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b4a6:	600e      	str	r6, [r1, #0]
 800b4a8:	d514      	bpl.n	800b4d4 <_printf_i+0x1ac>
 800b4aa:	07d9      	lsls	r1, r3, #31
 800b4ac:	bf44      	itt	mi
 800b4ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b4b2:	6023      	strmi	r3, [r4, #0]
 800b4b4:	b91d      	cbnz	r5, 800b4be <_printf_i+0x196>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	f023 0320 	bic.w	r3, r3, #32
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	2310      	movs	r3, #16
 800b4c0:	e7b0      	b.n	800b424 <_printf_i+0xfc>
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	f043 0320 	orr.w	r3, r3, #32
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	2378      	movs	r3, #120	; 0x78
 800b4cc:	4828      	ldr	r0, [pc, #160]	; (800b570 <_printf_i+0x248>)
 800b4ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4d2:	e7e3      	b.n	800b49c <_printf_i+0x174>
 800b4d4:	065e      	lsls	r6, r3, #25
 800b4d6:	bf48      	it	mi
 800b4d8:	b2ad      	uxthmi	r5, r5
 800b4da:	e7e6      	b.n	800b4aa <_printf_i+0x182>
 800b4dc:	4616      	mov	r6, r2
 800b4de:	e7bb      	b.n	800b458 <_printf_i+0x130>
 800b4e0:	680b      	ldr	r3, [r1, #0]
 800b4e2:	6826      	ldr	r6, [r4, #0]
 800b4e4:	6960      	ldr	r0, [r4, #20]
 800b4e6:	1d1d      	adds	r5, r3, #4
 800b4e8:	600d      	str	r5, [r1, #0]
 800b4ea:	0635      	lsls	r5, r6, #24
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	d501      	bpl.n	800b4f4 <_printf_i+0x1cc>
 800b4f0:	6018      	str	r0, [r3, #0]
 800b4f2:	e002      	b.n	800b4fa <_printf_i+0x1d2>
 800b4f4:	0671      	lsls	r1, r6, #25
 800b4f6:	d5fb      	bpl.n	800b4f0 <_printf_i+0x1c8>
 800b4f8:	8018      	strh	r0, [r3, #0]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	6123      	str	r3, [r4, #16]
 800b4fe:	4616      	mov	r6, r2
 800b500:	e7ba      	b.n	800b478 <_printf_i+0x150>
 800b502:	680b      	ldr	r3, [r1, #0]
 800b504:	1d1a      	adds	r2, r3, #4
 800b506:	600a      	str	r2, [r1, #0]
 800b508:	681e      	ldr	r6, [r3, #0]
 800b50a:	6862      	ldr	r2, [r4, #4]
 800b50c:	2100      	movs	r1, #0
 800b50e:	4630      	mov	r0, r6
 800b510:	f7f4 fe5e 	bl	80001d0 <memchr>
 800b514:	b108      	cbz	r0, 800b51a <_printf_i+0x1f2>
 800b516:	1b80      	subs	r0, r0, r6
 800b518:	6060      	str	r0, [r4, #4]
 800b51a:	6863      	ldr	r3, [r4, #4]
 800b51c:	6123      	str	r3, [r4, #16]
 800b51e:	2300      	movs	r3, #0
 800b520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b524:	e7a8      	b.n	800b478 <_printf_i+0x150>
 800b526:	6923      	ldr	r3, [r4, #16]
 800b528:	4632      	mov	r2, r6
 800b52a:	4649      	mov	r1, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	47d0      	blx	sl
 800b530:	3001      	adds	r0, #1
 800b532:	d0ab      	beq.n	800b48c <_printf_i+0x164>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	079b      	lsls	r3, r3, #30
 800b538:	d413      	bmi.n	800b562 <_printf_i+0x23a>
 800b53a:	68e0      	ldr	r0, [r4, #12]
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	4298      	cmp	r0, r3
 800b540:	bfb8      	it	lt
 800b542:	4618      	movlt	r0, r3
 800b544:	e7a4      	b.n	800b490 <_printf_i+0x168>
 800b546:	2301      	movs	r3, #1
 800b548:	4632      	mov	r2, r6
 800b54a:	4649      	mov	r1, r9
 800b54c:	4640      	mov	r0, r8
 800b54e:	47d0      	blx	sl
 800b550:	3001      	adds	r0, #1
 800b552:	d09b      	beq.n	800b48c <_printf_i+0x164>
 800b554:	3501      	adds	r5, #1
 800b556:	68e3      	ldr	r3, [r4, #12]
 800b558:	9903      	ldr	r1, [sp, #12]
 800b55a:	1a5b      	subs	r3, r3, r1
 800b55c:	42ab      	cmp	r3, r5
 800b55e:	dcf2      	bgt.n	800b546 <_printf_i+0x21e>
 800b560:	e7eb      	b.n	800b53a <_printf_i+0x212>
 800b562:	2500      	movs	r5, #0
 800b564:	f104 0619 	add.w	r6, r4, #25
 800b568:	e7f5      	b.n	800b556 <_printf_i+0x22e>
 800b56a:	bf00      	nop
 800b56c:	080f0f2c 	.word	0x080f0f2c
 800b570:	080f0f3d 	.word	0x080f0f3d

0800b574 <_sbrk_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d06      	ldr	r5, [pc, #24]	; (800b590 <_sbrk_r+0x1c>)
 800b578:	2300      	movs	r3, #0
 800b57a:	4604      	mov	r4, r0
 800b57c:	4608      	mov	r0, r1
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	f7f8 ff3c 	bl	80043fc <_sbrk>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_sbrk_r+0x1a>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_sbrk_r+0x1a>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	20000830 	.word	0x20000830

0800b594 <__swbuf_r>:
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	460e      	mov	r6, r1
 800b598:	4614      	mov	r4, r2
 800b59a:	4605      	mov	r5, r0
 800b59c:	b118      	cbz	r0, 800b5a6 <__swbuf_r+0x12>
 800b59e:	6983      	ldr	r3, [r0, #24]
 800b5a0:	b90b      	cbnz	r3, 800b5a6 <__swbuf_r+0x12>
 800b5a2:	f000 f9d9 	bl	800b958 <__sinit>
 800b5a6:	4b21      	ldr	r3, [pc, #132]	; (800b62c <__swbuf_r+0x98>)
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	d12b      	bne.n	800b604 <__swbuf_r+0x70>
 800b5ac:	686c      	ldr	r4, [r5, #4]
 800b5ae:	69a3      	ldr	r3, [r4, #24]
 800b5b0:	60a3      	str	r3, [r4, #8]
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	071a      	lsls	r2, r3, #28
 800b5b6:	d52f      	bpl.n	800b618 <__swbuf_r+0x84>
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	b36b      	cbz	r3, 800b618 <__swbuf_r+0x84>
 800b5bc:	6923      	ldr	r3, [r4, #16]
 800b5be:	6820      	ldr	r0, [r4, #0]
 800b5c0:	1ac0      	subs	r0, r0, r3
 800b5c2:	6963      	ldr	r3, [r4, #20]
 800b5c4:	b2f6      	uxtb	r6, r6
 800b5c6:	4283      	cmp	r3, r0
 800b5c8:	4637      	mov	r7, r6
 800b5ca:	dc04      	bgt.n	800b5d6 <__swbuf_r+0x42>
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f000 f92e 	bl	800b830 <_fflush_r>
 800b5d4:	bb30      	cbnz	r0, 800b624 <__swbuf_r+0x90>
 800b5d6:	68a3      	ldr	r3, [r4, #8]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	60a3      	str	r3, [r4, #8]
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	6022      	str	r2, [r4, #0]
 800b5e2:	701e      	strb	r6, [r3, #0]
 800b5e4:	6963      	ldr	r3, [r4, #20]
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	4283      	cmp	r3, r0
 800b5ea:	d004      	beq.n	800b5f6 <__swbuf_r+0x62>
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	07db      	lsls	r3, r3, #31
 800b5f0:	d506      	bpl.n	800b600 <__swbuf_r+0x6c>
 800b5f2:	2e0a      	cmp	r6, #10
 800b5f4:	d104      	bne.n	800b600 <__swbuf_r+0x6c>
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f000 f919 	bl	800b830 <_fflush_r>
 800b5fe:	b988      	cbnz	r0, 800b624 <__swbuf_r+0x90>
 800b600:	4638      	mov	r0, r7
 800b602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b604:	4b0a      	ldr	r3, [pc, #40]	; (800b630 <__swbuf_r+0x9c>)
 800b606:	429c      	cmp	r4, r3
 800b608:	d101      	bne.n	800b60e <__swbuf_r+0x7a>
 800b60a:	68ac      	ldr	r4, [r5, #8]
 800b60c:	e7cf      	b.n	800b5ae <__swbuf_r+0x1a>
 800b60e:	4b09      	ldr	r3, [pc, #36]	; (800b634 <__swbuf_r+0xa0>)
 800b610:	429c      	cmp	r4, r3
 800b612:	bf08      	it	eq
 800b614:	68ec      	ldreq	r4, [r5, #12]
 800b616:	e7ca      	b.n	800b5ae <__swbuf_r+0x1a>
 800b618:	4621      	mov	r1, r4
 800b61a:	4628      	mov	r0, r5
 800b61c:	f000 f80c 	bl	800b638 <__swsetup_r>
 800b620:	2800      	cmp	r0, #0
 800b622:	d0cb      	beq.n	800b5bc <__swbuf_r+0x28>
 800b624:	f04f 37ff 	mov.w	r7, #4294967295
 800b628:	e7ea      	b.n	800b600 <__swbuf_r+0x6c>
 800b62a:	bf00      	nop
 800b62c:	080f0f70 	.word	0x080f0f70
 800b630:	080f0f90 	.word	0x080f0f90
 800b634:	080f0f50 	.word	0x080f0f50

0800b638 <__swsetup_r>:
 800b638:	4b32      	ldr	r3, [pc, #200]	; (800b704 <__swsetup_r+0xcc>)
 800b63a:	b570      	push	{r4, r5, r6, lr}
 800b63c:	681d      	ldr	r5, [r3, #0]
 800b63e:	4606      	mov	r6, r0
 800b640:	460c      	mov	r4, r1
 800b642:	b125      	cbz	r5, 800b64e <__swsetup_r+0x16>
 800b644:	69ab      	ldr	r3, [r5, #24]
 800b646:	b913      	cbnz	r3, 800b64e <__swsetup_r+0x16>
 800b648:	4628      	mov	r0, r5
 800b64a:	f000 f985 	bl	800b958 <__sinit>
 800b64e:	4b2e      	ldr	r3, [pc, #184]	; (800b708 <__swsetup_r+0xd0>)
 800b650:	429c      	cmp	r4, r3
 800b652:	d10f      	bne.n	800b674 <__swsetup_r+0x3c>
 800b654:	686c      	ldr	r4, [r5, #4]
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b65c:	0719      	lsls	r1, r3, #28
 800b65e:	d42c      	bmi.n	800b6ba <__swsetup_r+0x82>
 800b660:	06dd      	lsls	r5, r3, #27
 800b662:	d411      	bmi.n	800b688 <__swsetup_r+0x50>
 800b664:	2309      	movs	r3, #9
 800b666:	6033      	str	r3, [r6, #0]
 800b668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295
 800b672:	e03e      	b.n	800b6f2 <__swsetup_r+0xba>
 800b674:	4b25      	ldr	r3, [pc, #148]	; (800b70c <__swsetup_r+0xd4>)
 800b676:	429c      	cmp	r4, r3
 800b678:	d101      	bne.n	800b67e <__swsetup_r+0x46>
 800b67a:	68ac      	ldr	r4, [r5, #8]
 800b67c:	e7eb      	b.n	800b656 <__swsetup_r+0x1e>
 800b67e:	4b24      	ldr	r3, [pc, #144]	; (800b710 <__swsetup_r+0xd8>)
 800b680:	429c      	cmp	r4, r3
 800b682:	bf08      	it	eq
 800b684:	68ec      	ldreq	r4, [r5, #12]
 800b686:	e7e6      	b.n	800b656 <__swsetup_r+0x1e>
 800b688:	0758      	lsls	r0, r3, #29
 800b68a:	d512      	bpl.n	800b6b2 <__swsetup_r+0x7a>
 800b68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b68e:	b141      	cbz	r1, 800b6a2 <__swsetup_r+0x6a>
 800b690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b694:	4299      	cmp	r1, r3
 800b696:	d002      	beq.n	800b69e <__swsetup_r+0x66>
 800b698:	4630      	mov	r0, r6
 800b69a:	f7ff fbd3 	bl	800ae44 <_free_r>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6063      	str	r3, [r4, #4]
 800b6ae:	6923      	ldr	r3, [r4, #16]
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	f043 0308 	orr.w	r3, r3, #8
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	b94b      	cbnz	r3, 800b6d2 <__swsetup_r+0x9a>
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6c8:	d003      	beq.n	800b6d2 <__swsetup_r+0x9a>
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f000 fa07 	bl	800bae0 <__smakebuf_r>
 800b6d2:	89a0      	ldrh	r0, [r4, #12]
 800b6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6d8:	f010 0301 	ands.w	r3, r0, #1
 800b6dc:	d00a      	beq.n	800b6f4 <__swsetup_r+0xbc>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60a3      	str	r3, [r4, #8]
 800b6e2:	6963      	ldr	r3, [r4, #20]
 800b6e4:	425b      	negs	r3, r3
 800b6e6:	61a3      	str	r3, [r4, #24]
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	b943      	cbnz	r3, 800b6fe <__swsetup_r+0xc6>
 800b6ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6f0:	d1ba      	bne.n	800b668 <__swsetup_r+0x30>
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	0781      	lsls	r1, r0, #30
 800b6f6:	bf58      	it	pl
 800b6f8:	6963      	ldrpl	r3, [r4, #20]
 800b6fa:	60a3      	str	r3, [r4, #8]
 800b6fc:	e7f4      	b.n	800b6e8 <__swsetup_r+0xb0>
 800b6fe:	2000      	movs	r0, #0
 800b700:	e7f7      	b.n	800b6f2 <__swsetup_r+0xba>
 800b702:	bf00      	nop
 800b704:	20000068 	.word	0x20000068
 800b708:	080f0f70 	.word	0x080f0f70
 800b70c:	080f0f90 	.word	0x080f0f90
 800b710:	080f0f50 	.word	0x080f0f50

0800b714 <abort>:
 800b714:	b508      	push	{r3, lr}
 800b716:	2006      	movs	r0, #6
 800b718:	f000 fa56 	bl	800bbc8 <raise>
 800b71c:	2001      	movs	r0, #1
 800b71e:	f7f8 fdf5 	bl	800430c <_exit>
	...

0800b724 <__sflush_r>:
 800b724:	898a      	ldrh	r2, [r1, #12]
 800b726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b72a:	4605      	mov	r5, r0
 800b72c:	0710      	lsls	r0, r2, #28
 800b72e:	460c      	mov	r4, r1
 800b730:	d458      	bmi.n	800b7e4 <__sflush_r+0xc0>
 800b732:	684b      	ldr	r3, [r1, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	dc05      	bgt.n	800b744 <__sflush_r+0x20>
 800b738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	dc02      	bgt.n	800b744 <__sflush_r+0x20>
 800b73e:	2000      	movs	r0, #0
 800b740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b746:	2e00      	cmp	r6, #0
 800b748:	d0f9      	beq.n	800b73e <__sflush_r+0x1a>
 800b74a:	2300      	movs	r3, #0
 800b74c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b750:	682f      	ldr	r7, [r5, #0]
 800b752:	602b      	str	r3, [r5, #0]
 800b754:	d032      	beq.n	800b7bc <__sflush_r+0x98>
 800b756:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	075a      	lsls	r2, r3, #29
 800b75c:	d505      	bpl.n	800b76a <__sflush_r+0x46>
 800b75e:	6863      	ldr	r3, [r4, #4]
 800b760:	1ac0      	subs	r0, r0, r3
 800b762:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b764:	b10b      	cbz	r3, 800b76a <__sflush_r+0x46>
 800b766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b768:	1ac0      	subs	r0, r0, r3
 800b76a:	2300      	movs	r3, #0
 800b76c:	4602      	mov	r2, r0
 800b76e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b770:	6a21      	ldr	r1, [r4, #32]
 800b772:	4628      	mov	r0, r5
 800b774:	47b0      	blx	r6
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	d106      	bne.n	800b78a <__sflush_r+0x66>
 800b77c:	6829      	ldr	r1, [r5, #0]
 800b77e:	291d      	cmp	r1, #29
 800b780:	d82c      	bhi.n	800b7dc <__sflush_r+0xb8>
 800b782:	4a2a      	ldr	r2, [pc, #168]	; (800b82c <__sflush_r+0x108>)
 800b784:	40ca      	lsrs	r2, r1
 800b786:	07d6      	lsls	r6, r2, #31
 800b788:	d528      	bpl.n	800b7dc <__sflush_r+0xb8>
 800b78a:	2200      	movs	r2, #0
 800b78c:	6062      	str	r2, [r4, #4]
 800b78e:	04d9      	lsls	r1, r3, #19
 800b790:	6922      	ldr	r2, [r4, #16]
 800b792:	6022      	str	r2, [r4, #0]
 800b794:	d504      	bpl.n	800b7a0 <__sflush_r+0x7c>
 800b796:	1c42      	adds	r2, r0, #1
 800b798:	d101      	bne.n	800b79e <__sflush_r+0x7a>
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	b903      	cbnz	r3, 800b7a0 <__sflush_r+0x7c>
 800b79e:	6560      	str	r0, [r4, #84]	; 0x54
 800b7a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7a2:	602f      	str	r7, [r5, #0]
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	d0ca      	beq.n	800b73e <__sflush_r+0x1a>
 800b7a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7ac:	4299      	cmp	r1, r3
 800b7ae:	d002      	beq.n	800b7b6 <__sflush_r+0x92>
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f7ff fb47 	bl	800ae44 <_free_r>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	6360      	str	r0, [r4, #52]	; 0x34
 800b7ba:	e7c1      	b.n	800b740 <__sflush_r+0x1c>
 800b7bc:	6a21      	ldr	r1, [r4, #32]
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	47b0      	blx	r6
 800b7c4:	1c41      	adds	r1, r0, #1
 800b7c6:	d1c7      	bne.n	800b758 <__sflush_r+0x34>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0c4      	beq.n	800b758 <__sflush_r+0x34>
 800b7ce:	2b1d      	cmp	r3, #29
 800b7d0:	d001      	beq.n	800b7d6 <__sflush_r+0xb2>
 800b7d2:	2b16      	cmp	r3, #22
 800b7d4:	d101      	bne.n	800b7da <__sflush_r+0xb6>
 800b7d6:	602f      	str	r7, [r5, #0]
 800b7d8:	e7b1      	b.n	800b73e <__sflush_r+0x1a>
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e0:	81a3      	strh	r3, [r4, #12]
 800b7e2:	e7ad      	b.n	800b740 <__sflush_r+0x1c>
 800b7e4:	690f      	ldr	r7, [r1, #16]
 800b7e6:	2f00      	cmp	r7, #0
 800b7e8:	d0a9      	beq.n	800b73e <__sflush_r+0x1a>
 800b7ea:	0793      	lsls	r3, r2, #30
 800b7ec:	680e      	ldr	r6, [r1, #0]
 800b7ee:	bf08      	it	eq
 800b7f0:	694b      	ldreq	r3, [r1, #20]
 800b7f2:	600f      	str	r7, [r1, #0]
 800b7f4:	bf18      	it	ne
 800b7f6:	2300      	movne	r3, #0
 800b7f8:	eba6 0807 	sub.w	r8, r6, r7
 800b7fc:	608b      	str	r3, [r1, #8]
 800b7fe:	f1b8 0f00 	cmp.w	r8, #0
 800b802:	dd9c      	ble.n	800b73e <__sflush_r+0x1a>
 800b804:	6a21      	ldr	r1, [r4, #32]
 800b806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b808:	4643      	mov	r3, r8
 800b80a:	463a      	mov	r2, r7
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b0      	blx	r6
 800b810:	2800      	cmp	r0, #0
 800b812:	dc06      	bgt.n	800b822 <__sflush_r+0xfe>
 800b814:	89a3      	ldrh	r3, [r4, #12]
 800b816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295
 800b820:	e78e      	b.n	800b740 <__sflush_r+0x1c>
 800b822:	4407      	add	r7, r0
 800b824:	eba8 0800 	sub.w	r8, r8, r0
 800b828:	e7e9      	b.n	800b7fe <__sflush_r+0xda>
 800b82a:	bf00      	nop
 800b82c:	20400001 	.word	0x20400001

0800b830 <_fflush_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	690b      	ldr	r3, [r1, #16]
 800b834:	4605      	mov	r5, r0
 800b836:	460c      	mov	r4, r1
 800b838:	b913      	cbnz	r3, 800b840 <_fflush_r+0x10>
 800b83a:	2500      	movs	r5, #0
 800b83c:	4628      	mov	r0, r5
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	b118      	cbz	r0, 800b84a <_fflush_r+0x1a>
 800b842:	6983      	ldr	r3, [r0, #24]
 800b844:	b90b      	cbnz	r3, 800b84a <_fflush_r+0x1a>
 800b846:	f000 f887 	bl	800b958 <__sinit>
 800b84a:	4b14      	ldr	r3, [pc, #80]	; (800b89c <_fflush_r+0x6c>)
 800b84c:	429c      	cmp	r4, r3
 800b84e:	d11b      	bne.n	800b888 <_fflush_r+0x58>
 800b850:	686c      	ldr	r4, [r5, #4]
 800b852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0ef      	beq.n	800b83a <_fflush_r+0xa>
 800b85a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b85c:	07d0      	lsls	r0, r2, #31
 800b85e:	d404      	bmi.n	800b86a <_fflush_r+0x3a>
 800b860:	0599      	lsls	r1, r3, #22
 800b862:	d402      	bmi.n	800b86a <_fflush_r+0x3a>
 800b864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b866:	f000 f915 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b86a:	4628      	mov	r0, r5
 800b86c:	4621      	mov	r1, r4
 800b86e:	f7ff ff59 	bl	800b724 <__sflush_r>
 800b872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b874:	07da      	lsls	r2, r3, #31
 800b876:	4605      	mov	r5, r0
 800b878:	d4e0      	bmi.n	800b83c <_fflush_r+0xc>
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	059b      	lsls	r3, r3, #22
 800b87e:	d4dd      	bmi.n	800b83c <_fflush_r+0xc>
 800b880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b882:	f000 f908 	bl	800ba96 <__retarget_lock_release_recursive>
 800b886:	e7d9      	b.n	800b83c <_fflush_r+0xc>
 800b888:	4b05      	ldr	r3, [pc, #20]	; (800b8a0 <_fflush_r+0x70>)
 800b88a:	429c      	cmp	r4, r3
 800b88c:	d101      	bne.n	800b892 <_fflush_r+0x62>
 800b88e:	68ac      	ldr	r4, [r5, #8]
 800b890:	e7df      	b.n	800b852 <_fflush_r+0x22>
 800b892:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <_fflush_r+0x74>)
 800b894:	429c      	cmp	r4, r3
 800b896:	bf08      	it	eq
 800b898:	68ec      	ldreq	r4, [r5, #12]
 800b89a:	e7da      	b.n	800b852 <_fflush_r+0x22>
 800b89c:	080f0f70 	.word	0x080f0f70
 800b8a0:	080f0f90 	.word	0x080f0f90
 800b8a4:	080f0f50 	.word	0x080f0f50

0800b8a8 <std>:
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	b510      	push	{r4, lr}
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b8b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8b6:	6083      	str	r3, [r0, #8]
 800b8b8:	8181      	strh	r1, [r0, #12]
 800b8ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b8bc:	81c2      	strh	r2, [r0, #14]
 800b8be:	6183      	str	r3, [r0, #24]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	2208      	movs	r2, #8
 800b8c4:	305c      	adds	r0, #92	; 0x5c
 800b8c6:	f7ff f9fb 	bl	800acc0 <memset>
 800b8ca:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <std+0x38>)
 800b8cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b8ce:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <std+0x3c>)
 800b8d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <std+0x40>)
 800b8d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8d6:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <std+0x44>)
 800b8d8:	6224      	str	r4, [r4, #32]
 800b8da:	6323      	str	r3, [r4, #48]	; 0x30
 800b8dc:	bd10      	pop	{r4, pc}
 800b8de:	bf00      	nop
 800b8e0:	0800bc01 	.word	0x0800bc01
 800b8e4:	0800bc23 	.word	0x0800bc23
 800b8e8:	0800bc5b 	.word	0x0800bc5b
 800b8ec:	0800bc7f 	.word	0x0800bc7f

0800b8f0 <_cleanup_r>:
 800b8f0:	4901      	ldr	r1, [pc, #4]	; (800b8f8 <_cleanup_r+0x8>)
 800b8f2:	f000 b8af 	b.w	800ba54 <_fwalk_reent>
 800b8f6:	bf00      	nop
 800b8f8:	0800b831 	.word	0x0800b831

0800b8fc <__sfmoreglue>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	1e4a      	subs	r2, r1, #1
 800b900:	2568      	movs	r5, #104	; 0x68
 800b902:	4355      	muls	r5, r2
 800b904:	460e      	mov	r6, r1
 800b906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b90a:	f7ff faeb 	bl	800aee4 <_malloc_r>
 800b90e:	4604      	mov	r4, r0
 800b910:	b140      	cbz	r0, 800b924 <__sfmoreglue+0x28>
 800b912:	2100      	movs	r1, #0
 800b914:	e9c0 1600 	strd	r1, r6, [r0]
 800b918:	300c      	adds	r0, #12
 800b91a:	60a0      	str	r0, [r4, #8]
 800b91c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b920:	f7ff f9ce 	bl	800acc0 <memset>
 800b924:	4620      	mov	r0, r4
 800b926:	bd70      	pop	{r4, r5, r6, pc}

0800b928 <__sfp_lock_acquire>:
 800b928:	4801      	ldr	r0, [pc, #4]	; (800b930 <__sfp_lock_acquire+0x8>)
 800b92a:	f000 b8b3 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800b92e:	bf00      	nop
 800b930:	2000082c 	.word	0x2000082c

0800b934 <__sfp_lock_release>:
 800b934:	4801      	ldr	r0, [pc, #4]	; (800b93c <__sfp_lock_release+0x8>)
 800b936:	f000 b8ae 	b.w	800ba96 <__retarget_lock_release_recursive>
 800b93a:	bf00      	nop
 800b93c:	2000082c 	.word	0x2000082c

0800b940 <__sinit_lock_acquire>:
 800b940:	4801      	ldr	r0, [pc, #4]	; (800b948 <__sinit_lock_acquire+0x8>)
 800b942:	f000 b8a7 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800b946:	bf00      	nop
 800b948:	20000827 	.word	0x20000827

0800b94c <__sinit_lock_release>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__sinit_lock_release+0x8>)
 800b94e:	f000 b8a2 	b.w	800ba96 <__retarget_lock_release_recursive>
 800b952:	bf00      	nop
 800b954:	20000827 	.word	0x20000827

0800b958 <__sinit>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	4604      	mov	r4, r0
 800b95c:	f7ff fff0 	bl	800b940 <__sinit_lock_acquire>
 800b960:	69a3      	ldr	r3, [r4, #24]
 800b962:	b11b      	cbz	r3, 800b96c <__sinit+0x14>
 800b964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b968:	f7ff bff0 	b.w	800b94c <__sinit_lock_release>
 800b96c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b970:	6523      	str	r3, [r4, #80]	; 0x50
 800b972:	4b13      	ldr	r3, [pc, #76]	; (800b9c0 <__sinit+0x68>)
 800b974:	4a13      	ldr	r2, [pc, #76]	; (800b9c4 <__sinit+0x6c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	62a2      	str	r2, [r4, #40]	; 0x28
 800b97a:	42a3      	cmp	r3, r4
 800b97c:	bf04      	itt	eq
 800b97e:	2301      	moveq	r3, #1
 800b980:	61a3      	streq	r3, [r4, #24]
 800b982:	4620      	mov	r0, r4
 800b984:	f000 f820 	bl	800b9c8 <__sfp>
 800b988:	6060      	str	r0, [r4, #4]
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f81c 	bl	800b9c8 <__sfp>
 800b990:	60a0      	str	r0, [r4, #8]
 800b992:	4620      	mov	r0, r4
 800b994:	f000 f818 	bl	800b9c8 <__sfp>
 800b998:	2200      	movs	r2, #0
 800b99a:	60e0      	str	r0, [r4, #12]
 800b99c:	2104      	movs	r1, #4
 800b99e:	6860      	ldr	r0, [r4, #4]
 800b9a0:	f7ff ff82 	bl	800b8a8 <std>
 800b9a4:	68a0      	ldr	r0, [r4, #8]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	2109      	movs	r1, #9
 800b9aa:	f7ff ff7d 	bl	800b8a8 <std>
 800b9ae:	68e0      	ldr	r0, [r4, #12]
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	2112      	movs	r1, #18
 800b9b4:	f7ff ff78 	bl	800b8a8 <std>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	61a3      	str	r3, [r4, #24]
 800b9bc:	e7d2      	b.n	800b964 <__sinit+0xc>
 800b9be:	bf00      	nop
 800b9c0:	080f0e40 	.word	0x080f0e40
 800b9c4:	0800b8f1 	.word	0x0800b8f1

0800b9c8 <__sfp>:
 800b9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ca:	4607      	mov	r7, r0
 800b9cc:	f7ff ffac 	bl	800b928 <__sfp_lock_acquire>
 800b9d0:	4b1e      	ldr	r3, [pc, #120]	; (800ba4c <__sfp+0x84>)
 800b9d2:	681e      	ldr	r6, [r3, #0]
 800b9d4:	69b3      	ldr	r3, [r6, #24]
 800b9d6:	b913      	cbnz	r3, 800b9de <__sfp+0x16>
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7ff ffbd 	bl	800b958 <__sinit>
 800b9de:	3648      	adds	r6, #72	; 0x48
 800b9e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	d503      	bpl.n	800b9f0 <__sfp+0x28>
 800b9e8:	6833      	ldr	r3, [r6, #0]
 800b9ea:	b30b      	cbz	r3, 800ba30 <__sfp+0x68>
 800b9ec:	6836      	ldr	r6, [r6, #0]
 800b9ee:	e7f7      	b.n	800b9e0 <__sfp+0x18>
 800b9f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9f4:	b9d5      	cbnz	r5, 800ba2c <__sfp+0x64>
 800b9f6:	4b16      	ldr	r3, [pc, #88]	; (800ba50 <__sfp+0x88>)
 800b9f8:	60e3      	str	r3, [r4, #12]
 800b9fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9fe:	6665      	str	r5, [r4, #100]	; 0x64
 800ba00:	f000 f847 	bl	800ba92 <__retarget_lock_init_recursive>
 800ba04:	f7ff ff96 	bl	800b934 <__sfp_lock_release>
 800ba08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba10:	6025      	str	r5, [r4, #0]
 800ba12:	61a5      	str	r5, [r4, #24]
 800ba14:	2208      	movs	r2, #8
 800ba16:	4629      	mov	r1, r5
 800ba18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba1c:	f7ff f950 	bl	800acc0 <memset>
 800ba20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba28:	4620      	mov	r0, r4
 800ba2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba2c:	3468      	adds	r4, #104	; 0x68
 800ba2e:	e7d9      	b.n	800b9e4 <__sfp+0x1c>
 800ba30:	2104      	movs	r1, #4
 800ba32:	4638      	mov	r0, r7
 800ba34:	f7ff ff62 	bl	800b8fc <__sfmoreglue>
 800ba38:	4604      	mov	r4, r0
 800ba3a:	6030      	str	r0, [r6, #0]
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d1d5      	bne.n	800b9ec <__sfp+0x24>
 800ba40:	f7ff ff78 	bl	800b934 <__sfp_lock_release>
 800ba44:	230c      	movs	r3, #12
 800ba46:	603b      	str	r3, [r7, #0]
 800ba48:	e7ee      	b.n	800ba28 <__sfp+0x60>
 800ba4a:	bf00      	nop
 800ba4c:	080f0e40 	.word	0x080f0e40
 800ba50:	ffff0001 	.word	0xffff0001

0800ba54 <_fwalk_reent>:
 800ba54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	4606      	mov	r6, r0
 800ba5a:	4688      	mov	r8, r1
 800ba5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba60:	2700      	movs	r7, #0
 800ba62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba66:	f1b9 0901 	subs.w	r9, r9, #1
 800ba6a:	d505      	bpl.n	800ba78 <_fwalk_reent+0x24>
 800ba6c:	6824      	ldr	r4, [r4, #0]
 800ba6e:	2c00      	cmp	r4, #0
 800ba70:	d1f7      	bne.n	800ba62 <_fwalk_reent+0xe>
 800ba72:	4638      	mov	r0, r7
 800ba74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba78:	89ab      	ldrh	r3, [r5, #12]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d907      	bls.n	800ba8e <_fwalk_reent+0x3a>
 800ba7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba82:	3301      	adds	r3, #1
 800ba84:	d003      	beq.n	800ba8e <_fwalk_reent+0x3a>
 800ba86:	4629      	mov	r1, r5
 800ba88:	4630      	mov	r0, r6
 800ba8a:	47c0      	blx	r8
 800ba8c:	4307      	orrs	r7, r0
 800ba8e:	3568      	adds	r5, #104	; 0x68
 800ba90:	e7e9      	b.n	800ba66 <_fwalk_reent+0x12>

0800ba92 <__retarget_lock_init_recursive>:
 800ba92:	4770      	bx	lr

0800ba94 <__retarget_lock_acquire_recursive>:
 800ba94:	4770      	bx	lr

0800ba96 <__retarget_lock_release_recursive>:
 800ba96:	4770      	bx	lr

0800ba98 <__swhatbuf_r>:
 800ba98:	b570      	push	{r4, r5, r6, lr}
 800ba9a:	460e      	mov	r6, r1
 800ba9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa0:	2900      	cmp	r1, #0
 800baa2:	b096      	sub	sp, #88	; 0x58
 800baa4:	4614      	mov	r4, r2
 800baa6:	461d      	mov	r5, r3
 800baa8:	da07      	bge.n	800baba <__swhatbuf_r+0x22>
 800baaa:	2300      	movs	r3, #0
 800baac:	602b      	str	r3, [r5, #0]
 800baae:	89b3      	ldrh	r3, [r6, #12]
 800bab0:	061a      	lsls	r2, r3, #24
 800bab2:	d410      	bmi.n	800bad6 <__swhatbuf_r+0x3e>
 800bab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bab8:	e00e      	b.n	800bad8 <__swhatbuf_r+0x40>
 800baba:	466a      	mov	r2, sp
 800babc:	f000 f906 	bl	800bccc <_fstat_r>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	dbf2      	blt.n	800baaa <__swhatbuf_r+0x12>
 800bac4:	9a01      	ldr	r2, [sp, #4]
 800bac6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bace:	425a      	negs	r2, r3
 800bad0:	415a      	adcs	r2, r3
 800bad2:	602a      	str	r2, [r5, #0]
 800bad4:	e7ee      	b.n	800bab4 <__swhatbuf_r+0x1c>
 800bad6:	2340      	movs	r3, #64	; 0x40
 800bad8:	2000      	movs	r0, #0
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	b016      	add	sp, #88	; 0x58
 800bade:	bd70      	pop	{r4, r5, r6, pc}

0800bae0 <__smakebuf_r>:
 800bae0:	898b      	ldrh	r3, [r1, #12]
 800bae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bae4:	079d      	lsls	r5, r3, #30
 800bae6:	4606      	mov	r6, r0
 800bae8:	460c      	mov	r4, r1
 800baea:	d507      	bpl.n	800bafc <__smakebuf_r+0x1c>
 800baec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	6123      	str	r3, [r4, #16]
 800baf4:	2301      	movs	r3, #1
 800baf6:	6163      	str	r3, [r4, #20]
 800baf8:	b002      	add	sp, #8
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	ab01      	add	r3, sp, #4
 800bafe:	466a      	mov	r2, sp
 800bb00:	f7ff ffca 	bl	800ba98 <__swhatbuf_r>
 800bb04:	9900      	ldr	r1, [sp, #0]
 800bb06:	4605      	mov	r5, r0
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7ff f9eb 	bl	800aee4 <_malloc_r>
 800bb0e:	b948      	cbnz	r0, 800bb24 <__smakebuf_r+0x44>
 800bb10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb14:	059a      	lsls	r2, r3, #22
 800bb16:	d4ef      	bmi.n	800baf8 <__smakebuf_r+0x18>
 800bb18:	f023 0303 	bic.w	r3, r3, #3
 800bb1c:	f043 0302 	orr.w	r3, r3, #2
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	e7e3      	b.n	800baec <__smakebuf_r+0xc>
 800bb24:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <__smakebuf_r+0x7c>)
 800bb26:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	6020      	str	r0, [r4, #0]
 800bb2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	9b00      	ldr	r3, [sp, #0]
 800bb34:	6163      	str	r3, [r4, #20]
 800bb36:	9b01      	ldr	r3, [sp, #4]
 800bb38:	6120      	str	r0, [r4, #16]
 800bb3a:	b15b      	cbz	r3, 800bb54 <__smakebuf_r+0x74>
 800bb3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb40:	4630      	mov	r0, r6
 800bb42:	f000 f8d5 	bl	800bcf0 <_isatty_r>
 800bb46:	b128      	cbz	r0, 800bb54 <__smakebuf_r+0x74>
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	f023 0303 	bic.w	r3, r3, #3
 800bb4e:	f043 0301 	orr.w	r3, r3, #1
 800bb52:	81a3      	strh	r3, [r4, #12]
 800bb54:	89a0      	ldrh	r0, [r4, #12]
 800bb56:	4305      	orrs	r5, r0
 800bb58:	81a5      	strh	r5, [r4, #12]
 800bb5a:	e7cd      	b.n	800baf8 <__smakebuf_r+0x18>
 800bb5c:	0800b8f1 	.word	0x0800b8f1

0800bb60 <__malloc_lock>:
 800bb60:	4801      	ldr	r0, [pc, #4]	; (800bb68 <__malloc_lock+0x8>)
 800bb62:	f7ff bf97 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800bb66:	bf00      	nop
 800bb68:	20000828 	.word	0x20000828

0800bb6c <__malloc_unlock>:
 800bb6c:	4801      	ldr	r0, [pc, #4]	; (800bb74 <__malloc_unlock+0x8>)
 800bb6e:	f7ff bf92 	b.w	800ba96 <__retarget_lock_release_recursive>
 800bb72:	bf00      	nop
 800bb74:	20000828 	.word	0x20000828

0800bb78 <_raise_r>:
 800bb78:	291f      	cmp	r1, #31
 800bb7a:	b538      	push	{r3, r4, r5, lr}
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	460d      	mov	r5, r1
 800bb80:	d904      	bls.n	800bb8c <_raise_r+0x14>
 800bb82:	2316      	movs	r3, #22
 800bb84:	6003      	str	r3, [r0, #0]
 800bb86:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8a:	bd38      	pop	{r3, r4, r5, pc}
 800bb8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb8e:	b112      	cbz	r2, 800bb96 <_raise_r+0x1e>
 800bb90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb94:	b94b      	cbnz	r3, 800bbaa <_raise_r+0x32>
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 f830 	bl	800bbfc <_getpid_r>
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	4601      	mov	r1, r0
 800bba0:	4620      	mov	r0, r4
 800bba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba6:	f000 b817 	b.w	800bbd8 <_kill_r>
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d00a      	beq.n	800bbc4 <_raise_r+0x4c>
 800bbae:	1c59      	adds	r1, r3, #1
 800bbb0:	d103      	bne.n	800bbba <_raise_r+0x42>
 800bbb2:	2316      	movs	r3, #22
 800bbb4:	6003      	str	r3, [r0, #0]
 800bbb6:	2001      	movs	r0, #1
 800bbb8:	e7e7      	b.n	800bb8a <_raise_r+0x12>
 800bbba:	2400      	movs	r4, #0
 800bbbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	4798      	blx	r3
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	e7e0      	b.n	800bb8a <_raise_r+0x12>

0800bbc8 <raise>:
 800bbc8:	4b02      	ldr	r3, [pc, #8]	; (800bbd4 <raise+0xc>)
 800bbca:	4601      	mov	r1, r0
 800bbcc:	6818      	ldr	r0, [r3, #0]
 800bbce:	f7ff bfd3 	b.w	800bb78 <_raise_r>
 800bbd2:	bf00      	nop
 800bbd4:	20000068 	.word	0x20000068

0800bbd8 <_kill_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	4d07      	ldr	r5, [pc, #28]	; (800bbf8 <_kill_r+0x20>)
 800bbdc:	2300      	movs	r3, #0
 800bbde:	4604      	mov	r4, r0
 800bbe0:	4608      	mov	r0, r1
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	602b      	str	r3, [r5, #0]
 800bbe6:	f7f8 fb81 	bl	80042ec <_kill>
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	d102      	bne.n	800bbf4 <_kill_r+0x1c>
 800bbee:	682b      	ldr	r3, [r5, #0]
 800bbf0:	b103      	cbz	r3, 800bbf4 <_kill_r+0x1c>
 800bbf2:	6023      	str	r3, [r4, #0]
 800bbf4:	bd38      	pop	{r3, r4, r5, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000830 	.word	0x20000830

0800bbfc <_getpid_r>:
 800bbfc:	f7f8 bb6e 	b.w	80042dc <_getpid>

0800bc00 <__sread>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	460c      	mov	r4, r1
 800bc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc08:	f000 f894 	bl	800bd34 <_read_r>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	bfab      	itete	ge
 800bc10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc12:	89a3      	ldrhlt	r3, [r4, #12]
 800bc14:	181b      	addge	r3, r3, r0
 800bc16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc1a:	bfac      	ite	ge
 800bc1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc1e:	81a3      	strhlt	r3, [r4, #12]
 800bc20:	bd10      	pop	{r4, pc}

0800bc22 <__swrite>:
 800bc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc26:	461f      	mov	r7, r3
 800bc28:	898b      	ldrh	r3, [r1, #12]
 800bc2a:	05db      	lsls	r3, r3, #23
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	460c      	mov	r4, r1
 800bc30:	4616      	mov	r6, r2
 800bc32:	d505      	bpl.n	800bc40 <__swrite+0x1e>
 800bc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc38:	2302      	movs	r3, #2
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f000 f868 	bl	800bd10 <_lseek_r>
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc4a:	81a3      	strh	r3, [r4, #12]
 800bc4c:	4632      	mov	r2, r6
 800bc4e:	463b      	mov	r3, r7
 800bc50:	4628      	mov	r0, r5
 800bc52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc56:	f000 b817 	b.w	800bc88 <_write_r>

0800bc5a <__sseek>:
 800bc5a:	b510      	push	{r4, lr}
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc62:	f000 f855 	bl	800bd10 <_lseek_r>
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	bf15      	itete	ne
 800bc6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc76:	81a3      	strheq	r3, [r4, #12]
 800bc78:	bf18      	it	ne
 800bc7a:	81a3      	strhne	r3, [r4, #12]
 800bc7c:	bd10      	pop	{r4, pc}

0800bc7e <__sclose>:
 800bc7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc82:	f000 b813 	b.w	800bcac <_close_r>
	...

0800bc88 <_write_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	; (800bca8 <_write_r+0x20>)
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	602a      	str	r2, [r5, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f8 fb5f 	bl	800435a <_write>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_write_r+0x1e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_write_r+0x1e>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	20000830 	.word	0x20000830

0800bcac <_close_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d06      	ldr	r5, [pc, #24]	; (800bcc8 <_close_r+0x1c>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	602b      	str	r3, [r5, #0]
 800bcb8:	f7f8 fb6b 	bl	8004392 <_close>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_close_r+0x1a>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_close_r+0x1a>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20000830 	.word	0x20000830

0800bccc <_fstat_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d07      	ldr	r5, [pc, #28]	; (800bcec <_fstat_r+0x20>)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	f7f8 fb66 	bl	80043aa <_fstat>
 800bcde:	1c43      	adds	r3, r0, #1
 800bce0:	d102      	bne.n	800bce8 <_fstat_r+0x1c>
 800bce2:	682b      	ldr	r3, [r5, #0]
 800bce4:	b103      	cbz	r3, 800bce8 <_fstat_r+0x1c>
 800bce6:	6023      	str	r3, [r4, #0]
 800bce8:	bd38      	pop	{r3, r4, r5, pc}
 800bcea:	bf00      	nop
 800bcec:	20000830 	.word	0x20000830

0800bcf0 <_isatty_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4d06      	ldr	r5, [pc, #24]	; (800bd0c <_isatty_r+0x1c>)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	4608      	mov	r0, r1
 800bcfa:	602b      	str	r3, [r5, #0]
 800bcfc:	f7f8 fb65 	bl	80043ca <_isatty>
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	d102      	bne.n	800bd0a <_isatty_r+0x1a>
 800bd04:	682b      	ldr	r3, [r5, #0]
 800bd06:	b103      	cbz	r3, 800bd0a <_isatty_r+0x1a>
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
 800bd0c:	20000830 	.word	0x20000830

0800bd10 <_lseek_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d07      	ldr	r5, [pc, #28]	; (800bd30 <_lseek_r+0x20>)
 800bd14:	4604      	mov	r4, r0
 800bd16:	4608      	mov	r0, r1
 800bd18:	4611      	mov	r1, r2
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	602a      	str	r2, [r5, #0]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f7f8 fb5e 	bl	80043e0 <_lseek>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d102      	bne.n	800bd2e <_lseek_r+0x1e>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	b103      	cbz	r3, 800bd2e <_lseek_r+0x1e>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	20000830 	.word	0x20000830

0800bd34 <_read_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d07      	ldr	r5, [pc, #28]	; (800bd54 <_read_r+0x20>)
 800bd38:	4604      	mov	r4, r0
 800bd3a:	4608      	mov	r0, r1
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	2200      	movs	r2, #0
 800bd40:	602a      	str	r2, [r5, #0]
 800bd42:	461a      	mov	r2, r3
 800bd44:	f7f8 faec 	bl	8004320 <_read>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	d102      	bne.n	800bd52 <_read_r+0x1e>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	b103      	cbz	r3, 800bd52 <_read_r+0x1e>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	20000830 	.word	0x20000830

0800bd58 <pow>:
 800bd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	ec59 8b10 	vmov	r8, r9, d0
 800bd60:	ec57 6b11 	vmov	r6, r7, d1
 800bd64:	f000 f8dc 	bl	800bf20 <__ieee754_pow>
 800bd68:	4b4e      	ldr	r3, [pc, #312]	; (800bea4 <pow+0x14c>)
 800bd6a:	f993 3000 	ldrsb.w	r3, [r3]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	ec55 4b10 	vmov	r4, r5, d0
 800bd74:	d015      	beq.n	800bda2 <pow+0x4a>
 800bd76:	4632      	mov	r2, r6
 800bd78:	463b      	mov	r3, r7
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	f7f4 fecd 	bl	8000b1c <__aeabi_dcmpun>
 800bd82:	b970      	cbnz	r0, 800bda2 <pow+0x4a>
 800bd84:	4642      	mov	r2, r8
 800bd86:	464b      	mov	r3, r9
 800bd88:	4640      	mov	r0, r8
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	f7f4 fec6 	bl	8000b1c <__aeabi_dcmpun>
 800bd90:	2200      	movs	r2, #0
 800bd92:	2300      	movs	r3, #0
 800bd94:	b148      	cbz	r0, 800bdaa <pow+0x52>
 800bd96:	4630      	mov	r0, r6
 800bd98:	4639      	mov	r1, r7
 800bd9a:	f7f4 fe8d 	bl	8000ab8 <__aeabi_dcmpeq>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d17d      	bne.n	800be9e <pow+0x146>
 800bda2:	ec45 4b10 	vmov	d0, r4, r5
 800bda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fe83 	bl	8000ab8 <__aeabi_dcmpeq>
 800bdb2:	b1e0      	cbz	r0, 800bdee <pow+0x96>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4630      	mov	r0, r6
 800bdba:	4639      	mov	r1, r7
 800bdbc:	f7f4 fe7c 	bl	8000ab8 <__aeabi_dcmpeq>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d16c      	bne.n	800be9e <pow+0x146>
 800bdc4:	ec47 6b10 	vmov	d0, r6, r7
 800bdc8:	f000 fe89 	bl	800cade <finite>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d0e8      	beq.n	800bda2 <pow+0x4a>
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	f7f4 fe78 	bl	8000acc <__aeabi_dcmplt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d0e0      	beq.n	800bda2 <pow+0x4a>
 800bde0:	f7fe ff2a 	bl	800ac38 <__errno>
 800bde4:	2321      	movs	r3, #33	; 0x21
 800bde6:	6003      	str	r3, [r0, #0]
 800bde8:	2400      	movs	r4, #0
 800bdea:	4d2f      	ldr	r5, [pc, #188]	; (800bea8 <pow+0x150>)
 800bdec:	e7d9      	b.n	800bda2 <pow+0x4a>
 800bdee:	ec45 4b10 	vmov	d0, r4, r5
 800bdf2:	f000 fe74 	bl	800cade <finite>
 800bdf6:	bbb8      	cbnz	r0, 800be68 <pow+0x110>
 800bdf8:	ec49 8b10 	vmov	d0, r8, r9
 800bdfc:	f000 fe6f 	bl	800cade <finite>
 800be00:	b390      	cbz	r0, 800be68 <pow+0x110>
 800be02:	ec47 6b10 	vmov	d0, r6, r7
 800be06:	f000 fe6a 	bl	800cade <finite>
 800be0a:	b368      	cbz	r0, 800be68 <pow+0x110>
 800be0c:	4622      	mov	r2, r4
 800be0e:	462b      	mov	r3, r5
 800be10:	4620      	mov	r0, r4
 800be12:	4629      	mov	r1, r5
 800be14:	f7f4 fe82 	bl	8000b1c <__aeabi_dcmpun>
 800be18:	b160      	cbz	r0, 800be34 <pow+0xdc>
 800be1a:	f7fe ff0d 	bl	800ac38 <__errno>
 800be1e:	2321      	movs	r3, #33	; 0x21
 800be20:	6003      	str	r3, [r0, #0]
 800be22:	2200      	movs	r2, #0
 800be24:	2300      	movs	r3, #0
 800be26:	4610      	mov	r0, r2
 800be28:	4619      	mov	r1, r3
 800be2a:	f7f4 fd07 	bl	800083c <__aeabi_ddiv>
 800be2e:	4604      	mov	r4, r0
 800be30:	460d      	mov	r5, r1
 800be32:	e7b6      	b.n	800bda2 <pow+0x4a>
 800be34:	f7fe ff00 	bl	800ac38 <__errno>
 800be38:	2322      	movs	r3, #34	; 0x22
 800be3a:	6003      	str	r3, [r0, #0]
 800be3c:	2200      	movs	r2, #0
 800be3e:	2300      	movs	r3, #0
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	f7f4 fe42 	bl	8000acc <__aeabi_dcmplt>
 800be48:	2400      	movs	r4, #0
 800be4a:	b158      	cbz	r0, 800be64 <pow+0x10c>
 800be4c:	ec47 6b10 	vmov	d0, r6, r7
 800be50:	f000 fe5a 	bl	800cb08 <rint>
 800be54:	4632      	mov	r2, r6
 800be56:	ec51 0b10 	vmov	r0, r1, d0
 800be5a:	463b      	mov	r3, r7
 800be5c:	f7f4 fe2c 	bl	8000ab8 <__aeabi_dcmpeq>
 800be60:	2800      	cmp	r0, #0
 800be62:	d0c2      	beq.n	800bdea <pow+0x92>
 800be64:	4d11      	ldr	r5, [pc, #68]	; (800beac <pow+0x154>)
 800be66:	e79c      	b.n	800bda2 <pow+0x4a>
 800be68:	2200      	movs	r2, #0
 800be6a:	2300      	movs	r3, #0
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fe22 	bl	8000ab8 <__aeabi_dcmpeq>
 800be74:	2800      	cmp	r0, #0
 800be76:	d094      	beq.n	800bda2 <pow+0x4a>
 800be78:	ec49 8b10 	vmov	d0, r8, r9
 800be7c:	f000 fe2f 	bl	800cade <finite>
 800be80:	2800      	cmp	r0, #0
 800be82:	d08e      	beq.n	800bda2 <pow+0x4a>
 800be84:	ec47 6b10 	vmov	d0, r6, r7
 800be88:	f000 fe29 	bl	800cade <finite>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d088      	beq.n	800bda2 <pow+0x4a>
 800be90:	f7fe fed2 	bl	800ac38 <__errno>
 800be94:	2322      	movs	r3, #34	; 0x22
 800be96:	6003      	str	r3, [r0, #0]
 800be98:	2400      	movs	r4, #0
 800be9a:	2500      	movs	r5, #0
 800be9c:	e781      	b.n	800bda2 <pow+0x4a>
 800be9e:	4d04      	ldr	r5, [pc, #16]	; (800beb0 <pow+0x158>)
 800bea0:	2400      	movs	r4, #0
 800bea2:	e77e      	b.n	800bda2 <pow+0x4a>
 800bea4:	200000cc 	.word	0x200000cc
 800bea8:	fff00000 	.word	0xfff00000
 800beac:	7ff00000 	.word	0x7ff00000
 800beb0:	3ff00000 	.word	0x3ff00000

0800beb4 <sqrt>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	ed2d 8b02 	vpush	{d8}
 800beba:	ec55 4b10 	vmov	r4, r5, d0
 800bebe:	f000 fd51 	bl	800c964 <__ieee754_sqrt>
 800bec2:	4b15      	ldr	r3, [pc, #84]	; (800bf18 <sqrt+0x64>)
 800bec4:	eeb0 8a40 	vmov.f32	s16, s0
 800bec8:	eef0 8a60 	vmov.f32	s17, s1
 800becc:	f993 3000 	ldrsb.w	r3, [r3]
 800bed0:	3301      	adds	r3, #1
 800bed2:	d019      	beq.n	800bf08 <sqrt+0x54>
 800bed4:	4622      	mov	r2, r4
 800bed6:	462b      	mov	r3, r5
 800bed8:	4620      	mov	r0, r4
 800beda:	4629      	mov	r1, r5
 800bedc:	f7f4 fe1e 	bl	8000b1c <__aeabi_dcmpun>
 800bee0:	b990      	cbnz	r0, 800bf08 <sqrt+0x54>
 800bee2:	2200      	movs	r2, #0
 800bee4:	2300      	movs	r3, #0
 800bee6:	4620      	mov	r0, r4
 800bee8:	4629      	mov	r1, r5
 800beea:	f7f4 fdef 	bl	8000acc <__aeabi_dcmplt>
 800beee:	b158      	cbz	r0, 800bf08 <sqrt+0x54>
 800bef0:	f7fe fea2 	bl	800ac38 <__errno>
 800bef4:	2321      	movs	r3, #33	; 0x21
 800bef6:	6003      	str	r3, [r0, #0]
 800bef8:	2200      	movs	r2, #0
 800befa:	2300      	movs	r3, #0
 800befc:	4610      	mov	r0, r2
 800befe:	4619      	mov	r1, r3
 800bf00:	f7f4 fc9c 	bl	800083c <__aeabi_ddiv>
 800bf04:	ec41 0b18 	vmov	d8, r0, r1
 800bf08:	eeb0 0a48 	vmov.f32	s0, s16
 800bf0c:	eef0 0a68 	vmov.f32	s1, s17
 800bf10:	ecbd 8b02 	vpop	{d8}
 800bf14:	bd38      	pop	{r3, r4, r5, pc}
 800bf16:	bf00      	nop
 800bf18:	200000cc 	.word	0x200000cc
 800bf1c:	00000000 	.word	0x00000000

0800bf20 <__ieee754_pow>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	ed2d 8b06 	vpush	{d8-d10}
 800bf28:	b08d      	sub	sp, #52	; 0x34
 800bf2a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bf2e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800bf32:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bf36:	ea56 0100 	orrs.w	r1, r6, r0
 800bf3a:	ec53 2b10 	vmov	r2, r3, d0
 800bf3e:	f000 84d1 	beq.w	800c8e4 <__ieee754_pow+0x9c4>
 800bf42:	497f      	ldr	r1, [pc, #508]	; (800c140 <__ieee754_pow+0x220>)
 800bf44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bf48:	428c      	cmp	r4, r1
 800bf4a:	ee10 8a10 	vmov	r8, s0
 800bf4e:	4699      	mov	r9, r3
 800bf50:	dc09      	bgt.n	800bf66 <__ieee754_pow+0x46>
 800bf52:	d103      	bne.n	800bf5c <__ieee754_pow+0x3c>
 800bf54:	b97a      	cbnz	r2, 800bf76 <__ieee754_pow+0x56>
 800bf56:	42a6      	cmp	r6, r4
 800bf58:	dd02      	ble.n	800bf60 <__ieee754_pow+0x40>
 800bf5a:	e00c      	b.n	800bf76 <__ieee754_pow+0x56>
 800bf5c:	428e      	cmp	r6, r1
 800bf5e:	dc02      	bgt.n	800bf66 <__ieee754_pow+0x46>
 800bf60:	428e      	cmp	r6, r1
 800bf62:	d110      	bne.n	800bf86 <__ieee754_pow+0x66>
 800bf64:	b178      	cbz	r0, 800bf86 <__ieee754_pow+0x66>
 800bf66:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bf6a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bf6e:	ea54 0308 	orrs.w	r3, r4, r8
 800bf72:	f000 84b7 	beq.w	800c8e4 <__ieee754_pow+0x9c4>
 800bf76:	4873      	ldr	r0, [pc, #460]	; (800c144 <__ieee754_pow+0x224>)
 800bf78:	b00d      	add	sp, #52	; 0x34
 800bf7a:	ecbd 8b06 	vpop	{d8-d10}
 800bf7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf82:	f000 bdb9 	b.w	800caf8 <nan>
 800bf86:	f1b9 0f00 	cmp.w	r9, #0
 800bf8a:	da36      	bge.n	800bffa <__ieee754_pow+0xda>
 800bf8c:	496e      	ldr	r1, [pc, #440]	; (800c148 <__ieee754_pow+0x228>)
 800bf8e:	428e      	cmp	r6, r1
 800bf90:	dc51      	bgt.n	800c036 <__ieee754_pow+0x116>
 800bf92:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800bf96:	428e      	cmp	r6, r1
 800bf98:	f340 84af 	ble.w	800c8fa <__ieee754_pow+0x9da>
 800bf9c:	1531      	asrs	r1, r6, #20
 800bf9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bfa2:	2914      	cmp	r1, #20
 800bfa4:	dd0f      	ble.n	800bfc6 <__ieee754_pow+0xa6>
 800bfa6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800bfaa:	fa20 fc01 	lsr.w	ip, r0, r1
 800bfae:	fa0c f101 	lsl.w	r1, ip, r1
 800bfb2:	4281      	cmp	r1, r0
 800bfb4:	f040 84a1 	bne.w	800c8fa <__ieee754_pow+0x9da>
 800bfb8:	f00c 0c01 	and.w	ip, ip, #1
 800bfbc:	f1cc 0102 	rsb	r1, ip, #2
 800bfc0:	9100      	str	r1, [sp, #0]
 800bfc2:	b180      	cbz	r0, 800bfe6 <__ieee754_pow+0xc6>
 800bfc4:	e059      	b.n	800c07a <__ieee754_pow+0x15a>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d155      	bne.n	800c076 <__ieee754_pow+0x156>
 800bfca:	f1c1 0114 	rsb	r1, r1, #20
 800bfce:	fa46 fc01 	asr.w	ip, r6, r1
 800bfd2:	fa0c f101 	lsl.w	r1, ip, r1
 800bfd6:	42b1      	cmp	r1, r6
 800bfd8:	f040 848c 	bne.w	800c8f4 <__ieee754_pow+0x9d4>
 800bfdc:	f00c 0c01 	and.w	ip, ip, #1
 800bfe0:	f1cc 0102 	rsb	r1, ip, #2
 800bfe4:	9100      	str	r1, [sp, #0]
 800bfe6:	4959      	ldr	r1, [pc, #356]	; (800c14c <__ieee754_pow+0x22c>)
 800bfe8:	428e      	cmp	r6, r1
 800bfea:	d12d      	bne.n	800c048 <__ieee754_pow+0x128>
 800bfec:	2f00      	cmp	r7, #0
 800bfee:	da79      	bge.n	800c0e4 <__ieee754_pow+0x1c4>
 800bff0:	4956      	ldr	r1, [pc, #344]	; (800c14c <__ieee754_pow+0x22c>)
 800bff2:	2000      	movs	r0, #0
 800bff4:	f7f4 fc22 	bl	800083c <__aeabi_ddiv>
 800bff8:	e016      	b.n	800c028 <__ieee754_pow+0x108>
 800bffa:	2100      	movs	r1, #0
 800bffc:	9100      	str	r1, [sp, #0]
 800bffe:	2800      	cmp	r0, #0
 800c000:	d13b      	bne.n	800c07a <__ieee754_pow+0x15a>
 800c002:	494f      	ldr	r1, [pc, #316]	; (800c140 <__ieee754_pow+0x220>)
 800c004:	428e      	cmp	r6, r1
 800c006:	d1ee      	bne.n	800bfe6 <__ieee754_pow+0xc6>
 800c008:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c00c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c010:	ea53 0308 	orrs.w	r3, r3, r8
 800c014:	f000 8466 	beq.w	800c8e4 <__ieee754_pow+0x9c4>
 800c018:	4b4d      	ldr	r3, [pc, #308]	; (800c150 <__ieee754_pow+0x230>)
 800c01a:	429c      	cmp	r4, r3
 800c01c:	dd0d      	ble.n	800c03a <__ieee754_pow+0x11a>
 800c01e:	2f00      	cmp	r7, #0
 800c020:	f280 8464 	bge.w	800c8ec <__ieee754_pow+0x9cc>
 800c024:	2000      	movs	r0, #0
 800c026:	2100      	movs	r1, #0
 800c028:	ec41 0b10 	vmov	d0, r0, r1
 800c02c:	b00d      	add	sp, #52	; 0x34
 800c02e:	ecbd 8b06 	vpop	{d8-d10}
 800c032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c036:	2102      	movs	r1, #2
 800c038:	e7e0      	b.n	800bffc <__ieee754_pow+0xdc>
 800c03a:	2f00      	cmp	r7, #0
 800c03c:	daf2      	bge.n	800c024 <__ieee754_pow+0x104>
 800c03e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c042:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c046:	e7ef      	b.n	800c028 <__ieee754_pow+0x108>
 800c048:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c04c:	d104      	bne.n	800c058 <__ieee754_pow+0x138>
 800c04e:	4610      	mov	r0, r2
 800c050:	4619      	mov	r1, r3
 800c052:	f7f4 fac9 	bl	80005e8 <__aeabi_dmul>
 800c056:	e7e7      	b.n	800c028 <__ieee754_pow+0x108>
 800c058:	493e      	ldr	r1, [pc, #248]	; (800c154 <__ieee754_pow+0x234>)
 800c05a:	428f      	cmp	r7, r1
 800c05c:	d10d      	bne.n	800c07a <__ieee754_pow+0x15a>
 800c05e:	f1b9 0f00 	cmp.w	r9, #0
 800c062:	db0a      	blt.n	800c07a <__ieee754_pow+0x15a>
 800c064:	ec43 2b10 	vmov	d0, r2, r3
 800c068:	b00d      	add	sp, #52	; 0x34
 800c06a:	ecbd 8b06 	vpop	{d8-d10}
 800c06e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c072:	f000 bc77 	b.w	800c964 <__ieee754_sqrt>
 800c076:	2100      	movs	r1, #0
 800c078:	9100      	str	r1, [sp, #0]
 800c07a:	ec43 2b10 	vmov	d0, r2, r3
 800c07e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c082:	f000 fd23 	bl	800cacc <fabs>
 800c086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c08a:	ec51 0b10 	vmov	r0, r1, d0
 800c08e:	f1b8 0f00 	cmp.w	r8, #0
 800c092:	d12a      	bne.n	800c0ea <__ieee754_pow+0x1ca>
 800c094:	b12c      	cbz	r4, 800c0a2 <__ieee754_pow+0x182>
 800c096:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c14c <__ieee754_pow+0x22c>
 800c09a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c09e:	45e6      	cmp	lr, ip
 800c0a0:	d123      	bne.n	800c0ea <__ieee754_pow+0x1ca>
 800c0a2:	2f00      	cmp	r7, #0
 800c0a4:	da05      	bge.n	800c0b2 <__ieee754_pow+0x192>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	4927      	ldr	r1, [pc, #156]	; (800c14c <__ieee754_pow+0x22c>)
 800c0ae:	f7f4 fbc5 	bl	800083c <__aeabi_ddiv>
 800c0b2:	f1b9 0f00 	cmp.w	r9, #0
 800c0b6:	dab7      	bge.n	800c028 <__ieee754_pow+0x108>
 800c0b8:	9b00      	ldr	r3, [sp, #0]
 800c0ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c0be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c0c2:	4323      	orrs	r3, r4
 800c0c4:	d108      	bne.n	800c0d8 <__ieee754_pow+0x1b8>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4610      	mov	r0, r2
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	f7f4 f8d3 	bl	8000278 <__aeabi_dsub>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	e78d      	b.n	800bff4 <__ieee754_pow+0xd4>
 800c0d8:	9b00      	ldr	r3, [sp, #0]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d1a4      	bne.n	800c028 <__ieee754_pow+0x108>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	e79e      	b.n	800c028 <__ieee754_pow+0x108>
 800c0ea:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c0ee:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c0f2:	950a      	str	r5, [sp, #40]	; 0x28
 800c0f4:	9d00      	ldr	r5, [sp, #0]
 800c0f6:	46ac      	mov	ip, r5
 800c0f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c0fa:	ea5c 0505 	orrs.w	r5, ip, r5
 800c0fe:	d0e4      	beq.n	800c0ca <__ieee754_pow+0x1aa>
 800c100:	4b15      	ldr	r3, [pc, #84]	; (800c158 <__ieee754_pow+0x238>)
 800c102:	429e      	cmp	r6, r3
 800c104:	f340 80fc 	ble.w	800c300 <__ieee754_pow+0x3e0>
 800c108:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c10c:	429e      	cmp	r6, r3
 800c10e:	4b10      	ldr	r3, [pc, #64]	; (800c150 <__ieee754_pow+0x230>)
 800c110:	dd07      	ble.n	800c122 <__ieee754_pow+0x202>
 800c112:	429c      	cmp	r4, r3
 800c114:	dc0a      	bgt.n	800c12c <__ieee754_pow+0x20c>
 800c116:	2f00      	cmp	r7, #0
 800c118:	da84      	bge.n	800c024 <__ieee754_pow+0x104>
 800c11a:	a307      	add	r3, pc, #28	; (adr r3, 800c138 <__ieee754_pow+0x218>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	e795      	b.n	800c04e <__ieee754_pow+0x12e>
 800c122:	429c      	cmp	r4, r3
 800c124:	dbf7      	blt.n	800c116 <__ieee754_pow+0x1f6>
 800c126:	4b09      	ldr	r3, [pc, #36]	; (800c14c <__ieee754_pow+0x22c>)
 800c128:	429c      	cmp	r4, r3
 800c12a:	dd17      	ble.n	800c15c <__ieee754_pow+0x23c>
 800c12c:	2f00      	cmp	r7, #0
 800c12e:	dcf4      	bgt.n	800c11a <__ieee754_pow+0x1fa>
 800c130:	e778      	b.n	800c024 <__ieee754_pow+0x104>
 800c132:	bf00      	nop
 800c134:	f3af 8000 	nop.w
 800c138:	8800759c 	.word	0x8800759c
 800c13c:	7e37e43c 	.word	0x7e37e43c
 800c140:	7ff00000 	.word	0x7ff00000
 800c144:	080f0f1a 	.word	0x080f0f1a
 800c148:	433fffff 	.word	0x433fffff
 800c14c:	3ff00000 	.word	0x3ff00000
 800c150:	3fefffff 	.word	0x3fefffff
 800c154:	3fe00000 	.word	0x3fe00000
 800c158:	41e00000 	.word	0x41e00000
 800c15c:	4b64      	ldr	r3, [pc, #400]	; (800c2f0 <__ieee754_pow+0x3d0>)
 800c15e:	2200      	movs	r2, #0
 800c160:	f7f4 f88a 	bl	8000278 <__aeabi_dsub>
 800c164:	a356      	add	r3, pc, #344	; (adr r3, 800c2c0 <__ieee754_pow+0x3a0>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	4604      	mov	r4, r0
 800c16c:	460d      	mov	r5, r1
 800c16e:	f7f4 fa3b 	bl	80005e8 <__aeabi_dmul>
 800c172:	a355      	add	r3, pc, #340	; (adr r3, 800c2c8 <__ieee754_pow+0x3a8>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	4606      	mov	r6, r0
 800c17a:	460f      	mov	r7, r1
 800c17c:	4620      	mov	r0, r4
 800c17e:	4629      	mov	r1, r5
 800c180:	f7f4 fa32 	bl	80005e8 <__aeabi_dmul>
 800c184:	4b5b      	ldr	r3, [pc, #364]	; (800c2f4 <__ieee754_pow+0x3d4>)
 800c186:	4682      	mov	sl, r0
 800c188:	468b      	mov	fp, r1
 800c18a:	2200      	movs	r2, #0
 800c18c:	4620      	mov	r0, r4
 800c18e:	4629      	mov	r1, r5
 800c190:	f7f4 fa2a 	bl	80005e8 <__aeabi_dmul>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	a14d      	add	r1, pc, #308	; (adr r1, 800c2d0 <__ieee754_pow+0x3b0>)
 800c19a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c19e:	f7f4 f86b 	bl	8000278 <__aeabi_dsub>
 800c1a2:	4622      	mov	r2, r4
 800c1a4:	462b      	mov	r3, r5
 800c1a6:	f7f4 fa1f 	bl	80005e8 <__aeabi_dmul>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	4951      	ldr	r1, [pc, #324]	; (800c2f8 <__ieee754_pow+0x3d8>)
 800c1b2:	f7f4 f861 	bl	8000278 <__aeabi_dsub>
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	4680      	mov	r8, r0
 800c1ba:	4689      	mov	r9, r1
 800c1bc:	462b      	mov	r3, r5
 800c1be:	4620      	mov	r0, r4
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	f7f4 fa11 	bl	80005e8 <__aeabi_dmul>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	4649      	mov	r1, r9
 800c1ce:	f7f4 fa0b 	bl	80005e8 <__aeabi_dmul>
 800c1d2:	a341      	add	r3, pc, #260	; (adr r3, 800c2d8 <__ieee754_pow+0x3b8>)
 800c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d8:	f7f4 fa06 	bl	80005e8 <__aeabi_dmul>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	4659      	mov	r1, fp
 800c1e4:	f7f4 f848 	bl	8000278 <__aeabi_dsub>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	4689      	mov	r9, r1
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	f7f4 f842 	bl	800027c <__adddf3>
 800c1f8:	2400      	movs	r4, #0
 800c1fa:	4632      	mov	r2, r6
 800c1fc:	463b      	mov	r3, r7
 800c1fe:	4620      	mov	r0, r4
 800c200:	460d      	mov	r5, r1
 800c202:	f7f4 f839 	bl	8000278 <__aeabi_dsub>
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	4640      	mov	r0, r8
 800c20c:	4649      	mov	r1, r9
 800c20e:	f7f4 f833 	bl	8000278 <__aeabi_dsub>
 800c212:	9b00      	ldr	r3, [sp, #0]
 800c214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c216:	3b01      	subs	r3, #1
 800c218:	4313      	orrs	r3, r2
 800c21a:	4682      	mov	sl, r0
 800c21c:	468b      	mov	fp, r1
 800c21e:	f040 81f1 	bne.w	800c604 <__ieee754_pow+0x6e4>
 800c222:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c2e0 <__ieee754_pow+0x3c0>
 800c226:	eeb0 8a47 	vmov.f32	s16, s14
 800c22a:	eef0 8a67 	vmov.f32	s17, s15
 800c22e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c232:	2600      	movs	r6, #0
 800c234:	4632      	mov	r2, r6
 800c236:	463b      	mov	r3, r7
 800c238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c23c:	f7f4 f81c 	bl	8000278 <__aeabi_dsub>
 800c240:	4622      	mov	r2, r4
 800c242:	462b      	mov	r3, r5
 800c244:	f7f4 f9d0 	bl	80005e8 <__aeabi_dmul>
 800c248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c24c:	4680      	mov	r8, r0
 800c24e:	4689      	mov	r9, r1
 800c250:	4650      	mov	r0, sl
 800c252:	4659      	mov	r1, fp
 800c254:	f7f4 f9c8 	bl	80005e8 <__aeabi_dmul>
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	4640      	mov	r0, r8
 800c25e:	4649      	mov	r1, r9
 800c260:	f7f4 f80c 	bl	800027c <__adddf3>
 800c264:	4632      	mov	r2, r6
 800c266:	463b      	mov	r3, r7
 800c268:	4680      	mov	r8, r0
 800c26a:	4689      	mov	r9, r1
 800c26c:	4620      	mov	r0, r4
 800c26e:	4629      	mov	r1, r5
 800c270:	f7f4 f9ba 	bl	80005e8 <__aeabi_dmul>
 800c274:	460b      	mov	r3, r1
 800c276:	4604      	mov	r4, r0
 800c278:	460d      	mov	r5, r1
 800c27a:	4602      	mov	r2, r0
 800c27c:	4649      	mov	r1, r9
 800c27e:	4640      	mov	r0, r8
 800c280:	f7f3 fffc 	bl	800027c <__adddf3>
 800c284:	4b1d      	ldr	r3, [pc, #116]	; (800c2fc <__ieee754_pow+0x3dc>)
 800c286:	4299      	cmp	r1, r3
 800c288:	ec45 4b19 	vmov	d9, r4, r5
 800c28c:	4606      	mov	r6, r0
 800c28e:	460f      	mov	r7, r1
 800c290:	468b      	mov	fp, r1
 800c292:	f340 82fe 	ble.w	800c892 <__ieee754_pow+0x972>
 800c296:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c29a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c29e:	4303      	orrs	r3, r0
 800c2a0:	f000 81f0 	beq.w	800c684 <__ieee754_pow+0x764>
 800c2a4:	a310      	add	r3, pc, #64	; (adr r3, 800c2e8 <__ieee754_pow+0x3c8>)
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	ec51 0b18 	vmov	r0, r1, d8
 800c2ae:	f7f4 f99b 	bl	80005e8 <__aeabi_dmul>
 800c2b2:	a30d      	add	r3, pc, #52	; (adr r3, 800c2e8 <__ieee754_pow+0x3c8>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	e6cb      	b.n	800c052 <__ieee754_pow+0x132>
 800c2ba:	bf00      	nop
 800c2bc:	f3af 8000 	nop.w
 800c2c0:	60000000 	.word	0x60000000
 800c2c4:	3ff71547 	.word	0x3ff71547
 800c2c8:	f85ddf44 	.word	0xf85ddf44
 800c2cc:	3e54ae0b 	.word	0x3e54ae0b
 800c2d0:	55555555 	.word	0x55555555
 800c2d4:	3fd55555 	.word	0x3fd55555
 800c2d8:	652b82fe 	.word	0x652b82fe
 800c2dc:	3ff71547 	.word	0x3ff71547
 800c2e0:	00000000 	.word	0x00000000
 800c2e4:	bff00000 	.word	0xbff00000
 800c2e8:	8800759c 	.word	0x8800759c
 800c2ec:	7e37e43c 	.word	0x7e37e43c
 800c2f0:	3ff00000 	.word	0x3ff00000
 800c2f4:	3fd00000 	.word	0x3fd00000
 800c2f8:	3fe00000 	.word	0x3fe00000
 800c2fc:	408fffff 	.word	0x408fffff
 800c300:	4bd7      	ldr	r3, [pc, #860]	; (800c660 <__ieee754_pow+0x740>)
 800c302:	ea03 0309 	and.w	r3, r3, r9
 800c306:	2200      	movs	r2, #0
 800c308:	b92b      	cbnz	r3, 800c316 <__ieee754_pow+0x3f6>
 800c30a:	4bd6      	ldr	r3, [pc, #856]	; (800c664 <__ieee754_pow+0x744>)
 800c30c:	f7f4 f96c 	bl	80005e8 <__aeabi_dmul>
 800c310:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c314:	460c      	mov	r4, r1
 800c316:	1523      	asrs	r3, r4, #20
 800c318:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c31c:	4413      	add	r3, r2
 800c31e:	9309      	str	r3, [sp, #36]	; 0x24
 800c320:	4bd1      	ldr	r3, [pc, #836]	; (800c668 <__ieee754_pow+0x748>)
 800c322:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c326:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c32a:	429c      	cmp	r4, r3
 800c32c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c330:	dd08      	ble.n	800c344 <__ieee754_pow+0x424>
 800c332:	4bce      	ldr	r3, [pc, #824]	; (800c66c <__ieee754_pow+0x74c>)
 800c334:	429c      	cmp	r4, r3
 800c336:	f340 8163 	ble.w	800c600 <__ieee754_pow+0x6e0>
 800c33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c33c:	3301      	adds	r3, #1
 800c33e:	9309      	str	r3, [sp, #36]	; 0x24
 800c340:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c344:	2400      	movs	r4, #0
 800c346:	00e3      	lsls	r3, r4, #3
 800c348:	930b      	str	r3, [sp, #44]	; 0x2c
 800c34a:	4bc9      	ldr	r3, [pc, #804]	; (800c670 <__ieee754_pow+0x750>)
 800c34c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c350:	ed93 7b00 	vldr	d7, [r3]
 800c354:	4629      	mov	r1, r5
 800c356:	ec53 2b17 	vmov	r2, r3, d7
 800c35a:	eeb0 8a47 	vmov.f32	s16, s14
 800c35e:	eef0 8a67 	vmov.f32	s17, s15
 800c362:	4682      	mov	sl, r0
 800c364:	f7f3 ff88 	bl	8000278 <__aeabi_dsub>
 800c368:	4652      	mov	r2, sl
 800c36a:	4606      	mov	r6, r0
 800c36c:	460f      	mov	r7, r1
 800c36e:	462b      	mov	r3, r5
 800c370:	ec51 0b18 	vmov	r0, r1, d8
 800c374:	f7f3 ff82 	bl	800027c <__adddf3>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	2000      	movs	r0, #0
 800c37e:	49bd      	ldr	r1, [pc, #756]	; (800c674 <__ieee754_pow+0x754>)
 800c380:	f7f4 fa5c 	bl	800083c <__aeabi_ddiv>
 800c384:	ec41 0b19 	vmov	d9, r0, r1
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4630      	mov	r0, r6
 800c38e:	4639      	mov	r1, r7
 800c390:	f7f4 f92a 	bl	80005e8 <__aeabi_dmul>
 800c394:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c398:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c39c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c3a8:	46ab      	mov	fp, r5
 800c3aa:	106d      	asrs	r5, r5, #1
 800c3ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c3b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c3b4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	4640      	mov	r0, r8
 800c3bc:	4649      	mov	r1, r9
 800c3be:	4614      	mov	r4, r2
 800c3c0:	461d      	mov	r5, r3
 800c3c2:	f7f4 f911 	bl	80005e8 <__aeabi_dmul>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	4639      	mov	r1, r7
 800c3ce:	f7f3 ff53 	bl	8000278 <__aeabi_dsub>
 800c3d2:	ec53 2b18 	vmov	r2, r3, d8
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	460f      	mov	r7, r1
 800c3da:	4620      	mov	r0, r4
 800c3dc:	4629      	mov	r1, r5
 800c3de:	f7f3 ff4b 	bl	8000278 <__aeabi_dsub>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4650      	mov	r0, sl
 800c3e8:	4659      	mov	r1, fp
 800c3ea:	f7f3 ff45 	bl	8000278 <__aeabi_dsub>
 800c3ee:	4642      	mov	r2, r8
 800c3f0:	464b      	mov	r3, r9
 800c3f2:	f7f4 f8f9 	bl	80005e8 <__aeabi_dmul>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	f7f3 ff3b 	bl	8000278 <__aeabi_dsub>
 800c402:	ec53 2b19 	vmov	r2, r3, d9
 800c406:	f7f4 f8ef 	bl	80005e8 <__aeabi_dmul>
 800c40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c40e:	ec41 0b18 	vmov	d8, r0, r1
 800c412:	4610      	mov	r0, r2
 800c414:	4619      	mov	r1, r3
 800c416:	f7f4 f8e7 	bl	80005e8 <__aeabi_dmul>
 800c41a:	a37d      	add	r3, pc, #500	; (adr r3, 800c610 <__ieee754_pow+0x6f0>)
 800c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c420:	4604      	mov	r4, r0
 800c422:	460d      	mov	r5, r1
 800c424:	f7f4 f8e0 	bl	80005e8 <__aeabi_dmul>
 800c428:	a37b      	add	r3, pc, #492	; (adr r3, 800c618 <__ieee754_pow+0x6f8>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f7f3 ff25 	bl	800027c <__adddf3>
 800c432:	4622      	mov	r2, r4
 800c434:	462b      	mov	r3, r5
 800c436:	f7f4 f8d7 	bl	80005e8 <__aeabi_dmul>
 800c43a:	a379      	add	r3, pc, #484	; (adr r3, 800c620 <__ieee754_pow+0x700>)
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	f7f3 ff1c 	bl	800027c <__adddf3>
 800c444:	4622      	mov	r2, r4
 800c446:	462b      	mov	r3, r5
 800c448:	f7f4 f8ce 	bl	80005e8 <__aeabi_dmul>
 800c44c:	a376      	add	r3, pc, #472	; (adr r3, 800c628 <__ieee754_pow+0x708>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f3 ff13 	bl	800027c <__adddf3>
 800c456:	4622      	mov	r2, r4
 800c458:	462b      	mov	r3, r5
 800c45a:	f7f4 f8c5 	bl	80005e8 <__aeabi_dmul>
 800c45e:	a374      	add	r3, pc, #464	; (adr r3, 800c630 <__ieee754_pow+0x710>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f3 ff0a 	bl	800027c <__adddf3>
 800c468:	4622      	mov	r2, r4
 800c46a:	462b      	mov	r3, r5
 800c46c:	f7f4 f8bc 	bl	80005e8 <__aeabi_dmul>
 800c470:	a371      	add	r3, pc, #452	; (adr r3, 800c638 <__ieee754_pow+0x718>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f3 ff01 	bl	800027c <__adddf3>
 800c47a:	4622      	mov	r2, r4
 800c47c:	4606      	mov	r6, r0
 800c47e:	460f      	mov	r7, r1
 800c480:	462b      	mov	r3, r5
 800c482:	4620      	mov	r0, r4
 800c484:	4629      	mov	r1, r5
 800c486:	f7f4 f8af 	bl	80005e8 <__aeabi_dmul>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4630      	mov	r0, r6
 800c490:	4639      	mov	r1, r7
 800c492:	f7f4 f8a9 	bl	80005e8 <__aeabi_dmul>
 800c496:	4642      	mov	r2, r8
 800c498:	4604      	mov	r4, r0
 800c49a:	460d      	mov	r5, r1
 800c49c:	464b      	mov	r3, r9
 800c49e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4a2:	f7f3 feeb 	bl	800027c <__adddf3>
 800c4a6:	ec53 2b18 	vmov	r2, r3, d8
 800c4aa:	f7f4 f89d 	bl	80005e8 <__aeabi_dmul>
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	462b      	mov	r3, r5
 800c4b2:	f7f3 fee3 	bl	800027c <__adddf3>
 800c4b6:	4642      	mov	r2, r8
 800c4b8:	4682      	mov	sl, r0
 800c4ba:	468b      	mov	fp, r1
 800c4bc:	464b      	mov	r3, r9
 800c4be:	4640      	mov	r0, r8
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	f7f4 f891 	bl	80005e8 <__aeabi_dmul>
 800c4c6:	4b6c      	ldr	r3, [pc, #432]	; (800c678 <__ieee754_pow+0x758>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	460f      	mov	r7, r1
 800c4ce:	f7f3 fed5 	bl	800027c <__adddf3>
 800c4d2:	4652      	mov	r2, sl
 800c4d4:	465b      	mov	r3, fp
 800c4d6:	f7f3 fed1 	bl	800027c <__adddf3>
 800c4da:	9c04      	ldr	r4, [sp, #16]
 800c4dc:	460d      	mov	r5, r1
 800c4de:	4622      	mov	r2, r4
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4640      	mov	r0, r8
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	f7f4 f87f 	bl	80005e8 <__aeabi_dmul>
 800c4ea:	4b63      	ldr	r3, [pc, #396]	; (800c678 <__ieee754_pow+0x758>)
 800c4ec:	4680      	mov	r8, r0
 800c4ee:	4689      	mov	r9, r1
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f7f3 febf 	bl	8000278 <__aeabi_dsub>
 800c4fa:	4632      	mov	r2, r6
 800c4fc:	463b      	mov	r3, r7
 800c4fe:	f7f3 febb 	bl	8000278 <__aeabi_dsub>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	4650      	mov	r0, sl
 800c508:	4659      	mov	r1, fp
 800c50a:	f7f3 feb5 	bl	8000278 <__aeabi_dsub>
 800c50e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c512:	f7f4 f869 	bl	80005e8 <__aeabi_dmul>
 800c516:	4622      	mov	r2, r4
 800c518:	4606      	mov	r6, r0
 800c51a:	460f      	mov	r7, r1
 800c51c:	462b      	mov	r3, r5
 800c51e:	ec51 0b18 	vmov	r0, r1, d8
 800c522:	f7f4 f861 	bl	80005e8 <__aeabi_dmul>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4630      	mov	r0, r6
 800c52c:	4639      	mov	r1, r7
 800c52e:	f7f3 fea5 	bl	800027c <__adddf3>
 800c532:	4606      	mov	r6, r0
 800c534:	460f      	mov	r7, r1
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4640      	mov	r0, r8
 800c53c:	4649      	mov	r1, r9
 800c53e:	f7f3 fe9d 	bl	800027c <__adddf3>
 800c542:	9c04      	ldr	r4, [sp, #16]
 800c544:	a33e      	add	r3, pc, #248	; (adr r3, 800c640 <__ieee754_pow+0x720>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	4620      	mov	r0, r4
 800c54c:	460d      	mov	r5, r1
 800c54e:	f7f4 f84b 	bl	80005e8 <__aeabi_dmul>
 800c552:	4642      	mov	r2, r8
 800c554:	ec41 0b18 	vmov	d8, r0, r1
 800c558:	464b      	mov	r3, r9
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f3 fe8b 	bl	8000278 <__aeabi_dsub>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f3 fe85 	bl	8000278 <__aeabi_dsub>
 800c56e:	a336      	add	r3, pc, #216	; (adr r3, 800c648 <__ieee754_pow+0x728>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	f7f4 f838 	bl	80005e8 <__aeabi_dmul>
 800c578:	a335      	add	r3, pc, #212	; (adr r3, 800c650 <__ieee754_pow+0x730>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	4606      	mov	r6, r0
 800c580:	460f      	mov	r7, r1
 800c582:	4620      	mov	r0, r4
 800c584:	4629      	mov	r1, r5
 800c586:	f7f4 f82f 	bl	80005e8 <__aeabi_dmul>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	4630      	mov	r0, r6
 800c590:	4639      	mov	r1, r7
 800c592:	f7f3 fe73 	bl	800027c <__adddf3>
 800c596:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c598:	4b38      	ldr	r3, [pc, #224]	; (800c67c <__ieee754_pow+0x75c>)
 800c59a:	4413      	add	r3, r2
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	f7f3 fe6c 	bl	800027c <__adddf3>
 800c5a4:	4682      	mov	sl, r0
 800c5a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5a8:	468b      	mov	fp, r1
 800c5aa:	f7f3 ffb3 	bl	8000514 <__aeabi_i2d>
 800c5ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5b0:	4b33      	ldr	r3, [pc, #204]	; (800c680 <__ieee754_pow+0x760>)
 800c5b2:	4413      	add	r3, r2
 800c5b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	460f      	mov	r7, r1
 800c5bc:	4652      	mov	r2, sl
 800c5be:	465b      	mov	r3, fp
 800c5c0:	ec51 0b18 	vmov	r0, r1, d8
 800c5c4:	f7f3 fe5a 	bl	800027c <__adddf3>
 800c5c8:	4642      	mov	r2, r8
 800c5ca:	464b      	mov	r3, r9
 800c5cc:	f7f3 fe56 	bl	800027c <__adddf3>
 800c5d0:	4632      	mov	r2, r6
 800c5d2:	463b      	mov	r3, r7
 800c5d4:	f7f3 fe52 	bl	800027c <__adddf3>
 800c5d8:	9c04      	ldr	r4, [sp, #16]
 800c5da:	4632      	mov	r2, r6
 800c5dc:	463b      	mov	r3, r7
 800c5de:	4620      	mov	r0, r4
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	f7f3 fe49 	bl	8000278 <__aeabi_dsub>
 800c5e6:	4642      	mov	r2, r8
 800c5e8:	464b      	mov	r3, r9
 800c5ea:	f7f3 fe45 	bl	8000278 <__aeabi_dsub>
 800c5ee:	ec53 2b18 	vmov	r2, r3, d8
 800c5f2:	f7f3 fe41 	bl	8000278 <__aeabi_dsub>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	4650      	mov	r0, sl
 800c5fc:	4659      	mov	r1, fp
 800c5fe:	e606      	b.n	800c20e <__ieee754_pow+0x2ee>
 800c600:	2401      	movs	r4, #1
 800c602:	e6a0      	b.n	800c346 <__ieee754_pow+0x426>
 800c604:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c658 <__ieee754_pow+0x738>
 800c608:	e60d      	b.n	800c226 <__ieee754_pow+0x306>
 800c60a:	bf00      	nop
 800c60c:	f3af 8000 	nop.w
 800c610:	4a454eef 	.word	0x4a454eef
 800c614:	3fca7e28 	.word	0x3fca7e28
 800c618:	93c9db65 	.word	0x93c9db65
 800c61c:	3fcd864a 	.word	0x3fcd864a
 800c620:	a91d4101 	.word	0xa91d4101
 800c624:	3fd17460 	.word	0x3fd17460
 800c628:	518f264d 	.word	0x518f264d
 800c62c:	3fd55555 	.word	0x3fd55555
 800c630:	db6fabff 	.word	0xdb6fabff
 800c634:	3fdb6db6 	.word	0x3fdb6db6
 800c638:	33333303 	.word	0x33333303
 800c63c:	3fe33333 	.word	0x3fe33333
 800c640:	e0000000 	.word	0xe0000000
 800c644:	3feec709 	.word	0x3feec709
 800c648:	dc3a03fd 	.word	0xdc3a03fd
 800c64c:	3feec709 	.word	0x3feec709
 800c650:	145b01f5 	.word	0x145b01f5
 800c654:	be3e2fe0 	.word	0xbe3e2fe0
 800c658:	00000000 	.word	0x00000000
 800c65c:	3ff00000 	.word	0x3ff00000
 800c660:	7ff00000 	.word	0x7ff00000
 800c664:	43400000 	.word	0x43400000
 800c668:	0003988e 	.word	0x0003988e
 800c66c:	000bb679 	.word	0x000bb679
 800c670:	080f0fb0 	.word	0x080f0fb0
 800c674:	3ff00000 	.word	0x3ff00000
 800c678:	40080000 	.word	0x40080000
 800c67c:	080f0fd0 	.word	0x080f0fd0
 800c680:	080f0fc0 	.word	0x080f0fc0
 800c684:	a3b5      	add	r3, pc, #724	; (adr r3, 800c95c <__ieee754_pow+0xa3c>)
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	4640      	mov	r0, r8
 800c68c:	4649      	mov	r1, r9
 800c68e:	f7f3 fdf5 	bl	800027c <__adddf3>
 800c692:	4622      	mov	r2, r4
 800c694:	ec41 0b1a 	vmov	d10, r0, r1
 800c698:	462b      	mov	r3, r5
 800c69a:	4630      	mov	r0, r6
 800c69c:	4639      	mov	r1, r7
 800c69e:	f7f3 fdeb 	bl	8000278 <__aeabi_dsub>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	ec51 0b1a 	vmov	r0, r1, d10
 800c6aa:	f7f4 fa2d 	bl	8000b08 <__aeabi_dcmpgt>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	f47f adf8 	bne.w	800c2a4 <__ieee754_pow+0x384>
 800c6b4:	4aa4      	ldr	r2, [pc, #656]	; (800c948 <__ieee754_pow+0xa28>)
 800c6b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	f340 810b 	ble.w	800c8d6 <__ieee754_pow+0x9b6>
 800c6c0:	151b      	asrs	r3, r3, #20
 800c6c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c6c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c6ca:	fa4a f303 	asr.w	r3, sl, r3
 800c6ce:	445b      	add	r3, fp
 800c6d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c6d4:	4e9d      	ldr	r6, [pc, #628]	; (800c94c <__ieee754_pow+0xa2c>)
 800c6d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c6da:	4116      	asrs	r6, r2
 800c6dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	ea23 0106 	bic.w	r1, r3, r6
 800c6e6:	f1c2 0214 	rsb	r2, r2, #20
 800c6ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c6ee:	fa4a fa02 	asr.w	sl, sl, r2
 800c6f2:	f1bb 0f00 	cmp.w	fp, #0
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	bfb8      	it	lt
 800c700:	f1ca 0a00 	rsblt	sl, sl, #0
 800c704:	f7f3 fdb8 	bl	8000278 <__aeabi_dsub>
 800c708:	ec41 0b19 	vmov	d9, r0, r1
 800c70c:	4642      	mov	r2, r8
 800c70e:	464b      	mov	r3, r9
 800c710:	ec51 0b19 	vmov	r0, r1, d9
 800c714:	f7f3 fdb2 	bl	800027c <__adddf3>
 800c718:	2400      	movs	r4, #0
 800c71a:	a379      	add	r3, pc, #484	; (adr r3, 800c900 <__ieee754_pow+0x9e0>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	4620      	mov	r0, r4
 800c722:	460d      	mov	r5, r1
 800c724:	f7f3 ff60 	bl	80005e8 <__aeabi_dmul>
 800c728:	ec53 2b19 	vmov	r2, r3, d9
 800c72c:	4606      	mov	r6, r0
 800c72e:	460f      	mov	r7, r1
 800c730:	4620      	mov	r0, r4
 800c732:	4629      	mov	r1, r5
 800c734:	f7f3 fda0 	bl	8000278 <__aeabi_dsub>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	4640      	mov	r0, r8
 800c73e:	4649      	mov	r1, r9
 800c740:	f7f3 fd9a 	bl	8000278 <__aeabi_dsub>
 800c744:	a370      	add	r3, pc, #448	; (adr r3, 800c908 <__ieee754_pow+0x9e8>)
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f7f3 ff4d 	bl	80005e8 <__aeabi_dmul>
 800c74e:	a370      	add	r3, pc, #448	; (adr r3, 800c910 <__ieee754_pow+0x9f0>)
 800c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c754:	4680      	mov	r8, r0
 800c756:	4689      	mov	r9, r1
 800c758:	4620      	mov	r0, r4
 800c75a:	4629      	mov	r1, r5
 800c75c:	f7f3 ff44 	bl	80005e8 <__aeabi_dmul>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4640      	mov	r0, r8
 800c766:	4649      	mov	r1, r9
 800c768:	f7f3 fd88 	bl	800027c <__adddf3>
 800c76c:	4604      	mov	r4, r0
 800c76e:	460d      	mov	r5, r1
 800c770:	4602      	mov	r2, r0
 800c772:	460b      	mov	r3, r1
 800c774:	4630      	mov	r0, r6
 800c776:	4639      	mov	r1, r7
 800c778:	f7f3 fd80 	bl	800027c <__adddf3>
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	4680      	mov	r8, r0
 800c782:	4689      	mov	r9, r1
 800c784:	f7f3 fd78 	bl	8000278 <__aeabi_dsub>
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	4620      	mov	r0, r4
 800c78e:	4629      	mov	r1, r5
 800c790:	f7f3 fd72 	bl	8000278 <__aeabi_dsub>
 800c794:	4642      	mov	r2, r8
 800c796:	4606      	mov	r6, r0
 800c798:	460f      	mov	r7, r1
 800c79a:	464b      	mov	r3, r9
 800c79c:	4640      	mov	r0, r8
 800c79e:	4649      	mov	r1, r9
 800c7a0:	f7f3 ff22 	bl	80005e8 <__aeabi_dmul>
 800c7a4:	a35c      	add	r3, pc, #368	; (adr r3, 800c918 <__ieee754_pow+0x9f8>)
 800c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	f7f3 ff1b 	bl	80005e8 <__aeabi_dmul>
 800c7b2:	a35b      	add	r3, pc, #364	; (adr r3, 800c920 <__ieee754_pow+0xa00>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	f7f3 fd5e 	bl	8000278 <__aeabi_dsub>
 800c7bc:	4622      	mov	r2, r4
 800c7be:	462b      	mov	r3, r5
 800c7c0:	f7f3 ff12 	bl	80005e8 <__aeabi_dmul>
 800c7c4:	a358      	add	r3, pc, #352	; (adr r3, 800c928 <__ieee754_pow+0xa08>)
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f7f3 fd57 	bl	800027c <__adddf3>
 800c7ce:	4622      	mov	r2, r4
 800c7d0:	462b      	mov	r3, r5
 800c7d2:	f7f3 ff09 	bl	80005e8 <__aeabi_dmul>
 800c7d6:	a356      	add	r3, pc, #344	; (adr r3, 800c930 <__ieee754_pow+0xa10>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f7f3 fd4c 	bl	8000278 <__aeabi_dsub>
 800c7e0:	4622      	mov	r2, r4
 800c7e2:	462b      	mov	r3, r5
 800c7e4:	f7f3 ff00 	bl	80005e8 <__aeabi_dmul>
 800c7e8:	a353      	add	r3, pc, #332	; (adr r3, 800c938 <__ieee754_pow+0xa18>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f3 fd45 	bl	800027c <__adddf3>
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	462b      	mov	r3, r5
 800c7f6:	f7f3 fef7 	bl	80005e8 <__aeabi_dmul>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	4640      	mov	r0, r8
 800c800:	4649      	mov	r1, r9
 800c802:	f7f3 fd39 	bl	8000278 <__aeabi_dsub>
 800c806:	4604      	mov	r4, r0
 800c808:	460d      	mov	r5, r1
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4640      	mov	r0, r8
 800c810:	4649      	mov	r1, r9
 800c812:	f7f3 fee9 	bl	80005e8 <__aeabi_dmul>
 800c816:	2200      	movs	r2, #0
 800c818:	ec41 0b19 	vmov	d9, r0, r1
 800c81c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c820:	4620      	mov	r0, r4
 800c822:	4629      	mov	r1, r5
 800c824:	f7f3 fd28 	bl	8000278 <__aeabi_dsub>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	ec51 0b19 	vmov	r0, r1, d9
 800c830:	f7f4 f804 	bl	800083c <__aeabi_ddiv>
 800c834:	4632      	mov	r2, r6
 800c836:	4604      	mov	r4, r0
 800c838:	460d      	mov	r5, r1
 800c83a:	463b      	mov	r3, r7
 800c83c:	4640      	mov	r0, r8
 800c83e:	4649      	mov	r1, r9
 800c840:	f7f3 fed2 	bl	80005e8 <__aeabi_dmul>
 800c844:	4632      	mov	r2, r6
 800c846:	463b      	mov	r3, r7
 800c848:	f7f3 fd18 	bl	800027c <__adddf3>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	4620      	mov	r0, r4
 800c852:	4629      	mov	r1, r5
 800c854:	f7f3 fd10 	bl	8000278 <__aeabi_dsub>
 800c858:	4642      	mov	r2, r8
 800c85a:	464b      	mov	r3, r9
 800c85c:	f7f3 fd0c 	bl	8000278 <__aeabi_dsub>
 800c860:	460b      	mov	r3, r1
 800c862:	4602      	mov	r2, r0
 800c864:	493a      	ldr	r1, [pc, #232]	; (800c950 <__ieee754_pow+0xa30>)
 800c866:	2000      	movs	r0, #0
 800c868:	f7f3 fd06 	bl	8000278 <__aeabi_dsub>
 800c86c:	e9cd 0100 	strd	r0, r1, [sp]
 800c870:	9b01      	ldr	r3, [sp, #4]
 800c872:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c87a:	da2f      	bge.n	800c8dc <__ieee754_pow+0x9bc>
 800c87c:	4650      	mov	r0, sl
 800c87e:	ed9d 0b00 	vldr	d0, [sp]
 800c882:	f000 f9cd 	bl	800cc20 <scalbn>
 800c886:	ec51 0b10 	vmov	r0, r1, d0
 800c88a:	ec53 2b18 	vmov	r2, r3, d8
 800c88e:	f7ff bbe0 	b.w	800c052 <__ieee754_pow+0x132>
 800c892:	4b30      	ldr	r3, [pc, #192]	; (800c954 <__ieee754_pow+0xa34>)
 800c894:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c898:	429e      	cmp	r6, r3
 800c89a:	f77f af0b 	ble.w	800c6b4 <__ieee754_pow+0x794>
 800c89e:	4b2e      	ldr	r3, [pc, #184]	; (800c958 <__ieee754_pow+0xa38>)
 800c8a0:	440b      	add	r3, r1
 800c8a2:	4303      	orrs	r3, r0
 800c8a4:	d00b      	beq.n	800c8be <__ieee754_pow+0x99e>
 800c8a6:	a326      	add	r3, pc, #152	; (adr r3, 800c940 <__ieee754_pow+0xa20>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	ec51 0b18 	vmov	r0, r1, d8
 800c8b0:	f7f3 fe9a 	bl	80005e8 <__aeabi_dmul>
 800c8b4:	a322      	add	r3, pc, #136	; (adr r3, 800c940 <__ieee754_pow+0xa20>)
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	f7ff bbca 	b.w	800c052 <__ieee754_pow+0x132>
 800c8be:	4622      	mov	r2, r4
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	f7f3 fcd9 	bl	8000278 <__aeabi_dsub>
 800c8c6:	4642      	mov	r2, r8
 800c8c8:	464b      	mov	r3, r9
 800c8ca:	f7f4 f913 	bl	8000af4 <__aeabi_dcmpge>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f43f aef0 	beq.w	800c6b4 <__ieee754_pow+0x794>
 800c8d4:	e7e7      	b.n	800c8a6 <__ieee754_pow+0x986>
 800c8d6:	f04f 0a00 	mov.w	sl, #0
 800c8da:	e717      	b.n	800c70c <__ieee754_pow+0x7ec>
 800c8dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	e7d2      	b.n	800c88a <__ieee754_pow+0x96a>
 800c8e4:	491a      	ldr	r1, [pc, #104]	; (800c950 <__ieee754_pow+0xa30>)
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	f7ff bb9e 	b.w	800c028 <__ieee754_pow+0x108>
 800c8ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8f0:	f7ff bb9a 	b.w	800c028 <__ieee754_pow+0x108>
 800c8f4:	9000      	str	r0, [sp, #0]
 800c8f6:	f7ff bb76 	b.w	800bfe6 <__ieee754_pow+0xc6>
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	f7ff bb60 	b.w	800bfc0 <__ieee754_pow+0xa0>
 800c900:	00000000 	.word	0x00000000
 800c904:	3fe62e43 	.word	0x3fe62e43
 800c908:	fefa39ef 	.word	0xfefa39ef
 800c90c:	3fe62e42 	.word	0x3fe62e42
 800c910:	0ca86c39 	.word	0x0ca86c39
 800c914:	be205c61 	.word	0xbe205c61
 800c918:	72bea4d0 	.word	0x72bea4d0
 800c91c:	3e663769 	.word	0x3e663769
 800c920:	c5d26bf1 	.word	0xc5d26bf1
 800c924:	3ebbbd41 	.word	0x3ebbbd41
 800c928:	af25de2c 	.word	0xaf25de2c
 800c92c:	3f11566a 	.word	0x3f11566a
 800c930:	16bebd93 	.word	0x16bebd93
 800c934:	3f66c16c 	.word	0x3f66c16c
 800c938:	5555553e 	.word	0x5555553e
 800c93c:	3fc55555 	.word	0x3fc55555
 800c940:	c2f8f359 	.word	0xc2f8f359
 800c944:	01a56e1f 	.word	0x01a56e1f
 800c948:	3fe00000 	.word	0x3fe00000
 800c94c:	000fffff 	.word	0x000fffff
 800c950:	3ff00000 	.word	0x3ff00000
 800c954:	4090cbff 	.word	0x4090cbff
 800c958:	3f6f3400 	.word	0x3f6f3400
 800c95c:	652b82fe 	.word	0x652b82fe
 800c960:	3c971547 	.word	0x3c971547

0800c964 <__ieee754_sqrt>:
 800c964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c968:	ec55 4b10 	vmov	r4, r5, d0
 800c96c:	4e56      	ldr	r6, [pc, #344]	; (800cac8 <__ieee754_sqrt+0x164>)
 800c96e:	43ae      	bics	r6, r5
 800c970:	ee10 0a10 	vmov	r0, s0
 800c974:	ee10 3a10 	vmov	r3, s0
 800c978:	4629      	mov	r1, r5
 800c97a:	462a      	mov	r2, r5
 800c97c:	d110      	bne.n	800c9a0 <__ieee754_sqrt+0x3c>
 800c97e:	ee10 2a10 	vmov	r2, s0
 800c982:	462b      	mov	r3, r5
 800c984:	f7f3 fe30 	bl	80005e8 <__aeabi_dmul>
 800c988:	4602      	mov	r2, r0
 800c98a:	460b      	mov	r3, r1
 800c98c:	4620      	mov	r0, r4
 800c98e:	4629      	mov	r1, r5
 800c990:	f7f3 fc74 	bl	800027c <__adddf3>
 800c994:	4604      	mov	r4, r0
 800c996:	460d      	mov	r5, r1
 800c998:	ec45 4b10 	vmov	d0, r4, r5
 800c99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a0:	2d00      	cmp	r5, #0
 800c9a2:	dc10      	bgt.n	800c9c6 <__ieee754_sqrt+0x62>
 800c9a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c9a8:	4330      	orrs	r0, r6
 800c9aa:	d0f5      	beq.n	800c998 <__ieee754_sqrt+0x34>
 800c9ac:	b15d      	cbz	r5, 800c9c6 <__ieee754_sqrt+0x62>
 800c9ae:	ee10 2a10 	vmov	r2, s0
 800c9b2:	462b      	mov	r3, r5
 800c9b4:	ee10 0a10 	vmov	r0, s0
 800c9b8:	f7f3 fc5e 	bl	8000278 <__aeabi_dsub>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	460b      	mov	r3, r1
 800c9c0:	f7f3 ff3c 	bl	800083c <__aeabi_ddiv>
 800c9c4:	e7e6      	b.n	800c994 <__ieee754_sqrt+0x30>
 800c9c6:	1509      	asrs	r1, r1, #20
 800c9c8:	d076      	beq.n	800cab8 <__ieee754_sqrt+0x154>
 800c9ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c9ce:	07ce      	lsls	r6, r1, #31
 800c9d0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c9d4:	bf5e      	ittt	pl
 800c9d6:	0fda      	lsrpl	r2, r3, #31
 800c9d8:	005b      	lslpl	r3, r3, #1
 800c9da:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c9de:	0fda      	lsrs	r2, r3, #31
 800c9e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c9e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	106d      	asrs	r5, r5, #1
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	f04f 0e16 	mov.w	lr, #22
 800c9f2:	4684      	mov	ip, r0
 800c9f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9f8:	eb0c 0401 	add.w	r4, ip, r1
 800c9fc:	4294      	cmp	r4, r2
 800c9fe:	bfde      	ittt	le
 800ca00:	1b12      	suble	r2, r2, r4
 800ca02:	eb04 0c01 	addle.w	ip, r4, r1
 800ca06:	1840      	addle	r0, r0, r1
 800ca08:	0052      	lsls	r2, r2, #1
 800ca0a:	f1be 0e01 	subs.w	lr, lr, #1
 800ca0e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ca12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ca16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca1a:	d1ed      	bne.n	800c9f8 <__ieee754_sqrt+0x94>
 800ca1c:	4671      	mov	r1, lr
 800ca1e:	2720      	movs	r7, #32
 800ca20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ca24:	4562      	cmp	r2, ip
 800ca26:	eb04 060e 	add.w	r6, r4, lr
 800ca2a:	dc02      	bgt.n	800ca32 <__ieee754_sqrt+0xce>
 800ca2c:	d113      	bne.n	800ca56 <__ieee754_sqrt+0xf2>
 800ca2e:	429e      	cmp	r6, r3
 800ca30:	d811      	bhi.n	800ca56 <__ieee754_sqrt+0xf2>
 800ca32:	2e00      	cmp	r6, #0
 800ca34:	eb06 0e04 	add.w	lr, r6, r4
 800ca38:	da43      	bge.n	800cac2 <__ieee754_sqrt+0x15e>
 800ca3a:	f1be 0f00 	cmp.w	lr, #0
 800ca3e:	db40      	blt.n	800cac2 <__ieee754_sqrt+0x15e>
 800ca40:	f10c 0801 	add.w	r8, ip, #1
 800ca44:	eba2 020c 	sub.w	r2, r2, ip
 800ca48:	429e      	cmp	r6, r3
 800ca4a:	bf88      	it	hi
 800ca4c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ca50:	1b9b      	subs	r3, r3, r6
 800ca52:	4421      	add	r1, r4
 800ca54:	46c4      	mov	ip, r8
 800ca56:	0052      	lsls	r2, r2, #1
 800ca58:	3f01      	subs	r7, #1
 800ca5a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ca5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ca62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca66:	d1dd      	bne.n	800ca24 <__ieee754_sqrt+0xc0>
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	d006      	beq.n	800ca7a <__ieee754_sqrt+0x116>
 800ca6c:	1c4c      	adds	r4, r1, #1
 800ca6e:	bf13      	iteet	ne
 800ca70:	3101      	addne	r1, #1
 800ca72:	3001      	addeq	r0, #1
 800ca74:	4639      	moveq	r1, r7
 800ca76:	f021 0101 	bicne.w	r1, r1, #1
 800ca7a:	1043      	asrs	r3, r0, #1
 800ca7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ca80:	0849      	lsrs	r1, r1, #1
 800ca82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ca86:	07c2      	lsls	r2, r0, #31
 800ca88:	bf48      	it	mi
 800ca8a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ca8e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ca92:	460c      	mov	r4, r1
 800ca94:	463d      	mov	r5, r7
 800ca96:	e77f      	b.n	800c998 <__ieee754_sqrt+0x34>
 800ca98:	0ada      	lsrs	r2, r3, #11
 800ca9a:	3815      	subs	r0, #21
 800ca9c:	055b      	lsls	r3, r3, #21
 800ca9e:	2a00      	cmp	r2, #0
 800caa0:	d0fa      	beq.n	800ca98 <__ieee754_sqrt+0x134>
 800caa2:	02d7      	lsls	r7, r2, #11
 800caa4:	d50a      	bpl.n	800cabc <__ieee754_sqrt+0x158>
 800caa6:	f1c1 0420 	rsb	r4, r1, #32
 800caaa:	fa23 f404 	lsr.w	r4, r3, r4
 800caae:	1e4d      	subs	r5, r1, #1
 800cab0:	408b      	lsls	r3, r1
 800cab2:	4322      	orrs	r2, r4
 800cab4:	1b41      	subs	r1, r0, r5
 800cab6:	e788      	b.n	800c9ca <__ieee754_sqrt+0x66>
 800cab8:	4608      	mov	r0, r1
 800caba:	e7f0      	b.n	800ca9e <__ieee754_sqrt+0x13a>
 800cabc:	0052      	lsls	r2, r2, #1
 800cabe:	3101      	adds	r1, #1
 800cac0:	e7ef      	b.n	800caa2 <__ieee754_sqrt+0x13e>
 800cac2:	46e0      	mov	r8, ip
 800cac4:	e7be      	b.n	800ca44 <__ieee754_sqrt+0xe0>
 800cac6:	bf00      	nop
 800cac8:	7ff00000 	.word	0x7ff00000

0800cacc <fabs>:
 800cacc:	ec51 0b10 	vmov	r0, r1, d0
 800cad0:	ee10 2a10 	vmov	r2, s0
 800cad4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cad8:	ec43 2b10 	vmov	d0, r2, r3
 800cadc:	4770      	bx	lr

0800cade <finite>:
 800cade:	b082      	sub	sp, #8
 800cae0:	ed8d 0b00 	vstr	d0, [sp]
 800cae4:	9801      	ldr	r0, [sp, #4]
 800cae6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800caea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800caee:	0fc0      	lsrs	r0, r0, #31
 800caf0:	b002      	add	sp, #8
 800caf2:	4770      	bx	lr
 800caf4:	0000      	movs	r0, r0
	...

0800caf8 <nan>:
 800caf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb00 <nan+0x8>
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	00000000 	.word	0x00000000
 800cb04:	7ff80000 	.word	0x7ff80000

0800cb08 <rint>:
 800cb08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb0a:	ec51 0b10 	vmov	r0, r1, d0
 800cb0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cb12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cb16:	2e13      	cmp	r6, #19
 800cb18:	ee10 4a10 	vmov	r4, s0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800cb22:	dc58      	bgt.n	800cbd6 <rint+0xce>
 800cb24:	2e00      	cmp	r6, #0
 800cb26:	da2b      	bge.n	800cb80 <rint+0x78>
 800cb28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cb2c:	4302      	orrs	r2, r0
 800cb2e:	d023      	beq.n	800cb78 <rint+0x70>
 800cb30:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cb34:	4302      	orrs	r2, r0
 800cb36:	4254      	negs	r4, r2
 800cb38:	4314      	orrs	r4, r2
 800cb3a:	0c4b      	lsrs	r3, r1, #17
 800cb3c:	0b24      	lsrs	r4, r4, #12
 800cb3e:	045b      	lsls	r3, r3, #17
 800cb40:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cb44:	ea44 0103 	orr.w	r1, r4, r3
 800cb48:	4b32      	ldr	r3, [pc, #200]	; (800cc14 <rint+0x10c>)
 800cb4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cb4e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cb52:	4602      	mov	r2, r0
 800cb54:	460b      	mov	r3, r1
 800cb56:	4630      	mov	r0, r6
 800cb58:	4639      	mov	r1, r7
 800cb5a:	f7f3 fb8f 	bl	800027c <__adddf3>
 800cb5e:	e9cd 0100 	strd	r0, r1, [sp]
 800cb62:	463b      	mov	r3, r7
 800cb64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb68:	4632      	mov	r2, r6
 800cb6a:	f7f3 fb85 	bl	8000278 <__aeabi_dsub>
 800cb6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb72:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cb76:	4639      	mov	r1, r7
 800cb78:	ec41 0b10 	vmov	d0, r0, r1
 800cb7c:	b003      	add	sp, #12
 800cb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb80:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <rint+0x110>)
 800cb82:	4132      	asrs	r2, r6
 800cb84:	ea01 0702 	and.w	r7, r1, r2
 800cb88:	4307      	orrs	r7, r0
 800cb8a:	d0f5      	beq.n	800cb78 <rint+0x70>
 800cb8c:	0851      	lsrs	r1, r2, #1
 800cb8e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cb92:	4314      	orrs	r4, r2
 800cb94:	d00c      	beq.n	800cbb0 <rint+0xa8>
 800cb96:	ea23 0201 	bic.w	r2, r3, r1
 800cb9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cb9e:	2e13      	cmp	r6, #19
 800cba0:	fa43 f606 	asr.w	r6, r3, r6
 800cba4:	bf0c      	ite	eq
 800cba6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cbaa:	2400      	movne	r4, #0
 800cbac:	ea42 0306 	orr.w	r3, r2, r6
 800cbb0:	4918      	ldr	r1, [pc, #96]	; (800cc14 <rint+0x10c>)
 800cbb2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	f7f3 fb5c 	bl	800027c <__adddf3>
 800cbc4:	e9cd 0100 	strd	r0, r1, [sp]
 800cbc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbcc:	4622      	mov	r2, r4
 800cbce:	462b      	mov	r3, r5
 800cbd0:	f7f3 fb52 	bl	8000278 <__aeabi_dsub>
 800cbd4:	e7d0      	b.n	800cb78 <rint+0x70>
 800cbd6:	2e33      	cmp	r6, #51	; 0x33
 800cbd8:	dd07      	ble.n	800cbea <rint+0xe2>
 800cbda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cbde:	d1cb      	bne.n	800cb78 <rint+0x70>
 800cbe0:	ee10 2a10 	vmov	r2, s0
 800cbe4:	f7f3 fb4a 	bl	800027c <__adddf3>
 800cbe8:	e7c6      	b.n	800cb78 <rint+0x70>
 800cbea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cbee:	f04f 36ff 	mov.w	r6, #4294967295
 800cbf2:	40d6      	lsrs	r6, r2
 800cbf4:	4230      	tst	r0, r6
 800cbf6:	d0bf      	beq.n	800cb78 <rint+0x70>
 800cbf8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cbfc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cc00:	bf1f      	itttt	ne
 800cc02:	ea24 0101 	bicne.w	r1, r4, r1
 800cc06:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cc0a:	fa44 f202 	asrne.w	r2, r4, r2
 800cc0e:	ea41 0402 	orrne.w	r4, r1, r2
 800cc12:	e7cd      	b.n	800cbb0 <rint+0xa8>
 800cc14:	080f0fe0 	.word	0x080f0fe0
 800cc18:	000fffff 	.word	0x000fffff
 800cc1c:	00000000 	.word	0x00000000

0800cc20 <scalbn>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	ec55 4b10 	vmov	r4, r5, d0
 800cc26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	462b      	mov	r3, r5
 800cc2e:	b99a      	cbnz	r2, 800cc58 <scalbn+0x38>
 800cc30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cc34:	4323      	orrs	r3, r4
 800cc36:	d036      	beq.n	800cca6 <scalbn+0x86>
 800cc38:	4b39      	ldr	r3, [pc, #228]	; (800cd20 <scalbn+0x100>)
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	ee10 0a10 	vmov	r0, s0
 800cc40:	2200      	movs	r2, #0
 800cc42:	f7f3 fcd1 	bl	80005e8 <__aeabi_dmul>
 800cc46:	4b37      	ldr	r3, [pc, #220]	; (800cd24 <scalbn+0x104>)
 800cc48:	429e      	cmp	r6, r3
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	460d      	mov	r5, r1
 800cc4e:	da10      	bge.n	800cc72 <scalbn+0x52>
 800cc50:	a32b      	add	r3, pc, #172	; (adr r3, 800cd00 <scalbn+0xe0>)
 800cc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc56:	e03a      	b.n	800ccce <scalbn+0xae>
 800cc58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cc5c:	428a      	cmp	r2, r1
 800cc5e:	d10c      	bne.n	800cc7a <scalbn+0x5a>
 800cc60:	ee10 2a10 	vmov	r2, s0
 800cc64:	4620      	mov	r0, r4
 800cc66:	4629      	mov	r1, r5
 800cc68:	f7f3 fb08 	bl	800027c <__adddf3>
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	460d      	mov	r5, r1
 800cc70:	e019      	b.n	800cca6 <scalbn+0x86>
 800cc72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cc76:	460b      	mov	r3, r1
 800cc78:	3a36      	subs	r2, #54	; 0x36
 800cc7a:	4432      	add	r2, r6
 800cc7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cc80:	428a      	cmp	r2, r1
 800cc82:	dd08      	ble.n	800cc96 <scalbn+0x76>
 800cc84:	2d00      	cmp	r5, #0
 800cc86:	a120      	add	r1, pc, #128	; (adr r1, 800cd08 <scalbn+0xe8>)
 800cc88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc8c:	da1c      	bge.n	800ccc8 <scalbn+0xa8>
 800cc8e:	a120      	add	r1, pc, #128	; (adr r1, 800cd10 <scalbn+0xf0>)
 800cc90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc94:	e018      	b.n	800ccc8 <scalbn+0xa8>
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	dd08      	ble.n	800ccac <scalbn+0x8c>
 800cc9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cca2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cca6:	ec45 4b10 	vmov	d0, r4, r5
 800ccaa:	bd70      	pop	{r4, r5, r6, pc}
 800ccac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ccb0:	da19      	bge.n	800cce6 <scalbn+0xc6>
 800ccb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ccb6:	429e      	cmp	r6, r3
 800ccb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ccbc:	dd0a      	ble.n	800ccd4 <scalbn+0xb4>
 800ccbe:	a112      	add	r1, pc, #72	; (adr r1, 800cd08 <scalbn+0xe8>)
 800ccc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e2      	bne.n	800cc8e <scalbn+0x6e>
 800ccc8:	a30f      	add	r3, pc, #60	; (adr r3, 800cd08 <scalbn+0xe8>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	f7f3 fc8b 	bl	80005e8 <__aeabi_dmul>
 800ccd2:	e7cb      	b.n	800cc6c <scalbn+0x4c>
 800ccd4:	a10a      	add	r1, pc, #40	; (adr r1, 800cd00 <scalbn+0xe0>)
 800ccd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d0b8      	beq.n	800cc50 <scalbn+0x30>
 800ccde:	a10e      	add	r1, pc, #56	; (adr r1, 800cd18 <scalbn+0xf8>)
 800cce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce4:	e7b4      	b.n	800cc50 <scalbn+0x30>
 800cce6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccea:	3236      	adds	r2, #54	; 0x36
 800ccec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ccf0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <scalbn+0x108>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	e7e8      	b.n	800ccce <scalbn+0xae>
 800ccfc:	f3af 8000 	nop.w
 800cd00:	c2f8f359 	.word	0xc2f8f359
 800cd04:	01a56e1f 	.word	0x01a56e1f
 800cd08:	8800759c 	.word	0x8800759c
 800cd0c:	7e37e43c 	.word	0x7e37e43c
 800cd10:	8800759c 	.word	0x8800759c
 800cd14:	fe37e43c 	.word	0xfe37e43c
 800cd18:	c2f8f359 	.word	0xc2f8f359
 800cd1c:	81a56e1f 	.word	0x81a56e1f
 800cd20:	43500000 	.word	0x43500000
 800cd24:	ffff3cb0 	.word	0xffff3cb0
 800cd28:	3c900000 	.word	0x3c900000

0800cd2c <_init>:
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	bf00      	nop
 800cd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd32:	bc08      	pop	{r3}
 800cd34:	469e      	mov	lr, r3
 800cd36:	4770      	bx	lr

0800cd38 <_fini>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	bf00      	nop
 800cd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd3e:	bc08      	pop	{r3}
 800cd40:	469e      	mov	lr, r3
 800cd42:	4770      	bx	lr
