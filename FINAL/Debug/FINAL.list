
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e684  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000db6f8  0800e818  0800e818  0001e818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e9f10  080e9f10  00100114  2**0
                  CONTENTS
  4 .ARM          00000008  080e9f10  080e9f10  000f9f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080e9f18  080e9f18  00100114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e9f18  080e9f18  000f9f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e9f1c  080e9f1c  000f9f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080e9f20  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00100114  2**0
                  CONTENTS
 10 .bss          000004d0  20000114  20000114  00100114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005e4  200005e4  00100114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00100114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bcca  00000000  00000000  00100144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005672  00000000  00000000  0012be0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  00131480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001890  00000000  00000000  00132f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029aa3  00000000  00000000  00134810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f6a  00000000  00000000  0015e2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e26c9  00000000  00000000  0018421d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002668e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a70  00000000  00000000  0026693c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e7fc 	.word	0x0800e7fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	0800e7fc 	.word	0x0800e7fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <MX_ADC1_Init+0x108>)
 8000f94:	4a3d      	ldr	r2, [pc, #244]	; (800108c <MX_ADC1_Init+0x10c>)
 8000f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_ADC1_Init+0x108>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fc0:	4a33      	ldr	r2, [pc, #204]	; (8001090 <MX_ADC1_Init+0x110>)
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fcc:	2205      	movs	r2, #5
 8000fce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fe0:	f005 fe28 	bl	8006c34 <HAL_ADC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f003 fcd7 	bl	800499c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4822      	ldr	r0, [pc, #136]	; (8001088 <MX_ADC1_Init+0x108>)
 8001000:	f005 ff8a 	bl	8006f18 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100a:	f003 fcc7 	bl	800499c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800100e:	2309      	movs	r3, #9
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	481b      	ldr	r0, [pc, #108]	; (8001088 <MX_ADC1_Init+0x108>)
 800101c:	f005 ff7c 	bl	8006f18 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001026:	f003 fcb9 	bl	800499c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800102a:	230a      	movs	r3, #10
 800102c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	; (8001088 <MX_ADC1_Init+0x108>)
 8001038:	f005 ff6e 	bl	8006f18 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001042:	f003 fcab 	bl	800499c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001046:	230b      	movs	r3, #11
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_ADC1_Init+0x108>)
 8001054:	f005 ff60 	bl	8006f18 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800105e:	f003 fc9d 	bl	800499c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001062:	230c      	movs	r3, #12
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001066:	2305      	movs	r3, #5
 8001068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_ADC1_Init+0x108>)
 8001070:	f005 ff52 	bl	8006f18 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800107a:	f003 fc8f 	bl	800499c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001ac 	.word	0x200001ac
 800108c:	40012000 	.word	0x40012000
 8001090:	0f000001 	.word	0x0f000001

08001094 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	at24c_Check();
 8001098:	f000 f83c 	bl	8001114 <at24c_Check>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	230a      	movs	r3, #10
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 030f 	add.w	r3, r7, #15
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2310      	movs	r3, #16
 80010c0:	21a0      	movs	r1, #160	; 0xa0
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <at24c_ReadOneByte+0x34>)
 80010c4:	f007 fae8 	bl	8008698 <HAL_I2C_Mem_Read>
	return temp;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000031c 	.word	0x2000031c

080010d8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af04      	add	r7, sp, #16
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	80fb      	strh	r3, [r7, #6]
 80010e4:	4613      	mov	r3, r2
 80010e6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80010e8:	88fa      	ldrh	r2, [r7, #6]
 80010ea:	230a      	movs	r3, #10
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	1d7b      	adds	r3, r7, #5
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2310      	movs	r3, #16
 80010f8:	21a0      	movs	r1, #160	; 0xa0
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <at24c_WriteOneByte+0x38>)
 80010fc:	f007 f9d2 	bl	80084a4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001100:	2005      	movs	r0, #5
 8001102:	f005 fd73 	bl	8006bec <HAL_Delay>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000031c 	.word	0x2000031c

08001114 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800111a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800111e:	f7ff ffbf 	bl	80010a0 <at24c_ReadOneByte>
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b55      	cmp	r3, #85	; 0x55
 800112a:	d101      	bne.n	8001130 <at24c_Check+0x1c>
 800112c:	2300      	movs	r3, #0
 800112e:	e010      	b.n	8001152 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001130:	2155      	movs	r1, #85	; 0x55
 8001132:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001136:	f7ff ffcf 	bl	80010d8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800113a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800113e:	f7ff ffaf 	bl	80010a0 <at24c_ReadOneByte>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b55      	cmp	r3, #85	; 0x55
 800114a:	d101      	bne.n	8001150 <at24c_Check+0x3c>
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <at24c_Check+0x3e>
	}
	return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800115a:	b590      	push	{r4, r7, lr}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	6039      	str	r1, [r7, #0]
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4613      	mov	r3, r2
 8001168:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800116a:	e00d      	b.n	8001188 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	80fa      	strh	r2, [r7, #6]
 8001172:	683c      	ldr	r4, [r7, #0]
 8001174:	1c62      	adds	r2, r4, #1
 8001176:	603a      	str	r2, [r7, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff91 	bl	80010a0 <at24c_ReadOneByte>
 800117e:	4603      	mov	r3, r0
 8001180:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001182:	88bb      	ldrh	r3, [r7, #4]
 8001184:	3b01      	subs	r3, #1
 8001186:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ee      	bne.n	800116c <at24c_Read+0x12>
	}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}

08001198 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011a8:	e00c      	b.n	80011c4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff90 	bl	80010d8 <at24c_WriteOneByte>
		WriteAddr++;
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	3301      	adds	r3, #1
 80011bc:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	80ba      	strh	r2, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ed      	bne.n	80011aa <at24c_Write+0x12>
	}
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	2108      	movs	r1, #8
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <button_init+0x14>)
 80011e2:	f007 f801 	bl	80081e8 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020c00 	.word	0x40020c00

080011f0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2108      	movs	r1, #8
 80011fa:	482f      	ldr	r0, [pc, #188]	; (80012b8 <button_Scan+0xc8>)
 80011fc:	f006 fff4 	bl	80081e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	2108      	movs	r1, #8
 8001204:	482c      	ldr	r0, [pc, #176]	; (80012b8 <button_Scan+0xc8>)
 8001206:	f006 ffef 	bl	80081e8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800120a:	230a      	movs	r3, #10
 800120c:	2202      	movs	r2, #2
 800120e:	492b      	ldr	r1, [pc, #172]	; (80012bc <button_Scan+0xcc>)
 8001210:	482b      	ldr	r0, [pc, #172]	; (80012c0 <button_Scan+0xd0>)
 8001212:	f008 fdfc 	bl	8009e0e <HAL_SPI_Receive>
	  int button_index = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800121a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	e03f      	b.n	80012a6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db06      	blt.n	800123a <button_Scan+0x4a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b03      	cmp	r3, #3
 8001230:	dc03      	bgt.n	800123a <button_Scan+0x4a>
			  button_index = i + 4;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e018      	b.n	800126c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b03      	cmp	r3, #3
 800123e:	dd07      	ble.n	8001250 <button_Scan+0x60>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b07      	cmp	r3, #7
 8001244:	dc04      	bgt.n	8001250 <button_Scan+0x60>
			  button_index = 7 - i;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f1c3 0307 	rsb	r3, r3, #7
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e00d      	b.n	800126c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b07      	cmp	r3, #7
 8001254:	dd06      	ble.n	8001264 <button_Scan+0x74>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0b      	cmp	r3, #11
 800125a:	dc03      	bgt.n	8001264 <button_Scan+0x74>
			  button_index = i + 4;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3304      	adds	r3, #4
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e003      	b.n	800126c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1c3 0317 	rsb	r3, r3, #23
 800126a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <button_Scan+0xcc>)
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	897b      	ldrh	r3, [r7, #10]
 8001272:	4013      	ands	r3, r2
 8001274:	b29b      	uxth	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <button_Scan+0x96>
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <button_Scan+0xd4>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2100      	movs	r1, #0
 8001280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001284:	e009      	b.n	800129a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <button_Scan+0xd4>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128e:	3301      	adds	r3, #1
 8001290:	b299      	uxth	r1, r3
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <button_Scan+0xd4>)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800129a:	897b      	ldrh	r3, [r7, #10]
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	ddbc      	ble.n	8001226 <button_Scan+0x36>
	  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	20000130 	.word	0x20000130
 80012c0:	20000418 	.word	0x20000418
 80012c4:	200001f4 	.word	0x200001f4

080012c8 <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_DMA_Init+0x3c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <MX_DMA_Init+0x3c>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_DMA_Init+0x3c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2038      	movs	r0, #56	; 0x38
 80012f0:	f006 f98d 	bl	800760e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f4:	2038      	movs	r0, #56	; 0x38
 80012f6:	f006 f9a6 	bl	8007646 <HAL_NVIC_EnableIRQ>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <user_esp>:

uint32_t counter_sensor = 0;
uint8_t temp_user = 0;
uint8_t light = 0;

void user_esp(){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if (flag_user == FLAG_PLAYING){
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <user_esp+0x40>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10b      	bne.n	800132c <user_esp+0x24>
		if (temp_user == 0) {
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <user_esp+0x44>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d112      	bne.n	8001342 <user_esp+0x3a>
			uart_EspSendBytes("A", 1);
 800131c:	2101      	movs	r1, #1
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <user_esp+0x48>)
 8001320:	f005 fa7e 	bl	8006820 <uart_EspSendBytes>
			temp_user = 1;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <user_esp+0x44>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
		if (temp_user == 1){
			uart_EspSendBytes("a", 1);
			temp_user = 0;
		}
	}
}
 800132a:	e00a      	b.n	8001342 <user_esp+0x3a>
		if (temp_user == 1){
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <user_esp+0x44>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <user_esp+0x3a>
			uart_EspSendBytes("a", 1);
 8001334:	2101      	movs	r1, #1
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <user_esp+0x4c>)
 8001338:	f005 fa72 	bl	8006820 <uart_EspSendBytes>
			temp_user = 0;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <user_esp+0x44>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000158 	.word	0x20000158
 800134c:	20000138 	.word	0x20000138
 8001350:	0800e818 	.word	0x0800e818
 8001354:	0800e81c 	.word	0x0800e81c

08001358 <sensor_esp>:

float tp;
uint8_t tp1 = 0;
uint8_t tp2 = 0;

void sensor_esp(){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

		uart_EspSendBytes("L", 1);
 800135e:	2101      	movs	r1, #1
 8001360:	4831      	ldr	r0, [pc, #196]	; (8001428 <sensor_esp+0xd0>)
 8001362:	f005 fa5d 	bl	8006820 <uart_EspSendBytes>
		li1 = current_light / 100;
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <sensor_esp+0xd4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	4a31      	ldr	r2, [pc, #196]	; (8001430 <sensor_esp+0xd8>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	b29b      	uxth	r3, r3
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <sensor_esp+0xdc>)
 8001378:	701a      	strb	r2, [r3, #0]
		li2 = current_light % 100;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <sensor_esp+0xd4>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <sensor_esp+0xd8>)
 8001380:	fba2 1203 	umull	r1, r2, r2, r3
 8001384:	0952      	lsrs	r2, r2, #5
 8001386:	2164      	movs	r1, #100	; 0x64
 8001388:	fb01 f202 	mul.w	r2, r1, r2
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	b29b      	uxth	r3, r3
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <sensor_esp+0xe0>)
 8001394:	701a      	strb	r2, [r3, #0]
		uart_EspSendBytes(&li1, 1);
 8001396:	2101      	movs	r1, #1
 8001398:	4826      	ldr	r0, [pc, #152]	; (8001434 <sensor_esp+0xdc>)
 800139a:	f005 fa41 	bl	8006820 <uart_EspSendBytes>
		uart_EspSendBytes(&li2, 1);
 800139e:	2101      	movs	r1, #1
 80013a0:	4825      	ldr	r0, [pc, #148]	; (8001438 <sensor_esp+0xe0>)
 80013a2:	f005 fa3d 	bl	8006820 <uart_EspSendBytes>
		uart_EspSendBytes(&current_hum, 1);
 80013a6:	2101      	movs	r1, #1
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <sensor_esp+0xe4>)
 80013aa:	f005 fa39 	bl	8006820 <uart_EspSendBytes>
		tp = current_temp;
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <sensor_esp+0xe8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <sensor_esp+0xec>)
 80013b4:	6013      	str	r3, [r2, #0]
		tp = tp * 100;
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <sensor_esp+0xec>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001448 <sensor_esp+0xf0>
 80013c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <sensor_esp+0xec>)
 80013c6:	edc3 7a00 	vstr	s15, [r3]
		tp1 = tp / 100;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <sensor_esp+0xec>)
 80013cc:	ed93 7a00 	vldr	s14, [r3]
 80013d0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001448 <sensor_esp+0xf0>
 80013d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80013e0:	793b      	ldrb	r3, [r7, #4]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <sensor_esp+0xf4>)
 80013e6:	701a      	strb	r2, [r3, #0]
		tp2 = (int)tp % 100;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <sensor_esp+0xec>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f2:	ee17 2a90 	vmov	r2, s15
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <sensor_esp+0xd8>)
 80013f8:	fb83 1302 	smull	r1, r3, r3, r2
 80013fc:	1159      	asrs	r1, r3, #5
 80013fe:	17d3      	asrs	r3, r2, #31
 8001400:	1acb      	subs	r3, r1, r3
 8001402:	2164      	movs	r1, #100	; 0x64
 8001404:	fb01 f303 	mul.w	r3, r1, r3
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <sensor_esp+0xf8>)
 800140e:	701a      	strb	r2, [r3, #0]
		uart_EspSendBytes(&tp1, 1);
 8001410:	2101      	movs	r1, #1
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <sensor_esp+0xf4>)
 8001414:	f005 fa04 	bl	8006820 <uart_EspSendBytes>
		uart_EspSendBytes(&tp2, 1);
 8001418:	2101      	movs	r1, #1
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <sensor_esp+0xf8>)
 800141c:	f005 fa00 	bl	8006820 <uart_EspSendBytes>
//	}
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	0800e820 	.word	0x0800e820
 800142c:	2000000a 	.word	0x2000000a
 8001430:	51eb851f 	.word	0x51eb851f
 8001434:	20000139 	.word	0x20000139
 8001438:	2000013a 	.word	0x2000013a
 800143c:	20000008 	.word	0x20000008
 8001440:	20000004 	.word	0x20000004
 8001444:	20000214 	.word	0x20000214
 8001448:	42c80000 	.word	0x42c80000
 800144c:	2000013b 	.word	0x2000013b
 8001450:	2000013c 	.word	0x2000013c

08001454 <process_esp>:

void process_esp(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	if (++counter_sensor % 60 == 0 ){
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <process_esp+0x3c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <process_esp+0x3c>)
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <process_esp+0x3c>)
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <process_esp+0x40>)
 8001468:	fba3 2301 	umull	r2, r3, r3, r1
 800146c:	095a      	lsrs	r2, r3, #5
 800146e:	4613      	mov	r3, r2
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	1aca      	subs	r2, r1, r3
 8001478:	2a00      	cmp	r2, #0
 800147a:	d106      	bne.n	800148a <process_esp+0x36>
			counter_sensor = 0;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <process_esp+0x3c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
	user_esp();
 8001482:	f7ff ff41 	bl	8001308 <user_esp>
	sensor_esp();
 8001486:	f7ff ff67 	bl	8001358 <sensor_esp>
	}
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000134 	.word	0x20000134
 8001494:	88888889 	.word	0x88888889

08001498 <clr_confirm>:

#include "fsm.h"

uint8_t confirm[4] = {0, 0, 0, 0};

void clr_confirm(){
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	e007      	b.n	80014b4 <clr_confirm+0x1c>
		confirm[i] = 0;
 80014a4:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <clr_confirm+0x30>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3301      	adds	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	ddf4      	ble.n	80014a4 <clr_confirm+0xc>
	}
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000140 	.word	0x20000140

080014cc <temp_game>:

void temp_game(){
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	tempFlag = 1;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <temp_game+0x2c>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
	tempStatus = status;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <temp_game+0x30>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <temp_game+0x34>)
 80014dc:	6013      	str	r3, [r2, #0]
	tempMove = move;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <temp_game+0x38>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <temp_game+0x3c>)
 80014e4:	6013      	str	r3, [r2, #0]
	flag_user = FLAG_PAUSE;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <temp_game+0x40>)
 80014e8:	2203      	movs	r2, #3
 80014ea:	701a      	strb	r2, [r3, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000170 	.word	0x20000170
 80014fc:	20000160 	.word	0x20000160
 8001500:	20000174 	.word	0x20000174
 8001504:	20000164 	.word	0x20000164
 8001508:	20000178 	.word	0x20000178
 800150c:	20000158 	.word	0x20000158

08001510 <continue_game>:

void continue_game(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	if(tempFlag == 1){
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <continue_game+0x38>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d113      	bne.n	8001544 <continue_game+0x34>
		status = tempStatus;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <continue_game+0x3c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <continue_game+0x40>)
 8001522:	6013      	str	r3, [r2, #0]
		move = tempMove;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <continue_game+0x44>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <continue_game+0x48>)
 800152a:	6013      	str	r3, [r2, #0]
		reDraw_snake();
 800152c:	f003 fc40 	bl	8004db0 <reDraw_snake>
		point_food_lcd(food);
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <continue_game+0x4c>)
 8001532:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001536:	f002 f854 	bl	80035e2 <point_food_lcd>
		score_lcd();
 800153a:	f001 fb0f 	bl	8002b5c <score_lcd>
		flag_user = FLAG_PLAYING;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <continue_game+0x50>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
	}
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000170 	.word	0x20000170
 800154c:	20000174 	.word	0x20000174
 8001550:	20000160 	.word	0x20000160
 8001554:	20000178 	.word	0x20000178
 8001558:	20000164 	.word	0x20000164
 800155c:	20000050 	.word	0x20000050
 8001560:	20000158 	.word	0x20000158

08001564 <input_inGame>:

void input_inGame(){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	if((is_touch_right() == 1 || button_count[6] == 1) && move != LEFT){
 8001568:	f000 fd02 	bl	8001f70 <is_touch_right>
 800156c:	4603      	mov	r3, r0
 800156e:	2b01      	cmp	r3, #1
 8001570:	d003      	beq.n	800157a <input_inGame+0x16>
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <input_inGame+0xb8>)
 8001574:	899b      	ldrh	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <input_inGame+0x26>
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <input_inGame+0xbc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d003      	beq.n	800158a <input_inGame+0x26>
		move = RIGHT;
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <input_inGame+0xbc>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e046      	b.n	8001618 <input_inGame+0xb4>
	}else if((is_touch_left() == 1 || button_count[4] == 1) && move != RIGHT){
 800158a:	f000 fd15 	bl	8001fb8 <is_touch_left>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	d003      	beq.n	800159c <input_inGame+0x38>
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <input_inGame+0xb8>)
 8001596:	891b      	ldrh	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d107      	bne.n	80015ac <input_inGame+0x48>
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <input_inGame+0xbc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d003      	beq.n	80015ac <input_inGame+0x48>
		move = LEFT;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <input_inGame+0xbc>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e035      	b.n	8001618 <input_inGame+0xb4>
	}else if((is_touch_up() == 1 || button_count[1] == 1) && move != DOWN){
 80015ac:	f000 fd28 	bl	8002000 <is_touch_up>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d003      	beq.n	80015be <input_inGame+0x5a>
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <input_inGame+0xb8>)
 80015b8:	885b      	ldrh	r3, [r3, #2]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <input_inGame+0x6a>
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <input_inGame+0xbc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d003      	beq.n	80015ce <input_inGame+0x6a>
		move = UP;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <input_inGame+0xbc>)
 80015c8:	2203      	movs	r2, #3
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e024      	b.n	8001618 <input_inGame+0xb4>
	}else if((is_touch_down() == 1 || button_count[9] == 1) && move != UP){
 80015ce:	f000 fd39 	bl	8002044 <is_touch_down>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d003      	beq.n	80015e0 <input_inGame+0x7c>
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <input_inGame+0xb8>)
 80015da:	8a5b      	ldrh	r3, [r3, #18]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <input_inGame+0x8c>
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <input_inGame+0xbc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d003      	beq.n	80015f0 <input_inGame+0x8c>
		move = DOWN;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <input_inGame+0xbc>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e013      	b.n	8001618 <input_inGame+0xb4>
	}else if(is_touch_pause() == 1 || button_count[5] == 1){
 80015f0:	f000 fdb3 	bl	800215a <is_touch_pause>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d003      	beq.n	8001602 <input_inGame+0x9e>
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <input_inGame+0xb8>)
 80015fc:	895b      	ldrh	r3, [r3, #10]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10a      	bne.n	8001618 <input_inGame+0xb4>
		temp_game();
 8001602:	f7ff ff63 	bl	80014cc <temp_game>
		status = PAUSE;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <input_inGame+0xc0>)
 8001608:	220f      	movs	r2, #15
 800160a:	601a      	str	r2, [r3, #0]
		move = NOT;
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <input_inGame+0xbc>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
		pause_lcd();
 8001612:	f001 fabb 	bl	8002b8c <pause_lcd>
	}
}
 8001616:	e7ff      	b.n	8001618 <input_inGame+0xb4>
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200001f4 	.word	0x200001f4
 8001620:	20000164 	.word	0x20000164
 8001624:	20000160 	.word	0x20000160

08001628 <input_enterName>:

void input_enterName(){
 8001628:	b598      	push	{r3, r4, r7, lr}
 800162a:	af00      	add	r7, sp, #0
	flag_change = 1;
 800162c:	4b8a      	ldr	r3, [pc, #552]	; (8001858 <input_enterName+0x230>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
	if(is_touch_char() == 1){
 8001632:	f000 fe83 	bl	800233c <is_touch_char>
 8001636:	4603      	mov	r3, r0
 8001638:	2b01      	cmp	r3, #1
 800163a:	d11a      	bne.n	8001672 <input_enterName+0x4a>
		index_r = (touch_GetY() - POS_Y_CHAR)/CHAR_HEIGHT;
 800163c:	f005 f8ce 	bl	80067dc <touch_GetY>
 8001640:	4603      	mov	r3, r0
 8001642:	3b7c      	subs	r3, #124	; 0x7c
 8001644:	4a85      	ldr	r2, [pc, #532]	; (800185c <input_enterName+0x234>)
 8001646:	fb82 1203 	smull	r1, r2, r2, r3
 800164a:	1112      	asrs	r2, r2, #4
 800164c:	17db      	asrs	r3, r3, #31
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b83      	ldr	r3, [pc, #524]	; (8001860 <input_enterName+0x238>)
 8001654:	701a      	strb	r2, [r3, #0]
		index_c = (touch_GetX() - POS_X_CHAR)/CHAR_WIDTH;
 8001656:	f005 f8b5 	bl	80067c4 <touch_GetX>
 800165a:	4603      	mov	r3, r0
 800165c:	3b06      	subs	r3, #6
 800165e:	4a7f      	ldr	r2, [pc, #508]	; (800185c <input_enterName+0x234>)
 8001660:	fb82 1203 	smull	r1, r2, r2, r3
 8001664:	1112      	asrs	r2, r2, #4
 8001666:	17db      	asrs	r3, r3, #31
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b7d      	ldr	r3, [pc, #500]	; (8001864 <input_enterName+0x23c>)
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e04b      	b.n	800170a <input_enterName+0xe2>
	}else{
		if(button_count[1] == 1){
 8001672:	4b7d      	ldr	r3, [pc, #500]	; (8001868 <input_enterName+0x240>)
 8001674:	885b      	ldrh	r3, [r3, #2]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d10a      	bne.n	8001690 <input_enterName+0x68>
			if(index_r > 0) index_r--;
 800167a:	4b79      	ldr	r3, [pc, #484]	; (8001860 <input_enterName+0x238>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d043      	beq.n	800170a <input_enterName+0xe2>
 8001682:	4b77      	ldr	r3, [pc, #476]	; (8001860 <input_enterName+0x238>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3b01      	subs	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b75      	ldr	r3, [pc, #468]	; (8001860 <input_enterName+0x238>)
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e03c      	b.n	800170a <input_enterName+0xe2>
		}else if(button_count[9] == 1){
 8001690:	4b75      	ldr	r3, [pc, #468]	; (8001868 <input_enterName+0x240>)
 8001692:	8a5b      	ldrh	r3, [r3, #18]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10a      	bne.n	80016ae <input_enterName+0x86>
			if(index_r < CHAR_ROW - 1) index_r++;
 8001698:	4b71      	ldr	r3, [pc, #452]	; (8001860 <input_enterName+0x238>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d834      	bhi.n	800170a <input_enterName+0xe2>
 80016a0:	4b6f      	ldr	r3, [pc, #444]	; (8001860 <input_enterName+0x238>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <input_enterName+0x238>)
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e02d      	b.n	800170a <input_enterName+0xe2>
		}else if(button_count[4] == 1){
 80016ae:	4b6e      	ldr	r3, [pc, #440]	; (8001868 <input_enterName+0x240>)
 80016b0:	891b      	ldrh	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10a      	bne.n	80016cc <input_enterName+0xa4>
			if(index_c > 0) index_c--;
 80016b6:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <input_enterName+0x23c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d025      	beq.n	800170a <input_enterName+0xe2>
 80016be:	4b69      	ldr	r3, [pc, #420]	; (8001864 <input_enterName+0x23c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <input_enterName+0x23c>)
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e01e      	b.n	800170a <input_enterName+0xe2>
		}else if(button_count[6] == 1){
 80016cc:	4b66      	ldr	r3, [pc, #408]	; (8001868 <input_enterName+0x240>)
 80016ce:	899b      	ldrh	r3, [r3, #12]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d10a      	bne.n	80016ea <input_enterName+0xc2>
			if(index_c < CHAR_COL - 1) index_c++;
 80016d4:	4b63      	ldr	r3, [pc, #396]	; (8001864 <input_enterName+0x23c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d816      	bhi.n	800170a <input_enterName+0xe2>
 80016dc:	4b61      	ldr	r3, [pc, #388]	; (8001864 <input_enterName+0x23c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <input_enterName+0x23c>)
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e00f      	b.n	800170a <input_enterName+0xe2>
		}else if(button_count[5] == 1){
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <input_enterName+0x240>)
 80016ec:	895b      	ldrh	r3, [r3, #10]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <input_enterName+0xdc>
			index_r = index_r_old;
 80016f2:	4b5e      	ldr	r3, [pc, #376]	; (800186c <input_enterName+0x244>)
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <input_enterName+0x238>)
 80016f8:	701a      	strb	r2, [r3, #0]
			index_c = index_c_old;
 80016fa:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <input_enterName+0x248>)
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	4b59      	ldr	r3, [pc, #356]	; (8001864 <input_enterName+0x23c>)
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e002      	b.n	800170a <input_enterName+0xe2>
		}else{
			flag_change = 0;
 8001704:	4b54      	ldr	r3, [pc, #336]	; (8001858 <input_enterName+0x230>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		}
	}
	if(flag_change == 1){
 800170a:	4b53      	ldr	r3, [pc, #332]	; (8001858 <input_enterName+0x230>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	f040 80a1 	bne.w	8001856 <input_enterName+0x22e>
		if(index_r == index_r_old && index_c == index_c_old){
 8001714:	4b52      	ldr	r3, [pc, #328]	; (8001860 <input_enterName+0x238>)
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	4b54      	ldr	r3, [pc, #336]	; (800186c <input_enterName+0x244>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	f040 8098 	bne.w	8001852 <input_enterName+0x22a>
 8001722:	4b50      	ldr	r3, [pc, #320]	; (8001864 <input_enterName+0x23c>)
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	4b52      	ldr	r3, [pc, #328]	; (8001870 <input_enterName+0x248>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	f040 8091 	bne.w	8001852 <input_enterName+0x22a>
			if(index_r == IDX_R_UPPER && index_c == IDX_C_UPPER){
 8001730:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <input_enterName+0x238>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d113      	bne.n	8001760 <input_enterName+0x138>
 8001738:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <input_enterName+0x23c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10f      	bne.n	8001760 <input_enterName+0x138>
				if(flag_uppercase == 1){
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <input_enterName+0x24c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <input_enterName+0x12c>
					flag_uppercase = 0;
 8001748:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <input_enterName+0x24c>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
					lowercase_lcd();
 800174e:	f001 fc0f 	bl	8002f70 <lowercase_lcd>
				if(flag_uppercase == 1){
 8001752:	e07e      	b.n	8001852 <input_enterName+0x22a>
				}else{
					flag_uppercase = 1;
 8001754:	4b47      	ldr	r3, [pc, #284]	; (8001874 <input_enterName+0x24c>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
					uppercase_lcd();
 800175a:	f001 fbc1 	bl	8002ee0 <uppercase_lcd>
				if(flag_uppercase == 1){
 800175e:	e078      	b.n	8001852 <input_enterName+0x22a>
				}
			}else if(index_r == IDX_R_DEL && index_c == IDX_C_DEL){
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <input_enterName+0x238>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d116      	bne.n	8001796 <input_enterName+0x16e>
 8001768:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <input_enterName+0x23c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d112      	bne.n	8001796 <input_enterName+0x16e>
				if(name_length > 0){
 8001770:	4b41      	ldr	r3, [pc, #260]	; (8001878 <input_enterName+0x250>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d06c      	beq.n	8001852 <input_enterName+0x22a>
					name_length--;
 8001778:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <input_enterName+0x250>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <input_enterName+0x250>)
 8001782:	701a      	strb	r2, [r3, #0]
					name[name_length] = '\0';
 8001784:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <input_enterName+0x250>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b3c      	ldr	r3, [pc, #240]	; (800187c <input_enterName+0x254>)
 800178c:	2100      	movs	r1, #0
 800178e:	5499      	strb	r1, [r3, r2]
					displayName_lcd();
 8001790:	f001 fcba 	bl	8003108 <displayName_lcd>
				if(name_length > 0){
 8001794:	e05d      	b.n	8001852 <input_enterName+0x22a>
				}
			}else if(index_r == IDX_R_ENTR && index_c == IDX_C_ENTR){
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <input_enterName+0x238>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d122      	bne.n	80017e4 <input_enterName+0x1bc>
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <input_enterName+0x23c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d11e      	bne.n	80017e4 <input_enterName+0x1bc>
				if(name_length > 0){
 80017a6:	4b34      	ldr	r3, [pc, #208]	; (8001878 <input_enterName+0x250>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d051      	beq.n	8001852 <input_enterName+0x22a>
					status = tempStatus;
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <input_enterName+0x258>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a34      	ldr	r2, [pc, #208]	; (8001884 <input_enterName+0x25c>)
 80017b4:	6013      	str	r3, [r2, #0]
					setTimer3(500);
 80017b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ba:	f003 fb47 	bl	8004e4c <setTimer3>
					game_lcd();					// Hien thi man hinh choi game
 80017be:	f001 f8e3 	bl	8002988 <game_lcd>
					mode_7seg();				// Ham hien thi che do choi tren led 7seg
 80017c2:	f001 ff35 	bl	8003630 <mode_7seg>
					reDraw_snake();				// Ham goi ve con ran
 80017c6:	f003 faf3 	bl	8004db0 <reDraw_snake>
					point_food_lcd(food);
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <input_enterName+0x260>)
 80017cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d0:	f001 ff07 	bl	80035e2 <point_food_lcd>
					environment_lcd();			// Ham moi truong
 80017d4:	f001 f98a 	bl	8002aec <environment_lcd>
					score_lcd();				// Ham diem so
 80017d8:	f001 f9c0 	bl	8002b5c <score_lcd>
					flag_user = FLAG_PLAYING;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <input_enterName+0x264>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
					return;
 80017e2:	e038      	b.n	8001856 <input_enterName+0x22e>
				}
			}else if(name_length < 10){
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <input_enterName+0x250>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d832      	bhi.n	8001852 <input_enterName+0x22a>
				if(flag_uppercase == 1){
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <input_enterName+0x24c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d113      	bne.n	800181c <input_enterName+0x1f4>
					name[name_length] = char_upper[index_r][index_c];
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <input_enterName+0x238>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <input_enterName+0x23c>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461c      	mov	r4, r3
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <input_enterName+0x250>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	4a22      	ldr	r2, [pc, #136]	; (8001890 <input_enterName+0x268>)
 8001808:	460b      	mov	r3, r1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	440b      	add	r3, r1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	4423      	add	r3, r4
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <input_enterName+0x254>)
 8001818:	541a      	strb	r2, [r3, r0]
 800181a:	e012      	b.n	8001842 <input_enterName+0x21a>
				}else{
					name[name_length] = char_lower[index_r][index_c];
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <input_enterName+0x238>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <input_enterName+0x23c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461c      	mov	r4, r3
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <input_enterName+0x250>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	4a19      	ldr	r2, [pc, #100]	; (8001894 <input_enterName+0x26c>)
 8001830:	460b      	mov	r3, r1
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	440b      	add	r3, r1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	4423      	add	r3, r4
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <input_enterName+0x254>)
 8001840:	541a      	strb	r2, [r3, r0]
				}
				name_length++;
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <input_enterName+0x250>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <input_enterName+0x250>)
 800184c:	701a      	strb	r2, [r3, #0]
				displayName_lcd();
 800184e:	f001 fc5b 	bl	8003108 <displayName_lcd>
			}
		}
		selectbox_lcd();
 8001852:	f001 fbd5 	bl	8003000 <selectbox_lcd>
	}
}
 8001856:	bd98      	pop	{r3, r4, r7, pc}
 8001858:	20000159 	.word	0x20000159
 800185c:	6bca1af3 	.word	0x6bca1af3
 8001860:	2000015b 	.word	0x2000015b
 8001864:	2000015c 	.word	0x2000015c
 8001868:	200001f4 	.word	0x200001f4
 800186c:	2000015d 	.word	0x2000015d
 8001870:	2000015e 	.word	0x2000015e
 8001874:	2000015a 	.word	0x2000015a
 8001878:	20000153 	.word	0x20000153
 800187c:	20000148 	.word	0x20000148
 8001880:	20000174 	.word	0x20000174
 8001884:	20000160 	.word	0x20000160
 8001888:	20000050 	.word	0x20000050
 800188c:	20000158 	.word	0x20000158
 8001890:	2000000c 	.word	0x2000000c
 8001894:	2000002c 	.word	0x2000002c

08001898 <input_process>:

void input_process(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	switch(status){
 800189c:	4bb2      	ldr	r3, [pc, #712]	; (8001b68 <input_process+0x2d0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	f200 8188 	bhi.w	8001bb6 <input_process+0x31e>
 80018a6:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <input_process+0x14>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018f9 	.word	0x080018f9
 80018b0:	080019b9 	.word	0x080019b9
 80018b4:	08001bb7 	.word	0x08001bb7
 80018b8:	08001ab3 	.word	0x08001ab3
 80018bc:	08001bb7 	.word	0x08001bb7
 80018c0:	08001bb7 	.word	0x08001bb7
 80018c4:	08001bb7 	.word	0x08001bb7
 80018c8:	08001bb7 	.word	0x08001bb7
 80018cc:	08001bb7 	.word	0x08001bb7
 80018d0:	08001bb7 	.word	0x08001bb7
 80018d4:	08001bb7 	.word	0x08001bb7
 80018d8:	08001ad1 	.word	0x08001ad1
 80018dc:	08001ad7 	.word	0x08001ad7
 80018e0:	08001add 	.word	0x08001add
 80018e4:	08001bb7 	.word	0x08001bb7
 80018e8:	08001b2d 	.word	0x08001b2d
 80018ec:	08001ae3 	.word	0x08001ae3
 80018f0:	08001b05 	.word	0x08001b05
 80018f4:	08001b27 	.word	0x08001b27
		case HOME:
			if(is_touch_newGame() == 1 || button_count[3] == 1){
 80018f8:	f000 fc53 	bl	80021a2 <is_touch_newGame>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d003      	beq.n	800190a <input_process+0x72>
 8001902:	4b9a      	ldr	r3, [pc, #616]	; (8001b6c <input_process+0x2d4>)
 8001904:	88db      	ldrh	r3, [r3, #6]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d117      	bne.n	800193a <input_process+0xa2>
				if(confirm[1] == 1){
 800190a:	4b99      	ldr	r3, [pc, #612]	; (8001b70 <input_process+0x2d8>)
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d10b      	bne.n	800192a <input_process+0x92>
					clr_confirm();
 8001912:	f7ff fdc1 	bl	8001498 <clr_confirm>
					status = MODE;
 8001916:	4b94      	ldr	r3, [pc, #592]	; (8001b68 <input_process+0x2d0>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
					user_init();
 800191c:	f005 f81e 	bl	800695c <user_init>
					snake_init();
 8001920:	f003 f894 	bl	8004a4c <snake_init>
					mode_game_lcd();
 8001924:	f000 fee2 	bl	80026ec <mode_game_lcd>
				if(confirm[1] == 1){
 8001928:	e045      	b.n	80019b6 <input_process+0x11e>
				}else{
					clr_confirm();
 800192a:	f7ff fdb5 	bl	8001498 <clr_confirm>
					confirm[1] = 1;
 800192e:	4b90      	ldr	r3, [pc, #576]	; (8001b70 <input_process+0x2d8>)
 8001930:	2201      	movs	r2, #1
 8001932:	705a      	strb	r2, [r3, #1]
					home_second_lcd();
 8001934:	f001 fce8 	bl	8003308 <home_second_lcd>
				if(confirm[1] == 1){
 8001938:	e03d      	b.n	80019b6 <input_process+0x11e>
				}
			}else if(is_touch_continue() == 1 || button_count[7] == 1){
 800193a:	f000 fc54 	bl	80021e6 <is_touch_continue>
 800193e:	4603      	mov	r3, r0
 8001940:	2b01      	cmp	r3, #1
 8001942:	d003      	beq.n	800194c <input_process+0xb4>
 8001944:	4b89      	ldr	r3, [pc, #548]	; (8001b6c <input_process+0x2d4>)
 8001946:	89db      	ldrh	r3, [r3, #14]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d116      	bne.n	800197a <input_process+0xe2>
				if(confirm[2] == 1 && tempFlag == 1){
 800194c:	4b88      	ldr	r3, [pc, #544]	; (8001b70 <input_process+0x2d8>)
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10a      	bne.n	800196a <input_process+0xd2>
 8001954:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <input_process+0x2dc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <input_process+0xd2>
					clr_confirm();
 800195c:	f7ff fd9c 	bl	8001498 <clr_confirm>
					game_lcd();
 8001960:	f001 f812 	bl	8002988 <game_lcd>
					continue_game();
 8001964:	f7ff fdd4 	bl	8001510 <continue_game>
				if(confirm[2] == 1 && tempFlag == 1){
 8001968:	e025      	b.n	80019b6 <input_process+0x11e>
				}else{
					clr_confirm();
 800196a:	f7ff fd95 	bl	8001498 <clr_confirm>
					confirm[2] = 1;
 800196e:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <input_process+0x2d8>)
 8001970:	2201      	movs	r2, #1
 8001972:	709a      	strb	r2, [r3, #2]
					home_third_lcd();
 8001974:	f001 fce0 	bl	8003338 <home_third_lcd>
				if(confirm[2] == 1 && tempFlag == 1){
 8001978:	e01d      	b.n	80019b6 <input_process+0x11e>
				}
			}else if(is_touch_highScore() == 1 || button_count[11] == 1){
 800197a:	f000 fc56 	bl	800222a <is_touch_highScore>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d004      	beq.n	800198e <input_process+0xf6>
 8001984:	4b79      	ldr	r3, [pc, #484]	; (8001b6c <input_process+0x2d4>)
 8001986:	8adb      	ldrh	r3, [r3, #22]
 8001988:	2b01      	cmp	r3, #1
 800198a:	f040 8116 	bne.w	8001bba <input_process+0x322>
				if(confirm[3] == 1){
 800198e:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <input_process+0x2d8>)
 8001990:	78db      	ldrb	r3, [r3, #3]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <input_process+0x10e>
					clr_confirm();
 8001996:	f7ff fd7f 	bl	8001498 <clr_confirm>
					status = HIGHSCORE;
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <input_process+0x2d0>)
 800199c:	2203      	movs	r2, #3
 800199e:	601a      	str	r2, [r3, #0]
					highscore_lcd();
 80019a0:	f000 ff1c 	bl	80027dc <highscore_lcd>
					clr_confirm();
					confirm[3] = 1;
					home_forth_lcd();
				}
			}
			break;
 80019a4:	e109      	b.n	8001bba <input_process+0x322>
					clr_confirm();
 80019a6:	f7ff fd77 	bl	8001498 <clr_confirm>
					confirm[3] = 1;
 80019aa:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <input_process+0x2d8>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	70da      	strb	r2, [r3, #3]
					home_forth_lcd();
 80019b0:	f001 fcda 	bl	8003368 <home_forth_lcd>
			break;
 80019b4:	e101      	b.n	8001bba <input_process+0x322>
 80019b6:	e100      	b.n	8001bba <input_process+0x322>
		case MODE:
			if(is_touch_classic() == 1 || button_count[3] == 1){
 80019b8:	f000 fc5a 	bl	8002270 <is_touch_classic>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d003      	beq.n	80019ca <input_process+0x132>
 80019c2:	4b6a      	ldr	r3, [pc, #424]	; (8001b6c <input_process+0x2d4>)
 80019c4:	88db      	ldrh	r3, [r3, #6]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d116      	bne.n	80019f8 <input_process+0x160>
				if(confirm[0] == 1){
 80019ca:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <input_process+0x2d8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d10a      	bne.n	80019e8 <input_process+0x150>
					clr_confirm();
 80019d2:	f7ff fd61 	bl	8001498 <clr_confirm>
					tempStatus = CLASSIC;
 80019d6:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <input_process+0x2e0>)
 80019d8:	220b      	movs	r2, #11
 80019da:	601a      	str	r2, [r3, #0]
					status = NAME;
 80019dc:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <input_process+0x2d0>)
 80019de:	2212      	movs	r2, #18
 80019e0:	601a      	str	r2, [r3, #0]
					entername_lcd();
 80019e2:	f001 fbdd 	bl	80031a0 <entername_lcd>
				if(confirm[0] == 1){
 80019e6:	e046      	b.n	8001a76 <input_process+0x1de>
				}else{
					clr_confirm();
 80019e8:	f7ff fd56 	bl	8001498 <clr_confirm>
					confirm[0] = 1;
 80019ec:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <input_process+0x2d8>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
					mode_first_lcd();
 80019f2:	f001 fcd3 	bl	800339c <mode_first_lcd>
				if(confirm[0] == 1){
 80019f6:	e03e      	b.n	8001a76 <input_process+0x1de>
				}
			}else if(is_touch_speed() == 1 || button_count[7] == 1){
 80019f8:	f000 fc5c 	bl	80022b4 <is_touch_speed>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d003      	beq.n	8001a0a <input_process+0x172>
 8001a02:	4b5a      	ldr	r3, [pc, #360]	; (8001b6c <input_process+0x2d4>)
 8001a04:	89db      	ldrh	r3, [r3, #14]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d116      	bne.n	8001a38 <input_process+0x1a0>
				if(confirm[1] == 1){
 8001a0a:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <input_process+0x2d8>)
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10a      	bne.n	8001a28 <input_process+0x190>
					clr_confirm();
 8001a12:	f7ff fd41 	bl	8001498 <clr_confirm>
					tempStatus = SPEED;
 8001a16:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <input_process+0x2e0>)
 8001a18:	220c      	movs	r2, #12
 8001a1a:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001a1c:	4b52      	ldr	r3, [pc, #328]	; (8001b68 <input_process+0x2d0>)
 8001a1e:	2212      	movs	r2, #18
 8001a20:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001a22:	f001 fbbd 	bl	80031a0 <entername_lcd>
				if(confirm[1] == 1){
 8001a26:	e026      	b.n	8001a76 <input_process+0x1de>
				}else{
					clr_confirm();
 8001a28:	f7ff fd36 	bl	8001498 <clr_confirm>
					confirm[1] = 1;
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <input_process+0x2d8>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	705a      	strb	r2, [r3, #1]
					mode_second_lcd();
 8001a32:	f001 fccb 	bl	80033cc <mode_second_lcd>
				if(confirm[1] == 1){
 8001a36:	e01e      	b.n	8001a76 <input_process+0x1de>
				}
			}else if(is_touch_time() == 1 || button_count[11] == 1){
 8001a38:	f000 fc5e 	bl	80022f8 <is_touch_time>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d003      	beq.n	8001a4a <input_process+0x1b2>
 8001a42:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <input_process+0x2d4>)
 8001a44:	8adb      	ldrh	r3, [r3, #22]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d115      	bne.n	8001a76 <input_process+0x1de>
				if(confirm[2] == 1){
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <input_process+0x2d8>)
 8001a4c:	789b      	ldrb	r3, [r3, #2]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10a      	bne.n	8001a68 <input_process+0x1d0>
					clr_confirm();
 8001a52:	f7ff fd21 	bl	8001498 <clr_confirm>
					tempStatus = TIME;
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <input_process+0x2e0>)
 8001a58:	220d      	movs	r2, #13
 8001a5a:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <input_process+0x2d0>)
 8001a5e:	2212      	movs	r2, #18
 8001a60:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001a62:	f001 fb9d 	bl	80031a0 <entername_lcd>
 8001a66:	e006      	b.n	8001a76 <input_process+0x1de>
				}else{
					clr_confirm();
 8001a68:	f7ff fd16 	bl	8001498 <clr_confirm>
					confirm[2] = 1;
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <input_process+0x2d8>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	709a      	strb	r2, [r3, #2]
					mode_third_lcd();
 8001a72:	f001 fcc5 	bl	8003400 <mode_third_lcd>
				}
			}
			if(is_touch_quit() == 1 || button_count[15] == 1){
 8001a76:	f000 fb09 	bl	800208c <is_touch_quit>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d004      	beq.n	8001a8a <input_process+0x1f2>
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <input_process+0x2d4>)
 8001a82:	8bdb      	ldrh	r3, [r3, #30]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	f040 809a 	bne.w	8001bbe <input_process+0x326>
				if(confirm[3] == 1){
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <input_process+0x2d8>)
 8001a8c:	78db      	ldrb	r3, [r3, #3]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <input_process+0x20a>
					clr_confirm();
 8001a92:	f7ff fd01 	bl	8001498 <clr_confirm>
					status = HOME;
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <input_process+0x2d0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
					home_lcd();
 8001a9c:	f000 fdce 	bl	800263c <home_lcd>
					clr_confirm();
					confirm[3] = 1;
					mode_forth_lcd();
				}
			}
			break;
 8001aa0:	e08d      	b.n	8001bbe <input_process+0x326>
					clr_confirm();
 8001aa2:	f7ff fcf9 	bl	8001498 <clr_confirm>
					confirm[3] = 1;
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <input_process+0x2d8>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	70da      	strb	r2, [r3, #3]
					mode_forth_lcd();
 8001aac:	f001 fcc2 	bl	8003434 <mode_forth_lcd>
			break;
 8001ab0:	e085      	b.n	8001bbe <input_process+0x326>
		case HIGHSCORE:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001ab2:	f000 faeb 	bl	800208c <is_touch_quit>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d003      	beq.n	8001ac4 <input_process+0x22c>
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <input_process+0x2d4>)
 8001abe:	88db      	ldrh	r3, [r3, #6]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d17e      	bne.n	8001bc2 <input_process+0x32a>
				status = HOME;
 8001ac4:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <input_process+0x2d0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001aca:	f000 fdb7 	bl	800263c <home_lcd>
			}
			break;
 8001ace:	e078      	b.n	8001bc2 <input_process+0x32a>
		case CLASSIC:
			input_inGame();
 8001ad0:	f7ff fd48 	bl	8001564 <input_inGame>
			break;
 8001ad4:	e07c      	b.n	8001bd0 <input_process+0x338>
		case SPEED:
			input_inGame();
 8001ad6:	f7ff fd45 	bl	8001564 <input_inGame>
			break;
 8001ada:	e079      	b.n	8001bd0 <input_process+0x338>
		case TIME:
			input_inGame();
 8001adc:	f7ff fd42 	bl	8001564 <input_inGame>
			break;
 8001ae0:	e076      	b.n	8001bd0 <input_process+0x338>
		case GAMEOVER:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001ae2:	f000 fad3 	bl	800208c <is_touch_quit>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d003      	beq.n	8001af4 <input_process+0x25c>
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <input_process+0x2d4>)
 8001aee:	88db      	ldrh	r3, [r3, #6]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d168      	bne.n	8001bc6 <input_process+0x32e>
				status = HOME;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <input_process+0x2d0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001afa:	f000 fd9f 	bl	800263c <home_lcd>
				reset_7seg();				// Thoat che do choi game led 7 se quay tro ve 0
 8001afe:	f001 fdbb 	bl	8003678 <reset_7seg>
			}
			break;
 8001b02:	e060      	b.n	8001bc6 <input_process+0x32e>
		case WIN:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001b04:	f000 fac2 	bl	800208c <is_touch_quit>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d003      	beq.n	8001b16 <input_process+0x27e>
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <input_process+0x2d4>)
 8001b10:	88db      	ldrh	r3, [r3, #6]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d159      	bne.n	8001bca <input_process+0x332>
				status = HOME;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <input_process+0x2d0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001b1c:	f000 fd8e 	bl	800263c <home_lcd>
				reset_7seg();
 8001b20:	f001 fdaa 	bl	8003678 <reset_7seg>
			}
			break;
 8001b24:	e051      	b.n	8001bca <input_process+0x332>
		case NAME:
			input_enterName();
 8001b26:	f7ff fd7f 	bl	8001628 <input_enterName>
			break;
 8001b2a:	e051      	b.n	8001bd0 <input_process+0x338>
		case PAUSE:
			if(is_touch_quit_end() == 1 || button_count[7] == 1){
 8001b2c:	f000 fad1 	bl	80020d2 <is_touch_quit_end>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d003      	beq.n	8001b3e <input_process+0x2a6>
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <input_process+0x2d4>)
 8001b38:	89db      	ldrh	r3, [r3, #14]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d11e      	bne.n	8001b7c <input_process+0x2e4>
				if(confirm[2] == 1){
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <input_process+0x2d8>)
 8001b40:	789b      	ldrb	r3, [r3, #2]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <input_process+0x2be>
					clr_confirm();
 8001b46:	f7ff fca7 	bl	8001498 <clr_confirm>
					status = HOME;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <input_process+0x2d0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
					home_lcd();
 8001b50:	f000 fd74 	bl	800263c <home_lcd>
				if(confirm[2] == 1){
 8001b54:	e02e      	b.n	8001bb4 <input_process+0x31c>
				}else{
					clr_confirm();
 8001b56:	f7ff fc9f 	bl	8001498 <clr_confirm>
					confirm[2] = 1;
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <input_process+0x2d8>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	709a      	strb	r2, [r3, #2]
					pause_third_lcd();
 8001b60:	f001 fcaa 	bl	80034b8 <pause_third_lcd>
				if(confirm[2] == 1){
 8001b64:	e026      	b.n	8001bb4 <input_process+0x31c>
 8001b66:	bf00      	nop
 8001b68:	20000160 	.word	0x20000160
 8001b6c:	200001f4 	.word	0x200001f4
 8001b70:	20000140 	.word	0x20000140
 8001b74:	20000170 	.word	0x20000170
 8001b78:	20000174 	.word	0x20000174
				}
			}else if(is_touch_resume() == 1 || button_count[3] == 1){
 8001b7c:	f000 facb 	bl	8002116 <is_touch_resume>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d003      	beq.n	8001b8e <input_process+0x2f6>
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <input_process+0x33c>)
 8001b88:	88db      	ldrh	r3, [r3, #6]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d11f      	bne.n	8001bce <input_process+0x336>
				if(confirm[1] == 1){
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <input_process+0x340>)
 8001b90:	785b      	ldrb	r3, [r3, #1]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d106      	bne.n	8001ba4 <input_process+0x30c>
					clr_confirm();
 8001b96:	f7ff fc7f 	bl	8001498 <clr_confirm>
					game_lcd();
 8001b9a:	f000 fef5 	bl	8002988 <game_lcd>
					continue_game();
 8001b9e:	f7ff fcb7 	bl	8001510 <continue_game>
					clr_confirm();
					confirm[1] = 1;
					pause_second_lcd();
				}
			}
			break;
 8001ba2:	e014      	b.n	8001bce <input_process+0x336>
					clr_confirm();
 8001ba4:	f7ff fc78 	bl	8001498 <clr_confirm>
					confirm[1] = 1;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <input_process+0x340>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
					pause_second_lcd();
 8001bae:	f001 fc5b 	bl	8003468 <pause_second_lcd>
			break;
 8001bb2:	e00c      	b.n	8001bce <input_process+0x336>
 8001bb4:	e00b      	b.n	8001bce <input_process+0x336>
		default:
			break;
 8001bb6:	bf00      	nop
 8001bb8:	e00a      	b.n	8001bd0 <input_process+0x338>
			break;
 8001bba:	bf00      	nop
 8001bbc:	e008      	b.n	8001bd0 <input_process+0x338>
			break;
 8001bbe:	bf00      	nop
 8001bc0:	e006      	b.n	8001bd0 <input_process+0x338>
			break;
 8001bc2:	bf00      	nop
 8001bc4:	e004      	b.n	8001bd0 <input_process+0x338>
			break;
 8001bc6:	bf00      	nop
 8001bc8:	e002      	b.n	8001bd0 <input_process+0x338>
			break;
 8001bca:	bf00      	nop
 8001bcc:	e000      	b.n	8001bd0 <input_process+0x338>
			break;
 8001bce:	bf00      	nop
	}
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200001f4 	.word	0x200001f4
 8001bd8:	20000140 	.word	0x20000140

08001bdc <score_cal>:

// Tinh toan cap nhat diem so
void score_cal(){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	current_score = current_score + (400 / counter_time_score) * 5 + 5;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <score_cal+0x30>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	441a      	add	r2, r3
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <score_cal+0x34>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3305      	adds	r3, #5
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <score_cal+0x34>)
 8001bfc:	6013      	str	r3, [r2, #0]
	counter_time_score = 0;
 8001bfe:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <score_cal+0x30>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
	score_lcd();
 8001c04:	f000 ffaa 	bl	8002b5c <score_lcd>
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000168 	.word	0x20000168
 8001c10:	20000000 	.word	0x20000000

08001c14 <inGame>:

void inGame(){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	if(move != NOT){
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <inGame+0x6c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <inGame+0x10>
		move_snake();
 8001c20:	f003 f864 	bl	8004cec <move_snake>
	}
	if(is_collision() == 1){
 8001c24:	f002 ff92 	bl	8004b4c <is_collision>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d109      	bne.n	8001c42 <inGame+0x2e>
		status = GAMEOVER;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <inGame+0x70>)
 8001c30:	2210      	movs	r2, #16
 8001c32:	601a      	str	r2, [r3, #0]
		game_over_lcd();
 8001c34:	f000 fff4 	bl	8002c20 <game_over_lcd>
		user_history();
 8001c38:	f004 fec0 	bl	80069bc <user_history>
		snake_init();
 8001c3c:	f002 ff06 	bl	8004a4c <snake_init>
		status = WIN;
		youwin_lcd();
		user_history();
		snake_init();
	}
}
 8001c40:	e01b      	b.n	8001c7a <inGame+0x66>
	}else if(is_eat() == 1){
 8001c42:	f002 ffc1 	bl	8004bc8 <is_eat>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d109      	bne.n	8001c60 <inGame+0x4c>
		length++;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <inGame+0x74>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <inGame+0x74>)
 8001c54:	6013      	str	r3, [r2, #0]
		score_cal();
 8001c56:	f7ff ffc1 	bl	8001bdc <score_cal>
		rand_food();
 8001c5a:	f003 f815 	bl	8004c88 <rand_food>
}
 8001c5e:	e00c      	b.n	8001c7a <inGame+0x66>
	}else if(length == MAX_LENGTH_SNAKE){
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <inGame+0x74>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d108      	bne.n	8001c7a <inGame+0x66>
		status = WIN;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <inGame+0x70>)
 8001c6a:	2211      	movs	r2, #17
 8001c6c:	601a      	str	r2, [r3, #0]
		youwin_lcd();
 8001c6e:	f001 f887 	bl	8002d80 <youwin_lcd>
		user_history();
 8001c72:	f004 fea3 	bl	80069bc <user_history>
		snake_init();
 8001c76:	f002 fee9 	bl	8004a4c <snake_init>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000164 	.word	0x20000164
 8001c84:	20000160 	.word	0x20000160
 8001c88:	2000004c 	.word	0x2000004c

08001c8c <fsm_ingame>:

void fsm_ingame(){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	switch(status){
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <fsm_ingame+0x138>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b0d      	cmp	r3, #13
 8001c96:	d04e      	beq.n	8001d36 <fsm_ingame+0xaa>
 8001c98:	2b0d      	cmp	r3, #13
 8001c9a:	f300 8089 	bgt.w	8001db0 <fsm_ingame+0x124>
 8001c9e:	2b0b      	cmp	r3, #11
 8001ca0:	d002      	beq.n	8001ca8 <fsm_ingame+0x1c>
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d018      	beq.n	8001cd8 <fsm_ingame+0x4c>
					snake_init();
				}
			}
			break;
		default:
			break;
 8001ca6:	e083      	b.n	8001db0 <fsm_ingame+0x124>
			counter_time_score++;
 8001ca8:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <fsm_ingame+0x13c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a46      	ldr	r2, [pc, #280]	; (8001dc8 <fsm_ingame+0x13c>)
 8001cb0:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001cb2:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <fsm_ingame+0x140>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d104      	bne.n	8001cc4 <fsm_ingame+0x38>
				flag_timer4 = 0;
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <fsm_ingame+0x140>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	801a      	strh	r2, [r3, #0]
				environment_lcd();
 8001cc0:	f000 ff14 	bl	8002aec <environment_lcd>
			if(flag_timer3 == 1){
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <fsm_ingame+0x144>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d173      	bne.n	8001db4 <fsm_ingame+0x128>
				flag_timer3 = 0;
 8001ccc:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <fsm_ingame+0x144>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	801a      	strh	r2, [r3, #0]
				inGame();
 8001cd2:	f7ff ff9f 	bl	8001c14 <inGame>
			break;
 8001cd6:	e06d      	b.n	8001db4 <fsm_ingame+0x128>
			counter_time_score++;
 8001cd8:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <fsm_ingame+0x13c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a3a      	ldr	r2, [pc, #232]	; (8001dc8 <fsm_ingame+0x13c>)
 8001ce0:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <fsm_ingame+0x140>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d104      	bne.n	8001cf4 <fsm_ingame+0x68>
				flag_timer4 = 0;
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <fsm_ingame+0x140>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	801a      	strh	r2, [r3, #0]
				environment_lcd();
 8001cf0:	f000 fefc 	bl	8002aec <environment_lcd>
			if(flag_timer3 == 1){
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <fsm_ingame+0x144>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d15d      	bne.n	8001db8 <fsm_ingame+0x12c>
				flag_timer3 = 0;
 8001cfc:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <fsm_ingame+0x144>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	801a      	strh	r2, [r3, #0]
				inGame();
 8001d02:	f7ff ff87 	bl	8001c14 <inGame>
				if(length == 5){
 8001d06:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <fsm_ingame+0x148>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d103      	bne.n	8001d16 <fsm_ingame+0x8a>
					setTimer3(200);
 8001d0e:	20c8      	movs	r0, #200	; 0xc8
 8001d10:	f003 f89c 	bl	8004e4c <setTimer3>
			break;
 8001d14:	e050      	b.n	8001db8 <fsm_ingame+0x12c>
				}else if(length == 10){
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <fsm_ingame+0x148>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b0a      	cmp	r3, #10
 8001d1c:	d103      	bne.n	8001d26 <fsm_ingame+0x9a>
					setTimer3(100);
 8001d1e:	2064      	movs	r0, #100	; 0x64
 8001d20:	f003 f894 	bl	8004e4c <setTimer3>
			break;
 8001d24:	e048      	b.n	8001db8 <fsm_ingame+0x12c>
				}else if(length == 15){
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <fsm_ingame+0x148>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	d144      	bne.n	8001db8 <fsm_ingame+0x12c>
					setTimer3(50);
 8001d2e:	2032      	movs	r0, #50	; 0x32
 8001d30:	f003 f88c 	bl	8004e4c <setTimer3>
			break;
 8001d34:	e040      	b.n	8001db8 <fsm_ingame+0x12c>
			counter_time_score++;
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <fsm_ingame+0x13c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <fsm_ingame+0x13c>)
 8001d3e:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <fsm_ingame+0x140>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d104      	bne.n	8001d52 <fsm_ingame+0xc6>
				flag_timer4 = 0;
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <fsm_ingame+0x140>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
				environment_lcd();
 8001d4e:	f000 fecd 	bl	8002aec <environment_lcd>
			if(flag_timer3 == 1){
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <fsm_ingame+0x144>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d130      	bne.n	8001dbc <fsm_ingame+0x130>
				flag_timer3 = 0;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <fsm_ingame+0x144>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
				inGame();
 8001d60:	f7ff ff58 	bl	8001c14 <inGame>
				if(counter_time == 50){
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <fsm_ingame+0x14c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b32      	cmp	r3, #50	; 0x32
 8001d6a:	d103      	bne.n	8001d74 <fsm_ingame+0xe8>
					setTimer3(200);
 8001d6c:	20c8      	movs	r0, #200	; 0xc8
 8001d6e:	f003 f86d 	bl	8004e4c <setTimer3>
			break;
 8001d72:	e023      	b.n	8001dbc <fsm_ingame+0x130>
				}else if(counter_time == 35){
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <fsm_ingame+0x14c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b23      	cmp	r3, #35	; 0x23
 8001d7a:	d103      	bne.n	8001d84 <fsm_ingame+0xf8>
					setTimer3(100);
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f003 f865 	bl	8004e4c <setTimer3>
			break;
 8001d82:	e01b      	b.n	8001dbc <fsm_ingame+0x130>
				}else if(counter_time == 20){
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <fsm_ingame+0x14c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b14      	cmp	r3, #20
 8001d8a:	d103      	bne.n	8001d94 <fsm_ingame+0x108>
					setTimer3(50);
 8001d8c:	2032      	movs	r0, #50	; 0x32
 8001d8e:	f003 f85d 	bl	8004e4c <setTimer3>
			break;
 8001d92:	e013      	b.n	8001dbc <fsm_ingame+0x130>
				}else if(counter_time <= 0){
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <fsm_ingame+0x14c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	dc0f      	bgt.n	8001dbc <fsm_ingame+0x130>
					status = WIN;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <fsm_ingame+0x138>)
 8001d9e:	2211      	movs	r2, #17
 8001da0:	601a      	str	r2, [r3, #0]
					youwin_lcd();
 8001da2:	f000 ffed 	bl	8002d80 <youwin_lcd>
					user_history();
 8001da6:	f004 fe09 	bl	80069bc <user_history>
					snake_init();
 8001daa:	f002 fe4f 	bl	8004a4c <snake_init>
			break;
 8001dae:	e005      	b.n	8001dbc <fsm_ingame+0x130>
			break;
 8001db0:	bf00      	nop
 8001db2:	e004      	b.n	8001dbe <fsm_ingame+0x132>
			break;
 8001db4:	bf00      	nop
 8001db6:	e002      	b.n	8001dbe <fsm_ingame+0x132>
			break;
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <fsm_ingame+0x132>
			break;
 8001dbc:	bf00      	nop
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000160 	.word	0x20000160
 8001dc8:	20000168 	.word	0x20000168
 8001dcc:	2000018a 	.word	0x2000018a
 8001dd0:	20000184 	.word	0x20000184
 8001dd4:	2000004c 	.word	0x2000004c
 8001dd8:	2000016c 	.word	0x2000016c

08001ddc <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	; 0x38
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	615a      	str	r2, [r3, #20]
 8001df4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001df6:	463b      	mov	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
 8001e04:	615a      	str	r2, [r3, #20]
 8001e06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e0a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e0e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e12:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <MX_FSMC_Init+0xf0>)
 8001e14:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001e6e:	230f      	movs	r3, #15
 8001e70:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001e72:	230f      	movs	r3, #15
 8001e74:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001e76:	233c      	movs	r3, #60	; 0x3c
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001e7e:	2310      	movs	r3, #16
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001e82:	2311      	movs	r3, #17
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e86:	2300      	movs	r3, #0
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001e92:	2309      	movs	r3, #9
 8001e94:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001e9e:	2311      	movs	r3, #17
 8001ea0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001ea6:	463a      	mov	r2, r7
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <MX_FSMC_Init+0xec>)
 8001eb0:	f008 fb90 	bl	800a5d4 <HAL_SRAM_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001eba:	f002 fd6f 	bl	800499c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3738      	adds	r7, #56	; 0x38
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000218 	.word	0x20000218
 8001ecc:	a0000104 	.word	0xa0000104

08001ed0 <distance_of_two_point>:
 */

#include "fun_touch.h"

// Tinh khoang cach hai diem
float distance_of_two_point(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	80fb      	strh	r3, [r7, #6]
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80bb      	strh	r3, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]
 8001eea:	4613      	mov	r3, r2
 8001eec:	803b      	strh	r3, [r7, #0]
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	887b      	ldrh	r3, [r7, #2]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb15 	bl	8000524 <__aeabi_i2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001f68 <distance_of_two_point+0x98>
 8001f02:	ec43 2b10 	vmov	d0, r2, r3
 8001f06:	f00b fc8f 	bl	800d828 <pow>
 8001f0a:	ec55 4b10 	vmov	r4, r5, d0
 8001f0e:	88ba      	ldrh	r2, [r7, #4]
 8001f10:	883b      	ldrh	r3, [r7, #0]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fb05 	bl	8000524 <__aeabi_i2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001f68 <distance_of_two_point+0x98>
 8001f22:	ec43 2b10 	vmov	d0, r2, r3
 8001f26:	f00b fc7f 	bl	800d828 <pow>
 8001f2a:	ec53 2b10 	vmov	r2, r3, d0
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f7fe f9ab 	bl	800028c <__adddf3>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	ec43 2b17 	vmov	d7, r2, r3
 8001f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f42:	eef0 0a67 	vmov.f32	s1, s15
 8001f46:	f00b fd1d 	bl	800d984 <sqrt>
 8001f4a:	ec53 2b10 	vmov	r2, r3, d0
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fe49 	bl	8000be8 <__aeabi_d2f>
 8001f56:	4603      	mov	r3, r0
 8001f58:	ee07 3a90 	vmov	s15, r3
}
 8001f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdb0      	pop	{r4, r5, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	40000000 	.word	0x40000000

08001f70 <is_touch_right>:

int is_touch_right(){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001f74:	f004 fc14 	bl	80067a0 <touch_IsTouched>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <is_touch_right+0x12>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e018      	b.n	8001fb4 <is_touch_right+0x44>
	return (touch_GetX() > POS_X_RIGHT
 8001f82:	f004 fc1f 	bl	80067c4 <touch_GetX>
 8001f86:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
			&& touch_GetY() > POS_Y_RIGHT
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001f88:	2ba5      	cmp	r3, #165	; 0xa5
 8001f8a:	d912      	bls.n	8001fb2 <is_touch_right+0x42>
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
 8001f8c:	f004 fc1a 	bl	80067c4 <touch_GetX>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2bea      	cmp	r3, #234	; 0xea
 8001f94:	d80d      	bhi.n	8001fb2 <is_touch_right+0x42>
			&& touch_GetY() > POS_Y_RIGHT
 8001f96:	f004 fc21 	bl	80067dc <touch_GetY>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001fa0:	d307      	bcc.n	8001fb2 <is_touch_right+0x42>
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001fa2:	f004 fc1b 	bl	80067dc <touch_GetY>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001fac:	d801      	bhi.n	8001fb2 <is_touch_right+0x42>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <is_touch_right+0x44>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <is_touch_left>:

int is_touch_left(){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001fbc:	f004 fbf0 	bl	80067a0 <touch_IsTouched>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <is_touch_left+0x12>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e018      	b.n	8001ffc <is_touch_left+0x44>
	return (touch_GetX() > POS_X_LEFT
 8001fca:	f004 fbfb 	bl	80067c4 <touch_GetX>
 8001fce:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
			&& touch_GetY() > POS_Y_LEFT
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d912      	bls.n	8001ffa <is_touch_left+0x42>
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
 8001fd4:	f004 fbf6 	bl	80067c4 <touch_GetX>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b4a      	cmp	r3, #74	; 0x4a
 8001fdc:	d80d      	bhi.n	8001ffa <is_touch_left+0x42>
			&& touch_GetY() > POS_Y_LEFT
 8001fde:	f004 fbfd 	bl	80067dc <touch_GetY>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001fe8:	d307      	bcc.n	8001ffa <is_touch_left+0x42>
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001fea:	f004 fbf7 	bl	80067dc <touch_GetY>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001ff4:	d801      	bhi.n	8001ffa <is_touch_left+0x42>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <is_touch_left+0x44>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <is_touch_up>:

int is_touch_up(){
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002004:	f004 fbcc 	bl	80067a0 <touch_IsTouched>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <is_touch_up+0x12>
 800200e:	2300      	movs	r3, #0
 8002010:	e016      	b.n	8002040 <is_touch_up+0x40>
	return (touch_GetX() > POS_X_UP
 8002012:	f004 fbd7 	bl	80067c4 <touch_GetX>
 8002016:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
			&& touch_GetY() > POS_Y_UP
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8002018:	2b55      	cmp	r3, #85	; 0x55
 800201a:	d910      	bls.n	800203e <is_touch_up+0x3e>
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
 800201c:	f004 fbd2 	bl	80067c4 <touch_GetX>
 8002020:	4603      	mov	r3, r0
 8002022:	2b9a      	cmp	r3, #154	; 0x9a
 8002024:	d80b      	bhi.n	800203e <is_touch_up+0x3e>
			&& touch_GetY() > POS_Y_UP
 8002026:	f004 fbd9 	bl	80067dc <touch_GetY>
 800202a:	4603      	mov	r3, r0
 800202c:	2bcd      	cmp	r3, #205	; 0xcd
 800202e:	d906      	bls.n	800203e <is_touch_up+0x3e>
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8002030:	f004 fbd4 	bl	80067dc <touch_GetY>
 8002034:	4603      	mov	r3, r0
 8002036:	2bfe      	cmp	r3, #254	; 0xfe
 8002038:	d801      	bhi.n	800203e <is_touch_up+0x3e>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <is_touch_up+0x40>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}

08002044 <is_touch_down>:

int is_touch_down(){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002048:	f004 fbaa 	bl	80067a0 <touch_IsTouched>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <is_touch_down+0x12>
 8002052:	2300      	movs	r3, #0
 8002054:	e018      	b.n	8002088 <is_touch_down+0x44>
	return (touch_GetX() > POS_X_DOWN
 8002056:	f004 fbb5 	bl	80067c4 <touch_GetX>
 800205a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
			&& touch_GetY() > POS_Y_DOWN
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 800205c:	2b55      	cmp	r3, #85	; 0x55
 800205e:	d912      	bls.n	8002086 <is_touch_down+0x42>
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
 8002060:	f004 fbb0 	bl	80067c4 <touch_GetX>
 8002064:	4603      	mov	r3, r0
 8002066:	2b9a      	cmp	r3, #154	; 0x9a
 8002068:	d80d      	bhi.n	8002086 <is_touch_down+0x42>
			&& touch_GetY() > POS_Y_DOWN
 800206a:	f004 fbb7 	bl	80067dc <touch_GetY>
 800206e:	4603      	mov	r3, r0
 8002070:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8002074:	d307      	bcc.n	8002086 <is_touch_down+0x42>
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8002076:	f004 fbb1 	bl	80067dc <touch_GetY>
 800207a:	4603      	mov	r3, r0
 800207c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8002080:	d801      	bhi.n	8002086 <is_touch_down+0x42>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <is_touch_down+0x44>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}

0800208c <is_touch_quit>:

int is_touch_quit(){
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002090:	f004 fb86 	bl	80067a0 <touch_IsTouched>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <is_touch_quit+0x12>
 800209a:	2300      	movs	r3, #0
 800209c:	e017      	b.n	80020ce <is_touch_quit+0x42>
	return (touch_GetX() > POS_X_FORTH
 800209e:	f004 fb91 	bl	80067c4 <touch_GetX>
 80020a2:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 80020a4:	2b41      	cmp	r3, #65	; 0x41
 80020a6:	d911      	bls.n	80020cc <is_touch_quit+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 80020a8:	f004 fb8c 	bl	80067c4 <touch_GetX>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2bb8      	cmp	r3, #184	; 0xb8
 80020b0:	d80c      	bhi.n	80020cc <is_touch_quit+0x40>
			&& touch_GetY() > POS_Y_FORTH
 80020b2:	f004 fb93 	bl	80067dc <touch_GetY>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2bfa      	cmp	r3, #250	; 0xfa
 80020ba:	d907      	bls.n	80020cc <is_touch_quit+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 80020bc:	f004 fb8e 	bl	80067dc <touch_GetY>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80020c6:	d801      	bhi.n	80020cc <is_touch_quit+0x40>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <is_touch_quit+0x42>
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <is_touch_quit_end>:

int is_touch_quit_end(){
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80020d6:	f004 fb63 	bl	80067a0 <touch_IsTouched>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <is_touch_quit_end+0x12>
 80020e0:	2300      	movs	r3, #0
 80020e2:	e016      	b.n	8002112 <is_touch_quit_end+0x40>
	return (touch_GetX() > POS_X_THIRD
 80020e4:	f004 fb6e 	bl	80067c4 <touch_GetX>
 80020e8:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80020ea:	2b41      	cmp	r3, #65	; 0x41
 80020ec:	d910      	bls.n	8002110 <is_touch_quit_end+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 80020ee:	f004 fb69 	bl	80067c4 <touch_GetX>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2bb8      	cmp	r3, #184	; 0xb8
 80020f6:	d80b      	bhi.n	8002110 <is_touch_quit_end+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 80020f8:	f004 fb70 	bl	80067dc <touch_GetY>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2bc8      	cmp	r3, #200	; 0xc8
 8002100:	d906      	bls.n	8002110 <is_touch_quit_end+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002102:	f004 fb6b 	bl	80067dc <touch_GetY>
 8002106:	4603      	mov	r3, r0
 8002108:	2bea      	cmp	r3, #234	; 0xea
 800210a:	d801      	bhi.n	8002110 <is_touch_quit_end+0x3e>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <is_touch_quit_end+0x40>
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}

08002116 <is_touch_resume>:

int is_touch_resume(){
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800211a:	f004 fb41 	bl	80067a0 <touch_IsTouched>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <is_touch_resume+0x12>
 8002124:	2300      	movs	r3, #0
 8002126:	e016      	b.n	8002156 <is_touch_resume+0x40>
	return (touch_GetX() > POS_X_SECOND
 8002128:	f004 fb4c 	bl	80067c4 <touch_GetX>
 800212c:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 800212e:	2b41      	cmp	r3, #65	; 0x41
 8002130:	d910      	bls.n	8002154 <is_touch_resume+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8002132:	f004 fb47 	bl	80067c4 <touch_GetX>
 8002136:	4603      	mov	r3, r0
 8002138:	2bb8      	cmp	r3, #184	; 0xb8
 800213a:	d80b      	bhi.n	8002154 <is_touch_resume+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 800213c:	f004 fb4e 	bl	80067dc <touch_GetY>
 8002140:	4603      	mov	r3, r0
 8002142:	2b96      	cmp	r3, #150	; 0x96
 8002144:	d906      	bls.n	8002154 <is_touch_resume+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8002146:	f004 fb49 	bl	80067dc <touch_GetY>
 800214a:	4603      	mov	r3, r0
 800214c:	2bb8      	cmp	r3, #184	; 0xb8
 800214e:	d801      	bhi.n	8002154 <is_touch_resume+0x3e>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <is_touch_resume+0x40>
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}

0800215a <is_touch_pause>:

int is_touch_pause(){
 800215a:	b598      	push	{r3, r4, r7, lr}
 800215c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800215e:	f004 fb1f 	bl	80067a0 <touch_IsTouched>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <is_touch_pause+0x12>
 8002168:	2300      	movs	r3, #0
 800216a:	e018      	b.n	800219e <is_touch_pause+0x44>
	return distance_of_two_point(touch_GetX(), touch_GetY(), POS_X_PAUSE, POS_Y_PAUSE) < BTN_HEIGHT / 2;
 800216c:	f004 fb2a 	bl	80067c4 <touch_GetX>
 8002170:	4603      	mov	r3, r0
 8002172:	461c      	mov	r4, r3
 8002174:	f004 fb32 	bl	80067dc <touch_GetY>
 8002178:	4603      	mov	r3, r0
 800217a:	4619      	mov	r1, r3
 800217c:	23e6      	movs	r3, #230	; 0xe6
 800217e:	22c8      	movs	r2, #200	; 0xc8
 8002180:	4620      	mov	r0, r4
 8002182:	f7ff fea5 	bl	8001ed0 <distance_of_two_point>
 8002186:	eef0 7a40 	vmov.f32	s15, s0
 800218a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800218e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	bf4c      	ite	mi
 8002198:	2301      	movmi	r3, #1
 800219a:	2300      	movpl	r3, #0
 800219c:	b2db      	uxtb	r3, r3
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd98      	pop	{r3, r4, r7, pc}

080021a2 <is_touch_newGame>:

int is_touch_newGame(){
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80021a6:	f004 fafb 	bl	80067a0 <touch_IsTouched>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <is_touch_newGame+0x12>
 80021b0:	2300      	movs	r3, #0
 80021b2:	e016      	b.n	80021e2 <is_touch_newGame+0x40>
	return (touch_GetX() > POS_X_SECOND
 80021b4:	f004 fb06 	bl	80067c4 <touch_GetX>
 80021b8:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80021ba:	2b41      	cmp	r3, #65	; 0x41
 80021bc:	d910      	bls.n	80021e0 <is_touch_newGame+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 80021be:	f004 fb01 	bl	80067c4 <touch_GetX>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2bb8      	cmp	r3, #184	; 0xb8
 80021c6:	d80b      	bhi.n	80021e0 <is_touch_newGame+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 80021c8:	f004 fb08 	bl	80067dc <touch_GetY>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b96      	cmp	r3, #150	; 0x96
 80021d0:	d906      	bls.n	80021e0 <is_touch_newGame+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80021d2:	f004 fb03 	bl	80067dc <touch_GetY>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2bb8      	cmp	r3, #184	; 0xb8
 80021da:	d801      	bhi.n	80021e0 <is_touch_newGame+0x3e>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <is_touch_newGame+0x40>
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <is_touch_continue>:

int is_touch_continue(){
 80021e6:	b580      	push	{r7, lr}
 80021e8:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80021ea:	f004 fad9 	bl	80067a0 <touch_IsTouched>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <is_touch_continue+0x12>
 80021f4:	2300      	movs	r3, #0
 80021f6:	e016      	b.n	8002226 <is_touch_continue+0x40>
	return (touch_GetX() > POS_X_THIRD
 80021f8:	f004 fae4 	bl	80067c4 <touch_GetX>
 80021fc:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80021fe:	2b41      	cmp	r3, #65	; 0x41
 8002200:	d910      	bls.n	8002224 <is_touch_continue+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8002202:	f004 fadf 	bl	80067c4 <touch_GetX>
 8002206:	4603      	mov	r3, r0
 8002208:	2bb8      	cmp	r3, #184	; 0xb8
 800220a:	d80b      	bhi.n	8002224 <is_touch_continue+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 800220c:	f004 fae6 	bl	80067dc <touch_GetY>
 8002210:	4603      	mov	r3, r0
 8002212:	2bc8      	cmp	r3, #200	; 0xc8
 8002214:	d906      	bls.n	8002224 <is_touch_continue+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002216:	f004 fae1 	bl	80067dc <touch_GetY>
 800221a:	4603      	mov	r3, r0
 800221c:	2bea      	cmp	r3, #234	; 0xea
 800221e:	d801      	bhi.n	8002224 <is_touch_continue+0x3e>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <is_touch_continue+0x40>
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}

0800222a <is_touch_highScore>:

int is_touch_highScore(){
 800222a:	b580      	push	{r7, lr}
 800222c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800222e:	f004 fab7 	bl	80067a0 <touch_IsTouched>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <is_touch_highScore+0x12>
 8002238:	2300      	movs	r3, #0
 800223a:	e017      	b.n	800226c <is_touch_highScore+0x42>
	return (touch_GetX() > POS_X_FORTH
 800223c:	f004 fac2 	bl	80067c4 <touch_GetX>
 8002240:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8002242:	2b41      	cmp	r3, #65	; 0x41
 8002244:	d911      	bls.n	800226a <is_touch_highScore+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8002246:	f004 fabd 	bl	80067c4 <touch_GetX>
 800224a:	4603      	mov	r3, r0
 800224c:	2bb8      	cmp	r3, #184	; 0xb8
 800224e:	d80c      	bhi.n	800226a <is_touch_highScore+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8002250:	f004 fac4 	bl	80067dc <touch_GetY>
 8002254:	4603      	mov	r3, r0
 8002256:	2bfa      	cmp	r3, #250	; 0xfa
 8002258:	d907      	bls.n	800226a <is_touch_highScore+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 800225a:	f004 fabf 	bl	80067dc <touch_GetY>
 800225e:	4603      	mov	r3, r0
 8002260:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8002264:	d801      	bhi.n	800226a <is_touch_highScore+0x40>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <is_touch_highScore+0x42>
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}

08002270 <is_touch_classic>:

int is_touch_classic(){
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002274:	f004 fa94 	bl	80067a0 <touch_IsTouched>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <is_touch_classic+0x12>
 800227e:	2300      	movs	r3, #0
 8002280:	e016      	b.n	80022b0 <is_touch_classic+0x40>
	return (touch_GetX() > POS_X_FIRST
 8002282:	f004 fa9f 	bl	80067c4 <touch_GetX>
 8002286:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8002288:	2b41      	cmp	r3, #65	; 0x41
 800228a:	d910      	bls.n	80022ae <is_touch_classic+0x3e>
			&& touch_GetX() < POS_X_FIRST + WIDTH
 800228c:	f004 fa9a 	bl	80067c4 <touch_GetX>
 8002290:	4603      	mov	r3, r0
 8002292:	2bb8      	cmp	r3, #184	; 0xb8
 8002294:	d80b      	bhi.n	80022ae <is_touch_classic+0x3e>
			&& touch_GetY() > POS_Y_FIRST
 8002296:	f004 faa1 	bl	80067dc <touch_GetY>
 800229a:	4603      	mov	r3, r0
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d906      	bls.n	80022ae <is_touch_classic+0x3e>
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 80022a0:	f004 fa9c 	bl	80067dc <touch_GetY>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b86      	cmp	r3, #134	; 0x86
 80022a8:	d801      	bhi.n	80022ae <is_touch_classic+0x3e>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <is_touch_classic+0x40>
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <is_touch_speed>:

int is_touch_speed(){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80022b8:	f004 fa72 	bl	80067a0 <touch_IsTouched>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <is_touch_speed+0x12>
 80022c2:	2300      	movs	r3, #0
 80022c4:	e016      	b.n	80022f4 <is_touch_speed+0x40>
	return (touch_GetX() > POS_X_SECOND
 80022c6:	f004 fa7d 	bl	80067c4 <touch_GetX>
 80022ca:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80022cc:	2b41      	cmp	r3, #65	; 0x41
 80022ce:	d910      	bls.n	80022f2 <is_touch_speed+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 80022d0:	f004 fa78 	bl	80067c4 <touch_GetX>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2bb8      	cmp	r3, #184	; 0xb8
 80022d8:	d80b      	bhi.n	80022f2 <is_touch_speed+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 80022da:	f004 fa7f 	bl	80067dc <touch_GetY>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b96      	cmp	r3, #150	; 0x96
 80022e2:	d906      	bls.n	80022f2 <is_touch_speed+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80022e4:	f004 fa7a 	bl	80067dc <touch_GetY>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2bb8      	cmp	r3, #184	; 0xb8
 80022ec:	d801      	bhi.n	80022f2 <is_touch_speed+0x3e>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <is_touch_speed+0x40>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <is_touch_time>:

int is_touch_time(){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80022fc:	f004 fa50 	bl	80067a0 <touch_IsTouched>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <is_touch_time+0x12>
 8002306:	2300      	movs	r3, #0
 8002308:	e016      	b.n	8002338 <is_touch_time+0x40>
	return (touch_GetX() > POS_X_THIRD
 800230a:	f004 fa5b 	bl	80067c4 <touch_GetX>
 800230e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002310:	2b41      	cmp	r3, #65	; 0x41
 8002312:	d910      	bls.n	8002336 <is_touch_time+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8002314:	f004 fa56 	bl	80067c4 <touch_GetX>
 8002318:	4603      	mov	r3, r0
 800231a:	2bb8      	cmp	r3, #184	; 0xb8
 800231c:	d80b      	bhi.n	8002336 <is_touch_time+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 800231e:	f004 fa5d 	bl	80067dc <touch_GetY>
 8002322:	4603      	mov	r3, r0
 8002324:	2bc8      	cmp	r3, #200	; 0xc8
 8002326:	d906      	bls.n	8002336 <is_touch_time+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002328:	f004 fa58 	bl	80067dc <touch_GetY>
 800232c:	4603      	mov	r3, r0
 800232e:	2bea      	cmp	r3, #234	; 0xea
 8002330:	d801      	bhi.n	8002336 <is_touch_time+0x3e>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <is_touch_time+0x40>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}

0800233c <is_touch_char>:

int is_touch_char(){
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002340:	f004 fa2e 	bl	80067a0 <touch_IsTouched>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <is_touch_char+0x12>
 800234a:	2300      	movs	r3, #0
 800234c:	e017      	b.n	800237e <is_touch_char+0x42>
	return (touch_GetX() > POS_X_CHAR
 800234e:	f004 fa39 	bl	80067c4 <touch_GetX>
 8002352:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_CHAR + CHAR_COL*CHAR_WIDTH
			&& touch_GetY() > POS_Y_CHAR
			&& touch_GetY() < POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT);
 8002354:	2b06      	cmp	r3, #6
 8002356:	d911      	bls.n	800237c <is_touch_char+0x40>
			&& touch_GetX() < POS_X_CHAR + CHAR_COL*CHAR_WIDTH
 8002358:	f004 fa34 	bl	80067c4 <touch_GetX>
 800235c:	4603      	mov	r3, r0
 800235e:	2be9      	cmp	r3, #233	; 0xe9
 8002360:	d80c      	bhi.n	800237c <is_touch_char+0x40>
			&& touch_GetY() > POS_Y_CHAR
 8002362:	f004 fa3b 	bl	80067dc <touch_GetY>
 8002366:	4603      	mov	r3, r0
 8002368:	2b7c      	cmp	r3, #124	; 0x7c
 800236a:	d907      	bls.n	800237c <is_touch_char+0x40>
			&& touch_GetY() < POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT);
 800236c:	f004 fa36 	bl	80067dc <touch_GetY>
 8002370:	4603      	mov	r3, r0
 8002372:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8002376:	d201      	bcs.n	800237c <is_touch_char+0x40>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <is_touch_char+0x42>
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 8002384:	b580      	push	{r7, lr}
 8002386:	b08e      	sub	sp, #56	; 0x38
 8002388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	4b89      	ldr	r3, [pc, #548]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a88      	ldr	r2, [pc, #544]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b86      	ldr	r3, [pc, #536]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	4b82      	ldr	r3, [pc, #520]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a81      	ldr	r2, [pc, #516]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b7f      	ldr	r3, [pc, #508]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a7a      	ldr	r2, [pc, #488]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023dc:	f043 0320 	orr.w	r3, r3, #32
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b78      	ldr	r3, [pc, #480]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	4b74      	ldr	r3, [pc, #464]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a73      	ldr	r2, [pc, #460]	; (80025c4 <MX_GPIO_Init+0x240>)
 80023f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b71      	ldr	r3, [pc, #452]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a6c      	ldr	r2, [pc, #432]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <MX_GPIO_Init+0x240>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <MX_GPIO_Init+0x240>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <MX_GPIO_Init+0x240>)
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <MX_GPIO_Init+0x240>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	2110      	movs	r1, #16
 800247e:	4852      	ldr	r0, [pc, #328]	; (80025c8 <MX_GPIO_Init+0x244>)
 8002480:	f005 feb2 	bl	80081e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800248a:	4850      	ldr	r0, [pc, #320]	; (80025cc <MX_GPIO_Init+0x248>)
 800248c:	f005 feac 	bl	80081e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002496:	484e      	ldr	r0, [pc, #312]	; (80025d0 <MX_GPIO_Init+0x24c>)
 8002498:	f005 fea6 	bl	80081e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80024a2:	484c      	ldr	r0, [pc, #304]	; (80025d4 <MX_GPIO_Init+0x250>)
 80024a4:	f005 fea0 	bl	80081e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ae:	484a      	ldr	r0, [pc, #296]	; (80025d8 <MX_GPIO_Init+0x254>)
 80024b0:	f005 fe9a 	bl	80081e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2108      	movs	r1, #8
 80024b8:	4848      	ldr	r0, [pc, #288]	; (80025dc <MX_GPIO_Init+0x258>)
 80024ba:	f005 fe95 	bl	80081e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 80024be:	2310      	movs	r3, #16
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	483c      	ldr	r0, [pc, #240]	; (80025c8 <MX_GPIO_Init+0x244>)
 80024d6:	f005 fcd3 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80024da:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4836      	ldr	r0, [pc, #216]	; (80025cc <MX_GPIO_Init+0x248>)
 80024f4:	f005 fcc4 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 80024f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fe:	2300      	movs	r3, #0
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	4830      	ldr	r0, [pc, #192]	; (80025d0 <MX_GPIO_Init+0x24c>)
 800250e:	f005 fcb7 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 8002512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002518:	2301      	movs	r3, #1
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	4829      	ldr	r0, [pc, #164]	; (80025d0 <MX_GPIO_Init+0x24c>)
 800252c:	f005 fca8 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002530:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	2301      	movs	r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002546:	4619      	mov	r1, r3
 8002548:	4822      	ldr	r0, [pc, #136]	; (80025d4 <MX_GPIO_Init+0x250>)
 800254a:	f005 fc99 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 800254e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002554:	2300      	movs	r3, #0
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002558:	2301      	movs	r3, #1
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	481a      	ldr	r0, [pc, #104]	; (80025cc <MX_GPIO_Init+0x248>)
 8002564:	f005 fc8c 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256e:	2301      	movs	r3, #1
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257e:	4619      	mov	r1, r3
 8002580:	4815      	ldr	r0, [pc, #84]	; (80025d8 <MX_GPIO_Init+0x254>)
 8002582:	f005 fc7d 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8002586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8002594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002598:	4619      	mov	r1, r3
 800259a:	480c      	ldr	r0, [pc, #48]	; (80025cc <MX_GPIO_Init+0x248>)
 800259c:	f005 fc70 	bl	8007e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80025a0:	2308      	movs	r3, #8
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a4:	2301      	movs	r3, #1
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	4619      	mov	r1, r3
 80025b6:	4809      	ldr	r0, [pc, #36]	; (80025dc <MX_GPIO_Init+0x258>)
 80025b8:	f005 fc62 	bl	8007e80 <HAL_GPIO_Init>

}
 80025bc:	bf00      	nop
 80025be:	3738      	adds	r7, #56	; 0x38
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40020800 	.word	0x40020800
 80025d0:	40021400 	.word	0x40021400
 80025d4:	40021800 	.word	0x40021800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020c00 	.word	0x40020c00

080025e0 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <MX_I2C1_Init+0x50>)
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <MX_I2C1_Init+0x54>)
 80025e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_I2C1_Init+0x50>)
 80025ec:	4a12      	ldr	r2, [pc, #72]	; (8002638 <MX_I2C1_Init+0x58>)
 80025ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <MX_I2C1_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_I2C1_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <MX_I2C1_Init+0x50>)
 80025fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <MX_I2C1_Init+0x50>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <MX_I2C1_Init+0x50>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <MX_I2C1_Init+0x50>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <MX_I2C1_Init+0x50>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <MX_I2C1_Init+0x50>)
 800261e:	f005 fdfd 	bl	800821c <HAL_I2C_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002628:	f002 f9b8 	bl	800499c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000031c 	.word	0x2000031c
 8002634:	40005400 	.word	0x40005400
 8002638:	000186a0 	.word	0x000186a0

0800263c <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <home_lcd+0xa0>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800264a:	22f0      	movs	r2, #240	; 0xf0
 800264c:	2100      	movs	r1, #0
 800264e:	2000      	movs	r0, #0
 8002650:	f001 fcd2 	bl	8003ff8 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002654:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	23b9      	movs	r3, #185	; 0xb9
 800265c:	22b9      	movs	r2, #185	; 0xb9
 800265e:	2196      	movs	r1, #150	; 0x96
 8002660:	2041      	movs	r0, #65	; 0x41
 8002662:	f001 f9bf 	bl	80039e4 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002666:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	23eb      	movs	r3, #235	; 0xeb
 800266e:	22b9      	movs	r2, #185	; 0xb9
 8002670:	21c8      	movs	r1, #200	; 0xc8
 8002672:	2041      	movs	r0, #65	; 0x41
 8002674:	f001 f9b6 	bl	80039e4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002678:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	f240 131d 	movw	r3, #285	; 0x11d
 8002682:	22b9      	movs	r2, #185	; 0xb9
 8002684:	21fa      	movs	r1, #250	; 0xfa
 8002686:	2041      	movs	r0, #65	; 0x41
 8002688:	f001 f9ac 	bl	80039e4 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 800268c:	2301      	movs	r3, #1
 800268e:	9302      	str	r3, [sp, #8]
 8002690:	2318      	movs	r3, #24
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	2300      	movs	r3, #0
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2300      	movs	r3, #0
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <home_lcd+0xa4>)
 800269c:	219b      	movs	r1, #155	; 0x9b
 800269e:	2054      	movs	r0, #84	; 0x54
 80026a0:	f001 ff7b 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 80026a4:	2301      	movs	r3, #1
 80026a6:	9302      	str	r3, [sp, #8]
 80026a8:	2318      	movs	r3, #24
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	2300      	movs	r3, #0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2300      	movs	r3, #0
 80026b2:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <home_lcd+0xa8>)
 80026b4:	21cd      	movs	r1, #205	; 0xcd
 80026b6:	204d      	movs	r0, #77	; 0x4d
 80026b8:	f001 ff6f 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 80026bc:	2301      	movs	r3, #1
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	2318      	movs	r3, #24
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2300      	movs	r3, #0
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	2300      	movs	r3, #0
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <home_lcd+0xac>)
 80026cc:	21ff      	movs	r1, #255	; 0xff
 80026ce:	2048      	movs	r0, #72	; 0x48
 80026d0:	f001 ff63 	bl	800459a <lcd_ShowStr>
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	08011d9c 	.word	0x08011d9c
 80026e0:	0800e824 	.word	0x0800e824
 80026e4:	0800e82c 	.word	0x0800e82c
 80026e8:	0800e838 	.word	0x0800e838

080026ec <mode_game_lcd>:

void mode_game_lcd(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <mode_game_lcd+0xd8>)
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026fa:	22f0      	movs	r2, #240	; 0xf0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2000      	movs	r0, #0
 8002700:	f001 fc7a 	bl	8003ff8 <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 78, gImage_mode);
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <mode_game_lcd+0xdc>)
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	234e      	movs	r3, #78	; 0x4e
 800270a:	22f0      	movs	r2, #240	; 0xf0
 800270c:	2100      	movs	r1, #0
 800270e:	2000      	movs	r0, #0
 8002710:	f001 fc72 	bl	8003ff8 <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 8002714:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2387      	movs	r3, #135	; 0x87
 800271c:	22b9      	movs	r2, #185	; 0xb9
 800271e:	2164      	movs	r1, #100	; 0x64
 8002720:	2041      	movs	r0, #65	; 0x41
 8002722:	f001 f95f 	bl	80039e4 <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002726:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	23b9      	movs	r3, #185	; 0xb9
 800272e:	22b9      	movs	r2, #185	; 0xb9
 8002730:	2196      	movs	r1, #150	; 0x96
 8002732:	2041      	movs	r0, #65	; 0x41
 8002734:	f001 f956 	bl	80039e4 <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002738:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	23eb      	movs	r3, #235	; 0xeb
 8002740:	22b9      	movs	r2, #185	; 0xb9
 8002742:	21c8      	movs	r1, #200	; 0xc8
 8002744:	2041      	movs	r0, #65	; 0x41
 8002746:	f001 f94d 	bl	80039e4 <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 800274a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f240 131d 	movw	r3, #285	; 0x11d
 8002754:	22b9      	movs	r2, #185	; 0xb9
 8002756:	21fa      	movs	r1, #250	; 0xfa
 8002758:	2041      	movs	r0, #65	; 0x41
 800275a:	f001 f943 	bl	80039e4 <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 800275e:	2301      	movs	r3, #1
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2318      	movs	r3, #24
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2300      	movs	r3, #0
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <mode_game_lcd+0xe0>)
 800276e:	2169      	movs	r1, #105	; 0x69
 8002770:	2054      	movs	r0, #84	; 0x54
 8002772:	f001 ff12 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 8002776:	2301      	movs	r3, #1
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2318      	movs	r3, #24
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	2300      	movs	r3, #0
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2300      	movs	r3, #0
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <mode_game_lcd+0xe4>)
 8002786:	219b      	movs	r1, #155	; 0x9b
 8002788:	2060      	movs	r0, #96	; 0x60
 800278a:	f001 ff06 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 800278e:	2301      	movs	r3, #1
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	2318      	movs	r3, #24
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	2300      	movs	r3, #0
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2300      	movs	r3, #0
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <mode_game_lcd+0xe8>)
 800279e:	21cd      	movs	r1, #205	; 0xcd
 80027a0:	2060      	movs	r0, #96	; 0x60
 80027a2:	f001 fefa 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 80027a6:	2301      	movs	r3, #1
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	2318      	movs	r3, #24
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2300      	movs	r3, #0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <mode_game_lcd+0xec>)
 80027b6:	21ff      	movs	r1, #255	; 0xff
 80027b8:	2064      	movs	r0, #100	; 0x64
 80027ba:	f001 feee 	bl	800459a <lcd_ShowStr>
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	0803759c 	.word	0x0803759c
 80027c8:	0805cd9c 	.word	0x0805cd9c
 80027cc:	0800e844 	.word	0x0800e844
 80027d0:	0800e84c 	.word	0x0800e84c
 80027d4:	0800e854 	.word	0x0800e854
 80027d8:	0800e85c 	.word	0x0800e85c

080027dc <highscore_lcd>:

void highscore_lcd(){
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 80027e2:	4b61      	ldr	r3, [pc, #388]	; (8002968 <highscore_lcd+0x18c>)
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027ea:	22f0      	movs	r2, #240	; 0xf0
 80027ec:	2100      	movs	r1, #0
 80027ee:	2000      	movs	r0, #0
 80027f0:	f001 fc02 	bl	8003ff8 <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 81, gImage_highscore);
 80027f4:	4b5d      	ldr	r3, [pc, #372]	; (800296c <highscore_lcd+0x190>)
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2351      	movs	r3, #81	; 0x51
 80027fa:	22f0      	movs	r2, #240	; 0xf0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2000      	movs	r0, #0
 8002800:	f001 fbfa 	bl	8003ff8 <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 8002804:	2301      	movs	r3, #1
 8002806:	9302      	str	r3, [sp, #8]
 8002808:	2310      	movs	r3, #16
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2300      	movs	r3, #0
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	4a57      	ldr	r2, [pc, #348]	; (8002970 <highscore_lcd+0x194>)
 8002814:	2150      	movs	r1, #80	; 0x50
 8002816:	200a      	movs	r0, #10
 8002818:	f001 febf 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 800281c:	2301      	movs	r3, #1
 800281e:	9302      	str	r3, [sp, #8]
 8002820:	2310      	movs	r3, #16
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2300      	movs	r3, #0
 800282a:	4a52      	ldr	r2, [pc, #328]	; (8002974 <highscore_lcd+0x198>)
 800282c:	2150      	movs	r1, #80	; 0x50
 800282e:	203c      	movs	r0, #60	; 0x3c
 8002830:	f001 feb3 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 8002834:	2301      	movs	r3, #1
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	2310      	movs	r3, #16
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2300      	movs	r3, #0
 8002842:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <highscore_lcd+0x19c>)
 8002844:	2150      	movs	r1, #80	; 0x50
 8002846:	20a0      	movs	r0, #160	; 0xa0
 8002848:	f001 fea7 	bl	800459a <lcd_ShowStr>
	char c[10] = "";
 800284c:	2300      	movs	r3, #0
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e051      	b.n	8002904 <highscore_lcd+0x128>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	3305      	adds	r3, #5
 8002864:	b29b      	uxth	r3, r3
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	b29c      	uxth	r4, r3
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	1d39      	adds	r1, r7, #4
 800286e:	220a      	movs	r2, #10
 8002870:	4618      	mov	r0, r3
 8002872:	f009 ff83 	bl	800c77c <itoa>
 8002876:	4602      	mov	r2, r0
 8002878:	2301      	movs	r3, #1
 800287a:	9302      	str	r3, [sp, #8]
 800287c:	2310      	movs	r3, #16
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	2300      	movs	r3, #0
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2300      	movs	r3, #0
 8002886:	4621      	mov	r1, r4
 8002888:	200a      	movs	r0, #10
 800288a:	f001 fe86 	bl	800459a <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	3305      	adds	r3, #5
 8002892:	b29b      	uxth	r3, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	b299      	uxth	r1, r3
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	1e5a      	subs	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4a35      	ldr	r2, [pc, #212]	; (800297c <highscore_lcd+0x1a0>)
 80028a6:	441a      	add	r2, r3
 80028a8:	2301      	movs	r3, #1
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	2310      	movs	r3, #16
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	2300      	movs	r3, #0
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2300      	movs	r3, #0
 80028b6:	203c      	movs	r0, #60	; 0x3c
 80028b8:	f001 fe6f 	bl	800459a <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	3305      	adds	r3, #5
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	b29c      	uxth	r4, r3
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	492c      	ldr	r1, [pc, #176]	; (800297c <highscore_lcd+0x1a0>)
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	440b      	add	r3, r1
 80028d6:	330c      	adds	r3, #12
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	220a      	movs	r2, #10
 80028e0:	4619      	mov	r1, r3
 80028e2:	f009 ff4b 	bl	800c77c <itoa>
 80028e6:	4602      	mov	r2, r0
 80028e8:	2301      	movs	r3, #1
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	2310      	movs	r3, #16
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	2300      	movs	r3, #0
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2300      	movs	r3, #0
 80028f6:	4621      	mov	r1, r4
 80028f8:	20a0      	movs	r0, #160	; 0xa0
 80028fa:	f001 fe4e 	bl	800459a <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	3301      	adds	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <highscore_lcd+0x1a4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	429a      	cmp	r2, r3
 800290c:	d9a8      	bls.n	8002860 <highscore_lcd+0x84>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 800290e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	f240 131d 	movw	r3, #285	; 0x11d
 8002918:	22b9      	movs	r2, #185	; 0xb9
 800291a:	21fa      	movs	r1, #250	; 0xfa
 800291c:	2041      	movs	r0, #65	; 0x41
 800291e:	f001 f861 	bl	80039e4 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002922:	2301      	movs	r3, #1
 8002924:	9302      	str	r3, [sp, #8]
 8002926:	2318      	movs	r3, #24
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2300      	movs	r3, #0
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	2300      	movs	r3, #0
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <highscore_lcd+0x1a8>)
 8002932:	21ff      	movs	r1, #255	; 0xff
 8002934:	2064      	movs	r0, #100	; 0x64
 8002936:	f001 fe30 	bl	800459a <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 800293a:	2300      	movs	r3, #0
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f240 131d 	movw	r3, #285	; 0x11d
 8002942:	22b9      	movs	r2, #185	; 0xb9
 8002944:	21fa      	movs	r1, #250	; 0xfa
 8002946:	2041      	movs	r0, #65	; 0x41
 8002948:	f001 f91d 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 800294c:	2300      	movs	r3, #0
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002954:	22b8      	movs	r2, #184	; 0xb8
 8002956:	21fb      	movs	r1, #251	; 0xfb
 8002958:	2042      	movs	r0, #66	; 0x42
 800295a:	f001 f914 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	bf00      	nop
 8002968:	0803759c 	.word	0x0803759c
 800296c:	08065fdc 	.word	0x08065fdc
 8002970:	0800e864 	.word	0x0800e864
 8002974:	0800e86c 	.word	0x0800e86c
 8002978:	0800e874 	.word	0x0800e874
 800297c:	20000290 	.word	0x20000290
 8002980:	20000144 	.word	0x20000144
 8002984:	0800e85c 	.word	0x0800e85c

08002988 <game_lcd>:

void game_lcd(){
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 800298e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002992:	f000 fff5 	bl	8003980 <lcd_Clear>
	lcd_Fill(0, 0, 239, POS_Y_MIN - 1, LGRAYBLUE);
 8002996:	f24a 6351 	movw	r3, #42577	; 0xa651
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2311      	movs	r3, #17
 800299e:	22ef      	movs	r2, #239	; 0xef
 80029a0:	2100      	movs	r1, #0
 80029a2:	2000      	movs	r0, #0
 80029a4:	f001 f81e 	bl	80039e4 <lcd_Fill>
	lcd_Fill(0, POS_Y_MAX + 1, 239, 319, LGRAYBLUE);
 80029a8:	f24a 6351 	movw	r3, #42577	; 0xa651
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f240 133f 	movw	r3, #319	; 0x13f
 80029b2:	22ef      	movs	r2, #239	; 0xef
 80029b4:	21c8      	movs	r1, #200	; 0xc8
 80029b6:	2000      	movs	r0, #0
 80029b8:	f001 f814 	bl	80039e4 <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 80029bc:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	f240 133b 	movw	r3, #315	; 0x13b
 80029c6:	224b      	movs	r2, #75	; 0x4b
 80029c8:	f240 1109 	movw	r1, #265	; 0x109
 80029cc:	2005      	movs	r0, #5
 80029ce:	f001 f809 	bl	80039e4 <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 80029d2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	f240 133b 	movw	r3, #315	; 0x13b
 80029dc:	22eb      	movs	r2, #235	; 0xeb
 80029de:	f240 1109 	movw	r1, #265	; 0x109
 80029e2:	20a5      	movs	r0, #165	; 0xa5
 80029e4:	f000 fffe 	bl	80039e4 <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 80029e8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	23ff      	movs	r3, #255	; 0xff
 80029f0:	229b      	movs	r2, #155	; 0x9b
 80029f2:	21cd      	movs	r1, #205	; 0xcd
 80029f4:	2055      	movs	r0, #85	; 0x55
 80029f6:	f000 fff5 	bl	80039e4 <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 80029fa:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	f240 133b 	movw	r3, #315	; 0x13b
 8002a04:	229b      	movs	r2, #155	; 0x9b
 8002a06:	f240 1109 	movw	r1, #265	; 0x109
 8002a0a:	2055      	movs	r0, #85	; 0x55
 8002a0c:	f000 ffea 	bl	80039e4 <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 8002a10:	2301      	movs	r3, #1
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2319      	movs	r3, #25
 8002a16:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a1a:	21e6      	movs	r1, #230	; 0xe6
 8002a1c:	20c8      	movs	r0, #200	; 0xc8
 8002a1e:	f001 fd50 	bl	80044c2 <lcd_DrawCircle>
	lcd_ShowStr(POS_X_TEMP, POS_Y_TEMP, "TEMP:", BLACK, BLACK, 12, 1);
 8002a22:	2301      	movs	r3, #1
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	230c      	movs	r3, #12
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <game_lcd+0x148>)
 8002a32:	2103      	movs	r1, #3
 8002a34:	200a      	movs	r0, #10
 8002a36:	f001 fdb0 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_TEMP + 65, POS_Y_TEMP, "oC", BLACK, BLACK, 12, 1);
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	9302      	str	r3, [sp, #8]
 8002a3e:	230c      	movs	r3, #12
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2300      	movs	r3, #0
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <game_lcd+0x14c>)
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	204b      	movs	r0, #75	; 0x4b
 8002a4e:	f001 fda4 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM, POS_Y_TEMP, "HUM:", BLACK, BLACK, 12, 1);
 8002a52:	2301      	movs	r3, #1
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	230c      	movs	r3, #12
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <game_lcd+0x150>)
 8002a62:	2103      	movs	r1, #3
 8002a64:	206e      	movs	r0, #110	; 0x6e
 8002a66:	f001 fd98 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM + 40, POS_Y_TEMP, "%", BLACK, BLACK, 12, 1);
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	9302      	str	r3, [sp, #8]
 8002a6e:	230c      	movs	r3, #12
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	2300      	movs	r3, #0
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2300      	movs	r3, #0
 8002a78:	4a18      	ldr	r2, [pc, #96]	; (8002adc <game_lcd+0x154>)
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	2096      	movs	r0, #150	; 0x96
 8002a7e:	f001 fd8c 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_LIGHT, POS_Y_TEMP, "LIGHT:", BLACK, BLACK, 12, 1);
 8002a82:	2301      	movs	r3, #1
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	230c      	movs	r3, #12
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <game_lcd+0x158>)
 8002a92:	2103      	movs	r1, #3
 8002a94:	20aa      	movs	r0, #170	; 0xaa
 8002a96:	f001 fd80 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <game_lcd+0x15c>)
 8002aaa:	21de      	movs	r1, #222	; 0xde
 8002aac:	20b6      	movs	r0, #182	; 0xb6
 8002aae:	f001 fd74 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <game_lcd+0x160>)
 8002ac2:	21cd      	movs	r1, #205	; 0xcd
 8002ac4:	2005      	movs	r0, #5
 8002ac6:	f001 fd68 	bl	800459a <lcd_ShowStr>
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	0800e87c 	.word	0x0800e87c
 8002ad4:	0800e884 	.word	0x0800e884
 8002ad8:	0800e888 	.word	0x0800e888
 8002adc:	0800e890 	.word	0x0800e890
 8002ae0:	0800e894 	.word	0x0800e894
 8002ae4:	0800e89c 	.word	0x0800e89c
 8002ae8:	0800e8a4 	.word	0x0800e8a4

08002aec <environment_lcd>:

void environment_lcd(){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af04      	add	r7, sp, #16
	lcd_ShowFloatNum(POS_X_TEMP + 30, POS_Y_TEMP, current_temp, 4, BLACK, LGRAYBLUE, 12);
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <environment_lcd+0x64>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	230c      	movs	r3, #12
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2300      	movs	r3, #0
 8002b04:	2204      	movs	r2, #4
 8002b06:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0a:	2103      	movs	r1, #3
 8002b0c:	2028      	movs	r0, #40	; 0x28
 8002b0e:	f001 f9eb 	bl	8003ee8 <lcd_ShowFloatNum>
	lcd_ShowIntNum(POS_X_HUM + 25, POS_Y_TEMP, current_hum, 2, BLACK, LGRAYBLUE, 12);
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <environment_lcd+0x68>)
 8002b14:	881a      	ldrh	r2, [r3, #0]
 8002b16:	230c      	movs	r3, #12
 8002b18:	9302      	str	r3, [sp, #8]
 8002b1a:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	2300      	movs	r3, #0
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2302      	movs	r3, #2
 8002b26:	2103      	movs	r1, #3
 8002b28:	2087      	movs	r0, #135	; 0x87
 8002b2a:	f001 f95f 	bl	8003dec <lcd_ShowIntNum>
	lcd_ShowIntNum(POS_X_LIGHT + 37, POS_Y_TEMP, current_light, 4, BLACK, LGRAYBLUE, 12);
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <environment_lcd+0x6c>)
 8002b30:	881a      	ldrh	r2, [r3, #0]
 8002b32:	230c      	movs	r3, #12
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2304      	movs	r3, #4
 8002b42:	2103      	movs	r1, #3
 8002b44:	20cf      	movs	r0, #207	; 0xcf
 8002b46:	f001 f951 	bl	8003dec <lcd_ShowIntNum>
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000004 	.word	0x20000004
 8002b54:	20000008 	.word	0x20000008
 8002b58:	2000000a 	.word	0x2000000a

08002b5c <score_lcd>:

void score_lcd(){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <score_lcd+0x2c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	2310      	movs	r3, #16
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2305      	movs	r3, #5
 8002b78:	21dd      	movs	r1, #221	; 0xdd
 8002b7a:	2005      	movs	r0, #5
 8002b7c:	f001 f936 	bl	8003dec <lcd_ShowIntNum>
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000

08002b8c <pause_lcd>:

void pause_lcd(){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <pause_lcd+0x84>)
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b9a:	22f0      	movs	r2, #240	; 0xf0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f001 fa2a 	bl	8003ff8 <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 84, gImage_pause);
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <pause_lcd+0x88>)
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2354      	movs	r3, #84	; 0x54
 8002baa:	22f0      	movs	r2, #240	; 0xf0
 8002bac:	2100      	movs	r1, #0
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f001 fa22 	bl	8003ff8 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002bb4:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	23b9      	movs	r3, #185	; 0xb9
 8002bbc:	22b9      	movs	r2, #185	; 0xb9
 8002bbe:	2196      	movs	r1, #150	; 0x96
 8002bc0:	2041      	movs	r0, #65	; 0x41
 8002bc2:	f000 ff0f 	bl	80039e4 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002bc6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	23eb      	movs	r3, #235	; 0xeb
 8002bce:	22b9      	movs	r2, #185	; 0xb9
 8002bd0:	21c8      	movs	r1, #200	; 0xc8
 8002bd2:	2041      	movs	r0, #65	; 0x41
 8002bd4:	f000 ff06 	bl	80039e4 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 8002bd8:	2301      	movs	r3, #1
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	2318      	movs	r3, #24
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <pause_lcd+0x8c>)
 8002be8:	219b      	movs	r1, #155	; 0x9b
 8002bea:	205a      	movs	r0, #90	; 0x5a
 8002bec:	f001 fcd5 	bl	800459a <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	9302      	str	r3, [sp, #8]
 8002bf4:	2318      	movs	r3, #24
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <pause_lcd+0x90>)
 8002c00:	21cd      	movs	r1, #205	; 0xcd
 8002c02:	2064      	movs	r0, #100	; 0x64
 8002c04:	f001 fcc9 	bl	800459a <lcd_ShowStr>
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	0803759c 	.word	0x0803759c
 8002c14:	0806f7bc 	.word	0x0806f7bc
 8002c18:	0800e8ac 	.word	0x0800e8ac
 8002c1c:	0800e85c 	.word	0x0800e85c

08002c20 <game_over_lcd>:

void game_over_lcd(){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 8002c26:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <game_over_lcd+0x140>)
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c2e:	22f0      	movs	r2, #240	; 0xf0
 8002c30:	2100      	movs	r1, #0
 8002c32:	2000      	movs	r0, #0
 8002c34:	f001 f9e0 	bl	8003ff8 <lcd_ShowPicture>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002c38:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	f240 131d 	movw	r3, #285	; 0x11d
 8002c42:	22b9      	movs	r2, #185	; 0xb9
 8002c44:	21fa      	movs	r1, #250	; 0xfa
 8002c46:	2041      	movs	r0, #65	; 0x41
 8002c48:	f000 fecc 	bl	80039e4 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	f240 131d 	movw	r3, #285	; 0x11d
 8002c54:	22b9      	movs	r2, #185	; 0xb9
 8002c56:	21fa      	movs	r1, #250	; 0xfa
 8002c58:	2041      	movs	r0, #65	; 0x41
 8002c5a:	f000 ff94 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002c66:	22b8      	movs	r2, #184	; 0xb8
 8002c68:	21fb      	movs	r1, #251	; 0xfb
 8002c6a:	2042      	movs	r0, #66	; 0x42
 8002c6c:	f000 ff8b 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002c70:	2301      	movs	r3, #1
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	2318      	movs	r3, #24
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <game_over_lcd+0x144>)
 8002c80:	21ff      	movs	r1, #255	; 0xff
 8002c82:	2064      	movs	r0, #100	; 0x64
 8002c84:	f001 fc89 	bl	800459a <lcd_ShowStr>
	char c[10] = "";
 8002c88:	2300      	movs	r3, #0
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	f107 0308 	add.w	r3, r7, #8
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	809a      	strh	r2, [r3, #4]
	lcd_StrCenter(0, POS_Y_INFO, "USER", BLACK, BROWN, 16, 1);
 8002c96:	2301      	movs	r3, #1
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	4a30      	ldr	r2, [pc, #192]	; (8002d68 <game_over_lcd+0x148>)
 8002ca8:	2164      	movs	r1, #100	; 0x64
 8002caa:	2000      	movs	r0, #0
 8002cac:	f001 fcc4 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + SPACE_INFO, name, DARKBLUE, BROWN, 16, 1);
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9302      	str	r3, [sp, #8]
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002cc2:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <game_over_lcd+0x14c>)
 8002cc4:	2178      	movs	r1, #120	; 0x78
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f001 fcb6 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 2 * SPACE_INFO, "SCORE", BLACK, BROWN, 16, 1);
 8002ccc:	2301      	movs	r3, #1
 8002cce:	9302      	str	r3, [sp, #8]
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <game_over_lcd+0x150>)
 8002cde:	218c      	movs	r1, #140	; 0x8c
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f001 fca9 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 3 * SPACE_INFO, itoa(current_score, c, 10), DARKBLUE, BROWN, 16, 1);
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <game_over_lcd+0x154>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	220a      	movs	r2, #10
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f009 fd43 	bl	800c77c <itoa>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002d0a:	21a0      	movs	r1, #160	; 0xa0
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f001 fc93 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 4 * SPACE_INFO, "TIME PLAYED", BLACK, BROWN, 16, 1);
 8002d12:	2301      	movs	r3, #1
 8002d14:	9302      	str	r3, [sp, #8]
 8002d16:	2310      	movs	r3, #16
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <game_over_lcd+0x158>)
 8002d24:	21b4      	movs	r1, #180	; 0xb4
 8002d26:	2000      	movs	r0, #0
 8002d28:	f001 fc86 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 5 * SPACE_INFO, itoa(current_time, c, 10), DARKBLUE, BROWN, 16, 1);
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <game_over_lcd+0x15c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	1d3b      	adds	r3, r7, #4
 8002d34:	220a      	movs	r2, #10
 8002d36:	4619      	mov	r1, r3
 8002d38:	f009 fd20 	bl	800c77c <itoa>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	2301      	movs	r3, #1
 8002d40:	9302      	str	r3, [sp, #8]
 8002d42:	2310      	movs	r3, #16
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002d50:	21c8      	movs	r1, #200	; 0xc8
 8002d52:	2000      	movs	r0, #0
 8002d54:	f001 fc70 	bl	8004638 <lcd_StrCenter>
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	0807953c 	.word	0x0807953c
 8002d64:	0800e85c 	.word	0x0800e85c
 8002d68:	0800e8b4 	.word	0x0800e8b4
 8002d6c:	20000148 	.word	0x20000148
 8002d70:	0800e874 	.word	0x0800e874
 8002d74:	20000000 	.word	0x20000000
 8002d78:	0800e8bc 	.word	0x0800e8bc
 8002d7c:	20000154 	.word	0x20000154

08002d80 <youwin_lcd>:

void youwin_lcd(){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 8002d86:	4b4e      	ldr	r3, [pc, #312]	; (8002ec0 <youwin_lcd+0x140>)
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d8e:	22f0      	movs	r2, #240	; 0xf0
 8002d90:	2100      	movs	r1, #0
 8002d92:	2000      	movs	r0, #0
 8002d94:	f001 f930 	bl	8003ff8 <lcd_ShowPicture>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002d98:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f240 131d 	movw	r3, #285	; 0x11d
 8002da2:	22b9      	movs	r2, #185	; 0xb9
 8002da4:	21fa      	movs	r1, #250	; 0xfa
 8002da6:	2041      	movs	r0, #65	; 0x41
 8002da8:	f000 fe1c 	bl	80039e4 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002dac:	2300      	movs	r3, #0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f240 131d 	movw	r3, #285	; 0x11d
 8002db4:	22b9      	movs	r2, #185	; 0xb9
 8002db6:	21fa      	movs	r1, #250	; 0xfa
 8002db8:	2041      	movs	r0, #65	; 0x41
 8002dba:	f000 fee4 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002dc6:	22b8      	movs	r2, #184	; 0xb8
 8002dc8:	21fb      	movs	r1, #251	; 0xfb
 8002dca:	2042      	movs	r0, #66	; 0x42
 8002dcc:	f000 fedb 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	9302      	str	r3, [sp, #8]
 8002dd4:	2318      	movs	r3, #24
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4a39      	ldr	r2, [pc, #228]	; (8002ec4 <youwin_lcd+0x144>)
 8002de0:	21ff      	movs	r1, #255	; 0xff
 8002de2:	2064      	movs	r0, #100	; 0x64
 8002de4:	f001 fbd9 	bl	800459a <lcd_ShowStr>
	char c[10] = "";
 8002de8:	2300      	movs	r3, #0
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	f107 0308 	add.w	r3, r7, #8
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	809a      	strh	r2, [r3, #4]
	lcd_StrCenter(0, POS_Y_INFO, "USER", BLACK, BROWN, 16, 1);
 8002df6:	2301      	movs	r3, #1
 8002df8:	9302      	str	r3, [sp, #8]
 8002dfa:	2310      	movs	r3, #16
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2300      	movs	r3, #0
 8002e06:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <youwin_lcd+0x148>)
 8002e08:	2164      	movs	r1, #100	; 0x64
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f001 fc14 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + SPACE_INFO, name, DARKBLUE, BROWN, 16, 1);
 8002e10:	2301      	movs	r3, #1
 8002e12:	9302      	str	r3, [sp, #8]
 8002e14:	2310      	movs	r3, #16
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <youwin_lcd+0x14c>)
 8002e24:	2178      	movs	r1, #120	; 0x78
 8002e26:	2000      	movs	r0, #0
 8002e28:	f001 fc06 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 2 * SPACE_INFO, "SCORE", BLACK, BROWN, 16, 1);
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	9302      	str	r3, [sp, #8]
 8002e30:	2310      	movs	r3, #16
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <youwin_lcd+0x150>)
 8002e3e:	218c      	movs	r1, #140	; 0x8c
 8002e40:	2000      	movs	r0, #0
 8002e42:	f001 fbf9 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 3 * SPACE_INFO, itoa(current_score, c, 10), DARKBLUE, BROWN, 16, 1);
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <youwin_lcd+0x154>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	220a      	movs	r2, #10
 8002e50:	4619      	mov	r1, r3
 8002e52:	f009 fc93 	bl	800c77c <itoa>
 8002e56:	4602      	mov	r2, r0
 8002e58:	2301      	movs	r3, #1
 8002e5a:	9302      	str	r3, [sp, #8]
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002e6a:	21a0      	movs	r1, #160	; 0xa0
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f001 fbe3 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 4 * SPACE_INFO, "TIME PLAYED", BLACK, BROWN, 16, 1);
 8002e72:	2301      	movs	r3, #1
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	2310      	movs	r3, #16
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2300      	movs	r3, #0
 8002e82:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <youwin_lcd+0x158>)
 8002e84:	21b4      	movs	r1, #180	; 0xb4
 8002e86:	2000      	movs	r0, #0
 8002e88:	f001 fbd6 	bl	8004638 <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 5 * SPACE_INFO, itoa(current_time, c, 10), DARKBLUE, BROWN, 16, 1);
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <youwin_lcd+0x15c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	220a      	movs	r2, #10
 8002e96:	4619      	mov	r1, r3
 8002e98:	f009 fc70 	bl	800c77c <itoa>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	9302      	str	r3, [sp, #8]
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002eb0:	21c8      	movs	r1, #200	; 0xc8
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f001 fbc0 	bl	8004638 <lcd_StrCenter>
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	0809ed3c 	.word	0x0809ed3c
 8002ec4:	0800e85c 	.word	0x0800e85c
 8002ec8:	0800e8b4 	.word	0x0800e8b4
 8002ecc:	20000148 	.word	0x20000148
 8002ed0:	0800e874 	.word	0x0800e874
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	0800e8bc 	.word	0x0800e8bc
 8002edc:	20000154 	.word	0x20000154

08002ee0 <uppercase_lcd>:

void uppercase_lcd(){
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	71fb      	strb	r3, [r7, #7]
 8002eea:	e036      	b.n	8002f5a <uppercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002eec:	2300      	movs	r3, #0
 8002eee:	71bb      	strb	r3, [r7, #6]
 8002ef0:	e02d      	b.n	8002f4e <uppercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_upper[i][j], BLACK, BROWN, 16, 0);
 8002ef2:	79bb      	ldrb	r3, [r7, #6]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	00d2      	lsls	r2, r2, #3
 8002efa:	441a      	add	r2, r3
 8002efc:	0052      	lsls	r2, r2, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3316      	adds	r3, #22
 8002f06:	b298      	uxth	r0, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	00d2      	lsls	r2, r2, #3
 8002f10:	441a      	add	r2, r3
 8002f12:	0052      	lsls	r2, r2, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3386      	adds	r3, #134	; 0x86
 8002f1c:	b29c      	uxth	r4, r3
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	79b9      	ldrb	r1, [r7, #6]
 8002f22:	4d12      	ldr	r5, [pc, #72]	; (8002f6c <uppercase_lcd+0x8c>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	442b      	add	r3, r5
 8002f2e:	440b      	add	r3, r1
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9302      	str	r3, [sp, #8]
 8002f36:	2310      	movs	r3, #16
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	4621      	mov	r1, r4
 8002f44:	f000 fe56 	bl	8003bf4 <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	71bb      	strb	r3, [r7, #6]
 8002f4e:	79bb      	ldrb	r3, [r7, #6]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d9ce      	bls.n	8002ef2 <uppercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	3301      	adds	r3, #1
 8002f58:	71fb      	strb	r3, [r7, #7]
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d9c5      	bls.n	8002eec <uppercase_lcd+0xc>
		}
	}
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2000000c 	.word	0x2000000c

08002f70 <lowercase_lcd>:

void lowercase_lcd(){
 8002f70:	b5b0      	push	{r4, r5, r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002f76:	2300      	movs	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]
 8002f7a:	e036      	b.n	8002fea <lowercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	71bb      	strb	r3, [r7, #6]
 8002f80:	e02d      	b.n	8002fde <lowercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_lower[i][j], BLACK, BROWN, 16, 0);
 8002f82:	79bb      	ldrb	r3, [r7, #6]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	00d2      	lsls	r2, r2, #3
 8002f8a:	441a      	add	r2, r3
 8002f8c:	0052      	lsls	r2, r2, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3316      	adds	r3, #22
 8002f96:	b298      	uxth	r0, r3
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	00d2      	lsls	r2, r2, #3
 8002fa0:	441a      	add	r2, r3
 8002fa2:	0052      	lsls	r2, r2, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3386      	adds	r3, #134	; 0x86
 8002fac:	b29c      	uxth	r4, r3
 8002fae:	79fa      	ldrb	r2, [r7, #7]
 8002fb0:	79b9      	ldrb	r1, [r7, #6]
 8002fb2:	4d12      	ldr	r5, [pc, #72]	; (8002ffc <lowercase_lcd+0x8c>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	442b      	add	r3, r5
 8002fbe:	440b      	add	r3, r1
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9302      	str	r3, [sp, #8]
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	f000 fe0e 	bl	8003bf4 <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002fd8:	79bb      	ldrb	r3, [r7, #6]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	71bb      	strb	r3, [r7, #6]
 8002fde:	79bb      	ldrb	r3, [r7, #6]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d9ce      	bls.n	8002f82 <lowercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d9c5      	bls.n	8002f7c <lowercase_lcd+0xc>
		}
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000002c 	.word	0x2000002c

08003000 <selectbox_lcd>:

void selectbox_lcd(){
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b083      	sub	sp, #12
 8003004:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 8003006:	4b3c      	ldr	r3, [pc, #240]	; (80030f8 <selectbox_lcd+0xf8>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	00d2      	lsls	r2, r2, #3
 8003010:	441a      	add	r2, r3
 8003012:	0052      	lsls	r2, r2, #1
 8003014:	4413      	add	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	b29b      	uxth	r3, r3
 800301a:	3306      	adds	r3, #6
 800301c:	b298      	uxth	r0, r3
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <selectbox_lcd+0xfc>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	00d2      	lsls	r2, r2, #3
 8003028:	441a      	add	r2, r3
 800302a:	0052      	lsls	r2, r2, #1
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	b29b      	uxth	r3, r3
 8003032:	337c      	adds	r3, #124	; 0x7c
 8003034:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_c_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r_old + 1) * CHAR_HEIGHT, GRAY);
 8003036:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <selectbox_lcd+0xf8>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	00d2      	lsls	r2, r2, #3
 8003042:	441a      	add	r2, r3
 8003044:	0052      	lsls	r2, r2, #1
 8003046:	4413      	add	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	b29b      	uxth	r3, r3
 800304c:	3306      	adds	r3, #6
 800304e:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_c_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r_old + 1) * CHAR_HEIGHT, GRAY);
 8003050:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <selectbox_lcd+0xfc>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 8003056:	b29b      	uxth	r3, r3
 8003058:	461c      	mov	r4, r3
 800305a:	00e4      	lsls	r4, r4, #3
 800305c:	441c      	add	r4, r3
 800305e:	0064      	lsls	r4, r4, #1
 8003060:	4423      	add	r3, r4
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	337c      	adds	r3, #124	; 0x7c
 8003068:	b29b      	uxth	r3, r3
 800306a:	f248 4430 	movw	r4, #33840	; 0x8430
 800306e:	9400      	str	r4, [sp, #0]
 8003070:	f000 fd89 	bl	8003b86 <lcd_DrawRectangle>
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 8003074:	4b22      	ldr	r3, [pc, #136]	; (8003100 <selectbox_lcd+0x100>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	00d2      	lsls	r2, r2, #3
 800307e:	441a      	add	r2, r3
 8003080:	0052      	lsls	r2, r2, #1
 8003082:	4413      	add	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	b29b      	uxth	r3, r3
 8003088:	3306      	adds	r3, #6
 800308a:	b298      	uxth	r0, r3
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <selectbox_lcd+0x104>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	00d2      	lsls	r2, r2, #3
 8003096:	441a      	add	r2, r3
 8003098:	0052      	lsls	r2, r2, #1
 800309a:	4413      	add	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	b29b      	uxth	r3, r3
 80030a0:	337c      	adds	r3, #124	; 0x7c
 80030a2:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_c + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r + 1) * CHAR_HEIGHT, BLACK);
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <selectbox_lcd+0x100>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	00d2      	lsls	r2, r2, #3
 80030b0:	441a      	add	r2, r3
 80030b2:	0052      	lsls	r2, r2, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3306      	adds	r3, #6
 80030bc:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_c + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r + 1) * CHAR_HEIGHT, BLACK);
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <selectbox_lcd+0x104>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	461c      	mov	r4, r3
 80030c8:	00e4      	lsls	r4, r4, #3
 80030ca:	441c      	add	r4, r3
 80030cc:	0064      	lsls	r4, r4, #1
 80030ce:	4423      	add	r3, r4
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	337c      	adds	r3, #124	; 0x7c
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2400      	movs	r4, #0
 80030da:	9400      	str	r4, [sp, #0]
 80030dc:	f000 fd53 	bl	8003b86 <lcd_DrawRectangle>
	index_r_old = index_r;
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <selectbox_lcd+0x104>)
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <selectbox_lcd+0xfc>)
 80030e6:	701a      	strb	r2, [r3, #0]
	index_c_old = index_c;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <selectbox_lcd+0x100>)
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	4b02      	ldr	r3, [pc, #8]	; (80030f8 <selectbox_lcd+0xf8>)
 80030ee:	701a      	strb	r2, [r3, #0]
}
 80030f0:	bf00      	nop
 80030f2:	3704      	adds	r7, #4
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}
 80030f8:	2000015e 	.word	0x2000015e
 80030fc:	2000015d 	.word	0x2000015d
 8003100:	2000015c 	.word	0x2000015c
 8003104:	2000015b 	.word	0x2000015b

08003108 <displayName_lcd>:

void displayName_lcd(){
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < name_length; i++){
 800310e:	2300      	movs	r3, #0
 8003110:	71fb      	strb	r3, [r7, #7]
 8003112:	e018      	b.n	8003146 <displayName_lcd+0x3e>
		lcd_ShowChar(POS_X_DISP + i * SPACE_DISP, POS_Y_DISP, name[i], BLACK, BROWN, 24, 0);
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	b29b      	uxth	r3, r3
 8003120:	332f      	adds	r3, #47	; 0x2f
 8003122:	b298      	uxth	r0, r3
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <displayName_lcd+0x90>)
 8003128:	5cd2      	ldrb	r2, [r2, r3]
 800312a:	2300      	movs	r3, #0
 800312c:	9302      	str	r3, [sp, #8]
 800312e:	2318      	movs	r3, #24
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2300      	movs	r3, #0
 800313a:	2150      	movs	r1, #80	; 0x50
 800313c:	f000 fd5a 	bl	8003bf4 <lcd_ShowChar>
	for(uint8_t i = 0; i < name_length; i++){
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	3301      	adds	r3, #1
 8003144:	71fb      	strb	r3, [r7, #7]
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <displayName_lcd+0x94>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	79fa      	ldrb	r2, [r7, #7]
 800314c:	429a      	cmp	r2, r3
 800314e:	d3e1      	bcc.n	8003114 <displayName_lcd+0xc>
	}
	for(uint8_t i = name_length; i < 10; i++){
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <displayName_lcd+0x94>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	71bb      	strb	r3, [r7, #6]
 8003156:	e016      	b.n	8003186 <displayName_lcd+0x7e>
		lcd_ShowChar(POS_X_DISP + i * SPACE_DISP, POS_Y_DISP, '_', BLACK, BROWN, 24, 0);
 8003158:	79bb      	ldrb	r3, [r7, #6]
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	b29b      	uxth	r3, r3
 8003164:	332f      	adds	r3, #47	; 0x2f
 8003166:	b298      	uxth	r0, r3
 8003168:	2300      	movs	r3, #0
 800316a:	9302      	str	r3, [sp, #8]
 800316c:	2318      	movs	r3, #24
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2300      	movs	r3, #0
 8003178:	225f      	movs	r2, #95	; 0x5f
 800317a:	2150      	movs	r1, #80	; 0x50
 800317c:	f000 fd3a 	bl	8003bf4 <lcd_ShowChar>
	for(uint8_t i = name_length; i < 10; i++){
 8003180:	79bb      	ldrb	r3, [r7, #6]
 8003182:	3301      	adds	r3, #1
 8003184:	71bb      	strb	r3, [r7, #6]
 8003186:	79bb      	ldrb	r3, [r7, #6]
 8003188:	2b09      	cmp	r3, #9
 800318a:	d9e5      	bls.n	8003158 <displayName_lcd+0x50>
	}
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000148 	.word	0x20000148
 800319c:	20000153 	.word	0x20000153

080031a0 <entername_lcd>:

void entername_lcd(){
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af02      	add	r7, sp, #8
	lcd_ShowPicture(0, 0, 240, 320, gImage_select);
 80031a6:	4b35      	ldr	r3, [pc, #212]	; (800327c <entername_lcd+0xdc>)
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80031ae:	22f0      	movs	r2, #240	; 0xf0
 80031b0:	2100      	movs	r1, #0
 80031b2:	2000      	movs	r0, #0
 80031b4:	f000 ff20 	bl	8003ff8 <lcd_ShowPicture>
	lcd_Fill(POS_X_CHAR, POS_Y_CHAR,
 80031b8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	f44f 739d 	mov.w	r3, #314	; 0x13a
 80031c2:	22ea      	movs	r2, #234	; 0xea
 80031c4:	217c      	movs	r1, #124	; 0x7c
 80031c6:	2006      	movs	r0, #6
 80031c8:	f000 fc0c 	bl	80039e4 <lcd_Fill>
			POS_X_CHAR + CHAR_COL*CHAR_WIDTH, POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT, BROWN);
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 80031cc:	2300      	movs	r3, #0
 80031ce:	71fb      	strb	r3, [r7, #7]
 80031d0:	e03e      	b.n	8003250 <entername_lcd+0xb0>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 80031d2:	2300      	movs	r3, #0
 80031d4:	71bb      	strb	r3, [r7, #6]
 80031d6:	e035      	b.n	8003244 <entername_lcd+0xa4>
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 80031d8:	79bb      	ldrb	r3, [r7, #6]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	00d2      	lsls	r2, r2, #3
 80031e0:	441a      	add	r2, r3
 80031e2:	0052      	lsls	r2, r2, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3306      	adds	r3, #6
 80031ec:	b298      	uxth	r0, r3
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	00d2      	lsls	r2, r2, #3
 80031f6:	441a      	add	r2, r3
 80031f8:	0052      	lsls	r2, r2, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	337c      	adds	r3, #124	; 0x7c
 8003202:	b299      	uxth	r1, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 8003204:	79bb      	ldrb	r3, [r7, #6]
 8003206:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8003208:	b29b      	uxth	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	00d2      	lsls	r2, r2, #3
 800320e:	441a      	add	r2, r3
 8003210:	0052      	lsls	r2, r2, #1
 8003212:	4413      	add	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	3306      	adds	r3, #6
 800321a:	b29a      	uxth	r2, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8003220:	b29b      	uxth	r3, r3
 8003222:	461c      	mov	r4, r3
 8003224:	00e4      	lsls	r4, r4, #3
 8003226:	441c      	add	r4, r3
 8003228:	0064      	lsls	r4, r4, #1
 800322a:	4423      	add	r3, r4
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	b29b      	uxth	r3, r3
 8003230:	337c      	adds	r3, #124	; 0x7c
 8003232:	b29b      	uxth	r3, r3
 8003234:	f248 4430 	movw	r4, #33840	; 0x8430
 8003238:	9400      	str	r4, [sp, #0]
 800323a:	f000 fca4 	bl	8003b86 <lcd_DrawRectangle>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 800323e:	79bb      	ldrb	r3, [r7, #6]
 8003240:	3301      	adds	r3, #1
 8003242:	71bb      	strb	r3, [r7, #6]
 8003244:	79bb      	ldrb	r3, [r7, #6]
 8003246:	2b05      	cmp	r3, #5
 8003248:	d9c6      	bls.n	80031d8 <entername_lcd+0x38>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	3301      	adds	r3, #1
 800324e:	71fb      	strb	r3, [r7, #7]
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	2b04      	cmp	r3, #4
 8003254:	d9bd      	bls.n	80031d2 <entername_lcd+0x32>
		}
	}
	index_r = 0;
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <entername_lcd+0xe0>)
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
	index_c = 0;
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <entername_lcd+0xe4>)
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]
	flag_uppercase = 0;
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <entername_lcd+0xe8>)
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
	lowercase_lcd();
 8003268:	f7ff fe82 	bl	8002f70 <lowercase_lcd>
	selectbox_lcd();
 800326c:	f7ff fec8 	bl	8003000 <selectbox_lcd>
	displayName_lcd();
 8003270:	f7ff ff4a 	bl	8003108 <displayName_lcd>
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}
 800327c:	080c453c 	.word	0x080c453c
 8003280:	2000015b 	.word	0x2000015b
 8003284:	2000015c 	.word	0x2000015c
 8003288:	2000015a 	.word	0x2000015a

0800328c <home_not_select>:

void home_not_select(){
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8003292:	f248 4330 	movw	r3, #33840	; 0x8430
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	23b9      	movs	r3, #185	; 0xb9
 800329a:	22b9      	movs	r2, #185	; 0xb9
 800329c:	2196      	movs	r1, #150	; 0x96
 800329e:	2041      	movs	r0, #65	; 0x41
 80032a0:	f000 fc71 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80032a4:	f248 4330 	movw	r3, #33840	; 0x8430
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	23b8      	movs	r3, #184	; 0xb8
 80032ac:	22b8      	movs	r2, #184	; 0xb8
 80032ae:	2197      	movs	r1, #151	; 0x97
 80032b0:	2042      	movs	r0, #66	; 0x42
 80032b2:	f000 fc68 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80032b6:	f248 4330 	movw	r3, #33840	; 0x8430
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	23eb      	movs	r3, #235	; 0xeb
 80032be:	22b9      	movs	r2, #185	; 0xb9
 80032c0:	21c8      	movs	r1, #200	; 0xc8
 80032c2:	2041      	movs	r0, #65	; 0x41
 80032c4:	f000 fc5f 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80032c8:	f248 4330 	movw	r3, #33840	; 0x8430
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	23ea      	movs	r3, #234	; 0xea
 80032d0:	22b8      	movs	r2, #184	; 0xb8
 80032d2:	21c9      	movs	r1, #201	; 0xc9
 80032d4:	2042      	movs	r0, #66	; 0x42
 80032d6:	f000 fc56 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80032da:	f248 4330 	movw	r3, #33840	; 0x8430
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f240 131d 	movw	r3, #285	; 0x11d
 80032e4:	22b9      	movs	r2, #185	; 0xb9
 80032e6:	21fa      	movs	r1, #250	; 0xfa
 80032e8:	2041      	movs	r0, #65	; 0x41
 80032ea:	f000 fc4c 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80032ee:	f248 4330 	movw	r3, #33840	; 0x8430
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80032f8:	22b8      	movs	r2, #184	; 0xb8
 80032fa:	21fb      	movs	r1, #251	; 0xfb
 80032fc:	2042      	movs	r0, #66	; 0x42
 80032fe:	f000 fc42 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <home_second_lcd>:

void home_second_lcd(){
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af02      	add	r7, sp, #8
	home_not_select();
 800330e:	f7ff ffbd 	bl	800328c <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8003312:	2300      	movs	r3, #0
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	23b9      	movs	r3, #185	; 0xb9
 8003318:	22b9      	movs	r2, #185	; 0xb9
 800331a:	2196      	movs	r1, #150	; 0x96
 800331c:	2041      	movs	r0, #65	; 0x41
 800331e:	f000 fc32 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	23b8      	movs	r3, #184	; 0xb8
 8003328:	22b8      	movs	r2, #184	; 0xb8
 800332a:	2197      	movs	r1, #151	; 0x97
 800332c:	2042      	movs	r0, #66	; 0x42
 800332e:	f000 fc2a 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <home_third_lcd>:

void home_third_lcd(){
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af02      	add	r7, sp, #8
	home_not_select();
 800333e:	f7ff ffa5 	bl	800328c <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8003342:	2300      	movs	r3, #0
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	23eb      	movs	r3, #235	; 0xeb
 8003348:	22b9      	movs	r2, #185	; 0xb9
 800334a:	21c8      	movs	r1, #200	; 0xc8
 800334c:	2041      	movs	r0, #65	; 0x41
 800334e:	f000 fc1a 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8003352:	2300      	movs	r3, #0
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	23ea      	movs	r3, #234	; 0xea
 8003358:	22b8      	movs	r2, #184	; 0xb8
 800335a:	21c9      	movs	r1, #201	; 0xc9
 800335c:	2042      	movs	r0, #66	; 0x42
 800335e:	f000 fc12 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <home_forth_lcd>:

void home_forth_lcd(){
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af02      	add	r7, sp, #8
	home_not_select();
 800336e:	f7ff ff8d 	bl	800328c <home_not_select>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8003372:	2300      	movs	r3, #0
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	f240 131d 	movw	r3, #285	; 0x11d
 800337a:	22b9      	movs	r2, #185	; 0xb9
 800337c:	21fa      	movs	r1, #250	; 0xfa
 800337e:	2041      	movs	r0, #65	; 0x41
 8003380:	f000 fc01 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800338c:	22b8      	movs	r2, #184	; 0xb8
 800338e:	21fb      	movs	r1, #251	; 0xfb
 8003390:	2042      	movs	r0, #66	; 0x42
 8003392:	f000 fbf8 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <mode_first_lcd>:

void mode_first_lcd(){
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80033a2:	2300      	movs	r3, #0
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2387      	movs	r3, #135	; 0x87
 80033a8:	22b9      	movs	r2, #185	; 0xb9
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	2041      	movs	r0, #65	; 0x41
 80033ae:	f000 fbea 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80033b2:	2300      	movs	r3, #0
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	2386      	movs	r3, #134	; 0x86
 80033b8:	22b8      	movs	r2, #184	; 0xb8
 80033ba:	2165      	movs	r1, #101	; 0x65
 80033bc:	2042      	movs	r0, #66	; 0x42
 80033be:	f000 fbe2 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, BLACK);
	home_not_select();
 80033c2:	f7ff ff63 	bl	800328c <home_not_select>
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <mode_second_lcd>:

void mode_second_lcd(){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80033d2:	f248 4330 	movw	r3, #33840	; 0x8430
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2387      	movs	r3, #135	; 0x87
 80033da:	22b9      	movs	r2, #185	; 0xb9
 80033dc:	2164      	movs	r1, #100	; 0x64
 80033de:	2041      	movs	r0, #65	; 0x41
 80033e0:	f000 fbd1 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80033e4:	f248 4330 	movw	r3, #33840	; 0x8430
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2386      	movs	r3, #134	; 0x86
 80033ec:	22b8      	movs	r2, #184	; 0xb8
 80033ee:	2165      	movs	r1, #101	; 0x65
 80033f0:	2042      	movs	r0, #66	; 0x42
 80033f2:	f000 fbc8 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_second_lcd();
 80033f6:	f7ff ff87 	bl	8003308 <home_second_lcd>
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <mode_third_lcd>:

void mode_third_lcd(){
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 8003406:	f248 4330 	movw	r3, #33840	; 0x8430
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2387      	movs	r3, #135	; 0x87
 800340e:	22b9      	movs	r2, #185	; 0xb9
 8003410:	2164      	movs	r1, #100	; 0x64
 8003412:	2041      	movs	r0, #65	; 0x41
 8003414:	f000 fbb7 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8003418:	f248 4330 	movw	r3, #33840	; 0x8430
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2386      	movs	r3, #134	; 0x86
 8003420:	22b8      	movs	r2, #184	; 0xb8
 8003422:	2165      	movs	r1, #101	; 0x65
 8003424:	2042      	movs	r0, #66	; 0x42
 8003426:	f000 fbae 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_third_lcd();
 800342a:	f7ff ff85 	bl	8003338 <home_third_lcd>
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <mode_forth_lcd>:

void mode_forth_lcd(){
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800343a:	f248 4330 	movw	r3, #33840	; 0x8430
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2387      	movs	r3, #135	; 0x87
 8003442:	22b9      	movs	r2, #185	; 0xb9
 8003444:	2164      	movs	r1, #100	; 0x64
 8003446:	2041      	movs	r0, #65	; 0x41
 8003448:	f000 fb9d 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 800344c:	f248 4330 	movw	r3, #33840	; 0x8430
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2386      	movs	r3, #134	; 0x86
 8003454:	22b8      	movs	r2, #184	; 0xb8
 8003456:	2165      	movs	r1, #101	; 0x65
 8003458:	2042      	movs	r0, #66	; 0x42
 800345a:	f000 fb94 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_forth_lcd();
 800345e:	f7ff ff83 	bl	8003368 <home_forth_lcd>
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <pause_second_lcd>:

void pause_second_lcd(){
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	23b9      	movs	r3, #185	; 0xb9
 8003474:	22b9      	movs	r2, #185	; 0xb9
 8003476:	2196      	movs	r1, #150	; 0x96
 8003478:	2041      	movs	r0, #65	; 0x41
 800347a:	f000 fb84 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	23b8      	movs	r3, #184	; 0xb8
 8003484:	22b8      	movs	r2, #184	; 0xb8
 8003486:	2197      	movs	r1, #151	; 0x97
 8003488:	2042      	movs	r0, #66	; 0x42
 800348a:	f000 fb7c 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800348e:	f248 4330 	movw	r3, #33840	; 0x8430
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	23eb      	movs	r3, #235	; 0xeb
 8003496:	22b9      	movs	r2, #185	; 0xb9
 8003498:	21c8      	movs	r1, #200	; 0xc8
 800349a:	2041      	movs	r0, #65	; 0x41
 800349c:	f000 fb73 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80034a0:	f248 4330 	movw	r3, #33840	; 0x8430
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	23ea      	movs	r3, #234	; 0xea
 80034a8:	22b8      	movs	r2, #184	; 0xb8
 80034aa:	21c9      	movs	r1, #201	; 0xc9
 80034ac:	2042      	movs	r0, #66	; 0x42
 80034ae:	f000 fb6a 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <pause_third_lcd>:

void pause_third_lcd(){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80034be:	f248 4330 	movw	r3, #33840	; 0x8430
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	23b9      	movs	r3, #185	; 0xb9
 80034c6:	22b9      	movs	r2, #185	; 0xb9
 80034c8:	2196      	movs	r1, #150	; 0x96
 80034ca:	2041      	movs	r0, #65	; 0x41
 80034cc:	f000 fb5b 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80034d0:	f248 4330 	movw	r3, #33840	; 0x8430
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	23b8      	movs	r3, #184	; 0xb8
 80034d8:	22b8      	movs	r2, #184	; 0xb8
 80034da:	2197      	movs	r1, #151	; 0x97
 80034dc:	2042      	movs	r0, #66	; 0x42
 80034de:	f000 fb52 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80034e2:	2300      	movs	r3, #0
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	23eb      	movs	r3, #235	; 0xeb
 80034e8:	22b9      	movs	r2, #185	; 0xb9
 80034ea:	21c8      	movs	r1, #200	; 0xc8
 80034ec:	2041      	movs	r0, #65	; 0x41
 80034ee:	f000 fb4a 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80034f2:	2300      	movs	r3, #0
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	23ea      	movs	r3, #234	; 0xea
 80034f8:	22b8      	movs	r2, #184	; 0xb8
 80034fa:	21c9      	movs	r1, #201	; 0xc9
 80034fc:	2042      	movs	r0, #66	; 0x42
 80034fe:	f000 fb42 	bl	8003b86 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <point_head_lcd>:

void point_head_lcd(struct Point head){
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af02      	add	r7, sp, #8
 800350e:	463b      	mov	r3, r7
 8003510:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(head.x, head.y, GREEN, RADIUS_SNAKE, 1);
 8003514:	6838      	ldr	r0, [r7, #0]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	2301      	movs	r3, #1
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2304      	movs	r3, #4
 800351e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003522:	f000 ffce 	bl	80044c2 <lcd_DrawCircle>
	lcd_DrawCircle(head.x, head.y, BLACK, 1, 1);
 8003526:	6838      	ldr	r0, [r7, #0]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	2301      	movs	r3, #1
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	2301      	movs	r3, #1
 8003530:	2200      	movs	r2, #0
 8003532:	f000 ffc6 	bl	80044c2 <lcd_DrawCircle>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <point_snake_lcd>:

void point_snake_lcd(struct Point snake){
 800353e:	b590      	push	{r4, r7, lr}
 8003540:	b085      	sub	sp, #20
 8003542:	af02      	add	r7, sp, #8
 8003544:	463b      	mov	r3, r7
 8003546:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(snake.x, snake.y, GREEN, RADIUS_SNAKE, 1);
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	2301      	movs	r3, #1
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2304      	movs	r3, #4
 8003554:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003558:	f000 ffb3 	bl	80044c2 <lcd_DrawCircle>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b03      	subs	r3, #3
 8003562:	b298      	uxth	r0, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b03      	subs	r3, #3
 800356a:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 800356c:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 800356e:	b29b      	uxth	r3, r3
 8003570:	3304      	adds	r3, #4
 8003572:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8003574:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8003576:	b29b      	uxth	r3, r3
 8003578:	3304      	adds	r3, #4
 800357a:	b29b      	uxth	r3, r3
 800357c:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003580:	9400      	str	r4, [sp, #0]
 8003582:	f000 fa7c 	bl	8003a7e <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b03      	subs	r3, #3
 800358c:	b298      	uxth	r0, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b02      	subs	r3, #2
 8003594:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8003596:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8003598:	b29b      	uxth	r3, r3
 800359a:	3303      	adds	r3, #3
 800359c:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 800359e:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3304      	adds	r3, #4
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80035aa:	9400      	str	r4, [sp, #0]
 80035ac:	f000 fa67 	bl	8003a7e <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b02      	subs	r3, #2
 80035b6:	b298      	uxth	r0, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b03      	subs	r3, #3
 80035be:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 80035c0:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3304      	adds	r3, #4
 80035c6:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 80035c8:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3303      	adds	r3, #3
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80035d4:	9400      	str	r4, [sp, #0]
 80035d6:	f000 fa52 	bl	8003a7e <lcd_DrawLine>
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}

080035e2 <point_food_lcd>:

void point_food_lcd(struct Point food){
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af02      	add	r7, sp, #8
 80035e8:	463b      	mov	r3, r7
 80035ea:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(food.x, food.y, RED, RADIUS_SNAKE, 1);
 80035ee:	6838      	ldr	r0, [r7, #0]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	2301      	movs	r3, #1
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2304      	movs	r3, #4
 80035f8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80035fc:	f000 ff61 	bl	80044c2 <lcd_DrawCircle>
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <point_clr>:

void point_clr(struct Point clr){
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af02      	add	r7, sp, #8
 800360e:	463b      	mov	r3, r7
 8003610:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(clr.x, clr.y, WHITE, RADIUS_SNAKE, 1);
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	2301      	movs	r3, #1
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2304      	movs	r3, #4
 800361e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003622:	f000 ff4e 	bl	80044c2 <lcd_DrawCircle>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <mode_7seg>:

void mode_7seg(){
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
	switch(status){
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <mode_7seg+0x44>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b0d      	cmp	r3, #13
 800363a:	d012      	beq.n	8003662 <mode_7seg+0x32>
 800363c:	2b0d      	cmp	r3, #13
 800363e:	dc16      	bgt.n	800366e <mode_7seg+0x3e>
 8003640:	2b0b      	cmp	r3, #11
 8003642:	d002      	beq.n	800364a <mode_7seg+0x1a>
 8003644:	2b0c      	cmp	r3, #12
 8003646:	d006      	beq.n	8003656 <mode_7seg+0x26>
			break;
		case TIME:
			led7_SetDigit(3, 0, 1);
			break;
		default:
			break;
 8003648:	e011      	b.n	800366e <mode_7seg+0x3e>
			led7_SetDigit(1, 0, 1);
 800364a:	2201      	movs	r2, #1
 800364c:	2100      	movs	r1, #0
 800364e:	2001      	movs	r0, #1
 8003650:	f001 f8bc 	bl	80047cc <led7_SetDigit>
			break;
 8003654:	e00c      	b.n	8003670 <mode_7seg+0x40>
			led7_SetDigit(2, 0, 1);
 8003656:	2201      	movs	r2, #1
 8003658:	2100      	movs	r1, #0
 800365a:	2002      	movs	r0, #2
 800365c:	f001 f8b6 	bl	80047cc <led7_SetDigit>
			break;
 8003660:	e006      	b.n	8003670 <mode_7seg+0x40>
			led7_SetDigit(3, 0, 1);
 8003662:	2201      	movs	r2, #1
 8003664:	2100      	movs	r1, #0
 8003666:	2003      	movs	r0, #3
 8003668:	f001 f8b0 	bl	80047cc <led7_SetDigit>
			break;
 800366c:	e000      	b.n	8003670 <mode_7seg+0x40>
			break;
 800366e:	bf00      	nop
	}
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000160 	.word	0x20000160

08003678 <reset_7seg>:

void reset_7seg(){
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	led7_SetDigit(0, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	2000      	movs	r0, #0
 8003682:	f001 f8a3 	bl	80047cc <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2101      	movs	r1, #1
 800368a:	2000      	movs	r0, #0
 800368c:	f001 f89e 	bl	80047cc <led7_SetDigit>
	led7_SetDigit(0, 2, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2102      	movs	r1, #2
 8003694:	2000      	movs	r0, #0
 8003696:	f001 f899 	bl	80047cc <led7_SetDigit>
	led7_SetDigit(0, 3, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	2103      	movs	r1, #3
 800369e:	2000      	movs	r0, #0
 80036a0:	f001 f894 	bl	80047cc <led7_SetDigit>
}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <environment_cal>:

// Cap nhat thong tin moi truong
void environment_cal(){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	sensor_Read();
 80036ac:	f001 f98a 	bl	80049c4 <sensor_Read>
	current_temp = sensor_GetTemperature();
 80036b0:	f001 f9ae 	bl	8004a10 <sensor_GetTemperature>
 80036b4:	eef0 7a40 	vmov.f32	s15, s0
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <environment_cal+0x80>)
 80036ba:	edc3 7a00 	vstr	s15, [r3]
	current_hum = ((float)sensor_GetPotentiometer() / 4095.0) * 100;
 80036be:	f001 f99b 	bl	80049f8 <sensor_GetPotentiometer>
 80036c2:	4603      	mov	r3, r0
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036cc:	ee17 0a90 	vmov	r0, s15
 80036d0:	f7fc ff3a 	bl	8000548 <__aeabi_f2d>
 80036d4:	a312      	add	r3, pc, #72	; (adr r3, 8003720 <environment_cal+0x78>)
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	f7fd f8b7 	bl	800084c <__aeabi_ddiv>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <environment_cal+0x84>)
 80036ec:	f7fc ff84 	bl	80005f8 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	f7fd fa56 	bl	8000ba8 <__aeabi_d2uiz>
 80036fc:	4603      	mov	r3, r0
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <environment_cal+0x88>)
 8003702:	801a      	strh	r2, [r3, #0]
	current_light = 4095 - sensor_GetLight();
 8003704:	f001 f96c 	bl	80049e0 <sensor_GetLight>
 8003708:	4603      	mov	r3, r0
 800370a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800370e:	330f      	adds	r3, #15
 8003710:	b29a      	uxth	r2, r3
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <environment_cal+0x8c>)
 8003714:	801a      	strh	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w
 8003720:	00000000 	.word	0x00000000
 8003724:	40affe00 	.word	0x40affe00
 8003728:	20000004 	.word	0x20000004
 800372c:	40590000 	.word	0x40590000
 8003730:	20000008 	.word	0x20000008
 8003734:	2000000a 	.word	0x2000000a

08003738 <update_7seg_time>:

void update_7seg_time(){
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
	if(flag_timer4 == 1){
 800373c:	4b48      	ldr	r3, [pc, #288]	; (8003860 <update_7seg_time+0x128>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d104      	bne.n	800374e <update_7seg_time+0x16>
		flag_timer4 = 0;
 8003744:	4b46      	ldr	r3, [pc, #280]	; (8003860 <update_7seg_time+0x128>)
 8003746:	2200      	movs	r2, #0
 8003748:	801a      	strh	r2, [r3, #0]
		environment_cal();
 800374a:	f7ff ffad 	bl	80036a8 <environment_cal>
	}
	if(flag_timer5 == 1 && flag_user == FLAG_PLAYING){
 800374e:	4b45      	ldr	r3, [pc, #276]	; (8003864 <update_7seg_time+0x12c>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	f040 8081 	bne.w	800385a <update_7seg_time+0x122>
 8003758:	4b43      	ldr	r3, [pc, #268]	; (8003868 <update_7seg_time+0x130>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d17c      	bne.n	800385a <update_7seg_time+0x122>
		flag_timer5 = 0;
 8003760:	4b40      	ldr	r3, [pc, #256]	; (8003864 <update_7seg_time+0x12c>)
 8003762:	2200      	movs	r2, #0
 8003764:	801a      	strh	r2, [r3, #0]
		current_time++;
 8003766:	4b41      	ldr	r3, [pc, #260]	; (800386c <update_7seg_time+0x134>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	4a3f      	ldr	r2, [pc, #252]	; (800386c <update_7seg_time+0x134>)
 800376e:	6013      	str	r3, [r2, #0]
		switch(status){
 8003770:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <update_7seg_time+0x138>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b0c      	cmp	r3, #12
 8003776:	dc02      	bgt.n	800377e <update_7seg_time+0x46>
 8003778:	2b0b      	cmp	r3, #11
 800377a:	da03      	bge.n	8003784 <update_7seg_time+0x4c>
				led7_SetDigit((counter_time % 100) / 10, 2, 0);
				led7_SetDigit(counter_time % 10, 3, 0);
				break;
		}
	}
}
 800377c:	e06e      	b.n	800385c <update_7seg_time+0x124>
		switch(status){
 800377e:	2b0d      	cmp	r3, #13
 8003780:	d030      	beq.n	80037e4 <update_7seg_time+0xac>
}
 8003782:	e06b      	b.n	800385c <update_7seg_time+0x124>
				led7_SetDigit(current_time / 100, 1, 0);
 8003784:	4b39      	ldr	r3, [pc, #228]	; (800386c <update_7seg_time+0x134>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <update_7seg_time+0x13c>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2200      	movs	r2, #0
 8003792:	2101      	movs	r1, #1
 8003794:	4618      	mov	r0, r3
 8003796:	f001 f819 	bl	80047cc <led7_SetDigit>
				led7_SetDigit((current_time % 100) / 10, 2, 0);
 800379a:	4b34      	ldr	r3, [pc, #208]	; (800386c <update_7seg_time+0x134>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b35      	ldr	r3, [pc, #212]	; (8003874 <update_7seg_time+0x13c>)
 80037a0:	fba3 1302 	umull	r1, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	2164      	movs	r1, #100	; 0x64
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	4a32      	ldr	r2, [pc, #200]	; (8003878 <update_7seg_time+0x140>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	08db      	lsrs	r3, r3, #3
 80037b6:	2200      	movs	r2, #0
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 f806 	bl	80047cc <led7_SetDigit>
				led7_SetDigit(current_time % 10, 3, 0);
 80037c0:	4b2a      	ldr	r3, [pc, #168]	; (800386c <update_7seg_time+0x134>)
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <update_7seg_time+0x140>)
 80037c6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ca:	08da      	lsrs	r2, r3, #3
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	1aca      	subs	r2, r1, r3
 80037d6:	4613      	mov	r3, r2
 80037d8:	2200      	movs	r2, #0
 80037da:	2103      	movs	r1, #3
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fff5 	bl	80047cc <led7_SetDigit>
				break;
 80037e2:	e03b      	b.n	800385c <update_7seg_time+0x124>
				counter_time--;
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <update_7seg_time+0x144>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	4a24      	ldr	r2, [pc, #144]	; (800387c <update_7seg_time+0x144>)
 80037ec:	6013      	str	r3, [r2, #0]
				led7_SetDigit(counter_time / 100, 1, 0);
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <update_7seg_time+0x144>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <update_7seg_time+0x13c>)
 80037f4:	fb82 1203 	smull	r1, r2, r2, r3
 80037f8:	1152      	asrs	r2, r2, #5
 80037fa:	17db      	asrs	r3, r3, #31
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2200      	movs	r2, #0
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f000 ffe2 	bl	80047cc <led7_SetDigit>
				led7_SetDigit((counter_time % 100) / 10, 2, 0);
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <update_7seg_time+0x144>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <update_7seg_time+0x13c>)
 800380e:	fb83 1302 	smull	r1, r3, r3, r2
 8003812:	1159      	asrs	r1, r3, #5
 8003814:	17d3      	asrs	r3, r2, #31
 8003816:	1acb      	subs	r3, r1, r3
 8003818:	2164      	movs	r1, #100	; 0x64
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	4a17      	ldr	r2, [pc, #92]	; (8003880 <update_7seg_time+0x148>)
 8003822:	fb82 1203 	smull	r1, r2, r2, r3
 8003826:	1092      	asrs	r2, r2, #2
 8003828:	17db      	asrs	r3, r3, #31
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2200      	movs	r2, #0
 800382e:	2102      	movs	r1, #2
 8003830:	4618      	mov	r0, r3
 8003832:	f000 ffcb 	bl	80047cc <led7_SetDigit>
				led7_SetDigit(counter_time % 10, 3, 0);
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <update_7seg_time+0x144>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <update_7seg_time+0x148>)
 800383c:	fb83 1302 	smull	r1, r3, r3, r2
 8003840:	1099      	asrs	r1, r3, #2
 8003842:	17d3      	asrs	r3, r2, #31
 8003844:	1ac8      	subs	r0, r1, r3
 8003846:	4603      	mov	r3, r0
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4403      	add	r3, r0
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	1ad0      	subs	r0, r2, r3
 8003850:	2200      	movs	r2, #0
 8003852:	2103      	movs	r1, #3
 8003854:	f000 ffba 	bl	80047cc <led7_SetDigit>
				break;
 8003858:	e000      	b.n	800385c <update_7seg_time+0x124>
	}
 800385a:	bf00      	nop
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	2000018a 	.word	0x2000018a
 8003864:	20000190 	.word	0x20000190
 8003868:	20000158 	.word	0x20000158
 800386c:	20000154 	.word	0x20000154
 8003870:	20000160 	.word	0x20000160
 8003874:	51eb851f 	.word	0x51eb851f
 8003878:	cccccccd 	.word	0xcccccccd
 800387c:	2000016c 	.word	0x2000016c
 8003880:	66666667 	.word	0x66666667

08003884 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <LCD_WR_REG+0x1c>)
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	8013      	strh	r3, [r2, #0]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	600ffffe 	.word	0x600ffffe

080038a4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <LCD_WR_DATA+0x1c>)
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	8053      	strh	r3, [r2, #2]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	600ffffe 	.word	0x600ffffe

080038c4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <LCD_RD_DATA+0x20>)
 80038cc:	885b      	ldrh	r3, [r3, #2]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	b29b      	uxth	r3, r3
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	600ffffe 	.word	0x600ffffe

080038e8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4604      	mov	r4, r0
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	80fb      	strh	r3, [r7, #6]
 80038fa:	4603      	mov	r3, r0
 80038fc:	80bb      	strh	r3, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	807b      	strh	r3, [r7, #2]
 8003902:	4613      	mov	r3, r2
 8003904:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8003906:	202a      	movs	r0, #42	; 0x2a
 8003908:	f7ff ffbc 	bl	8003884 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	b29b      	uxth	r3, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ffc6 	bl	80038a4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	b29b      	uxth	r3, r3
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ffc0 	bl	80038a4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8003924:	887b      	ldrh	r3, [r7, #2]
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	b29b      	uxth	r3, r3
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ffba 	bl	80038a4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	b29b      	uxth	r3, r3
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ffb4 	bl	80038a4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800393c:	202b      	movs	r0, #43	; 0x2b
 800393e:	f7ff ffa1 	bl	8003884 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8003942:	88bb      	ldrh	r3, [r7, #4]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	b29b      	uxth	r3, r3
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ffab 	bl	80038a4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800394e:	88bb      	ldrh	r3, [r7, #4]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	b29b      	uxth	r3, r3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ffa5 	bl	80038a4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800395a:	883b      	ldrh	r3, [r7, #0]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	b29b      	uxth	r3, r3
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff9f 	bl	80038a4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8003966:	883b      	ldrh	r3, [r7, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff99 	bl	80038a4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8003972:	202c      	movs	r0, #44	; 0x2c
 8003974:	f7ff ff86 	bl	8003884 <LCD_WR_REG>
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <lcd_Clear+0x60>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <lcd_Clear+0x60>)
 8003994:	885b      	ldrh	r3, [r3, #2]
 8003996:	3b01      	subs	r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	2100      	movs	r1, #0
 800399c:	2000      	movs	r0, #0
 800399e:	f7ff ffa3 	bl	80038e8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	81fb      	strh	r3, [r7, #14]
 80039a6:	e011      	b.n	80039cc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	81bb      	strh	r3, [r7, #12]
 80039ac:	e006      	b.n	80039bc <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff77 	bl	80038a4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80039b6:	89bb      	ldrh	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	81bb      	strh	r3, [r7, #12]
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <lcd_Clear+0x60>)
 80039be:	885b      	ldrh	r3, [r3, #2]
 80039c0:	89ba      	ldrh	r2, [r7, #12]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d3f3      	bcc.n	80039ae <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	3301      	adds	r3, #1
 80039ca:	81fb      	strh	r3, [r7, #14]
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <lcd_Clear+0x60>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	89fa      	ldrh	r2, [r7, #14]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d3e8      	bcc.n	80039a8 <lcd_Clear+0x28>
		}
	}
}
 80039d6:	bf00      	nop
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000370 	.word	0x20000370

080039e4 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4604      	mov	r4, r0
 80039ec:	4608      	mov	r0, r1
 80039ee:	4611      	mov	r1, r2
 80039f0:	461a      	mov	r2, r3
 80039f2:	4623      	mov	r3, r4
 80039f4:	80fb      	strh	r3, [r7, #6]
 80039f6:	4603      	mov	r3, r0
 80039f8:	80bb      	strh	r3, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	807b      	strh	r3, [r7, #2]
 80039fe:	4613      	mov	r3, r2
 8003a00:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	883b      	ldrh	r3, [r7, #0]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	88b9      	ldrh	r1, [r7, #4]
 8003a10:	88f8      	ldrh	r0, [r7, #6]
 8003a12:	f7ff ff69 	bl	80038e8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8003a16:	88bb      	ldrh	r3, [r7, #4]
 8003a18:	81fb      	strh	r3, [r7, #14]
 8003a1a:	e010      	b.n	8003a3e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	81bb      	strh	r3, [r7, #12]
 8003a20:	e006      	b.n	8003a30 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8003a22:	8c3b      	ldrh	r3, [r7, #32]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff3d 	bl	80038a4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8003a2a:	89bb      	ldrh	r3, [r7, #12]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	81bb      	strh	r3, [r7, #12]
 8003a30:	89ba      	ldrh	r2, [r7, #12]
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d3f4      	bcc.n	8003a22 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8003a38:	89fb      	ldrh	r3, [r7, #14]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	81fb      	strh	r3, [r7, #14]
 8003a3e:	89fa      	ldrh	r2, [r7, #14]
 8003a40:	883b      	ldrh	r3, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d3ea      	bcc.n	8003a1c <lcd_Fill+0x38>
		}
	}
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd90      	pop	{r4, r7, pc}

08003a50 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	80fb      	strh	r3, [r7, #6]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	80bb      	strh	r3, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8003a62:	88bb      	ldrh	r3, [r7, #4]
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	88b9      	ldrh	r1, [r7, #4]
 8003a68:	88f8      	ldrh	r0, [r7, #6]
 8003a6a:	f7ff ff3d 	bl	80038e8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8003a6e:	887b      	ldrh	r3, [r7, #2]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff17 	bl	80038a4 <LCD_WR_DATA>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8003a7e:	b590      	push	{r4, r7, lr}
 8003a80:	b08d      	sub	sp, #52	; 0x34
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4604      	mov	r4, r0
 8003a86:	4608      	mov	r0, r1
 8003a88:	4611      	mov	r1, r2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	80fb      	strh	r3, [r7, #6]
 8003a90:	4603      	mov	r3, r0
 8003a92:	80bb      	strh	r3, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8003aa4:	887a      	ldrh	r2, [r7, #2]
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8003aac:	883a      	ldrh	r2, [r7, #0]
 8003aae:	88bb      	ldrh	r3, [r7, #4]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8003ab8:	88bb      	ldrh	r3, [r7, #4]
 8003aba:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	dd02      	ble.n	8003ac8 <lcd_DrawLine+0x4a>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e00b      	b.n	8003ae0 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <lcd_DrawLine+0x56>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e005      	b.n	8003ae0 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	425b      	negs	r3, r3
 8003ade:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	dd02      	ble.n	8003aec <lcd_DrawLine+0x6e>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	e00b      	b.n	8003b04 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <lcd_DrawLine+0x7a>
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	e005      	b.n	8003b04 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8003af8:	f04f 33ff 	mov.w	r3, #4294967295
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	425b      	negs	r3, r3
 8003b02:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	dd02      	ble.n	8003b12 <lcd_DrawLine+0x94>
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	e001      	b.n	8003b16 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b1a:	e02b      	b.n	8003b74 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	b291      	uxth	r1, r2
 8003b24:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff91 	bl	8003a50 <lcd_DrawPoint>
		xerr+=delta_x;
 8003b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	4413      	add	r3, r2
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8003b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	dd07      	ble.n	8003b56 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8003b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4413      	add	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	dd07      	ble.n	8003b6e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8003b6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b70:	3301      	adds	r3, #1
 8003b72:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	dacf      	bge.n	8003b1c <lcd_DrawLine+0x9e>
		}
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3734      	adds	r7, #52	; 0x34
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd90      	pop	{r4, r7, pc}

08003b86 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8003b86:	b590      	push	{r4, r7, lr}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af02      	add	r7, sp, #8
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	4608      	mov	r0, r1
 8003b90:	4611      	mov	r1, r2
 8003b92:	461a      	mov	r2, r3
 8003b94:	4623      	mov	r3, r4
 8003b96:	80fb      	strh	r3, [r7, #6]
 8003b98:	4603      	mov	r3, r0
 8003b9a:	80bb      	strh	r3, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8003ba4:	88bc      	ldrh	r4, [r7, #4]
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	88b9      	ldrh	r1, [r7, #4]
 8003baa:	88f8      	ldrh	r0, [r7, #6]
 8003bac:	8b3b      	ldrh	r3, [r7, #24]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	f7ff ff64 	bl	8003a7e <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8003bb6:	883c      	ldrh	r4, [r7, #0]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	88b9      	ldrh	r1, [r7, #4]
 8003bbc:	88f8      	ldrh	r0, [r7, #6]
 8003bbe:	8b3b      	ldrh	r3, [r7, #24]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	f7ff ff5b 	bl	8003a7e <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8003bc8:	883c      	ldrh	r4, [r7, #0]
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	8839      	ldrh	r1, [r7, #0]
 8003bce:	88f8      	ldrh	r0, [r7, #6]
 8003bd0:	8b3b      	ldrh	r3, [r7, #24]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	4623      	mov	r3, r4
 8003bd6:	f7ff ff52 	bl	8003a7e <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8003bda:	883c      	ldrh	r4, [r7, #0]
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	88b9      	ldrh	r1, [r7, #4]
 8003be0:	8878      	ldrh	r0, [r7, #2]
 8003be2:	8b3b      	ldrh	r3, [r7, #24]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	4623      	mov	r3, r4
 8003be8:	f7ff ff49 	bl	8003a7e <lcd_DrawLine>
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4623      	mov	r3, r4
 8003c04:	80fb      	strh	r3, [r7, #6]
 8003c06:	4603      	mov	r3, r0
 8003c08:	80bb      	strh	r3, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8003c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	fb12 f303 	smulbb	r3, r2, r3
 8003c4a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	3b20      	subs	r3, #32
 8003c50:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	4413      	add	r3, r2
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29c      	uxth	r4, r3
 8003c60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	88bb      	ldrh	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	88b9      	ldrh	r1, [r7, #4]
 8003c72:	88f8      	ldrh	r0, [r7, #6]
 8003c74:	4622      	mov	r2, r4
 8003c76:	f7ff fe37 	bl	80038e8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	827b      	strh	r3, [r7, #18]
 8003c7e:	e086      	b.n	8003d8e <lcd_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[character][i];
 8003c80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	d10b      	bne.n	8003ca0 <lcd_ShowChar+0xac>
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	8a79      	ldrh	r1, [r7, #18]
 8003c8c:	4845      	ldr	r0, [pc, #276]	; (8003da4 <lcd_ShowChar+0x1b0>)
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4403      	add	r3, r0
 8003c98:	440b      	add	r3, r1
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	75fb      	strb	r3, [r7, #23]
 8003c9e:	e028      	b.n	8003cf2 <lcd_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[character][i];
 8003ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d108      	bne.n	8003cba <lcd_ShowChar+0xc6>
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	8a7b      	ldrh	r3, [r7, #18]
 8003cac:	493e      	ldr	r1, [pc, #248]	; (8003da8 <lcd_ShowChar+0x1b4>)
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	440a      	add	r2, r1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	75fb      	strb	r3, [r7, #23]
 8003cb8:	e01b      	b.n	8003cf2 <lcd_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[character][i];
 8003cba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cbe:	2b18      	cmp	r3, #24
 8003cc0:	d10b      	bne.n	8003cda <lcd_ShowChar+0xe6>
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	8a79      	ldrh	r1, [r7, #18]
 8003cc6:	4839      	ldr	r0, [pc, #228]	; (8003dac <lcd_ShowChar+0x1b8>)
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	4403      	add	r3, r0
 8003cd2:	440b      	add	r3, r1
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	75fb      	strb	r3, [r7, #23]
 8003cd8:	e00b      	b.n	8003cf2 <lcd_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[character][i];
 8003cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d15b      	bne.n	8003d9a <lcd_ShowChar+0x1a6>
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	8a7b      	ldrh	r3, [r7, #18]
 8003ce6:	4932      	ldr	r1, [pc, #200]	; (8003db0 <lcd_ShowChar+0x1bc>)
 8003ce8:	0192      	lsls	r2, r2, #6
 8003cea:	440a      	add	r2, r1
 8003cec:	4413      	add	r3, r2
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75bb      	strb	r3, [r7, #22]
 8003cf6:	e044      	b.n	8003d82 <lcd_ShowChar+0x18e>
		{
			if(!mode)
 8003cf8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d120      	bne.n	8003d42 <lcd_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8003d00:	7dfa      	ldrb	r2, [r7, #23]
 8003d02:	7dbb      	ldrb	r3, [r7, #22]
 8003d04:	fa42 f303 	asr.w	r3, r2, r3
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <lcd_ShowChar+0x126>
 8003d10:	883b      	ldrh	r3, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fdc6 	bl	80038a4 <LCD_WR_DATA>
 8003d18:	e003      	b.n	8003d22 <lcd_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8003d1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fdc1 	bl	80038a4 <LCD_WR_DATA>
				m++;
 8003d22:	7d7b      	ldrb	r3, [r7, #21]
 8003d24:	3301      	adds	r3, #1
 8003d26:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8003d28:	7d7b      	ldrb	r3, [r7, #21]
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d30:	fb02 f201 	mul.w	r2, r2, r1
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11f      	bne.n	8003d7c <lcd_ShowChar+0x188>
				{
					m=0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	757b      	strb	r3, [r7, #21]
					break;
 8003d40:	e022      	b.n	8003d88 <lcd_ShowChar+0x194>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8003d42:	7dfa      	ldrb	r2, [r7, #23]
 8003d44:	7dbb      	ldrb	r3, [r7, #22]
 8003d46:	fa42 f303 	asr.w	r3, r2, r3
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <lcd_ShowChar+0x16a>
 8003d52:	883a      	ldrh	r2, [r7, #0]
 8003d54:	88b9      	ldrh	r1, [r7, #4]
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fe79 	bl	8003a50 <lcd_DrawPoint>
				x++;
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	3301      	adds	r3, #1
 8003d62:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	8a3b      	ldrh	r3, [r7, #16]
 8003d68:	1ad2      	subs	r2, r2, r3
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d105      	bne.n	8003d7c <lcd_ShowChar+0x188>
				{
					x=x0;
 8003d70:	8a3b      	ldrh	r3, [r7, #16]
 8003d72:	80fb      	strh	r3, [r7, #6]
					y++;
 8003d74:	88bb      	ldrh	r3, [r7, #4]
 8003d76:	3301      	adds	r3, #1
 8003d78:	80bb      	strh	r3, [r7, #4]
					break;
 8003d7a:	e005      	b.n	8003d88 <lcd_ShowChar+0x194>
		for(t=0;t<8;t++)
 8003d7c:	7dbb      	ldrb	r3, [r7, #22]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	75bb      	strb	r3, [r7, #22]
 8003d82:	7dbb      	ldrb	r3, [r7, #22]
 8003d84:	2b07      	cmp	r3, #7
 8003d86:	d9b7      	bls.n	8003cf8 <lcd_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8003d88:	8a7b      	ldrh	r3, [r7, #18]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	827b      	strh	r3, [r7, #18]
 8003d8e:	8a7a      	ldrh	r2, [r7, #18]
 8003d90:	89bb      	ldrh	r3, [r7, #12]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	f4ff af74 	bcc.w	8003c80 <lcd_ShowChar+0x8c>
 8003d98:	e000      	b.n	8003d9c <lcd_ShowChar+0x1a8>
		else return;
 8003d9a:	bf00      	nop
				}
			}
		}
	}
}
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd90      	pop	{r4, r7, pc}
 8003da2:	bf00      	nop
 8003da4:	0800e9a8 	.word	0x0800e9a8
 8003da8:	0800ee1c 	.word	0x0800ee1c
 8003dac:	0800f40c 	.word	0x0800f40c
 8003db0:	080105dc 	.word	0x080105dc

08003db4 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460a      	mov	r2, r1
 8003dbe:	71fb      	strb	r3, [r7, #7]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8003dc8:	e004      	b.n	8003dd4 <mypow+0x20>
 8003dca:	79fa      	ldrb	r2, [r7, #7]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	fb02 f303 	mul.w	r3, r2, r3
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	79bb      	ldrb	r3, [r7, #6]
 8003dd6:	1e5a      	subs	r2, r3, #1
 8003dd8:	71ba      	strb	r2, [r7, #6]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f5      	bne.n	8003dca <mypow+0x16>
	return result;
 8003dde:	68fb      	ldr	r3, [r7, #12]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8003dec:	b590      	push	{r4, r7, lr}
 8003dee:	b089      	sub	sp, #36	; 0x24
 8003df0:	af04      	add	r7, sp, #16
 8003df2:	4604      	mov	r4, r0
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	80fb      	strh	r3, [r7, #6]
 8003dfe:	4603      	mov	r3, r0
 8003e00:	80bb      	strh	r3, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	807b      	strh	r3, [r7, #2]
 8003e06:	4613      	mov	r3, r2
 8003e08:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8003e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	e059      	b.n	8003ed0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8003e1c:	887c      	ldrh	r4, [r7, #2]
 8003e1e:	787a      	ldrb	r2, [r7, #1]
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	200a      	movs	r0, #10
 8003e2e:	f7ff ffc1 	bl	8003db4 <mypow>
 8003e32:	4603      	mov	r3, r0
 8003e34:	fbb4 f1f3 	udiv	r1, r4, r3
 8003e38:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <lcd_ShowIntNum+0xf8>)
 8003e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	1aca      	subs	r2, r1, r3
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8003e4e:	7bbb      	ldrb	r3, [r7, #14]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d121      	bne.n	8003e98 <lcd_ShowIntNum+0xac>
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	787b      	ldrb	r3, [r7, #1]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	da1c      	bge.n	8003e98 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8003e5e:	7b3b      	ldrb	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d117      	bne.n	8003e94 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	7b7b      	ldrb	r3, [r7, #13]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	fb12 f303 	smulbb	r3, r2, r3
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	4413      	add	r3, r2
 8003e76:	b298      	uxth	r0, r3
 8003e78:	8c3a      	ldrh	r2, [r7, #32]
 8003e7a:	88b9      	ldrh	r1, [r7, #4]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9302      	str	r3, [sp, #8]
 8003e80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f7ff feb1 	bl	8003bf4 <lcd_ShowChar>
				continue;
 8003e92:	e01a      	b.n	8003eca <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	7b7b      	ldrb	r3, [r7, #13]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	fb12 f303 	smulbb	r3, r2, r3
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	b298      	uxth	r0, r3
 8003eac:	7b3b      	ldrb	r3, [r7, #12]
 8003eae:	3330      	adds	r3, #48	; 0x30
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	8c3c      	ldrh	r4, [r7, #32]
 8003eb4:	88b9      	ldrh	r1, [r7, #4]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9302      	str	r3, [sp, #8]
 8003eba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	f7ff fe95 	bl	8003bf4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	787b      	ldrb	r3, [r7, #1]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3a1      	bcc.n	8003e1c <lcd_ShowIntNum+0x30>
	}
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	cccccccd 	.word	0xcccccccd

08003ee8 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b08b      	sub	sp, #44	; 0x2c
 8003eec:	af04      	add	r7, sp, #16
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	81fb      	strh	r3, [r7, #14]
 8003efe:	4603      	mov	r3, r0
 8003f00:	81bb      	strh	r3, [r7, #12]
 8003f02:	460b      	mov	r3, r1
 8003f04:	71fb      	strb	r3, [r7, #7]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8003f0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8003f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f16:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003ff0 <lcd_ShowFloatNum+0x108>
 8003f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f22:	ee17 3a90 	vmov	r3, s15
 8003f26:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75fb      	strb	r3, [r7, #23]
 8003f2c:	e057      	b.n	8003fde <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8003f2e:	8abc      	ldrh	r4, [r7, #20]
 8003f30:	79fa      	ldrb	r2, [r7, #7]
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	200a      	movs	r0, #10
 8003f40:	f7ff ff38 	bl	8003db4 <mypow>
 8003f44:	4603      	mov	r3, r0
 8003f46:	fbb4 f1f3 	udiv	r1, r4, r3
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <lcd_ShowFloatNum+0x10c>)
 8003f4c:	fba3 2301 	umull	r2, r3, r3, r1
 8003f50:	08da      	lsrs	r2, r3, #3
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	1aca      	subs	r2, r1, r3
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8003f60:	7dfa      	ldrb	r2, [r7, #23]
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	3b02      	subs	r3, #2
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d11d      	bne.n	8003fa6 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	3b02      	subs	r3, #2
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	7dbb      	ldrb	r3, [r7, #22]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	fb12 f303 	smulbb	r3, r2, r3
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	b298      	uxth	r0, r3
 8003f80:	88ba      	ldrh	r2, [r7, #4]
 8003f82:	89b9      	ldrh	r1, [r7, #12]
 8003f84:	2300      	movs	r3, #0
 8003f86:	9302      	str	r3, [sp, #8]
 8003f88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	222e      	movs	r2, #46	; 0x2e
 8003f96:	f7ff fe2d 	bl	8003bf4 <lcd_ShowChar>
			t++;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	7dbb      	ldrb	r3, [r7, #22]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	fb12 f303 	smulbb	r3, r2, r3
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	89fb      	ldrh	r3, [r7, #14]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	b298      	uxth	r0, r3
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	3330      	adds	r3, #48	; 0x30
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	88bc      	ldrh	r4, [r7, #4]
 8003fc2:	89b9      	ldrh	r1, [r7, #12]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9302      	str	r3, [sp, #8]
 8003fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	f7ff fe0e 	bl	8003bf4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
 8003fde:	7dfa      	ldrb	r2, [r7, #23]
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3a3      	bcc.n	8003f2e <lcd_ShowFloatNum+0x46>
	}
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	42c80000 	.word	0x42c80000
 8003ff4:	cccccccd 	.word	0xcccccccd

08003ff8 <lcd_ShowPicture>:

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	461a      	mov	r2, r3
 8004006:	4623      	mov	r3, r4
 8004008:	80fb      	strh	r3, [r7, #6]
 800400a:	4603      	mov	r3, r0
 800400c:	80bb      	strh	r3, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	807b      	strh	r3, [r7, #2]
 8004012:	4613      	mov	r3, r2
 8004014:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	4413      	add	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29c      	uxth	r4, r3
 8004026:	88ba      	ldrh	r2, [r7, #4]
 8004028:	883b      	ldrh	r3, [r7, #0]
 800402a:	4413      	add	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	88b9      	ldrh	r1, [r7, #4]
 8004034:	88f8      	ldrh	r0, [r7, #6]
 8004036:	4622      	mov	r2, r4
 8004038:	f7ff fc56 	bl	80038e8 <lcd_AddressSet>
	for(i=0;i<length;i++)
 800403c:	2300      	movs	r3, #0
 800403e:	82fb      	strh	r3, [r7, #22]
 8004040:	e027      	b.n	8004092 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8004042:	2300      	movs	r3, #0
 8004044:	82bb      	strh	r3, [r7, #20]
 8004046:	e01d      	b.n	8004084 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	3301      	adds	r3, #1
 800405a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405c:	4413      	add	r3, r2
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	b21a      	sxth	r2, r3
 8004068:	7bbb      	ldrb	r3, [r7, #14]
 800406a:	b21b      	sxth	r3, r3
 800406c:	4313      	orrs	r3, r2
 800406e:	b21b      	sxth	r3, r3
 8004070:	b29b      	uxth	r3, r3
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fc16 	bl	80038a4 <LCD_WR_DATA>
			k++;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	3301      	adds	r3, #1
 800407c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 800407e:	8abb      	ldrh	r3, [r7, #20]
 8004080:	3301      	adds	r3, #1
 8004082:	82bb      	strh	r3, [r7, #20]
 8004084:	8aba      	ldrh	r2, [r7, #20]
 8004086:	883b      	ldrh	r3, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d3dd      	bcc.n	8004048 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 800408c:	8afb      	ldrh	r3, [r7, #22]
 800408e:	3301      	adds	r3, #1
 8004090:	82fb      	strh	r3, [r7, #22]
 8004092:	8afa      	ldrh	r2, [r7, #22]
 8004094:	887b      	ldrh	r3, [r7, #2]
 8004096:	429a      	cmp	r2, r3
 8004098:	d3d3      	bcc.n	8004042 <lcd_ShowPicture+0x4a>
		}
	}
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd90      	pop	{r4, r7, pc}

080040a4 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <lcd_SetDir+0x44>)
 80040c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80040c4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <lcd_SetDir+0x44>)
 80040c8:	22f0      	movs	r2, #240	; 0xf0
 80040ca:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80040cc:	e006      	b.n	80040dc <lcd_SetDir+0x38>
		lcddev.width=240;
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <lcd_SetDir+0x44>)
 80040d0:	22f0      	movs	r2, #240	; 0xf0
 80040d2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <lcd_SetDir+0x44>)
 80040d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80040da:	805a      	strh	r2, [r3, #2]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	20000370 	.word	0x20000370

080040ec <lcd_init>:


void lcd_init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80040f0:	2200      	movs	r2, #0
 80040f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040f6:	48aa      	ldr	r0, [pc, #680]	; (80043a0 <lcd_init+0x2b4>)
 80040f8:	f004 f876 	bl	80081e8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80040fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004100:	f002 fd74 	bl	8006bec <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8004104:	2201      	movs	r2, #1
 8004106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800410a:	48a5      	ldr	r0, [pc, #660]	; (80043a0 <lcd_init+0x2b4>)
 800410c:	f004 f86c 	bl	80081e8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004110:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004114:	f002 fd6a 	bl	8006bec <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8004118:	2000      	movs	r0, #0
 800411a:	f7ff ffc3 	bl	80040a4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800411e:	20d3      	movs	r0, #211	; 0xd3
 8004120:	f7ff fbb0 	bl	8003884 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8004124:	f7ff fbce 	bl	80038c4 <LCD_RD_DATA>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	4b9d      	ldr	r3, [pc, #628]	; (80043a4 <lcd_init+0x2b8>)
 800412e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8004130:	f7ff fbc8 	bl	80038c4 <LCD_RD_DATA>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	4b9a      	ldr	r3, [pc, #616]	; (80043a4 <lcd_init+0x2b8>)
 800413a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800413c:	f7ff fbc2 	bl	80038c4 <LCD_RD_DATA>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	4b97      	ldr	r3, [pc, #604]	; (80043a4 <lcd_init+0x2b8>)
 8004146:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8004148:	4b96      	ldr	r3, [pc, #600]	; (80043a4 <lcd_init+0x2b8>)
 800414a:	889b      	ldrh	r3, [r3, #4]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	b29a      	uxth	r2, r3
 8004150:	4b94      	ldr	r3, [pc, #592]	; (80043a4 <lcd_init+0x2b8>)
 8004152:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8004154:	f7ff fbb6 	bl	80038c4 <LCD_RD_DATA>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <lcd_init+0x2b8>)
 800415e:	889b      	ldrh	r3, [r3, #4]
 8004160:	4313      	orrs	r3, r2
 8004162:	b29a      	uxth	r2, r3
 8004164:	4b8f      	ldr	r3, [pc, #572]	; (80043a4 <lcd_init+0x2b8>)
 8004166:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8004168:	20cf      	movs	r0, #207	; 0xcf
 800416a:	f7ff fb8b 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800416e:	2000      	movs	r0, #0
 8004170:	f7ff fb98 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8004174:	20c1      	movs	r0, #193	; 0xc1
 8004176:	f7ff fb95 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800417a:	2030      	movs	r0, #48	; 0x30
 800417c:	f7ff fb92 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8004180:	20ed      	movs	r0, #237	; 0xed
 8004182:	f7ff fb7f 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8004186:	2064      	movs	r0, #100	; 0x64
 8004188:	f7ff fb8c 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800418c:	2003      	movs	r0, #3
 800418e:	f7ff fb89 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8004192:	2012      	movs	r0, #18
 8004194:	f7ff fb86 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8004198:	2081      	movs	r0, #129	; 0x81
 800419a:	f7ff fb83 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800419e:	20e8      	movs	r0, #232	; 0xe8
 80041a0:	f7ff fb70 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80041a4:	2085      	movs	r0, #133	; 0x85
 80041a6:	f7ff fb7d 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80041aa:	2010      	movs	r0, #16
 80041ac:	f7ff fb7a 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80041b0:	207a      	movs	r0, #122	; 0x7a
 80041b2:	f7ff fb77 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80041b6:	20cb      	movs	r0, #203	; 0xcb
 80041b8:	f7ff fb64 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80041bc:	2039      	movs	r0, #57	; 0x39
 80041be:	f7ff fb71 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80041c2:	202c      	movs	r0, #44	; 0x2c
 80041c4:	f7ff fb6e 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041c8:	2000      	movs	r0, #0
 80041ca:	f7ff fb6b 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80041ce:	2034      	movs	r0, #52	; 0x34
 80041d0:	f7ff fb68 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80041d4:	2002      	movs	r0, #2
 80041d6:	f7ff fb65 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80041da:	20f7      	movs	r0, #247	; 0xf7
 80041dc:	f7ff fb52 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80041e0:	2020      	movs	r0, #32
 80041e2:	f7ff fb5f 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80041e6:	20ea      	movs	r0, #234	; 0xea
 80041e8:	f7ff fb4c 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7ff fb59 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7ff fb56 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80041f8:	20c0      	movs	r0, #192	; 0xc0
 80041fa:	f7ff fb43 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80041fe:	201b      	movs	r0, #27
 8004200:	f7ff fb50 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8004204:	20c1      	movs	r0, #193	; 0xc1
 8004206:	f7ff fb3d 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800420a:	2001      	movs	r0, #1
 800420c:	f7ff fb4a 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8004210:	20c5      	movs	r0, #197	; 0xc5
 8004212:	f7ff fb37 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8004216:	2030      	movs	r0, #48	; 0x30
 8004218:	f7ff fb44 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800421c:	2030      	movs	r0, #48	; 0x30
 800421e:	f7ff fb41 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8004222:	20c7      	movs	r0, #199	; 0xc7
 8004224:	f7ff fb2e 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8004228:	20b7      	movs	r0, #183	; 0xb7
 800422a:	f7ff fb3b 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800422e:	2036      	movs	r0, #54	; 0x36
 8004230:	f7ff fb28 	bl	8003884 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8004234:	2008      	movs	r0, #8
 8004236:	f7ff fb35 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800423a:	203a      	movs	r0, #58	; 0x3a
 800423c:	f7ff fb22 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8004240:	2055      	movs	r0, #85	; 0x55
 8004242:	f7ff fb2f 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8004246:	20b1      	movs	r0, #177	; 0xb1
 8004248:	f7ff fb1c 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800424c:	2000      	movs	r0, #0
 800424e:	f7ff fb29 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8004252:	201a      	movs	r0, #26
 8004254:	f7ff fb26 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8004258:	20b6      	movs	r0, #182	; 0xb6
 800425a:	f7ff fb13 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800425e:	200a      	movs	r0, #10
 8004260:	f7ff fb20 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8004264:	20a2      	movs	r0, #162	; 0xa2
 8004266:	f7ff fb1d 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800426a:	20f2      	movs	r0, #242	; 0xf2
 800426c:	f7ff fb0a 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004270:	2000      	movs	r0, #0
 8004272:	f7ff fb17 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8004276:	2026      	movs	r0, #38	; 0x26
 8004278:	f7ff fb04 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800427c:	2001      	movs	r0, #1
 800427e:	f7ff fb11 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8004282:	20e0      	movs	r0, #224	; 0xe0
 8004284:	f7ff fafe 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8004288:	200f      	movs	r0, #15
 800428a:	f7ff fb0b 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800428e:	202a      	movs	r0, #42	; 0x2a
 8004290:	f7ff fb08 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8004294:	2028      	movs	r0, #40	; 0x28
 8004296:	f7ff fb05 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800429a:	2008      	movs	r0, #8
 800429c:	f7ff fb02 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80042a0:	200e      	movs	r0, #14
 80042a2:	f7ff faff 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80042a6:	2008      	movs	r0, #8
 80042a8:	f7ff fafc 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80042ac:	2054      	movs	r0, #84	; 0x54
 80042ae:	f7ff faf9 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80042b2:	20a9      	movs	r0, #169	; 0xa9
 80042b4:	f7ff faf6 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80042b8:	2043      	movs	r0, #67	; 0x43
 80042ba:	f7ff faf3 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80042be:	200a      	movs	r0, #10
 80042c0:	f7ff faf0 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80042c4:	200f      	movs	r0, #15
 80042c6:	f7ff faed 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7ff faea 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80042d0:	2000      	movs	r0, #0
 80042d2:	f7ff fae7 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7ff fae4 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80042dc:	2000      	movs	r0, #0
 80042de:	f7ff fae1 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80042e2:	20e1      	movs	r0, #225	; 0xe1
 80042e4:	f7ff face 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7ff fadb 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80042ee:	2015      	movs	r0, #21
 80042f0:	f7ff fad8 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80042f4:	2017      	movs	r0, #23
 80042f6:	f7ff fad5 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80042fa:	2007      	movs	r0, #7
 80042fc:	f7ff fad2 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8004300:	2011      	movs	r0, #17
 8004302:	f7ff facf 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8004306:	2006      	movs	r0, #6
 8004308:	f7ff facc 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800430c:	202b      	movs	r0, #43	; 0x2b
 800430e:	f7ff fac9 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8004312:	2056      	movs	r0, #86	; 0x56
 8004314:	f7ff fac6 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8004318:	203c      	movs	r0, #60	; 0x3c
 800431a:	f7ff fac3 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800431e:	2005      	movs	r0, #5
 8004320:	f7ff fac0 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8004324:	2010      	movs	r0, #16
 8004326:	f7ff fabd 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800432a:	200f      	movs	r0, #15
 800432c:	f7ff faba 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8004330:	203f      	movs	r0, #63	; 0x3f
 8004332:	f7ff fab7 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8004336:	203f      	movs	r0, #63	; 0x3f
 8004338:	f7ff fab4 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800433c:	200f      	movs	r0, #15
 800433e:	f7ff fab1 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8004342:	202b      	movs	r0, #43	; 0x2b
 8004344:	f7ff fa9e 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004348:	2000      	movs	r0, #0
 800434a:	f7ff faab 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800434e:	2000      	movs	r0, #0
 8004350:	f7ff faa8 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8004354:	2001      	movs	r0, #1
 8004356:	f7ff faa5 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800435a:	203f      	movs	r0, #63	; 0x3f
 800435c:	f7ff faa2 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8004360:	202a      	movs	r0, #42	; 0x2a
 8004362:	f7ff fa8f 	bl	8003884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004366:	2000      	movs	r0, #0
 8004368:	f7ff fa9c 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800436c:	2000      	movs	r0, #0
 800436e:	f7ff fa99 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004372:	2000      	movs	r0, #0
 8004374:	f7ff fa96 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8004378:	20ef      	movs	r0, #239	; 0xef
 800437a:	f7ff fa93 	bl	80038a4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800437e:	2011      	movs	r0, #17
 8004380:	f7ff fa80 	bl	8003884 <LCD_WR_REG>
	HAL_Delay(120);
 8004384:	2078      	movs	r0, #120	; 0x78
 8004386:	f002 fc31 	bl	8006bec <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800438a:	2029      	movs	r0, #41	; 0x29
 800438c:	f7ff fa7a 	bl	8003884 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8004390:	2201      	movs	r2, #1
 8004392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004396:	4804      	ldr	r0, [pc, #16]	; (80043a8 <lcd_init+0x2bc>)
 8004398:	f003 ff26 	bl	80081e8 <HAL_GPIO_WritePin>
}
 800439c:	bf00      	nop
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40020800 	.word	0x40020800
 80043a4:	20000370 	.word	0x20000370
 80043a8:	40020000 	.word	0x40020000

080043ac <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	b298      	uxth	r0, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8b3a      	ldrh	r2, [r7, #24]
 80043d4:	4619      	mov	r1, r3
 80043d6:	f7ff fb3b 	bl	8003a50 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	b298      	uxth	r0, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	4413      	add	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	8b3a      	ldrh	r2, [r7, #24]
 80043f4:	4619      	mov	r1, r3
 80043f6:	f7ff fb2b 	bl	8003a50 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	b29b      	uxth	r3, r3
 8004402:	4413      	add	r3, r2
 8004404:	b298      	uxth	r0, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	b29a      	uxth	r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	b29b      	uxth	r3, r3
 8004412:	8b3a      	ldrh	r2, [r7, #24]
 8004414:	4619      	mov	r1, r3
 8004416:	f7ff fb1b 	bl	8003a50 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	b29b      	uxth	r3, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	b298      	uxth	r0, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	b29a      	uxth	r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	8b3a      	ldrh	r2, [r7, #24]
 8004434:	4619      	mov	r1, r3
 8004436:	f7ff fb0b 	bl	8003a50 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	b29a      	uxth	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	4413      	add	r3, r2
 8004444:	b298      	uxth	r0, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	b29a      	uxth	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	b29b      	uxth	r3, r3
 800444e:	4413      	add	r3, r2
 8004450:	b29b      	uxth	r3, r3
 8004452:	8b3a      	ldrh	r2, [r7, #24]
 8004454:	4619      	mov	r1, r3
 8004456:	f7ff fafb 	bl	8003a50 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	b29a      	uxth	r2, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	b298      	uxth	r0, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	b29b      	uxth	r3, r3
 800446e:	4413      	add	r3, r2
 8004470:	b29b      	uxth	r3, r3
 8004472:	8b3a      	ldrh	r2, [r7, #24]
 8004474:	4619      	mov	r1, r3
 8004476:	f7ff faeb 	bl	8003a50 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	b29a      	uxth	r2, r3
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	4413      	add	r3, r2
 8004484:	b298      	uxth	r0, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	b29b      	uxth	r3, r3
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	b29b      	uxth	r3, r3
 8004492:	8b3a      	ldrh	r2, [r7, #24]
 8004494:	4619      	mov	r1, r3
 8004496:	f7ff fadb 	bl	8003a50 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	b29a      	uxth	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	b298      	uxth	r0, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	8b3a      	ldrh	r2, [r7, #24]
 80044b4:	4619      	mov	r1, r3
 80044b6:	f7ff facb 	bl	8003a50 <lcd_DrawPoint>
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	; 0x28
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	f1c3 0303 	rsb	r3, r3, #3
 80044e2:	613b      	str	r3, [r7, #16]


	if (fill)
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d04f      	beq.n	800458a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80044ea:	e029      	b.n	8004540 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e00a      	b.n	8004508 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff ff55 	bl	80043ac <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	3301      	adds	r3, #1
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	429a      	cmp	r2, r3
 800450e:	ddf0      	ble.n	80044f2 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	da06      	bge.n	8004524 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	009a      	lsls	r2, r3, #2
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	3306      	adds	r3, #6
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	e00a      	b.n	800453a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	330a      	adds	r3, #10
 8004532:	613b      	str	r3, [r7, #16]
				y--;
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	3b01      	subs	r3, #1
 8004538:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	429a      	cmp	r2, r3
 8004546:	ddd1      	ble.n	80044ec <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8004548:	e023      	b.n	8004592 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff ff29 	bl	80043ac <_draw_circle_8>
			if (d < 0) {
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	da06      	bge.n	800456e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	3306      	adds	r3, #6
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	e00a      	b.n	8004584 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	330a      	adds	r3, #10
 800457c:	613b      	str	r3, [r7, #16]
				y--;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	3b01      	subs	r3, #1
 8004582:	61bb      	str	r3, [r7, #24]
			x++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	429a      	cmp	r2, r3
 8004590:	dddb      	ble.n	800454a <lcd_DrawCircle+0x88>
}
 8004592:	bf00      	nop
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800459a:	b590      	push	{r4, r7, lr}
 800459c:	b08b      	sub	sp, #44	; 0x2c
 800459e:	af04      	add	r7, sp, #16
 80045a0:	60ba      	str	r2, [r7, #8]
 80045a2:	461a      	mov	r2, r3
 80045a4:	4603      	mov	r3, r0
 80045a6:	81fb      	strh	r3, [r7, #14]
 80045a8:	460b      	mov	r3, r1
 80045aa:	81bb      	strh	r3, [r7, #12]
 80045ac:	4613      	mov	r3, r2
 80045ae:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80045b0:	89fb      	ldrh	r3, [r7, #14]
 80045b2:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80045b8:	e034      	b.n	8004624 <lcd_ShowStr+0x8a>
	{
		if(!bHz)
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d131      	bne.n	8004624 <lcd_ShowStr+0x8a>
		{
//			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
			if(*str>0x80)bHz=1;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d902      	bls.n	80045ce <lcd_ShowStr+0x34>
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
 80045cc:	e02a      	b.n	8004624 <lcd_ShowStr+0x8a>
			else
			{
				if(*str==0x0D)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b0d      	cmp	r3, #13
 80045d4:	d10b      	bne.n	80045ee <lcd_ShowStr+0x54>
				{
					y+=sizey;
 80045d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045da:	b29a      	uxth	r2, r3
 80045dc:	89bb      	ldrh	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80045e2:	8abb      	ldrh	r3, [r7, #20]
 80045e4:	81fb      	strh	r3, [r7, #14]
					str++;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	e017      	b.n	800461e <lcd_ShowStr+0x84>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	88fc      	ldrh	r4, [r7, #6]
 80045f4:	89b9      	ldrh	r1, [r7, #12]
 80045f6:	89f8      	ldrh	r0, [r7, #14]
 80045f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045fc:	9302      	str	r3, [sp, #8]
 80045fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4623      	mov	r3, r4
 800460a:	f7ff faf3 	bl	8003bf4 <lcd_ShowChar>
					x+=sizey/2;
 800460e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	b29a      	uxth	r2, r3
 8004618:	89fb      	ldrh	r3, [r7, #14]
 800461a:	4413      	add	r3, r2
 800461c:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3301      	adds	r3, #1
 8004622:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1c6      	bne.n	80045ba <lcd_ShowStr+0x20>
			}
		}
	}
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	bd90      	pop	{r4, r7, pc}
	...

08004638 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af04      	add	r7, sp, #16
 800463e:	60ba      	str	r2, [r7, #8]
 8004640:	461a      	mov	r2, r3
 8004642:	4603      	mov	r3, r0
 8004644:	81fb      	strh	r3, [r7, #14]
 8004646:	460b      	mov	r3, r1
 8004648:	81bb      	strh	r3, [r7, #12]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800464e:	68b8      	ldr	r0, [r7, #8]
 8004650:	f7fb fdbe 	bl	80001d0 <strlen>
 8004654:	4603      	mov	r3, r0
 8004656:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <lcd_StrCenter+0x60>)
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	8afb      	ldrh	r3, [r7, #22]
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	0fda      	lsrs	r2, r3, #31
 8004666:	4413      	add	r3, r2
 8004668:	105b      	asrs	r3, r3, #1
 800466a:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 800466c:	89fa      	ldrh	r2, [r7, #14]
 800466e:	8abb      	ldrh	r3, [r7, #20]
 8004670:	4413      	add	r3, r2
 8004672:	b298      	uxth	r0, r3
 8004674:	88fa      	ldrh	r2, [r7, #6]
 8004676:	89b9      	ldrh	r1, [r7, #12]
 8004678:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800467c:	9302      	str	r3, [sp, #8]
 800467e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	8c3b      	ldrh	r3, [r7, #32]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	f7ff ff85 	bl	800459a <lcd_ShowStr>
}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20000370 	.word	0x20000370

0800469c <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80046a0:	2201      	movs	r2, #1
 80046a2:	2140      	movs	r1, #64	; 0x40
 80046a4:	4802      	ldr	r0, [pc, #8]	; (80046b0 <led7_init+0x14>)
 80046a6:	f003 fd9f 	bl	80081e8 <HAL_GPIO_WritePin>
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40021800 	.word	0x40021800

080046b4 <led7_Scan>:

void led7_Scan(){
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <led7_Scan+0x104>)
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	b29a      	uxth	r2, r3
 80046c0:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <led7_Scan+0x104>)
 80046c2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80046c4:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <led7_Scan+0x108>)
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <led7_Scan+0x10c>)
 80046cc:	5c9b      	ldrb	r3, [r3, r2]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	b21a      	sxth	r2, r3
 80046d2:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <led7_Scan+0x104>)
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b21b      	sxth	r3, r3
 80046d8:	4313      	orrs	r3, r2
 80046da:	b21b      	sxth	r3, r3
 80046dc:	b29a      	uxth	r2, r3
 80046de:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <led7_Scan+0x104>)
 80046e0:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80046e2:	4b36      	ldr	r3, [pc, #216]	; (80047bc <led7_Scan+0x108>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d846      	bhi.n	8004778 <led7_Scan+0xc4>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <led7_Scan+0x3c>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004701 	.word	0x08004701
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800473d 	.word	0x0800473d
 80046fc:	0800475b 	.word	0x0800475b
	case 0:
		spi_buffer |= 0x00b0;
 8004700:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <led7_Scan+0x104>)
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004708:	b29a      	uxth	r2, r3
 800470a:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <led7_Scan+0x104>)
 800470c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <led7_Scan+0x104>)
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004716:	b29a      	uxth	r2, r3
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <led7_Scan+0x104>)
 800471a:	801a      	strh	r2, [r3, #0]
		break;
 800471c:	e02d      	b.n	800477a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800471e:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <led7_Scan+0x104>)
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8004726:	b29a      	uxth	r2, r3
 8004728:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <led7_Scan+0x104>)
 800472a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 800472c:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <led7_Scan+0x104>)
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	f023 0320 	bic.w	r3, r3, #32
 8004734:	b29a      	uxth	r2, r3
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <led7_Scan+0x104>)
 8004738:	801a      	strh	r2, [r3, #0]
		break;
 800473a:	e01e      	b.n	800477a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800473c:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <led7_Scan+0x104>)
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004744:	b29a      	uxth	r2, r3
 8004746:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <led7_Scan+0x104>)
 8004748:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800474a:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <led7_Scan+0x104>)
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	f023 0310 	bic.w	r3, r3, #16
 8004752:	b29a      	uxth	r2, r3
 8004754:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <led7_Scan+0x104>)
 8004756:	801a      	strh	r2, [r3, #0]
		break;
 8004758:	e00f      	b.n	800477a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800475a:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <led7_Scan+0x104>)
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004762:	b29a      	uxth	r2, r3
 8004764:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <led7_Scan+0x104>)
 8004766:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8004768:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <led7_Scan+0x104>)
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004770:	b29a      	uxth	r2, r3
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <led7_Scan+0x104>)
 8004774:	801a      	strh	r2, [r3, #0]
		break;
 8004776:	e000      	b.n	800477a <led7_Scan+0xc6>
	default:
		break;
 8004778:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <led7_Scan+0x108>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	3301      	adds	r3, #1
 8004780:	425a      	negs	r2, r3
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	f002 0203 	and.w	r2, r2, #3
 800478a:	bf58      	it	pl
 800478c:	4253      	negpl	r3, r2
 800478e:	b29a      	uxth	r2, r3
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <led7_Scan+0x108>)
 8004792:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8004794:	2200      	movs	r2, #0
 8004796:	2140      	movs	r1, #64	; 0x40
 8004798:	480a      	ldr	r0, [pc, #40]	; (80047c4 <led7_Scan+0x110>)
 800479a:	f003 fd25 	bl	80081e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800479e:	2301      	movs	r3, #1
 80047a0:	2202      	movs	r2, #2
 80047a2:	4905      	ldr	r1, [pc, #20]	; (80047b8 <led7_Scan+0x104>)
 80047a4:	4808      	ldr	r0, [pc, #32]	; (80047c8 <led7_Scan+0x114>)
 80047a6:	f005 f9f6 	bl	8009b96 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80047aa:	2201      	movs	r2, #1
 80047ac:	2140      	movs	r1, #64	; 0x40
 80047ae:	4805      	ldr	r0, [pc, #20]	; (80047c4 <led7_Scan+0x110>)
 80047b0:	f003 fd1a 	bl	80081e8 <HAL_GPIO_WritePin>
}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000066 	.word	0x20000066
 80047bc:	2000017c 	.word	0x2000017c
 80047c0:	20000058 	.word	0x20000058
 80047c4:	40021800 	.word	0x40021800
 80047c8:	20000418 	.word	0x20000418

080047cc <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db0e      	blt.n	80047fe <led7_SetDigit+0x32>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b09      	cmp	r3, #9
 80047e4:	dc0b      	bgt.n	80047fe <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <led7_SetDigit+0x40>)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	b2d9      	uxtb	r1, r3
 80047f4:	4a06      	ldr	r2, [pc, #24]	; (8004810 <led7_SetDigit+0x44>)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4413      	add	r3, r2
 80047fa:	460a      	mov	r2, r1
 80047fc:	701a      	strb	r2, [r3, #0]
	}
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2000005c 	.word	0x2000005c
 8004810:	20000058 	.word	0x20000058

08004814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004818:	f002 f976 	bl	8006b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800481c:	f000 f82e 	bl	800487c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004820:	f7fd fdb0 	bl	8002384 <MX_GPIO_Init>
  MX_DMA_Init();
 8004824:	f7fc fd50 	bl	80012c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004828:	f7fc fbaa 	bl	8000f80 <MX_ADC1_Init>
  MX_FSMC_Init();
 800482c:	f7fd fad6 	bl	8001ddc <MX_FSMC_Init>
  MX_I2C1_Init();
 8004830:	f7fd fed6 	bl	80025e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004834:	f000 fbf4 	bl	8005020 <MX_SPI1_Init>
  MX_TIM2_Init();
 8004838:	f001 f85c 	bl	80058f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800483c:	f002 f83a 	bl	80068b4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004840:	f001 f808 	bl	8005854 <MX_TIM1_Init>
  MX_TIM13_Init();
 8004844:	f001 f8a2 	bl	800598c <MX_TIM13_Init>
  MX_USART2_UART_Init();
 8004848:	f002 f85e 	bl	8006908 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800484c:	f000 f880 	bl	8004950 <system_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Scan touch screen
	  // 50ms task
	  if(flag_timer2 == 1){
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <main+0x64>)
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d1fb      	bne.n	8004850 <main+0x3c>
		  flag_timer2 = 0;
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <main+0x64>)
 800485a:	2200      	movs	r2, #0
 800485c:	801a      	strh	r2, [r3, #0]
		  touch_Scan();
 800485e:	f001 ff95 	bl	800678c <touch_Scan>
		  button_Scan();
 8004862:	f7fc fcc5 	bl	80011f0 <button_Scan>

		  input_process();
 8004866:	f7fd f817 	bl	8001898 <input_process>
		  fsm_ingame();
 800486a:	f7fd fa0f 	bl	8001c8c <fsm_ingame>
		  update_7seg_time();
 800486e:	f7fe ff63 	bl	8003738 <update_7seg_time>
		  process_esp();
 8004872:	f7fc fdef 	bl	8001454 <process_esp>
	  if(flag_timer2 == 1){
 8004876:	e7eb      	b.n	8004850 <main+0x3c>
 8004878:	2000017e 	.word	0x2000017e

0800487c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b094      	sub	sp, #80	; 0x50
 8004880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004882:	f107 0320 	add.w	r3, r7, #32
 8004886:	2230      	movs	r2, #48	; 0x30
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f007 ff78 	bl	800c780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a0:	2300      	movs	r3, #0
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	4b28      	ldr	r3, [pc, #160]	; (8004948 <SystemClock_Config+0xcc>)
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	4a27      	ldr	r2, [pc, #156]	; (8004948 <SystemClock_Config+0xcc>)
 80048aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ae:	6413      	str	r3, [r2, #64]	; 0x40
 80048b0:	4b25      	ldr	r3, [pc, #148]	; (8004948 <SystemClock_Config+0xcc>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048bc:	2300      	movs	r3, #0
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <SystemClock_Config+0xd0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a21      	ldr	r2, [pc, #132]	; (800494c <SystemClock_Config+0xd0>)
 80048c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b1f      	ldr	r3, [pc, #124]	; (800494c <SystemClock_Config+0xd0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048d8:	2302      	movs	r3, #2
 80048da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048dc:	2301      	movs	r3, #1
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048e0:	2310      	movs	r3, #16
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048e4:	2302      	movs	r3, #2
 80048e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048e8:	2300      	movs	r3, #0
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80048ec:	2308      	movs	r3, #8
 80048ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80048f0:	23a8      	movs	r3, #168	; 0xa8
 80048f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048f4:	2302      	movs	r3, #2
 80048f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80048f8:	2304      	movs	r3, #4
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048fc:	f107 0320 	add.w	r3, r7, #32
 8004900:	4618      	mov	r0, r3
 8004902:	f004 fc4b 	bl	800919c <HAL_RCC_OscConfig>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800490c:	f000 f846 	bl	800499c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004910:	230f      	movs	r3, #15
 8004912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004914:	2302      	movs	r3, #2
 8004916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800491c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004922:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	2105      	movs	r1, #5
 800492e:	4618      	mov	r0, r3
 8004930:	f004 feac 	bl	800968c <HAL_RCC_ClockConfig>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800493a:	f000 f82f 	bl	800499c <Error_Handler>
  }
}
 800493e:	bf00      	nop
 8004940:	3750      	adds	r7, #80	; 0x50
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40007000 	.word	0x40007000

08004950 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	  timer_init();
 8004954:	f000 fa50 	bl	8004df8 <timer_init>
	  button_init();
 8004958:	f7fc fc3e 	bl	80011d8 <button_init>
	  lcd_init();
 800495c:	f7ff fbc6 	bl	80040ec <lcd_init>
	  sensor_init();
 8004960:	f000 f822 	bl	80049a8 <sensor_init>
	  touch_init();
 8004964:	f001 ff02 	bl	800676c <touch_init>
	  led7_init();
 8004968:	f7ff fe98 	bl	800469c <led7_init>
	  //ds3231_init();
	  uart_init_esp();
 800496c:	f001 ff42 	bl	80067f4 <uart_init_esp>

	  home_lcd();		// Hien thi man hinh vua moi dau
 8004970:	f7fd fe64 	bl	800263c <home_lcd>
	  snake_init();		// Khoi tao ran
 8004974:	f000 f86a 	bl	8004a4c <snake_init>
	  reset_7seg();
 8004978:	f7fe fe7e 	bl	8003678 <reset_7seg>

	  setTimer2(50);
 800497c:	2032      	movs	r0, #50	; 0x32
 800497e:	f000 fa49 	bl	8004e14 <setTimer2>
	  setTimer3(50);
 8004982:	2032      	movs	r0, #50	; 0x32
 8004984:	f000 fa62 	bl	8004e4c <setTimer3>
	  setTimer4(3000);
 8004988:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800498c:	f000 fa7a 	bl	8004e84 <setTimer4>
	  setTimer5(1000);
 8004990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004994:	f000 fa92 	bl	8004ebc <setTimer5>
}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}

0800499c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049a0:	b672      	cpsid	i
}
 80049a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049a4:	e7fe      	b.n	80049a4 <Error_Handler+0x8>
	...

080049a8 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80049ac:	2205      	movs	r2, #5
 80049ae:	4903      	ldr	r1, [pc, #12]	; (80049bc <sensor_init+0x14>)
 80049b0:	4803      	ldr	r0, [pc, #12]	; (80049c0 <sensor_init+0x18>)
 80049b2:	f002 f983 	bl	8006cbc <HAL_ADC_Start_DMA>
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	2000040c 	.word	0x2000040c
 80049c0:	200001ac 	.word	0x200001ac

080049c4 <sensor_Read>:

void sensor_Read(){
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80049c8:	2205      	movs	r2, #5
 80049ca:	4903      	ldr	r1, [pc, #12]	; (80049d8 <sensor_Read+0x14>)
 80049cc:	4803      	ldr	r0, [pc, #12]	; (80049dc <sensor_Read+0x18>)
 80049ce:	f002 f975 	bl	8006cbc <HAL_ADC_Start_DMA>
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	2000040c 	.word	0x2000040c
 80049dc:	200001ac 	.word	0x200001ac

080049e0 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
	return adc_receive[2];
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <sensor_GetLight+0x14>)
 80049e6:	889b      	ldrh	r3, [r3, #4]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	2000040c 	.word	0x2000040c

080049f8 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <sensor_GetPotentiometer+0x14>)
 80049fe:	88db      	ldrh	r3, [r3, #6]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2000040c 	.word	0x2000040c

08004a10 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <sensor_GetTemperature+0x30>)
 8004a16:	891b      	ldrh	r3, [r3, #8]
 8004a18:	ee07 3a90 	vmov	s15, r3
 8004a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a20:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004a44 <sensor_GetTemperature+0x34>
 8004a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a28:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004a48 <sensor_GetTemperature+0x38>
 8004a2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a30:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a34:	eeb0 0a67 	vmov.f32	s0, s15
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	2000040c 	.word	0x2000040c
 8004a44:	43a50000 	.word	0x43a50000
 8004a48:	457ff000 	.word	0x457ff000

08004a4c <snake_init>:
 *      Author: ADMIN
 */

#include "snake.h"

void snake_init(){
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
	snake[0].x = (POS_X_MAX - POS_X_MIN) / 2;
 8004a52:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <snake_init+0x6c>)
 8004a54:	2277      	movs	r2, #119	; 0x77
 8004a56:	601a      	str	r2, [r3, #0]
	snake[0].y = (POS_Y_MAX - POS_Y_MIN) / 2;
 8004a58:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <snake_init+0x6c>)
 8004a5a:	225a      	movs	r2, #90	; 0x5a
 8004a5c:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 8004a5e:	2301      	movs	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	e00d      	b.n	8004a80 <snake_init+0x34>
		snake[i].x = 0;
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <snake_init+0x6c>)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <snake_init+0x6c>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	ddee      	ble.n	8004a64 <snake_init+0x18>
	}
	move = UP;
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <snake_init+0x70>)
 8004a88:	2203      	movs	r2, #3
 8004a8a:	601a      	str	r2, [r3, #0]
	length = 1;
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <snake_init+0x74>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
	current_score = 0;
 8004a92:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <snake_init+0x78>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
	counter_time_score = 0;
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <snake_init+0x7c>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
	counter_time = 60;
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <snake_init+0x80>)
 8004aa0:	223c      	movs	r2, #60	; 0x3c
 8004aa2:	601a      	str	r2, [r3, #0]
	tempFlag = 0;
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <snake_init+0x84>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000268 	.word	0x20000268
 8004abc:	20000164 	.word	0x20000164
 8004ac0:	2000004c 	.word	0x2000004c
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	20000168 	.word	0x20000168
 8004acc:	2000016c 	.word	0x2000016c
 8004ad0:	20000170 	.word	0x20000170

08004ad4 <is_collision_food>:

int is_collision_food(struct Point p){
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	463b      	mov	r3, r7
 8004adc:	e883 0003 	stmia.w	r3, {r0, r1}
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	dd08      	ble.n	8004af8 <is_collision_food+0x24>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2bee      	cmp	r3, #238	; 0xee
 8004aea:	dc05      	bgt.n	8004af8 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8004aec:	687b      	ldr	r3, [r7, #4]
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8004aee:	2b12      	cmp	r3, #18
 8004af0:	dd02      	ble.n	8004af8 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2bc6      	cmp	r3, #198	; 0xc6
 8004af6:	dd01      	ble.n	8004afc <is_collision_food+0x28>
		return 1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e01c      	b.n	8004b36 <is_collision_food+0x62>
	}
	for (int i = 0; i < length; i++){
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e013      	b.n	8004b2a <is_collision_food+0x56>
		if (p.x == snake[i].x && p.y == snake[i].y)
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	490f      	ldr	r1, [pc, #60]	; (8004b44 <is_collision_food+0x70>)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d109      	bne.n	8004b24 <is_collision_food+0x50>
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	490c      	ldr	r1, [pc, #48]	; (8004b44 <is_collision_food+0x70>)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	440b      	add	r3, r1
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d101      	bne.n	8004b24 <is_collision_food+0x50>
			return 1;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e008      	b.n	8004b36 <is_collision_food+0x62>
	for (int i = 0; i < length; i++){
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <is_collision_food+0x74>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3e6      	bcc.n	8004b02 <is_collision_food+0x2e>
	}
	return 0;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000268 	.word	0x20000268
 8004b48:	2000004c 	.word	0x2000004c

08004b4c <is_collision>:

int is_collision(){
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 8004b52:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <is_collision+0x74>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dd0b      	ble.n	8004b72 <is_collision+0x26>
 8004b5a:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <is_collision+0x74>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2bee      	cmp	r3, #238	; 0xee
 8004b60:	dc07      	bgt.n	8004b72 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <is_collision+0x74>)
 8004b64:	685b      	ldr	r3, [r3, #4]
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 8004b66:	2b12      	cmp	r3, #18
 8004b68:	dd03      	ble.n	8004b72 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <is_collision+0x74>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2bc6      	cmp	r3, #198	; 0xc6
 8004b70:	dd01      	ble.n	8004b76 <is_collision+0x2a>
		return 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e01e      	b.n	8004bb4 <is_collision+0x68>
	}
	for (int i = 1; i < length; i++){
 8004b76:	2301      	movs	r3, #1
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	e015      	b.n	8004ba8 <is_collision+0x5c>
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <is_collision+0x74>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	490f      	ldr	r1, [pc, #60]	; (8004bc0 <is_collision+0x74>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d10a      	bne.n	8004ba2 <is_collision+0x56>
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <is_collision+0x74>)
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	490b      	ldr	r1, [pc, #44]	; (8004bc0 <is_collision+0x74>)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	440b      	add	r3, r1
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d101      	bne.n	8004ba2 <is_collision+0x56>
			return 1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e008      	b.n	8004bb4 <is_collision+0x68>
	for (int i = 1; i < length; i++){
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <is_collision+0x78>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d3e4      	bcc.n	8004b7c <is_collision+0x30>
	}
	return 0;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	20000268 	.word	0x20000268
 8004bc4:	2000004c 	.word	0x2000004c

08004bc8 <is_eat>:

int is_eat(){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
	if (snake[0].x <= (food.x + 6) && snake[0].x >= (food.x - 6) &&
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <is_eat+0x54>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <is_eat+0x58>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3306      	adds	r3, #6
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	dc1d      	bgt.n	8004c16 <is_eat+0x4e>
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <is_eat+0x54>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <is_eat+0x58>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3b06      	subs	r3, #6
 8004be4:	429a      	cmp	r2, r3
 8004be6:	db16      	blt.n	8004c16 <is_eat+0x4e>
		snake[0].y <= (food.y + 6) && snake[0].y >= (food.y - 6) ){
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <is_eat+0x54>)
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <is_eat+0x58>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	3306      	adds	r3, #6
	if (snake[0].x <= (food.x + 6) && snake[0].x >= (food.x - 6) &&
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	dc0f      	bgt.n	8004c16 <is_eat+0x4e>
		snake[0].y <= (food.y + 6) && snake[0].y >= (food.y - 6) ){
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <is_eat+0x54>)
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <is_eat+0x58>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	3b06      	subs	r3, #6
 8004c00:	429a      	cmp	r2, r3
 8004c02:	db08      	blt.n	8004c16 <is_eat+0x4e>
		point_clr(food);
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <is_eat+0x58>)
 8004c06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c0a:	f7fe fcfd 	bl	8003608 <point_clr>
		reDraw_snake();
 8004c0e:	f000 f8cf 	bl	8004db0 <reDraw_snake>
		return 1;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <is_eat+0x50>
	}
	return 0;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000268 	.word	0x20000268
 8004c20:	20000050 	.word	0x20000050

08004c24 <get_rand>:

int get_rand(int max){
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	return 0 + (int)(rand()*(max - 0 + 1.0)/(1.0 + RAND_MAX));
 8004c2c:	f007 fdb0 	bl	800c790 <rand>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fb fc76 	bl	8000524 <__aeabi_i2d>
 8004c38:	4604      	mov	r4, r0
 8004c3a:	460d      	mov	r5, r1
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fb fc71 	bl	8000524 <__aeabi_i2d>
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <get_rand+0x5c>)
 8004c48:	f7fb fb20 	bl	800028c <__adddf3>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4620      	mov	r0, r4
 8004c52:	4629      	mov	r1, r5
 8004c54:	f7fb fcd0 	bl	80005f8 <__aeabi_dmul>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <get_rand+0x60>)
 8004c66:	f7fb fdf1 	bl	800084c <__aeabi_ddiv>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4619      	mov	r1, r3
 8004c72:	f7fb ff71 	bl	8000b58 <__aeabi_d2iz>
 8004c76:	4603      	mov	r3, r0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c80:	3ff00000 	.word	0x3ff00000
 8004c84:	41e00000 	.word	0x41e00000

08004c88 <rand_food>:

void rand_food(){
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
	struct Point p;
	p.x = get_rand(POS_X_MAX);
 8004c8e:	20ef      	movs	r0, #239	; 0xef
 8004c90:	f7ff ffc8 	bl	8004c24 <get_rand>
 8004c94:	4603      	mov	r3, r0
 8004c96:	603b      	str	r3, [r7, #0]
	p.y = get_rand(POS_Y_MAX);
 8004c98:	20c7      	movs	r0, #199	; 0xc7
 8004c9a:	f7ff ffc3 	bl	8004c24 <get_rand>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004ca2:	e009      	b.n	8004cb8 <rand_food+0x30>
		p.x = get_rand(POS_X_MAX);
 8004ca4:	20ef      	movs	r0, #239	; 0xef
 8004ca6:	f7ff ffbd 	bl	8004c24 <get_rand>
 8004caa:	4603      	mov	r3, r0
 8004cac:	603b      	str	r3, [r7, #0]
		p.y = get_rand(POS_Y_MAX);
 8004cae:	20c7      	movs	r0, #199	; 0xc7
 8004cb0:	f7ff ffb8 	bl	8004c24 <get_rand>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004cb8:	463b      	mov	r3, r7
 8004cba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cbe:	f7ff ff09 	bl	8004ad4 <is_collision_food>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d0ed      	beq.n	8004ca4 <rand_food+0x1c>
	}
	food = p;
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <rand_food+0x60>)
 8004cca:	461a      	mov	r2, r3
 8004ccc:	463b      	mov	r3, r7
 8004cce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cd2:	e882 0003 	stmia.w	r2, {r0, r1}
	point_food_lcd(food);
 8004cd6:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <rand_food+0x60>)
 8004cd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cdc:	f7fe fc81 	bl	80035e2 <point_food_lcd>
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000050 	.word	0x20000050

08004cec <move_snake>:

void move_snake(){
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
	point_clr(snake[length - 1]);
 8004cf2:	4b2c      	ldr	r3, [pc, #176]	; (8004da4 <move_snake+0xb8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <move_snake+0xbc>)
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d02:	f7fe fc81 	bl	8003608 <point_clr>
	for (int i = length - 1; i > 0; i--){
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <move_snake+0xb8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	e016      	b.n	8004d3e <move_snake+0x52>
		snake[i].x = snake[i-1].x;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <move_snake+0xbc>)
 8004d16:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004d1a:	4923      	ldr	r1, [pc, #140]	; (8004da8 <move_snake+0xbc>)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[i].y = snake[i-1].y;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <move_snake+0xbc>)
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	491e      	ldr	r1, [pc, #120]	; (8004da8 <move_snake+0xbc>)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	440b      	add	r3, r1
 8004d36:	605a      	str	r2, [r3, #4]
	for (int i = length - 1; i > 0; i--){
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	dce5      	bgt.n	8004d10 <move_snake+0x24>
	}
	switch (move) {
 8004d44:	4b19      	ldr	r3, [pc, #100]	; (8004dac <move_snake+0xc0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d822      	bhi.n	8004d94 <move_snake+0xa8>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <move_snake+0x68>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004d71 	.word	0x08004d71
 8004d5c:	08004d7d 	.word	0x08004d7d
 8004d60:	08004d89 	.word	0x08004d89
		case RIGHT:
			snake[0].x += 7;
 8004d64:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <move_snake+0xbc>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3307      	adds	r3, #7
 8004d6a:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <move_snake+0xbc>)
 8004d6c:	6013      	str	r3, [r2, #0]
			break;
 8004d6e:	e012      	b.n	8004d96 <move_snake+0xaa>
		case LEFT:
			snake[0].x -= 7;
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <move_snake+0xbc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3b07      	subs	r3, #7
 8004d76:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <move_snake+0xbc>)
 8004d78:	6013      	str	r3, [r2, #0]
			break;
 8004d7a:	e00c      	b.n	8004d96 <move_snake+0xaa>
		case UP:
			snake[0].y -= 7;
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <move_snake+0xbc>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	3b07      	subs	r3, #7
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <move_snake+0xbc>)
 8004d84:	6053      	str	r3, [r2, #4]
			break;
 8004d86:	e006      	b.n	8004d96 <move_snake+0xaa>
		case DOWN:
			snake[0].y += 7;
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <move_snake+0xbc>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	3307      	adds	r3, #7
 8004d8e:	4a06      	ldr	r2, [pc, #24]	; (8004da8 <move_snake+0xbc>)
 8004d90:	6053      	str	r3, [r2, #4]
			break;
 8004d92:	e000      	b.n	8004d96 <move_snake+0xaa>
		default:
			break;
 8004d94:	bf00      	nop
	}
	reDraw_snake();
 8004d96:	f000 f80b 	bl	8004db0 <reDraw_snake>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2000004c 	.word	0x2000004c
 8004da8:	20000268 	.word	0x20000268
 8004dac:	20000164 	.word	0x20000164

08004db0 <reDraw_snake>:

void reDraw_snake(){
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
	point_head_lcd(snake[0]);
 8004db6:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <reDraw_snake+0x40>)
 8004db8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dbc:	f7fe fba4 	bl	8003508 <point_head_lcd>
	for (int i = 1; i < length; i++){
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	e00a      	b.n	8004ddc <reDraw_snake+0x2c>
		point_snake_lcd(snake[i]);
 8004dc6:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <reDraw_snake+0x40>)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4413      	add	r3, r2
 8004dce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dd2:	f7fe fbb4 	bl	800353e <point_snake_lcd>
	for (int i = 1; i < length; i++){
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <reDraw_snake+0x44>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d3ef      	bcc.n	8004dc6 <reDraw_snake+0x16>
	}
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000268 	.word	0x20000268
 8004df4:	2000004c 	.word	0x2000004c

08004df8 <timer_init>:

uint16_t flag_timer5 = 0;
uint16_t timer5_counter = 0;
uint16_t timer5_MUL = 0;

void timer_init(){
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004dfc:	4803      	ldr	r0, [pc, #12]	; (8004e0c <timer_init+0x14>)
 8004dfe:	f005 fce5 	bl	800a7cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8004e02:	4803      	ldr	r0, [pc, #12]	; (8004e10 <timer_init+0x18>)
 8004e04:	f005 fc7a 	bl	800a6fc <HAL_TIM_Base_Start>
}
 8004e08:	bf00      	nop
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20000500 	.word	0x20000500
 8004e10:	200004b8 	.word	0x200004b8

08004e14 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8004e1e:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <setTimer2+0x2c>)
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <setTimer2+0x2c>)
 8004e26:	881a      	ldrh	r2, [r3, #0]
 8004e28:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <setTimer2+0x30>)
 8004e2a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <setTimer2+0x34>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	801a      	strh	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000182 	.word	0x20000182
 8004e44:	20000180 	.word	0x20000180
 8004e48:	2000017e 	.word	0x2000017e

08004e4c <setTimer3>:

void setTimer3(uint16_t duration){
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <setTimer3+0x2c>)
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <setTimer3+0x2c>)
 8004e5e:	881a      	ldrh	r2, [r3, #0]
 8004e60:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <setTimer3+0x30>)
 8004e62:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <setTimer3+0x34>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	801a      	strh	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000188 	.word	0x20000188
 8004e7c:	20000186 	.word	0x20000186
 8004e80:	20000184 	.word	0x20000184

08004e84 <setTimer4>:

void setTimer4(uint16_t duration){
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 8004e8e:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <setTimer4+0x2c>)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <setTimer4+0x2c>)
 8004e96:	881a      	ldrh	r2, [r3, #0]
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <setTimer4+0x30>)
 8004e9a:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <setTimer4+0x34>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	801a      	strh	r2, [r3, #0]
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	2000018e 	.word	0x2000018e
 8004eb4:	2000018c 	.word	0x2000018c
 8004eb8:	2000018a 	.word	0x2000018a

08004ebc <setTimer5>:

void setTimer5(uint16_t duration){
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 8004ec6:	4a08      	ldr	r2, [pc, #32]	; (8004ee8 <setTimer5+0x2c>)
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <setTimer5+0x2c>)
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <setTimer5+0x30>)
 8004ed2:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <setTimer5+0x34>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	801a      	strh	r2, [r3, #0]
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000194 	.word	0x20000194
 8004eec:	20000192 	.word	0x20000192
 8004ef0:	20000190 	.word	0x20000190

08004ef4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f04:	d155      	bne.n	8004fb2 <HAL_TIM_PeriodElapsedCallback+0xbe>
		if(timer2_counter > 0){
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d010      	beq.n	8004f30 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8004f0e:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	4b29      	ldr	r3, [pc, #164]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004f18:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0){
 8004f1a:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004f22:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8004f28:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004f2a:	881a      	ldrh	r2, [r3, #0]
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004f2e:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8004f38:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f42:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0){
 8004f44:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8004f4c:	4b1f      	ldr	r3, [pc, #124]	; (8004fcc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004f52:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004f54:	881a      	ldrh	r2, [r3, #0]
 8004f56:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f58:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d010      	beq.n	8004f84 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8004f62:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f6c:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0){
 8004f6e:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8004f76:	4b18      	ldr	r3, [pc, #96]	; (8004fd8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8004f7c:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f82:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8004f84:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d010      	beq.n	8004fae <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 8004f8c:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f96:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0){
 8004f98:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 8004fa0:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004fa8:	881a      	ldrh	r2, [r3, #0]
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004fac:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8004fae:	f7ff fb81 	bl	80046b4 <led7_Scan>
	}
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000180 	.word	0x20000180
 8004fc0:	2000017e 	.word	0x2000017e
 8004fc4:	20000182 	.word	0x20000182
 8004fc8:	20000186 	.word	0x20000186
 8004fcc:	20000184 	.word	0x20000184
 8004fd0:	20000188 	.word	0x20000188
 8004fd4:	2000018c 	.word	0x2000018c
 8004fd8:	2000018a 	.word	0x2000018a
 8004fdc:	2000018e 	.word	0x2000018e
 8004fe0:	20000192 	.word	0x20000192
 8004fe4:	20000190 	.word	0x20000190
 8004fe8:	20000194 	.word	0x20000194

08004fec <delay_us>:

void delay_us (uint16_t us){
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004ff6:	4b09      	ldr	r3, [pc, #36]	; (800501c <delay_us+0x30>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8004ffe:	bf00      	nop
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <delay_us+0x30>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	429a      	cmp	r2, r3
 800500a:	d3f9      	bcc.n	8005000 <delay_us+0x14>
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	200004b8 	.word	0x200004b8

08005020 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <MX_SPI1_Init+0x64>)
 8005026:	4a18      	ldr	r2, [pc, #96]	; (8005088 <MX_SPI1_Init+0x68>)
 8005028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800502a:	4b16      	ldr	r3, [pc, #88]	; (8005084 <MX_SPI1_Init+0x64>)
 800502c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <MX_SPI1_Init+0x64>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005038:	4b12      	ldr	r3, [pc, #72]	; (8005084 <MX_SPI1_Init+0x64>)
 800503a:	2200      	movs	r2, #0
 800503c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800503e:	4b11      	ldr	r3, [pc, #68]	; (8005084 <MX_SPI1_Init+0x64>)
 8005040:	2200      	movs	r2, #0
 8005042:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <MX_SPI1_Init+0x64>)
 8005046:	2200      	movs	r2, #0
 8005048:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800504a:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <MX_SPI1_Init+0x64>)
 800504c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005050:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <MX_SPI1_Init+0x64>)
 8005054:	2200      	movs	r2, #0
 8005056:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <MX_SPI1_Init+0x64>)
 800505a:	2200      	movs	r2, #0
 800505c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800505e:	4b09      	ldr	r3, [pc, #36]	; (8005084 <MX_SPI1_Init+0x64>)
 8005060:	2200      	movs	r2, #0
 8005062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <MX_SPI1_Init+0x64>)
 8005066:	2200      	movs	r2, #0
 8005068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <MX_SPI1_Init+0x64>)
 800506c:	220a      	movs	r2, #10
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005070:	4804      	ldr	r0, [pc, #16]	; (8005084 <MX_SPI1_Init+0x64>)
 8005072:	f004 fd07 	bl	8009a84 <HAL_SPI_Init>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800507c:	f7ff fc8e 	bl	800499c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000418 	.word	0x20000418
 8005088:	40013000 	.word	0x40013000

0800508c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <HAL_MspInit+0x4c>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <HAL_MspInit+0x4c>)
 800509c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a0:	6453      	str	r3, [r2, #68]	; 0x44
 80050a2:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <HAL_MspInit+0x4c>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_MspInit+0x4c>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	4a08      	ldr	r2, [pc, #32]	; (80050d8 <HAL_MspInit+0x4c>)
 80050b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050bc:	6413      	str	r3, [r2, #64]	; 0x40
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <HAL_MspInit+0x4c>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800

080050dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	f107 0314 	add.w	r3, r7, #20
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a3c      	ldr	r2, [pc, #240]	; (80051ec <HAL_ADC_MspInit+0x110>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d171      	bne.n	80051e2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	4b3b      	ldr	r3, [pc, #236]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	4a3a      	ldr	r2, [pc, #232]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510c:	6453      	str	r3, [r2, #68]	; 0x44
 800510e:	4b38      	ldr	r3, [pc, #224]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	4b34      	ldr	r3, [pc, #208]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	4a33      	ldr	r2, [pc, #204]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 8005124:	f043 0304 	orr.w	r3, r3, #4
 8005128:	6313      	str	r3, [r2, #48]	; 0x30
 800512a:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	4a2c      	ldr	r2, [pc, #176]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 8005140:	f043 0302 	orr.w	r3, r3, #2
 8005144:	6313      	str	r3, [r2, #48]	; 0x30
 8005146:	4b2a      	ldr	r3, [pc, #168]	; (80051f0 <HAL_ADC_MspInit+0x114>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005152:	2307      	movs	r3, #7
 8005154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005156:	2303      	movs	r3, #3
 8005158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800515e:	f107 0314 	add.w	r3, r7, #20
 8005162:	4619      	mov	r1, r3
 8005164:	4823      	ldr	r0, [pc, #140]	; (80051f4 <HAL_ADC_MspInit+0x118>)
 8005166:	f002 fe8b 	bl	8007e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800516a:	2303      	movs	r3, #3
 800516c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800516e:	2303      	movs	r3, #3
 8005170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	4619      	mov	r1, r3
 800517c:	481e      	ldr	r0, [pc, #120]	; (80051f8 <HAL_ADC_MspInit+0x11c>)
 800517e:	f002 fe7f 	bl	8007e80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005182:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <HAL_ADC_MspInit+0x120>)
 8005184:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <HAL_ADC_MspInit+0x124>)
 8005186:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <HAL_ADC_MspInit+0x120>)
 800518a:	2200      	movs	r2, #0
 800518c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_ADC_MspInit+0x120>)
 8005190:	2200      	movs	r2, #0
 8005192:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_ADC_MspInit+0x120>)
 8005196:	2200      	movs	r2, #0
 8005198:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800519a:	4b18      	ldr	r3, [pc, #96]	; (80051fc <HAL_ADC_MspInit+0x120>)
 800519c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <HAL_ADC_MspInit+0x120>)
 80051a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80051aa:	4b14      	ldr	r3, [pc, #80]	; (80051fc <HAL_ADC_MspInit+0x120>)
 80051ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_ADC_MspInit+0x120>)
 80051b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <HAL_ADC_MspInit+0x120>)
 80051bc:	2200      	movs	r2, #0
 80051be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <HAL_ADC_MspInit+0x120>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80051c6:	480d      	ldr	r0, [pc, #52]	; (80051fc <HAL_ADC_MspInit+0x120>)
 80051c8:	f002 fa58 	bl	800767c <HAL_DMA_Init>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80051d2:	f7ff fbe3 	bl	800499c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a08      	ldr	r2, [pc, #32]	; (80051fc <HAL_ADC_MspInit+0x120>)
 80051da:	639a      	str	r2, [r3, #56]	; 0x38
 80051dc:	4a07      	ldr	r2, [pc, #28]	; (80051fc <HAL_ADC_MspInit+0x120>)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051e2:	bf00      	nop
 80051e4:	3728      	adds	r7, #40	; 0x28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40012000 	.word	0x40012000
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40020800 	.word	0x40020800
 80051f8:	40020400 	.word	0x40020400
 80051fc:	200003ac 	.word	0x200003ac
 8005200:	40026410 	.word	0x40026410

08005204 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	; 0x28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a19      	ldr	r2, [pc, #100]	; (8005288 <HAL_I2C_MspInit+0x84>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d12b      	bne.n	800527e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	4b18      	ldr	r3, [pc, #96]	; (800528c <HAL_I2C_MspInit+0x88>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	4a17      	ldr	r2, [pc, #92]	; (800528c <HAL_I2C_MspInit+0x88>)
 8005230:	f043 0302 	orr.w	r3, r3, #2
 8005234:	6313      	str	r3, [r2, #48]	; 0x30
 8005236:	4b15      	ldr	r3, [pc, #84]	; (800528c <HAL_I2C_MspInit+0x88>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005242:	23c0      	movs	r3, #192	; 0xc0
 8005244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005246:	2312      	movs	r3, #18
 8005248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800524e:	2303      	movs	r3, #3
 8005250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005252:	2304      	movs	r3, #4
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005256:	f107 0314 	add.w	r3, r7, #20
 800525a:	4619      	mov	r1, r3
 800525c:	480c      	ldr	r0, [pc, #48]	; (8005290 <HAL_I2C_MspInit+0x8c>)
 800525e:	f002 fe0f 	bl	8007e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <HAL_I2C_MspInit+0x88>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	4a08      	ldr	r2, [pc, #32]	; (800528c <HAL_I2C_MspInit+0x88>)
 800526c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005270:	6413      	str	r3, [r2, #64]	; 0x40
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_I2C_MspInit+0x88>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800527e:	bf00      	nop
 8005280:	3728      	adds	r7, #40	; 0x28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40005400 	.word	0x40005400
 800528c:	40023800 	.word	0x40023800
 8005290:	40020400 	.word	0x40020400

08005294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_SPI_MspInit+0x84>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d12b      	bne.n	800530e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	4b18      	ldr	r3, [pc, #96]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052c4:	6453      	str	r3, [r2, #68]	; 0x44
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	4b11      	ldr	r3, [pc, #68]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	4a10      	ldr	r2, [pc, #64]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052dc:	f043 0302 	orr.w	r3, r3, #2
 80052e0:	6313      	str	r3, [r2, #48]	; 0x30
 80052e2:	4b0e      	ldr	r3, [pc, #56]	; (800531c <HAL_SPI_MspInit+0x88>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80052ee:	2338      	movs	r3, #56	; 0x38
 80052f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f2:	2302      	movs	r3, #2
 80052f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fa:	2303      	movs	r3, #3
 80052fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052fe:	2305      	movs	r3, #5
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005302:	f107 0314 	add.w	r3, r7, #20
 8005306:	4619      	mov	r1, r3
 8005308:	4805      	ldr	r0, [pc, #20]	; (8005320 <HAL_SPI_MspInit+0x8c>)
 800530a:	f002 fdb9 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800530e:	bf00      	nop
 8005310:	3728      	adds	r7, #40	; 0x28
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40013000 	.word	0x40013000
 800531c:	40023800 	.word	0x40023800
 8005320:	40020400 	.word	0x40020400

08005324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a22      	ldr	r2, [pc, #136]	; (80053bc <HAL_TIM_Base_MspInit+0x98>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d10e      	bne.n	8005354 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	4b21      	ldr	r3, [pc, #132]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	4a20      	ldr	r2, [pc, #128]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	6453      	str	r3, [r2, #68]	; 0x44
 8005346:	4b1e      	ldr	r3, [pc, #120]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005352:	e02e      	b.n	80053b2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d116      	bne.n	800538c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	6413      	str	r3, [r2, #64]	; 0x40
 800536e:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	201c      	movs	r0, #28
 8005380:	f002 f945 	bl	800760e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005384:	201c      	movs	r0, #28
 8005386:	f002 f95e 	bl	8007646 <HAL_NVIC_EnableIRQ>
}
 800538a:	e012      	b.n	80053b2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0c      	ldr	r2, [pc, #48]	; (80053c4 <HAL_TIM_Base_MspInit+0xa0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10d      	bne.n	80053b2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a08      	ldr	r2, [pc, #32]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 80053a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <HAL_TIM_Base_MspInit+0x9c>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	bf00      	nop
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40001c00 	.word	0x40001c00

080053c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d0:	f107 030c 	add.w	r3, r7, #12
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	605a      	str	r2, [r3, #4]
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	60da      	str	r2, [r3, #12]
 80053de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a12      	ldr	r2, [pc, #72]	; (8005430 <HAL_TIM_MspPostInit+0x68>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d11e      	bne.n	8005428 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <HAL_TIM_MspPostInit+0x6c>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	4a10      	ldr	r2, [pc, #64]	; (8005434 <HAL_TIM_MspPostInit+0x6c>)
 80053f4:	f043 0320 	orr.w	r3, r3, #32
 80053f8:	6313      	str	r3, [r2, #48]	; 0x30
 80053fa:	4b0e      	ldr	r3, [pc, #56]	; (8005434 <HAL_TIM_MspPostInit+0x6c>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800540a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540c:	2302      	movs	r3, #2
 800540e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005414:	2300      	movs	r3, #0
 8005416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8005418:	2309      	movs	r3, #9
 800541a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	4619      	mov	r1, r3
 8005422:	4805      	ldr	r0, [pc, #20]	; (8005438 <HAL_TIM_MspPostInit+0x70>)
 8005424:	f002 fd2c 	bl	8007e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8005428:	bf00      	nop
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40001c00 	.word	0x40001c00
 8005434:	40023800 	.word	0x40023800
 8005438:	40021400 	.word	0x40021400

0800543c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005444:	f107 031c 	add.w	r3, r7, #28
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a3a      	ldr	r2, [pc, #232]	; (8005544 <HAL_UART_MspInit+0x108>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d135      	bne.n	80054ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	4b39      	ldr	r3, [pc, #228]	; (8005548 <HAL_UART_MspInit+0x10c>)
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	4a38      	ldr	r2, [pc, #224]	; (8005548 <HAL_UART_MspInit+0x10c>)
 8005468:	f043 0310 	orr.w	r3, r3, #16
 800546c:	6453      	str	r3, [r2, #68]	; 0x44
 800546e:	4b36      	ldr	r3, [pc, #216]	; (8005548 <HAL_UART_MspInit+0x10c>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	4b32      	ldr	r3, [pc, #200]	; (8005548 <HAL_UART_MspInit+0x10c>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	4a31      	ldr	r2, [pc, #196]	; (8005548 <HAL_UART_MspInit+0x10c>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	6313      	str	r3, [r2, #48]	; 0x30
 800548a:	4b2f      	ldr	r3, [pc, #188]	; (8005548 <HAL_UART_MspInit+0x10c>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005496:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800549a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549c:	2302      	movs	r3, #2
 800549e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a4:	2303      	movs	r3, #3
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054a8:	2307      	movs	r3, #7
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ac:	f107 031c 	add.w	r3, r7, #28
 80054b0:	4619      	mov	r1, r3
 80054b2:	4826      	ldr	r0, [pc, #152]	; (800554c <HAL_UART_MspInit+0x110>)
 80054b4:	f002 fce4 	bl	8007e80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80054b8:	2200      	movs	r2, #0
 80054ba:	2100      	movs	r1, #0
 80054bc:	2025      	movs	r0, #37	; 0x25
 80054be:	f002 f8a6 	bl	800760e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054c2:	2025      	movs	r0, #37	; 0x25
 80054c4:	f002 f8bf 	bl	8007646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80054c8:	e038      	b.n	800553c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a20      	ldr	r2, [pc, #128]	; (8005550 <HAL_UART_MspInit+0x114>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d133      	bne.n	800553c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_UART_MspInit+0x10c>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <HAL_UART_MspInit+0x10c>)
 80054de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e2:	6413      	str	r3, [r2, #64]	; 0x40
 80054e4:	4b18      	ldr	r3, [pc, #96]	; (8005548 <HAL_UART_MspInit+0x10c>)
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	4b14      	ldr	r3, [pc, #80]	; (8005548 <HAL_UART_MspInit+0x10c>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	4a13      	ldr	r2, [pc, #76]	; (8005548 <HAL_UART_MspInit+0x10c>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005500:	4b11      	ldr	r3, [pc, #68]	; (8005548 <HAL_UART_MspInit+0x10c>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800550c:	230c      	movs	r3, #12
 800550e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005510:	2302      	movs	r3, #2
 8005512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005514:	2300      	movs	r3, #0
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005518:	2303      	movs	r3, #3
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800551c:	2307      	movs	r3, #7
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005520:	f107 031c 	add.w	r3, r7, #28
 8005524:	4619      	mov	r1, r3
 8005526:	4809      	ldr	r0, [pc, #36]	; (800554c <HAL_UART_MspInit+0x110>)
 8005528:	f002 fcaa 	bl	8007e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800552c:	2200      	movs	r2, #0
 800552e:	2100      	movs	r1, #0
 8005530:	2026      	movs	r0, #38	; 0x26
 8005532:	f002 f86c 	bl	800760e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005536:	2026      	movs	r0, #38	; 0x26
 8005538:	f002 f885 	bl	8007646 <HAL_NVIC_EnableIRQ>
}
 800553c:	bf00      	nop
 800553e:	3730      	adds	r7, #48	; 0x30
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40011000 	.word	0x40011000
 8005548:	40023800 	.word	0x40023800
 800554c:	40020000 	.word	0x40020000
 8005550:	40004400 	.word	0x40004400

08005554 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	60da      	str	r2, [r3, #12]
 8005566:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005568:	4b1c      	ldr	r3, [pc, #112]	; (80055dc <HAL_FSMC_MspInit+0x88>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d131      	bne.n	80055d4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005570:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <HAL_FSMC_MspInit+0x88>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <HAL_FSMC_MspInit+0x8c>)
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <HAL_FSMC_MspInit+0x8c>)
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	6393      	str	r3, [r2, #56]	; 0x38
 8005586:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <HAL_FSMC_MspInit+0x8c>)
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8005592:	f64f 7388 	movw	r3, #65416	; 0xff88
 8005596:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a0:	2303      	movs	r3, #3
 80055a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80055a4:	230c      	movs	r3, #12
 80055a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	480d      	ldr	r0, [pc, #52]	; (80055e4 <HAL_FSMC_MspInit+0x90>)
 80055ae:	f002 fc67 	bl	8007e80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80055b2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80055b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b8:	2302      	movs	r3, #2
 80055ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c0:	2303      	movs	r3, #3
 80055c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80055c4:	230c      	movs	r3, #12
 80055c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4806      	ldr	r0, [pc, #24]	; (80055e8 <HAL_FSMC_MspInit+0x94>)
 80055ce:	f002 fc57 	bl	8007e80 <HAL_GPIO_Init>
 80055d2:	e000      	b.n	80055d6 <HAL_FSMC_MspInit+0x82>
    return;
 80055d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20000198 	.word	0x20000198
 80055e0:	40023800 	.word	0x40023800
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40020c00 	.word	0x40020c00

080055ec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80055f4:	f7ff ffae 	bl	8005554 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005604:	e7fe      	b.n	8005604 <NMI_Handler+0x4>

08005606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800560a:	e7fe      	b.n	800560a <HardFault_Handler+0x4>

0800560c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005610:	e7fe      	b.n	8005610 <MemManage_Handler+0x4>

08005612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005616:	e7fe      	b.n	8005616 <BusFault_Handler+0x4>

08005618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800561c:	e7fe      	b.n	800561c <UsageFault_Handler+0x4>

0800561e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800561e:	b480      	push	{r7}
 8005620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005622:	bf00      	nop
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800563e:	bf00      	nop
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800564c:	f001 faae 	bl	8006bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005650:	bf00      	nop
 8005652:	bd80      	pop	{r7, pc}

08005654 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005658:	4802      	ldr	r0, [pc, #8]	; (8005664 <TIM2_IRQHandler+0x10>)
 800565a:	f005 f980 	bl	800a95e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000500 	.word	0x20000500

08005668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800566c:	4802      	ldr	r0, [pc, #8]	; (8005678 <USART1_IRQHandler+0x10>)
 800566e:	f006 f8bb 	bl	800b7e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000548 	.word	0x20000548

0800567c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005680:	4802      	ldr	r0, [pc, #8]	; (800568c <USART2_IRQHandler+0x10>)
 8005682:	f006 f8b1 	bl	800b7e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	2000058c 	.word	0x2000058c

08005690 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005694:	4802      	ldr	r0, [pc, #8]	; (80056a0 <DMA2_Stream0_IRQHandler+0x10>)
 8005696:	f002 f989 	bl	80079ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800569a:	bf00      	nop
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	200003ac 	.word	0x200003ac

080056a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
	return 1;
 80056a8:	2301      	movs	r3, #1
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <_kill>:

int _kill(int pid, int sig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80056be:	f007 f81b 	bl	800c6f8 <__errno>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2216      	movs	r2, #22
 80056c6:	601a      	str	r2, [r3, #0]
	return -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_exit>:

void _exit (int status)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056dc:	f04f 31ff 	mov.w	r1, #4294967295
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ffe7 	bl	80056b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80056e6:	e7fe      	b.n	80056e6 <_exit+0x12>

080056e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e00a      	b.n	8005710 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056fa:	f3af 8000 	nop.w
 80056fe:	4601      	mov	r1, r0
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	60ba      	str	r2, [r7, #8]
 8005706:	b2ca      	uxtb	r2, r1
 8005708:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	3301      	adds	r3, #1
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	dbf0      	blt.n	80056fa <_read+0x12>
	}

return len;
 8005718:	687b      	ldr	r3, [r7, #4]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b086      	sub	sp, #24
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e009      	b.n	8005748 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	60ba      	str	r2, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	3301      	adds	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	dbf1      	blt.n	8005734 <_write+0x12>
	}
	return len;
 8005750:	687b      	ldr	r3, [r7, #4]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <_close>:

int _close(int file)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
	return -1;
 8005762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005782:	605a      	str	r2, [r3, #4]
	return 0;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <_isatty>:

int _isatty(int file)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
	return 1;
 800579a:	2301      	movs	r3, #1
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
	return 0;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
	...

080057c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057cc:	4a14      	ldr	r2, [pc, #80]	; (8005820 <_sbrk+0x5c>)
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <_sbrk+0x60>)
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <_sbrk+0x64>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <_sbrk+0x64>)
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <_sbrk+0x68>)
 80057e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <_sbrk+0x64>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d207      	bcs.n	8005804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057f4:	f006 ff80 	bl	800c6f8 <__errno>
 80057f8:	4603      	mov	r3, r0
 80057fa:	220c      	movs	r2, #12
 80057fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005802:	e009      	b.n	8005818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <_sbrk+0x64>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800580a:	4b07      	ldr	r3, [pc, #28]	; (8005828 <_sbrk+0x64>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	4a05      	ldr	r2, [pc, #20]	; (8005828 <_sbrk+0x64>)
 8005814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005816:	68fb      	ldr	r3, [r7, #12]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20020000 	.word	0x20020000
 8005824:	00000400 	.word	0x00000400
 8005828:	2000019c 	.word	0x2000019c
 800582c:	200005e8 	.word	0x200005e8

08005830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <SystemInit+0x20>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	4a05      	ldr	r2, [pc, #20]	; (8005850 <SystemInit+0x20>)
 800583c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	e000ed00 	.word	0xe000ed00

08005854 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800585a:	f107 0308 	add.w	r3, r7, #8
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	609a      	str	r2, [r3, #8]
 8005866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005868:	463b      	mov	r3, r7
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <MX_TIM1_Init+0x98>)
 8005872:	4a1f      	ldr	r2, [pc, #124]	; (80058f0 <MX_TIM1_Init+0x9c>)
 8005874:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8005876:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <MX_TIM1_Init+0x98>)
 8005878:	2253      	movs	r2, #83	; 0x53
 800587a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800587c:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <MX_TIM1_Init+0x98>)
 800587e:	2200      	movs	r2, #0
 8005880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005882:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <MX_TIM1_Init+0x98>)
 8005884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005888:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800588a:	4b18      	ldr	r3, [pc, #96]	; (80058ec <MX_TIM1_Init+0x98>)
 800588c:	2200      	movs	r2, #0
 800588e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005890:	4b16      	ldr	r3, [pc, #88]	; (80058ec <MX_TIM1_Init+0x98>)
 8005892:	2200      	movs	r2, #0
 8005894:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <MX_TIM1_Init+0x98>)
 8005898:	2200      	movs	r2, #0
 800589a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800589c:	4813      	ldr	r0, [pc, #76]	; (80058ec <MX_TIM1_Init+0x98>)
 800589e:	f004 fedd 	bl	800a65c <HAL_TIM_Base_Init>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80058a8:	f7ff f878 	bl	800499c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4619      	mov	r1, r3
 80058b8:	480c      	ldr	r0, [pc, #48]	; (80058ec <MX_TIM1_Init+0x98>)
 80058ba:	f005 fa1b 	bl	800acf4 <HAL_TIM_ConfigClockSource>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80058c4:	f7ff f86a 	bl	800499c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058c8:	2300      	movs	r3, #0
 80058ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058d0:	463b      	mov	r3, r7
 80058d2:	4619      	mov	r1, r3
 80058d4:	4805      	ldr	r0, [pc, #20]	; (80058ec <MX_TIM1_Init+0x98>)
 80058d6:	f005 fde7 	bl	800b4a8 <HAL_TIMEx_MasterConfigSynchronization>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80058e0:	f7ff f85c 	bl	800499c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80058e4:	bf00      	nop
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200004b8 	.word	0x200004b8
 80058f0:	40010000 	.word	0x40010000

080058f4 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058fa:	f107 0308 	add.w	r3, r7, #8
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	609a      	str	r2, [r3, #8]
 8005906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005908:	463b      	mov	r3, r7
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <MX_TIM2_Init+0x94>)
 8005912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005916:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <MX_TIM2_Init+0x94>)
 800591a:	f240 3247 	movw	r2, #839	; 0x347
 800591e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <MX_TIM2_Init+0x94>)
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8005926:	4b18      	ldr	r3, [pc, #96]	; (8005988 <MX_TIM2_Init+0x94>)
 8005928:	2263      	movs	r2, #99	; 0x63
 800592a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800592c:	4b16      	ldr	r3, [pc, #88]	; (8005988 <MX_TIM2_Init+0x94>)
 800592e:	2200      	movs	r2, #0
 8005930:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <MX_TIM2_Init+0x94>)
 8005934:	2200      	movs	r2, #0
 8005936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005938:	4813      	ldr	r0, [pc, #76]	; (8005988 <MX_TIM2_Init+0x94>)
 800593a:	f004 fe8f 	bl	800a65c <HAL_TIM_Base_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005944:	f7ff f82a 	bl	800499c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800594c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	4619      	mov	r1, r3
 8005954:	480c      	ldr	r0, [pc, #48]	; (8005988 <MX_TIM2_Init+0x94>)
 8005956:	f005 f9cd 	bl	800acf4 <HAL_TIM_ConfigClockSource>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005960:	f7ff f81c 	bl	800499c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005964:	2300      	movs	r3, #0
 8005966:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005968:	2300      	movs	r3, #0
 800596a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800596c:	463b      	mov	r3, r7
 800596e:	4619      	mov	r1, r3
 8005970:	4805      	ldr	r0, [pc, #20]	; (8005988 <MX_TIM2_Init+0x94>)
 8005972:	f005 fd99 	bl	800b4a8 <HAL_TIMEx_MasterConfigSynchronization>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800597c:	f7ff f80e 	bl	800499c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005980:	bf00      	nop
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000500 	.word	0x20000500

0800598c <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005992:	1d3b      	adds	r3, r7, #4
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	609a      	str	r2, [r3, #8]
 800599c:	60da      	str	r2, [r3, #12]
 800599e:	611a      	str	r2, [r3, #16]
 80059a0:	615a      	str	r2, [r3, #20]
 80059a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80059a4:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <MX_TIM13_Init+0x94>)
 80059a6:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <MX_TIM13_Init+0x98>)
 80059a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80059aa:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <MX_TIM13_Init+0x94>)
 80059ac:	f240 3247 	movw	r2, #839	; 0x347
 80059b0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <MX_TIM13_Init+0x94>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <MX_TIM13_Init+0x94>)
 80059ba:	2263      	movs	r2, #99	; 0x63
 80059bc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059be:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <MX_TIM13_Init+0x94>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <MX_TIM13_Init+0x94>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80059ca:	4815      	ldr	r0, [pc, #84]	; (8005a20 <MX_TIM13_Init+0x94>)
 80059cc:	f004 fe46 	bl	800a65c <HAL_TIM_Base_Init>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80059d6:	f7fe ffe1 	bl	800499c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80059da:	4811      	ldr	r0, [pc, #68]	; (8005a20 <MX_TIM13_Init+0x94>)
 80059dc:	f004 ff66 	bl	800a8ac <HAL_TIM_PWM_Init>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80059e6:	f7fe ffd9 	bl	800499c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059ea:	2360      	movs	r3, #96	; 0x60
 80059ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	2200      	movs	r2, #0
 80059fe:	4619      	mov	r1, r3
 8005a00:	4807      	ldr	r0, [pc, #28]	; (8005a20 <MX_TIM13_Init+0x94>)
 8005a02:	f005 f8b5 	bl	800ab70 <HAL_TIM_PWM_ConfigChannel>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8005a0c:	f7fe ffc6 	bl	800499c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <MX_TIM13_Init+0x94>)
 8005a12:	f7ff fcd9 	bl	80053c8 <HAL_TIM_MspPostInit>

}
 8005a16:	bf00      	nop
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000470 	.word	0x20000470
 8005a24:	40001c00 	.word	0x40001c00

08005a28 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	e025      	b.n	8005a88 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8005a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	da06      	bge.n	8005a52 <TP_Write_Byte+0x2a>
 8005a44:	2201      	movs	r2, #1
 8005a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a4a:	4813      	ldr	r0, [pc, #76]	; (8005a98 <TP_Write_Byte+0x70>)
 8005a4c:	f002 fbcc 	bl	80081e8 <HAL_GPIO_WritePin>
 8005a50:	e005      	b.n	8005a5e <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8005a52:	2200      	movs	r2, #0
 8005a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a58:	480f      	ldr	r0, [pc, #60]	; (8005a98 <TP_Write_Byte+0x70>)
 8005a5a:	f002 fbc5 	bl	80081e8 <HAL_GPIO_WritePin>
		num<<=1;
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005a64:	2200      	movs	r2, #0
 8005a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a6a:	480c      	ldr	r0, [pc, #48]	; (8005a9c <TP_Write_Byte+0x74>)
 8005a6c:	f002 fbbc 	bl	80081e8 <HAL_GPIO_WritePin>
		delay_us(1);
 8005a70:	2001      	movs	r0, #1
 8005a72:	f7ff fabb 	bl	8004fec <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005a76:	2201      	movs	r2, #1
 8005a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a7c:	4807      	ldr	r0, [pc, #28]	; (8005a9c <TP_Write_Byte+0x74>)
 8005a7e:	f002 fbb3 	bl	80081e8 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	3301      	adds	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b07      	cmp	r3, #7
 8005a8c:	d9d6      	bls.n	8005a3c <TP_Write_Byte+0x14>
	}
}
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40020800 	.word	0x40020800
 8005a9c:	40021800 	.word	0x40021800

08005aa0 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ab8:	482f      	ldr	r0, [pc, #188]	; (8005b78 <TP_Read_AD+0xd8>)
 8005aba:	f002 fb95 	bl	80081e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ac4:	482d      	ldr	r0, [pc, #180]	; (8005b7c <TP_Read_AD+0xdc>)
 8005ac6:	f002 fb8f 	bl	80081e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2180      	movs	r1, #128	; 0x80
 8005ace:	482a      	ldr	r0, [pc, #168]	; (8005b78 <TP_Read_AD+0xd8>)
 8005ad0:	f002 fb8a 	bl	80081e8 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff ffa6 	bl	8005a28 <TP_Write_Byte>
	delay_us(6);
 8005adc:	2006      	movs	r0, #6
 8005ade:	f7ff fa85 	bl	8004fec <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ae8:	4823      	ldr	r0, [pc, #140]	; (8005b78 <TP_Read_AD+0xd8>)
 8005aea:	f002 fb7d 	bl	80081e8 <HAL_GPIO_WritePin>
	delay_us(1);
 8005aee:	2001      	movs	r0, #1
 8005af0:	f7ff fa7c 	bl	8004fec <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005af4:	2201      	movs	r2, #1
 8005af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005afa:	481f      	ldr	r0, [pc, #124]	; (8005b78 <TP_Read_AD+0xd8>)
 8005afc:	f002 fb74 	bl	80081e8 <HAL_GPIO_WritePin>
	delay_us(1);
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7ff fa73 	bl	8004fec <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005b06:	2200      	movs	r2, #0
 8005b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b0c:	481a      	ldr	r0, [pc, #104]	; (8005b78 <TP_Read_AD+0xd8>)
 8005b0e:	f002 fb6b 	bl	80081e8 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
 8005b16:	e01f      	b.n	8005b58 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8005b18:	89bb      	ldrh	r3, [r7, #12]
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b24:	4814      	ldr	r0, [pc, #80]	; (8005b78 <TP_Read_AD+0xd8>)
 8005b26:	f002 fb5f 	bl	80081e8 <HAL_GPIO_WritePin>
		delay_us(1);
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	f7ff fa5e 	bl	8004fec <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005b30:	2201      	movs	r2, #1
 8005b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b36:	4810      	ldr	r0, [pc, #64]	; (8005b78 <TP_Read_AD+0xd8>)
 8005b38:	f002 fb56 	bl	80081e8 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8005b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b40:	480e      	ldr	r0, [pc, #56]	; (8005b7c <TP_Read_AD+0xdc>)
 8005b42:	f002 fb39 	bl	80081b8 <HAL_GPIO_ReadPin>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <TP_Read_AD+0xb2>
 8005b4c:	89bb      	ldrh	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	3301      	adds	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b0f      	cmp	r3, #15
 8005b5c:	d9dc      	bls.n	8005b18 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8005b5e:	89bb      	ldrh	r3, [r7, #12]
 8005b60:	091b      	lsrs	r3, r3, #4
 8005b62:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8005b64:	2201      	movs	r2, #1
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	4803      	ldr	r0, [pc, #12]	; (8005b78 <TP_Read_AD+0xd8>)
 8005b6a:	f002 fb3d 	bl	80081e8 <HAL_GPIO_WritePin>
	return(Num);
 8005b6e:	89bb      	ldrh	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021800 	.word	0x40021800
 8005b7c:	40020800 	.word	0x40020800

08005b80 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8005b80:	b590      	push	{r4, r7, lr}
 8005b82:	b089      	sub	sp, #36	; 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	83fb      	strh	r3, [r7, #30]
 8005b92:	e00f      	b.n	8005bb4 <TP_Read_XOY+0x34>
 8005b94:	8bfc      	ldrh	r4, [r7, #30]
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff ff81 	bl	8005aa0 <TP_Read_AD>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	0063      	lsls	r3, r4, #1
 8005ba4:	f107 0120 	add.w	r1, r7, #32
 8005ba8:	440b      	add	r3, r1
 8005baa:	f823 2c14 	strh.w	r2, [r3, #-20]
 8005bae:	8bfb      	ldrh	r3, [r7, #30]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	83fb      	strh	r3, [r7, #30]
 8005bb4:	8bfb      	ldrh	r3, [r7, #30]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d9ec      	bls.n	8005b94 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8005bba:	2300      	movs	r3, #0
 8005bbc:	83fb      	strh	r3, [r7, #30]
 8005bbe:	e03b      	b.n	8005c38 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8005bc0:	8bfb      	ldrh	r3, [r7, #30]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	83bb      	strh	r3, [r7, #28]
 8005bc6:	e031      	b.n	8005c2c <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8005bc8:	8bfb      	ldrh	r3, [r7, #30]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	f107 0220 	add.w	r2, r7, #32
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005bd6:	8bbb      	ldrh	r3, [r7, #28]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	f107 0120 	add.w	r1, r7, #32
 8005bde:	440b      	add	r3, r1
 8005be0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d91e      	bls.n	8005c26 <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8005be8:	8bfb      	ldrh	r3, [r7, #30]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	f107 0220 	add.w	r2, r7, #32
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005bf6:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8005bf8:	8bbb      	ldrh	r3, [r7, #28]
 8005bfa:	8bfa      	ldrh	r2, [r7, #30]
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	f107 0120 	add.w	r1, r7, #32
 8005c02:	440b      	add	r3, r1
 8005c04:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8005c08:	0053      	lsls	r3, r2, #1
 8005c0a:	f107 0220 	add.w	r2, r7, #32
 8005c0e:	4413      	add	r3, r2
 8005c10:	460a      	mov	r2, r1
 8005c12:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8005c16:	8bbb      	ldrh	r3, [r7, #28]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	f107 0220 	add.w	r2, r7, #32
 8005c1e:	4413      	add	r3, r2
 8005c20:	8b3a      	ldrh	r2, [r7, #24]
 8005c22:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8005c26:	8bbb      	ldrh	r3, [r7, #28]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	83bb      	strh	r3, [r7, #28]
 8005c2c:	8bbb      	ldrh	r3, [r7, #28]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d9ca      	bls.n	8005bc8 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8005c32:	8bfb      	ldrh	r3, [r7, #30]
 8005c34:	3301      	adds	r3, #1
 8005c36:	83fb      	strh	r3, [r7, #30]
 8005c38:	8bfb      	ldrh	r3, [r7, #30]
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d9c0      	bls.n	8005bc0 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8005c42:	2301      	movs	r3, #1
 8005c44:	83fb      	strh	r3, [r7, #30]
 8005c46:	e00c      	b.n	8005c62 <TP_Read_XOY+0xe2>
 8005c48:	8bfb      	ldrh	r3, [r7, #30]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	f107 0220 	add.w	r2, r7, #32
 8005c50:	4413      	add	r3, r2
 8005c52:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005c56:	8b7b      	ldrh	r3, [r7, #26]
 8005c58:	4413      	add	r3, r2
 8005c5a:	837b      	strh	r3, [r7, #26]
 8005c5c:	8bfb      	ldrh	r3, [r7, #30]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	83fb      	strh	r3, [r7, #30]
 8005c62:	8bfb      	ldrh	r3, [r7, #30]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d9ef      	bls.n	8005c48 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8005c68:	8b7b      	ldrh	r3, [r7, #26]
 8005c6a:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <TP_Read_XOY+0x100>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	833b      	strh	r3, [r7, #24]
	return temp;
 8005c74:	8b3b      	ldrh	r3, [r7, #24]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3724      	adds	r7, #36	; 0x24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd90      	pop	{r4, r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	aaaaaaab 	.word	0xaaaaaaab

08005c84 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <TP_Read_XY+0x3c>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff ff74 	bl	8005b80 <TP_Read_XOY>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005c9c:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <TP_Read_XY+0x40>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ff6d 	bl	8005b80 <TP_Read_XOY>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	89fa      	ldrh	r2, [r7, #14]
 8005cae:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	89ba      	ldrh	r2, [r7, #12]
 8005cb4:	801a      	strh	r2, [r3, #0]
	return 1;
 8005cb6:	2301      	movs	r3, #1
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	200000a0 	.word	0x200000a0
 8005cc4:	200000a1 	.word	0x200000a1

08005cc8 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8005cd2:	f107 0212 	add.w	r2, r7, #18
 8005cd6:	f107 0314 	add.w	r3, r7, #20
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff ffd1 	bl	8005c84 <TP_Read_XY>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <TP_Read_XY2+0x28>
 8005cec:	2300      	movs	r3, #0
 8005cee:	e049      	b.n	8005d84 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8005cf0:	f107 020e 	add.w	r2, r7, #14
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff ffc2 	bl	8005c84 <TP_Read_XY>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <TP_Read_XY2+0x46>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e03a      	b.n	8005d84 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8005d0e:	8a3a      	ldrh	r2, [r7, #16]
 8005d10:	8abb      	ldrh	r3, [r7, #20]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d804      	bhi.n	8005d20 <TP_Read_XY2+0x58>
 8005d16:	8a3b      	ldrh	r3, [r7, #16]
 8005d18:	3363      	adds	r3, #99	; 0x63
 8005d1a:	8aba      	ldrh	r2, [r7, #20]
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	da08      	bge.n	8005d32 <TP_Read_XY2+0x6a>
 8005d20:	8aba      	ldrh	r2, [r7, #20]
 8005d22:	8a3b      	ldrh	r3, [r7, #16]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d82c      	bhi.n	8005d82 <TP_Read_XY2+0xba>
 8005d28:	8abb      	ldrh	r3, [r7, #20]
 8005d2a:	3363      	adds	r3, #99	; 0x63
 8005d2c:	8a3a      	ldrh	r2, [r7, #16]
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	db27      	blt.n	8005d82 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8005d32:	89fa      	ldrh	r2, [r7, #14]
 8005d34:	8a7b      	ldrh	r3, [r7, #18]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d804      	bhi.n	8005d44 <TP_Read_XY2+0x7c>
 8005d3a:	89fb      	ldrh	r3, [r7, #14]
 8005d3c:	3363      	adds	r3, #99	; 0x63
 8005d3e:	8a7a      	ldrh	r2, [r7, #18]
 8005d40:	4293      	cmp	r3, r2
 8005d42:	da08      	bge.n	8005d56 <TP_Read_XY2+0x8e>
 8005d44:	8a7a      	ldrh	r2, [r7, #18]
 8005d46:	89fb      	ldrh	r3, [r7, #14]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d81a      	bhi.n	8005d82 <TP_Read_XY2+0xba>
 8005d4c:	8a7b      	ldrh	r3, [r7, #18]
 8005d4e:	3363      	adds	r3, #99	; 0x63
 8005d50:	89fa      	ldrh	r2, [r7, #14]
 8005d52:	4293      	cmp	r3, r2
 8005d54:	db15      	blt.n	8005d82 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8005d56:	8abb      	ldrh	r3, [r7, #20]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	8a3b      	ldrh	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	0fda      	lsrs	r2, r3, #31
 8005d60:	4413      	add	r3, r2
 8005d62:	105b      	asrs	r3, r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8005d6a:	8a7b      	ldrh	r3, [r7, #18]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	89fb      	ldrh	r3, [r7, #14]
 8005d70:	4413      	add	r3, r2
 8005d72:	0fda      	lsrs	r2, r3, #31
 8005d74:	4413      	add	r3, r2
 8005d76:	105b      	asrs	r3, r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	801a      	strh	r2, [r3, #0]
		return 1;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <TP_Read_XY2+0xbc>
	}else return 0;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	4603      	mov	r3, r0
 8005d94:	80fb      	strh	r3, [r7, #6]
 8005d96:	460b      	mov	r3, r1
 8005d98:	80bb      	strh	r3, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	3b0c      	subs	r3, #12
 8005da2:	b298      	uxth	r0, r3
 8005da4:	88fb      	ldrh	r3, [r7, #6]
 8005da6:	330d      	adds	r3, #13
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	88bc      	ldrh	r4, [r7, #4]
 8005dac:	88b9      	ldrh	r1, [r7, #4]
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	4623      	mov	r3, r4
 8005db4:	f7fd fe63 	bl	8003a7e <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8005db8:	88bb      	ldrh	r3, [r7, #4]
 8005dba:	3b0c      	subs	r3, #12
 8005dbc:	b299      	uxth	r1, r3
 8005dbe:	88bb      	ldrh	r3, [r7, #4]
 8005dc0:	330d      	adds	r3, #13
 8005dc2:	b29c      	uxth	r4, r3
 8005dc4:	88fa      	ldrh	r2, [r7, #6]
 8005dc6:	88f8      	ldrh	r0, [r7, #6]
 8005dc8:	887b      	ldrh	r3, [r7, #2]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	4623      	mov	r3, r4
 8005dce:	f7fd fe56 	bl	8003a7e <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	b298      	uxth	r0, r3
 8005dd8:	88bb      	ldrh	r3, [r7, #4]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	887a      	ldrh	r2, [r7, #2]
 8005de0:	4619      	mov	r1, r3
 8005de2:	f7fd fe35 	bl	8003a50 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b298      	uxth	r0, r3
 8005dec:	88bb      	ldrh	r3, [r7, #4]
 8005dee:	3301      	adds	r3, #1
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	887a      	ldrh	r2, [r7, #2]
 8005df4:	4619      	mov	r1, r3
 8005df6:	f7fd fe2b 	bl	8003a50 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	88bb      	ldrh	r3, [r7, #4]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	887a      	ldrh	r2, [r7, #2]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f7fd fe21 	bl	8003a50 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b298      	uxth	r0, r3
 8005e14:	88bb      	ldrh	r3, [r7, #4]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	887a      	ldrh	r2, [r7, #2]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f7fd fe17 	bl	8003a50 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8005e22:	88f8      	ldrh	r0, [r7, #6]
 8005e24:	88b9      	ldrh	r1, [r7, #4]
 8005e26:	887a      	ldrh	r2, [r7, #2]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	2306      	movs	r3, #6
 8005e2e:	f7fe fb48 	bl	80044c2 <lcd_DrawCircle>
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd90      	pop	{r4, r7, pc}
	...

08005e3c <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8005e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e4a:	4843      	ldr	r0, [pc, #268]	; (8005f58 <TP_Scan+0x11c>)
 8005e4c:	f002 f9b4 	bl	80081b8 <HAL_GPIO_ReadPin>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d157      	bne.n	8005f06 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <TP_Scan+0x2a>
 8005e5c:	493f      	ldr	r1, [pc, #252]	; (8005f5c <TP_Scan+0x120>)
 8005e5e:	4840      	ldr	r0, [pc, #256]	; (8005f60 <TP_Scan+0x124>)
 8005e60:	f7ff ff32 	bl	8005cc8 <TP_Read_XY2>
 8005e64:	e03c      	b.n	8005ee0 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8005e66:	493d      	ldr	r1, [pc, #244]	; (8005f5c <TP_Scan+0x120>)
 8005e68:	483d      	ldr	r0, [pc, #244]	; (8005f60 <TP_Scan+0x124>)
 8005e6a:	f7ff ff2d 	bl	8005cc8 <TP_Read_XY2>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d035      	beq.n	8005ee0 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8005e74:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <TP_Scan+0x128>)
 8005e76:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005e7a:	4b3a      	ldr	r3, [pc, #232]	; (8005f64 <TP_Scan+0x128>)
 8005e7c:	899b      	ldrh	r3, [r3, #12]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e8a:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <TP_Scan+0x128>)
 8005e8c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea0:	ee17 3a90 	vmov	r3, s15
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	4b2f      	ldr	r3, [pc, #188]	; (8005f64 <TP_Scan+0x128>)
 8005ea8:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8005eaa:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <TP_Scan+0x128>)
 8005eac:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005eb0:	4b2c      	ldr	r3, [pc, #176]	; (8005f64 <TP_Scan+0x128>)
 8005eb2:	8adb      	ldrh	r3, [r3, #22]
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <TP_Scan+0x128>)
 8005ec2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed6:	ee17 3a90 	vmov	r3, s15
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <TP_Scan+0x128>)
 8005ede:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8005ee0:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <TP_Scan+0x128>)
 8005ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db2a      	blt.n	8005f42 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <TP_Scan+0x128>)
 8005eee:	22c0      	movs	r2, #192	; 0xc0
 8005ef0:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <TP_Scan+0x128>)
 8005ef6:	899a      	ldrh	r2, [r3, #12]
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <TP_Scan+0x128>)
 8005efa:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <TP_Scan+0x128>)
 8005efe:	8ada      	ldrh	r2, [r3, #22]
 8005f00:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <TP_Scan+0x128>)
 8005f02:	83da      	strh	r2, [r3, #30]
 8005f04:	e01d      	b.n	8005f42 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8005f06:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <TP_Scan+0x128>)
 8005f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f0c:	b25b      	sxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da09      	bge.n	8005f26 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <TP_Scan+0x128>)
 8005f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <TP_Scan+0x128>)
 8005f20:	f883 2020 	strb.w	r2, [r3, #32]
 8005f24:	e00d      	b.n	8005f42 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8005f26:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <TP_Scan+0x128>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <TP_Scan+0x128>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <TP_Scan+0x128>)
 8005f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f38:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8005f3a:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <TP_Scan+0x128>)
 8005f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f40:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <TP_Scan+0x128>)
 8005f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f4c:	b2db      	uxtb	r3, r3
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40020800 	.word	0x40020800
 8005f5c:	20000082 	.word	0x20000082
 8005f60:	20000078 	.word	0x20000078
 8005f64:	2000006c 	.word	0x2000006c

08005f68 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005f6c:	220e      	movs	r2, #14
 8005f6e:	4905      	ldr	r1, [pc, #20]	; (8005f84 <TP_Save_Adjdata+0x1c>)
 8005f70:	2000      	movs	r0, #0
 8005f72:	f7fb f911 	bl	8001198 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8005f76:	2100      	movs	r1, #0
 8005f78:	200e      	movs	r0, #14
 8005f7a:	f7fb f8ad 	bl	80010d8 <at24c_WriteOneByte>
}
 8005f7e:	bf00      	nop
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000090 	.word	0x20000090

08005f88 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8005f92:	200e      	movs	r0, #14
 8005f94:	f7fb f884 	bl	80010a0 <at24c_ReadOneByte>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005fa2:	220e      	movs	r2, #14
 8005fa4:	4905      	ldr	r1, [pc, #20]	; (8005fbc <TP_Get_Adjdata+0x34>)
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f7fb f8d7 	bl	800115a <at24c_Read>
		return 1;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000090 	.word	0x20000090

08005fc0 <touch_Adjust>:


void touch_Adjust(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08e      	sub	sp, #56	; 0x38
 8005fc4:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8005fd2:	4b61      	ldr	r3, [pc, #388]	; (8006158 <touch_Adjust+0x198>)
 8005fd4:	881a      	ldrh	r2, [r3, #0]
 8005fd6:	4b60      	ldr	r3, [pc, #384]	; (8006158 <touch_Adjust+0x198>)
 8005fd8:	885b      	ldrh	r3, [r3, #2]
 8005fda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fde:	9100      	str	r1, [sp, #0]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f7fd fcfe 	bl	80039e4 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	2310      	movs	r3, #16
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ffa:	4a58      	ldr	r2, [pc, #352]	; (800615c <touch_Adjust+0x19c>)
 8005ffc:	2128      	movs	r1, #40	; 0x28
 8005ffe:	2005      	movs	r0, #5
 8006000:	f7fe facb 	bl	800459a <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8006004:	2300      	movs	r3, #0
 8006006:	9302      	str	r3, [sp, #8]
 8006008:	2310      	movs	r3, #16
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006016:	4a52      	ldr	r2, [pc, #328]	; (8006160 <touch_Adjust+0x1a0>)
 8006018:	2141      	movs	r1, #65	; 0x41
 800601a:	2005      	movs	r0, #5
 800601c:	f7fe fabd 	bl	800459a <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8006020:	2300      	movs	r3, #0
 8006022:	9302      	str	r3, [sp, #8]
 8006024:	2310      	movs	r3, #16
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006032:	4a4c      	ldr	r2, [pc, #304]	; (8006164 <touch_Adjust+0x1a4>)
 8006034:	215a      	movs	r1, #90	; 0x5a
 8006036:	2005      	movs	r0, #5
 8006038:	f7fe faaf 	bl	800459a <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800603c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006040:	2114      	movs	r1, #20
 8006042:	2014      	movs	r0, #20
 8006044:	f7ff fea2 	bl	8005d8c <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8006048:	4b47      	ldr	r3, [pc, #284]	; (8006168 <touch_Adjust+0x1a8>)
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8006050:	4b45      	ldr	r3, [pc, #276]	; (8006168 <touch_Adjust+0x1a8>)
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8006058:	2032      	movs	r0, #50	; 0x32
 800605a:	f000 fdc7 	bl	8006bec <HAL_Delay>
		tp_dev.scan(1);
 800605e:	4b42      	ldr	r3, [pc, #264]	; (8006168 <touch_Adjust+0x1a8>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2001      	movs	r0, #1
 8006064:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8006066:	4b40      	ldr	r3, [pc, #256]	; (8006168 <touch_Adjust+0x1a8>)
 8006068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800606c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006070:	2b40      	cmp	r3, #64	; 0x40
 8006072:	f040 835e 	bne.w	8006732 <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8006076:	4b3c      	ldr	r3, [pc, #240]	; (8006168 <touch_Adjust+0x1a8>)
 8006078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800607c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006080:	b2da      	uxtb	r2, r3
 8006082:	4b39      	ldr	r3, [pc, #228]	; (8006168 <touch_Adjust+0x1a8>)
 8006084:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8006088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800608c:	4a36      	ldr	r2, [pc, #216]	; (8006168 <touch_Adjust+0x1a8>)
 800608e:	8992      	ldrh	r2, [r2, #12]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006096:	440b      	add	r3, r1
 8006098:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 800609c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060a0:	4a31      	ldr	r2, [pc, #196]	; (8006168 <touch_Adjust+0x1a8>)
 80060a2:	8ad2      	ldrh	r2, [r2, #22]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80060aa:	440b      	add	r3, r1
 80060ac:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 80060b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060b4:	3301      	adds	r3, #1
 80060b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 80060ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060be:	3b01      	subs	r3, #1
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d8c9      	bhi.n	8006058 <touch_Adjust+0x98>
 80060c4:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <touch_Adjust+0x10c>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080060dd 	.word	0x080060dd
 80060d0:	080060ff 	.word	0x080060ff
 80060d4:	08006129 	.word	0x08006129
 80060d8:	0800616d 	.word	0x0800616d
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80060dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060e0:	2114      	movs	r1, #20
 80060e2:	2014      	movs	r0, #20
 80060e4:	f7ff fe52 	bl	8005d8c <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80060e8:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <touch_Adjust+0x198>)
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	3b14      	subs	r3, #20
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80060f4:	2114      	movs	r1, #20
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fe48 	bl	8005d8c <TP_Drow_Touch_Point>
					break;
 80060fc:	e31a      	b.n	8006734 <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80060fe:	4b16      	ldr	r3, [pc, #88]	; (8006158 <touch_Adjust+0x198>)
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	3b14      	subs	r3, #20
 8006104:	b29b      	uxth	r3, r3
 8006106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800610a:	2114      	movs	r1, #20
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fe3d 	bl	8005d8c <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <touch_Adjust+0x198>)
 8006114:	885b      	ldrh	r3, [r3, #2]
 8006116:	3b14      	subs	r3, #20
 8006118:	b29b      	uxth	r3, r3
 800611a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800611e:	4619      	mov	r1, r3
 8006120:	2014      	movs	r0, #20
 8006122:	f7ff fe33 	bl	8005d8c <TP_Drow_Touch_Point>
					break;
 8006126:	e305      	b.n	8006734 <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <touch_Adjust+0x198>)
 800612a:	885b      	ldrh	r3, [r3, #2]
 800612c:	3b14      	subs	r3, #20
 800612e:	b29b      	uxth	r3, r3
 8006130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006134:	4619      	mov	r1, r3
 8006136:	2014      	movs	r0, #20
 8006138:	f7ff fe28 	bl	8005d8c <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <touch_Adjust+0x198>)
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	3b14      	subs	r3, #20
 8006142:	b298      	uxth	r0, r3
 8006144:	4b04      	ldr	r3, [pc, #16]	; (8006158 <touch_Adjust+0x198>)
 8006146:	885b      	ldrh	r3, [r3, #2]
 8006148:	3b14      	subs	r3, #20
 800614a:	b29b      	uxth	r3, r3
 800614c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006150:	4619      	mov	r1, r3
 8006152:	f7ff fe1b 	bl	8005d8c <TP_Drow_Touch_Point>
					break;
 8006156:	e2ed      	b.n	8006734 <touch_Adjust+0x774>
 8006158:	20000370 	.word	0x20000370
 800615c:	0800e8c8 	.word	0x0800e8c8
 8006160:	0800e8e4 	.word	0x0800e8e4
 8006164:	0800e8fc 	.word	0x0800e8fc
 8006168:	2000006c 	.word	0x2000006c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 800616c:	883b      	ldrh	r3, [r7, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	88bb      	ldrh	r3, [r7, #4]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	bfb8      	it	lt
 8006178:	425b      	neglt	r3, r3
 800617a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 800617c:	887b      	ldrh	r3, [r7, #2]
 800617e:	461a      	mov	r2, r3
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	bfb8      	it	lt
 8006188:	425b      	neglt	r3, r3
 800618a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	fb03 f303 	mul.w	r3, r3, r3
 8006192:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	fb03 f303 	mul.w	r3, r3, r3
 800619a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800619c:	6a3a      	ldr	r2, [r7, #32]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa f9ae 	bl	8000504 <__aeabi_ui2d>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	ec43 2b10 	vmov	d0, r2, r3
 80061b0:	f007 fbe8 	bl	800d984 <sqrt>
 80061b4:	ec53 2b10 	vmov	r2, r3, d0
 80061b8:	4610      	mov	r0, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	f7fa fcf4 	bl	8000ba8 <__aeabi_d2uiz>
 80061c0:	4603      	mov	r3, r0
 80061c2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 80061c4:	893b      	ldrh	r3, [r7, #8]
 80061c6:	461a      	mov	r2, r3
 80061c8:	89bb      	ldrh	r3, [r7, #12]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bfb8      	it	lt
 80061d0:	425b      	neglt	r3, r3
 80061d2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80061d4:	897b      	ldrh	r3, [r7, #10]
 80061d6:	461a      	mov	r2, r3
 80061d8:	89fb      	ldrh	r3, [r7, #14]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bfb8      	it	lt
 80061e0:	425b      	neglt	r3, r3
 80061e2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	fb03 f303 	mul.w	r3, r3, r3
 80061ea:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	fb03 f303 	mul.w	r3, r3, r3
 80061f2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80061f4:	6a3a      	ldr	r2, [r7, #32]
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fa f982 	bl	8000504 <__aeabi_ui2d>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	ec43 2b10 	vmov	d0, r2, r3
 8006208:	f007 fbbc 	bl	800d984 <sqrt>
 800620c:	ec53 2b10 	vmov	r2, r3, d0
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	f7fa fcc8 	bl	8000ba8 <__aeabi_d2uiz>
 8006218:	4603      	mov	r3, r0
 800621a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800621c:	8b7b      	ldrh	r3, [r7, #26]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006226:	8b3b      	ldrh	r3, [r7, #24]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006230:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006234:	ee16 0a90 	vmov	r0, s13
 8006238:	f7fa f986 	bl	8000548 <__aeabi_f2d>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8006244:	a384      	add	r3, pc, #528	; (adr r3, 8006458 <touch_Adjust+0x498>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800624e:	f7fa fc45 	bl	8000adc <__aeabi_dcmplt>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10f      	bne.n	8006278 <touch_Adjust+0x2b8>
 8006258:	a381      	add	r3, pc, #516	; (adr r3, 8006460 <touch_Adjust+0x4a0>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006262:	f7fa fc59 	bl	8000b18 <__aeabi_dcmpgt>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d105      	bne.n	8006278 <touch_Adjust+0x2b8>
 800626c:	8b7b      	ldrh	r3, [r7, #26]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <touch_Adjust+0x2b8>
 8006272:	8b3b      	ldrh	r3, [r7, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d136      	bne.n	80062e6 <touch_Adjust+0x326>
					{
						cnt=0;
 8006278:	2300      	movs	r3, #0
 800627a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800627e:	4b7a      	ldr	r3, [pc, #488]	; (8006468 <touch_Adjust+0x4a8>)
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	3b14      	subs	r3, #20
 8006284:	b298      	uxth	r0, r3
 8006286:	4b78      	ldr	r3, [pc, #480]	; (8006468 <touch_Adjust+0x4a8>)
 8006288:	885b      	ldrh	r3, [r3, #2]
 800628a:	3b14      	subs	r3, #20
 800628c:	b29b      	uxth	r3, r3
 800628e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006292:	4619      	mov	r1, r3
 8006294:	f7ff fd7a 	bl	8005d8c <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8006298:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800629c:	2114      	movs	r1, #20
 800629e:	2014      	movs	r0, #20
 80062a0:	f7ff fd74 	bl	8005d8c <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80062a4:	2300      	movs	r3, #0
 80062a6:	9302      	str	r3, [sp, #8]
 80062a8:	2310      	movs	r3, #16
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062b6:	4a6d      	ldr	r2, [pc, #436]	; (800646c <touch_Adjust+0x4ac>)
 80062b8:	2128      	movs	r1, #40	; 0x28
 80062ba:	2005      	movs	r0, #5
 80062bc:	f7fe f96d 	bl	800459a <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80062c0:	2300      	movs	r3, #0
 80062c2:	9302      	str	r3, [sp, #8]
 80062c4:	2310      	movs	r3, #16
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062d2:	4a67      	ldr	r2, [pc, #412]	; (8006470 <touch_Adjust+0x4b0>)
 80062d4:	213c      	movs	r1, #60	; 0x3c
 80062d6:	2005      	movs	r0, #5
 80062d8:	f7fe f95f 	bl	800459a <lcd_ShowStr>
						HAL_Delay(1000);
 80062dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062e0:	f000 fc84 	bl	8006bec <HAL_Delay>
 						continue;
 80062e4:	e226      	b.n	8006734 <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 80062e6:	883b      	ldrh	r3, [r7, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	893b      	ldrh	r3, [r7, #8]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfb8      	it	lt
 80062f2:	425b      	neglt	r3, r3
 80062f4:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 80062f6:	887b      	ldrh	r3, [r7, #2]
 80062f8:	461a      	mov	r2, r3
 80062fa:	897b      	ldrh	r3, [r7, #10]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bfb8      	it	lt
 8006302:	425b      	neglt	r3, r3
 8006304:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	fb03 f303 	mul.w	r3, r3, r3
 800630c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	fb03 f303 	mul.w	r3, r3, r3
 8006314:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	4618      	mov	r0, r3
 800631e:	f7fa f8f1 	bl	8000504 <__aeabi_ui2d>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	ec43 2b10 	vmov	d0, r2, r3
 800632a:	f007 fb2b 	bl	800d984 <sqrt>
 800632e:	ec53 2b10 	vmov	r2, r3, d0
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	f7fa fc37 	bl	8000ba8 <__aeabi_d2uiz>
 800633a:	4603      	mov	r3, r0
 800633c:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 800633e:	88bb      	ldrh	r3, [r7, #4]
 8006340:	461a      	mov	r2, r3
 8006342:	89bb      	ldrh	r3, [r7, #12]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfb8      	it	lt
 800634a:	425b      	neglt	r3, r3
 800634c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	461a      	mov	r2, r3
 8006352:	89fb      	ldrh	r3, [r7, #14]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfb8      	it	lt
 800635a:	425b      	neglt	r3, r3
 800635c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	fb03 f303 	mul.w	r3, r3, r3
 8006364:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	fb03 f303 	mul.w	r3, r3, r3
 800636c:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800636e:	6a3a      	ldr	r2, [r7, #32]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f7fa f8c5 	bl	8000504 <__aeabi_ui2d>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	ec43 2b10 	vmov	d0, r2, r3
 8006382:	f007 faff 	bl	800d984 <sqrt>
 8006386:	ec53 2b10 	vmov	r2, r3, d0
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	f7fa fc0b 	bl	8000ba8 <__aeabi_d2uiz>
 8006392:	4603      	mov	r3, r0
 8006394:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8006396:	8b7b      	ldrh	r3, [r7, #26]
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063a0:	8b3b      	ldrh	r3, [r7, #24]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80063ae:	ee16 0a90 	vmov	r0, s13
 80063b2:	f7fa f8c9 	bl	8000548 <__aeabi_f2d>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80063be:	a326      	add	r3, pc, #152	; (adr r3, 8006458 <touch_Adjust+0x498>)
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063c8:	f7fa fb88 	bl	8000adc <__aeabi_dcmplt>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <touch_Adjust+0x426>
 80063d2:	a323      	add	r3, pc, #140	; (adr r3, 8006460 <touch_Adjust+0x4a0>)
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063dc:	f7fa fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d046      	beq.n	8006474 <touch_Adjust+0x4b4>
					{
						cnt=0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80063ec:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <touch_Adjust+0x4a8>)
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	3b14      	subs	r3, #20
 80063f2:	b298      	uxth	r0, r3
 80063f4:	4b1c      	ldr	r3, [pc, #112]	; (8006468 <touch_Adjust+0x4a8>)
 80063f6:	885b      	ldrh	r3, [r3, #2]
 80063f8:	3b14      	subs	r3, #20
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006400:	4619      	mov	r1, r3
 8006402:	f7ff fcc3 	bl	8005d8c <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8006406:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800640a:	2114      	movs	r1, #20
 800640c:	2014      	movs	r0, #20
 800640e:	f7ff fcbd 	bl	8005d8c <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8006412:	2300      	movs	r3, #0
 8006414:	9302      	str	r3, [sp, #8]
 8006416:	2310      	movs	r3, #16
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006424:	4a11      	ldr	r2, [pc, #68]	; (800646c <touch_Adjust+0x4ac>)
 8006426:	2128      	movs	r1, #40	; 0x28
 8006428:	2005      	movs	r0, #5
 800642a:	f7fe f8b6 	bl	800459a <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 800642e:	2300      	movs	r3, #0
 8006430:	9302      	str	r3, [sp, #8]
 8006432:	2310      	movs	r3, #16
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006440:	4a0b      	ldr	r2, [pc, #44]	; (8006470 <touch_Adjust+0x4b0>)
 8006442:	213c      	movs	r1, #60	; 0x3c
 8006444:	2005      	movs	r0, #5
 8006446:	f7fe f8a8 	bl	800459a <lcd_ShowStr>
						HAL_Delay(1000);
 800644a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800644e:	f000 fbcd 	bl	8006bec <HAL_Delay>
						continue;
 8006452:	e16f      	b.n	8006734 <touch_Adjust+0x774>
 8006454:	f3af 8000 	nop.w
 8006458:	66666666 	.word	0x66666666
 800645c:	3fee6666 	.word	0x3fee6666
 8006460:	cccccccd 	.word	0xcccccccd
 8006464:	3ff0cccc 	.word	0x3ff0cccc
 8006468:	20000370 	.word	0x20000370
 800646c:	0800e910 	.word	0x0800e910
 8006470:	0800e930 	.word	0x0800e930
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8006474:	88bb      	ldrh	r3, [r7, #4]
 8006476:	461a      	mov	r2, r3
 8006478:	893b      	ldrh	r3, [r7, #8]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	bfb8      	it	lt
 8006480:	425b      	neglt	r3, r3
 8006482:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	461a      	mov	r2, r3
 8006488:	897b      	ldrh	r3, [r7, #10]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	bfb8      	it	lt
 8006490:	425b      	neglt	r3, r3
 8006492:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	fb03 f303 	mul.w	r3, r3, r3
 800649a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	fb03 f303 	mul.w	r3, r3, r3
 80064a2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fa f82a 	bl	8000504 <__aeabi_ui2d>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	ec43 2b10 	vmov	d0, r2, r3
 80064b8:	f007 fa64 	bl	800d984 <sqrt>
 80064bc:	ec53 2b10 	vmov	r2, r3, d0
 80064c0:	4610      	mov	r0, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	f7fa fb70 	bl	8000ba8 <__aeabi_d2uiz>
 80064c8:	4603      	mov	r3, r0
 80064ca:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 80064cc:	883b      	ldrh	r3, [r7, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	89bb      	ldrh	r3, [r7, #12]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bfb8      	it	lt
 80064d8:	425b      	neglt	r3, r3
 80064da:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 80064dc:	887b      	ldrh	r3, [r7, #2]
 80064de:	461a      	mov	r2, r3
 80064e0:	89fb      	ldrh	r3, [r7, #14]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfb8      	it	lt
 80064e8:	425b      	neglt	r3, r3
 80064ea:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	fb03 f303 	mul.w	r3, r3, r3
 80064f2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	fb03 f303 	mul.w	r3, r3, r3
 80064fa:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	4413      	add	r3, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f7f9 fffe 	bl	8000504 <__aeabi_ui2d>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	ec43 2b10 	vmov	d0, r2, r3
 8006510:	f007 fa38 	bl	800d984 <sqrt>
 8006514:	ec53 2b10 	vmov	r2, r3, d0
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	f7fa fb44 	bl	8000ba8 <__aeabi_d2uiz>
 8006520:	4603      	mov	r3, r0
 8006522:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8006524:	8b7b      	ldrh	r3, [r7, #26]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800652e:	8b3b      	ldrh	r3, [r7, #24]
 8006530:	ee07 3a90 	vmov	s15, r3
 8006534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006538:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800653c:	ee16 0a90 	vmov	r0, s13
 8006540:	f7fa f802 	bl	8000548 <__aeabi_f2d>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 800654c:	a383      	add	r3, pc, #524	; (adr r3, 800675c <touch_Adjust+0x79c>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006556:	f7fa fac1 	bl	8000adc <__aeabi_dcmplt>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <touch_Adjust+0x5b4>
 8006560:	a380      	add	r3, pc, #512	; (adr r3, 8006764 <touch_Adjust+0x7a4>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800656a:	f7fa fad5 	bl	8000b18 <__aeabi_dcmpgt>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d036      	beq.n	80065e2 <touch_Adjust+0x622>
					{
						cnt=0;
 8006574:	2300      	movs	r3, #0
 8006576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800657a:	4b71      	ldr	r3, [pc, #452]	; (8006740 <touch_Adjust+0x780>)
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	3b14      	subs	r3, #20
 8006580:	b298      	uxth	r0, r3
 8006582:	4b6f      	ldr	r3, [pc, #444]	; (8006740 <touch_Adjust+0x780>)
 8006584:	885b      	ldrh	r3, [r3, #2]
 8006586:	3b14      	subs	r3, #20
 8006588:	b29b      	uxth	r3, r3
 800658a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800658e:	4619      	mov	r1, r3
 8006590:	f7ff fbfc 	bl	8005d8c <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8006594:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006598:	2114      	movs	r1, #20
 800659a:	2014      	movs	r0, #20
 800659c:	f7ff fbf6 	bl	8005d8c <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80065a0:	2300      	movs	r3, #0
 80065a2:	9302      	str	r3, [sp, #8]
 80065a4:	2310      	movs	r3, #16
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80065b2:	4a64      	ldr	r2, [pc, #400]	; (8006744 <touch_Adjust+0x784>)
 80065b4:	2128      	movs	r1, #40	; 0x28
 80065b6:	2005      	movs	r0, #5
 80065b8:	f7fd ffef 	bl	800459a <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80065bc:	2300      	movs	r3, #0
 80065be:	9302      	str	r3, [sp, #8]
 80065c0:	2310      	movs	r3, #16
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80065ce:	4a5e      	ldr	r2, [pc, #376]	; (8006748 <touch_Adjust+0x788>)
 80065d0:	213c      	movs	r1, #60	; 0x3c
 80065d2:	2005      	movs	r0, #5
 80065d4:	f7fd ffe1 	bl	800459a <lcd_ShowStr>

						HAL_Delay(1000);
 80065d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065dc:	f000 fb06 	bl	8006bec <HAL_Delay>
 							continue;
 80065e0:	e0a8      	b.n	8006734 <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 80065e2:	4b57      	ldr	r3, [pc, #348]	; (8006740 <touch_Adjust+0x780>)
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	3b28      	subs	r3, #40	; 0x28
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80065f0:	88bb      	ldrh	r3, [r7, #4]
 80065f2:	461a      	mov	r2, r3
 80065f4:	883b      	ldrh	r3, [r7, #0]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	ee07 3a90 	vmov	s15, r3
 80065fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006604:	4b51      	ldr	r3, [pc, #324]	; (800674c <touch_Adjust+0x78c>)
 8006606:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 800660a:	4b4d      	ldr	r3, [pc, #308]	; (8006740 <touch_Adjust+0x780>)
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006616:	4b4d      	ldr	r3, [pc, #308]	; (800674c <touch_Adjust+0x78c>)
 8006618:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800661c:	88bb      	ldrh	r3, [r7, #4]
 800661e:	461a      	mov	r2, r3
 8006620:	883b      	ldrh	r3, [r7, #0]
 8006622:	4413      	add	r3, r2
 8006624:	ee07 3a90 	vmov	s15, r3
 8006628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800662c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006630:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006634:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800663c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006640:	ee17 3a90 	vmov	r3, s15
 8006644:	b21a      	sxth	r2, r3
 8006646:	4b41      	ldr	r3, [pc, #260]	; (800674c <touch_Adjust+0x78c>)
 8006648:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 800664a:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <touch_Adjust+0x780>)
 800664c:	885b      	ldrh	r3, [r3, #2]
 800664e:	3b28      	subs	r3, #40	; 0x28
 8006650:	ee07 3a90 	vmov	s15, r3
 8006654:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006658:	897b      	ldrh	r3, [r7, #10]
 800665a:	461a      	mov	r2, r3
 800665c:	887b      	ldrh	r3, [r7, #2]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666c:	4b37      	ldr	r3, [pc, #220]	; (800674c <touch_Adjust+0x78c>)
 800666e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8006672:	4b33      	ldr	r3, [pc, #204]	; (8006740 <touch_Adjust+0x780>)
 8006674:	885b      	ldrh	r3, [r3, #2]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667e:	4b33      	ldr	r3, [pc, #204]	; (800674c <touch_Adjust+0x78c>)
 8006680:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8006684:	897b      	ldrh	r3, [r7, #10]
 8006686:	461a      	mov	r2, r3
 8006688:	887b      	ldrh	r3, [r7, #2]
 800668a:	4413      	add	r3, r2
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800669c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066a8:	ee17 3a90 	vmov	r3, s15
 80066ac:	b21a      	sxth	r2, r3
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <touch_Adjust+0x78c>)
 80066b0:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80066b2:	4b23      	ldr	r3, [pc, #140]	; (8006740 <touch_Adjust+0x780>)
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	3b14      	subs	r3, #20
 80066b8:	b298      	uxth	r0, r3
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <touch_Adjust+0x780>)
 80066bc:	885b      	ldrh	r3, [r3, #2]
 80066be:	3b14      	subs	r3, #20
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066c6:	4619      	mov	r1, r3
 80066c8:	f7ff fb60 	bl	8005d8c <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 80066cc:	2300      	movs	r3, #0
 80066ce:	9302      	str	r3, [sp, #8]
 80066d0:	2310      	movs	r3, #16
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80066de:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <touch_Adjust+0x790>)
 80066e0:	2128      	movs	r1, #40	; 0x28
 80066e2:	2005      	movs	r0, #5
 80066e4:	f7fd ff59 	bl	800459a <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 80066e8:	2300      	movs	r3, #0
 80066ea:	9302      	str	r3, [sp, #8]
 80066ec:	2310      	movs	r3, #16
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80066fa:	4a16      	ldr	r2, [pc, #88]	; (8006754 <touch_Adjust+0x794>)
 80066fc:	213c      	movs	r1, #60	; 0x3c
 80066fe:	2005      	movs	r0, #5
 8006700:	f7fd ff4b 	bl	800459a <lcd_ShowStr>
					HAL_Delay(1000);
 8006704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006708:	f000 fa70 	bl	8006bec <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 800670c:	2300      	movs	r3, #0
 800670e:	9302      	str	r3, [sp, #8]
 8006710:	2310      	movs	r3, #16
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800671e:	4a0e      	ldr	r2, [pc, #56]	; (8006758 <touch_Adjust+0x798>)
 8006720:	2128      	movs	r1, #40	; 0x28
 8006722:	2005      	movs	r0, #5
 8006724:	f7fd ff39 	bl	800459a <lcd_ShowStr>
					TP_Save_Adjdata();
 8006728:	f7ff fc1e 	bl	8005f68 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 800672c:	f7ff fc2c 	bl	8005f88 <TP_Get_Adjdata>
					return;
 8006730:	e001      	b.n	8006736 <touch_Adjust+0x776>
			}
		}
 8006732:	bf00      	nop
		HAL_Delay(50);
 8006734:	e490      	b.n	8006058 <touch_Adjust+0x98>
 	}
}
 8006736:	3728      	adds	r7, #40	; 0x28
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	f3af 8000 	nop.w
 8006740:	20000370 	.word	0x20000370
 8006744:	0800e910 	.word	0x0800e910
 8006748:	0800e930 	.word	0x0800e930
 800674c:	2000006c 	.word	0x2000006c
 8006750:	0800e950 	.word	0x0800e950
 8006754:	0800e970 	.word	0x0800e970
 8006758:	0800e990 	.word	0x0800e990
 800675c:	66666666 	.word	0x66666666
 8006760:	3fee6666 	.word	0x3fee6666
 8006764:	cccccccd 	.word	0xcccccccd
 8006768:	3ff0cccc 	.word	0x3ff0cccc

0800676c <touch_init>:

void touch_init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8006770:	4904      	ldr	r1, [pc, #16]	; (8006784 <touch_init+0x18>)
 8006772:	4805      	ldr	r0, [pc, #20]	; (8006788 <touch_init+0x1c>)
 8006774:	f7ff fa86 	bl	8005c84 <TP_Read_XY>
	at24c_init();
 8006778:	f7fa fc8c 	bl	8001094 <at24c_init>
	TP_Get_Adjdata();
 800677c:	f7ff fc04 	bl	8005f88 <TP_Get_Adjdata>
}
 8006780:	bf00      	nop
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20000082 	.word	0x20000082
 8006788:	20000078 	.word	0x20000078

0800678c <touch_Scan>:

void touch_Scan(){
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8006790:	4b02      	ldr	r3, [pc, #8]	; (800679c <touch_Scan+0x10>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2000      	movs	r0, #0
 8006796:	4798      	blx	r3
}
 8006798:	bf00      	nop
 800679a:	bd80      	pop	{r7, pc}
 800679c:	2000006c 	.word	0x2000006c

080067a0 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 80067a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067a8:	4805      	ldr	r0, [pc, #20]	; (80067c0 <touch_IsTouched+0x20>)
 80067aa:	f001 fd05 	bl	80081b8 <HAL_GPIO_ReadPin>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40020800 	.word	0x40020800

080067c4 <touch_GetX>:

uint16_t touch_GetX(){
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 80067c8:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <touch_GetX+0x14>)
 80067ca:	899b      	ldrh	r3, [r3, #12]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	2000006c 	.word	0x2000006c

080067dc <touch_GetY>:

uint16_t touch_GetY(){
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 80067e0:	4b03      	ldr	r3, [pc, #12]	; (80067f0 <touch_GetY+0x14>)
 80067e2:	8adb      	ldrh	r3, [r3, #22]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	2000006c 	.word	0x2000006c

080067f4 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80067f8:	2201      	movs	r2, #1
 80067fa:	4906      	ldr	r1, [pc, #24]	; (8006814 <uart_init_esp+0x20>)
 80067fc:	4806      	ldr	r0, [pc, #24]	; (8006818 <uart_init_esp+0x24>)
 80067fe:	f004 ffc2 	bl	800b786 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, 1);
 8006802:	2201      	movs	r2, #1
 8006804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006808:	4804      	ldr	r0, [pc, #16]	; (800681c <uart_init_esp+0x28>)
 800680a:	f001 fced 	bl	80081e8 <HAL_GPIO_WritePin>
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	200001a1 	.word	0x200001a1
 8006818:	2000058c 	.word	0x2000058c
 800681c:	40021400 	.word	0x40021400

08006820 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 800682c:	887a      	ldrh	r2, [r7, #2]
 800682e:	230a      	movs	r3, #10
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4803      	ldr	r0, [pc, #12]	; (8006840 <uart_EspSendBytes+0x20>)
 8006834:	f004 ff15 	bl	800b662 <HAL_UART_Transmit>
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	2000058c 	.word	0x2000058c

08006844 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a11      	ldr	r2, [pc, #68]	; (8006898 <HAL_UART_RxCpltCallback+0x54>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10a      	bne.n	800686c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8006856:	230a      	movs	r3, #10
 8006858:	2201      	movs	r2, #1
 800685a:	4910      	ldr	r1, [pc, #64]	; (800689c <HAL_UART_RxCpltCallback+0x58>)
 800685c:	4810      	ldr	r0, [pc, #64]	; (80068a0 <HAL_UART_RxCpltCallback+0x5c>)
 800685e:	f004 ff00 	bl	800b662 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8006862:	2201      	movs	r2, #1
 8006864:	490d      	ldr	r1, [pc, #52]	; (800689c <HAL_UART_RxCpltCallback+0x58>)
 8006866:	480e      	ldr	r0, [pc, #56]	; (80068a0 <HAL_UART_RxCpltCallback+0x5c>)
 8006868:	f004 ff8d 	bl	800b786 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0c      	ldr	r2, [pc, #48]	; (80068a4 <HAL_UART_RxCpltCallback+0x60>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10b      	bne.n	800688e <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_UART_RxCpltCallback+0x64>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b4f      	cmp	r3, #79	; 0x4f
 800687c:	d102      	bne.n	8006884 <HAL_UART_RxCpltCallback+0x40>
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_UART_RxCpltCallback+0x68>)
 8006880:	2201      	movs	r2, #1
 8006882:	701a      	strb	r2, [r3, #0]
		//else if(receive_buffer2 == 'a') light_status = 0;
		//else if(receive_buffer2 == 'A') light_status = 1;
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006884:	2201      	movs	r2, #1
 8006886:	4908      	ldr	r1, [pc, #32]	; (80068a8 <HAL_UART_RxCpltCallback+0x64>)
 8006888:	4809      	ldr	r0, [pc, #36]	; (80068b0 <HAL_UART_RxCpltCallback+0x6c>)
 800688a:	f004 ff7c 	bl	800b786 <HAL_UART_Receive_IT>
	}
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40011000 	.word	0x40011000
 800689c:	200001a0 	.word	0x200001a0
 80068a0:	20000548 	.word	0x20000548
 80068a4:	40004400 	.word	0x40004400
 80068a8:	200001a1 	.word	0x200001a1
 80068ac:	200001a2 	.word	0x200001a2
 80068b0:	2000058c 	.word	0x2000058c

080068b4 <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80068b8:	4b11      	ldr	r3, [pc, #68]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068ba:	4a12      	ldr	r2, [pc, #72]	; (8006904 <MX_USART1_UART_Init+0x50>)
 80068bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80068be:	4b10      	ldr	r3, [pc, #64]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80068c6:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80068cc:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80068d2:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80068d8:	4b09      	ldr	r3, [pc, #36]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068da:	220c      	movs	r2, #12
 80068dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068de:	4b08      	ldr	r3, [pc, #32]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80068e4:	4b06      	ldr	r3, [pc, #24]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80068ea:	4805      	ldr	r0, [pc, #20]	; (8006900 <MX_USART1_UART_Init+0x4c>)
 80068ec:	f004 fe6c 	bl	800b5c8 <HAL_UART_Init>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80068f6:	f7fe f851 	bl	800499c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80068fa:	bf00      	nop
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000548 	.word	0x20000548
 8006904:	40011000 	.word	0x40011000

08006908 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800690c:	4b11      	ldr	r3, [pc, #68]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 800690e:	4a12      	ldr	r2, [pc, #72]	; (8006958 <MX_USART2_UART_Init+0x50>)
 8006910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 8006914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800691a:	4b0e      	ldr	r3, [pc, #56]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 800691c:	2200      	movs	r2, #0
 800691e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006920:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 8006922:	2200      	movs	r2, #0
 8006924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 8006928:	2200      	movs	r2, #0
 800692a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800692c:	4b09      	ldr	r3, [pc, #36]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 800692e:	220c      	movs	r2, #12
 8006930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 8006934:	2200      	movs	r2, #0
 8006936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 800693a:	2200      	movs	r2, #0
 800693c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800693e:	4805      	ldr	r0, [pc, #20]	; (8006954 <MX_USART2_UART_Init+0x4c>)
 8006940:	f004 fe42 	bl	800b5c8 <HAL_UART_Init>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800694a:	f7fe f827 	bl	800499c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800694e:	bf00      	nop
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	2000058c 	.word	0x2000058c
 8006958:	40004400 	.word	0x40004400

0800695c <user_init>:
 *      Author: Duyen
 */

#include "user.h"

void user_init(){
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
	memset(name, '\0', sizeof(name));	// Ten nguoi choi nhap vao
 8006960:	220b      	movs	r2, #11
 8006962:	2100      	movs	r1, #0
 8006964:	480d      	ldr	r0, [pc, #52]	; (800699c <user_init+0x40>)
 8006966:	f005 ff0b 	bl	800c780 <memset>
	name_length = 0;					// Do dai ten nguoi choi
 800696a:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <user_init+0x44>)
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
	current_score = 0;					// Diem hien tai cua nguoi choi
 8006970:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <user_init+0x48>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
	current_temp = 0.0;					// Nhiet do hien tai
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <user_init+0x4c>)
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
	current_hum = 0;					// Do am hien tai
 800697e:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <user_init+0x50>)
 8006980:	2200      	movs	r2, #0
 8006982:	801a      	strh	r2, [r3, #0]
	current_light = 0;					// Anh sang hien tai
 8006984:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <user_init+0x54>)
 8006986:	2200      	movs	r2, #0
 8006988:	801a      	strh	r2, [r3, #0]
	current_time = 0;					// Tong thoi gian choi hien tai
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <user_init+0x58>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]
	flag_user = FLAG_NOTSTART;			// Trang thai nguoi choi
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <user_init+0x5c>)
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
}
 8006996:	bf00      	nop
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000148 	.word	0x20000148
 80069a0:	20000153 	.word	0x20000153
 80069a4:	20000000 	.word	0x20000000
 80069a8:	20000004 	.word	0x20000004
 80069ac:	20000008 	.word	0x20000008
 80069b0:	2000000a 	.word	0x2000000a
 80069b4:	20000154 	.word	0x20000154
 80069b8:	20000158 	.word	0x20000158

080069bc <user_history>:

void user_history(){
 80069bc:	b590      	push	{r4, r7, lr}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
	flag_user = FLAG_END;
 80069c2:	4b37      	ldr	r3, [pc, #220]	; (8006aa0 <user_history+0xe4>)
 80069c4:	2202      	movs	r2, #2
 80069c6:	701a      	strb	r2, [r3, #0]
	if(num_history == 0){
 80069c8:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <user_history+0xe8>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10f      	bne.n	80069f0 <user_history+0x34>
		strcpy(history[0].name, name);
 80069d0:	4935      	ldr	r1, [pc, #212]	; (8006aa8 <user_history+0xec>)
 80069d2:	4836      	ldr	r0, [pc, #216]	; (8006aac <user_history+0xf0>)
 80069d4:	f005 ff1c 	bl	800c810 <strcpy>
		history[0].score = current_score;
 80069d8:	4b35      	ldr	r3, [pc, #212]	; (8006ab0 <user_history+0xf4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	b29a      	uxth	r2, r3
 80069de:	4b33      	ldr	r3, [pc, #204]	; (8006aac <user_history+0xf0>)
 80069e0:	819a      	strh	r2, [r3, #12]
		num_history++;
 80069e2:	4b30      	ldr	r3, [pc, #192]	; (8006aa4 <user_history+0xe8>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	4b2e      	ldr	r3, [pc, #184]	; (8006aa4 <user_history+0xe8>)
 80069ec:	701a      	strb	r2, [r3, #0]
		return;
 80069ee:	e054      	b.n	8006a9a <user_history+0xde>
	}
	uint8_t i;
	for(i = num_history; i > 0; i--){
 80069f0:	4b2c      	ldr	r3, [pc, #176]	; (8006aa4 <user_history+0xe8>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	71fb      	strb	r3, [r7, #7]
 80069f6:	e029      	b.n	8006a4c <user_history+0x90>
		if(history[i - 1].score < current_score){
 80069f8:	79fb      	ldrb	r3, [r7, #7]
 80069fa:	1e5a      	subs	r2, r3, #1
 80069fc:	492b      	ldr	r1, [pc, #172]	; (8006aac <user_history+0xf0>)
 80069fe:	4613      	mov	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	440b      	add	r3, r1
 8006a08:	330c      	adds	r3, #12
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <user_history+0xf4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d21e      	bcs.n	8006a54 <user_history+0x98>
			history[i] = history[i - 1];
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	1e5a      	subs	r2, r3, #1
 8006a1a:	79f9      	ldrb	r1, [r7, #7]
 8006a1c:	4823      	ldr	r0, [pc, #140]	; (8006aac <user_history+0xf0>)
 8006a1e:	460b      	mov	r3, r1
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	1a5b      	subs	r3, r3, r1
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	4418      	add	r0, r3
 8006a28:	4920      	ldr	r1, [pc, #128]	; (8006aac <user_history+0xf0>)
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	18ca      	adds	r2, r1, r3
 8006a34:	4603      	mov	r3, r0
 8006a36:	6814      	ldr	r4, [r2, #0]
 8006a38:	6850      	ldr	r0, [r2, #4]
 8006a3a:	6891      	ldr	r1, [r2, #8]
 8006a3c:	601c      	str	r4, [r3, #0]
 8006a3e:	6058      	str	r0, [r3, #4]
 8006a40:	6099      	str	r1, [r3, #8]
 8006a42:	8992      	ldrh	r2, [r2, #12]
 8006a44:	819a      	strh	r2, [r3, #12]
	for(i = num_history; i > 0; i--){
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	71fb      	strb	r3, [r7, #7]
 8006a4c:	79fb      	ldrb	r3, [r7, #7]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1d2      	bne.n	80069f8 <user_history+0x3c>
 8006a52:	e000      	b.n	8006a56 <user_history+0x9a>
		}else{
			break;
 8006a54:	bf00      	nop
		}
	}
	strcpy(history[i].name, name);
 8006a56:	79fa      	ldrb	r2, [r7, #7]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4a12      	ldr	r2, [pc, #72]	; (8006aac <user_history+0xf0>)
 8006a62:	4413      	add	r3, r2
 8006a64:	4910      	ldr	r1, [pc, #64]	; (8006aa8 <user_history+0xec>)
 8006a66:	4618      	mov	r0, r3
 8006a68:	f005 fed2 	bl	800c810 <strcpy>
	history[i].score = current_score;
 8006a6c:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <user_history+0xf4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	79fa      	ldrb	r2, [r7, #7]
 8006a72:	b298      	uxth	r0, r3
 8006a74:	490d      	ldr	r1, [pc, #52]	; (8006aac <user_history+0xf0>)
 8006a76:	4613      	mov	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	440b      	add	r3, r1
 8006a80:	330c      	adds	r3, #12
 8006a82:	4602      	mov	r2, r0
 8006a84:	801a      	strh	r2, [r3, #0]
	if(num_history < MAX_HISTORY){
 8006a86:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <user_history+0xe8>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d805      	bhi.n	8006a9a <user_history+0xde>
		num_history++;
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <user_history+0xe8>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <user_history+0xe8>)
 8006a98:	701a      	strb	r2, [r3, #0]
	}
}
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd90      	pop	{r4, r7, pc}
 8006aa0:	20000158 	.word	0x20000158
 8006aa4:	20000144 	.word	0x20000144
 8006aa8:	20000148 	.word	0x20000148
 8006aac:	20000290 	.word	0x20000290
 8006ab0:	20000000 	.word	0x20000000

08006ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006ab8:	480d      	ldr	r0, [pc, #52]	; (8006af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006aba:	490e      	ldr	r1, [pc, #56]	; (8006af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006abc:	4a0e      	ldr	r2, [pc, #56]	; (8006af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ac0:	e002      	b.n	8006ac8 <LoopCopyDataInit>

08006ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ac6:	3304      	adds	r3, #4

08006ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006acc:	d3f9      	bcc.n	8006ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ace:	4a0b      	ldr	r2, [pc, #44]	; (8006afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ad0:	4c0b      	ldr	r4, [pc, #44]	; (8006b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ad4:	e001      	b.n	8006ada <LoopFillZerobss>

08006ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ad8:	3204      	adds	r2, #4

08006ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006adc:	d3fb      	bcc.n	8006ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ade:	f7fe fea7 	bl	8005830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ae2:	f005 fe0f 	bl	800c704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ae6:	f7fd fe95 	bl	8004814 <main>
  bx  lr    
 8006aea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006af4:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8006af8:	080e9f20 	.word	0x080e9f20
  ldr r2, =_sbss
 8006afc:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8006b00:	200005e4 	.word	0x200005e4

08006b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b04:	e7fe      	b.n	8006b04 <ADC_IRQHandler>
	...

08006b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b0c:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <HAL_Init+0x40>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0d      	ldr	r2, [pc, #52]	; (8006b48 <HAL_Init+0x40>)
 8006b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_Init+0x40>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <HAL_Init+0x40>)
 8006b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b24:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <HAL_Init+0x40>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a07      	ldr	r2, [pc, #28]	; (8006b48 <HAL_Init+0x40>)
 8006b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b30:	2003      	movs	r0, #3
 8006b32:	f000 fd61 	bl	80075f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b36:	200f      	movs	r0, #15
 8006b38:	f000 f808 	bl	8006b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b3c:	f7fe faa6 	bl	800508c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40023c00 	.word	0x40023c00

08006b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b54:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <HAL_InitTick+0x54>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <HAL_InitTick+0x58>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fd79 	bl	8007662 <HAL_SYSTICK_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e00e      	b.n	8006b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b0f      	cmp	r3, #15
 8006b7e:	d80a      	bhi.n	8006b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b80:	2200      	movs	r2, #0
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	f000 fd41 	bl	800760e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b8c:	4a06      	ldr	r2, [pc, #24]	; (8006ba8 <HAL_InitTick+0x5c>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e000      	b.n	8006b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000068 	.word	0x20000068
 8006ba4:	200000a8 	.word	0x200000a8
 8006ba8:	200000a4 	.word	0x200000a4

08006bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <HAL_IncTick+0x20>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <HAL_IncTick+0x24>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4413      	add	r3, r2
 8006bbc:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <HAL_IncTick+0x24>)
 8006bbe:	6013      	str	r3, [r2, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	200000a8 	.word	0x200000a8
 8006bd0:	200005d0 	.word	0x200005d0

08006bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8006bd8:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <HAL_GetTick+0x14>)
 8006bda:	681b      	ldr	r3, [r3, #0]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	200005d0 	.word	0x200005d0

08006bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bf4:	f7ff ffee 	bl	8006bd4 <HAL_GetTick>
 8006bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d005      	beq.n	8006c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c06:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <HAL_Delay+0x44>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c12:	bf00      	nop
 8006c14:	f7ff ffde 	bl	8006bd4 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d8f7      	bhi.n	8006c14 <HAL_Delay+0x28>
  {
  }
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	200000a8 	.word	0x200000a8

08006c34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e033      	b.n	8006cb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fe fa42 	bl	80050dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d118      	bne.n	8006ca4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c7a:	f023 0302 	bic.w	r3, r3, #2
 8006c7e:	f043 0202 	orr.w	r2, r3, #2
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa68 	bl	800715c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f023 0303 	bic.w	r3, r3, #3
 8006c9a:	f043 0201 	orr.w	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
 8006ca2:	e001      	b.n	8006ca8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_ADC_Start_DMA+0x1e>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e0e9      	b.n	8006eae <HAL_ADC_Start_DMA+0x1f2>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d018      	beq.n	8006d22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d00:	4b6d      	ldr	r3, [pc, #436]	; (8006eb8 <HAL_ADC_Start_DMA+0x1fc>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a6d      	ldr	r2, [pc, #436]	; (8006ebc <HAL_ADC_Start_DMA+0x200>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	0c9a      	lsrs	r2, r3, #18
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	4413      	add	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006d14:	e002      	b.n	8006d1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f9      	bne.n	8006d16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d30:	d107      	bne.n	8006d42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d40:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f040 80a1 	bne.w	8006e94 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006d5a:	f023 0301 	bic.w	r3, r3, #1
 8006d5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d90:	d106      	bne.n	8006da0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f023 0206 	bic.w	r2, r3, #6
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
 8006d9e:	e002      	b.n	8006da6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dae:	4b44      	ldr	r3, [pc, #272]	; (8006ec0 <HAL_ADC_Start_DMA+0x204>)
 8006db0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	4a43      	ldr	r2, [pc, #268]	; (8006ec4 <HAL_ADC_Start_DMA+0x208>)
 8006db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	4a42      	ldr	r2, [pc, #264]	; (8006ec8 <HAL_ADC_Start_DMA+0x20c>)
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	4a41      	ldr	r2, [pc, #260]	; (8006ecc <HAL_ADC_Start_DMA+0x210>)
 8006dc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006dd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006de2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	334c      	adds	r3, #76	; 0x4c
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f000 fce8 	bl	80077d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d12a      	bne.n	8006e6a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2d      	ldr	r2, [pc, #180]	; (8006ed0 <HAL_ADC_Start_DMA+0x214>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d015      	beq.n	8006e4a <HAL_ADC_Start_DMA+0x18e>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <HAL_ADC_Start_DMA+0x218>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d105      	bne.n	8006e34 <HAL_ADC_Start_DMA+0x178>
 8006e28:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <HAL_ADC_Start_DMA+0x204>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a27      	ldr	r2, [pc, #156]	; (8006ed8 <HAL_ADC_Start_DMA+0x21c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d136      	bne.n	8006eac <HAL_ADC_Start_DMA+0x1f0>
 8006e3e:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <HAL_ADC_Start_DMA+0x204>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d130      	bne.n	8006eac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d129      	bne.n	8006eac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006e66:	609a      	str	r2, [r3, #8]
 8006e68:	e020      	b.n	8006eac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a18      	ldr	r2, [pc, #96]	; (8006ed0 <HAL_ADC_Start_DMA+0x214>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d11b      	bne.n	8006eac <HAL_ADC_Start_DMA+0x1f0>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d114      	bne.n	8006eac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006e90:	609a      	str	r2, [r3, #8]
 8006e92:	e00b      	b.n	8006eac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	f043 0210 	orr.w	r2, r3, #16
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea4:	f043 0201 	orr.w	r2, r3, #1
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000068 	.word	0x20000068
 8006ebc:	431bde83 	.word	0x431bde83
 8006ec0:	40012300 	.word	0x40012300
 8006ec4:	08007355 	.word	0x08007355
 8006ec8:	0800740f 	.word	0x0800740f
 8006ecc:	0800742b 	.word	0x0800742b
 8006ed0:	40012000 	.word	0x40012000
 8006ed4:	40012100 	.word	0x40012100
 8006ed8:	40012200 	.word	0x40012200

08006edc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_ADC_ConfigChannel+0x1c>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e105      	b.n	8007140 <HAL_ADC_ConfigChannel+0x228>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b09      	cmp	r3, #9
 8006f42:	d925      	bls.n	8006f90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68d9      	ldr	r1, [r3, #12]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	4613      	mov	r3, r2
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	4413      	add	r3, r2
 8006f58:	3b1e      	subs	r3, #30
 8006f5a:	2207      	movs	r2, #7
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	43da      	mvns	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	400a      	ands	r2, r1
 8006f68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68d9      	ldr	r1, [r3, #12]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	4403      	add	r3, r0
 8006f82:	3b1e      	subs	r3, #30
 8006f84:	409a      	lsls	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	e022      	b.n	8006fd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6919      	ldr	r1, [r3, #16]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	4413      	add	r3, r2
 8006fa4:	2207      	movs	r2, #7
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	43da      	mvns	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	400a      	ands	r2, r1
 8006fb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6919      	ldr	r1, [r3, #16]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4403      	add	r3, r0
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b06      	cmp	r3, #6
 8006fdc:	d824      	bhi.n	8007028 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	3b05      	subs	r3, #5
 8006ff0:	221f      	movs	r2, #31
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	43da      	mvns	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	400a      	ands	r2, r1
 8006ffe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	4618      	mov	r0, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	3b05      	subs	r3, #5
 800701a:	fa00 f203 	lsl.w	r2, r0, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	635a      	str	r2, [r3, #52]	; 0x34
 8007026:	e04c      	b.n	80070c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d824      	bhi.n	800707a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	3b23      	subs	r3, #35	; 0x23
 8007042:	221f      	movs	r2, #31
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	43da      	mvns	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	400a      	ands	r2, r1
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	4618      	mov	r0, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	3b23      	subs	r3, #35	; 0x23
 800706c:	fa00 f203 	lsl.w	r2, r0, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
 8007078:	e023      	b.n	80070c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	3b41      	subs	r3, #65	; 0x41
 800708c:	221f      	movs	r2, #31
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	43da      	mvns	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	400a      	ands	r2, r1
 800709a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4618      	mov	r0, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	3b41      	subs	r3, #65	; 0x41
 80070b6:	fa00 f203 	lsl.w	r2, r0, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070c2:	4b22      	ldr	r3, [pc, #136]	; (800714c <HAL_ADC_ConfigChannel+0x234>)
 80070c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <HAL_ADC_ConfigChannel+0x238>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d109      	bne.n	80070e4 <HAL_ADC_ConfigChannel+0x1cc>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b12      	cmp	r3, #18
 80070d6:	d105      	bne.n	80070e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_ADC_ConfigChannel+0x238>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d123      	bne.n	8007136 <HAL_ADC_ConfigChannel+0x21e>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b10      	cmp	r3, #16
 80070f4:	d003      	beq.n	80070fe <HAL_ADC_ConfigChannel+0x1e6>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b11      	cmp	r3, #17
 80070fc:	d11b      	bne.n	8007136 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b10      	cmp	r3, #16
 8007110:	d111      	bne.n	8007136 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007112:	4b10      	ldr	r3, [pc, #64]	; (8007154 <HAL_ADC_ConfigChannel+0x23c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a10      	ldr	r2, [pc, #64]	; (8007158 <HAL_ADC_ConfigChannel+0x240>)
 8007118:	fba2 2303 	umull	r2, r3, r2, r3
 800711c:	0c9a      	lsrs	r2, r3, #18
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007128:	e002      	b.n	8007130 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	3b01      	subs	r3, #1
 800712e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f9      	bne.n	800712a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	40012300 	.word	0x40012300
 8007150:	40012000 	.word	0x40012000
 8007154:	20000068 	.word	0x20000068
 8007158:	431bde83 	.word	0x431bde83

0800715c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007164:	4b79      	ldr	r3, [pc, #484]	; (800734c <ADC_Init+0x1f0>)
 8007166:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	431a      	orrs	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6859      	ldr	r1, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	021a      	lsls	r2, r3, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80071b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6859      	ldr	r1, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6899      	ldr	r1, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	4a58      	ldr	r2, [pc, #352]	; (8007350 <ADC_Init+0x1f4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d022      	beq.n	800723a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007202:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6899      	ldr	r1, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6899      	ldr	r1, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	609a      	str	r2, [r3, #8]
 8007238:	e00f      	b.n	800725a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007258:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0202 	bic.w	r2, r2, #2
 8007268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6899      	ldr	r1, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7e1b      	ldrb	r3, [r3, #24]
 8007274:	005a      	lsls	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01b      	beq.n	80072c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007296:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80072a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6859      	ldr	r1, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	3b01      	subs	r3, #1
 80072b4:	035a      	lsls	r2, r3, #13
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	e007      	b.n	80072d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	051a      	lsls	r2, r3, #20
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6899      	ldr	r1, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007312:	025a      	lsls	r2, r3, #9
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800732a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6899      	ldr	r1, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	029a      	lsls	r2, r3, #10
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	609a      	str	r2, [r3, #8]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	40012300 	.word	0x40012300
 8007350:	0f000001 	.word	0x0f000001

08007354 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	d13c      	bne.n	80073e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d12b      	bne.n	80073e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800738c:	2b00      	cmp	r3, #0
 800738e:	d127      	bne.n	80073e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800739a:	2b00      	cmp	r3, #0
 800739c:	d006      	beq.n	80073ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d119      	bne.n	80073e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0220 	bic.w	r2, r2, #32
 80073ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	f043 0201 	orr.w	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff fd7b 	bl	8006edc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80073e6:	e00e      	b.n	8007406 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff fd85 	bl	8006f04 <HAL_ADC_ErrorCallback>
}
 80073fa:	e004      	b.n	8007406 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7ff fd67 	bl	8006ef0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2240      	movs	r2, #64	; 0x40
 800743c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007442:	f043 0204 	orr.w	r2, r3, #4
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fd5a 	bl	8006f04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <__NVIC_SetPriorityGrouping+0x44>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007474:	4013      	ands	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800748a:	4a04      	ldr	r2, [pc, #16]	; (800749c <__NVIC_SetPriorityGrouping+0x44>)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	60d3      	str	r3, [r2, #12]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	e000ed00 	.word	0xe000ed00

080074a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074a4:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <__NVIC_GetPriorityGrouping+0x18>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	f003 0307 	and.w	r3, r3, #7
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	e000ed00 	.word	0xe000ed00

080074bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	db0b      	blt.n	80074e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	f003 021f 	and.w	r2, r3, #31
 80074d4:	4907      	ldr	r1, [pc, #28]	; (80074f4 <__NVIC_EnableIRQ+0x38>)
 80074d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2001      	movs	r0, #1
 80074de:	fa00 f202 	lsl.w	r2, r0, r2
 80074e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	e000e100 	.word	0xe000e100

080074f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007508:	2b00      	cmp	r3, #0
 800750a:	db0a      	blt.n	8007522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	b2da      	uxtb	r2, r3
 8007510:	490c      	ldr	r1, [pc, #48]	; (8007544 <__NVIC_SetPriority+0x4c>)
 8007512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007516:	0112      	lsls	r2, r2, #4
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	440b      	add	r3, r1
 800751c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007520:	e00a      	b.n	8007538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	b2da      	uxtb	r2, r3
 8007526:	4908      	ldr	r1, [pc, #32]	; (8007548 <__NVIC_SetPriority+0x50>)
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	3b04      	subs	r3, #4
 8007530:	0112      	lsls	r2, r2, #4
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	440b      	add	r3, r1
 8007536:	761a      	strb	r2, [r3, #24]
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	e000e100 	.word	0xe000e100
 8007548:	e000ed00 	.word	0xe000ed00

0800754c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800754c:	b480      	push	{r7}
 800754e:	b089      	sub	sp, #36	; 0x24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f1c3 0307 	rsb	r3, r3, #7
 8007566:	2b04      	cmp	r3, #4
 8007568:	bf28      	it	cs
 800756a:	2304      	movcs	r3, #4
 800756c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	3304      	adds	r3, #4
 8007572:	2b06      	cmp	r3, #6
 8007574:	d902      	bls.n	800757c <NVIC_EncodePriority+0x30>
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	3b03      	subs	r3, #3
 800757a:	e000      	b.n	800757e <NVIC_EncodePriority+0x32>
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	43da      	mvns	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	401a      	ands	r2, r3
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007594:	f04f 31ff 	mov.w	r1, #4294967295
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	fa01 f303 	lsl.w	r3, r1, r3
 800759e:	43d9      	mvns	r1, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075a4:	4313      	orrs	r3, r2
         );
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3724      	adds	r7, #36	; 0x24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3b01      	subs	r3, #1
 80075c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075c4:	d301      	bcc.n	80075ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075c6:	2301      	movs	r3, #1
 80075c8:	e00f      	b.n	80075ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075ca:	4a0a      	ldr	r2, [pc, #40]	; (80075f4 <SysTick_Config+0x40>)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075d2:	210f      	movs	r1, #15
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	f7ff ff8e 	bl	80074f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <SysTick_Config+0x40>)
 80075de:	2200      	movs	r2, #0
 80075e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075e2:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <SysTick_Config+0x40>)
 80075e4:	2207      	movs	r2, #7
 80075e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	e000e010 	.word	0xe000e010

080075f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff ff29 	bl	8007458 <__NVIC_SetPriorityGrouping>
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	4603      	mov	r3, r0
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	607a      	str	r2, [r7, #4]
 800761a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800761c:	2300      	movs	r3, #0
 800761e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007620:	f7ff ff3e 	bl	80074a0 <__NVIC_GetPriorityGrouping>
 8007624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	6978      	ldr	r0, [r7, #20]
 800762c:	f7ff ff8e 	bl	800754c <NVIC_EncodePriority>
 8007630:	4602      	mov	r2, r0
 8007632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff ff5d 	bl	80074f8 <__NVIC_SetPriority>
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	4603      	mov	r3, r0
 800764e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff ff31 	bl	80074bc <__NVIC_EnableIRQ>
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff ffa2 	bl	80075b4 <SysTick_Config>
 8007670:	4603      	mov	r3, r0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007688:	f7ff faa4 	bl	8006bd4 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e099      	b.n	80077cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0201 	bic.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076b8:	e00f      	b.n	80076da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076ba:	f7ff fa8b 	bl	8006bd4 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	2b05      	cmp	r3, #5
 80076c6:	d908      	bls.n	80076da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2203      	movs	r2, #3
 80076d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e078      	b.n	80077cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e8      	bne.n	80076ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4b38      	ldr	r3, [pc, #224]	; (80077d4 <HAL_DMA_Init+0x158>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007706:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800771e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b04      	cmp	r3, #4
 8007732:	d107      	bne.n	8007744 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	4313      	orrs	r3, r2
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	4313      	orrs	r3, r2
 8007742:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	4313      	orrs	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	2b04      	cmp	r3, #4
 800776c:	d117      	bne.n	800779e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00e      	beq.n	800779e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fb01 	bl	8007d88 <DMA_CheckFifoParam>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2240      	movs	r2, #64	; 0x40
 8007790:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800779a:	2301      	movs	r3, #1
 800779c:	e016      	b.n	80077cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fab8 	bl	8007d1c <DMA_CalcBaseAndBitshift>
 80077ac:	4603      	mov	r3, r0
 80077ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b4:	223f      	movs	r2, #63	; 0x3f
 80077b6:	409a      	lsls	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	f010803f 	.word	0xf010803f

080077d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_DMA_Start_IT+0x26>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e040      	b.n	8007880 <HAL_DMA_Start_IT+0xa8>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b01      	cmp	r3, #1
 8007810:	d12f      	bne.n	8007872 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2202      	movs	r2, #2
 8007816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fa4a 	bl	8007cc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007830:	223f      	movs	r2, #63	; 0x3f
 8007832:	409a      	lsls	r2, r3
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0216 	orr.w	r2, r2, #22
 8007846:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0208 	orr.w	r2, r2, #8
 800785e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e005      	b.n	800787e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800787a:	2302      	movs	r3, #2
 800787c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800787e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007894:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007896:	f7ff f99d 	bl	8006bd4 <HAL_GetTick>
 800789a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d008      	beq.n	80078ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2280      	movs	r2, #128	; 0x80
 80078ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e052      	b.n	8007960 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0216 	bic.w	r2, r2, #22
 80078c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <HAL_DMA_Abort+0x62>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0208 	bic.w	r2, r2, #8
 80078f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800790a:	e013      	b.n	8007934 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800790c:	f7ff f962 	bl	8006bd4 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b05      	cmp	r3, #5
 8007918:	d90c      	bls.n	8007934 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2203      	movs	r2, #3
 8007924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e015      	b.n	8007960 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e4      	bne.n	800790c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007946:	223f      	movs	r2, #63	; 0x3f
 8007948:	409a      	lsls	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d004      	beq.n	8007986 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2280      	movs	r2, #128	; 0x80
 8007980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e00c      	b.n	80079a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2205      	movs	r2, #5
 800798a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0201 	bic.w	r2, r2, #1
 800799c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80079b8:	4b92      	ldr	r3, [pc, #584]	; (8007c04 <HAL_DMA_IRQHandler+0x258>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a92      	ldr	r2, [pc, #584]	; (8007c08 <HAL_DMA_IRQHandler+0x25c>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	0a9b      	lsrs	r3, r3, #10
 80079c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d6:	2208      	movs	r2, #8
 80079d8:	409a      	lsls	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4013      	ands	r3, r2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01a      	beq.n	8007a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d013      	beq.n	8007a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0204 	bic.w	r2, r2, #4
 80079fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a04:	2208      	movs	r2, #8
 8007a06:	409a      	lsls	r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a10:	f043 0201 	orr.w	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	409a      	lsls	r2, r3
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	f043 0202 	orr.w	r2, r3, #2
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a52:	2204      	movs	r2, #4
 8007a54:	409a      	lsls	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d012      	beq.n	8007a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a70:	2204      	movs	r2, #4
 8007a72:	409a      	lsls	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7c:	f043 0204 	orr.w	r2, r3, #4
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a88:	2210      	movs	r2, #16
 8007a8a:	409a      	lsls	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d043      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d03c      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa6:	2210      	movs	r2, #16
 8007aa8:	409a      	lsls	r2, r3
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d018      	beq.n	8007aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d108      	bne.n	8007adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d024      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
 8007ada:	e01f      	b.n	8007b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01b      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
 8007aec:	e016      	b.n	8007b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d107      	bne.n	8007b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0208 	bic.w	r2, r2, #8
 8007b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b20:	2220      	movs	r2, #32
 8007b22:	409a      	lsls	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4013      	ands	r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 808e 	beq.w	8007c4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 8086 	beq.w	8007c4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b42:	2220      	movs	r2, #32
 8007b44:	409a      	lsls	r2, r3
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b05      	cmp	r3, #5
 8007b54:	d136      	bne.n	8007bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0216 	bic.w	r2, r2, #22
 8007b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695a      	ldr	r2, [r3, #20]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <HAL_DMA_IRQHandler+0x1da>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d007      	beq.n	8007b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 0208 	bic.w	r2, r2, #8
 8007b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b9a:	223f      	movs	r2, #63	; 0x3f
 8007b9c:	409a      	lsls	r2, r3
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d07d      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
        }
        return;
 8007bc2:	e078      	b.n	8007cb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01c      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d108      	bne.n	8007bf2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d030      	beq.n	8007c4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3
 8007bf0:	e02b      	b.n	8007c4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d027      	beq.n	8007c4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
 8007c02:	e022      	b.n	8007c4a <HAL_DMA_IRQHandler+0x29e>
 8007c04:	20000068 	.word	0x20000068
 8007c08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10f      	bne.n	8007c3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0210 	bic.w	r2, r2, #16
 8007c28:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d032      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d022      	beq.n	8007ca4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2205      	movs	r2, #5
 8007c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	60bb      	str	r3, [r7, #8]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d307      	bcc.n	8007c92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f2      	bne.n	8007c76 <HAL_DMA_IRQHandler+0x2ca>
 8007c90:	e000      	b.n	8007c94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007c92:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
 8007cb4:	e000      	b.n	8007cb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007cb6:	bf00      	nop
    }
  }
}
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop

08007cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d108      	bne.n	8007d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007cfe:	e007      	b.n	8007d10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]
}
 8007d10:	bf00      	nop
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	3b10      	subs	r3, #16
 8007d2c:	4a14      	ldr	r2, [pc, #80]	; (8007d80 <DMA_CalcBaseAndBitshift+0x64>)
 8007d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d32:	091b      	lsrs	r3, r3, #4
 8007d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007d36:	4a13      	ldr	r2, [pc, #76]	; (8007d84 <DMA_CalcBaseAndBitshift+0x68>)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d909      	bls.n	8007d5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	1d1a      	adds	r2, r3, #4
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	659a      	str	r2, [r3, #88]	; 0x58
 8007d5c:	e007      	b.n	8007d6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d66:	f023 0303 	bic.w	r3, r3, #3
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	aaaaaaab 	.word	0xaaaaaaab
 8007d84:	080e9d54 	.word	0x080e9d54

08007d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d11f      	bne.n	8007de2 <DMA_CheckFifoParam+0x5a>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d856      	bhi.n	8007e56 <DMA_CheckFifoParam+0xce>
 8007da8:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <DMA_CheckFifoParam+0x28>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007dc1 	.word	0x08007dc1
 8007db4:	08007dd3 	.word	0x08007dd3
 8007db8:	08007dc1 	.word	0x08007dc1
 8007dbc:	08007e57 	.word	0x08007e57
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d046      	beq.n	8007e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dd0:	e043      	b.n	8007e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dda:	d140      	bne.n	8007e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007de0:	e03d      	b.n	8007e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dea:	d121      	bne.n	8007e30 <DMA_CheckFifoParam+0xa8>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d837      	bhi.n	8007e62 <DMA_CheckFifoParam+0xda>
 8007df2:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <DMA_CheckFifoParam+0x70>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e09 	.word	0x08007e09
 8007dfc:	08007e0f 	.word	0x08007e0f
 8007e00:	08007e09 	.word	0x08007e09
 8007e04:	08007e21 	.word	0x08007e21
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0c:	e030      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d025      	beq.n	8007e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e1e:	e022      	b.n	8007e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e28:	d11f      	bne.n	8007e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007e2e:	e01c      	b.n	8007e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d903      	bls.n	8007e3e <DMA_CheckFifoParam+0xb6>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d003      	beq.n	8007e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007e3c:	e018      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
      break;
 8007e42:	e015      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
      break;
 8007e54:	e00b      	b.n	8007e6e <DMA_CheckFifoParam+0xe6>
      break;
 8007e56:	bf00      	nop
 8007e58:	e00a      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
      break;
 8007e5a:	bf00      	nop
 8007e5c:	e008      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
      break;
 8007e5e:	bf00      	nop
 8007e60:	e006      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
      break;
 8007e62:	bf00      	nop
 8007e64:	e004      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
      break;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
      break;
 8007e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b089      	sub	sp, #36	; 0x24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e96:	2300      	movs	r3, #0
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	e16b      	b.n	8008174 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4013      	ands	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	f040 815a 	bne.w	800816e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d005      	beq.n	8007ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d130      	bne.n	8007f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	2203      	movs	r2, #3
 8007ede:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee2:	43db      	mvns	r3, r3
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f08:	2201      	movs	r2, #1
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f10:	43db      	mvns	r3, r3
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	4013      	ands	r3, r2
 8007f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	091b      	lsrs	r3, r3, #4
 8007f1e:	f003 0201 	and.w	r2, r3, #1
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d017      	beq.n	8007f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f50:	43db      	mvns	r3, r3
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	4013      	ands	r3, r2
 8007f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	fa02 f303 	lsl.w	r3, r2, r3
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d123      	bne.n	8007fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	08da      	lsrs	r2, r3, #3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3208      	adds	r2, #8
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	220f      	movs	r2, #15
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	08da      	lsrs	r2, r3, #3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3208      	adds	r2, #8
 8007fbe:	69b9      	ldr	r1, [r7, #24]
 8007fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	2203      	movs	r2, #3
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f003 0203 	and.w	r2, r3, #3
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 80b4 	beq.w	800816e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	4b60      	ldr	r3, [pc, #384]	; (800818c <HAL_GPIO_Init+0x30c>)
 800800c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800e:	4a5f      	ldr	r2, [pc, #380]	; (800818c <HAL_GPIO_Init+0x30c>)
 8008010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008014:	6453      	str	r3, [r2, #68]	; 0x44
 8008016:	4b5d      	ldr	r3, [pc, #372]	; (800818c <HAL_GPIO_Init+0x30c>)
 8008018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008022:	4a5b      	ldr	r2, [pc, #364]	; (8008190 <HAL_GPIO_Init+0x310>)
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	3302      	adds	r3, #2
 800802a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800802e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	220f      	movs	r2, #15
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	43db      	mvns	r3, r3
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	4013      	ands	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a52      	ldr	r2, [pc, #328]	; (8008194 <HAL_GPIO_Init+0x314>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d02b      	beq.n	80080a6 <HAL_GPIO_Init+0x226>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a51      	ldr	r2, [pc, #324]	; (8008198 <HAL_GPIO_Init+0x318>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d025      	beq.n	80080a2 <HAL_GPIO_Init+0x222>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a50      	ldr	r2, [pc, #320]	; (800819c <HAL_GPIO_Init+0x31c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01f      	beq.n	800809e <HAL_GPIO_Init+0x21e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a4f      	ldr	r2, [pc, #316]	; (80081a0 <HAL_GPIO_Init+0x320>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d019      	beq.n	800809a <HAL_GPIO_Init+0x21a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a4e      	ldr	r2, [pc, #312]	; (80081a4 <HAL_GPIO_Init+0x324>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d013      	beq.n	8008096 <HAL_GPIO_Init+0x216>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a4d      	ldr	r2, [pc, #308]	; (80081a8 <HAL_GPIO_Init+0x328>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d00d      	beq.n	8008092 <HAL_GPIO_Init+0x212>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a4c      	ldr	r2, [pc, #304]	; (80081ac <HAL_GPIO_Init+0x32c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d007      	beq.n	800808e <HAL_GPIO_Init+0x20e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a4b      	ldr	r2, [pc, #300]	; (80081b0 <HAL_GPIO_Init+0x330>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d101      	bne.n	800808a <HAL_GPIO_Init+0x20a>
 8008086:	2307      	movs	r3, #7
 8008088:	e00e      	b.n	80080a8 <HAL_GPIO_Init+0x228>
 800808a:	2308      	movs	r3, #8
 800808c:	e00c      	b.n	80080a8 <HAL_GPIO_Init+0x228>
 800808e:	2306      	movs	r3, #6
 8008090:	e00a      	b.n	80080a8 <HAL_GPIO_Init+0x228>
 8008092:	2305      	movs	r3, #5
 8008094:	e008      	b.n	80080a8 <HAL_GPIO_Init+0x228>
 8008096:	2304      	movs	r3, #4
 8008098:	e006      	b.n	80080a8 <HAL_GPIO_Init+0x228>
 800809a:	2303      	movs	r3, #3
 800809c:	e004      	b.n	80080a8 <HAL_GPIO_Init+0x228>
 800809e:	2302      	movs	r3, #2
 80080a0:	e002      	b.n	80080a8 <HAL_GPIO_Init+0x228>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <HAL_GPIO_Init+0x228>
 80080a6:	2300      	movs	r3, #0
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	f002 0203 	and.w	r2, r2, #3
 80080ae:	0092      	lsls	r2, r2, #2
 80080b0:	4093      	lsls	r3, r2
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080b8:	4935      	ldr	r1, [pc, #212]	; (8008190 <HAL_GPIO_Init+0x310>)
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	089b      	lsrs	r3, r3, #2
 80080be:	3302      	adds	r3, #2
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080c6:	4b3b      	ldr	r3, [pc, #236]	; (80081b4 <HAL_GPIO_Init+0x334>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	43db      	mvns	r3, r3
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	4013      	ands	r3, r2
 80080d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80080ea:	4a32      	ldr	r2, [pc, #200]	; (80081b4 <HAL_GPIO_Init+0x334>)
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80080f0:	4b30      	ldr	r3, [pc, #192]	; (80081b4 <HAL_GPIO_Init+0x334>)
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	43db      	mvns	r3, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4013      	ands	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008114:	4a27      	ldr	r2, [pc, #156]	; (80081b4 <HAL_GPIO_Init+0x334>)
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800811a:	4b26      	ldr	r3, [pc, #152]	; (80081b4 <HAL_GPIO_Init+0x334>)
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	43db      	mvns	r3, r3
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	4013      	ands	r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800813e:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <HAL_GPIO_Init+0x334>)
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008144:	4b1b      	ldr	r3, [pc, #108]	; (80081b4 <HAL_GPIO_Init+0x334>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	43db      	mvns	r3, r3
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	4013      	ands	r3, r2
 8008152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008168:	4a12      	ldr	r2, [pc, #72]	; (80081b4 <HAL_GPIO_Init+0x334>)
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	3301      	adds	r3, #1
 8008172:	61fb      	str	r3, [r7, #28]
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	2b0f      	cmp	r3, #15
 8008178:	f67f ae90 	bls.w	8007e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	3724      	adds	r7, #36	; 0x24
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	40023800 	.word	0x40023800
 8008190:	40013800 	.word	0x40013800
 8008194:	40020000 	.word	0x40020000
 8008198:	40020400 	.word	0x40020400
 800819c:	40020800 	.word	0x40020800
 80081a0:	40020c00 	.word	0x40020c00
 80081a4:	40021000 	.word	0x40021000
 80081a8:	40021400 	.word	0x40021400
 80081ac:	40021800 	.word	0x40021800
 80081b0:	40021c00 	.word	0x40021c00
 80081b4:	40013c00 	.word	0x40013c00

080081b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	887b      	ldrh	r3, [r7, #2]
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081d0:	2301      	movs	r3, #1
 80081d2:	73fb      	strb	r3, [r7, #15]
 80081d4:	e001      	b.n	80081da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	807b      	strh	r3, [r7, #2]
 80081f4:	4613      	mov	r3, r2
 80081f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081f8:	787b      	ldrb	r3, [r7, #1]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081fe:	887a      	ldrh	r2, [r7, #2]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008204:	e003      	b.n	800820e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008206:	887b      	ldrh	r3, [r7, #2]
 8008208:	041a      	lsls	r2, r3, #16
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	619a      	str	r2, [r3, #24]
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e12b      	b.n	8008486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d106      	bne.n	8008248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fc ffde 	bl	8005204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2224      	movs	r2, #36	; 0x24
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0201 	bic.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800826e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800827e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008280:	f001 fbd8 	bl	8009a34 <HAL_RCC_GetPCLK1Freq>
 8008284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	4a81      	ldr	r2, [pc, #516]	; (8008490 <HAL_I2C_Init+0x274>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d807      	bhi.n	80082a0 <HAL_I2C_Init+0x84>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4a80      	ldr	r2, [pc, #512]	; (8008494 <HAL_I2C_Init+0x278>)
 8008294:	4293      	cmp	r3, r2
 8008296:	bf94      	ite	ls
 8008298:	2301      	movls	r3, #1
 800829a:	2300      	movhi	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	e006      	b.n	80082ae <HAL_I2C_Init+0x92>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a7d      	ldr	r2, [pc, #500]	; (8008498 <HAL_I2C_Init+0x27c>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	bf94      	ite	ls
 80082a8:	2301      	movls	r3, #1
 80082aa:	2300      	movhi	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e0e7      	b.n	8008486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4a78      	ldr	r2, [pc, #480]	; (800849c <HAL_I2C_Init+0x280>)
 80082ba:	fba2 2303 	umull	r2, r3, r2, r3
 80082be:	0c9b      	lsrs	r3, r3, #18
 80082c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	4a6a      	ldr	r2, [pc, #424]	; (8008490 <HAL_I2C_Init+0x274>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d802      	bhi.n	80082f0 <HAL_I2C_Init+0xd4>
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3301      	adds	r3, #1
 80082ee:	e009      	b.n	8008304 <HAL_I2C_Init+0xe8>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80082f6:	fb02 f303 	mul.w	r3, r2, r3
 80082fa:	4a69      	ldr	r2, [pc, #420]	; (80084a0 <HAL_I2C_Init+0x284>)
 80082fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008300:	099b      	lsrs	r3, r3, #6
 8008302:	3301      	adds	r3, #1
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6812      	ldr	r2, [r2, #0]
 8008308:	430b      	orrs	r3, r1
 800830a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	495c      	ldr	r1, [pc, #368]	; (8008490 <HAL_I2C_Init+0x274>)
 8008320:	428b      	cmp	r3, r1
 8008322:	d819      	bhi.n	8008358 <HAL_I2C_Init+0x13c>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	1e59      	subs	r1, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008332:	1c59      	adds	r1, r3, #1
 8008334:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008338:	400b      	ands	r3, r1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <HAL_I2C_Init+0x138>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	1e59      	subs	r1, r3, #1
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	fbb1 f3f3 	udiv	r3, r1, r3
 800834c:	3301      	adds	r3, #1
 800834e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008352:	e051      	b.n	80083f8 <HAL_I2C_Init+0x1dc>
 8008354:	2304      	movs	r3, #4
 8008356:	e04f      	b.n	80083f8 <HAL_I2C_Init+0x1dc>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d111      	bne.n	8008384 <HAL_I2C_Init+0x168>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	1e58      	subs	r0, r3, #1
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6859      	ldr	r1, [r3, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	440b      	add	r3, r1
 800836e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008372:	3301      	adds	r3, #1
 8008374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008378:	2b00      	cmp	r3, #0
 800837a:	bf0c      	ite	eq
 800837c:	2301      	moveq	r3, #1
 800837e:	2300      	movne	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	e012      	b.n	80083aa <HAL_I2C_Init+0x18e>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	1e58      	subs	r0, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6859      	ldr	r1, [r3, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	0099      	lsls	r1, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	fbb0 f3f3 	udiv	r3, r0, r3
 800839a:	3301      	adds	r3, #1
 800839c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bf0c      	ite	eq
 80083a4:	2301      	moveq	r3, #1
 80083a6:	2300      	movne	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_I2C_Init+0x196>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e022      	b.n	80083f8 <HAL_I2C_Init+0x1dc>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10e      	bne.n	80083d8 <HAL_I2C_Init+0x1bc>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	1e58      	subs	r0, r3, #1
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6859      	ldr	r1, [r3, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	440b      	add	r3, r1
 80083c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80083cc:	3301      	adds	r3, #1
 80083ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d6:	e00f      	b.n	80083f8 <HAL_I2C_Init+0x1dc>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	1e58      	subs	r0, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6859      	ldr	r1, [r3, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	0099      	lsls	r1, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80083ee:	3301      	adds	r3, #1
 80083f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	6809      	ldr	r1, [r1, #0]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69da      	ldr	r2, [r3, #28]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6911      	ldr	r1, [r2, #16]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	68d2      	ldr	r2, [r2, #12]
 8008432:	4311      	orrs	r1, r2
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6812      	ldr	r2, [r2, #0]
 8008438:	430b      	orrs	r3, r1
 800843a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	695a      	ldr	r2, [r3, #20]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0201 	orr.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	000186a0 	.word	0x000186a0
 8008494:	001e847f 	.word	0x001e847f
 8008498:	003d08ff 	.word	0x003d08ff
 800849c:	431bde83 	.word	0x431bde83
 80084a0:	10624dd3 	.word	0x10624dd3

080084a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	4608      	mov	r0, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	461a      	mov	r2, r3
 80084b2:	4603      	mov	r3, r0
 80084b4:	817b      	strh	r3, [r7, #10]
 80084b6:	460b      	mov	r3, r1
 80084b8:	813b      	strh	r3, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084be:	f7fe fb89 	bl	8006bd4 <HAL_GetTick>
 80084c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	f040 80d9 	bne.w	8008684 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	2319      	movs	r3, #25
 80084d8:	2201      	movs	r2, #1
 80084da:	496d      	ldr	r1, [pc, #436]	; (8008690 <HAL_I2C_Mem_Write+0x1ec>)
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fc7f 	bl	8008de0 <I2C_WaitOnFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80084e8:	2302      	movs	r3, #2
 80084ea:	e0cc      	b.n	8008686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_I2C_Mem_Write+0x56>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e0c5      	b.n	8008686 <HAL_I2C_Mem_Write+0x1e2>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b01      	cmp	r3, #1
 800850e:	d007      	beq.n	8008520 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0201 	orr.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800852e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2221      	movs	r2, #33	; 0x21
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2240      	movs	r2, #64	; 0x40
 800853c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a3a      	ldr	r2, [r7, #32]
 800854a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4a4d      	ldr	r2, [pc, #308]	; (8008694 <HAL_I2C_Mem_Write+0x1f0>)
 8008560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008562:	88f8      	ldrh	r0, [r7, #6]
 8008564:	893a      	ldrh	r2, [r7, #8]
 8008566:	8979      	ldrh	r1, [r7, #10]
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	4603      	mov	r3, r0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fab6 	bl	8008ae4 <I2C_RequestMemoryWrite>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d052      	beq.n	8008624 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e081      	b.n	8008686 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fd00 	bl	8008f8c <I2C_WaitOnTXEFlagUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00d      	beq.n	80085ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	2b04      	cmp	r3, #4
 8008598:	d107      	bne.n	80085aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e06b      	b.n	8008686 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	781a      	ldrb	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b01      	subs	r3, #1
 80085d8:	b29a      	uxth	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d11b      	bne.n	8008624 <HAL_I2C_Mem_Write+0x180>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d017      	beq.n	8008624 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	781a      	ldrb	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1aa      	bne.n	8008582 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 fcec 	bl	800900e <I2C_WaitOnBTFFlagUntilTimeout>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00d      	beq.n	8008658 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	2b04      	cmp	r3, #4
 8008642:	d107      	bne.n	8008654 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008652:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e016      	b.n	8008686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2220      	movs	r2, #32
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	e000      	b.n	8008686 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008684:	2302      	movs	r3, #2
  }
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	00100002 	.word	0x00100002
 8008694:	ffff0000 	.word	0xffff0000

08008698 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08c      	sub	sp, #48	; 0x30
 800869c:	af02      	add	r7, sp, #8
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	4608      	mov	r0, r1
 80086a2:	4611      	mov	r1, r2
 80086a4:	461a      	mov	r2, r3
 80086a6:	4603      	mov	r3, r0
 80086a8:	817b      	strh	r3, [r7, #10]
 80086aa:	460b      	mov	r3, r1
 80086ac:	813b      	strh	r3, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086b2:	f7fe fa8f 	bl	8006bd4 <HAL_GetTick>
 80086b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	f040 8208 	bne.w	8008ad6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	2319      	movs	r3, #25
 80086cc:	2201      	movs	r2, #1
 80086ce:	497b      	ldr	r1, [pc, #492]	; (80088bc <HAL_I2C_Mem_Read+0x224>)
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fb85 	bl	8008de0 <I2C_WaitOnFlagUntilTimeout>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80086dc:	2302      	movs	r3, #2
 80086de:	e1fb      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d101      	bne.n	80086ee <HAL_I2C_Mem_Read+0x56>
 80086ea:	2302      	movs	r3, #2
 80086ec:	e1f4      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b01      	cmp	r3, #1
 8008702:	d007      	beq.n	8008714 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0201 	orr.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008722:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2222      	movs	r2, #34	; 0x22
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2240      	movs	r2, #64	; 0x40
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4a5b      	ldr	r2, [pc, #364]	; (80088c0 <HAL_I2C_Mem_Read+0x228>)
 8008754:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008756:	88f8      	ldrh	r0, [r7, #6]
 8008758:	893a      	ldrh	r2, [r7, #8]
 800875a:	8979      	ldrh	r1, [r7, #10]
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4603      	mov	r3, r0
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fa52 	bl	8008c10 <I2C_RequestMemoryRead>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e1b0      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d113      	bne.n	80087a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800877e:	2300      	movs	r3, #0
 8008780:	623b      	str	r3, [r7, #32]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	623b      	str	r3, [r7, #32]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	623b      	str	r3, [r7, #32]
 8008792:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e184      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d11b      	bne.n	80087e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087be:	2300      	movs	r3, #0
 80087c0:	61fb      	str	r3, [r7, #28]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	61fb      	str	r3, [r7, #28]
 80087d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e164      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d11b      	bne.n	8008826 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800880c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800880e:	2300      	movs	r3, #0
 8008810:	61bb      	str	r3, [r7, #24]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	61bb      	str	r3, [r7, #24]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	e144      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	617b      	str	r3, [r7, #20]
 800883a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800883c:	e138      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008842:	2b03      	cmp	r3, #3
 8008844:	f200 80f1 	bhi.w	8008a2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800884c:	2b01      	cmp	r3, #1
 800884e:	d123      	bne.n	8008898 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 fc1b 	bl	8009090 <I2C_WaitOnRXNEFlagUntilTimeout>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e139      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691a      	ldr	r2, [r3, #16]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	b2d2      	uxtb	r2, r2
 8008870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888c:	b29b      	uxth	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	b29a      	uxth	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008896:	e10b      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889c:	2b02      	cmp	r3, #2
 800889e:	d14e      	bne.n	800893e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	2200      	movs	r2, #0
 80088a8:	4906      	ldr	r1, [pc, #24]	; (80088c4 <HAL_I2C_Mem_Read+0x22c>)
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 fa98 	bl	8008de0 <I2C_WaitOnFlagUntilTimeout>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d008      	beq.n	80088c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e10e      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
 80088ba:	bf00      	nop
 80088bc:	00100002 	.word	0x00100002
 80088c0:	ffff0000 	.word	0xffff0000
 80088c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691a      	ldr	r2, [r3, #16]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f4:	3b01      	subs	r3, #1
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008900:	b29b      	uxth	r3, r3
 8008902:	3b01      	subs	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691a      	ldr	r2, [r3, #16]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	b2d2      	uxtb	r2, r2
 8008916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800893c:	e0b8      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	2200      	movs	r2, #0
 8008946:	4966      	ldr	r1, [pc, #408]	; (8008ae0 <HAL_I2C_Mem_Read+0x448>)
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fa49 	bl	8008de0 <I2C_WaitOnFlagUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e0bf      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	691a      	ldr	r2, [r3, #16]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008984:	3b01      	subs	r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008990:	b29b      	uxth	r3, r3
 8008992:	3b01      	subs	r3, #1
 8008994:	b29a      	uxth	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a0:	2200      	movs	r2, #0
 80089a2:	494f      	ldr	r1, [pc, #316]	; (8008ae0 <HAL_I2C_Mem_Read+0x448>)
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fa1b 	bl	8008de0 <I2C_WaitOnFlagUntilTimeout>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e091      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	691a      	ldr	r2, [r3, #16]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a28:	e042      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 fb2e 	bl	8009090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e04c      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d118      	bne.n	8008ab0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f47f aec2 	bne.w	800883e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e000      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008ad6:	2302      	movs	r3, #2
  }
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3728      	adds	r7, #40	; 0x28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	00010004 	.word	0x00010004

08008ae4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	4608      	mov	r0, r1
 8008aee:	4611      	mov	r1, r2
 8008af0:	461a      	mov	r2, r3
 8008af2:	4603      	mov	r3, r0
 8008af4:	817b      	strh	r3, [r7, #10]
 8008af6:	460b      	mov	r3, r1
 8008af8:	813b      	strh	r3, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f960 	bl	8008de0 <I2C_WaitOnFlagUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00d      	beq.n	8008b42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b34:	d103      	bne.n	8008b3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e05f      	b.n	8008c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b42:	897b      	ldrh	r3, [r7, #10]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	461a      	mov	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	6a3a      	ldr	r2, [r7, #32]
 8008b56:	492d      	ldr	r1, [pc, #180]	; (8008c0c <I2C_RequestMemoryWrite+0x128>)
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 f998 	bl	8008e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e04c      	b.n	8008c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b80:	6a39      	ldr	r1, [r7, #32]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 fa02 	bl	8008f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00d      	beq.n	8008baa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d107      	bne.n	8008ba6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ba4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e02b      	b.n	8008c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d105      	bne.n	8008bbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bb0:	893b      	ldrh	r3, [r7, #8]
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	611a      	str	r2, [r3, #16]
 8008bba:	e021      	b.n	8008c00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008bbc:	893b      	ldrh	r3, [r7, #8]
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bcc:	6a39      	ldr	r1, [r7, #32]
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 f9dc 	bl	8008f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00d      	beq.n	8008bf6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d107      	bne.n	8008bf2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e005      	b.n	8008c02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bf6:	893b      	ldrh	r3, [r7, #8]
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	00010002 	.word	0x00010002

08008c10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	4608      	mov	r0, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	817b      	strh	r3, [r7, #10]
 8008c22:	460b      	mov	r3, r1
 8008c24:	813b      	strh	r3, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f8c2 	bl	8008de0 <I2C_WaitOnFlagUntilTimeout>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00d      	beq.n	8008c7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c70:	d103      	bne.n	8008c7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e0aa      	b.n	8008dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c7e:	897b      	ldrh	r3, [r7, #10]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	461a      	mov	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	6a3a      	ldr	r2, [r7, #32]
 8008c92:	4952      	ldr	r1, [pc, #328]	; (8008ddc <I2C_RequestMemoryRead+0x1cc>)
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f8fa 	bl	8008e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e097      	b.n	8008dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbc:	6a39      	ldr	r1, [r7, #32]
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 f964 	bl	8008f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00d      	beq.n	8008ce6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d107      	bne.n	8008ce2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ce0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e076      	b.n	8008dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d105      	bne.n	8008cf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cec:	893b      	ldrh	r3, [r7, #8]
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	611a      	str	r2, [r3, #16]
 8008cf6:	e021      	b.n	8008d3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008cf8:	893b      	ldrh	r3, [r7, #8]
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d08:	6a39      	ldr	r1, [r7, #32]
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 f93e 	bl	8008f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00d      	beq.n	8008d32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d107      	bne.n	8008d2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e050      	b.n	8008dd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d32:	893b      	ldrh	r3, [r7, #8]
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3e:	6a39      	ldr	r1, [r7, #32]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f923 	bl	8008f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00d      	beq.n	8008d68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d107      	bne.n	8008d64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e035      	b.n	8008dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f82b 	bl	8008de0 <I2C_WaitOnFlagUntilTimeout>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d9e:	d103      	bne.n	8008da8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e013      	b.n	8008dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008dac:	897b      	ldrh	r3, [r7, #10]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	6a3a      	ldr	r2, [r7, #32]
 8008dc0:	4906      	ldr	r1, [pc, #24]	; (8008ddc <I2C_RequestMemoryRead+0x1cc>)
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f863 	bl	8008e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	00010002 	.word	0x00010002

08008de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	4613      	mov	r3, r2
 8008dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008df0:	e025      	b.n	8008e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df8:	d021      	beq.n	8008e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dfa:	f7fd feeb 	bl	8006bd4 <HAL_GetTick>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d302      	bcc.n	8008e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d116      	bne.n	8008e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f043 0220 	orr.w	r2, r3, #32
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e023      	b.n	8008e86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	0c1b      	lsrs	r3, r3, #16
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d10d      	bne.n	8008e64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	43da      	mvns	r2, r3
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4013      	ands	r3, r2
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bf0c      	ite	eq
 8008e5a:	2301      	moveq	r3, #1
 8008e5c:	2300      	movne	r3, #0
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	461a      	mov	r2, r3
 8008e62:	e00c      	b.n	8008e7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	43da      	mvns	r2, r3
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf0c      	ite	eq
 8008e76:	2301      	moveq	r3, #1
 8008e78:	2300      	movne	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d0b6      	beq.n	8008df2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	607a      	str	r2, [r7, #4]
 8008e9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e9c:	e051      	b.n	8008f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eac:	d123      	bne.n	8008ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ebc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ec6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	f043 0204 	orr.w	r2, r3, #4
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e046      	b.n	8008f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efc:	d021      	beq.n	8008f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efe:	f7fd fe69 	bl	8006bd4 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d302      	bcc.n	8008f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d116      	bne.n	8008f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	f043 0220 	orr.w	r2, r3, #32
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e020      	b.n	8008f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	0c1b      	lsrs	r3, r3, #16
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d10c      	bne.n	8008f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	43da      	mvns	r2, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4013      	ands	r3, r2
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bf14      	ite	ne
 8008f5e:	2301      	movne	r3, #1
 8008f60:	2300      	moveq	r3, #0
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	e00b      	b.n	8008f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	43da      	mvns	r2, r3
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	4013      	ands	r3, r2
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bf14      	ite	ne
 8008f78:	2301      	movne	r3, #1
 8008f7a:	2300      	moveq	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d18d      	bne.n	8008e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f98:	e02d      	b.n	8008ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 f8ce 	bl	800913c <I2C_IsAcknowledgeFailed>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e02d      	b.n	8009006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb0:	d021      	beq.n	8008ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fb2:	f7fd fe0f 	bl	8006bd4 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d302      	bcc.n	8008fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d116      	bne.n	8008ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	f043 0220 	orr.w	r2, r3, #32
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e007      	b.n	8009006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009000:	2b80      	cmp	r3, #128	; 0x80
 8009002:	d1ca      	bne.n	8008f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800901a:	e02d      	b.n	8009078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f88d 	bl	800913c <I2C_IsAcknowledgeFailed>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e02d      	b.n	8009088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009032:	d021      	beq.n	8009078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009034:	f7fd fdce 	bl	8006bd4 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	429a      	cmp	r2, r3
 8009042:	d302      	bcc.n	800904a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d116      	bne.n	8009078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009064:	f043 0220 	orr.w	r2, r3, #32
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e007      	b.n	8009088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	f003 0304 	and.w	r3, r3, #4
 8009082:	2b04      	cmp	r3, #4
 8009084:	d1ca      	bne.n	800901c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800909c:	e042      	b.n	8009124 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b10      	cmp	r3, #16
 80090aa:	d119      	bne.n	80090e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f06f 0210 	mvn.w	r2, #16
 80090b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2220      	movs	r2, #32
 80090c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e029      	b.n	8009134 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090e0:	f7fd fd78 	bl	8006bd4 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d302      	bcc.n	80090f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d116      	bne.n	8009124 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2220      	movs	r2, #32
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009110:	f043 0220 	orr.w	r2, r3, #32
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e007      	b.n	8009134 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d1b5      	bne.n	800909e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800914e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009152:	d11b      	bne.n	800918c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800915c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009178:	f043 0204 	orr.w	r2, r3, #4
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e000      	b.n	800918e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
	...

0800919c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e264      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d075      	beq.n	80092a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ba:	4ba3      	ldr	r3, [pc, #652]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f003 030c 	and.w	r3, r3, #12
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d00c      	beq.n	80091e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091c6:	4ba0      	ldr	r3, [pc, #640]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	d112      	bne.n	80091f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091d2:	4b9d      	ldr	r3, [pc, #628]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091de:	d10b      	bne.n	80091f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091e0:	4b99      	ldr	r3, [pc, #612]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d05b      	beq.n	80092a4 <HAL_RCC_OscConfig+0x108>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d157      	bne.n	80092a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e23f      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009200:	d106      	bne.n	8009210 <HAL_RCC_OscConfig+0x74>
 8009202:	4b91      	ldr	r3, [pc, #580]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a90      	ldr	r2, [pc, #576]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	e01d      	b.n	800924c <HAL_RCC_OscConfig+0xb0>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009218:	d10c      	bne.n	8009234 <HAL_RCC_OscConfig+0x98>
 800921a:	4b8b      	ldr	r3, [pc, #556]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a8a      	ldr	r2, [pc, #552]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	4b88      	ldr	r3, [pc, #544]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a87      	ldr	r2, [pc, #540]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 800922c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	e00b      	b.n	800924c <HAL_RCC_OscConfig+0xb0>
 8009234:	4b84      	ldr	r3, [pc, #528]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a83      	ldr	r2, [pc, #524]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 800923a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	4b81      	ldr	r3, [pc, #516]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a80      	ldr	r2, [pc, #512]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800924a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d013      	beq.n	800927c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009254:	f7fd fcbe 	bl	8006bd4 <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800925c:	f7fd fcba 	bl	8006bd4 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b64      	cmp	r3, #100	; 0x64
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e204      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800926e:	4b76      	ldr	r3, [pc, #472]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f0      	beq.n	800925c <HAL_RCC_OscConfig+0xc0>
 800927a:	e014      	b.n	80092a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800927c:	f7fd fcaa 	bl	8006bd4 <HAL_GetTick>
 8009280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009284:	f7fd fca6 	bl	8006bd4 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b64      	cmp	r3, #100	; 0x64
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e1f0      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009296:	4b6c      	ldr	r3, [pc, #432]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <HAL_RCC_OscConfig+0xe8>
 80092a2:	e000      	b.n	80092a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d063      	beq.n	800937a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092b2:	4b65      	ldr	r3, [pc, #404]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 030c 	and.w	r3, r3, #12
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092be:	4b62      	ldr	r3, [pc, #392]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	d11c      	bne.n	8009304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092ca:	4b5f      	ldr	r3, [pc, #380]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d116      	bne.n	8009304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092d6:	4b5c      	ldr	r3, [pc, #368]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d005      	beq.n	80092ee <HAL_RCC_OscConfig+0x152>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d001      	beq.n	80092ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e1c4      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ee:	4b56      	ldr	r3, [pc, #344]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	4952      	ldr	r1, [pc, #328]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009302:	e03a      	b.n	800937a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d020      	beq.n	800934e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800930c:	4b4f      	ldr	r3, [pc, #316]	; (800944c <HAL_RCC_OscConfig+0x2b0>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009312:	f7fd fc5f 	bl	8006bd4 <HAL_GetTick>
 8009316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009318:	e008      	b.n	800932c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800931a:	f7fd fc5b 	bl	8006bd4 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d901      	bls.n	800932c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e1a5      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800932c:	4b46      	ldr	r3, [pc, #280]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0f0      	beq.n	800931a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009338:	4b43      	ldr	r3, [pc, #268]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	4940      	ldr	r1, [pc, #256]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009348:	4313      	orrs	r3, r2
 800934a:	600b      	str	r3, [r1, #0]
 800934c:	e015      	b.n	800937a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800934e:	4b3f      	ldr	r3, [pc, #252]	; (800944c <HAL_RCC_OscConfig+0x2b0>)
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009354:	f7fd fc3e 	bl	8006bd4 <HAL_GetTick>
 8009358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800935a:	e008      	b.n	800936e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800935c:	f7fd fc3a 	bl	8006bd4 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b02      	cmp	r3, #2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e184      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800936e:	4b36      	ldr	r3, [pc, #216]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1f0      	bne.n	800935c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0308 	and.w	r3, r3, #8
 8009382:	2b00      	cmp	r3, #0
 8009384:	d030      	beq.n	80093e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d016      	beq.n	80093bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800938e:	4b30      	ldr	r3, [pc, #192]	; (8009450 <HAL_RCC_OscConfig+0x2b4>)
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009394:	f7fd fc1e 	bl	8006bd4 <HAL_GetTick>
 8009398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800939a:	e008      	b.n	80093ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800939c:	f7fd fc1a 	bl	8006bd4 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d901      	bls.n	80093ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e164      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093ae:	4b26      	ldr	r3, [pc, #152]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80093b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0f0      	beq.n	800939c <HAL_RCC_OscConfig+0x200>
 80093ba:	e015      	b.n	80093e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093bc:	4b24      	ldr	r3, [pc, #144]	; (8009450 <HAL_RCC_OscConfig+0x2b4>)
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093c2:	f7fd fc07 	bl	8006bd4 <HAL_GetTick>
 80093c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093c8:	e008      	b.n	80093dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093ca:	f7fd fc03 	bl	8006bd4 <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d901      	bls.n	80093dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e14d      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093dc:	4b1a      	ldr	r3, [pc, #104]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80093de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1f0      	bne.n	80093ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 80a0 	beq.w	8009536 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093fa:	4b13      	ldr	r3, [pc, #76]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10f      	bne.n	8009426 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009406:	2300      	movs	r3, #0
 8009408:	60bb      	str	r3, [r7, #8]
 800940a:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	4a0e      	ldr	r2, [pc, #56]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009414:	6413      	str	r3, [r2, #64]	; 0x40
 8009416:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <HAL_RCC_OscConfig+0x2ac>)
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800941e:	60bb      	str	r3, [r7, #8]
 8009420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009422:	2301      	movs	r3, #1
 8009424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009426:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <HAL_RCC_OscConfig+0x2b8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942e:	2b00      	cmp	r3, #0
 8009430:	d121      	bne.n	8009476 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009432:	4b08      	ldr	r3, [pc, #32]	; (8009454 <HAL_RCC_OscConfig+0x2b8>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a07      	ldr	r2, [pc, #28]	; (8009454 <HAL_RCC_OscConfig+0x2b8>)
 8009438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800943c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800943e:	f7fd fbc9 	bl	8006bd4 <HAL_GetTick>
 8009442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009444:	e011      	b.n	800946a <HAL_RCC_OscConfig+0x2ce>
 8009446:	bf00      	nop
 8009448:	40023800 	.word	0x40023800
 800944c:	42470000 	.word	0x42470000
 8009450:	42470e80 	.word	0x42470e80
 8009454:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009458:	f7fd fbbc 	bl	8006bd4 <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d901      	bls.n	800946a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e106      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800946a:	4b85      	ldr	r3, [pc, #532]	; (8009680 <HAL_RCC_OscConfig+0x4e4>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0f0      	beq.n	8009458 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d106      	bne.n	800948c <HAL_RCC_OscConfig+0x2f0>
 800947e:	4b81      	ldr	r3, [pc, #516]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 8009480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009482:	4a80      	ldr	r2, [pc, #512]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 8009484:	f043 0301 	orr.w	r3, r3, #1
 8009488:	6713      	str	r3, [r2, #112]	; 0x70
 800948a:	e01c      	b.n	80094c6 <HAL_RCC_OscConfig+0x32a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	2b05      	cmp	r3, #5
 8009492:	d10c      	bne.n	80094ae <HAL_RCC_OscConfig+0x312>
 8009494:	4b7b      	ldr	r3, [pc, #492]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 8009496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009498:	4a7a      	ldr	r2, [pc, #488]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 800949a:	f043 0304 	orr.w	r3, r3, #4
 800949e:	6713      	str	r3, [r2, #112]	; 0x70
 80094a0:	4b78      	ldr	r3, [pc, #480]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80094a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a4:	4a77      	ldr	r2, [pc, #476]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80094a6:	f043 0301 	orr.w	r3, r3, #1
 80094aa:	6713      	str	r3, [r2, #112]	; 0x70
 80094ac:	e00b      	b.n	80094c6 <HAL_RCC_OscConfig+0x32a>
 80094ae:	4b75      	ldr	r3, [pc, #468]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80094b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b2:	4a74      	ldr	r2, [pc, #464]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80094b4:	f023 0301 	bic.w	r3, r3, #1
 80094b8:	6713      	str	r3, [r2, #112]	; 0x70
 80094ba:	4b72      	ldr	r3, [pc, #456]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80094bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094be:	4a71      	ldr	r2, [pc, #452]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80094c0:	f023 0304 	bic.w	r3, r3, #4
 80094c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d015      	beq.n	80094fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ce:	f7fd fb81 	bl	8006bd4 <HAL_GetTick>
 80094d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094d4:	e00a      	b.n	80094ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094d6:	f7fd fb7d 	bl	8006bd4 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d901      	bls.n	80094ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e0c5      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ec:	4b65      	ldr	r3, [pc, #404]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80094ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0ee      	beq.n	80094d6 <HAL_RCC_OscConfig+0x33a>
 80094f8:	e014      	b.n	8009524 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094fa:	f7fd fb6b 	bl	8006bd4 <HAL_GetTick>
 80094fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009500:	e00a      	b.n	8009518 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009502:	f7fd fb67 	bl	8006bd4 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009510:	4293      	cmp	r3, r2
 8009512:	d901      	bls.n	8009518 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e0af      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009518:	4b5a      	ldr	r3, [pc, #360]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 800951a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1ee      	bne.n	8009502 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d105      	bne.n	8009536 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800952a:	4b56      	ldr	r3, [pc, #344]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	4a55      	ldr	r2, [pc, #340]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 8009530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009534:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 809b 	beq.w	8009676 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009540:	4b50      	ldr	r3, [pc, #320]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f003 030c 	and.w	r3, r3, #12
 8009548:	2b08      	cmp	r3, #8
 800954a:	d05c      	beq.n	8009606 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d141      	bne.n	80095d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009554:	4b4c      	ldr	r3, [pc, #304]	; (8009688 <HAL_RCC_OscConfig+0x4ec>)
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800955a:	f7fd fb3b 	bl	8006bd4 <HAL_GetTick>
 800955e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009560:	e008      	b.n	8009574 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009562:	f7fd fb37 	bl	8006bd4 <HAL_GetTick>
 8009566:	4602      	mov	r2, r0
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	2b02      	cmp	r3, #2
 800956e:	d901      	bls.n	8009574 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e081      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009574:	4b43      	ldr	r3, [pc, #268]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1f0      	bne.n	8009562 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	69da      	ldr	r2, [r3, #28]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	431a      	orrs	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	019b      	lsls	r3, r3, #6
 8009590:	431a      	orrs	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009596:	085b      	lsrs	r3, r3, #1
 8009598:	3b01      	subs	r3, #1
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a2:	061b      	lsls	r3, r3, #24
 80095a4:	4937      	ldr	r1, [pc, #220]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095aa:	4b37      	ldr	r3, [pc, #220]	; (8009688 <HAL_RCC_OscConfig+0x4ec>)
 80095ac:	2201      	movs	r2, #1
 80095ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b0:	f7fd fb10 	bl	8006bd4 <HAL_GetTick>
 80095b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095b6:	e008      	b.n	80095ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095b8:	f7fd fb0c 	bl	8006bd4 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e056      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095ca:	4b2e      	ldr	r3, [pc, #184]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0f0      	beq.n	80095b8 <HAL_RCC_OscConfig+0x41c>
 80095d6:	e04e      	b.n	8009676 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095d8:	4b2b      	ldr	r3, [pc, #172]	; (8009688 <HAL_RCC_OscConfig+0x4ec>)
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095de:	f7fd faf9 	bl	8006bd4 <HAL_GetTick>
 80095e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095e4:	e008      	b.n	80095f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095e6:	f7fd faf5 	bl	8006bd4 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d901      	bls.n	80095f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e03f      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095f8:	4b22      	ldr	r3, [pc, #136]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1f0      	bne.n	80095e6 <HAL_RCC_OscConfig+0x44a>
 8009604:	e037      	b.n	8009676 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e032      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <HAL_RCC_OscConfig+0x4e8>)
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d028      	beq.n	8009672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800962a:	429a      	cmp	r2, r3
 800962c:	d121      	bne.n	8009672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009638:	429a      	cmp	r2, r3
 800963a:	d11a      	bne.n	8009672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009642:	4013      	ands	r3, r2
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009648:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800964a:	4293      	cmp	r3, r2
 800964c:	d111      	bne.n	8009672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	085b      	lsrs	r3, r3, #1
 800965a:	3b01      	subs	r3, #1
 800965c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800965e:	429a      	cmp	r2, r3
 8009660:	d107      	bne.n	8009672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800966e:	429a      	cmp	r2, r3
 8009670:	d001      	beq.n	8009676 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	40007000 	.word	0x40007000
 8009684:	40023800 	.word	0x40023800
 8009688:	42470060 	.word	0x42470060

0800968c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e0cc      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096a0:	4b68      	ldr	r3, [pc, #416]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d90c      	bls.n	80096c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096ae:	4b65      	ldr	r3, [pc, #404]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096b6:	4b63      	ldr	r3, [pc, #396]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0307 	and.w	r3, r3, #7
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d001      	beq.n	80096c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e0b8      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d020      	beq.n	8009716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096e0:	4b59      	ldr	r3, [pc, #356]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	4a58      	ldr	r2, [pc, #352]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80096e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d005      	beq.n	8009704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096f8:	4b53      	ldr	r3, [pc, #332]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	4a52      	ldr	r2, [pc, #328]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80096fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009704:	4b50      	ldr	r3, [pc, #320]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	494d      	ldr	r1, [pc, #308]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 8009712:	4313      	orrs	r3, r2
 8009714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d044      	beq.n	80097ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d107      	bne.n	800973a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800972a:	4b47      	ldr	r3, [pc, #284]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d119      	bne.n	800976a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e07f      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	2b02      	cmp	r3, #2
 8009740:	d003      	beq.n	800974a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009746:	2b03      	cmp	r3, #3
 8009748:	d107      	bne.n	800975a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800974a:	4b3f      	ldr	r3, [pc, #252]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e06f      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800975a:	4b3b      	ldr	r3, [pc, #236]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e067      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800976a:	4b37      	ldr	r3, [pc, #220]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f023 0203 	bic.w	r2, r3, #3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	4934      	ldr	r1, [pc, #208]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 8009778:	4313      	orrs	r3, r2
 800977a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800977c:	f7fd fa2a 	bl	8006bd4 <HAL_GetTick>
 8009780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009782:	e00a      	b.n	800979a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009784:	f7fd fa26 	bl	8006bd4 <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009792:	4293      	cmp	r3, r2
 8009794:	d901      	bls.n	800979a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e04f      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800979a:	4b2b      	ldr	r3, [pc, #172]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 020c 	and.w	r2, r3, #12
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d1eb      	bne.n	8009784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80097ac:	4b25      	ldr	r3, [pc, #148]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0307 	and.w	r3, r3, #7
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d20c      	bcs.n	80097d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097ba:	4b22      	ldr	r3, [pc, #136]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097c2:	4b20      	ldr	r3, [pc, #128]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d001      	beq.n	80097d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e032      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097e0:	4b19      	ldr	r3, [pc, #100]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	4916      	ldr	r1, [pc, #88]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097fe:	4b12      	ldr	r3, [pc, #72]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	490e      	ldr	r1, [pc, #56]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800980e:	4313      	orrs	r3, r2
 8009810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009812:	f000 f821 	bl	8009858 <HAL_RCC_GetSysClockFreq>
 8009816:	4602      	mov	r2, r0
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	091b      	lsrs	r3, r3, #4
 800981e:	f003 030f 	and.w	r3, r3, #15
 8009822:	490a      	ldr	r1, [pc, #40]	; (800984c <HAL_RCC_ClockConfig+0x1c0>)
 8009824:	5ccb      	ldrb	r3, [r1, r3]
 8009826:	fa22 f303 	lsr.w	r3, r2, r3
 800982a:	4a09      	ldr	r2, [pc, #36]	; (8009850 <HAL_RCC_ClockConfig+0x1c4>)
 800982c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800982e:	4b09      	ldr	r3, [pc, #36]	; (8009854 <HAL_RCC_ClockConfig+0x1c8>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4618      	mov	r0, r3
 8009834:	f7fd f98a 	bl	8006b4c <HAL_InitTick>

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	40023c00 	.word	0x40023c00
 8009848:	40023800 	.word	0x40023800
 800984c:	080e9d3c 	.word	0x080e9d3c
 8009850:	20000068 	.word	0x20000068
 8009854:	200000a4 	.word	0x200000a4

08009858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009858:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	607b      	str	r3, [r7, #4]
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	2300      	movs	r3, #0
 800986a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009870:	4b67      	ldr	r3, [pc, #412]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f003 030c 	and.w	r3, r3, #12
 8009878:	2b08      	cmp	r3, #8
 800987a:	d00d      	beq.n	8009898 <HAL_RCC_GetSysClockFreq+0x40>
 800987c:	2b08      	cmp	r3, #8
 800987e:	f200 80bd 	bhi.w	80099fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <HAL_RCC_GetSysClockFreq+0x34>
 8009886:	2b04      	cmp	r3, #4
 8009888:	d003      	beq.n	8009892 <HAL_RCC_GetSysClockFreq+0x3a>
 800988a:	e0b7      	b.n	80099fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800988c:	4b61      	ldr	r3, [pc, #388]	; (8009a14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800988e:	60bb      	str	r3, [r7, #8]
       break;
 8009890:	e0b7      	b.n	8009a02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009892:	4b61      	ldr	r3, [pc, #388]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009894:	60bb      	str	r3, [r7, #8]
      break;
 8009896:	e0b4      	b.n	8009a02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009898:	4b5d      	ldr	r3, [pc, #372]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80098a2:	4b5b      	ldr	r3, [pc, #364]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d04d      	beq.n	800994a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098ae:	4b58      	ldr	r3, [pc, #352]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	099b      	lsrs	r3, r3, #6
 80098b4:	461a      	mov	r2, r3
 80098b6:	f04f 0300 	mov.w	r3, #0
 80098ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80098be:	f04f 0100 	mov.w	r1, #0
 80098c2:	ea02 0800 	and.w	r8, r2, r0
 80098c6:	ea03 0901 	and.w	r9, r3, r1
 80098ca:	4640      	mov	r0, r8
 80098cc:	4649      	mov	r1, r9
 80098ce:	f04f 0200 	mov.w	r2, #0
 80098d2:	f04f 0300 	mov.w	r3, #0
 80098d6:	014b      	lsls	r3, r1, #5
 80098d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80098dc:	0142      	lsls	r2, r0, #5
 80098de:	4610      	mov	r0, r2
 80098e0:	4619      	mov	r1, r3
 80098e2:	ebb0 0008 	subs.w	r0, r0, r8
 80098e6:	eb61 0109 	sbc.w	r1, r1, r9
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	f04f 0300 	mov.w	r3, #0
 80098f2:	018b      	lsls	r3, r1, #6
 80098f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80098f8:	0182      	lsls	r2, r0, #6
 80098fa:	1a12      	subs	r2, r2, r0
 80098fc:	eb63 0301 	sbc.w	r3, r3, r1
 8009900:	f04f 0000 	mov.w	r0, #0
 8009904:	f04f 0100 	mov.w	r1, #0
 8009908:	00d9      	lsls	r1, r3, #3
 800990a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800990e:	00d0      	lsls	r0, r2, #3
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	eb12 0208 	adds.w	r2, r2, r8
 8009918:	eb43 0309 	adc.w	r3, r3, r9
 800991c:	f04f 0000 	mov.w	r0, #0
 8009920:	f04f 0100 	mov.w	r1, #0
 8009924:	0259      	lsls	r1, r3, #9
 8009926:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800992a:	0250      	lsls	r0, r2, #9
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4610      	mov	r0, r2
 8009932:	4619      	mov	r1, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	461a      	mov	r2, r3
 8009938:	f04f 0300 	mov.w	r3, #0
 800993c:	f7f7 f9a4 	bl	8000c88 <__aeabi_uldivmod>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4613      	mov	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	e04a      	b.n	80099e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800994a:	4b31      	ldr	r3, [pc, #196]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	099b      	lsrs	r3, r3, #6
 8009950:	461a      	mov	r2, r3
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	f240 10ff 	movw	r0, #511	; 0x1ff
 800995a:	f04f 0100 	mov.w	r1, #0
 800995e:	ea02 0400 	and.w	r4, r2, r0
 8009962:	ea03 0501 	and.w	r5, r3, r1
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	f04f 0300 	mov.w	r3, #0
 8009972:	014b      	lsls	r3, r1, #5
 8009974:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009978:	0142      	lsls	r2, r0, #5
 800997a:	4610      	mov	r0, r2
 800997c:	4619      	mov	r1, r3
 800997e:	1b00      	subs	r0, r0, r4
 8009980:	eb61 0105 	sbc.w	r1, r1, r5
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 0300 	mov.w	r3, #0
 800998c:	018b      	lsls	r3, r1, #6
 800998e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009992:	0182      	lsls	r2, r0, #6
 8009994:	1a12      	subs	r2, r2, r0
 8009996:	eb63 0301 	sbc.w	r3, r3, r1
 800999a:	f04f 0000 	mov.w	r0, #0
 800999e:	f04f 0100 	mov.w	r1, #0
 80099a2:	00d9      	lsls	r1, r3, #3
 80099a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099a8:	00d0      	lsls	r0, r2, #3
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	1912      	adds	r2, r2, r4
 80099b0:	eb45 0303 	adc.w	r3, r5, r3
 80099b4:	f04f 0000 	mov.w	r0, #0
 80099b8:	f04f 0100 	mov.w	r1, #0
 80099bc:	0299      	lsls	r1, r3, #10
 80099be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80099c2:	0290      	lsls	r0, r2, #10
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4610      	mov	r0, r2
 80099ca:	4619      	mov	r1, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f04f 0300 	mov.w	r3, #0
 80099d4:	f7f7 f958 	bl	8000c88 <__aeabi_uldivmod>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4613      	mov	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80099e0:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	0c1b      	lsrs	r3, r3, #16
 80099e6:	f003 0303 	and.w	r3, r3, #3
 80099ea:	3301      	adds	r3, #1
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f8:	60bb      	str	r3, [r7, #8]
      break;
 80099fa:	e002      	b.n	8009a02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80099fe:	60bb      	str	r3, [r7, #8]
      break;
 8009a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a02:	68bb      	ldr	r3, [r7, #8]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a0e:	bf00      	nop
 8009a10:	40023800 	.word	0x40023800
 8009a14:	00f42400 	.word	0x00f42400
 8009a18:	007a1200 	.word	0x007a1200

08009a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a20:	4b03      	ldr	r3, [pc, #12]	; (8009a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a22:	681b      	ldr	r3, [r3, #0]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	20000068 	.word	0x20000068

08009a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a38:	f7ff fff0 	bl	8009a1c <HAL_RCC_GetHCLKFreq>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	0a9b      	lsrs	r3, r3, #10
 8009a44:	f003 0307 	and.w	r3, r3, #7
 8009a48:	4903      	ldr	r1, [pc, #12]	; (8009a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a4a:	5ccb      	ldrb	r3, [r1, r3]
 8009a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	40023800 	.word	0x40023800
 8009a58:	080e9d4c 	.word	0x080e9d4c

08009a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a60:	f7ff ffdc 	bl	8009a1c <HAL_RCC_GetHCLKFreq>
 8009a64:	4602      	mov	r2, r0
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	0b5b      	lsrs	r3, r3, #13
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	4903      	ldr	r1, [pc, #12]	; (8009a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a72:	5ccb      	ldrb	r3, [r1, r3]
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	40023800 	.word	0x40023800
 8009a80:	080e9d4c 	.word	0x080e9d4c

08009a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e07b      	b.n	8009b8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d108      	bne.n	8009ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aa6:	d009      	beq.n	8009abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	61da      	str	r2, [r3, #28]
 8009aae:	e005      	b.n	8009abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d106      	bne.n	8009adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fb fbdc 	bl	8005294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009b04:	431a      	orrs	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	f003 0302 	and.w	r3, r3, #2
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b40:	ea42 0103 	orr.w	r1, r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	430a      	orrs	r2, r1
 8009b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	0c1b      	lsrs	r3, r3, #16
 8009b5a:	f003 0104 	and.w	r1, r3, #4
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	f003 0210 	and.w	r2, r3, #16
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69da      	ldr	r2, [r3, #28]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b088      	sub	sp, #32
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_SPI_Transmit+0x22>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e126      	b.n	8009e06 <HAL_SPI_Transmit+0x270>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bc0:	f7fd f808 	bl	8006bd4 <HAL_GetTick>
 8009bc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d002      	beq.n	8009bdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bda:	e10b      	b.n	8009df4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <HAL_SPI_Transmit+0x52>
 8009be2:	88fb      	ldrh	r3, [r7, #6]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bec:	e102      	b.n	8009df4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2203      	movs	r2, #3
 8009bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	88fa      	ldrh	r2, [r7, #6]
 8009c06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	88fa      	ldrh	r2, [r7, #6]
 8009c0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c34:	d10f      	bne.n	8009c56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c60:	2b40      	cmp	r3, #64	; 0x40
 8009c62:	d007      	beq.n	8009c74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c7c:	d14b      	bne.n	8009d16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d002      	beq.n	8009c8c <HAL_SPI_Transmit+0xf6>
 8009c86:	8afb      	ldrh	r3, [r7, #22]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d13e      	bne.n	8009d0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	881a      	ldrh	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9c:	1c9a      	adds	r2, r3, #2
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009cb0:	e02b      	b.n	8009d0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d112      	bne.n	8009ce6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc4:	881a      	ldrh	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd0:	1c9a      	adds	r2, r3, #2
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ce4:	e011      	b.n	8009d0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ce6:	f7fc ff75 	bl	8006bd4 <HAL_GetTick>
 8009cea:	4602      	mov	r2, r0
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d803      	bhi.n	8009cfe <HAL_SPI_Transmit+0x168>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfc:	d102      	bne.n	8009d04 <HAL_SPI_Transmit+0x16e>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d08:	e074      	b.n	8009df4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1ce      	bne.n	8009cb2 <HAL_SPI_Transmit+0x11c>
 8009d14:	e04c      	b.n	8009db0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <HAL_SPI_Transmit+0x18e>
 8009d1e:	8afb      	ldrh	r3, [r7, #22]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d140      	bne.n	8009da6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	330c      	adds	r3, #12
 8009d2e:	7812      	ldrb	r2, [r2, #0]
 8009d30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009d4a:	e02c      	b.n	8009da6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d113      	bne.n	8009d82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	330c      	adds	r3, #12
 8009d64:	7812      	ldrb	r2, [r2, #0]
 8009d66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d80:	e011      	b.n	8009da6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d82:	f7fc ff27 	bl	8006bd4 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d803      	bhi.n	8009d9a <HAL_SPI_Transmit+0x204>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d98:	d102      	bne.n	8009da0 <HAL_SPI_Transmit+0x20a>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d102      	bne.n	8009da6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009da4:	e026      	b.n	8009df4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1cd      	bne.n	8009d4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 fbcb 	bl	800a550 <SPI_EndRxTxTransaction>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dce:	2300      	movs	r3, #0
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	613b      	str	r3, [r7, #16]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	613b      	str	r3, [r7, #16]
 8009de2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	77fb      	strb	r3, [r7, #31]
 8009df0:	e000      	b.n	8009df4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3720      	adds	r7, #32
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b088      	sub	sp, #32
 8009e12:	af02      	add	r7, sp, #8
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	603b      	str	r3, [r7, #0]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e2a:	d112      	bne.n	8009e52 <HAL_SPI_Receive+0x44>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10e      	bne.n	8009e52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2204      	movs	r2, #4
 8009e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009e3c:	88fa      	ldrh	r2, [r7, #6]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	4613      	mov	r3, r2
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	68b9      	ldr	r1, [r7, #8]
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 f8f1 	bl	800a030 <HAL_SPI_TransmitReceive>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	e0ea      	b.n	800a028 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d101      	bne.n	8009e60 <HAL_SPI_Receive+0x52>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e0e3      	b.n	800a028 <HAL_SPI_Receive+0x21a>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e68:	f7fc feb4 	bl	8006bd4 <HAL_GetTick>
 8009e6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d002      	beq.n	8009e80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e7e:	e0ca      	b.n	800a016 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <HAL_SPI_Receive+0x7e>
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e90:	e0c1      	b.n	800a016 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2204      	movs	r2, #4
 8009e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	88fa      	ldrh	r2, [r7, #6]
 8009eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	88fa      	ldrh	r2, [r7, #6]
 8009eb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ed8:	d10f      	bne.n	8009efa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ef8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f04:	2b40      	cmp	r3, #64	; 0x40
 8009f06:	d007      	beq.n	8009f18 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d162      	bne.n	8009fe6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009f20:	e02e      	b.n	8009f80 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d115      	bne.n	8009f5c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f103 020c 	add.w	r2, r3, #12
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3c:	7812      	ldrb	r2, [r2, #0]
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f5a:	e011      	b.n	8009f80 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f5c:	f7fc fe3a 	bl	8006bd4 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d803      	bhi.n	8009f74 <HAL_SPI_Receive+0x166>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f72:	d102      	bne.n	8009f7a <HAL_SPI_Receive+0x16c>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009f7e:	e04a      	b.n	800a016 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1cb      	bne.n	8009f22 <HAL_SPI_Receive+0x114>
 8009f8a:	e031      	b.n	8009ff0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d113      	bne.n	8009fc2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa4:	b292      	uxth	r2, r2
 8009fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	1c9a      	adds	r2, r3, #2
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fc0:	e011      	b.n	8009fe6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fc2:	f7fc fe07 	bl	8006bd4 <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d803      	bhi.n	8009fda <HAL_SPI_Receive+0x1cc>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd8:	d102      	bne.n	8009fe0 <HAL_SPI_Receive+0x1d2>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009fe4:	e017      	b.n	800a016 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1cd      	bne.n	8009f8c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 fa45 	bl	800a484 <SPI_EndRxTransaction>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2220      	movs	r2, #32
 800a004:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	75fb      	strb	r3, [r7, #23]
 800a012:	e000      	b.n	800a016 <HAL_SPI_Receive+0x208>
  }

error :
 800a014:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a026:	7dfb      	ldrb	r3, [r7, #23]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08c      	sub	sp, #48	; 0x30
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a03e:	2301      	movs	r3, #1
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d101      	bne.n	800a056 <HAL_SPI_TransmitReceive+0x26>
 800a052:	2302      	movs	r3, #2
 800a054:	e18a      	b.n	800a36c <HAL_SPI_TransmitReceive+0x33c>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a05e:	f7fc fdb9 	bl	8006bd4 <HAL_GetTick>
 800a062:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a06a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a074:	887b      	ldrh	r3, [r7, #2]
 800a076:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d00f      	beq.n	800a0a0 <HAL_SPI_TransmitReceive+0x70>
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a086:	d107      	bne.n	800a098 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d103      	bne.n	800a098 <HAL_SPI_TransmitReceive+0x68>
 800a090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a094:	2b04      	cmp	r3, #4
 800a096:	d003      	beq.n	800a0a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a098:	2302      	movs	r3, #2
 800a09a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a09e:	e15b      	b.n	800a358 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <HAL_SPI_TransmitReceive+0x82>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <HAL_SPI_TransmitReceive+0x82>
 800a0ac:	887b      	ldrh	r3, [r7, #2]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d103      	bne.n	800a0ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a0b8:	e14e      	b.n	800a358 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d003      	beq.n	800a0ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2205      	movs	r2, #5
 800a0ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	887a      	ldrh	r2, [r7, #2]
 800a0de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	887a      	ldrh	r2, [r7, #2]
 800a0e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	887a      	ldrh	r2, [r7, #2]
 800a0f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	887a      	ldrh	r2, [r7, #2]
 800a0f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10e:	2b40      	cmp	r3, #64	; 0x40
 800a110:	d007      	beq.n	800a122 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a120:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a12a:	d178      	bne.n	800a21e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <HAL_SPI_TransmitReceive+0x10a>
 800a134:	8b7b      	ldrh	r3, [r7, #26]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d166      	bne.n	800a208 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13e:	881a      	ldrh	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14a:	1c9a      	adds	r2, r3, #2
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a154:	b29b      	uxth	r3, r3
 800a156:	3b01      	subs	r3, #1
 800a158:	b29a      	uxth	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a15e:	e053      	b.n	800a208 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d11b      	bne.n	800a1a6 <HAL_SPI_TransmitReceive+0x176>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a172:	b29b      	uxth	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	d016      	beq.n	800a1a6 <HAL_SPI_TransmitReceive+0x176>
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d113      	bne.n	800a1a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a182:	881a      	ldrh	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18e:	1c9a      	adds	r2, r3, #2
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a198:	b29b      	uxth	r3, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d119      	bne.n	800a1e8 <HAL_SPI_TransmitReceive+0x1b8>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d014      	beq.n	800a1e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68da      	ldr	r2, [r3, #12]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c8:	b292      	uxth	r2, r2
 800a1ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d0:	1c9a      	adds	r2, r3, #2
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a1e8:	f7fc fcf4 	bl	8006bd4 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d807      	bhi.n	800a208 <HAL_SPI_TransmitReceive+0x1d8>
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fe:	d003      	beq.n	800a208 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a206:	e0a7      	b.n	800a358 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1a6      	bne.n	800a160 <HAL_SPI_TransmitReceive+0x130>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a216:	b29b      	uxth	r3, r3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1a1      	bne.n	800a160 <HAL_SPI_TransmitReceive+0x130>
 800a21c:	e07c      	b.n	800a318 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <HAL_SPI_TransmitReceive+0x1fc>
 800a226:	8b7b      	ldrh	r3, [r7, #26]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d16b      	bne.n	800a304 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	330c      	adds	r3, #12
 800a236:	7812      	ldrb	r2, [r2, #0]
 800a238:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a248:	b29b      	uxth	r3, r3
 800a24a:	3b01      	subs	r3, #1
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a252:	e057      	b.n	800a304 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d11c      	bne.n	800a29c <HAL_SPI_TransmitReceive+0x26c>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a266:	b29b      	uxth	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d017      	beq.n	800a29c <HAL_SPI_TransmitReceive+0x26c>
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d114      	bne.n	800a29c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	330c      	adds	r3, #12
 800a27c:	7812      	ldrb	r2, [r2, #0]
 800a27e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a28e:	b29b      	uxth	r3, r3
 800a290:	3b01      	subs	r3, #1
 800a292:	b29a      	uxth	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d119      	bne.n	800a2de <HAL_SPI_TransmitReceive+0x2ae>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d014      	beq.n	800a2de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68da      	ldr	r2, [r3, #12]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	b2d2      	uxtb	r2, r2
 800a2c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a2de:	f7fc fc79 	bl	8006bd4 <HAL_GetTick>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d803      	bhi.n	800a2f6 <HAL_SPI_TransmitReceive+0x2c6>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f4:	d102      	bne.n	800a2fc <HAL_SPI_TransmitReceive+0x2cc>
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d103      	bne.n	800a304 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a302:	e029      	b.n	800a358 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1a2      	bne.n	800a254 <HAL_SPI_TransmitReceive+0x224>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a312:	b29b      	uxth	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d19d      	bne.n	800a254 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f917 	bl	800a550 <SPI_EndRxTxTransaction>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2220      	movs	r2, #32
 800a332:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a334:	e010      	b.n	800a358 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10b      	bne.n	800a356 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	e000      	b.n	800a358 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3730      	adds	r7, #48	; 0x30
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	603b      	str	r3, [r7, #0]
 800a380:	4613      	mov	r3, r2
 800a382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a384:	f7fc fc26 	bl	8006bd4 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	1a9b      	subs	r3, r3, r2
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	4413      	add	r3, r2
 800a392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a394:	f7fc fc1e 	bl	8006bd4 <HAL_GetTick>
 800a398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a39a:	4b39      	ldr	r3, [pc, #228]	; (800a480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	015b      	lsls	r3, r3, #5
 800a3a0:	0d1b      	lsrs	r3, r3, #20
 800a3a2:	69fa      	ldr	r2, [r7, #28]
 800a3a4:	fb02 f303 	mul.w	r3, r2, r3
 800a3a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3aa:	e054      	b.n	800a456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b2:	d050      	beq.n	800a456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3b4:	f7fc fc0e 	bl	8006bd4 <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	69fa      	ldr	r2, [r7, #28]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d902      	bls.n	800a3ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d13d      	bne.n	800a446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a3d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3e2:	d111      	bne.n	800a408 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3ec:	d004      	beq.n	800a3f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f6:	d107      	bne.n	800a408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a410:	d10f      	bne.n	800a432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e017      	b.n	800a476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d101      	bne.n	800a450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	3b01      	subs	r3, #1
 800a454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	4013      	ands	r3, r2
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	429a      	cmp	r2, r3
 800a464:	bf0c      	ite	eq
 800a466:	2301      	moveq	r3, #1
 800a468:	2300      	movne	r3, #0
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	461a      	mov	r2, r3
 800a46e:	79fb      	ldrb	r3, [r7, #7]
 800a470:	429a      	cmp	r2, r3
 800a472:	d19b      	bne.n	800a3ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3720      	adds	r7, #32
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	20000068 	.word	0x20000068

0800a484 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af02      	add	r7, sp, #8
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a498:	d111      	bne.n	800a4be <SPI_EndRxTransaction+0x3a>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4a2:	d004      	beq.n	800a4ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ac:	d107      	bne.n	800a4be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4c6:	d12a      	bne.n	800a51e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4d0:	d012      	beq.n	800a4f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2180      	movs	r1, #128	; 0x80
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f7ff ff49 	bl	800a374 <SPI_WaitFlagStateUntilTimeout>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d02d      	beq.n	800a544 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ec:	f043 0220 	orr.w	r2, r3, #32
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e026      	b.n	800a546 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2200      	movs	r2, #0
 800a500:	2101      	movs	r1, #1
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f7ff ff36 	bl	800a374 <SPI_WaitFlagStateUntilTimeout>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d01a      	beq.n	800a544 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a512:	f043 0220 	orr.w	r2, r3, #32
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e013      	b.n	800a546 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2200      	movs	r2, #0
 800a526:	2101      	movs	r1, #1
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff ff23 	bl	800a374 <SPI_WaitFlagStateUntilTimeout>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a538:	f043 0220 	orr.w	r2, r3, #32
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e000      	b.n	800a546 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af02      	add	r7, sp, #8
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a55c:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <SPI_EndRxTxTransaction+0x7c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1b      	ldr	r2, [pc, #108]	; (800a5d0 <SPI_EndRxTxTransaction+0x80>)
 800a562:	fba2 2303 	umull	r2, r3, r2, r3
 800a566:	0d5b      	lsrs	r3, r3, #21
 800a568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
 800a570:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a57a:	d112      	bne.n	800a5a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2200      	movs	r2, #0
 800a584:	2180      	movs	r1, #128	; 0x80
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff fef4 	bl	800a374 <SPI_WaitFlagStateUntilTimeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d016      	beq.n	800a5c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	f043 0220 	orr.w	r2, r3, #32
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e00f      	b.n	800a5c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b8:	2b80      	cmp	r3, #128	; 0x80
 800a5ba:	d0f2      	beq.n	800a5a2 <SPI_EndRxTxTransaction+0x52>
 800a5bc:	e000      	b.n	800a5c0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a5be:	bf00      	nop
  }

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000068 	.word	0x20000068
 800a5d0:	165e9f81 	.word	0x165e9f81

0800a5d4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e034      	b.n	800a654 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7fa fff4 	bl	80055ec <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3308      	adds	r3, #8
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f001 ffa2 	bl	800c558 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6818      	ldr	r0, [r3, #0]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	461a      	mov	r2, r3
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	f001 ffec 	bl	800c5fc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6858      	ldr	r0, [r3, #4]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a630:	6879      	ldr	r1, [r7, #4]
 800a632:	f002 f821 	bl	800c678 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	6892      	ldr	r2, [r2, #8]
 800a63e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	6892      	ldr	r2, [r2, #8]
 800a64a:	f041 0101 	orr.w	r1, r1, #1
 800a64e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e041      	b.n	800a6f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7fa fe4e 	bl	8005324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3304      	adds	r3, #4
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f000 fc1a 	bl	800aed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
	...

0800a6fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d001      	beq.n	800a714 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e046      	b.n	800a7a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a23      	ldr	r2, [pc, #140]	; (800a7b0 <HAL_TIM_Base_Start+0xb4>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d022      	beq.n	800a76c <HAL_TIM_Base_Start+0x70>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a72e:	d01d      	beq.n	800a76c <HAL_TIM_Base_Start+0x70>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a1f      	ldr	r2, [pc, #124]	; (800a7b4 <HAL_TIM_Base_Start+0xb8>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d018      	beq.n	800a76c <HAL_TIM_Base_Start+0x70>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1e      	ldr	r2, [pc, #120]	; (800a7b8 <HAL_TIM_Base_Start+0xbc>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d013      	beq.n	800a76c <HAL_TIM_Base_Start+0x70>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a1c      	ldr	r2, [pc, #112]	; (800a7bc <HAL_TIM_Base_Start+0xc0>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00e      	beq.n	800a76c <HAL_TIM_Base_Start+0x70>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a1b      	ldr	r2, [pc, #108]	; (800a7c0 <HAL_TIM_Base_Start+0xc4>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d009      	beq.n	800a76c <HAL_TIM_Base_Start+0x70>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a19      	ldr	r2, [pc, #100]	; (800a7c4 <HAL_TIM_Base_Start+0xc8>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d004      	beq.n	800a76c <HAL_TIM_Base_Start+0x70>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a18      	ldr	r2, [pc, #96]	; (800a7c8 <HAL_TIM_Base_Start+0xcc>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d111      	bne.n	800a790 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f003 0307 	and.w	r3, r3, #7
 800a776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2b06      	cmp	r3, #6
 800a77c:	d010      	beq.n	800a7a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f042 0201 	orr.w	r2, r2, #1
 800a78c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a78e:	e007      	b.n	800a7a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f042 0201 	orr.w	r2, r2, #1
 800a79e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	40010000 	.word	0x40010000
 800a7b4:	40000400 	.word	0x40000400
 800a7b8:	40000800 	.word	0x40000800
 800a7bc:	40000c00 	.word	0x40000c00
 800a7c0:	40010400 	.word	0x40010400
 800a7c4:	40014000 	.word	0x40014000
 800a7c8:	40001800 	.word	0x40001800

0800a7cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d001      	beq.n	800a7e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e04e      	b.n	800a882 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68da      	ldr	r2, [r3, #12]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0201 	orr.w	r2, r2, #1
 800a7fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a23      	ldr	r2, [pc, #140]	; (800a890 <HAL_TIM_Base_Start_IT+0xc4>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d022      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0x80>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a80e:	d01d      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0x80>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a1f      	ldr	r2, [pc, #124]	; (800a894 <HAL_TIM_Base_Start_IT+0xc8>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d018      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0x80>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a1e      	ldr	r2, [pc, #120]	; (800a898 <HAL_TIM_Base_Start_IT+0xcc>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d013      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0x80>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a1c      	ldr	r2, [pc, #112]	; (800a89c <HAL_TIM_Base_Start_IT+0xd0>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d00e      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0x80>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a1b      	ldr	r2, [pc, #108]	; (800a8a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d009      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0x80>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a19      	ldr	r2, [pc, #100]	; (800a8a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d004      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0x80>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a18      	ldr	r2, [pc, #96]	; (800a8a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d111      	bne.n	800a870 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b06      	cmp	r3, #6
 800a85c:	d010      	beq.n	800a880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f042 0201 	orr.w	r2, r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a86e:	e007      	b.n	800a880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0201 	orr.w	r2, r2, #1
 800a87e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	40010000 	.word	0x40010000
 800a894:	40000400 	.word	0x40000400
 800a898:	40000800 	.word	0x40000800
 800a89c:	40000c00 	.word	0x40000c00
 800a8a0:	40010400 	.word	0x40010400
 800a8a4:	40014000 	.word	0x40014000
 800a8a8:	40001800 	.word	0x40001800

0800a8ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e041      	b.n	800a942 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d106      	bne.n	800a8d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f839 	bl	800a94a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	f000 faf2 	bl	800aed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a952:	bf00      	nop
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	2b02      	cmp	r3, #2
 800a972:	d122      	bne.n	800a9ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d11b      	bne.n	800a9ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f06f 0202 	mvn.w	r2, #2
 800a98a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	f003 0303 	and.w	r3, r3, #3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fa78 	bl	800ae96 <HAL_TIM_IC_CaptureCallback>
 800a9a6:	e005      	b.n	800a9b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fa6a 	bl	800ae82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fa7b 	bl	800aeaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d122      	bne.n	800aa0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d11b      	bne.n	800aa0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f06f 0204 	mvn.w	r2, #4
 800a9de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fa4e 	bl	800ae96 <HAL_TIM_IC_CaptureCallback>
 800a9fa:	e005      	b.n	800aa08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fa40 	bl	800ae82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa51 	bl	800aeaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 0308 	and.w	r3, r3, #8
 800aa18:	2b08      	cmp	r3, #8
 800aa1a:	d122      	bne.n	800aa62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b08      	cmp	r3, #8
 800aa28:	d11b      	bne.n	800aa62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f06f 0208 	mvn.w	r2, #8
 800aa32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2204      	movs	r2, #4
 800aa38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	f003 0303 	and.w	r3, r3, #3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fa24 	bl	800ae96 <HAL_TIM_IC_CaptureCallback>
 800aa4e:	e005      	b.n	800aa5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fa16 	bl	800ae82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fa27 	bl	800aeaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	f003 0310 	and.w	r3, r3, #16
 800aa6c:	2b10      	cmp	r3, #16
 800aa6e:	d122      	bne.n	800aab6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f003 0310 	and.w	r3, r3, #16
 800aa7a:	2b10      	cmp	r3, #16
 800aa7c:	d11b      	bne.n	800aab6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f06f 0210 	mvn.w	r2, #16
 800aa86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2208      	movs	r2, #8
 800aa8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f9fa 	bl	800ae96 <HAL_TIM_IC_CaptureCallback>
 800aaa2:	e005      	b.n	800aab0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f9ec 	bl	800ae82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f9fd 	bl	800aeaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	f003 0301 	and.w	r3, r3, #1
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d10e      	bne.n	800aae2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d107      	bne.n	800aae2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f06f 0201 	mvn.w	r2, #1
 800aada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7fa fa09 	bl	8004ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaec:	2b80      	cmp	r3, #128	; 0x80
 800aaee:	d10e      	bne.n	800ab0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafa:	2b80      	cmp	r3, #128	; 0x80
 800aafc:	d107      	bne.n	800ab0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fd53 	bl	800b5b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab18:	2b40      	cmp	r3, #64	; 0x40
 800ab1a:	d10e      	bne.n	800ab3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab26:	2b40      	cmp	r3, #64	; 0x40
 800ab28:	d107      	bne.n	800ab3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f9c2 	bl	800aebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f003 0320 	and.w	r3, r3, #32
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	d10e      	bne.n	800ab66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b20      	cmp	r3, #32
 800ab54:	d107      	bne.n	800ab66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f06f 0220 	mvn.w	r2, #32
 800ab5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fd1d 	bl	800b5a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab66:	bf00      	nop
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
	...

0800ab70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d101      	bne.n	800ab8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	e0ae      	b.n	800acec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b0c      	cmp	r3, #12
 800ab9a:	f200 809f 	bhi.w	800acdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ab9e:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba4:	0800abd9 	.word	0x0800abd9
 800aba8:	0800acdd 	.word	0x0800acdd
 800abac:	0800acdd 	.word	0x0800acdd
 800abb0:	0800acdd 	.word	0x0800acdd
 800abb4:	0800ac19 	.word	0x0800ac19
 800abb8:	0800acdd 	.word	0x0800acdd
 800abbc:	0800acdd 	.word	0x0800acdd
 800abc0:	0800acdd 	.word	0x0800acdd
 800abc4:	0800ac5b 	.word	0x0800ac5b
 800abc8:	0800acdd 	.word	0x0800acdd
 800abcc:	0800acdd 	.word	0x0800acdd
 800abd0:	0800acdd 	.word	0x0800acdd
 800abd4:	0800ac9b 	.word	0x0800ac9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68b9      	ldr	r1, [r7, #8]
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 fa18 	bl	800b014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	699a      	ldr	r2, [r3, #24]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f042 0208 	orr.w	r2, r2, #8
 800abf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	699a      	ldr	r2, [r3, #24]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f022 0204 	bic.w	r2, r2, #4
 800ac02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6999      	ldr	r1, [r3, #24]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	691a      	ldr	r2, [r3, #16]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	430a      	orrs	r2, r1
 800ac14:	619a      	str	r2, [r3, #24]
      break;
 800ac16:	e064      	b.n	800ace2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fa68 	bl	800b0f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	699a      	ldr	r2, [r3, #24]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699a      	ldr	r2, [r3, #24]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6999      	ldr	r1, [r3, #24]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	021a      	lsls	r2, r3, #8
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	430a      	orrs	r2, r1
 800ac56:	619a      	str	r2, [r3, #24]
      break;
 800ac58:	e043      	b.n	800ace2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68b9      	ldr	r1, [r7, #8]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 fabd 	bl	800b1e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	69da      	ldr	r2, [r3, #28]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f042 0208 	orr.w	r2, r2, #8
 800ac74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	69da      	ldr	r2, [r3, #28]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 0204 	bic.w	r2, r2, #4
 800ac84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69d9      	ldr	r1, [r3, #28]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	691a      	ldr	r2, [r3, #16]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	61da      	str	r2, [r3, #28]
      break;
 800ac98:	e023      	b.n	800ace2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fb11 	bl	800b2c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	69da      	ldr	r2, [r3, #28]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	69da      	ldr	r2, [r3, #28]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	69d9      	ldr	r1, [r3, #28]
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	021a      	lsls	r2, r3, #8
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	61da      	str	r2, [r3, #28]
      break;
 800acda:	e002      	b.n	800ace2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	75fb      	strb	r3, [r7, #23]
      break;
 800ace0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acea:	7dfb      	ldrb	r3, [r7, #23]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d101      	bne.n	800ad10 <HAL_TIM_ConfigClockSource+0x1c>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	e0b4      	b.n	800ae7a <HAL_TIM_ConfigClockSource+0x186>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad48:	d03e      	beq.n	800adc8 <HAL_TIM_ConfigClockSource+0xd4>
 800ad4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad4e:	f200 8087 	bhi.w	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
 800ad52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad56:	f000 8086 	beq.w	800ae66 <HAL_TIM_ConfigClockSource+0x172>
 800ad5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5e:	d87f      	bhi.n	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
 800ad60:	2b70      	cmp	r3, #112	; 0x70
 800ad62:	d01a      	beq.n	800ad9a <HAL_TIM_ConfigClockSource+0xa6>
 800ad64:	2b70      	cmp	r3, #112	; 0x70
 800ad66:	d87b      	bhi.n	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
 800ad68:	2b60      	cmp	r3, #96	; 0x60
 800ad6a:	d050      	beq.n	800ae0e <HAL_TIM_ConfigClockSource+0x11a>
 800ad6c:	2b60      	cmp	r3, #96	; 0x60
 800ad6e:	d877      	bhi.n	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
 800ad70:	2b50      	cmp	r3, #80	; 0x50
 800ad72:	d03c      	beq.n	800adee <HAL_TIM_ConfigClockSource+0xfa>
 800ad74:	2b50      	cmp	r3, #80	; 0x50
 800ad76:	d873      	bhi.n	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
 800ad78:	2b40      	cmp	r3, #64	; 0x40
 800ad7a:	d058      	beq.n	800ae2e <HAL_TIM_ConfigClockSource+0x13a>
 800ad7c:	2b40      	cmp	r3, #64	; 0x40
 800ad7e:	d86f      	bhi.n	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
 800ad80:	2b30      	cmp	r3, #48	; 0x30
 800ad82:	d064      	beq.n	800ae4e <HAL_TIM_ConfigClockSource+0x15a>
 800ad84:	2b30      	cmp	r3, #48	; 0x30
 800ad86:	d86b      	bhi.n	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
 800ad88:	2b20      	cmp	r3, #32
 800ad8a:	d060      	beq.n	800ae4e <HAL_TIM_ConfigClockSource+0x15a>
 800ad8c:	2b20      	cmp	r3, #32
 800ad8e:	d867      	bhi.n	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d05c      	beq.n	800ae4e <HAL_TIM_ConfigClockSource+0x15a>
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	d05a      	beq.n	800ae4e <HAL_TIM_ConfigClockSource+0x15a>
 800ad98:	e062      	b.n	800ae60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	6899      	ldr	r1, [r3, #8]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	f000 fb5d 	bl	800b468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800adbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	609a      	str	r2, [r3, #8]
      break;
 800adc6:	e04f      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6818      	ldr	r0, [r3, #0]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	6899      	ldr	r1, [r3, #8]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f000 fb46 	bl	800b468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689a      	ldr	r2, [r3, #8]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adea:	609a      	str	r2, [r3, #8]
      break;
 800adec:	e03c      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6818      	ldr	r0, [r3, #0]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	6859      	ldr	r1, [r3, #4]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f000 faba 	bl	800b374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2150      	movs	r1, #80	; 0x50
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 fb13 	bl	800b432 <TIM_ITRx_SetConfig>
      break;
 800ae0c:	e02c      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	6859      	ldr	r1, [r3, #4]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f000 fad9 	bl	800b3d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2160      	movs	r1, #96	; 0x60
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 fb03 	bl	800b432 <TIM_ITRx_SetConfig>
      break;
 800ae2c:	e01c      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	6859      	ldr	r1, [r3, #4]
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f000 fa9a 	bl	800b374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2140      	movs	r1, #64	; 0x40
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 faf3 	bl	800b432 <TIM_ITRx_SetConfig>
      break;
 800ae4c:	e00c      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4619      	mov	r1, r3
 800ae58:	4610      	mov	r0, r2
 800ae5a:	f000 faea 	bl	800b432 <TIM_ITRx_SetConfig>
      break;
 800ae5e:	e003      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	73fb      	strb	r3, [r7, #15]
      break;
 800ae64:	e000      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae8a:	bf00      	nop
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aeb2:	bf00      	nop
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b083      	sub	sp, #12
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
	...

0800aed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a40      	ldr	r2, [pc, #256]	; (800afe8 <TIM_Base_SetConfig+0x114>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d013      	beq.n	800af14 <TIM_Base_SetConfig+0x40>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef2:	d00f      	beq.n	800af14 <TIM_Base_SetConfig+0x40>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a3d      	ldr	r2, [pc, #244]	; (800afec <TIM_Base_SetConfig+0x118>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d00b      	beq.n	800af14 <TIM_Base_SetConfig+0x40>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a3c      	ldr	r2, [pc, #240]	; (800aff0 <TIM_Base_SetConfig+0x11c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d007      	beq.n	800af14 <TIM_Base_SetConfig+0x40>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a3b      	ldr	r2, [pc, #236]	; (800aff4 <TIM_Base_SetConfig+0x120>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d003      	beq.n	800af14 <TIM_Base_SetConfig+0x40>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a3a      	ldr	r2, [pc, #232]	; (800aff8 <TIM_Base_SetConfig+0x124>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d108      	bne.n	800af26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4313      	orrs	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a2f      	ldr	r2, [pc, #188]	; (800afe8 <TIM_Base_SetConfig+0x114>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d02b      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af34:	d027      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a2c      	ldr	r2, [pc, #176]	; (800afec <TIM_Base_SetConfig+0x118>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d023      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a2b      	ldr	r2, [pc, #172]	; (800aff0 <TIM_Base_SetConfig+0x11c>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d01f      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a2a      	ldr	r2, [pc, #168]	; (800aff4 <TIM_Base_SetConfig+0x120>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d01b      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a29      	ldr	r2, [pc, #164]	; (800aff8 <TIM_Base_SetConfig+0x124>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d017      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a28      	ldr	r2, [pc, #160]	; (800affc <TIM_Base_SetConfig+0x128>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d013      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a27      	ldr	r2, [pc, #156]	; (800b000 <TIM_Base_SetConfig+0x12c>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d00f      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a26      	ldr	r2, [pc, #152]	; (800b004 <TIM_Base_SetConfig+0x130>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00b      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a25      	ldr	r2, [pc, #148]	; (800b008 <TIM_Base_SetConfig+0x134>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d007      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a24      	ldr	r2, [pc, #144]	; (800b00c <TIM_Base_SetConfig+0x138>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d003      	beq.n	800af86 <TIM_Base_SetConfig+0xb2>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a23      	ldr	r2, [pc, #140]	; (800b010 <TIM_Base_SetConfig+0x13c>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d108      	bne.n	800af98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	4313      	orrs	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	689a      	ldr	r2, [r3, #8]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a0a      	ldr	r2, [pc, #40]	; (800afe8 <TIM_Base_SetConfig+0x114>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d003      	beq.n	800afcc <TIM_Base_SetConfig+0xf8>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a0c      	ldr	r2, [pc, #48]	; (800aff8 <TIM_Base_SetConfig+0x124>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d103      	bne.n	800afd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	691a      	ldr	r2, [r3, #16]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	615a      	str	r2, [r3, #20]
}
 800afda:	bf00      	nop
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	40010000 	.word	0x40010000
 800afec:	40000400 	.word	0x40000400
 800aff0:	40000800 	.word	0x40000800
 800aff4:	40000c00 	.word	0x40000c00
 800aff8:	40010400 	.word	0x40010400
 800affc:	40014000 	.word	0x40014000
 800b000:	40014400 	.word	0x40014400
 800b004:	40014800 	.word	0x40014800
 800b008:	40001800 	.word	0x40001800
 800b00c:	40001c00 	.word	0x40001c00
 800b010:	40002000 	.word	0x40002000

0800b014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b014:	b480      	push	{r7}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	f023 0201 	bic.w	r2, r3, #1
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0303 	bic.w	r3, r3, #3
 800b04a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f023 0302 	bic.w	r3, r3, #2
 800b05c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	4313      	orrs	r3, r2
 800b066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a20      	ldr	r2, [pc, #128]	; (800b0ec <TIM_OC1_SetConfig+0xd8>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d003      	beq.n	800b078 <TIM_OC1_SetConfig+0x64>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a1f      	ldr	r2, [pc, #124]	; (800b0f0 <TIM_OC1_SetConfig+0xdc>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d10c      	bne.n	800b092 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f023 0308 	bic.w	r3, r3, #8
 800b07e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f023 0304 	bic.w	r3, r3, #4
 800b090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a15      	ldr	r2, [pc, #84]	; (800b0ec <TIM_OC1_SetConfig+0xd8>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d003      	beq.n	800b0a2 <TIM_OC1_SetConfig+0x8e>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a14      	ldr	r2, [pc, #80]	; (800b0f0 <TIM_OC1_SetConfig+0xdc>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d111      	bne.n	800b0c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	685a      	ldr	r2, [r3, #4]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	621a      	str	r2, [r3, #32]
}
 800b0e0:	bf00      	nop
 800b0e2:	371c      	adds	r7, #28
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	40010000 	.word	0x40010000
 800b0f0:	40010400 	.word	0x40010400

0800b0f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	f023 0210 	bic.w	r2, r3, #16
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b12a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	4313      	orrs	r3, r2
 800b136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f023 0320 	bic.w	r3, r3, #32
 800b13e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	011b      	lsls	r3, r3, #4
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	4313      	orrs	r3, r2
 800b14a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a22      	ldr	r2, [pc, #136]	; (800b1d8 <TIM_OC2_SetConfig+0xe4>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d003      	beq.n	800b15c <TIM_OC2_SetConfig+0x68>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a21      	ldr	r2, [pc, #132]	; (800b1dc <TIM_OC2_SetConfig+0xe8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d10d      	bne.n	800b178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	011b      	lsls	r3, r3, #4
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a17      	ldr	r2, [pc, #92]	; (800b1d8 <TIM_OC2_SetConfig+0xe4>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d003      	beq.n	800b188 <TIM_OC2_SetConfig+0x94>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a16      	ldr	r2, [pc, #88]	; (800b1dc <TIM_OC2_SetConfig+0xe8>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d113      	bne.n	800b1b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b18e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	621a      	str	r2, [r3, #32]
}
 800b1ca:	bf00      	nop
 800b1cc:	371c      	adds	r7, #28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	40010000 	.word	0x40010000
 800b1dc:	40010400 	.word	0x40010400

0800b1e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	69db      	ldr	r3, [r3, #28]
 800b206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f023 0303 	bic.w	r3, r3, #3
 800b216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	021b      	lsls	r3, r3, #8
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4313      	orrs	r3, r2
 800b234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a21      	ldr	r2, [pc, #132]	; (800b2c0 <TIM_OC3_SetConfig+0xe0>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d003      	beq.n	800b246 <TIM_OC3_SetConfig+0x66>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a20      	ldr	r2, [pc, #128]	; (800b2c4 <TIM_OC3_SetConfig+0xe4>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d10d      	bne.n	800b262 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b24c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	021b      	lsls	r3, r3, #8
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	4313      	orrs	r3, r2
 800b258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a16      	ldr	r2, [pc, #88]	; (800b2c0 <TIM_OC3_SetConfig+0xe0>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d003      	beq.n	800b272 <TIM_OC3_SetConfig+0x92>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a15      	ldr	r2, [pc, #84]	; (800b2c4 <TIM_OC3_SetConfig+0xe4>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d113      	bne.n	800b29a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	011b      	lsls	r3, r3, #4
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	4313      	orrs	r3, r2
 800b298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685a      	ldr	r2, [r3, #4]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	621a      	str	r2, [r3, #32]
}
 800b2b4:	bf00      	nop
 800b2b6:	371c      	adds	r7, #28
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	40010000 	.word	0x40010000
 800b2c4:	40010400 	.word	0x40010400

0800b2c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	031b      	lsls	r3, r3, #12
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a12      	ldr	r2, [pc, #72]	; (800b36c <TIM_OC4_SetConfig+0xa4>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d003      	beq.n	800b330 <TIM_OC4_SetConfig+0x68>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a11      	ldr	r2, [pc, #68]	; (800b370 <TIM_OC4_SetConfig+0xa8>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d109      	bne.n	800b344 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	019b      	lsls	r3, r3, #6
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	4313      	orrs	r3, r2
 800b342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	621a      	str	r2, [r3, #32]
}
 800b35e:	bf00      	nop
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	40010000 	.word	0x40010000
 800b370:	40010400 	.word	0x40010400

0800b374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b374:	b480      	push	{r7}
 800b376:	b087      	sub	sp, #28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6a1b      	ldr	r3, [r3, #32]
 800b384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	f023 0201 	bic.w	r2, r3, #1
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b39e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	011b      	lsls	r3, r3, #4
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f023 030a 	bic.w	r3, r3, #10
 800b3b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	621a      	str	r2, [r3, #32]
}
 800b3c6:	bf00      	nop
 800b3c8:	371c      	adds	r7, #28
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b087      	sub	sp, #28
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	f023 0210 	bic.w	r2, r3, #16
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b3fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	031b      	lsls	r3, r3, #12
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	4313      	orrs	r3, r2
 800b406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b40e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	011b      	lsls	r3, r3, #4
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	4313      	orrs	r3, r2
 800b418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	621a      	str	r2, [r3, #32]
}
 800b426:	bf00      	nop
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b432:	b480      	push	{r7}
 800b434:	b085      	sub	sp, #20
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4313      	orrs	r3, r2
 800b450:	f043 0307 	orr.w	r3, r3, #7
 800b454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	609a      	str	r2, [r3, #8]
}
 800b45c:	bf00      	nop
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	021a      	lsls	r2, r3, #8
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	431a      	orrs	r2, r3
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	4313      	orrs	r3, r2
 800b490:	697a      	ldr	r2, [r7, #20]
 800b492:	4313      	orrs	r3, r2
 800b494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	609a      	str	r2, [r3, #8]
}
 800b49c:	bf00      	nop
 800b49e:	371c      	adds	r7, #28
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d101      	bne.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e05a      	b.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a21      	ldr	r2, [pc, #132]	; (800b584 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d022      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50c:	d01d      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a1d      	ldr	r2, [pc, #116]	; (800b588 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d018      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a1b      	ldr	r2, [pc, #108]	; (800b58c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d013      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a1a      	ldr	r2, [pc, #104]	; (800b590 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d00e      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a18      	ldr	r2, [pc, #96]	; (800b594 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d009      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d004      	beq.n	800b54a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a15      	ldr	r2, [pc, #84]	; (800b59c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d10c      	bne.n	800b564 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	4313      	orrs	r3, r2
 800b55a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	40010000 	.word	0x40010000
 800b588:	40000400 	.word	0x40000400
 800b58c:	40000800 	.word	0x40000800
 800b590:	40000c00 	.word	0x40000c00
 800b594:	40010400 	.word	0x40010400
 800b598:	40014000 	.word	0x40014000
 800b59c:	40001800 	.word	0x40001800

0800b5a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e03f      	b.n	800b65a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d106      	bne.n	800b5f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7f9 ff24 	bl	800543c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2224      	movs	r2, #36	; 0x24
 800b5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b60a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fddb 	bl	800c1c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	691a      	ldr	r2, [r3, #16]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	695a      	ldr	r2, [r3, #20]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2220      	movs	r2, #32
 800b64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2220      	movs	r2, #32
 800b654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b08a      	sub	sp, #40	; 0x28
 800b666:	af02      	add	r7, sp, #8
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	603b      	str	r3, [r7, #0]
 800b66e:	4613      	mov	r3, r2
 800b670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b20      	cmp	r3, #32
 800b680:	d17c      	bne.n	800b77c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <HAL_UART_Transmit+0x2c>
 800b688:	88fb      	ldrh	r3, [r7, #6]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e075      	b.n	800b77e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d101      	bne.n	800b6a0 <HAL_UART_Transmit+0x3e>
 800b69c:	2302      	movs	r3, #2
 800b69e:	e06e      	b.n	800b77e <HAL_UART_Transmit+0x11c>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2221      	movs	r2, #33	; 0x21
 800b6b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6b6:	f7fb fa8d 	bl	8006bd4 <HAL_GetTick>
 800b6ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	88fa      	ldrh	r2, [r7, #6]
 800b6c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	88fa      	ldrh	r2, [r7, #6]
 800b6c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d0:	d108      	bne.n	800b6e4 <HAL_UART_Transmit+0x82>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d104      	bne.n	800b6e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	e003      	b.n	800b6ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b6f4:	e02a      	b.n	800b74c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2180      	movs	r1, #128	; 0x80
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 fb1f 	bl	800bd44 <UART_WaitOnFlagUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e036      	b.n	800b77e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	3302      	adds	r3, #2
 800b72a:	61bb      	str	r3, [r7, #24]
 800b72c:	e007      	b.n	800b73e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	781a      	ldrb	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	3301      	adds	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b742:	b29b      	uxth	r3, r3
 800b744:	3b01      	subs	r3, #1
 800b746:	b29a      	uxth	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b750:	b29b      	uxth	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1cf      	bne.n	800b6f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2200      	movs	r2, #0
 800b75e:	2140      	movs	r1, #64	; 0x40
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 faef 	bl	800bd44 <UART_WaitOnFlagUntilTimeout>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e006      	b.n	800b77e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2220      	movs	r2, #32
 800b774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	e000      	b.n	800b77e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b77c:	2302      	movs	r3, #2
  }
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3720      	adds	r7, #32
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	4613      	mov	r3, r2
 800b792:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d11d      	bne.n	800b7dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <HAL_UART_Receive_IT+0x26>
 800b7a6:	88fb      	ldrh	r3, [r7, #6]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e016      	b.n	800b7de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d101      	bne.n	800b7be <HAL_UART_Receive_IT+0x38>
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e00f      	b.n	800b7de <HAL_UART_Receive_IT+0x58>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f000 fb24 	bl	800be20 <UART_Start_Receive_IT>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	e000      	b.n	800b7de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b7dc:	2302      	movs	r3, #2
  }
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b0ba      	sub	sp, #232	; 0xe8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b80e:	2300      	movs	r3, #0
 800b810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b814:	2300      	movs	r3, #0
 800b816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b81e:	f003 030f 	and.w	r3, r3, #15
 800b822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10f      	bne.n	800b84e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b832:	f003 0320 	and.w	r3, r3, #32
 800b836:	2b00      	cmp	r3, #0
 800b838:	d009      	beq.n	800b84e <HAL_UART_IRQHandler+0x66>
 800b83a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b83e:	f003 0320 	and.w	r3, r3, #32
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fc03 	bl	800c052 <UART_Receive_IT>
      return;
 800b84c:	e256      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b84e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80de 	beq.w	800ba14 <HAL_UART_IRQHandler+0x22c>
 800b858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	2b00      	cmp	r3, #0
 800b862:	d106      	bne.n	800b872 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b868:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 80d1 	beq.w	800ba14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00b      	beq.n	800b896 <HAL_UART_IRQHandler+0xae>
 800b87e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b886:	2b00      	cmp	r3, #0
 800b888:	d005      	beq.n	800b896 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88e:	f043 0201 	orr.w	r2, r3, #1
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00b      	beq.n	800b8ba <HAL_UART_IRQHandler+0xd2>
 800b8a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d005      	beq.n	800b8ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b2:	f043 0202 	orr.w	r2, r3, #2
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8be:	f003 0302 	and.w	r3, r3, #2
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00b      	beq.n	800b8de <HAL_UART_IRQHandler+0xf6>
 800b8c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d005      	beq.n	800b8de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d6:	f043 0204 	orr.w	r2, r3, #4
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e2:	f003 0308 	and.w	r3, r3, #8
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d011      	beq.n	800b90e <HAL_UART_IRQHandler+0x126>
 800b8ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ee:	f003 0320 	and.w	r3, r3, #32
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d105      	bne.n	800b902 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b8f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b906:	f043 0208 	orr.w	r2, r3, #8
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 81ed 	beq.w	800bcf2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b91c:	f003 0320 	and.w	r3, r3, #32
 800b920:	2b00      	cmp	r3, #0
 800b922:	d008      	beq.n	800b936 <HAL_UART_IRQHandler+0x14e>
 800b924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b928:	f003 0320 	and.w	r3, r3, #32
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fb8e 	bl	800c052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b940:	2b40      	cmp	r3, #64	; 0x40
 800b942:	bf0c      	ite	eq
 800b944:	2301      	moveq	r3, #1
 800b946:	2300      	movne	r3, #0
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b952:	f003 0308 	and.w	r3, r3, #8
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <HAL_UART_IRQHandler+0x17a>
 800b95a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d04f      	beq.n	800ba02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa96 	bl	800be94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b972:	2b40      	cmp	r3, #64	; 0x40
 800b974:	d141      	bne.n	800b9fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3314      	adds	r3, #20
 800b97c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b98c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3314      	adds	r3, #20
 800b99e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b9a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b9ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1d9      	bne.n	800b976 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d013      	beq.n	800b9f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	4a7d      	ldr	r2, [pc, #500]	; (800bbc4 <HAL_UART_IRQHandler+0x3dc>)
 800b9d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fb ffc6 	bl	8007968 <HAL_DMA_Abort_IT>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d016      	beq.n	800ba10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f0:	e00e      	b.n	800ba10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f990 	bl	800bd18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f8:	e00a      	b.n	800ba10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f98c 	bl	800bd18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba00:	e006      	b.n	800ba10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f988 	bl	800bd18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ba0e:	e170      	b.n	800bcf2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba10:	bf00      	nop
    return;
 800ba12:	e16e      	b.n	800bcf2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	f040 814a 	bne.w	800bcb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ba1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba22:	f003 0310 	and.w	r3, r3, #16
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 8143 	beq.w	800bcb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ba2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba30:	f003 0310 	and.w	r3, r3, #16
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 813c 	beq.w	800bcb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60bb      	str	r3, [r7, #8]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	60bb      	str	r3, [r7, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	60bb      	str	r3, [r7, #8]
 800ba4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba5a:	2b40      	cmp	r3, #64	; 0x40
 800ba5c:	f040 80b4 	bne.w	800bbc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 8140 	beq.w	800bcf6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	f080 8139 	bcs.w	800bcf6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba96:	f000 8088 	beq.w	800bbaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	330c      	adds	r3, #12
 800baa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	330c      	adds	r3, #12
 800bac2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800baca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bad6:	e841 2300 	strex	r3, r2, [r1]
 800bada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1d9      	bne.n	800ba9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3314      	adds	r3, #20
 800baec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800baf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baf8:	f023 0301 	bic.w	r3, r3, #1
 800bafc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3314      	adds	r3, #20
 800bb06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e1      	bne.n	800bae6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3314      	adds	r3, #20
 800bb28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb2c:	e853 3f00 	ldrex	r3, [r3]
 800bb30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3314      	adds	r3, #20
 800bb42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb46:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e3      	bne.n	800bb22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	330c      	adds	r3, #12
 800bb6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb72:	e853 3f00 	ldrex	r3, [r3]
 800bb76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb7a:	f023 0310 	bic.w	r3, r3, #16
 800bb7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	330c      	adds	r3, #12
 800bb88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb8c:	65ba      	str	r2, [r7, #88]	; 0x58
 800bb8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb94:	e841 2300 	strex	r3, r2, [r1]
 800bb98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e3      	bne.n	800bb68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fb fe6f 	bl	8007888 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f8b6 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbc0:	e099      	b.n	800bcf6 <HAL_UART_IRQHandler+0x50e>
 800bbc2:	bf00      	nop
 800bbc4:	0800bf5b 	.word	0x0800bf5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 808b 	beq.w	800bcfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bbe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 8086 	beq.w	800bcfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	330c      	adds	r3, #12
 800bbf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bc12:	647a      	str	r2, [r7, #68]	; 0x44
 800bc14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e3      	bne.n	800bbee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3314      	adds	r3, #20
 800bc2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	e853 3f00 	ldrex	r3, [r3]
 800bc34:	623b      	str	r3, [r7, #32]
   return(result);
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	f023 0301 	bic.w	r3, r3, #1
 800bc3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3314      	adds	r3, #20
 800bc46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc4a:	633a      	str	r2, [r7, #48]	; 0x30
 800bc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc52:	e841 2300 	strex	r3, r2, [r1]
 800bc56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1e3      	bne.n	800bc26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2220      	movs	r2, #32
 800bc62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	330c      	adds	r3, #12
 800bc72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	e853 3f00 	ldrex	r3, [r3]
 800bc7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f023 0310 	bic.w	r3, r3, #16
 800bc82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	330c      	adds	r3, #12
 800bc8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bc90:	61fa      	str	r2, [r7, #28]
 800bc92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc94:	69b9      	ldr	r1, [r7, #24]
 800bc96:	69fa      	ldr	r2, [r7, #28]
 800bc98:	e841 2300 	strex	r3, r2, [r1]
 800bc9c:	617b      	str	r3, [r7, #20]
   return(result);
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1e3      	bne.n	800bc6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bca8:	4619      	mov	r1, r3
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f83e 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bcb0:	e023      	b.n	800bcfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bcb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d009      	beq.n	800bcd2 <HAL_UART_IRQHandler+0x4ea>
 800bcbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f959 	bl	800bf82 <UART_Transmit_IT>
    return;
 800bcd0:	e014      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bcd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00e      	beq.n	800bcfc <HAL_UART_IRQHandler+0x514>
 800bcde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d008      	beq.n	800bcfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f999 	bl	800c022 <UART_EndTransmit_IT>
    return;
 800bcf0:	e004      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
    return;
 800bcf2:	bf00      	nop
 800bcf4:	e002      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
      return;
 800bcf6:	bf00      	nop
 800bcf8:	e000      	b.n	800bcfc <HAL_UART_IRQHandler+0x514>
      return;
 800bcfa:	bf00      	nop
  }
}
 800bcfc:	37e8      	adds	r7, #232	; 0xe8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop

0800bd04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b090      	sub	sp, #64	; 0x40
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	603b      	str	r3, [r7, #0]
 800bd50:	4613      	mov	r3, r2
 800bd52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd54:	e050      	b.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5c:	d04c      	beq.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bd5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d007      	beq.n	800bd74 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd64:	f7fa ff36 	bl	8006bd4 <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d241      	bcs.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	330c      	adds	r3, #12
 800bd7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	e853 3f00 	ldrex	r3, [r3]
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	330c      	adds	r3, #12
 800bd92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd94:	637a      	str	r2, [r7, #52]	; 0x34
 800bd96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd9c:	e841 2300 	strex	r3, r2, [r1]
 800bda0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e5      	bne.n	800bd74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3314      	adds	r3, #20
 800bdae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	e853 3f00 	ldrex	r3, [r3]
 800bdb6:	613b      	str	r3, [r7, #16]
   return(result);
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3314      	adds	r3, #20
 800bdc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdc8:	623a      	str	r2, [r7, #32]
 800bdca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	69f9      	ldr	r1, [r7, #28]
 800bdce:	6a3a      	ldr	r2, [r7, #32]
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e5      	bne.n	800bda8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2220      	movs	r2, #32
 800bde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2220      	movs	r2, #32
 800bde8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e00f      	b.n	800be18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	4013      	ands	r3, r2
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	429a      	cmp	r2, r3
 800be06:	bf0c      	ite	eq
 800be08:	2301      	moveq	r3, #1
 800be0a:	2300      	movne	r3, #0
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	429a      	cmp	r2, r3
 800be14:	d09f      	beq.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3740      	adds	r7, #64	; 0x40
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	88fa      	ldrh	r2, [r7, #6]
 800be38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	88fa      	ldrh	r2, [r7, #6]
 800be3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2222      	movs	r2, #34	; 0x22
 800be4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68da      	ldr	r2, [r3, #12]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	695a      	ldr	r2, [r3, #20]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f042 0201 	orr.w	r2, r2, #1
 800be74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	68da      	ldr	r2, [r3, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f042 0220 	orr.w	r2, r2, #32
 800be84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be94:	b480      	push	{r7}
 800be96:	b095      	sub	sp, #84	; 0x54
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	330c      	adds	r3, #12
 800bea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea6:	e853 3f00 	ldrex	r3, [r3]
 800beaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	330c      	adds	r3, #12
 800beba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bebc:	643a      	str	r2, [r7, #64]	; 0x40
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bec4:	e841 2300 	strex	r3, r2, [r1]
 800bec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1e5      	bne.n	800be9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3314      	adds	r3, #20
 800bed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	e853 3f00 	ldrex	r3, [r3]
 800bede:	61fb      	str	r3, [r7, #28]
   return(result);
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	f023 0301 	bic.w	r3, r3, #1
 800bee6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3314      	adds	r3, #20
 800beee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bef8:	e841 2300 	strex	r3, r2, [r1]
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1e5      	bne.n	800bed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d119      	bne.n	800bf40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	330c      	adds	r3, #12
 800bf12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f023 0310 	bic.w	r3, r3, #16
 800bf22:	647b      	str	r3, [r7, #68]	; 0x44
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	330c      	adds	r3, #12
 800bf2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf2c:	61ba      	str	r2, [r7, #24]
 800bf2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	6979      	ldr	r1, [r7, #20]
 800bf32:	69ba      	ldr	r2, [r7, #24]
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	613b      	str	r3, [r7, #16]
   return(result);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e5      	bne.n	800bf0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2220      	movs	r2, #32
 800bf44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf4e:	bf00      	nop
 800bf50:	3754      	adds	r7, #84	; 0x54
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f7ff fecf 	bl	800bd18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf7a:	bf00      	nop
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b085      	sub	sp, #20
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b21      	cmp	r3, #33	; 0x21
 800bf94:	d13e      	bne.n	800c014 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf9e:	d114      	bne.n	800bfca <UART_Transmit_IT+0x48>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d110      	bne.n	800bfca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a1b      	ldr	r3, [r3, #32]
 800bfac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	1c9a      	adds	r2, r3, #2
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	621a      	str	r2, [r3, #32]
 800bfc8:	e008      	b.n	800bfdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	1c59      	adds	r1, r3, #1
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	6211      	str	r1, [r2, #32]
 800bfd4:	781a      	ldrb	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10f      	bne.n	800c010 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68da      	ldr	r2, [r3, #12]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bffe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68da      	ldr	r2, [r3, #12]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c00e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	e000      	b.n	800c016 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c014:	2302      	movs	r3, #2
  }
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b082      	sub	sp, #8
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68da      	ldr	r2, [r3, #12]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7ff fe5e 	bl	800bd04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b08c      	sub	sp, #48	; 0x30
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b22      	cmp	r3, #34	; 0x22
 800c064:	f040 80ab 	bne.w	800c1be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c070:	d117      	bne.n	800c0a2 <UART_Receive_IT+0x50>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d113      	bne.n	800c0a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c082:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c090:	b29a      	uxth	r2, r3
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09a:	1c9a      	adds	r2, r3, #2
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	629a      	str	r2, [r3, #40]	; 0x28
 800c0a0:	e026      	b.n	800c0f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b4:	d007      	beq.n	800c0c6 <UART_Receive_IT+0x74>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <UART_Receive_IT+0x82>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d106      	bne.n	800c0d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	e008      	b.n	800c0e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c100:	2b00      	cmp	r3, #0
 800c102:	d15a      	bne.n	800c1ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68da      	ldr	r2, [r3, #12]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f022 0220 	bic.w	r2, r2, #32
 800c112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68da      	ldr	r2, [r3, #12]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	695a      	ldr	r2, [r3, #20]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 0201 	bic.w	r2, r2, #1
 800c132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2220      	movs	r2, #32
 800c138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c140:	2b01      	cmp	r3, #1
 800c142:	d135      	bne.n	800c1b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	330c      	adds	r3, #12
 800c150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	e853 3f00 	ldrex	r3, [r3]
 800c158:	613b      	str	r3, [r7, #16]
   return(result);
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	f023 0310 	bic.w	r3, r3, #16
 800c160:	627b      	str	r3, [r7, #36]	; 0x24
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	330c      	adds	r3, #12
 800c168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c16a:	623a      	str	r2, [r7, #32]
 800c16c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16e:	69f9      	ldr	r1, [r7, #28]
 800c170:	6a3a      	ldr	r2, [r7, #32]
 800c172:	e841 2300 	strex	r3, r2, [r1]
 800c176:	61bb      	str	r3, [r7, #24]
   return(result);
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1e5      	bne.n	800c14a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 0310 	and.w	r3, r3, #16
 800c188:	2b10      	cmp	r3, #16
 800c18a:	d10a      	bne.n	800c1a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c18c:	2300      	movs	r3, #0
 800c18e:	60fb      	str	r3, [r7, #12]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff fdbf 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
 800c1ae:	e002      	b.n	800c1b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7fa fb47 	bl	8006844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e002      	b.n	800c1c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e000      	b.n	800c1c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c1be:	2302      	movs	r3, #2
  }
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3730      	adds	r7, #48	; 0x30
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	b09f      	sub	sp, #124	; 0x7c
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1de:	68d9      	ldr	r1, [r3, #12]
 800c1e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	ea40 0301 	orr.w	r3, r0, r1
 800c1e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c1ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	431a      	orrs	r2, r3
 800c1f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	431a      	orrs	r2, r3
 800c1fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1fc:	69db      	ldr	r3, [r3, #28]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c20c:	f021 010c 	bic.w	r1, r1, #12
 800c210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c216:	430b      	orrs	r3, r1
 800c218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c226:	6999      	ldr	r1, [r3, #24]
 800c228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	ea40 0301 	orr.w	r3, r0, r1
 800c230:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	4bc5      	ldr	r3, [pc, #788]	; (800c54c <UART_SetConfig+0x384>)
 800c238:	429a      	cmp	r2, r3
 800c23a:	d004      	beq.n	800c246 <UART_SetConfig+0x7e>
 800c23c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	4bc3      	ldr	r3, [pc, #780]	; (800c550 <UART_SetConfig+0x388>)
 800c242:	429a      	cmp	r2, r3
 800c244:	d103      	bne.n	800c24e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c246:	f7fd fc09 	bl	8009a5c <HAL_RCC_GetPCLK2Freq>
 800c24a:	6778      	str	r0, [r7, #116]	; 0x74
 800c24c:	e002      	b.n	800c254 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c24e:	f7fd fbf1 	bl	8009a34 <HAL_RCC_GetPCLK1Freq>
 800c252:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c256:	69db      	ldr	r3, [r3, #28]
 800c258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c25c:	f040 80b6 	bne.w	800c3cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c262:	461c      	mov	r4, r3
 800c264:	f04f 0500 	mov.w	r5, #0
 800c268:	4622      	mov	r2, r4
 800c26a:	462b      	mov	r3, r5
 800c26c:	1891      	adds	r1, r2, r2
 800c26e:	6439      	str	r1, [r7, #64]	; 0x40
 800c270:	415b      	adcs	r3, r3
 800c272:	647b      	str	r3, [r7, #68]	; 0x44
 800c274:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c278:	1912      	adds	r2, r2, r4
 800c27a:	eb45 0303 	adc.w	r3, r5, r3
 800c27e:	f04f 0000 	mov.w	r0, #0
 800c282:	f04f 0100 	mov.w	r1, #0
 800c286:	00d9      	lsls	r1, r3, #3
 800c288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c28c:	00d0      	lsls	r0, r2, #3
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	1911      	adds	r1, r2, r4
 800c294:	6639      	str	r1, [r7, #96]	; 0x60
 800c296:	416b      	adcs	r3, r5
 800c298:	667b      	str	r3, [r7, #100]	; 0x64
 800c29a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	f04f 0300 	mov.w	r3, #0
 800c2a4:	1891      	adds	r1, r2, r2
 800c2a6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c2a8:	415b      	adcs	r3, r3
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c2b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c2b4:	f7f4 fce8 	bl	8000c88 <__aeabi_uldivmod>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4ba5      	ldr	r3, [pc, #660]	; (800c554 <UART_SetConfig+0x38c>)
 800c2be:	fba3 2302 	umull	r2, r3, r3, r2
 800c2c2:	095b      	lsrs	r3, r3, #5
 800c2c4:	011e      	lsls	r6, r3, #4
 800c2c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2c8:	461c      	mov	r4, r3
 800c2ca:	f04f 0500 	mov.w	r5, #0
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	1891      	adds	r1, r2, r2
 800c2d4:	6339      	str	r1, [r7, #48]	; 0x30
 800c2d6:	415b      	adcs	r3, r3
 800c2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c2de:	1912      	adds	r2, r2, r4
 800c2e0:	eb45 0303 	adc.w	r3, r5, r3
 800c2e4:	f04f 0000 	mov.w	r0, #0
 800c2e8:	f04f 0100 	mov.w	r1, #0
 800c2ec:	00d9      	lsls	r1, r3, #3
 800c2ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c2f2:	00d0      	lsls	r0, r2, #3
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	1911      	adds	r1, r2, r4
 800c2fa:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2fc:	416b      	adcs	r3, r5
 800c2fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	461a      	mov	r2, r3
 800c306:	f04f 0300 	mov.w	r3, #0
 800c30a:	1891      	adds	r1, r2, r2
 800c30c:	62b9      	str	r1, [r7, #40]	; 0x28
 800c30e:	415b      	adcs	r3, r3
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c316:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c31a:	f7f4 fcb5 	bl	8000c88 <__aeabi_uldivmod>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4b8c      	ldr	r3, [pc, #560]	; (800c554 <UART_SetConfig+0x38c>)
 800c324:	fba3 1302 	umull	r1, r3, r3, r2
 800c328:	095b      	lsrs	r3, r3, #5
 800c32a:	2164      	movs	r1, #100	; 0x64
 800c32c:	fb01 f303 	mul.w	r3, r1, r3
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	3332      	adds	r3, #50	; 0x32
 800c336:	4a87      	ldr	r2, [pc, #540]	; (800c554 <UART_SetConfig+0x38c>)
 800c338:	fba2 2303 	umull	r2, r3, r2, r3
 800c33c:	095b      	lsrs	r3, r3, #5
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c344:	441e      	add	r6, r3
 800c346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c348:	4618      	mov	r0, r3
 800c34a:	f04f 0100 	mov.w	r1, #0
 800c34e:	4602      	mov	r2, r0
 800c350:	460b      	mov	r3, r1
 800c352:	1894      	adds	r4, r2, r2
 800c354:	623c      	str	r4, [r7, #32]
 800c356:	415b      	adcs	r3, r3
 800c358:	627b      	str	r3, [r7, #36]	; 0x24
 800c35a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c35e:	1812      	adds	r2, r2, r0
 800c360:	eb41 0303 	adc.w	r3, r1, r3
 800c364:	f04f 0400 	mov.w	r4, #0
 800c368:	f04f 0500 	mov.w	r5, #0
 800c36c:	00dd      	lsls	r5, r3, #3
 800c36e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c372:	00d4      	lsls	r4, r2, #3
 800c374:	4622      	mov	r2, r4
 800c376:	462b      	mov	r3, r5
 800c378:	1814      	adds	r4, r2, r0
 800c37a:	653c      	str	r4, [r7, #80]	; 0x50
 800c37c:	414b      	adcs	r3, r1
 800c37e:	657b      	str	r3, [r7, #84]	; 0x54
 800c380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	461a      	mov	r2, r3
 800c386:	f04f 0300 	mov.w	r3, #0
 800c38a:	1891      	adds	r1, r2, r2
 800c38c:	61b9      	str	r1, [r7, #24]
 800c38e:	415b      	adcs	r3, r3
 800c390:	61fb      	str	r3, [r7, #28]
 800c392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c396:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c39a:	f7f4 fc75 	bl	8000c88 <__aeabi_uldivmod>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4b6c      	ldr	r3, [pc, #432]	; (800c554 <UART_SetConfig+0x38c>)
 800c3a4:	fba3 1302 	umull	r1, r3, r3, r2
 800c3a8:	095b      	lsrs	r3, r3, #5
 800c3aa:	2164      	movs	r1, #100	; 0x64
 800c3ac:	fb01 f303 	mul.w	r3, r1, r3
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	3332      	adds	r3, #50	; 0x32
 800c3b6:	4a67      	ldr	r2, [pc, #412]	; (800c554 <UART_SetConfig+0x38c>)
 800c3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3bc:	095b      	lsrs	r3, r3, #5
 800c3be:	f003 0207 	and.w	r2, r3, #7
 800c3c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4432      	add	r2, r6
 800c3c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3ca:	e0b9      	b.n	800c540 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3ce:	461c      	mov	r4, r3
 800c3d0:	f04f 0500 	mov.w	r5, #0
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	1891      	adds	r1, r2, r2
 800c3da:	6139      	str	r1, [r7, #16]
 800c3dc:	415b      	adcs	r3, r3
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c3e4:	1912      	adds	r2, r2, r4
 800c3e6:	eb45 0303 	adc.w	r3, r5, r3
 800c3ea:	f04f 0000 	mov.w	r0, #0
 800c3ee:	f04f 0100 	mov.w	r1, #0
 800c3f2:	00d9      	lsls	r1, r3, #3
 800c3f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c3f8:	00d0      	lsls	r0, r2, #3
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	eb12 0804 	adds.w	r8, r2, r4
 800c402:	eb43 0905 	adc.w	r9, r3, r5
 800c406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f04f 0100 	mov.w	r1, #0
 800c410:	f04f 0200 	mov.w	r2, #0
 800c414:	f04f 0300 	mov.w	r3, #0
 800c418:	008b      	lsls	r3, r1, #2
 800c41a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c41e:	0082      	lsls	r2, r0, #2
 800c420:	4640      	mov	r0, r8
 800c422:	4649      	mov	r1, r9
 800c424:	f7f4 fc30 	bl	8000c88 <__aeabi_uldivmod>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4b49      	ldr	r3, [pc, #292]	; (800c554 <UART_SetConfig+0x38c>)
 800c42e:	fba3 2302 	umull	r2, r3, r3, r2
 800c432:	095b      	lsrs	r3, r3, #5
 800c434:	011e      	lsls	r6, r3, #4
 800c436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c438:	4618      	mov	r0, r3
 800c43a:	f04f 0100 	mov.w	r1, #0
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	1894      	adds	r4, r2, r2
 800c444:	60bc      	str	r4, [r7, #8]
 800c446:	415b      	adcs	r3, r3
 800c448:	60fb      	str	r3, [r7, #12]
 800c44a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c44e:	1812      	adds	r2, r2, r0
 800c450:	eb41 0303 	adc.w	r3, r1, r3
 800c454:	f04f 0400 	mov.w	r4, #0
 800c458:	f04f 0500 	mov.w	r5, #0
 800c45c:	00dd      	lsls	r5, r3, #3
 800c45e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c462:	00d4      	lsls	r4, r2, #3
 800c464:	4622      	mov	r2, r4
 800c466:	462b      	mov	r3, r5
 800c468:	1814      	adds	r4, r2, r0
 800c46a:	64bc      	str	r4, [r7, #72]	; 0x48
 800c46c:	414b      	adcs	r3, r1
 800c46e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	4618      	mov	r0, r3
 800c476:	f04f 0100 	mov.w	r1, #0
 800c47a:	f04f 0200 	mov.w	r2, #0
 800c47e:	f04f 0300 	mov.w	r3, #0
 800c482:	008b      	lsls	r3, r1, #2
 800c484:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c488:	0082      	lsls	r2, r0, #2
 800c48a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c48e:	f7f4 fbfb 	bl	8000c88 <__aeabi_uldivmod>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4b2f      	ldr	r3, [pc, #188]	; (800c554 <UART_SetConfig+0x38c>)
 800c498:	fba3 1302 	umull	r1, r3, r3, r2
 800c49c:	095b      	lsrs	r3, r3, #5
 800c49e:	2164      	movs	r1, #100	; 0x64
 800c4a0:	fb01 f303 	mul.w	r3, r1, r3
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	011b      	lsls	r3, r3, #4
 800c4a8:	3332      	adds	r3, #50	; 0x32
 800c4aa:	4a2a      	ldr	r2, [pc, #168]	; (800c554 <UART_SetConfig+0x38c>)
 800c4ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b0:	095b      	lsrs	r3, r3, #5
 800c4b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4b6:	441e      	add	r6, r3
 800c4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f04f 0100 	mov.w	r1, #0
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	1894      	adds	r4, r2, r2
 800c4c6:	603c      	str	r4, [r7, #0]
 800c4c8:	415b      	adcs	r3, r3
 800c4ca:	607b      	str	r3, [r7, #4]
 800c4cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d0:	1812      	adds	r2, r2, r0
 800c4d2:	eb41 0303 	adc.w	r3, r1, r3
 800c4d6:	f04f 0400 	mov.w	r4, #0
 800c4da:	f04f 0500 	mov.w	r5, #0
 800c4de:	00dd      	lsls	r5, r3, #3
 800c4e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c4e4:	00d4      	lsls	r4, r2, #3
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	462b      	mov	r3, r5
 800c4ea:	eb12 0a00 	adds.w	sl, r2, r0
 800c4ee:	eb43 0b01 	adc.w	fp, r3, r1
 800c4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f04f 0100 	mov.w	r1, #0
 800c4fc:	f04f 0200 	mov.w	r2, #0
 800c500:	f04f 0300 	mov.w	r3, #0
 800c504:	008b      	lsls	r3, r1, #2
 800c506:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c50a:	0082      	lsls	r2, r0, #2
 800c50c:	4650      	mov	r0, sl
 800c50e:	4659      	mov	r1, fp
 800c510:	f7f4 fbba 	bl	8000c88 <__aeabi_uldivmod>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	4b0e      	ldr	r3, [pc, #56]	; (800c554 <UART_SetConfig+0x38c>)
 800c51a:	fba3 1302 	umull	r1, r3, r3, r2
 800c51e:	095b      	lsrs	r3, r3, #5
 800c520:	2164      	movs	r1, #100	; 0x64
 800c522:	fb01 f303 	mul.w	r3, r1, r3
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	011b      	lsls	r3, r3, #4
 800c52a:	3332      	adds	r3, #50	; 0x32
 800c52c:	4a09      	ldr	r2, [pc, #36]	; (800c554 <UART_SetConfig+0x38c>)
 800c52e:	fba2 2303 	umull	r2, r3, r2, r3
 800c532:	095b      	lsrs	r3, r3, #5
 800c534:	f003 020f 	and.w	r2, r3, #15
 800c538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4432      	add	r2, r6
 800c53e:	609a      	str	r2, [r3, #8]
}
 800c540:	bf00      	nop
 800c542:	377c      	adds	r7, #124	; 0x7c
 800c544:	46bd      	mov	sp, r7
 800c546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54a:	bf00      	nop
 800c54c:	40011000 	.word	0x40011000
 800c550:	40011400 	.word	0x40011400
 800c554:	51eb851f 	.word	0x51eb851f

0800c558 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c562:	2300      	movs	r3, #0
 800c564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c570:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	4b20      	ldr	r3, [pc, #128]	; (800c5f8 <FSMC_NORSRAM_Init+0xa0>)
 800c576:	4013      	ands	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c582:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c588:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c58e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c594:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800c59a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800c5a0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c5a6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800c5ac:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800c5b2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800c5b8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800c5be:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800c5c4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b08      	cmp	r3, #8
 800c5d2:	d103      	bne.n	800c5dc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5da:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	fff00080 	.word	0xfff00080

0800c5fc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b087      	sub	sp, #28
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c608:	2300      	movs	r3, #0
 800c60a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c616:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c61e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c62a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c632:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c63a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	3b01      	subs	r3, #1
 800c642:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c644:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	3b02      	subs	r3, #2
 800c64c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c64e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c654:	4313      	orrs	r3, r2
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	4313      	orrs	r3, r2
 800c65a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6979      	ldr	r1, [r7, #20]
 800c664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	371c      	adds	r7, #28
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
	...

0800c678 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
 800c684:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800c686:	2300      	movs	r3, #0
 800c688:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c690:	d122      	bne.n	800c6d8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c69a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	4b15      	ldr	r3, [pc, #84]	; (800c6f4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c6ae:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c6b6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800c6be:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c6c4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	6979      	ldr	r1, [r7, #20]
 800c6d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c6d6:	e005      	b.n	800c6e4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c6e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	371c      	adds	r7, #28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	cff00000 	.word	0xcff00000

0800c6f8 <__errno>:
 800c6f8:	4b01      	ldr	r3, [pc, #4]	; (800c700 <__errno+0x8>)
 800c6fa:	6818      	ldr	r0, [r3, #0]
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	200000ac 	.word	0x200000ac

0800c704 <__libc_init_array>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	4d0d      	ldr	r5, [pc, #52]	; (800c73c <__libc_init_array+0x38>)
 800c708:	4c0d      	ldr	r4, [pc, #52]	; (800c740 <__libc_init_array+0x3c>)
 800c70a:	1b64      	subs	r4, r4, r5
 800c70c:	10a4      	asrs	r4, r4, #2
 800c70e:	2600      	movs	r6, #0
 800c710:	42a6      	cmp	r6, r4
 800c712:	d109      	bne.n	800c728 <__libc_init_array+0x24>
 800c714:	4d0b      	ldr	r5, [pc, #44]	; (800c744 <__libc_init_array+0x40>)
 800c716:	4c0c      	ldr	r4, [pc, #48]	; (800c748 <__libc_init_array+0x44>)
 800c718:	f002 f870 	bl	800e7fc <_init>
 800c71c:	1b64      	subs	r4, r4, r5
 800c71e:	10a4      	asrs	r4, r4, #2
 800c720:	2600      	movs	r6, #0
 800c722:	42a6      	cmp	r6, r4
 800c724:	d105      	bne.n	800c732 <__libc_init_array+0x2e>
 800c726:	bd70      	pop	{r4, r5, r6, pc}
 800c728:	f855 3b04 	ldr.w	r3, [r5], #4
 800c72c:	4798      	blx	r3
 800c72e:	3601      	adds	r6, #1
 800c730:	e7ee      	b.n	800c710 <__libc_init_array+0xc>
 800c732:	f855 3b04 	ldr.w	r3, [r5], #4
 800c736:	4798      	blx	r3
 800c738:	3601      	adds	r6, #1
 800c73a:	e7f2      	b.n	800c722 <__libc_init_array+0x1e>
 800c73c:	080e9f18 	.word	0x080e9f18
 800c740:	080e9f18 	.word	0x080e9f18
 800c744:	080e9f18 	.word	0x080e9f18
 800c748:	080e9f1c 	.word	0x080e9f1c

0800c74c <__itoa>:
 800c74c:	1e93      	subs	r3, r2, #2
 800c74e:	2b22      	cmp	r3, #34	; 0x22
 800c750:	b510      	push	{r4, lr}
 800c752:	460c      	mov	r4, r1
 800c754:	d904      	bls.n	800c760 <__itoa+0x14>
 800c756:	2300      	movs	r3, #0
 800c758:	700b      	strb	r3, [r1, #0]
 800c75a:	461c      	mov	r4, r3
 800c75c:	4620      	mov	r0, r4
 800c75e:	bd10      	pop	{r4, pc}
 800c760:	2a0a      	cmp	r2, #10
 800c762:	d109      	bne.n	800c778 <__itoa+0x2c>
 800c764:	2800      	cmp	r0, #0
 800c766:	da07      	bge.n	800c778 <__itoa+0x2c>
 800c768:	232d      	movs	r3, #45	; 0x2d
 800c76a:	700b      	strb	r3, [r1, #0]
 800c76c:	4240      	negs	r0, r0
 800c76e:	2101      	movs	r1, #1
 800c770:	4421      	add	r1, r4
 800c772:	f000 f855 	bl	800c820 <__utoa>
 800c776:	e7f1      	b.n	800c75c <__itoa+0x10>
 800c778:	2100      	movs	r1, #0
 800c77a:	e7f9      	b.n	800c770 <__itoa+0x24>

0800c77c <itoa>:
 800c77c:	f7ff bfe6 	b.w	800c74c <__itoa>

0800c780 <memset>:
 800c780:	4402      	add	r2, r0
 800c782:	4603      	mov	r3, r0
 800c784:	4293      	cmp	r3, r2
 800c786:	d100      	bne.n	800c78a <memset+0xa>
 800c788:	4770      	bx	lr
 800c78a:	f803 1b01 	strb.w	r1, [r3], #1
 800c78e:	e7f9      	b.n	800c784 <memset+0x4>

0800c790 <rand>:
 800c790:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <rand+0x60>)
 800c792:	b510      	push	{r4, lr}
 800c794:	681c      	ldr	r4, [r3, #0]
 800c796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c798:	b9b3      	cbnz	r3, 800c7c8 <rand+0x38>
 800c79a:	2018      	movs	r0, #24
 800c79c:	f000 f8b2 	bl	800c904 <malloc>
 800c7a0:	63a0      	str	r0, [r4, #56]	; 0x38
 800c7a2:	b928      	cbnz	r0, 800c7b0 <rand+0x20>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	4b13      	ldr	r3, [pc, #76]	; (800c7f4 <rand+0x64>)
 800c7a8:	4813      	ldr	r0, [pc, #76]	; (800c7f8 <rand+0x68>)
 800c7aa:	214e      	movs	r1, #78	; 0x4e
 800c7ac:	f000 f87a 	bl	800c8a4 <__assert_func>
 800c7b0:	4a12      	ldr	r2, [pc, #72]	; (800c7fc <rand+0x6c>)
 800c7b2:	4b13      	ldr	r3, [pc, #76]	; (800c800 <rand+0x70>)
 800c7b4:	e9c0 2300 	strd	r2, r3, [r0]
 800c7b8:	4b12      	ldr	r3, [pc, #72]	; (800c804 <rand+0x74>)
 800c7ba:	6083      	str	r3, [r0, #8]
 800c7bc:	230b      	movs	r3, #11
 800c7be:	8183      	strh	r3, [r0, #12]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c7c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c7ca:	480f      	ldr	r0, [pc, #60]	; (800c808 <rand+0x78>)
 800c7cc:	690a      	ldr	r2, [r1, #16]
 800c7ce:	694b      	ldr	r3, [r1, #20]
 800c7d0:	4c0e      	ldr	r4, [pc, #56]	; (800c80c <rand+0x7c>)
 800c7d2:	4350      	muls	r0, r2
 800c7d4:	fb04 0003 	mla	r0, r4, r3, r0
 800c7d8:	fba2 3404 	umull	r3, r4, r2, r4
 800c7dc:	1c5a      	adds	r2, r3, #1
 800c7de:	4404      	add	r4, r0
 800c7e0:	f144 0000 	adc.w	r0, r4, #0
 800c7e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c7e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c7ec:	bd10      	pop	{r4, pc}
 800c7ee:	bf00      	nop
 800c7f0:	200000ac 	.word	0x200000ac
 800c7f4:	080e9d60 	.word	0x080e9d60
 800c7f8:	080e9d77 	.word	0x080e9d77
 800c7fc:	abcd330e 	.word	0xabcd330e
 800c800:	e66d1234 	.word	0xe66d1234
 800c804:	0005deec 	.word	0x0005deec
 800c808:	5851f42d 	.word	0x5851f42d
 800c80c:	4c957f2d 	.word	0x4c957f2d

0800c810 <strcpy>:
 800c810:	4603      	mov	r3, r0
 800c812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c816:	f803 2b01 	strb.w	r2, [r3], #1
 800c81a:	2a00      	cmp	r2, #0
 800c81c:	d1f9      	bne.n	800c812 <strcpy+0x2>
 800c81e:	4770      	bx	lr

0800c820 <__utoa>:
 800c820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c822:	4c1f      	ldr	r4, [pc, #124]	; (800c8a0 <__utoa+0x80>)
 800c824:	b08b      	sub	sp, #44	; 0x2c
 800c826:	4605      	mov	r5, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	466e      	mov	r6, sp
 800c82c:	f104 0c20 	add.w	ip, r4, #32
 800c830:	6820      	ldr	r0, [r4, #0]
 800c832:	6861      	ldr	r1, [r4, #4]
 800c834:	4637      	mov	r7, r6
 800c836:	c703      	stmia	r7!, {r0, r1}
 800c838:	3408      	adds	r4, #8
 800c83a:	4564      	cmp	r4, ip
 800c83c:	463e      	mov	r6, r7
 800c83e:	d1f7      	bne.n	800c830 <__utoa+0x10>
 800c840:	7921      	ldrb	r1, [r4, #4]
 800c842:	7139      	strb	r1, [r7, #4]
 800c844:	1e91      	subs	r1, r2, #2
 800c846:	6820      	ldr	r0, [r4, #0]
 800c848:	6038      	str	r0, [r7, #0]
 800c84a:	2922      	cmp	r1, #34	; 0x22
 800c84c:	f04f 0100 	mov.w	r1, #0
 800c850:	d904      	bls.n	800c85c <__utoa+0x3c>
 800c852:	7019      	strb	r1, [r3, #0]
 800c854:	460b      	mov	r3, r1
 800c856:	4618      	mov	r0, r3
 800c858:	b00b      	add	sp, #44	; 0x2c
 800c85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c85c:	1e58      	subs	r0, r3, #1
 800c85e:	4684      	mov	ip, r0
 800c860:	fbb5 f7f2 	udiv	r7, r5, r2
 800c864:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c868:	fb02 5617 	mls	r6, r2, r7, r5
 800c86c:	4476      	add	r6, lr
 800c86e:	460c      	mov	r4, r1
 800c870:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c874:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c878:	462e      	mov	r6, r5
 800c87a:	42b2      	cmp	r2, r6
 800c87c:	f101 0101 	add.w	r1, r1, #1
 800c880:	463d      	mov	r5, r7
 800c882:	d9ed      	bls.n	800c860 <__utoa+0x40>
 800c884:	2200      	movs	r2, #0
 800c886:	545a      	strb	r2, [r3, r1]
 800c888:	1919      	adds	r1, r3, r4
 800c88a:	1aa5      	subs	r5, r4, r2
 800c88c:	42aa      	cmp	r2, r5
 800c88e:	dae2      	bge.n	800c856 <__utoa+0x36>
 800c890:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c894:	780e      	ldrb	r6, [r1, #0]
 800c896:	7006      	strb	r6, [r0, #0]
 800c898:	3201      	adds	r2, #1
 800c89a:	f801 5901 	strb.w	r5, [r1], #-1
 800c89e:	e7f4      	b.n	800c88a <__utoa+0x6a>
 800c8a0:	080e9dd6 	.word	0x080e9dd6

0800c8a4 <__assert_func>:
 800c8a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8a6:	4614      	mov	r4, r2
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <__assert_func+0x2c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	68d8      	ldr	r0, [r3, #12]
 800c8b2:	b14c      	cbz	r4, 800c8c8 <__assert_func+0x24>
 800c8b4:	4b07      	ldr	r3, [pc, #28]	; (800c8d4 <__assert_func+0x30>)
 800c8b6:	9100      	str	r1, [sp, #0]
 800c8b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8bc:	4906      	ldr	r1, [pc, #24]	; (800c8d8 <__assert_func+0x34>)
 800c8be:	462b      	mov	r3, r5
 800c8c0:	f000 f80e 	bl	800c8e0 <fiprintf>
 800c8c4:	f000 fc8e 	bl	800d1e4 <abort>
 800c8c8:	4b04      	ldr	r3, [pc, #16]	; (800c8dc <__assert_func+0x38>)
 800c8ca:	461c      	mov	r4, r3
 800c8cc:	e7f3      	b.n	800c8b6 <__assert_func+0x12>
 800c8ce:	bf00      	nop
 800c8d0:	200000ac 	.word	0x200000ac
 800c8d4:	080e9dfb 	.word	0x080e9dfb
 800c8d8:	080e9e08 	.word	0x080e9e08
 800c8dc:	080e9e36 	.word	0x080e9e36

0800c8e0 <fiprintf>:
 800c8e0:	b40e      	push	{r1, r2, r3}
 800c8e2:	b503      	push	{r0, r1, lr}
 800c8e4:	4601      	mov	r1, r0
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	4805      	ldr	r0, [pc, #20]	; (800c900 <fiprintf+0x20>)
 800c8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ee:	6800      	ldr	r0, [r0, #0]
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	f000 f8e3 	bl	800cabc <_vfiprintf_r>
 800c8f6:	b002      	add	sp, #8
 800c8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8fc:	b003      	add	sp, #12
 800c8fe:	4770      	bx	lr
 800c900:	200000ac 	.word	0x200000ac

0800c904 <malloc>:
 800c904:	4b02      	ldr	r3, [pc, #8]	; (800c910 <malloc+0xc>)
 800c906:	4601      	mov	r1, r0
 800c908:	6818      	ldr	r0, [r3, #0]
 800c90a:	f000 b853 	b.w	800c9b4 <_malloc_r>
 800c90e:	bf00      	nop
 800c910:	200000ac 	.word	0x200000ac

0800c914 <_free_r>:
 800c914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c916:	2900      	cmp	r1, #0
 800c918:	d048      	beq.n	800c9ac <_free_r+0x98>
 800c91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91e:	9001      	str	r0, [sp, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f1a1 0404 	sub.w	r4, r1, #4
 800c926:	bfb8      	it	lt
 800c928:	18e4      	addlt	r4, r4, r3
 800c92a:	f000 fe81 	bl	800d630 <__malloc_lock>
 800c92e:	4a20      	ldr	r2, [pc, #128]	; (800c9b0 <_free_r+0x9c>)
 800c930:	9801      	ldr	r0, [sp, #4]
 800c932:	6813      	ldr	r3, [r2, #0]
 800c934:	4615      	mov	r5, r2
 800c936:	b933      	cbnz	r3, 800c946 <_free_r+0x32>
 800c938:	6063      	str	r3, [r4, #4]
 800c93a:	6014      	str	r4, [r2, #0]
 800c93c:	b003      	add	sp, #12
 800c93e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c942:	f000 be7b 	b.w	800d63c <__malloc_unlock>
 800c946:	42a3      	cmp	r3, r4
 800c948:	d90b      	bls.n	800c962 <_free_r+0x4e>
 800c94a:	6821      	ldr	r1, [r4, #0]
 800c94c:	1862      	adds	r2, r4, r1
 800c94e:	4293      	cmp	r3, r2
 800c950:	bf04      	itt	eq
 800c952:	681a      	ldreq	r2, [r3, #0]
 800c954:	685b      	ldreq	r3, [r3, #4]
 800c956:	6063      	str	r3, [r4, #4]
 800c958:	bf04      	itt	eq
 800c95a:	1852      	addeq	r2, r2, r1
 800c95c:	6022      	streq	r2, [r4, #0]
 800c95e:	602c      	str	r4, [r5, #0]
 800c960:	e7ec      	b.n	800c93c <_free_r+0x28>
 800c962:	461a      	mov	r2, r3
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	b10b      	cbz	r3, 800c96c <_free_r+0x58>
 800c968:	42a3      	cmp	r3, r4
 800c96a:	d9fa      	bls.n	800c962 <_free_r+0x4e>
 800c96c:	6811      	ldr	r1, [r2, #0]
 800c96e:	1855      	adds	r5, r2, r1
 800c970:	42a5      	cmp	r5, r4
 800c972:	d10b      	bne.n	800c98c <_free_r+0x78>
 800c974:	6824      	ldr	r4, [r4, #0]
 800c976:	4421      	add	r1, r4
 800c978:	1854      	adds	r4, r2, r1
 800c97a:	42a3      	cmp	r3, r4
 800c97c:	6011      	str	r1, [r2, #0]
 800c97e:	d1dd      	bne.n	800c93c <_free_r+0x28>
 800c980:	681c      	ldr	r4, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	6053      	str	r3, [r2, #4]
 800c986:	4421      	add	r1, r4
 800c988:	6011      	str	r1, [r2, #0]
 800c98a:	e7d7      	b.n	800c93c <_free_r+0x28>
 800c98c:	d902      	bls.n	800c994 <_free_r+0x80>
 800c98e:	230c      	movs	r3, #12
 800c990:	6003      	str	r3, [r0, #0]
 800c992:	e7d3      	b.n	800c93c <_free_r+0x28>
 800c994:	6825      	ldr	r5, [r4, #0]
 800c996:	1961      	adds	r1, r4, r5
 800c998:	428b      	cmp	r3, r1
 800c99a:	bf04      	itt	eq
 800c99c:	6819      	ldreq	r1, [r3, #0]
 800c99e:	685b      	ldreq	r3, [r3, #4]
 800c9a0:	6063      	str	r3, [r4, #4]
 800c9a2:	bf04      	itt	eq
 800c9a4:	1949      	addeq	r1, r1, r5
 800c9a6:	6021      	streq	r1, [r4, #0]
 800c9a8:	6054      	str	r4, [r2, #4]
 800c9aa:	e7c7      	b.n	800c93c <_free_r+0x28>
 800c9ac:	b003      	add	sp, #12
 800c9ae:	bd30      	pop	{r4, r5, pc}
 800c9b0:	200001a4 	.word	0x200001a4

0800c9b4 <_malloc_r>:
 800c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b6:	1ccd      	adds	r5, r1, #3
 800c9b8:	f025 0503 	bic.w	r5, r5, #3
 800c9bc:	3508      	adds	r5, #8
 800c9be:	2d0c      	cmp	r5, #12
 800c9c0:	bf38      	it	cc
 800c9c2:	250c      	movcc	r5, #12
 800c9c4:	2d00      	cmp	r5, #0
 800c9c6:	4606      	mov	r6, r0
 800c9c8:	db01      	blt.n	800c9ce <_malloc_r+0x1a>
 800c9ca:	42a9      	cmp	r1, r5
 800c9cc:	d903      	bls.n	800c9d6 <_malloc_r+0x22>
 800c9ce:	230c      	movs	r3, #12
 800c9d0:	6033      	str	r3, [r6, #0]
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d6:	f000 fe2b 	bl	800d630 <__malloc_lock>
 800c9da:	4921      	ldr	r1, [pc, #132]	; (800ca60 <_malloc_r+0xac>)
 800c9dc:	680a      	ldr	r2, [r1, #0]
 800c9de:	4614      	mov	r4, r2
 800c9e0:	b99c      	cbnz	r4, 800ca0a <_malloc_r+0x56>
 800c9e2:	4f20      	ldr	r7, [pc, #128]	; (800ca64 <_malloc_r+0xb0>)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	b923      	cbnz	r3, 800c9f2 <_malloc_r+0x3e>
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f000 fb2a 	bl	800d044 <_sbrk_r>
 800c9f0:	6038      	str	r0, [r7, #0]
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	f000 fb25 	bl	800d044 <_sbrk_r>
 800c9fa:	1c43      	adds	r3, r0, #1
 800c9fc:	d123      	bne.n	800ca46 <_malloc_r+0x92>
 800c9fe:	230c      	movs	r3, #12
 800ca00:	6033      	str	r3, [r6, #0]
 800ca02:	4630      	mov	r0, r6
 800ca04:	f000 fe1a 	bl	800d63c <__malloc_unlock>
 800ca08:	e7e3      	b.n	800c9d2 <_malloc_r+0x1e>
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	1b5b      	subs	r3, r3, r5
 800ca0e:	d417      	bmi.n	800ca40 <_malloc_r+0x8c>
 800ca10:	2b0b      	cmp	r3, #11
 800ca12:	d903      	bls.n	800ca1c <_malloc_r+0x68>
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	441c      	add	r4, r3
 800ca18:	6025      	str	r5, [r4, #0]
 800ca1a:	e004      	b.n	800ca26 <_malloc_r+0x72>
 800ca1c:	6863      	ldr	r3, [r4, #4]
 800ca1e:	42a2      	cmp	r2, r4
 800ca20:	bf0c      	ite	eq
 800ca22:	600b      	streq	r3, [r1, #0]
 800ca24:	6053      	strne	r3, [r2, #4]
 800ca26:	4630      	mov	r0, r6
 800ca28:	f000 fe08 	bl	800d63c <__malloc_unlock>
 800ca2c:	f104 000b 	add.w	r0, r4, #11
 800ca30:	1d23      	adds	r3, r4, #4
 800ca32:	f020 0007 	bic.w	r0, r0, #7
 800ca36:	1ac2      	subs	r2, r0, r3
 800ca38:	d0cc      	beq.n	800c9d4 <_malloc_r+0x20>
 800ca3a:	1a1b      	subs	r3, r3, r0
 800ca3c:	50a3      	str	r3, [r4, r2]
 800ca3e:	e7c9      	b.n	800c9d4 <_malloc_r+0x20>
 800ca40:	4622      	mov	r2, r4
 800ca42:	6864      	ldr	r4, [r4, #4]
 800ca44:	e7cc      	b.n	800c9e0 <_malloc_r+0x2c>
 800ca46:	1cc4      	adds	r4, r0, #3
 800ca48:	f024 0403 	bic.w	r4, r4, #3
 800ca4c:	42a0      	cmp	r0, r4
 800ca4e:	d0e3      	beq.n	800ca18 <_malloc_r+0x64>
 800ca50:	1a21      	subs	r1, r4, r0
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 faf6 	bl	800d044 <_sbrk_r>
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d1dd      	bne.n	800ca18 <_malloc_r+0x64>
 800ca5c:	e7cf      	b.n	800c9fe <_malloc_r+0x4a>
 800ca5e:	bf00      	nop
 800ca60:	200001a4 	.word	0x200001a4
 800ca64:	200001a8 	.word	0x200001a8

0800ca68 <__sfputc_r>:
 800ca68:	6893      	ldr	r3, [r2, #8]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	b410      	push	{r4}
 800ca70:	6093      	str	r3, [r2, #8]
 800ca72:	da08      	bge.n	800ca86 <__sfputc_r+0x1e>
 800ca74:	6994      	ldr	r4, [r2, #24]
 800ca76:	42a3      	cmp	r3, r4
 800ca78:	db01      	blt.n	800ca7e <__sfputc_r+0x16>
 800ca7a:	290a      	cmp	r1, #10
 800ca7c:	d103      	bne.n	800ca86 <__sfputc_r+0x1e>
 800ca7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca82:	f000 baef 	b.w	800d064 <__swbuf_r>
 800ca86:	6813      	ldr	r3, [r2, #0]
 800ca88:	1c58      	adds	r0, r3, #1
 800ca8a:	6010      	str	r0, [r2, #0]
 800ca8c:	7019      	strb	r1, [r3, #0]
 800ca8e:	4608      	mov	r0, r1
 800ca90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <__sfputs_r>:
 800ca96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca98:	4606      	mov	r6, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	4614      	mov	r4, r2
 800ca9e:	18d5      	adds	r5, r2, r3
 800caa0:	42ac      	cmp	r4, r5
 800caa2:	d101      	bne.n	800caa8 <__sfputs_r+0x12>
 800caa4:	2000      	movs	r0, #0
 800caa6:	e007      	b.n	800cab8 <__sfputs_r+0x22>
 800caa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caac:	463a      	mov	r2, r7
 800caae:	4630      	mov	r0, r6
 800cab0:	f7ff ffda 	bl	800ca68 <__sfputc_r>
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	d1f3      	bne.n	800caa0 <__sfputs_r+0xa>
 800cab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cabc <_vfiprintf_r>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	460d      	mov	r5, r1
 800cac2:	b09d      	sub	sp, #116	; 0x74
 800cac4:	4614      	mov	r4, r2
 800cac6:	4698      	mov	r8, r3
 800cac8:	4606      	mov	r6, r0
 800caca:	b118      	cbz	r0, 800cad4 <_vfiprintf_r+0x18>
 800cacc:	6983      	ldr	r3, [r0, #24]
 800cace:	b90b      	cbnz	r3, 800cad4 <_vfiprintf_r+0x18>
 800cad0:	f000 fcaa 	bl	800d428 <__sinit>
 800cad4:	4b89      	ldr	r3, [pc, #548]	; (800ccfc <_vfiprintf_r+0x240>)
 800cad6:	429d      	cmp	r5, r3
 800cad8:	d11b      	bne.n	800cb12 <_vfiprintf_r+0x56>
 800cada:	6875      	ldr	r5, [r6, #4]
 800cadc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cade:	07d9      	lsls	r1, r3, #31
 800cae0:	d405      	bmi.n	800caee <_vfiprintf_r+0x32>
 800cae2:	89ab      	ldrh	r3, [r5, #12]
 800cae4:	059a      	lsls	r2, r3, #22
 800cae6:	d402      	bmi.n	800caee <_vfiprintf_r+0x32>
 800cae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caea:	f000 fd3b 	bl	800d564 <__retarget_lock_acquire_recursive>
 800caee:	89ab      	ldrh	r3, [r5, #12]
 800caf0:	071b      	lsls	r3, r3, #28
 800caf2:	d501      	bpl.n	800caf8 <_vfiprintf_r+0x3c>
 800caf4:	692b      	ldr	r3, [r5, #16]
 800caf6:	b9eb      	cbnz	r3, 800cb34 <_vfiprintf_r+0x78>
 800caf8:	4629      	mov	r1, r5
 800cafa:	4630      	mov	r0, r6
 800cafc:	f000 fb04 	bl	800d108 <__swsetup_r>
 800cb00:	b1c0      	cbz	r0, 800cb34 <_vfiprintf_r+0x78>
 800cb02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb04:	07dc      	lsls	r4, r3, #31
 800cb06:	d50e      	bpl.n	800cb26 <_vfiprintf_r+0x6a>
 800cb08:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0c:	b01d      	add	sp, #116	; 0x74
 800cb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb12:	4b7b      	ldr	r3, [pc, #492]	; (800cd00 <_vfiprintf_r+0x244>)
 800cb14:	429d      	cmp	r5, r3
 800cb16:	d101      	bne.n	800cb1c <_vfiprintf_r+0x60>
 800cb18:	68b5      	ldr	r5, [r6, #8]
 800cb1a:	e7df      	b.n	800cadc <_vfiprintf_r+0x20>
 800cb1c:	4b79      	ldr	r3, [pc, #484]	; (800cd04 <_vfiprintf_r+0x248>)
 800cb1e:	429d      	cmp	r5, r3
 800cb20:	bf08      	it	eq
 800cb22:	68f5      	ldreq	r5, [r6, #12]
 800cb24:	e7da      	b.n	800cadc <_vfiprintf_r+0x20>
 800cb26:	89ab      	ldrh	r3, [r5, #12]
 800cb28:	0598      	lsls	r0, r3, #22
 800cb2a:	d4ed      	bmi.n	800cb08 <_vfiprintf_r+0x4c>
 800cb2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb2e:	f000 fd1a 	bl	800d566 <__retarget_lock_release_recursive>
 800cb32:	e7e9      	b.n	800cb08 <_vfiprintf_r+0x4c>
 800cb34:	2300      	movs	r3, #0
 800cb36:	9309      	str	r3, [sp, #36]	; 0x24
 800cb38:	2320      	movs	r3, #32
 800cb3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb42:	2330      	movs	r3, #48	; 0x30
 800cb44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd08 <_vfiprintf_r+0x24c>
 800cb48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb4c:	f04f 0901 	mov.w	r9, #1
 800cb50:	4623      	mov	r3, r4
 800cb52:	469a      	mov	sl, r3
 800cb54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb58:	b10a      	cbz	r2, 800cb5e <_vfiprintf_r+0xa2>
 800cb5a:	2a25      	cmp	r2, #37	; 0x25
 800cb5c:	d1f9      	bne.n	800cb52 <_vfiprintf_r+0x96>
 800cb5e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb62:	d00b      	beq.n	800cb7c <_vfiprintf_r+0xc0>
 800cb64:	465b      	mov	r3, fp
 800cb66:	4622      	mov	r2, r4
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ff93 	bl	800ca96 <__sfputs_r>
 800cb70:	3001      	adds	r0, #1
 800cb72:	f000 80aa 	beq.w	800ccca <_vfiprintf_r+0x20e>
 800cb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb78:	445a      	add	r2, fp
 800cb7a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f000 80a2 	beq.w	800ccca <_vfiprintf_r+0x20e>
 800cb86:	2300      	movs	r3, #0
 800cb88:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb90:	f10a 0a01 	add.w	sl, sl, #1
 800cb94:	9304      	str	r3, [sp, #16]
 800cb96:	9307      	str	r3, [sp, #28]
 800cb98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb9c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb9e:	4654      	mov	r4, sl
 800cba0:	2205      	movs	r2, #5
 800cba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba6:	4858      	ldr	r0, [pc, #352]	; (800cd08 <_vfiprintf_r+0x24c>)
 800cba8:	f7f3 fb1a 	bl	80001e0 <memchr>
 800cbac:	9a04      	ldr	r2, [sp, #16]
 800cbae:	b9d8      	cbnz	r0, 800cbe8 <_vfiprintf_r+0x12c>
 800cbb0:	06d1      	lsls	r1, r2, #27
 800cbb2:	bf44      	itt	mi
 800cbb4:	2320      	movmi	r3, #32
 800cbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbba:	0713      	lsls	r3, r2, #28
 800cbbc:	bf44      	itt	mi
 800cbbe:	232b      	movmi	r3, #43	; 0x2b
 800cbc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbc4:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbca:	d015      	beq.n	800cbf8 <_vfiprintf_r+0x13c>
 800cbcc:	9a07      	ldr	r2, [sp, #28]
 800cbce:	4654      	mov	r4, sl
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	f04f 0c0a 	mov.w	ip, #10
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbdc:	3b30      	subs	r3, #48	; 0x30
 800cbde:	2b09      	cmp	r3, #9
 800cbe0:	d94e      	bls.n	800cc80 <_vfiprintf_r+0x1c4>
 800cbe2:	b1b0      	cbz	r0, 800cc12 <_vfiprintf_r+0x156>
 800cbe4:	9207      	str	r2, [sp, #28]
 800cbe6:	e014      	b.n	800cc12 <_vfiprintf_r+0x156>
 800cbe8:	eba0 0308 	sub.w	r3, r0, r8
 800cbec:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	46a2      	mov	sl, r4
 800cbf6:	e7d2      	b.n	800cb9e <_vfiprintf_r+0xe2>
 800cbf8:	9b03      	ldr	r3, [sp, #12]
 800cbfa:	1d19      	adds	r1, r3, #4
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	9103      	str	r1, [sp, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bfbb      	ittet	lt
 800cc04:	425b      	neglt	r3, r3
 800cc06:	f042 0202 	orrlt.w	r2, r2, #2
 800cc0a:	9307      	strge	r3, [sp, #28]
 800cc0c:	9307      	strlt	r3, [sp, #28]
 800cc0e:	bfb8      	it	lt
 800cc10:	9204      	strlt	r2, [sp, #16]
 800cc12:	7823      	ldrb	r3, [r4, #0]
 800cc14:	2b2e      	cmp	r3, #46	; 0x2e
 800cc16:	d10c      	bne.n	800cc32 <_vfiprintf_r+0x176>
 800cc18:	7863      	ldrb	r3, [r4, #1]
 800cc1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc1c:	d135      	bne.n	800cc8a <_vfiprintf_r+0x1ce>
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	1d1a      	adds	r2, r3, #4
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	9203      	str	r2, [sp, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfb8      	it	lt
 800cc2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc2e:	3402      	adds	r4, #2
 800cc30:	9305      	str	r3, [sp, #20]
 800cc32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd18 <_vfiprintf_r+0x25c>
 800cc36:	7821      	ldrb	r1, [r4, #0]
 800cc38:	2203      	movs	r2, #3
 800cc3a:	4650      	mov	r0, sl
 800cc3c:	f7f3 fad0 	bl	80001e0 <memchr>
 800cc40:	b140      	cbz	r0, 800cc54 <_vfiprintf_r+0x198>
 800cc42:	2340      	movs	r3, #64	; 0x40
 800cc44:	eba0 000a 	sub.w	r0, r0, sl
 800cc48:	fa03 f000 	lsl.w	r0, r3, r0
 800cc4c:	9b04      	ldr	r3, [sp, #16]
 800cc4e:	4303      	orrs	r3, r0
 800cc50:	3401      	adds	r4, #1
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc58:	482c      	ldr	r0, [pc, #176]	; (800cd0c <_vfiprintf_r+0x250>)
 800cc5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc5e:	2206      	movs	r2, #6
 800cc60:	f7f3 fabe 	bl	80001e0 <memchr>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d03f      	beq.n	800cce8 <_vfiprintf_r+0x22c>
 800cc68:	4b29      	ldr	r3, [pc, #164]	; (800cd10 <_vfiprintf_r+0x254>)
 800cc6a:	bb1b      	cbnz	r3, 800ccb4 <_vfiprintf_r+0x1f8>
 800cc6c:	9b03      	ldr	r3, [sp, #12]
 800cc6e:	3307      	adds	r3, #7
 800cc70:	f023 0307 	bic.w	r3, r3, #7
 800cc74:	3308      	adds	r3, #8
 800cc76:	9303      	str	r3, [sp, #12]
 800cc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc7a:	443b      	add	r3, r7
 800cc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc7e:	e767      	b.n	800cb50 <_vfiprintf_r+0x94>
 800cc80:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc84:	460c      	mov	r4, r1
 800cc86:	2001      	movs	r0, #1
 800cc88:	e7a5      	b.n	800cbd6 <_vfiprintf_r+0x11a>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	3401      	adds	r4, #1
 800cc8e:	9305      	str	r3, [sp, #20]
 800cc90:	4619      	mov	r1, r3
 800cc92:	f04f 0c0a 	mov.w	ip, #10
 800cc96:	4620      	mov	r0, r4
 800cc98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc9c:	3a30      	subs	r2, #48	; 0x30
 800cc9e:	2a09      	cmp	r2, #9
 800cca0:	d903      	bls.n	800ccaa <_vfiprintf_r+0x1ee>
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0c5      	beq.n	800cc32 <_vfiprintf_r+0x176>
 800cca6:	9105      	str	r1, [sp, #20]
 800cca8:	e7c3      	b.n	800cc32 <_vfiprintf_r+0x176>
 800ccaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccae:	4604      	mov	r4, r0
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e7f0      	b.n	800cc96 <_vfiprintf_r+0x1da>
 800ccb4:	ab03      	add	r3, sp, #12
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	462a      	mov	r2, r5
 800ccba:	4b16      	ldr	r3, [pc, #88]	; (800cd14 <_vfiprintf_r+0x258>)
 800ccbc:	a904      	add	r1, sp, #16
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f3af 8000 	nop.w
 800ccc4:	4607      	mov	r7, r0
 800ccc6:	1c78      	adds	r0, r7, #1
 800ccc8:	d1d6      	bne.n	800cc78 <_vfiprintf_r+0x1bc>
 800ccca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cccc:	07d9      	lsls	r1, r3, #31
 800ccce:	d405      	bmi.n	800ccdc <_vfiprintf_r+0x220>
 800ccd0:	89ab      	ldrh	r3, [r5, #12]
 800ccd2:	059a      	lsls	r2, r3, #22
 800ccd4:	d402      	bmi.n	800ccdc <_vfiprintf_r+0x220>
 800ccd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd8:	f000 fc45 	bl	800d566 <__retarget_lock_release_recursive>
 800ccdc:	89ab      	ldrh	r3, [r5, #12]
 800ccde:	065b      	lsls	r3, r3, #25
 800cce0:	f53f af12 	bmi.w	800cb08 <_vfiprintf_r+0x4c>
 800cce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cce6:	e711      	b.n	800cb0c <_vfiprintf_r+0x50>
 800cce8:	ab03      	add	r3, sp, #12
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	462a      	mov	r2, r5
 800ccee:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <_vfiprintf_r+0x258>)
 800ccf0:	a904      	add	r1, sp, #16
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f000 f880 	bl	800cdf8 <_printf_i>
 800ccf8:	e7e4      	b.n	800ccc4 <_vfiprintf_r+0x208>
 800ccfa:	bf00      	nop
 800ccfc:	080e9e8c 	.word	0x080e9e8c
 800cd00:	080e9eac 	.word	0x080e9eac
 800cd04:	080e9e6c 	.word	0x080e9e6c
 800cd08:	080e9e37 	.word	0x080e9e37
 800cd0c:	080e9e41 	.word	0x080e9e41
 800cd10:	00000000 	.word	0x00000000
 800cd14:	0800ca97 	.word	0x0800ca97
 800cd18:	080e9e3d 	.word	0x080e9e3d

0800cd1c <_printf_common>:
 800cd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd20:	4616      	mov	r6, r2
 800cd22:	4699      	mov	r9, r3
 800cd24:	688a      	ldr	r2, [r1, #8]
 800cd26:	690b      	ldr	r3, [r1, #16]
 800cd28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	bfb8      	it	lt
 800cd30:	4613      	movlt	r3, r2
 800cd32:	6033      	str	r3, [r6, #0]
 800cd34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd38:	4607      	mov	r7, r0
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	b10a      	cbz	r2, 800cd42 <_printf_common+0x26>
 800cd3e:	3301      	adds	r3, #1
 800cd40:	6033      	str	r3, [r6, #0]
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	0699      	lsls	r1, r3, #26
 800cd46:	bf42      	ittt	mi
 800cd48:	6833      	ldrmi	r3, [r6, #0]
 800cd4a:	3302      	addmi	r3, #2
 800cd4c:	6033      	strmi	r3, [r6, #0]
 800cd4e:	6825      	ldr	r5, [r4, #0]
 800cd50:	f015 0506 	ands.w	r5, r5, #6
 800cd54:	d106      	bne.n	800cd64 <_printf_common+0x48>
 800cd56:	f104 0a19 	add.w	sl, r4, #25
 800cd5a:	68e3      	ldr	r3, [r4, #12]
 800cd5c:	6832      	ldr	r2, [r6, #0]
 800cd5e:	1a9b      	subs	r3, r3, r2
 800cd60:	42ab      	cmp	r3, r5
 800cd62:	dc26      	bgt.n	800cdb2 <_printf_common+0x96>
 800cd64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd68:	1e13      	subs	r3, r2, #0
 800cd6a:	6822      	ldr	r2, [r4, #0]
 800cd6c:	bf18      	it	ne
 800cd6e:	2301      	movne	r3, #1
 800cd70:	0692      	lsls	r2, r2, #26
 800cd72:	d42b      	bmi.n	800cdcc <_printf_common+0xb0>
 800cd74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd78:	4649      	mov	r1, r9
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	47c0      	blx	r8
 800cd7e:	3001      	adds	r0, #1
 800cd80:	d01e      	beq.n	800cdc0 <_printf_common+0xa4>
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	68e5      	ldr	r5, [r4, #12]
 800cd86:	6832      	ldr	r2, [r6, #0]
 800cd88:	f003 0306 	and.w	r3, r3, #6
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	bf08      	it	eq
 800cd90:	1aad      	subeq	r5, r5, r2
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	6922      	ldr	r2, [r4, #16]
 800cd96:	bf0c      	ite	eq
 800cd98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd9c:	2500      	movne	r5, #0
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	bfc4      	itt	gt
 800cda2:	1a9b      	subgt	r3, r3, r2
 800cda4:	18ed      	addgt	r5, r5, r3
 800cda6:	2600      	movs	r6, #0
 800cda8:	341a      	adds	r4, #26
 800cdaa:	42b5      	cmp	r5, r6
 800cdac:	d11a      	bne.n	800cde4 <_printf_common+0xc8>
 800cdae:	2000      	movs	r0, #0
 800cdb0:	e008      	b.n	800cdc4 <_printf_common+0xa8>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	4652      	mov	r2, sl
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	4638      	mov	r0, r7
 800cdba:	47c0      	blx	r8
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d103      	bne.n	800cdc8 <_printf_common+0xac>
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	3501      	adds	r5, #1
 800cdca:	e7c6      	b.n	800cd5a <_printf_common+0x3e>
 800cdcc:	18e1      	adds	r1, r4, r3
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	2030      	movs	r0, #48	; 0x30
 800cdd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdd6:	4422      	add	r2, r4
 800cdd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cde0:	3302      	adds	r3, #2
 800cde2:	e7c7      	b.n	800cd74 <_printf_common+0x58>
 800cde4:	2301      	movs	r3, #1
 800cde6:	4622      	mov	r2, r4
 800cde8:	4649      	mov	r1, r9
 800cdea:	4638      	mov	r0, r7
 800cdec:	47c0      	blx	r8
 800cdee:	3001      	adds	r0, #1
 800cdf0:	d0e6      	beq.n	800cdc0 <_printf_common+0xa4>
 800cdf2:	3601      	adds	r6, #1
 800cdf4:	e7d9      	b.n	800cdaa <_printf_common+0x8e>
	...

0800cdf8 <_printf_i>:
 800cdf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	4691      	mov	r9, r2
 800ce00:	7e27      	ldrb	r7, [r4, #24]
 800ce02:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce04:	2f78      	cmp	r7, #120	; 0x78
 800ce06:	4680      	mov	r8, r0
 800ce08:	469a      	mov	sl, r3
 800ce0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce0e:	d807      	bhi.n	800ce20 <_printf_i+0x28>
 800ce10:	2f62      	cmp	r7, #98	; 0x62
 800ce12:	d80a      	bhi.n	800ce2a <_printf_i+0x32>
 800ce14:	2f00      	cmp	r7, #0
 800ce16:	f000 80d8 	beq.w	800cfca <_printf_i+0x1d2>
 800ce1a:	2f58      	cmp	r7, #88	; 0x58
 800ce1c:	f000 80a3 	beq.w	800cf66 <_printf_i+0x16e>
 800ce20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce28:	e03a      	b.n	800cea0 <_printf_i+0xa8>
 800ce2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce2e:	2b15      	cmp	r3, #21
 800ce30:	d8f6      	bhi.n	800ce20 <_printf_i+0x28>
 800ce32:	a001      	add	r0, pc, #4	; (adr r0, 800ce38 <_printf_i+0x40>)
 800ce34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ce38:	0800ce91 	.word	0x0800ce91
 800ce3c:	0800cea5 	.word	0x0800cea5
 800ce40:	0800ce21 	.word	0x0800ce21
 800ce44:	0800ce21 	.word	0x0800ce21
 800ce48:	0800ce21 	.word	0x0800ce21
 800ce4c:	0800ce21 	.word	0x0800ce21
 800ce50:	0800cea5 	.word	0x0800cea5
 800ce54:	0800ce21 	.word	0x0800ce21
 800ce58:	0800ce21 	.word	0x0800ce21
 800ce5c:	0800ce21 	.word	0x0800ce21
 800ce60:	0800ce21 	.word	0x0800ce21
 800ce64:	0800cfb1 	.word	0x0800cfb1
 800ce68:	0800ced5 	.word	0x0800ced5
 800ce6c:	0800cf93 	.word	0x0800cf93
 800ce70:	0800ce21 	.word	0x0800ce21
 800ce74:	0800ce21 	.word	0x0800ce21
 800ce78:	0800cfd3 	.word	0x0800cfd3
 800ce7c:	0800ce21 	.word	0x0800ce21
 800ce80:	0800ced5 	.word	0x0800ced5
 800ce84:	0800ce21 	.word	0x0800ce21
 800ce88:	0800ce21 	.word	0x0800ce21
 800ce8c:	0800cf9b 	.word	0x0800cf9b
 800ce90:	680b      	ldr	r3, [r1, #0]
 800ce92:	1d1a      	adds	r2, r3, #4
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	600a      	str	r2, [r1, #0]
 800ce98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cea0:	2301      	movs	r3, #1
 800cea2:	e0a3      	b.n	800cfec <_printf_i+0x1f4>
 800cea4:	6825      	ldr	r5, [r4, #0]
 800cea6:	6808      	ldr	r0, [r1, #0]
 800cea8:	062e      	lsls	r6, r5, #24
 800ceaa:	f100 0304 	add.w	r3, r0, #4
 800ceae:	d50a      	bpl.n	800cec6 <_printf_i+0xce>
 800ceb0:	6805      	ldr	r5, [r0, #0]
 800ceb2:	600b      	str	r3, [r1, #0]
 800ceb4:	2d00      	cmp	r5, #0
 800ceb6:	da03      	bge.n	800cec0 <_printf_i+0xc8>
 800ceb8:	232d      	movs	r3, #45	; 0x2d
 800ceba:	426d      	negs	r5, r5
 800cebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec0:	485e      	ldr	r0, [pc, #376]	; (800d03c <_printf_i+0x244>)
 800cec2:	230a      	movs	r3, #10
 800cec4:	e019      	b.n	800cefa <_printf_i+0x102>
 800cec6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ceca:	6805      	ldr	r5, [r0, #0]
 800cecc:	600b      	str	r3, [r1, #0]
 800cece:	bf18      	it	ne
 800ced0:	b22d      	sxthne	r5, r5
 800ced2:	e7ef      	b.n	800ceb4 <_printf_i+0xbc>
 800ced4:	680b      	ldr	r3, [r1, #0]
 800ced6:	6825      	ldr	r5, [r4, #0]
 800ced8:	1d18      	adds	r0, r3, #4
 800ceda:	6008      	str	r0, [r1, #0]
 800cedc:	0628      	lsls	r0, r5, #24
 800cede:	d501      	bpl.n	800cee4 <_printf_i+0xec>
 800cee0:	681d      	ldr	r5, [r3, #0]
 800cee2:	e002      	b.n	800ceea <_printf_i+0xf2>
 800cee4:	0669      	lsls	r1, r5, #25
 800cee6:	d5fb      	bpl.n	800cee0 <_printf_i+0xe8>
 800cee8:	881d      	ldrh	r5, [r3, #0]
 800ceea:	4854      	ldr	r0, [pc, #336]	; (800d03c <_printf_i+0x244>)
 800ceec:	2f6f      	cmp	r7, #111	; 0x6f
 800ceee:	bf0c      	ite	eq
 800cef0:	2308      	moveq	r3, #8
 800cef2:	230a      	movne	r3, #10
 800cef4:	2100      	movs	r1, #0
 800cef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cefa:	6866      	ldr	r6, [r4, #4]
 800cefc:	60a6      	str	r6, [r4, #8]
 800cefe:	2e00      	cmp	r6, #0
 800cf00:	bfa2      	ittt	ge
 800cf02:	6821      	ldrge	r1, [r4, #0]
 800cf04:	f021 0104 	bicge.w	r1, r1, #4
 800cf08:	6021      	strge	r1, [r4, #0]
 800cf0a:	b90d      	cbnz	r5, 800cf10 <_printf_i+0x118>
 800cf0c:	2e00      	cmp	r6, #0
 800cf0e:	d04d      	beq.n	800cfac <_printf_i+0x1b4>
 800cf10:	4616      	mov	r6, r2
 800cf12:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf16:	fb03 5711 	mls	r7, r3, r1, r5
 800cf1a:	5dc7      	ldrb	r7, [r0, r7]
 800cf1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf20:	462f      	mov	r7, r5
 800cf22:	42bb      	cmp	r3, r7
 800cf24:	460d      	mov	r5, r1
 800cf26:	d9f4      	bls.n	800cf12 <_printf_i+0x11a>
 800cf28:	2b08      	cmp	r3, #8
 800cf2a:	d10b      	bne.n	800cf44 <_printf_i+0x14c>
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	07df      	lsls	r7, r3, #31
 800cf30:	d508      	bpl.n	800cf44 <_printf_i+0x14c>
 800cf32:	6923      	ldr	r3, [r4, #16]
 800cf34:	6861      	ldr	r1, [r4, #4]
 800cf36:	4299      	cmp	r1, r3
 800cf38:	bfde      	ittt	le
 800cf3a:	2330      	movle	r3, #48	; 0x30
 800cf3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf44:	1b92      	subs	r2, r2, r6
 800cf46:	6122      	str	r2, [r4, #16]
 800cf48:	f8cd a000 	str.w	sl, [sp]
 800cf4c:	464b      	mov	r3, r9
 800cf4e:	aa03      	add	r2, sp, #12
 800cf50:	4621      	mov	r1, r4
 800cf52:	4640      	mov	r0, r8
 800cf54:	f7ff fee2 	bl	800cd1c <_printf_common>
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d14c      	bne.n	800cff6 <_printf_i+0x1fe>
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf60:	b004      	add	sp, #16
 800cf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf66:	4835      	ldr	r0, [pc, #212]	; (800d03c <_printf_i+0x244>)
 800cf68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	680e      	ldr	r6, [r1, #0]
 800cf70:	061f      	lsls	r7, r3, #24
 800cf72:	f856 5b04 	ldr.w	r5, [r6], #4
 800cf76:	600e      	str	r6, [r1, #0]
 800cf78:	d514      	bpl.n	800cfa4 <_printf_i+0x1ac>
 800cf7a:	07d9      	lsls	r1, r3, #31
 800cf7c:	bf44      	itt	mi
 800cf7e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf82:	6023      	strmi	r3, [r4, #0]
 800cf84:	b91d      	cbnz	r5, 800cf8e <_printf_i+0x196>
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	f023 0320 	bic.w	r3, r3, #32
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	2310      	movs	r3, #16
 800cf90:	e7b0      	b.n	800cef4 <_printf_i+0xfc>
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	f043 0320 	orr.w	r3, r3, #32
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	2378      	movs	r3, #120	; 0x78
 800cf9c:	4828      	ldr	r0, [pc, #160]	; (800d040 <_printf_i+0x248>)
 800cf9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfa2:	e7e3      	b.n	800cf6c <_printf_i+0x174>
 800cfa4:	065e      	lsls	r6, r3, #25
 800cfa6:	bf48      	it	mi
 800cfa8:	b2ad      	uxthmi	r5, r5
 800cfaa:	e7e6      	b.n	800cf7a <_printf_i+0x182>
 800cfac:	4616      	mov	r6, r2
 800cfae:	e7bb      	b.n	800cf28 <_printf_i+0x130>
 800cfb0:	680b      	ldr	r3, [r1, #0]
 800cfb2:	6826      	ldr	r6, [r4, #0]
 800cfb4:	6960      	ldr	r0, [r4, #20]
 800cfb6:	1d1d      	adds	r5, r3, #4
 800cfb8:	600d      	str	r5, [r1, #0]
 800cfba:	0635      	lsls	r5, r6, #24
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	d501      	bpl.n	800cfc4 <_printf_i+0x1cc>
 800cfc0:	6018      	str	r0, [r3, #0]
 800cfc2:	e002      	b.n	800cfca <_printf_i+0x1d2>
 800cfc4:	0671      	lsls	r1, r6, #25
 800cfc6:	d5fb      	bpl.n	800cfc0 <_printf_i+0x1c8>
 800cfc8:	8018      	strh	r0, [r3, #0]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	6123      	str	r3, [r4, #16]
 800cfce:	4616      	mov	r6, r2
 800cfd0:	e7ba      	b.n	800cf48 <_printf_i+0x150>
 800cfd2:	680b      	ldr	r3, [r1, #0]
 800cfd4:	1d1a      	adds	r2, r3, #4
 800cfd6:	600a      	str	r2, [r1, #0]
 800cfd8:	681e      	ldr	r6, [r3, #0]
 800cfda:	6862      	ldr	r2, [r4, #4]
 800cfdc:	2100      	movs	r1, #0
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7f3 f8fe 	bl	80001e0 <memchr>
 800cfe4:	b108      	cbz	r0, 800cfea <_printf_i+0x1f2>
 800cfe6:	1b80      	subs	r0, r0, r6
 800cfe8:	6060      	str	r0, [r4, #4]
 800cfea:	6863      	ldr	r3, [r4, #4]
 800cfec:	6123      	str	r3, [r4, #16]
 800cfee:	2300      	movs	r3, #0
 800cff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cff4:	e7a8      	b.n	800cf48 <_printf_i+0x150>
 800cff6:	6923      	ldr	r3, [r4, #16]
 800cff8:	4632      	mov	r2, r6
 800cffa:	4649      	mov	r1, r9
 800cffc:	4640      	mov	r0, r8
 800cffe:	47d0      	blx	sl
 800d000:	3001      	adds	r0, #1
 800d002:	d0ab      	beq.n	800cf5c <_printf_i+0x164>
 800d004:	6823      	ldr	r3, [r4, #0]
 800d006:	079b      	lsls	r3, r3, #30
 800d008:	d413      	bmi.n	800d032 <_printf_i+0x23a>
 800d00a:	68e0      	ldr	r0, [r4, #12]
 800d00c:	9b03      	ldr	r3, [sp, #12]
 800d00e:	4298      	cmp	r0, r3
 800d010:	bfb8      	it	lt
 800d012:	4618      	movlt	r0, r3
 800d014:	e7a4      	b.n	800cf60 <_printf_i+0x168>
 800d016:	2301      	movs	r3, #1
 800d018:	4632      	mov	r2, r6
 800d01a:	4649      	mov	r1, r9
 800d01c:	4640      	mov	r0, r8
 800d01e:	47d0      	blx	sl
 800d020:	3001      	adds	r0, #1
 800d022:	d09b      	beq.n	800cf5c <_printf_i+0x164>
 800d024:	3501      	adds	r5, #1
 800d026:	68e3      	ldr	r3, [r4, #12]
 800d028:	9903      	ldr	r1, [sp, #12]
 800d02a:	1a5b      	subs	r3, r3, r1
 800d02c:	42ab      	cmp	r3, r5
 800d02e:	dcf2      	bgt.n	800d016 <_printf_i+0x21e>
 800d030:	e7eb      	b.n	800d00a <_printf_i+0x212>
 800d032:	2500      	movs	r5, #0
 800d034:	f104 0619 	add.w	r6, r4, #25
 800d038:	e7f5      	b.n	800d026 <_printf_i+0x22e>
 800d03a:	bf00      	nop
 800d03c:	080e9e48 	.word	0x080e9e48
 800d040:	080e9e59 	.word	0x080e9e59

0800d044 <_sbrk_r>:
 800d044:	b538      	push	{r3, r4, r5, lr}
 800d046:	4d06      	ldr	r5, [pc, #24]	; (800d060 <_sbrk_r+0x1c>)
 800d048:	2300      	movs	r3, #0
 800d04a:	4604      	mov	r4, r0
 800d04c:	4608      	mov	r0, r1
 800d04e:	602b      	str	r3, [r5, #0]
 800d050:	f7f8 fbb8 	bl	80057c4 <_sbrk>
 800d054:	1c43      	adds	r3, r0, #1
 800d056:	d102      	bne.n	800d05e <_sbrk_r+0x1a>
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	b103      	cbz	r3, 800d05e <_sbrk_r+0x1a>
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	bd38      	pop	{r3, r4, r5, pc}
 800d060:	200005e0 	.word	0x200005e0

0800d064 <__swbuf_r>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	460e      	mov	r6, r1
 800d068:	4614      	mov	r4, r2
 800d06a:	4605      	mov	r5, r0
 800d06c:	b118      	cbz	r0, 800d076 <__swbuf_r+0x12>
 800d06e:	6983      	ldr	r3, [r0, #24]
 800d070:	b90b      	cbnz	r3, 800d076 <__swbuf_r+0x12>
 800d072:	f000 f9d9 	bl	800d428 <__sinit>
 800d076:	4b21      	ldr	r3, [pc, #132]	; (800d0fc <__swbuf_r+0x98>)
 800d078:	429c      	cmp	r4, r3
 800d07a:	d12b      	bne.n	800d0d4 <__swbuf_r+0x70>
 800d07c:	686c      	ldr	r4, [r5, #4]
 800d07e:	69a3      	ldr	r3, [r4, #24]
 800d080:	60a3      	str	r3, [r4, #8]
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	071a      	lsls	r2, r3, #28
 800d086:	d52f      	bpl.n	800d0e8 <__swbuf_r+0x84>
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	b36b      	cbz	r3, 800d0e8 <__swbuf_r+0x84>
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	6820      	ldr	r0, [r4, #0]
 800d090:	1ac0      	subs	r0, r0, r3
 800d092:	6963      	ldr	r3, [r4, #20]
 800d094:	b2f6      	uxtb	r6, r6
 800d096:	4283      	cmp	r3, r0
 800d098:	4637      	mov	r7, r6
 800d09a:	dc04      	bgt.n	800d0a6 <__swbuf_r+0x42>
 800d09c:	4621      	mov	r1, r4
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f000 f92e 	bl	800d300 <_fflush_r>
 800d0a4:	bb30      	cbnz	r0, 800d0f4 <__swbuf_r+0x90>
 800d0a6:	68a3      	ldr	r3, [r4, #8]
 800d0a8:	3b01      	subs	r3, #1
 800d0aa:	60a3      	str	r3, [r4, #8]
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	1c5a      	adds	r2, r3, #1
 800d0b0:	6022      	str	r2, [r4, #0]
 800d0b2:	701e      	strb	r6, [r3, #0]
 800d0b4:	6963      	ldr	r3, [r4, #20]
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	4283      	cmp	r3, r0
 800d0ba:	d004      	beq.n	800d0c6 <__swbuf_r+0x62>
 800d0bc:	89a3      	ldrh	r3, [r4, #12]
 800d0be:	07db      	lsls	r3, r3, #31
 800d0c0:	d506      	bpl.n	800d0d0 <__swbuf_r+0x6c>
 800d0c2:	2e0a      	cmp	r6, #10
 800d0c4:	d104      	bne.n	800d0d0 <__swbuf_r+0x6c>
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	f000 f919 	bl	800d300 <_fflush_r>
 800d0ce:	b988      	cbnz	r0, 800d0f4 <__swbuf_r+0x90>
 800d0d0:	4638      	mov	r0, r7
 800d0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0d4:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <__swbuf_r+0x9c>)
 800d0d6:	429c      	cmp	r4, r3
 800d0d8:	d101      	bne.n	800d0de <__swbuf_r+0x7a>
 800d0da:	68ac      	ldr	r4, [r5, #8]
 800d0dc:	e7cf      	b.n	800d07e <__swbuf_r+0x1a>
 800d0de:	4b09      	ldr	r3, [pc, #36]	; (800d104 <__swbuf_r+0xa0>)
 800d0e0:	429c      	cmp	r4, r3
 800d0e2:	bf08      	it	eq
 800d0e4:	68ec      	ldreq	r4, [r5, #12]
 800d0e6:	e7ca      	b.n	800d07e <__swbuf_r+0x1a>
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	f000 f80c 	bl	800d108 <__swsetup_r>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d0cb      	beq.n	800d08c <__swbuf_r+0x28>
 800d0f4:	f04f 37ff 	mov.w	r7, #4294967295
 800d0f8:	e7ea      	b.n	800d0d0 <__swbuf_r+0x6c>
 800d0fa:	bf00      	nop
 800d0fc:	080e9e8c 	.word	0x080e9e8c
 800d100:	080e9eac 	.word	0x080e9eac
 800d104:	080e9e6c 	.word	0x080e9e6c

0800d108 <__swsetup_r>:
 800d108:	4b32      	ldr	r3, [pc, #200]	; (800d1d4 <__swsetup_r+0xcc>)
 800d10a:	b570      	push	{r4, r5, r6, lr}
 800d10c:	681d      	ldr	r5, [r3, #0]
 800d10e:	4606      	mov	r6, r0
 800d110:	460c      	mov	r4, r1
 800d112:	b125      	cbz	r5, 800d11e <__swsetup_r+0x16>
 800d114:	69ab      	ldr	r3, [r5, #24]
 800d116:	b913      	cbnz	r3, 800d11e <__swsetup_r+0x16>
 800d118:	4628      	mov	r0, r5
 800d11a:	f000 f985 	bl	800d428 <__sinit>
 800d11e:	4b2e      	ldr	r3, [pc, #184]	; (800d1d8 <__swsetup_r+0xd0>)
 800d120:	429c      	cmp	r4, r3
 800d122:	d10f      	bne.n	800d144 <__swsetup_r+0x3c>
 800d124:	686c      	ldr	r4, [r5, #4]
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d12c:	0719      	lsls	r1, r3, #28
 800d12e:	d42c      	bmi.n	800d18a <__swsetup_r+0x82>
 800d130:	06dd      	lsls	r5, r3, #27
 800d132:	d411      	bmi.n	800d158 <__swsetup_r+0x50>
 800d134:	2309      	movs	r3, #9
 800d136:	6033      	str	r3, [r6, #0]
 800d138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d13c:	81a3      	strh	r3, [r4, #12]
 800d13e:	f04f 30ff 	mov.w	r0, #4294967295
 800d142:	e03e      	b.n	800d1c2 <__swsetup_r+0xba>
 800d144:	4b25      	ldr	r3, [pc, #148]	; (800d1dc <__swsetup_r+0xd4>)
 800d146:	429c      	cmp	r4, r3
 800d148:	d101      	bne.n	800d14e <__swsetup_r+0x46>
 800d14a:	68ac      	ldr	r4, [r5, #8]
 800d14c:	e7eb      	b.n	800d126 <__swsetup_r+0x1e>
 800d14e:	4b24      	ldr	r3, [pc, #144]	; (800d1e0 <__swsetup_r+0xd8>)
 800d150:	429c      	cmp	r4, r3
 800d152:	bf08      	it	eq
 800d154:	68ec      	ldreq	r4, [r5, #12]
 800d156:	e7e6      	b.n	800d126 <__swsetup_r+0x1e>
 800d158:	0758      	lsls	r0, r3, #29
 800d15a:	d512      	bpl.n	800d182 <__swsetup_r+0x7a>
 800d15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d15e:	b141      	cbz	r1, 800d172 <__swsetup_r+0x6a>
 800d160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d164:	4299      	cmp	r1, r3
 800d166:	d002      	beq.n	800d16e <__swsetup_r+0x66>
 800d168:	4630      	mov	r0, r6
 800d16a:	f7ff fbd3 	bl	800c914 <_free_r>
 800d16e:	2300      	movs	r3, #0
 800d170:	6363      	str	r3, [r4, #52]	; 0x34
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d178:	81a3      	strh	r3, [r4, #12]
 800d17a:	2300      	movs	r3, #0
 800d17c:	6063      	str	r3, [r4, #4]
 800d17e:	6923      	ldr	r3, [r4, #16]
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	89a3      	ldrh	r3, [r4, #12]
 800d184:	f043 0308 	orr.w	r3, r3, #8
 800d188:	81a3      	strh	r3, [r4, #12]
 800d18a:	6923      	ldr	r3, [r4, #16]
 800d18c:	b94b      	cbnz	r3, 800d1a2 <__swsetup_r+0x9a>
 800d18e:	89a3      	ldrh	r3, [r4, #12]
 800d190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d198:	d003      	beq.n	800d1a2 <__swsetup_r+0x9a>
 800d19a:	4621      	mov	r1, r4
 800d19c:	4630      	mov	r0, r6
 800d19e:	f000 fa07 	bl	800d5b0 <__smakebuf_r>
 800d1a2:	89a0      	ldrh	r0, [r4, #12]
 800d1a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1a8:	f010 0301 	ands.w	r3, r0, #1
 800d1ac:	d00a      	beq.n	800d1c4 <__swsetup_r+0xbc>
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	60a3      	str	r3, [r4, #8]
 800d1b2:	6963      	ldr	r3, [r4, #20]
 800d1b4:	425b      	negs	r3, r3
 800d1b6:	61a3      	str	r3, [r4, #24]
 800d1b8:	6923      	ldr	r3, [r4, #16]
 800d1ba:	b943      	cbnz	r3, 800d1ce <__swsetup_r+0xc6>
 800d1bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1c0:	d1ba      	bne.n	800d138 <__swsetup_r+0x30>
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
 800d1c4:	0781      	lsls	r1, r0, #30
 800d1c6:	bf58      	it	pl
 800d1c8:	6963      	ldrpl	r3, [r4, #20]
 800d1ca:	60a3      	str	r3, [r4, #8]
 800d1cc:	e7f4      	b.n	800d1b8 <__swsetup_r+0xb0>
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	e7f7      	b.n	800d1c2 <__swsetup_r+0xba>
 800d1d2:	bf00      	nop
 800d1d4:	200000ac 	.word	0x200000ac
 800d1d8:	080e9e8c 	.word	0x080e9e8c
 800d1dc:	080e9eac 	.word	0x080e9eac
 800d1e0:	080e9e6c 	.word	0x080e9e6c

0800d1e4 <abort>:
 800d1e4:	b508      	push	{r3, lr}
 800d1e6:	2006      	movs	r0, #6
 800d1e8:	f000 fa56 	bl	800d698 <raise>
 800d1ec:	2001      	movs	r0, #1
 800d1ee:	f7f8 fa71 	bl	80056d4 <_exit>
	...

0800d1f4 <__sflush_r>:
 800d1f4:	898a      	ldrh	r2, [r1, #12]
 800d1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	0710      	lsls	r0, r2, #28
 800d1fe:	460c      	mov	r4, r1
 800d200:	d458      	bmi.n	800d2b4 <__sflush_r+0xc0>
 800d202:	684b      	ldr	r3, [r1, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	dc05      	bgt.n	800d214 <__sflush_r+0x20>
 800d208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dc02      	bgt.n	800d214 <__sflush_r+0x20>
 800d20e:	2000      	movs	r0, #0
 800d210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d216:	2e00      	cmp	r6, #0
 800d218:	d0f9      	beq.n	800d20e <__sflush_r+0x1a>
 800d21a:	2300      	movs	r3, #0
 800d21c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d220:	682f      	ldr	r7, [r5, #0]
 800d222:	602b      	str	r3, [r5, #0]
 800d224:	d032      	beq.n	800d28c <__sflush_r+0x98>
 800d226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	075a      	lsls	r2, r3, #29
 800d22c:	d505      	bpl.n	800d23a <__sflush_r+0x46>
 800d22e:	6863      	ldr	r3, [r4, #4]
 800d230:	1ac0      	subs	r0, r0, r3
 800d232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d234:	b10b      	cbz	r3, 800d23a <__sflush_r+0x46>
 800d236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d238:	1ac0      	subs	r0, r0, r3
 800d23a:	2300      	movs	r3, #0
 800d23c:	4602      	mov	r2, r0
 800d23e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d240:	6a21      	ldr	r1, [r4, #32]
 800d242:	4628      	mov	r0, r5
 800d244:	47b0      	blx	r6
 800d246:	1c43      	adds	r3, r0, #1
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	d106      	bne.n	800d25a <__sflush_r+0x66>
 800d24c:	6829      	ldr	r1, [r5, #0]
 800d24e:	291d      	cmp	r1, #29
 800d250:	d82c      	bhi.n	800d2ac <__sflush_r+0xb8>
 800d252:	4a2a      	ldr	r2, [pc, #168]	; (800d2fc <__sflush_r+0x108>)
 800d254:	40ca      	lsrs	r2, r1
 800d256:	07d6      	lsls	r6, r2, #31
 800d258:	d528      	bpl.n	800d2ac <__sflush_r+0xb8>
 800d25a:	2200      	movs	r2, #0
 800d25c:	6062      	str	r2, [r4, #4]
 800d25e:	04d9      	lsls	r1, r3, #19
 800d260:	6922      	ldr	r2, [r4, #16]
 800d262:	6022      	str	r2, [r4, #0]
 800d264:	d504      	bpl.n	800d270 <__sflush_r+0x7c>
 800d266:	1c42      	adds	r2, r0, #1
 800d268:	d101      	bne.n	800d26e <__sflush_r+0x7a>
 800d26a:	682b      	ldr	r3, [r5, #0]
 800d26c:	b903      	cbnz	r3, 800d270 <__sflush_r+0x7c>
 800d26e:	6560      	str	r0, [r4, #84]	; 0x54
 800d270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d272:	602f      	str	r7, [r5, #0]
 800d274:	2900      	cmp	r1, #0
 800d276:	d0ca      	beq.n	800d20e <__sflush_r+0x1a>
 800d278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d27c:	4299      	cmp	r1, r3
 800d27e:	d002      	beq.n	800d286 <__sflush_r+0x92>
 800d280:	4628      	mov	r0, r5
 800d282:	f7ff fb47 	bl	800c914 <_free_r>
 800d286:	2000      	movs	r0, #0
 800d288:	6360      	str	r0, [r4, #52]	; 0x34
 800d28a:	e7c1      	b.n	800d210 <__sflush_r+0x1c>
 800d28c:	6a21      	ldr	r1, [r4, #32]
 800d28e:	2301      	movs	r3, #1
 800d290:	4628      	mov	r0, r5
 800d292:	47b0      	blx	r6
 800d294:	1c41      	adds	r1, r0, #1
 800d296:	d1c7      	bne.n	800d228 <__sflush_r+0x34>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d0c4      	beq.n	800d228 <__sflush_r+0x34>
 800d29e:	2b1d      	cmp	r3, #29
 800d2a0:	d001      	beq.n	800d2a6 <__sflush_r+0xb2>
 800d2a2:	2b16      	cmp	r3, #22
 800d2a4:	d101      	bne.n	800d2aa <__sflush_r+0xb6>
 800d2a6:	602f      	str	r7, [r5, #0]
 800d2a8:	e7b1      	b.n	800d20e <__sflush_r+0x1a>
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b0:	81a3      	strh	r3, [r4, #12]
 800d2b2:	e7ad      	b.n	800d210 <__sflush_r+0x1c>
 800d2b4:	690f      	ldr	r7, [r1, #16]
 800d2b6:	2f00      	cmp	r7, #0
 800d2b8:	d0a9      	beq.n	800d20e <__sflush_r+0x1a>
 800d2ba:	0793      	lsls	r3, r2, #30
 800d2bc:	680e      	ldr	r6, [r1, #0]
 800d2be:	bf08      	it	eq
 800d2c0:	694b      	ldreq	r3, [r1, #20]
 800d2c2:	600f      	str	r7, [r1, #0]
 800d2c4:	bf18      	it	ne
 800d2c6:	2300      	movne	r3, #0
 800d2c8:	eba6 0807 	sub.w	r8, r6, r7
 800d2cc:	608b      	str	r3, [r1, #8]
 800d2ce:	f1b8 0f00 	cmp.w	r8, #0
 800d2d2:	dd9c      	ble.n	800d20e <__sflush_r+0x1a>
 800d2d4:	6a21      	ldr	r1, [r4, #32]
 800d2d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2d8:	4643      	mov	r3, r8
 800d2da:	463a      	mov	r2, r7
 800d2dc:	4628      	mov	r0, r5
 800d2de:	47b0      	blx	r6
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	dc06      	bgt.n	800d2f2 <__sflush_r+0xfe>
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ea:	81a3      	strh	r3, [r4, #12]
 800d2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f0:	e78e      	b.n	800d210 <__sflush_r+0x1c>
 800d2f2:	4407      	add	r7, r0
 800d2f4:	eba8 0800 	sub.w	r8, r8, r0
 800d2f8:	e7e9      	b.n	800d2ce <__sflush_r+0xda>
 800d2fa:	bf00      	nop
 800d2fc:	20400001 	.word	0x20400001

0800d300 <_fflush_r>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	690b      	ldr	r3, [r1, #16]
 800d304:	4605      	mov	r5, r0
 800d306:	460c      	mov	r4, r1
 800d308:	b913      	cbnz	r3, 800d310 <_fflush_r+0x10>
 800d30a:	2500      	movs	r5, #0
 800d30c:	4628      	mov	r0, r5
 800d30e:	bd38      	pop	{r3, r4, r5, pc}
 800d310:	b118      	cbz	r0, 800d31a <_fflush_r+0x1a>
 800d312:	6983      	ldr	r3, [r0, #24]
 800d314:	b90b      	cbnz	r3, 800d31a <_fflush_r+0x1a>
 800d316:	f000 f887 	bl	800d428 <__sinit>
 800d31a:	4b14      	ldr	r3, [pc, #80]	; (800d36c <_fflush_r+0x6c>)
 800d31c:	429c      	cmp	r4, r3
 800d31e:	d11b      	bne.n	800d358 <_fflush_r+0x58>
 800d320:	686c      	ldr	r4, [r5, #4]
 800d322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0ef      	beq.n	800d30a <_fflush_r+0xa>
 800d32a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d32c:	07d0      	lsls	r0, r2, #31
 800d32e:	d404      	bmi.n	800d33a <_fflush_r+0x3a>
 800d330:	0599      	lsls	r1, r3, #22
 800d332:	d402      	bmi.n	800d33a <_fflush_r+0x3a>
 800d334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d336:	f000 f915 	bl	800d564 <__retarget_lock_acquire_recursive>
 800d33a:	4628      	mov	r0, r5
 800d33c:	4621      	mov	r1, r4
 800d33e:	f7ff ff59 	bl	800d1f4 <__sflush_r>
 800d342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d344:	07da      	lsls	r2, r3, #31
 800d346:	4605      	mov	r5, r0
 800d348:	d4e0      	bmi.n	800d30c <_fflush_r+0xc>
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	059b      	lsls	r3, r3, #22
 800d34e:	d4dd      	bmi.n	800d30c <_fflush_r+0xc>
 800d350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d352:	f000 f908 	bl	800d566 <__retarget_lock_release_recursive>
 800d356:	e7d9      	b.n	800d30c <_fflush_r+0xc>
 800d358:	4b05      	ldr	r3, [pc, #20]	; (800d370 <_fflush_r+0x70>)
 800d35a:	429c      	cmp	r4, r3
 800d35c:	d101      	bne.n	800d362 <_fflush_r+0x62>
 800d35e:	68ac      	ldr	r4, [r5, #8]
 800d360:	e7df      	b.n	800d322 <_fflush_r+0x22>
 800d362:	4b04      	ldr	r3, [pc, #16]	; (800d374 <_fflush_r+0x74>)
 800d364:	429c      	cmp	r4, r3
 800d366:	bf08      	it	eq
 800d368:	68ec      	ldreq	r4, [r5, #12]
 800d36a:	e7da      	b.n	800d322 <_fflush_r+0x22>
 800d36c:	080e9e8c 	.word	0x080e9e8c
 800d370:	080e9eac 	.word	0x080e9eac
 800d374:	080e9e6c 	.word	0x080e9e6c

0800d378 <std>:
 800d378:	2300      	movs	r3, #0
 800d37a:	b510      	push	{r4, lr}
 800d37c:	4604      	mov	r4, r0
 800d37e:	e9c0 3300 	strd	r3, r3, [r0]
 800d382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d386:	6083      	str	r3, [r0, #8]
 800d388:	8181      	strh	r1, [r0, #12]
 800d38a:	6643      	str	r3, [r0, #100]	; 0x64
 800d38c:	81c2      	strh	r2, [r0, #14]
 800d38e:	6183      	str	r3, [r0, #24]
 800d390:	4619      	mov	r1, r3
 800d392:	2208      	movs	r2, #8
 800d394:	305c      	adds	r0, #92	; 0x5c
 800d396:	f7ff f9f3 	bl	800c780 <memset>
 800d39a:	4b05      	ldr	r3, [pc, #20]	; (800d3b0 <std+0x38>)
 800d39c:	6263      	str	r3, [r4, #36]	; 0x24
 800d39e:	4b05      	ldr	r3, [pc, #20]	; (800d3b4 <std+0x3c>)
 800d3a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3a2:	4b05      	ldr	r3, [pc, #20]	; (800d3b8 <std+0x40>)
 800d3a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3a6:	4b05      	ldr	r3, [pc, #20]	; (800d3bc <std+0x44>)
 800d3a8:	6224      	str	r4, [r4, #32]
 800d3aa:	6323      	str	r3, [r4, #48]	; 0x30
 800d3ac:	bd10      	pop	{r4, pc}
 800d3ae:	bf00      	nop
 800d3b0:	0800d6d1 	.word	0x0800d6d1
 800d3b4:	0800d6f3 	.word	0x0800d6f3
 800d3b8:	0800d72b 	.word	0x0800d72b
 800d3bc:	0800d74f 	.word	0x0800d74f

0800d3c0 <_cleanup_r>:
 800d3c0:	4901      	ldr	r1, [pc, #4]	; (800d3c8 <_cleanup_r+0x8>)
 800d3c2:	f000 b8af 	b.w	800d524 <_fwalk_reent>
 800d3c6:	bf00      	nop
 800d3c8:	0800d301 	.word	0x0800d301

0800d3cc <__sfmoreglue>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	1e4a      	subs	r2, r1, #1
 800d3d0:	2568      	movs	r5, #104	; 0x68
 800d3d2:	4355      	muls	r5, r2
 800d3d4:	460e      	mov	r6, r1
 800d3d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d3da:	f7ff faeb 	bl	800c9b4 <_malloc_r>
 800d3de:	4604      	mov	r4, r0
 800d3e0:	b140      	cbz	r0, 800d3f4 <__sfmoreglue+0x28>
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	e9c0 1600 	strd	r1, r6, [r0]
 800d3e8:	300c      	adds	r0, #12
 800d3ea:	60a0      	str	r0, [r4, #8]
 800d3ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3f0:	f7ff f9c6 	bl	800c780 <memset>
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}

0800d3f8 <__sfp_lock_acquire>:
 800d3f8:	4801      	ldr	r0, [pc, #4]	; (800d400 <__sfp_lock_acquire+0x8>)
 800d3fa:	f000 b8b3 	b.w	800d564 <__retarget_lock_acquire_recursive>
 800d3fe:	bf00      	nop
 800d400:	200005dc 	.word	0x200005dc

0800d404 <__sfp_lock_release>:
 800d404:	4801      	ldr	r0, [pc, #4]	; (800d40c <__sfp_lock_release+0x8>)
 800d406:	f000 b8ae 	b.w	800d566 <__retarget_lock_release_recursive>
 800d40a:	bf00      	nop
 800d40c:	200005dc 	.word	0x200005dc

0800d410 <__sinit_lock_acquire>:
 800d410:	4801      	ldr	r0, [pc, #4]	; (800d418 <__sinit_lock_acquire+0x8>)
 800d412:	f000 b8a7 	b.w	800d564 <__retarget_lock_acquire_recursive>
 800d416:	bf00      	nop
 800d418:	200005d7 	.word	0x200005d7

0800d41c <__sinit_lock_release>:
 800d41c:	4801      	ldr	r0, [pc, #4]	; (800d424 <__sinit_lock_release+0x8>)
 800d41e:	f000 b8a2 	b.w	800d566 <__retarget_lock_release_recursive>
 800d422:	bf00      	nop
 800d424:	200005d7 	.word	0x200005d7

0800d428 <__sinit>:
 800d428:	b510      	push	{r4, lr}
 800d42a:	4604      	mov	r4, r0
 800d42c:	f7ff fff0 	bl	800d410 <__sinit_lock_acquire>
 800d430:	69a3      	ldr	r3, [r4, #24]
 800d432:	b11b      	cbz	r3, 800d43c <__sinit+0x14>
 800d434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d438:	f7ff bff0 	b.w	800d41c <__sinit_lock_release>
 800d43c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d440:	6523      	str	r3, [r4, #80]	; 0x50
 800d442:	4b13      	ldr	r3, [pc, #76]	; (800d490 <__sinit+0x68>)
 800d444:	4a13      	ldr	r2, [pc, #76]	; (800d494 <__sinit+0x6c>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	62a2      	str	r2, [r4, #40]	; 0x28
 800d44a:	42a3      	cmp	r3, r4
 800d44c:	bf04      	itt	eq
 800d44e:	2301      	moveq	r3, #1
 800d450:	61a3      	streq	r3, [r4, #24]
 800d452:	4620      	mov	r0, r4
 800d454:	f000 f820 	bl	800d498 <__sfp>
 800d458:	6060      	str	r0, [r4, #4]
 800d45a:	4620      	mov	r0, r4
 800d45c:	f000 f81c 	bl	800d498 <__sfp>
 800d460:	60a0      	str	r0, [r4, #8]
 800d462:	4620      	mov	r0, r4
 800d464:	f000 f818 	bl	800d498 <__sfp>
 800d468:	2200      	movs	r2, #0
 800d46a:	60e0      	str	r0, [r4, #12]
 800d46c:	2104      	movs	r1, #4
 800d46e:	6860      	ldr	r0, [r4, #4]
 800d470:	f7ff ff82 	bl	800d378 <std>
 800d474:	68a0      	ldr	r0, [r4, #8]
 800d476:	2201      	movs	r2, #1
 800d478:	2109      	movs	r1, #9
 800d47a:	f7ff ff7d 	bl	800d378 <std>
 800d47e:	68e0      	ldr	r0, [r4, #12]
 800d480:	2202      	movs	r2, #2
 800d482:	2112      	movs	r1, #18
 800d484:	f7ff ff78 	bl	800d378 <std>
 800d488:	2301      	movs	r3, #1
 800d48a:	61a3      	str	r3, [r4, #24]
 800d48c:	e7d2      	b.n	800d434 <__sinit+0xc>
 800d48e:	bf00      	nop
 800d490:	080e9d5c 	.word	0x080e9d5c
 800d494:	0800d3c1 	.word	0x0800d3c1

0800d498 <__sfp>:
 800d498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49a:	4607      	mov	r7, r0
 800d49c:	f7ff ffac 	bl	800d3f8 <__sfp_lock_acquire>
 800d4a0:	4b1e      	ldr	r3, [pc, #120]	; (800d51c <__sfp+0x84>)
 800d4a2:	681e      	ldr	r6, [r3, #0]
 800d4a4:	69b3      	ldr	r3, [r6, #24]
 800d4a6:	b913      	cbnz	r3, 800d4ae <__sfp+0x16>
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f7ff ffbd 	bl	800d428 <__sinit>
 800d4ae:	3648      	adds	r6, #72	; 0x48
 800d4b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	d503      	bpl.n	800d4c0 <__sfp+0x28>
 800d4b8:	6833      	ldr	r3, [r6, #0]
 800d4ba:	b30b      	cbz	r3, 800d500 <__sfp+0x68>
 800d4bc:	6836      	ldr	r6, [r6, #0]
 800d4be:	e7f7      	b.n	800d4b0 <__sfp+0x18>
 800d4c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4c4:	b9d5      	cbnz	r5, 800d4fc <__sfp+0x64>
 800d4c6:	4b16      	ldr	r3, [pc, #88]	; (800d520 <__sfp+0x88>)
 800d4c8:	60e3      	str	r3, [r4, #12]
 800d4ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4ce:	6665      	str	r5, [r4, #100]	; 0x64
 800d4d0:	f000 f847 	bl	800d562 <__retarget_lock_init_recursive>
 800d4d4:	f7ff ff96 	bl	800d404 <__sfp_lock_release>
 800d4d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4e0:	6025      	str	r5, [r4, #0]
 800d4e2:	61a5      	str	r5, [r4, #24]
 800d4e4:	2208      	movs	r2, #8
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4ec:	f7ff f948 	bl	800c780 <memset>
 800d4f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4fc:	3468      	adds	r4, #104	; 0x68
 800d4fe:	e7d9      	b.n	800d4b4 <__sfp+0x1c>
 800d500:	2104      	movs	r1, #4
 800d502:	4638      	mov	r0, r7
 800d504:	f7ff ff62 	bl	800d3cc <__sfmoreglue>
 800d508:	4604      	mov	r4, r0
 800d50a:	6030      	str	r0, [r6, #0]
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d1d5      	bne.n	800d4bc <__sfp+0x24>
 800d510:	f7ff ff78 	bl	800d404 <__sfp_lock_release>
 800d514:	230c      	movs	r3, #12
 800d516:	603b      	str	r3, [r7, #0]
 800d518:	e7ee      	b.n	800d4f8 <__sfp+0x60>
 800d51a:	bf00      	nop
 800d51c:	080e9d5c 	.word	0x080e9d5c
 800d520:	ffff0001 	.word	0xffff0001

0800d524 <_fwalk_reent>:
 800d524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d528:	4606      	mov	r6, r0
 800d52a:	4688      	mov	r8, r1
 800d52c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d530:	2700      	movs	r7, #0
 800d532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d536:	f1b9 0901 	subs.w	r9, r9, #1
 800d53a:	d505      	bpl.n	800d548 <_fwalk_reent+0x24>
 800d53c:	6824      	ldr	r4, [r4, #0]
 800d53e:	2c00      	cmp	r4, #0
 800d540:	d1f7      	bne.n	800d532 <_fwalk_reent+0xe>
 800d542:	4638      	mov	r0, r7
 800d544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d548:	89ab      	ldrh	r3, [r5, #12]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d907      	bls.n	800d55e <_fwalk_reent+0x3a>
 800d54e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d552:	3301      	adds	r3, #1
 800d554:	d003      	beq.n	800d55e <_fwalk_reent+0x3a>
 800d556:	4629      	mov	r1, r5
 800d558:	4630      	mov	r0, r6
 800d55a:	47c0      	blx	r8
 800d55c:	4307      	orrs	r7, r0
 800d55e:	3568      	adds	r5, #104	; 0x68
 800d560:	e7e9      	b.n	800d536 <_fwalk_reent+0x12>

0800d562 <__retarget_lock_init_recursive>:
 800d562:	4770      	bx	lr

0800d564 <__retarget_lock_acquire_recursive>:
 800d564:	4770      	bx	lr

0800d566 <__retarget_lock_release_recursive>:
 800d566:	4770      	bx	lr

0800d568 <__swhatbuf_r>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	460e      	mov	r6, r1
 800d56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d570:	2900      	cmp	r1, #0
 800d572:	b096      	sub	sp, #88	; 0x58
 800d574:	4614      	mov	r4, r2
 800d576:	461d      	mov	r5, r3
 800d578:	da07      	bge.n	800d58a <__swhatbuf_r+0x22>
 800d57a:	2300      	movs	r3, #0
 800d57c:	602b      	str	r3, [r5, #0]
 800d57e:	89b3      	ldrh	r3, [r6, #12]
 800d580:	061a      	lsls	r2, r3, #24
 800d582:	d410      	bmi.n	800d5a6 <__swhatbuf_r+0x3e>
 800d584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d588:	e00e      	b.n	800d5a8 <__swhatbuf_r+0x40>
 800d58a:	466a      	mov	r2, sp
 800d58c:	f000 f906 	bl	800d79c <_fstat_r>
 800d590:	2800      	cmp	r0, #0
 800d592:	dbf2      	blt.n	800d57a <__swhatbuf_r+0x12>
 800d594:	9a01      	ldr	r2, [sp, #4]
 800d596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d59a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d59e:	425a      	negs	r2, r3
 800d5a0:	415a      	adcs	r2, r3
 800d5a2:	602a      	str	r2, [r5, #0]
 800d5a4:	e7ee      	b.n	800d584 <__swhatbuf_r+0x1c>
 800d5a6:	2340      	movs	r3, #64	; 0x40
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	6023      	str	r3, [r4, #0]
 800d5ac:	b016      	add	sp, #88	; 0x58
 800d5ae:	bd70      	pop	{r4, r5, r6, pc}

0800d5b0 <__smakebuf_r>:
 800d5b0:	898b      	ldrh	r3, [r1, #12]
 800d5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5b4:	079d      	lsls	r5, r3, #30
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	d507      	bpl.n	800d5cc <__smakebuf_r+0x1c>
 800d5bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	6123      	str	r3, [r4, #16]
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	6163      	str	r3, [r4, #20]
 800d5c8:	b002      	add	sp, #8
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
 800d5cc:	ab01      	add	r3, sp, #4
 800d5ce:	466a      	mov	r2, sp
 800d5d0:	f7ff ffca 	bl	800d568 <__swhatbuf_r>
 800d5d4:	9900      	ldr	r1, [sp, #0]
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f7ff f9eb 	bl	800c9b4 <_malloc_r>
 800d5de:	b948      	cbnz	r0, 800d5f4 <__smakebuf_r+0x44>
 800d5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e4:	059a      	lsls	r2, r3, #22
 800d5e6:	d4ef      	bmi.n	800d5c8 <__smakebuf_r+0x18>
 800d5e8:	f023 0303 	bic.w	r3, r3, #3
 800d5ec:	f043 0302 	orr.w	r3, r3, #2
 800d5f0:	81a3      	strh	r3, [r4, #12]
 800d5f2:	e7e3      	b.n	800d5bc <__smakebuf_r+0xc>
 800d5f4:	4b0d      	ldr	r3, [pc, #52]	; (800d62c <__smakebuf_r+0x7c>)
 800d5f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	6020      	str	r0, [r4, #0]
 800d5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	9b00      	ldr	r3, [sp, #0]
 800d604:	6163      	str	r3, [r4, #20]
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	6120      	str	r0, [r4, #16]
 800d60a:	b15b      	cbz	r3, 800d624 <__smakebuf_r+0x74>
 800d60c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d610:	4630      	mov	r0, r6
 800d612:	f000 f8d5 	bl	800d7c0 <_isatty_r>
 800d616:	b128      	cbz	r0, 800d624 <__smakebuf_r+0x74>
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	f023 0303 	bic.w	r3, r3, #3
 800d61e:	f043 0301 	orr.w	r3, r3, #1
 800d622:	81a3      	strh	r3, [r4, #12]
 800d624:	89a0      	ldrh	r0, [r4, #12]
 800d626:	4305      	orrs	r5, r0
 800d628:	81a5      	strh	r5, [r4, #12]
 800d62a:	e7cd      	b.n	800d5c8 <__smakebuf_r+0x18>
 800d62c:	0800d3c1 	.word	0x0800d3c1

0800d630 <__malloc_lock>:
 800d630:	4801      	ldr	r0, [pc, #4]	; (800d638 <__malloc_lock+0x8>)
 800d632:	f7ff bf97 	b.w	800d564 <__retarget_lock_acquire_recursive>
 800d636:	bf00      	nop
 800d638:	200005d8 	.word	0x200005d8

0800d63c <__malloc_unlock>:
 800d63c:	4801      	ldr	r0, [pc, #4]	; (800d644 <__malloc_unlock+0x8>)
 800d63e:	f7ff bf92 	b.w	800d566 <__retarget_lock_release_recursive>
 800d642:	bf00      	nop
 800d644:	200005d8 	.word	0x200005d8

0800d648 <_raise_r>:
 800d648:	291f      	cmp	r1, #31
 800d64a:	b538      	push	{r3, r4, r5, lr}
 800d64c:	4604      	mov	r4, r0
 800d64e:	460d      	mov	r5, r1
 800d650:	d904      	bls.n	800d65c <_raise_r+0x14>
 800d652:	2316      	movs	r3, #22
 800d654:	6003      	str	r3, [r0, #0]
 800d656:	f04f 30ff 	mov.w	r0, #4294967295
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d65e:	b112      	cbz	r2, 800d666 <_raise_r+0x1e>
 800d660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d664:	b94b      	cbnz	r3, 800d67a <_raise_r+0x32>
 800d666:	4620      	mov	r0, r4
 800d668:	f000 f830 	bl	800d6cc <_getpid_r>
 800d66c:	462a      	mov	r2, r5
 800d66e:	4601      	mov	r1, r0
 800d670:	4620      	mov	r0, r4
 800d672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d676:	f000 b817 	b.w	800d6a8 <_kill_r>
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d00a      	beq.n	800d694 <_raise_r+0x4c>
 800d67e:	1c59      	adds	r1, r3, #1
 800d680:	d103      	bne.n	800d68a <_raise_r+0x42>
 800d682:	2316      	movs	r3, #22
 800d684:	6003      	str	r3, [r0, #0]
 800d686:	2001      	movs	r0, #1
 800d688:	e7e7      	b.n	800d65a <_raise_r+0x12>
 800d68a:	2400      	movs	r4, #0
 800d68c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d690:	4628      	mov	r0, r5
 800d692:	4798      	blx	r3
 800d694:	2000      	movs	r0, #0
 800d696:	e7e0      	b.n	800d65a <_raise_r+0x12>

0800d698 <raise>:
 800d698:	4b02      	ldr	r3, [pc, #8]	; (800d6a4 <raise+0xc>)
 800d69a:	4601      	mov	r1, r0
 800d69c:	6818      	ldr	r0, [r3, #0]
 800d69e:	f7ff bfd3 	b.w	800d648 <_raise_r>
 800d6a2:	bf00      	nop
 800d6a4:	200000ac 	.word	0x200000ac

0800d6a8 <_kill_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4d07      	ldr	r5, [pc, #28]	; (800d6c8 <_kill_r+0x20>)
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	4608      	mov	r0, r1
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	602b      	str	r3, [r5, #0]
 800d6b6:	f7f7 fffd 	bl	80056b4 <_kill>
 800d6ba:	1c43      	adds	r3, r0, #1
 800d6bc:	d102      	bne.n	800d6c4 <_kill_r+0x1c>
 800d6be:	682b      	ldr	r3, [r5, #0]
 800d6c0:	b103      	cbz	r3, 800d6c4 <_kill_r+0x1c>
 800d6c2:	6023      	str	r3, [r4, #0]
 800d6c4:	bd38      	pop	{r3, r4, r5, pc}
 800d6c6:	bf00      	nop
 800d6c8:	200005e0 	.word	0x200005e0

0800d6cc <_getpid_r>:
 800d6cc:	f7f7 bfea 	b.w	80056a4 <_getpid>

0800d6d0 <__sread>:
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6d8:	f000 f894 	bl	800d804 <_read_r>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	bfab      	itete	ge
 800d6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800d6e4:	181b      	addge	r3, r3, r0
 800d6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6ea:	bfac      	ite	ge
 800d6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800d6ee:	81a3      	strhlt	r3, [r4, #12]
 800d6f0:	bd10      	pop	{r4, pc}

0800d6f2 <__swrite>:
 800d6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f6:	461f      	mov	r7, r3
 800d6f8:	898b      	ldrh	r3, [r1, #12]
 800d6fa:	05db      	lsls	r3, r3, #23
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	460c      	mov	r4, r1
 800d700:	4616      	mov	r6, r2
 800d702:	d505      	bpl.n	800d710 <__swrite+0x1e>
 800d704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d708:	2302      	movs	r3, #2
 800d70a:	2200      	movs	r2, #0
 800d70c:	f000 f868 	bl	800d7e0 <_lseek_r>
 800d710:	89a3      	ldrh	r3, [r4, #12]
 800d712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d71a:	81a3      	strh	r3, [r4, #12]
 800d71c:	4632      	mov	r2, r6
 800d71e:	463b      	mov	r3, r7
 800d720:	4628      	mov	r0, r5
 800d722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d726:	f000 b817 	b.w	800d758 <_write_r>

0800d72a <__sseek>:
 800d72a:	b510      	push	{r4, lr}
 800d72c:	460c      	mov	r4, r1
 800d72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d732:	f000 f855 	bl	800d7e0 <_lseek_r>
 800d736:	1c43      	adds	r3, r0, #1
 800d738:	89a3      	ldrh	r3, [r4, #12]
 800d73a:	bf15      	itete	ne
 800d73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d746:	81a3      	strheq	r3, [r4, #12]
 800d748:	bf18      	it	ne
 800d74a:	81a3      	strhne	r3, [r4, #12]
 800d74c:	bd10      	pop	{r4, pc}

0800d74e <__sclose>:
 800d74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d752:	f000 b813 	b.w	800d77c <_close_r>
	...

0800d758 <_write_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4d07      	ldr	r5, [pc, #28]	; (800d778 <_write_r+0x20>)
 800d75c:	4604      	mov	r4, r0
 800d75e:	4608      	mov	r0, r1
 800d760:	4611      	mov	r1, r2
 800d762:	2200      	movs	r2, #0
 800d764:	602a      	str	r2, [r5, #0]
 800d766:	461a      	mov	r2, r3
 800d768:	f7f7 ffdb 	bl	8005722 <_write>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d102      	bne.n	800d776 <_write_r+0x1e>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	b103      	cbz	r3, 800d776 <_write_r+0x1e>
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	200005e0 	.word	0x200005e0

0800d77c <_close_r>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4d06      	ldr	r5, [pc, #24]	; (800d798 <_close_r+0x1c>)
 800d780:	2300      	movs	r3, #0
 800d782:	4604      	mov	r4, r0
 800d784:	4608      	mov	r0, r1
 800d786:	602b      	str	r3, [r5, #0]
 800d788:	f7f7 ffe7 	bl	800575a <_close>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	d102      	bne.n	800d796 <_close_r+0x1a>
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	b103      	cbz	r3, 800d796 <_close_r+0x1a>
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	bd38      	pop	{r3, r4, r5, pc}
 800d798:	200005e0 	.word	0x200005e0

0800d79c <_fstat_r>:
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	4d07      	ldr	r5, [pc, #28]	; (800d7bc <_fstat_r+0x20>)
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	4608      	mov	r0, r1
 800d7a6:	4611      	mov	r1, r2
 800d7a8:	602b      	str	r3, [r5, #0]
 800d7aa:	f7f7 ffe2 	bl	8005772 <_fstat>
 800d7ae:	1c43      	adds	r3, r0, #1
 800d7b0:	d102      	bne.n	800d7b8 <_fstat_r+0x1c>
 800d7b2:	682b      	ldr	r3, [r5, #0]
 800d7b4:	b103      	cbz	r3, 800d7b8 <_fstat_r+0x1c>
 800d7b6:	6023      	str	r3, [r4, #0]
 800d7b8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ba:	bf00      	nop
 800d7bc:	200005e0 	.word	0x200005e0

0800d7c0 <_isatty_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	4d06      	ldr	r5, [pc, #24]	; (800d7dc <_isatty_r+0x1c>)
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	4608      	mov	r0, r1
 800d7ca:	602b      	str	r3, [r5, #0]
 800d7cc:	f7f7 ffe1 	bl	8005792 <_isatty>
 800d7d0:	1c43      	adds	r3, r0, #1
 800d7d2:	d102      	bne.n	800d7da <_isatty_r+0x1a>
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	b103      	cbz	r3, 800d7da <_isatty_r+0x1a>
 800d7d8:	6023      	str	r3, [r4, #0]
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	200005e0 	.word	0x200005e0

0800d7e0 <_lseek_r>:
 800d7e0:	b538      	push	{r3, r4, r5, lr}
 800d7e2:	4d07      	ldr	r5, [pc, #28]	; (800d800 <_lseek_r+0x20>)
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	4608      	mov	r0, r1
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	602a      	str	r2, [r5, #0]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	f7f7 ffda 	bl	80057a8 <_lseek>
 800d7f4:	1c43      	adds	r3, r0, #1
 800d7f6:	d102      	bne.n	800d7fe <_lseek_r+0x1e>
 800d7f8:	682b      	ldr	r3, [r5, #0]
 800d7fa:	b103      	cbz	r3, 800d7fe <_lseek_r+0x1e>
 800d7fc:	6023      	str	r3, [r4, #0]
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	200005e0 	.word	0x200005e0

0800d804 <_read_r>:
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4d07      	ldr	r5, [pc, #28]	; (800d824 <_read_r+0x20>)
 800d808:	4604      	mov	r4, r0
 800d80a:	4608      	mov	r0, r1
 800d80c:	4611      	mov	r1, r2
 800d80e:	2200      	movs	r2, #0
 800d810:	602a      	str	r2, [r5, #0]
 800d812:	461a      	mov	r2, r3
 800d814:	f7f7 ff68 	bl	80056e8 <_read>
 800d818:	1c43      	adds	r3, r0, #1
 800d81a:	d102      	bne.n	800d822 <_read_r+0x1e>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	b103      	cbz	r3, 800d822 <_read_r+0x1e>
 800d820:	6023      	str	r3, [r4, #0]
 800d822:	bd38      	pop	{r3, r4, r5, pc}
 800d824:	200005e0 	.word	0x200005e0

0800d828 <pow>:
 800d828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d82c:	ec59 8b10 	vmov	r8, r9, d0
 800d830:	ec57 6b11 	vmov	r6, r7, d1
 800d834:	f000 f8dc 	bl	800d9f0 <__ieee754_pow>
 800d838:	4b4e      	ldr	r3, [pc, #312]	; (800d974 <pow+0x14c>)
 800d83a:	f993 3000 	ldrsb.w	r3, [r3]
 800d83e:	3301      	adds	r3, #1
 800d840:	ec55 4b10 	vmov	r4, r5, d0
 800d844:	d015      	beq.n	800d872 <pow+0x4a>
 800d846:	4632      	mov	r2, r6
 800d848:	463b      	mov	r3, r7
 800d84a:	4630      	mov	r0, r6
 800d84c:	4639      	mov	r1, r7
 800d84e:	f7f3 f96d 	bl	8000b2c <__aeabi_dcmpun>
 800d852:	b970      	cbnz	r0, 800d872 <pow+0x4a>
 800d854:	4642      	mov	r2, r8
 800d856:	464b      	mov	r3, r9
 800d858:	4640      	mov	r0, r8
 800d85a:	4649      	mov	r1, r9
 800d85c:	f7f3 f966 	bl	8000b2c <__aeabi_dcmpun>
 800d860:	2200      	movs	r2, #0
 800d862:	2300      	movs	r3, #0
 800d864:	b148      	cbz	r0, 800d87a <pow+0x52>
 800d866:	4630      	mov	r0, r6
 800d868:	4639      	mov	r1, r7
 800d86a:	f7f3 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d86e:	2800      	cmp	r0, #0
 800d870:	d17d      	bne.n	800d96e <pow+0x146>
 800d872:	ec45 4b10 	vmov	d0, r4, r5
 800d876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d87a:	4640      	mov	r0, r8
 800d87c:	4649      	mov	r1, r9
 800d87e:	f7f3 f923 	bl	8000ac8 <__aeabi_dcmpeq>
 800d882:	b1e0      	cbz	r0, 800d8be <pow+0x96>
 800d884:	2200      	movs	r2, #0
 800d886:	2300      	movs	r3, #0
 800d888:	4630      	mov	r0, r6
 800d88a:	4639      	mov	r1, r7
 800d88c:	f7f3 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d890:	2800      	cmp	r0, #0
 800d892:	d16c      	bne.n	800d96e <pow+0x146>
 800d894:	ec47 6b10 	vmov	d0, r6, r7
 800d898:	f000 fe89 	bl	800e5ae <finite>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d0e8      	beq.n	800d872 <pow+0x4a>
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	f7f3 f918 	bl	8000adc <__aeabi_dcmplt>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d0e0      	beq.n	800d872 <pow+0x4a>
 800d8b0:	f7fe ff22 	bl	800c6f8 <__errno>
 800d8b4:	2321      	movs	r3, #33	; 0x21
 800d8b6:	6003      	str	r3, [r0, #0]
 800d8b8:	2400      	movs	r4, #0
 800d8ba:	4d2f      	ldr	r5, [pc, #188]	; (800d978 <pow+0x150>)
 800d8bc:	e7d9      	b.n	800d872 <pow+0x4a>
 800d8be:	ec45 4b10 	vmov	d0, r4, r5
 800d8c2:	f000 fe74 	bl	800e5ae <finite>
 800d8c6:	bbb8      	cbnz	r0, 800d938 <pow+0x110>
 800d8c8:	ec49 8b10 	vmov	d0, r8, r9
 800d8cc:	f000 fe6f 	bl	800e5ae <finite>
 800d8d0:	b390      	cbz	r0, 800d938 <pow+0x110>
 800d8d2:	ec47 6b10 	vmov	d0, r6, r7
 800d8d6:	f000 fe6a 	bl	800e5ae <finite>
 800d8da:	b368      	cbz	r0, 800d938 <pow+0x110>
 800d8dc:	4622      	mov	r2, r4
 800d8de:	462b      	mov	r3, r5
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	f7f3 f922 	bl	8000b2c <__aeabi_dcmpun>
 800d8e8:	b160      	cbz	r0, 800d904 <pow+0xdc>
 800d8ea:	f7fe ff05 	bl	800c6f8 <__errno>
 800d8ee:	2321      	movs	r3, #33	; 0x21
 800d8f0:	6003      	str	r3, [r0, #0]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	f7f2 ffa7 	bl	800084c <__aeabi_ddiv>
 800d8fe:	4604      	mov	r4, r0
 800d900:	460d      	mov	r5, r1
 800d902:	e7b6      	b.n	800d872 <pow+0x4a>
 800d904:	f7fe fef8 	bl	800c6f8 <__errno>
 800d908:	2322      	movs	r3, #34	; 0x22
 800d90a:	6003      	str	r3, [r0, #0]
 800d90c:	2200      	movs	r2, #0
 800d90e:	2300      	movs	r3, #0
 800d910:	4640      	mov	r0, r8
 800d912:	4649      	mov	r1, r9
 800d914:	f7f3 f8e2 	bl	8000adc <__aeabi_dcmplt>
 800d918:	2400      	movs	r4, #0
 800d91a:	b158      	cbz	r0, 800d934 <pow+0x10c>
 800d91c:	ec47 6b10 	vmov	d0, r6, r7
 800d920:	f000 fe5a 	bl	800e5d8 <rint>
 800d924:	4632      	mov	r2, r6
 800d926:	ec51 0b10 	vmov	r0, r1, d0
 800d92a:	463b      	mov	r3, r7
 800d92c:	f7f3 f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d930:	2800      	cmp	r0, #0
 800d932:	d0c2      	beq.n	800d8ba <pow+0x92>
 800d934:	4d11      	ldr	r5, [pc, #68]	; (800d97c <pow+0x154>)
 800d936:	e79c      	b.n	800d872 <pow+0x4a>
 800d938:	2200      	movs	r2, #0
 800d93a:	2300      	movs	r3, #0
 800d93c:	4620      	mov	r0, r4
 800d93e:	4629      	mov	r1, r5
 800d940:	f7f3 f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d944:	2800      	cmp	r0, #0
 800d946:	d094      	beq.n	800d872 <pow+0x4a>
 800d948:	ec49 8b10 	vmov	d0, r8, r9
 800d94c:	f000 fe2f 	bl	800e5ae <finite>
 800d950:	2800      	cmp	r0, #0
 800d952:	d08e      	beq.n	800d872 <pow+0x4a>
 800d954:	ec47 6b10 	vmov	d0, r6, r7
 800d958:	f000 fe29 	bl	800e5ae <finite>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d088      	beq.n	800d872 <pow+0x4a>
 800d960:	f7fe feca 	bl	800c6f8 <__errno>
 800d964:	2322      	movs	r3, #34	; 0x22
 800d966:	6003      	str	r3, [r0, #0]
 800d968:	2400      	movs	r4, #0
 800d96a:	2500      	movs	r5, #0
 800d96c:	e781      	b.n	800d872 <pow+0x4a>
 800d96e:	4d04      	ldr	r5, [pc, #16]	; (800d980 <pow+0x158>)
 800d970:	2400      	movs	r4, #0
 800d972:	e77e      	b.n	800d872 <pow+0x4a>
 800d974:	20000110 	.word	0x20000110
 800d978:	fff00000 	.word	0xfff00000
 800d97c:	7ff00000 	.word	0x7ff00000
 800d980:	3ff00000 	.word	0x3ff00000

0800d984 <sqrt>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	ed2d 8b02 	vpush	{d8}
 800d98a:	ec55 4b10 	vmov	r4, r5, d0
 800d98e:	f000 fd51 	bl	800e434 <__ieee754_sqrt>
 800d992:	4b15      	ldr	r3, [pc, #84]	; (800d9e8 <sqrt+0x64>)
 800d994:	eeb0 8a40 	vmov.f32	s16, s0
 800d998:	eef0 8a60 	vmov.f32	s17, s1
 800d99c:	f993 3000 	ldrsb.w	r3, [r3]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	d019      	beq.n	800d9d8 <sqrt+0x54>
 800d9a4:	4622      	mov	r2, r4
 800d9a6:	462b      	mov	r3, r5
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	f7f3 f8be 	bl	8000b2c <__aeabi_dcmpun>
 800d9b0:	b990      	cbnz	r0, 800d9d8 <sqrt+0x54>
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f3 f88f 	bl	8000adc <__aeabi_dcmplt>
 800d9be:	b158      	cbz	r0, 800d9d8 <sqrt+0x54>
 800d9c0:	f7fe fe9a 	bl	800c6f8 <__errno>
 800d9c4:	2321      	movs	r3, #33	; 0x21
 800d9c6:	6003      	str	r3, [r0, #0]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	4610      	mov	r0, r2
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	f7f2 ff3c 	bl	800084c <__aeabi_ddiv>
 800d9d4:	ec41 0b18 	vmov	d8, r0, r1
 800d9d8:	eeb0 0a48 	vmov.f32	s0, s16
 800d9dc:	eef0 0a68 	vmov.f32	s1, s17
 800d9e0:	ecbd 8b02 	vpop	{d8}
 800d9e4:	bd38      	pop	{r3, r4, r5, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20000110 	.word	0x20000110
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <__ieee754_pow>:
 800d9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f4:	ed2d 8b06 	vpush	{d8-d10}
 800d9f8:	b08d      	sub	sp, #52	; 0x34
 800d9fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d9fe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800da02:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800da06:	ea56 0100 	orrs.w	r1, r6, r0
 800da0a:	ec53 2b10 	vmov	r2, r3, d0
 800da0e:	f000 84d1 	beq.w	800e3b4 <__ieee754_pow+0x9c4>
 800da12:	497f      	ldr	r1, [pc, #508]	; (800dc10 <__ieee754_pow+0x220>)
 800da14:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800da18:	428c      	cmp	r4, r1
 800da1a:	ee10 8a10 	vmov	r8, s0
 800da1e:	4699      	mov	r9, r3
 800da20:	dc09      	bgt.n	800da36 <__ieee754_pow+0x46>
 800da22:	d103      	bne.n	800da2c <__ieee754_pow+0x3c>
 800da24:	b97a      	cbnz	r2, 800da46 <__ieee754_pow+0x56>
 800da26:	42a6      	cmp	r6, r4
 800da28:	dd02      	ble.n	800da30 <__ieee754_pow+0x40>
 800da2a:	e00c      	b.n	800da46 <__ieee754_pow+0x56>
 800da2c:	428e      	cmp	r6, r1
 800da2e:	dc02      	bgt.n	800da36 <__ieee754_pow+0x46>
 800da30:	428e      	cmp	r6, r1
 800da32:	d110      	bne.n	800da56 <__ieee754_pow+0x66>
 800da34:	b178      	cbz	r0, 800da56 <__ieee754_pow+0x66>
 800da36:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800da3a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800da3e:	ea54 0308 	orrs.w	r3, r4, r8
 800da42:	f000 84b7 	beq.w	800e3b4 <__ieee754_pow+0x9c4>
 800da46:	4873      	ldr	r0, [pc, #460]	; (800dc14 <__ieee754_pow+0x224>)
 800da48:	b00d      	add	sp, #52	; 0x34
 800da4a:	ecbd 8b06 	vpop	{d8-d10}
 800da4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da52:	f000 bdb9 	b.w	800e5c8 <nan>
 800da56:	f1b9 0f00 	cmp.w	r9, #0
 800da5a:	da36      	bge.n	800daca <__ieee754_pow+0xda>
 800da5c:	496e      	ldr	r1, [pc, #440]	; (800dc18 <__ieee754_pow+0x228>)
 800da5e:	428e      	cmp	r6, r1
 800da60:	dc51      	bgt.n	800db06 <__ieee754_pow+0x116>
 800da62:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800da66:	428e      	cmp	r6, r1
 800da68:	f340 84af 	ble.w	800e3ca <__ieee754_pow+0x9da>
 800da6c:	1531      	asrs	r1, r6, #20
 800da6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800da72:	2914      	cmp	r1, #20
 800da74:	dd0f      	ble.n	800da96 <__ieee754_pow+0xa6>
 800da76:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800da7a:	fa20 fc01 	lsr.w	ip, r0, r1
 800da7e:	fa0c f101 	lsl.w	r1, ip, r1
 800da82:	4281      	cmp	r1, r0
 800da84:	f040 84a1 	bne.w	800e3ca <__ieee754_pow+0x9da>
 800da88:	f00c 0c01 	and.w	ip, ip, #1
 800da8c:	f1cc 0102 	rsb	r1, ip, #2
 800da90:	9100      	str	r1, [sp, #0]
 800da92:	b180      	cbz	r0, 800dab6 <__ieee754_pow+0xc6>
 800da94:	e059      	b.n	800db4a <__ieee754_pow+0x15a>
 800da96:	2800      	cmp	r0, #0
 800da98:	d155      	bne.n	800db46 <__ieee754_pow+0x156>
 800da9a:	f1c1 0114 	rsb	r1, r1, #20
 800da9e:	fa46 fc01 	asr.w	ip, r6, r1
 800daa2:	fa0c f101 	lsl.w	r1, ip, r1
 800daa6:	42b1      	cmp	r1, r6
 800daa8:	f040 848c 	bne.w	800e3c4 <__ieee754_pow+0x9d4>
 800daac:	f00c 0c01 	and.w	ip, ip, #1
 800dab0:	f1cc 0102 	rsb	r1, ip, #2
 800dab4:	9100      	str	r1, [sp, #0]
 800dab6:	4959      	ldr	r1, [pc, #356]	; (800dc1c <__ieee754_pow+0x22c>)
 800dab8:	428e      	cmp	r6, r1
 800daba:	d12d      	bne.n	800db18 <__ieee754_pow+0x128>
 800dabc:	2f00      	cmp	r7, #0
 800dabe:	da79      	bge.n	800dbb4 <__ieee754_pow+0x1c4>
 800dac0:	4956      	ldr	r1, [pc, #344]	; (800dc1c <__ieee754_pow+0x22c>)
 800dac2:	2000      	movs	r0, #0
 800dac4:	f7f2 fec2 	bl	800084c <__aeabi_ddiv>
 800dac8:	e016      	b.n	800daf8 <__ieee754_pow+0x108>
 800daca:	2100      	movs	r1, #0
 800dacc:	9100      	str	r1, [sp, #0]
 800dace:	2800      	cmp	r0, #0
 800dad0:	d13b      	bne.n	800db4a <__ieee754_pow+0x15a>
 800dad2:	494f      	ldr	r1, [pc, #316]	; (800dc10 <__ieee754_pow+0x220>)
 800dad4:	428e      	cmp	r6, r1
 800dad6:	d1ee      	bne.n	800dab6 <__ieee754_pow+0xc6>
 800dad8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dadc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dae0:	ea53 0308 	orrs.w	r3, r3, r8
 800dae4:	f000 8466 	beq.w	800e3b4 <__ieee754_pow+0x9c4>
 800dae8:	4b4d      	ldr	r3, [pc, #308]	; (800dc20 <__ieee754_pow+0x230>)
 800daea:	429c      	cmp	r4, r3
 800daec:	dd0d      	ble.n	800db0a <__ieee754_pow+0x11a>
 800daee:	2f00      	cmp	r7, #0
 800daf0:	f280 8464 	bge.w	800e3bc <__ieee754_pow+0x9cc>
 800daf4:	2000      	movs	r0, #0
 800daf6:	2100      	movs	r1, #0
 800daf8:	ec41 0b10 	vmov	d0, r0, r1
 800dafc:	b00d      	add	sp, #52	; 0x34
 800dafe:	ecbd 8b06 	vpop	{d8-d10}
 800db02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db06:	2102      	movs	r1, #2
 800db08:	e7e0      	b.n	800dacc <__ieee754_pow+0xdc>
 800db0a:	2f00      	cmp	r7, #0
 800db0c:	daf2      	bge.n	800daf4 <__ieee754_pow+0x104>
 800db0e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800db12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db16:	e7ef      	b.n	800daf8 <__ieee754_pow+0x108>
 800db18:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800db1c:	d104      	bne.n	800db28 <__ieee754_pow+0x138>
 800db1e:	4610      	mov	r0, r2
 800db20:	4619      	mov	r1, r3
 800db22:	f7f2 fd69 	bl	80005f8 <__aeabi_dmul>
 800db26:	e7e7      	b.n	800daf8 <__ieee754_pow+0x108>
 800db28:	493e      	ldr	r1, [pc, #248]	; (800dc24 <__ieee754_pow+0x234>)
 800db2a:	428f      	cmp	r7, r1
 800db2c:	d10d      	bne.n	800db4a <__ieee754_pow+0x15a>
 800db2e:	f1b9 0f00 	cmp.w	r9, #0
 800db32:	db0a      	blt.n	800db4a <__ieee754_pow+0x15a>
 800db34:	ec43 2b10 	vmov	d0, r2, r3
 800db38:	b00d      	add	sp, #52	; 0x34
 800db3a:	ecbd 8b06 	vpop	{d8-d10}
 800db3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db42:	f000 bc77 	b.w	800e434 <__ieee754_sqrt>
 800db46:	2100      	movs	r1, #0
 800db48:	9100      	str	r1, [sp, #0]
 800db4a:	ec43 2b10 	vmov	d0, r2, r3
 800db4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db52:	f000 fd23 	bl	800e59c <fabs>
 800db56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db5a:	ec51 0b10 	vmov	r0, r1, d0
 800db5e:	f1b8 0f00 	cmp.w	r8, #0
 800db62:	d12a      	bne.n	800dbba <__ieee754_pow+0x1ca>
 800db64:	b12c      	cbz	r4, 800db72 <__ieee754_pow+0x182>
 800db66:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800dc1c <__ieee754_pow+0x22c>
 800db6a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800db6e:	45e6      	cmp	lr, ip
 800db70:	d123      	bne.n	800dbba <__ieee754_pow+0x1ca>
 800db72:	2f00      	cmp	r7, #0
 800db74:	da05      	bge.n	800db82 <__ieee754_pow+0x192>
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
 800db7a:	2000      	movs	r0, #0
 800db7c:	4927      	ldr	r1, [pc, #156]	; (800dc1c <__ieee754_pow+0x22c>)
 800db7e:	f7f2 fe65 	bl	800084c <__aeabi_ddiv>
 800db82:	f1b9 0f00 	cmp.w	r9, #0
 800db86:	dab7      	bge.n	800daf8 <__ieee754_pow+0x108>
 800db88:	9b00      	ldr	r3, [sp, #0]
 800db8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800db8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800db92:	4323      	orrs	r3, r4
 800db94:	d108      	bne.n	800dba8 <__ieee754_pow+0x1b8>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	4610      	mov	r0, r2
 800db9c:	4619      	mov	r1, r3
 800db9e:	f7f2 fb73 	bl	8000288 <__aeabi_dsub>
 800dba2:	4602      	mov	r2, r0
 800dba4:	460b      	mov	r3, r1
 800dba6:	e78d      	b.n	800dac4 <__ieee754_pow+0xd4>
 800dba8:	9b00      	ldr	r3, [sp, #0]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d1a4      	bne.n	800daf8 <__ieee754_pow+0x108>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	e79e      	b.n	800daf8 <__ieee754_pow+0x108>
 800dbba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800dbbe:	f10c 35ff 	add.w	r5, ip, #4294967295
 800dbc2:	950a      	str	r5, [sp, #40]	; 0x28
 800dbc4:	9d00      	ldr	r5, [sp, #0]
 800dbc6:	46ac      	mov	ip, r5
 800dbc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800dbca:	ea5c 0505 	orrs.w	r5, ip, r5
 800dbce:	d0e4      	beq.n	800db9a <__ieee754_pow+0x1aa>
 800dbd0:	4b15      	ldr	r3, [pc, #84]	; (800dc28 <__ieee754_pow+0x238>)
 800dbd2:	429e      	cmp	r6, r3
 800dbd4:	f340 80fc 	ble.w	800ddd0 <__ieee754_pow+0x3e0>
 800dbd8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dbdc:	429e      	cmp	r6, r3
 800dbde:	4b10      	ldr	r3, [pc, #64]	; (800dc20 <__ieee754_pow+0x230>)
 800dbe0:	dd07      	ble.n	800dbf2 <__ieee754_pow+0x202>
 800dbe2:	429c      	cmp	r4, r3
 800dbe4:	dc0a      	bgt.n	800dbfc <__ieee754_pow+0x20c>
 800dbe6:	2f00      	cmp	r7, #0
 800dbe8:	da84      	bge.n	800daf4 <__ieee754_pow+0x104>
 800dbea:	a307      	add	r3, pc, #28	; (adr r3, 800dc08 <__ieee754_pow+0x218>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	e795      	b.n	800db1e <__ieee754_pow+0x12e>
 800dbf2:	429c      	cmp	r4, r3
 800dbf4:	dbf7      	blt.n	800dbe6 <__ieee754_pow+0x1f6>
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <__ieee754_pow+0x22c>)
 800dbf8:	429c      	cmp	r4, r3
 800dbfa:	dd17      	ble.n	800dc2c <__ieee754_pow+0x23c>
 800dbfc:	2f00      	cmp	r7, #0
 800dbfe:	dcf4      	bgt.n	800dbea <__ieee754_pow+0x1fa>
 800dc00:	e778      	b.n	800daf4 <__ieee754_pow+0x104>
 800dc02:	bf00      	nop
 800dc04:	f3af 8000 	nop.w
 800dc08:	8800759c 	.word	0x8800759c
 800dc0c:	7e37e43c 	.word	0x7e37e43c
 800dc10:	7ff00000 	.word	0x7ff00000
 800dc14:	080e9e36 	.word	0x080e9e36
 800dc18:	433fffff 	.word	0x433fffff
 800dc1c:	3ff00000 	.word	0x3ff00000
 800dc20:	3fefffff 	.word	0x3fefffff
 800dc24:	3fe00000 	.word	0x3fe00000
 800dc28:	41e00000 	.word	0x41e00000
 800dc2c:	4b64      	ldr	r3, [pc, #400]	; (800ddc0 <__ieee754_pow+0x3d0>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f7f2 fb2a 	bl	8000288 <__aeabi_dsub>
 800dc34:	a356      	add	r3, pc, #344	; (adr r3, 800dd90 <__ieee754_pow+0x3a0>)
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	f7f2 fcdb 	bl	80005f8 <__aeabi_dmul>
 800dc42:	a355      	add	r3, pc, #340	; (adr r3, 800dd98 <__ieee754_pow+0x3a8>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	4606      	mov	r6, r0
 800dc4a:	460f      	mov	r7, r1
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	4629      	mov	r1, r5
 800dc50:	f7f2 fcd2 	bl	80005f8 <__aeabi_dmul>
 800dc54:	4b5b      	ldr	r3, [pc, #364]	; (800ddc4 <__ieee754_pow+0x3d4>)
 800dc56:	4682      	mov	sl, r0
 800dc58:	468b      	mov	fp, r1
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	4629      	mov	r1, r5
 800dc60:	f7f2 fcca 	bl	80005f8 <__aeabi_dmul>
 800dc64:	4602      	mov	r2, r0
 800dc66:	460b      	mov	r3, r1
 800dc68:	a14d      	add	r1, pc, #308	; (adr r1, 800dda0 <__ieee754_pow+0x3b0>)
 800dc6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc6e:	f7f2 fb0b 	bl	8000288 <__aeabi_dsub>
 800dc72:	4622      	mov	r2, r4
 800dc74:	462b      	mov	r3, r5
 800dc76:	f7f2 fcbf 	bl	80005f8 <__aeabi_dmul>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	2000      	movs	r0, #0
 800dc80:	4951      	ldr	r1, [pc, #324]	; (800ddc8 <__ieee754_pow+0x3d8>)
 800dc82:	f7f2 fb01 	bl	8000288 <__aeabi_dsub>
 800dc86:	4622      	mov	r2, r4
 800dc88:	4680      	mov	r8, r0
 800dc8a:	4689      	mov	r9, r1
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 fcb1 	bl	80005f8 <__aeabi_dmul>
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	4649      	mov	r1, r9
 800dc9e:	f7f2 fcab 	bl	80005f8 <__aeabi_dmul>
 800dca2:	a341      	add	r3, pc, #260	; (adr r3, 800dda8 <__ieee754_pow+0x3b8>)
 800dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca8:	f7f2 fca6 	bl	80005f8 <__aeabi_dmul>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4650      	mov	r0, sl
 800dcb2:	4659      	mov	r1, fp
 800dcb4:	f7f2 fae8 	bl	8000288 <__aeabi_dsub>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	4689      	mov	r9, r1
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	f7f2 fae2 	bl	800028c <__adddf3>
 800dcc8:	2400      	movs	r4, #0
 800dcca:	4632      	mov	r2, r6
 800dccc:	463b      	mov	r3, r7
 800dcce:	4620      	mov	r0, r4
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	f7f2 fad9 	bl	8000288 <__aeabi_dsub>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	4640      	mov	r0, r8
 800dcdc:	4649      	mov	r1, r9
 800dcde:	f7f2 fad3 	bl	8000288 <__aeabi_dsub>
 800dce2:	9b00      	ldr	r3, [sp, #0]
 800dce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dce6:	3b01      	subs	r3, #1
 800dce8:	4313      	orrs	r3, r2
 800dcea:	4682      	mov	sl, r0
 800dcec:	468b      	mov	fp, r1
 800dcee:	f040 81f1 	bne.w	800e0d4 <__ieee754_pow+0x6e4>
 800dcf2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ddb0 <__ieee754_pow+0x3c0>
 800dcf6:	eeb0 8a47 	vmov.f32	s16, s14
 800dcfa:	eef0 8a67 	vmov.f32	s17, s15
 800dcfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dd02:	2600      	movs	r6, #0
 800dd04:	4632      	mov	r2, r6
 800dd06:	463b      	mov	r3, r7
 800dd08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd0c:	f7f2 fabc 	bl	8000288 <__aeabi_dsub>
 800dd10:	4622      	mov	r2, r4
 800dd12:	462b      	mov	r3, r5
 800dd14:	f7f2 fc70 	bl	80005f8 <__aeabi_dmul>
 800dd18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd1c:	4680      	mov	r8, r0
 800dd1e:	4689      	mov	r9, r1
 800dd20:	4650      	mov	r0, sl
 800dd22:	4659      	mov	r1, fp
 800dd24:	f7f2 fc68 	bl	80005f8 <__aeabi_dmul>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	4649      	mov	r1, r9
 800dd30:	f7f2 faac 	bl	800028c <__adddf3>
 800dd34:	4632      	mov	r2, r6
 800dd36:	463b      	mov	r3, r7
 800dd38:	4680      	mov	r8, r0
 800dd3a:	4689      	mov	r9, r1
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	4629      	mov	r1, r5
 800dd40:	f7f2 fc5a 	bl	80005f8 <__aeabi_dmul>
 800dd44:	460b      	mov	r3, r1
 800dd46:	4604      	mov	r4, r0
 800dd48:	460d      	mov	r5, r1
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	4649      	mov	r1, r9
 800dd4e:	4640      	mov	r0, r8
 800dd50:	f7f2 fa9c 	bl	800028c <__adddf3>
 800dd54:	4b1d      	ldr	r3, [pc, #116]	; (800ddcc <__ieee754_pow+0x3dc>)
 800dd56:	4299      	cmp	r1, r3
 800dd58:	ec45 4b19 	vmov	d9, r4, r5
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	460f      	mov	r7, r1
 800dd60:	468b      	mov	fp, r1
 800dd62:	f340 82fe 	ble.w	800e362 <__ieee754_pow+0x972>
 800dd66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dd6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dd6e:	4303      	orrs	r3, r0
 800dd70:	f000 81f0 	beq.w	800e154 <__ieee754_pow+0x764>
 800dd74:	a310      	add	r3, pc, #64	; (adr r3, 800ddb8 <__ieee754_pow+0x3c8>)
 800dd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7a:	ec51 0b18 	vmov	r0, r1, d8
 800dd7e:	f7f2 fc3b 	bl	80005f8 <__aeabi_dmul>
 800dd82:	a30d      	add	r3, pc, #52	; (adr r3, 800ddb8 <__ieee754_pow+0x3c8>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	e6cb      	b.n	800db22 <__ieee754_pow+0x132>
 800dd8a:	bf00      	nop
 800dd8c:	f3af 8000 	nop.w
 800dd90:	60000000 	.word	0x60000000
 800dd94:	3ff71547 	.word	0x3ff71547
 800dd98:	f85ddf44 	.word	0xf85ddf44
 800dd9c:	3e54ae0b 	.word	0x3e54ae0b
 800dda0:	55555555 	.word	0x55555555
 800dda4:	3fd55555 	.word	0x3fd55555
 800dda8:	652b82fe 	.word	0x652b82fe
 800ddac:	3ff71547 	.word	0x3ff71547
 800ddb0:	00000000 	.word	0x00000000
 800ddb4:	bff00000 	.word	0xbff00000
 800ddb8:	8800759c 	.word	0x8800759c
 800ddbc:	7e37e43c 	.word	0x7e37e43c
 800ddc0:	3ff00000 	.word	0x3ff00000
 800ddc4:	3fd00000 	.word	0x3fd00000
 800ddc8:	3fe00000 	.word	0x3fe00000
 800ddcc:	408fffff 	.word	0x408fffff
 800ddd0:	4bd7      	ldr	r3, [pc, #860]	; (800e130 <__ieee754_pow+0x740>)
 800ddd2:	ea03 0309 	and.w	r3, r3, r9
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	b92b      	cbnz	r3, 800dde6 <__ieee754_pow+0x3f6>
 800ddda:	4bd6      	ldr	r3, [pc, #856]	; (800e134 <__ieee754_pow+0x744>)
 800dddc:	f7f2 fc0c 	bl	80005f8 <__aeabi_dmul>
 800dde0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dde4:	460c      	mov	r4, r1
 800dde6:	1523      	asrs	r3, r4, #20
 800dde8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ddec:	4413      	add	r3, r2
 800ddee:	9309      	str	r3, [sp, #36]	; 0x24
 800ddf0:	4bd1      	ldr	r3, [pc, #836]	; (800e138 <__ieee754_pow+0x748>)
 800ddf2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ddf6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ddfa:	429c      	cmp	r4, r3
 800ddfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800de00:	dd08      	ble.n	800de14 <__ieee754_pow+0x424>
 800de02:	4bce      	ldr	r3, [pc, #824]	; (800e13c <__ieee754_pow+0x74c>)
 800de04:	429c      	cmp	r4, r3
 800de06:	f340 8163 	ble.w	800e0d0 <__ieee754_pow+0x6e0>
 800de0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de0c:	3301      	adds	r3, #1
 800de0e:	9309      	str	r3, [sp, #36]	; 0x24
 800de10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800de14:	2400      	movs	r4, #0
 800de16:	00e3      	lsls	r3, r4, #3
 800de18:	930b      	str	r3, [sp, #44]	; 0x2c
 800de1a:	4bc9      	ldr	r3, [pc, #804]	; (800e140 <__ieee754_pow+0x750>)
 800de1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de20:	ed93 7b00 	vldr	d7, [r3]
 800de24:	4629      	mov	r1, r5
 800de26:	ec53 2b17 	vmov	r2, r3, d7
 800de2a:	eeb0 8a47 	vmov.f32	s16, s14
 800de2e:	eef0 8a67 	vmov.f32	s17, s15
 800de32:	4682      	mov	sl, r0
 800de34:	f7f2 fa28 	bl	8000288 <__aeabi_dsub>
 800de38:	4652      	mov	r2, sl
 800de3a:	4606      	mov	r6, r0
 800de3c:	460f      	mov	r7, r1
 800de3e:	462b      	mov	r3, r5
 800de40:	ec51 0b18 	vmov	r0, r1, d8
 800de44:	f7f2 fa22 	bl	800028c <__adddf3>
 800de48:	4602      	mov	r2, r0
 800de4a:	460b      	mov	r3, r1
 800de4c:	2000      	movs	r0, #0
 800de4e:	49bd      	ldr	r1, [pc, #756]	; (800e144 <__ieee754_pow+0x754>)
 800de50:	f7f2 fcfc 	bl	800084c <__aeabi_ddiv>
 800de54:	ec41 0b19 	vmov	d9, r0, r1
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4630      	mov	r0, r6
 800de5e:	4639      	mov	r1, r7
 800de60:	f7f2 fbca 	bl	80005f8 <__aeabi_dmul>
 800de64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800de68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de70:	2300      	movs	r3, #0
 800de72:	9304      	str	r3, [sp, #16]
 800de74:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800de78:	46ab      	mov	fp, r5
 800de7a:	106d      	asrs	r5, r5, #1
 800de7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800de80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800de84:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800de88:	2200      	movs	r2, #0
 800de8a:	4640      	mov	r0, r8
 800de8c:	4649      	mov	r1, r9
 800de8e:	4614      	mov	r4, r2
 800de90:	461d      	mov	r5, r3
 800de92:	f7f2 fbb1 	bl	80005f8 <__aeabi_dmul>
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	4630      	mov	r0, r6
 800de9c:	4639      	mov	r1, r7
 800de9e:	f7f2 f9f3 	bl	8000288 <__aeabi_dsub>
 800dea2:	ec53 2b18 	vmov	r2, r3, d8
 800dea6:	4606      	mov	r6, r0
 800dea8:	460f      	mov	r7, r1
 800deaa:	4620      	mov	r0, r4
 800deac:	4629      	mov	r1, r5
 800deae:	f7f2 f9eb 	bl	8000288 <__aeabi_dsub>
 800deb2:	4602      	mov	r2, r0
 800deb4:	460b      	mov	r3, r1
 800deb6:	4650      	mov	r0, sl
 800deb8:	4659      	mov	r1, fp
 800deba:	f7f2 f9e5 	bl	8000288 <__aeabi_dsub>
 800debe:	4642      	mov	r2, r8
 800dec0:	464b      	mov	r3, r9
 800dec2:	f7f2 fb99 	bl	80005f8 <__aeabi_dmul>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4630      	mov	r0, r6
 800decc:	4639      	mov	r1, r7
 800dece:	f7f2 f9db 	bl	8000288 <__aeabi_dsub>
 800ded2:	ec53 2b19 	vmov	r2, r3, d9
 800ded6:	f7f2 fb8f 	bl	80005f8 <__aeabi_dmul>
 800deda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dede:	ec41 0b18 	vmov	d8, r0, r1
 800dee2:	4610      	mov	r0, r2
 800dee4:	4619      	mov	r1, r3
 800dee6:	f7f2 fb87 	bl	80005f8 <__aeabi_dmul>
 800deea:	a37d      	add	r3, pc, #500	; (adr r3, 800e0e0 <__ieee754_pow+0x6f0>)
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	4604      	mov	r4, r0
 800def2:	460d      	mov	r5, r1
 800def4:	f7f2 fb80 	bl	80005f8 <__aeabi_dmul>
 800def8:	a37b      	add	r3, pc, #492	; (adr r3, 800e0e8 <__ieee754_pow+0x6f8>)
 800defa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defe:	f7f2 f9c5 	bl	800028c <__adddf3>
 800df02:	4622      	mov	r2, r4
 800df04:	462b      	mov	r3, r5
 800df06:	f7f2 fb77 	bl	80005f8 <__aeabi_dmul>
 800df0a:	a379      	add	r3, pc, #484	; (adr r3, 800e0f0 <__ieee754_pow+0x700>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	f7f2 f9bc 	bl	800028c <__adddf3>
 800df14:	4622      	mov	r2, r4
 800df16:	462b      	mov	r3, r5
 800df18:	f7f2 fb6e 	bl	80005f8 <__aeabi_dmul>
 800df1c:	a376      	add	r3, pc, #472	; (adr r3, 800e0f8 <__ieee754_pow+0x708>)
 800df1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df22:	f7f2 f9b3 	bl	800028c <__adddf3>
 800df26:	4622      	mov	r2, r4
 800df28:	462b      	mov	r3, r5
 800df2a:	f7f2 fb65 	bl	80005f8 <__aeabi_dmul>
 800df2e:	a374      	add	r3, pc, #464	; (adr r3, 800e100 <__ieee754_pow+0x710>)
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	f7f2 f9aa 	bl	800028c <__adddf3>
 800df38:	4622      	mov	r2, r4
 800df3a:	462b      	mov	r3, r5
 800df3c:	f7f2 fb5c 	bl	80005f8 <__aeabi_dmul>
 800df40:	a371      	add	r3, pc, #452	; (adr r3, 800e108 <__ieee754_pow+0x718>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	f7f2 f9a1 	bl	800028c <__adddf3>
 800df4a:	4622      	mov	r2, r4
 800df4c:	4606      	mov	r6, r0
 800df4e:	460f      	mov	r7, r1
 800df50:	462b      	mov	r3, r5
 800df52:	4620      	mov	r0, r4
 800df54:	4629      	mov	r1, r5
 800df56:	f7f2 fb4f 	bl	80005f8 <__aeabi_dmul>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4630      	mov	r0, r6
 800df60:	4639      	mov	r1, r7
 800df62:	f7f2 fb49 	bl	80005f8 <__aeabi_dmul>
 800df66:	4642      	mov	r2, r8
 800df68:	4604      	mov	r4, r0
 800df6a:	460d      	mov	r5, r1
 800df6c:	464b      	mov	r3, r9
 800df6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df72:	f7f2 f98b 	bl	800028c <__adddf3>
 800df76:	ec53 2b18 	vmov	r2, r3, d8
 800df7a:	f7f2 fb3d 	bl	80005f8 <__aeabi_dmul>
 800df7e:	4622      	mov	r2, r4
 800df80:	462b      	mov	r3, r5
 800df82:	f7f2 f983 	bl	800028c <__adddf3>
 800df86:	4642      	mov	r2, r8
 800df88:	4682      	mov	sl, r0
 800df8a:	468b      	mov	fp, r1
 800df8c:	464b      	mov	r3, r9
 800df8e:	4640      	mov	r0, r8
 800df90:	4649      	mov	r1, r9
 800df92:	f7f2 fb31 	bl	80005f8 <__aeabi_dmul>
 800df96:	4b6c      	ldr	r3, [pc, #432]	; (800e148 <__ieee754_pow+0x758>)
 800df98:	2200      	movs	r2, #0
 800df9a:	4606      	mov	r6, r0
 800df9c:	460f      	mov	r7, r1
 800df9e:	f7f2 f975 	bl	800028c <__adddf3>
 800dfa2:	4652      	mov	r2, sl
 800dfa4:	465b      	mov	r3, fp
 800dfa6:	f7f2 f971 	bl	800028c <__adddf3>
 800dfaa:	9c04      	ldr	r4, [sp, #16]
 800dfac:	460d      	mov	r5, r1
 800dfae:	4622      	mov	r2, r4
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	4649      	mov	r1, r9
 800dfb6:	f7f2 fb1f 	bl	80005f8 <__aeabi_dmul>
 800dfba:	4b63      	ldr	r3, [pc, #396]	; (800e148 <__ieee754_pow+0x758>)
 800dfbc:	4680      	mov	r8, r0
 800dfbe:	4689      	mov	r9, r1
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	4629      	mov	r1, r5
 800dfc6:	f7f2 f95f 	bl	8000288 <__aeabi_dsub>
 800dfca:	4632      	mov	r2, r6
 800dfcc:	463b      	mov	r3, r7
 800dfce:	f7f2 f95b 	bl	8000288 <__aeabi_dsub>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	4650      	mov	r0, sl
 800dfd8:	4659      	mov	r1, fp
 800dfda:	f7f2 f955 	bl	8000288 <__aeabi_dsub>
 800dfde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dfe2:	f7f2 fb09 	bl	80005f8 <__aeabi_dmul>
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	4606      	mov	r6, r0
 800dfea:	460f      	mov	r7, r1
 800dfec:	462b      	mov	r3, r5
 800dfee:	ec51 0b18 	vmov	r0, r1, d8
 800dff2:	f7f2 fb01 	bl	80005f8 <__aeabi_dmul>
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4630      	mov	r0, r6
 800dffc:	4639      	mov	r1, r7
 800dffe:	f7f2 f945 	bl	800028c <__adddf3>
 800e002:	4606      	mov	r6, r0
 800e004:	460f      	mov	r7, r1
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	4640      	mov	r0, r8
 800e00c:	4649      	mov	r1, r9
 800e00e:	f7f2 f93d 	bl	800028c <__adddf3>
 800e012:	9c04      	ldr	r4, [sp, #16]
 800e014:	a33e      	add	r3, pc, #248	; (adr r3, 800e110 <__ieee754_pow+0x720>)
 800e016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01a:	4620      	mov	r0, r4
 800e01c:	460d      	mov	r5, r1
 800e01e:	f7f2 faeb 	bl	80005f8 <__aeabi_dmul>
 800e022:	4642      	mov	r2, r8
 800e024:	ec41 0b18 	vmov	d8, r0, r1
 800e028:	464b      	mov	r3, r9
 800e02a:	4620      	mov	r0, r4
 800e02c:	4629      	mov	r1, r5
 800e02e:	f7f2 f92b 	bl	8000288 <__aeabi_dsub>
 800e032:	4602      	mov	r2, r0
 800e034:	460b      	mov	r3, r1
 800e036:	4630      	mov	r0, r6
 800e038:	4639      	mov	r1, r7
 800e03a:	f7f2 f925 	bl	8000288 <__aeabi_dsub>
 800e03e:	a336      	add	r3, pc, #216	; (adr r3, 800e118 <__ieee754_pow+0x728>)
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	f7f2 fad8 	bl	80005f8 <__aeabi_dmul>
 800e048:	a335      	add	r3, pc, #212	; (adr r3, 800e120 <__ieee754_pow+0x730>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	4606      	mov	r6, r0
 800e050:	460f      	mov	r7, r1
 800e052:	4620      	mov	r0, r4
 800e054:	4629      	mov	r1, r5
 800e056:	f7f2 facf 	bl	80005f8 <__aeabi_dmul>
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	4630      	mov	r0, r6
 800e060:	4639      	mov	r1, r7
 800e062:	f7f2 f913 	bl	800028c <__adddf3>
 800e066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e068:	4b38      	ldr	r3, [pc, #224]	; (800e14c <__ieee754_pow+0x75c>)
 800e06a:	4413      	add	r3, r2
 800e06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e070:	f7f2 f90c 	bl	800028c <__adddf3>
 800e074:	4682      	mov	sl, r0
 800e076:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e078:	468b      	mov	fp, r1
 800e07a:	f7f2 fa53 	bl	8000524 <__aeabi_i2d>
 800e07e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e080:	4b33      	ldr	r3, [pc, #204]	; (800e150 <__ieee754_pow+0x760>)
 800e082:	4413      	add	r3, r2
 800e084:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e088:	4606      	mov	r6, r0
 800e08a:	460f      	mov	r7, r1
 800e08c:	4652      	mov	r2, sl
 800e08e:	465b      	mov	r3, fp
 800e090:	ec51 0b18 	vmov	r0, r1, d8
 800e094:	f7f2 f8fa 	bl	800028c <__adddf3>
 800e098:	4642      	mov	r2, r8
 800e09a:	464b      	mov	r3, r9
 800e09c:	f7f2 f8f6 	bl	800028c <__adddf3>
 800e0a0:	4632      	mov	r2, r6
 800e0a2:	463b      	mov	r3, r7
 800e0a4:	f7f2 f8f2 	bl	800028c <__adddf3>
 800e0a8:	9c04      	ldr	r4, [sp, #16]
 800e0aa:	4632      	mov	r2, r6
 800e0ac:	463b      	mov	r3, r7
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	460d      	mov	r5, r1
 800e0b2:	f7f2 f8e9 	bl	8000288 <__aeabi_dsub>
 800e0b6:	4642      	mov	r2, r8
 800e0b8:	464b      	mov	r3, r9
 800e0ba:	f7f2 f8e5 	bl	8000288 <__aeabi_dsub>
 800e0be:	ec53 2b18 	vmov	r2, r3, d8
 800e0c2:	f7f2 f8e1 	bl	8000288 <__aeabi_dsub>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4650      	mov	r0, sl
 800e0cc:	4659      	mov	r1, fp
 800e0ce:	e606      	b.n	800dcde <__ieee754_pow+0x2ee>
 800e0d0:	2401      	movs	r4, #1
 800e0d2:	e6a0      	b.n	800de16 <__ieee754_pow+0x426>
 800e0d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e128 <__ieee754_pow+0x738>
 800e0d8:	e60d      	b.n	800dcf6 <__ieee754_pow+0x306>
 800e0da:	bf00      	nop
 800e0dc:	f3af 8000 	nop.w
 800e0e0:	4a454eef 	.word	0x4a454eef
 800e0e4:	3fca7e28 	.word	0x3fca7e28
 800e0e8:	93c9db65 	.word	0x93c9db65
 800e0ec:	3fcd864a 	.word	0x3fcd864a
 800e0f0:	a91d4101 	.word	0xa91d4101
 800e0f4:	3fd17460 	.word	0x3fd17460
 800e0f8:	518f264d 	.word	0x518f264d
 800e0fc:	3fd55555 	.word	0x3fd55555
 800e100:	db6fabff 	.word	0xdb6fabff
 800e104:	3fdb6db6 	.word	0x3fdb6db6
 800e108:	33333303 	.word	0x33333303
 800e10c:	3fe33333 	.word	0x3fe33333
 800e110:	e0000000 	.word	0xe0000000
 800e114:	3feec709 	.word	0x3feec709
 800e118:	dc3a03fd 	.word	0xdc3a03fd
 800e11c:	3feec709 	.word	0x3feec709
 800e120:	145b01f5 	.word	0x145b01f5
 800e124:	be3e2fe0 	.word	0xbe3e2fe0
 800e128:	00000000 	.word	0x00000000
 800e12c:	3ff00000 	.word	0x3ff00000
 800e130:	7ff00000 	.word	0x7ff00000
 800e134:	43400000 	.word	0x43400000
 800e138:	0003988e 	.word	0x0003988e
 800e13c:	000bb679 	.word	0x000bb679
 800e140:	080e9ed0 	.word	0x080e9ed0
 800e144:	3ff00000 	.word	0x3ff00000
 800e148:	40080000 	.word	0x40080000
 800e14c:	080e9ef0 	.word	0x080e9ef0
 800e150:	080e9ee0 	.word	0x080e9ee0
 800e154:	a3b5      	add	r3, pc, #724	; (adr r3, 800e42c <__ieee754_pow+0xa3c>)
 800e156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15a:	4640      	mov	r0, r8
 800e15c:	4649      	mov	r1, r9
 800e15e:	f7f2 f895 	bl	800028c <__adddf3>
 800e162:	4622      	mov	r2, r4
 800e164:	ec41 0b1a 	vmov	d10, r0, r1
 800e168:	462b      	mov	r3, r5
 800e16a:	4630      	mov	r0, r6
 800e16c:	4639      	mov	r1, r7
 800e16e:	f7f2 f88b 	bl	8000288 <__aeabi_dsub>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	ec51 0b1a 	vmov	r0, r1, d10
 800e17a:	f7f2 fccd 	bl	8000b18 <__aeabi_dcmpgt>
 800e17e:	2800      	cmp	r0, #0
 800e180:	f47f adf8 	bne.w	800dd74 <__ieee754_pow+0x384>
 800e184:	4aa4      	ldr	r2, [pc, #656]	; (800e418 <__ieee754_pow+0xa28>)
 800e186:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e18a:	4293      	cmp	r3, r2
 800e18c:	f340 810b 	ble.w	800e3a6 <__ieee754_pow+0x9b6>
 800e190:	151b      	asrs	r3, r3, #20
 800e192:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e196:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e19a:	fa4a f303 	asr.w	r3, sl, r3
 800e19e:	445b      	add	r3, fp
 800e1a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e1a4:	4e9d      	ldr	r6, [pc, #628]	; (800e41c <__ieee754_pow+0xa2c>)
 800e1a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e1aa:	4116      	asrs	r6, r2
 800e1ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	ea23 0106 	bic.w	r1, r3, r6
 800e1b6:	f1c2 0214 	rsb	r2, r2, #20
 800e1ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e1be:	fa4a fa02 	asr.w	sl, sl, r2
 800e1c2:	f1bb 0f00 	cmp.w	fp, #0
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	4629      	mov	r1, r5
 800e1ce:	bfb8      	it	lt
 800e1d0:	f1ca 0a00 	rsblt	sl, sl, #0
 800e1d4:	f7f2 f858 	bl	8000288 <__aeabi_dsub>
 800e1d8:	ec41 0b19 	vmov	d9, r0, r1
 800e1dc:	4642      	mov	r2, r8
 800e1de:	464b      	mov	r3, r9
 800e1e0:	ec51 0b19 	vmov	r0, r1, d9
 800e1e4:	f7f2 f852 	bl	800028c <__adddf3>
 800e1e8:	2400      	movs	r4, #0
 800e1ea:	a379      	add	r3, pc, #484	; (adr r3, 800e3d0 <__ieee754_pow+0x9e0>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	f7f2 fa00 	bl	80005f8 <__aeabi_dmul>
 800e1f8:	ec53 2b19 	vmov	r2, r3, d9
 800e1fc:	4606      	mov	r6, r0
 800e1fe:	460f      	mov	r7, r1
 800e200:	4620      	mov	r0, r4
 800e202:	4629      	mov	r1, r5
 800e204:	f7f2 f840 	bl	8000288 <__aeabi_dsub>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4640      	mov	r0, r8
 800e20e:	4649      	mov	r1, r9
 800e210:	f7f2 f83a 	bl	8000288 <__aeabi_dsub>
 800e214:	a370      	add	r3, pc, #448	; (adr r3, 800e3d8 <__ieee754_pow+0x9e8>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	f7f2 f9ed 	bl	80005f8 <__aeabi_dmul>
 800e21e:	a370      	add	r3, pc, #448	; (adr r3, 800e3e0 <__ieee754_pow+0x9f0>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	4680      	mov	r8, r0
 800e226:	4689      	mov	r9, r1
 800e228:	4620      	mov	r0, r4
 800e22a:	4629      	mov	r1, r5
 800e22c:	f7f2 f9e4 	bl	80005f8 <__aeabi_dmul>
 800e230:	4602      	mov	r2, r0
 800e232:	460b      	mov	r3, r1
 800e234:	4640      	mov	r0, r8
 800e236:	4649      	mov	r1, r9
 800e238:	f7f2 f828 	bl	800028c <__adddf3>
 800e23c:	4604      	mov	r4, r0
 800e23e:	460d      	mov	r5, r1
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	4630      	mov	r0, r6
 800e246:	4639      	mov	r1, r7
 800e248:	f7f2 f820 	bl	800028c <__adddf3>
 800e24c:	4632      	mov	r2, r6
 800e24e:	463b      	mov	r3, r7
 800e250:	4680      	mov	r8, r0
 800e252:	4689      	mov	r9, r1
 800e254:	f7f2 f818 	bl	8000288 <__aeabi_dsub>
 800e258:	4602      	mov	r2, r0
 800e25a:	460b      	mov	r3, r1
 800e25c:	4620      	mov	r0, r4
 800e25e:	4629      	mov	r1, r5
 800e260:	f7f2 f812 	bl	8000288 <__aeabi_dsub>
 800e264:	4642      	mov	r2, r8
 800e266:	4606      	mov	r6, r0
 800e268:	460f      	mov	r7, r1
 800e26a:	464b      	mov	r3, r9
 800e26c:	4640      	mov	r0, r8
 800e26e:	4649      	mov	r1, r9
 800e270:	f7f2 f9c2 	bl	80005f8 <__aeabi_dmul>
 800e274:	a35c      	add	r3, pc, #368	; (adr r3, 800e3e8 <__ieee754_pow+0x9f8>)
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	4604      	mov	r4, r0
 800e27c:	460d      	mov	r5, r1
 800e27e:	f7f2 f9bb 	bl	80005f8 <__aeabi_dmul>
 800e282:	a35b      	add	r3, pc, #364	; (adr r3, 800e3f0 <__ieee754_pow+0xa00>)
 800e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e288:	f7f1 fffe 	bl	8000288 <__aeabi_dsub>
 800e28c:	4622      	mov	r2, r4
 800e28e:	462b      	mov	r3, r5
 800e290:	f7f2 f9b2 	bl	80005f8 <__aeabi_dmul>
 800e294:	a358      	add	r3, pc, #352	; (adr r3, 800e3f8 <__ieee754_pow+0xa08>)
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	f7f1 fff7 	bl	800028c <__adddf3>
 800e29e:	4622      	mov	r2, r4
 800e2a0:	462b      	mov	r3, r5
 800e2a2:	f7f2 f9a9 	bl	80005f8 <__aeabi_dmul>
 800e2a6:	a356      	add	r3, pc, #344	; (adr r3, 800e400 <__ieee754_pow+0xa10>)
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	f7f1 ffec 	bl	8000288 <__aeabi_dsub>
 800e2b0:	4622      	mov	r2, r4
 800e2b2:	462b      	mov	r3, r5
 800e2b4:	f7f2 f9a0 	bl	80005f8 <__aeabi_dmul>
 800e2b8:	a353      	add	r3, pc, #332	; (adr r3, 800e408 <__ieee754_pow+0xa18>)
 800e2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2be:	f7f1 ffe5 	bl	800028c <__adddf3>
 800e2c2:	4622      	mov	r2, r4
 800e2c4:	462b      	mov	r3, r5
 800e2c6:	f7f2 f997 	bl	80005f8 <__aeabi_dmul>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	4649      	mov	r1, r9
 800e2d2:	f7f1 ffd9 	bl	8000288 <__aeabi_dsub>
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	460d      	mov	r5, r1
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	4640      	mov	r0, r8
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	f7f2 f989 	bl	80005f8 <__aeabi_dmul>
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	ec41 0b19 	vmov	d9, r0, r1
 800e2ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	f7f1 ffc8 	bl	8000288 <__aeabi_dsub>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	ec51 0b19 	vmov	r0, r1, d9
 800e300:	f7f2 faa4 	bl	800084c <__aeabi_ddiv>
 800e304:	4632      	mov	r2, r6
 800e306:	4604      	mov	r4, r0
 800e308:	460d      	mov	r5, r1
 800e30a:	463b      	mov	r3, r7
 800e30c:	4640      	mov	r0, r8
 800e30e:	4649      	mov	r1, r9
 800e310:	f7f2 f972 	bl	80005f8 <__aeabi_dmul>
 800e314:	4632      	mov	r2, r6
 800e316:	463b      	mov	r3, r7
 800e318:	f7f1 ffb8 	bl	800028c <__adddf3>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	4620      	mov	r0, r4
 800e322:	4629      	mov	r1, r5
 800e324:	f7f1 ffb0 	bl	8000288 <__aeabi_dsub>
 800e328:	4642      	mov	r2, r8
 800e32a:	464b      	mov	r3, r9
 800e32c:	f7f1 ffac 	bl	8000288 <__aeabi_dsub>
 800e330:	460b      	mov	r3, r1
 800e332:	4602      	mov	r2, r0
 800e334:	493a      	ldr	r1, [pc, #232]	; (800e420 <__ieee754_pow+0xa30>)
 800e336:	2000      	movs	r0, #0
 800e338:	f7f1 ffa6 	bl	8000288 <__aeabi_dsub>
 800e33c:	e9cd 0100 	strd	r0, r1, [sp]
 800e340:	9b01      	ldr	r3, [sp, #4]
 800e342:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e34a:	da2f      	bge.n	800e3ac <__ieee754_pow+0x9bc>
 800e34c:	4650      	mov	r0, sl
 800e34e:	ed9d 0b00 	vldr	d0, [sp]
 800e352:	f000 f9cd 	bl	800e6f0 <scalbn>
 800e356:	ec51 0b10 	vmov	r0, r1, d0
 800e35a:	ec53 2b18 	vmov	r2, r3, d8
 800e35e:	f7ff bbe0 	b.w	800db22 <__ieee754_pow+0x132>
 800e362:	4b30      	ldr	r3, [pc, #192]	; (800e424 <__ieee754_pow+0xa34>)
 800e364:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e368:	429e      	cmp	r6, r3
 800e36a:	f77f af0b 	ble.w	800e184 <__ieee754_pow+0x794>
 800e36e:	4b2e      	ldr	r3, [pc, #184]	; (800e428 <__ieee754_pow+0xa38>)
 800e370:	440b      	add	r3, r1
 800e372:	4303      	orrs	r3, r0
 800e374:	d00b      	beq.n	800e38e <__ieee754_pow+0x99e>
 800e376:	a326      	add	r3, pc, #152	; (adr r3, 800e410 <__ieee754_pow+0xa20>)
 800e378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37c:	ec51 0b18 	vmov	r0, r1, d8
 800e380:	f7f2 f93a 	bl	80005f8 <__aeabi_dmul>
 800e384:	a322      	add	r3, pc, #136	; (adr r3, 800e410 <__ieee754_pow+0xa20>)
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	f7ff bbca 	b.w	800db22 <__ieee754_pow+0x132>
 800e38e:	4622      	mov	r2, r4
 800e390:	462b      	mov	r3, r5
 800e392:	f7f1 ff79 	bl	8000288 <__aeabi_dsub>
 800e396:	4642      	mov	r2, r8
 800e398:	464b      	mov	r3, r9
 800e39a:	f7f2 fbb3 	bl	8000b04 <__aeabi_dcmpge>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	f43f aef0 	beq.w	800e184 <__ieee754_pow+0x794>
 800e3a4:	e7e7      	b.n	800e376 <__ieee754_pow+0x986>
 800e3a6:	f04f 0a00 	mov.w	sl, #0
 800e3aa:	e717      	b.n	800e1dc <__ieee754_pow+0x7ec>
 800e3ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	e7d2      	b.n	800e35a <__ieee754_pow+0x96a>
 800e3b4:	491a      	ldr	r1, [pc, #104]	; (800e420 <__ieee754_pow+0xa30>)
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	f7ff bb9e 	b.w	800daf8 <__ieee754_pow+0x108>
 800e3bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3c0:	f7ff bb9a 	b.w	800daf8 <__ieee754_pow+0x108>
 800e3c4:	9000      	str	r0, [sp, #0]
 800e3c6:	f7ff bb76 	b.w	800dab6 <__ieee754_pow+0xc6>
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	f7ff bb60 	b.w	800da90 <__ieee754_pow+0xa0>
 800e3d0:	00000000 	.word	0x00000000
 800e3d4:	3fe62e43 	.word	0x3fe62e43
 800e3d8:	fefa39ef 	.word	0xfefa39ef
 800e3dc:	3fe62e42 	.word	0x3fe62e42
 800e3e0:	0ca86c39 	.word	0x0ca86c39
 800e3e4:	be205c61 	.word	0xbe205c61
 800e3e8:	72bea4d0 	.word	0x72bea4d0
 800e3ec:	3e663769 	.word	0x3e663769
 800e3f0:	c5d26bf1 	.word	0xc5d26bf1
 800e3f4:	3ebbbd41 	.word	0x3ebbbd41
 800e3f8:	af25de2c 	.word	0xaf25de2c
 800e3fc:	3f11566a 	.word	0x3f11566a
 800e400:	16bebd93 	.word	0x16bebd93
 800e404:	3f66c16c 	.word	0x3f66c16c
 800e408:	5555553e 	.word	0x5555553e
 800e40c:	3fc55555 	.word	0x3fc55555
 800e410:	c2f8f359 	.word	0xc2f8f359
 800e414:	01a56e1f 	.word	0x01a56e1f
 800e418:	3fe00000 	.word	0x3fe00000
 800e41c:	000fffff 	.word	0x000fffff
 800e420:	3ff00000 	.word	0x3ff00000
 800e424:	4090cbff 	.word	0x4090cbff
 800e428:	3f6f3400 	.word	0x3f6f3400
 800e42c:	652b82fe 	.word	0x652b82fe
 800e430:	3c971547 	.word	0x3c971547

0800e434 <__ieee754_sqrt>:
 800e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e438:	ec55 4b10 	vmov	r4, r5, d0
 800e43c:	4e56      	ldr	r6, [pc, #344]	; (800e598 <__ieee754_sqrt+0x164>)
 800e43e:	43ae      	bics	r6, r5
 800e440:	ee10 0a10 	vmov	r0, s0
 800e444:	ee10 3a10 	vmov	r3, s0
 800e448:	4629      	mov	r1, r5
 800e44a:	462a      	mov	r2, r5
 800e44c:	d110      	bne.n	800e470 <__ieee754_sqrt+0x3c>
 800e44e:	ee10 2a10 	vmov	r2, s0
 800e452:	462b      	mov	r3, r5
 800e454:	f7f2 f8d0 	bl	80005f8 <__aeabi_dmul>
 800e458:	4602      	mov	r2, r0
 800e45a:	460b      	mov	r3, r1
 800e45c:	4620      	mov	r0, r4
 800e45e:	4629      	mov	r1, r5
 800e460:	f7f1 ff14 	bl	800028c <__adddf3>
 800e464:	4604      	mov	r4, r0
 800e466:	460d      	mov	r5, r1
 800e468:	ec45 4b10 	vmov	d0, r4, r5
 800e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e470:	2d00      	cmp	r5, #0
 800e472:	dc10      	bgt.n	800e496 <__ieee754_sqrt+0x62>
 800e474:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e478:	4330      	orrs	r0, r6
 800e47a:	d0f5      	beq.n	800e468 <__ieee754_sqrt+0x34>
 800e47c:	b15d      	cbz	r5, 800e496 <__ieee754_sqrt+0x62>
 800e47e:	ee10 2a10 	vmov	r2, s0
 800e482:	462b      	mov	r3, r5
 800e484:	ee10 0a10 	vmov	r0, s0
 800e488:	f7f1 fefe 	bl	8000288 <__aeabi_dsub>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	f7f2 f9dc 	bl	800084c <__aeabi_ddiv>
 800e494:	e7e6      	b.n	800e464 <__ieee754_sqrt+0x30>
 800e496:	1509      	asrs	r1, r1, #20
 800e498:	d076      	beq.n	800e588 <__ieee754_sqrt+0x154>
 800e49a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e49e:	07ce      	lsls	r6, r1, #31
 800e4a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e4a4:	bf5e      	ittt	pl
 800e4a6:	0fda      	lsrpl	r2, r3, #31
 800e4a8:	005b      	lslpl	r3, r3, #1
 800e4aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e4ae:	0fda      	lsrs	r2, r3, #31
 800e4b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e4b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	106d      	asrs	r5, r5, #1
 800e4bc:	005b      	lsls	r3, r3, #1
 800e4be:	f04f 0e16 	mov.w	lr, #22
 800e4c2:	4684      	mov	ip, r0
 800e4c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e4c8:	eb0c 0401 	add.w	r4, ip, r1
 800e4cc:	4294      	cmp	r4, r2
 800e4ce:	bfde      	ittt	le
 800e4d0:	1b12      	suble	r2, r2, r4
 800e4d2:	eb04 0c01 	addle.w	ip, r4, r1
 800e4d6:	1840      	addle	r0, r0, r1
 800e4d8:	0052      	lsls	r2, r2, #1
 800e4da:	f1be 0e01 	subs.w	lr, lr, #1
 800e4de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e4e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e4e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4ea:	d1ed      	bne.n	800e4c8 <__ieee754_sqrt+0x94>
 800e4ec:	4671      	mov	r1, lr
 800e4ee:	2720      	movs	r7, #32
 800e4f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e4f4:	4562      	cmp	r2, ip
 800e4f6:	eb04 060e 	add.w	r6, r4, lr
 800e4fa:	dc02      	bgt.n	800e502 <__ieee754_sqrt+0xce>
 800e4fc:	d113      	bne.n	800e526 <__ieee754_sqrt+0xf2>
 800e4fe:	429e      	cmp	r6, r3
 800e500:	d811      	bhi.n	800e526 <__ieee754_sqrt+0xf2>
 800e502:	2e00      	cmp	r6, #0
 800e504:	eb06 0e04 	add.w	lr, r6, r4
 800e508:	da43      	bge.n	800e592 <__ieee754_sqrt+0x15e>
 800e50a:	f1be 0f00 	cmp.w	lr, #0
 800e50e:	db40      	blt.n	800e592 <__ieee754_sqrt+0x15e>
 800e510:	f10c 0801 	add.w	r8, ip, #1
 800e514:	eba2 020c 	sub.w	r2, r2, ip
 800e518:	429e      	cmp	r6, r3
 800e51a:	bf88      	it	hi
 800e51c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e520:	1b9b      	subs	r3, r3, r6
 800e522:	4421      	add	r1, r4
 800e524:	46c4      	mov	ip, r8
 800e526:	0052      	lsls	r2, r2, #1
 800e528:	3f01      	subs	r7, #1
 800e52a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e52e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e532:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e536:	d1dd      	bne.n	800e4f4 <__ieee754_sqrt+0xc0>
 800e538:	4313      	orrs	r3, r2
 800e53a:	d006      	beq.n	800e54a <__ieee754_sqrt+0x116>
 800e53c:	1c4c      	adds	r4, r1, #1
 800e53e:	bf13      	iteet	ne
 800e540:	3101      	addne	r1, #1
 800e542:	3001      	addeq	r0, #1
 800e544:	4639      	moveq	r1, r7
 800e546:	f021 0101 	bicne.w	r1, r1, #1
 800e54a:	1043      	asrs	r3, r0, #1
 800e54c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e550:	0849      	lsrs	r1, r1, #1
 800e552:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e556:	07c2      	lsls	r2, r0, #31
 800e558:	bf48      	it	mi
 800e55a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e55e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e562:	460c      	mov	r4, r1
 800e564:	463d      	mov	r5, r7
 800e566:	e77f      	b.n	800e468 <__ieee754_sqrt+0x34>
 800e568:	0ada      	lsrs	r2, r3, #11
 800e56a:	3815      	subs	r0, #21
 800e56c:	055b      	lsls	r3, r3, #21
 800e56e:	2a00      	cmp	r2, #0
 800e570:	d0fa      	beq.n	800e568 <__ieee754_sqrt+0x134>
 800e572:	02d7      	lsls	r7, r2, #11
 800e574:	d50a      	bpl.n	800e58c <__ieee754_sqrt+0x158>
 800e576:	f1c1 0420 	rsb	r4, r1, #32
 800e57a:	fa23 f404 	lsr.w	r4, r3, r4
 800e57e:	1e4d      	subs	r5, r1, #1
 800e580:	408b      	lsls	r3, r1
 800e582:	4322      	orrs	r2, r4
 800e584:	1b41      	subs	r1, r0, r5
 800e586:	e788      	b.n	800e49a <__ieee754_sqrt+0x66>
 800e588:	4608      	mov	r0, r1
 800e58a:	e7f0      	b.n	800e56e <__ieee754_sqrt+0x13a>
 800e58c:	0052      	lsls	r2, r2, #1
 800e58e:	3101      	adds	r1, #1
 800e590:	e7ef      	b.n	800e572 <__ieee754_sqrt+0x13e>
 800e592:	46e0      	mov	r8, ip
 800e594:	e7be      	b.n	800e514 <__ieee754_sqrt+0xe0>
 800e596:	bf00      	nop
 800e598:	7ff00000 	.word	0x7ff00000

0800e59c <fabs>:
 800e59c:	ec51 0b10 	vmov	r0, r1, d0
 800e5a0:	ee10 2a10 	vmov	r2, s0
 800e5a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e5a8:	ec43 2b10 	vmov	d0, r2, r3
 800e5ac:	4770      	bx	lr

0800e5ae <finite>:
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	ed8d 0b00 	vstr	d0, [sp]
 800e5b4:	9801      	ldr	r0, [sp, #4]
 800e5b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e5ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e5be:	0fc0      	lsrs	r0, r0, #31
 800e5c0:	b002      	add	sp, #8
 800e5c2:	4770      	bx	lr
 800e5c4:	0000      	movs	r0, r0
	...

0800e5c8 <nan>:
 800e5c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e5d0 <nan+0x8>
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	00000000 	.word	0x00000000
 800e5d4:	7ff80000 	.word	0x7ff80000

0800e5d8 <rint>:
 800e5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5da:	ec51 0b10 	vmov	r0, r1, d0
 800e5de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e5e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e5e6:	2e13      	cmp	r6, #19
 800e5e8:	ee10 4a10 	vmov	r4, s0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e5f2:	dc58      	bgt.n	800e6a6 <rint+0xce>
 800e5f4:	2e00      	cmp	r6, #0
 800e5f6:	da2b      	bge.n	800e650 <rint+0x78>
 800e5f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e5fc:	4302      	orrs	r2, r0
 800e5fe:	d023      	beq.n	800e648 <rint+0x70>
 800e600:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e604:	4302      	orrs	r2, r0
 800e606:	4254      	negs	r4, r2
 800e608:	4314      	orrs	r4, r2
 800e60a:	0c4b      	lsrs	r3, r1, #17
 800e60c:	0b24      	lsrs	r4, r4, #12
 800e60e:	045b      	lsls	r3, r3, #17
 800e610:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e614:	ea44 0103 	orr.w	r1, r4, r3
 800e618:	4b32      	ldr	r3, [pc, #200]	; (800e6e4 <rint+0x10c>)
 800e61a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e61e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e622:	4602      	mov	r2, r0
 800e624:	460b      	mov	r3, r1
 800e626:	4630      	mov	r0, r6
 800e628:	4639      	mov	r1, r7
 800e62a:	f7f1 fe2f 	bl	800028c <__adddf3>
 800e62e:	e9cd 0100 	strd	r0, r1, [sp]
 800e632:	463b      	mov	r3, r7
 800e634:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e638:	4632      	mov	r2, r6
 800e63a:	f7f1 fe25 	bl	8000288 <__aeabi_dsub>
 800e63e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e642:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e646:	4639      	mov	r1, r7
 800e648:	ec41 0b10 	vmov	d0, r0, r1
 800e64c:	b003      	add	sp, #12
 800e64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e650:	4a25      	ldr	r2, [pc, #148]	; (800e6e8 <rint+0x110>)
 800e652:	4132      	asrs	r2, r6
 800e654:	ea01 0702 	and.w	r7, r1, r2
 800e658:	4307      	orrs	r7, r0
 800e65a:	d0f5      	beq.n	800e648 <rint+0x70>
 800e65c:	0851      	lsrs	r1, r2, #1
 800e65e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e662:	4314      	orrs	r4, r2
 800e664:	d00c      	beq.n	800e680 <rint+0xa8>
 800e666:	ea23 0201 	bic.w	r2, r3, r1
 800e66a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e66e:	2e13      	cmp	r6, #19
 800e670:	fa43 f606 	asr.w	r6, r3, r6
 800e674:	bf0c      	ite	eq
 800e676:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e67a:	2400      	movne	r4, #0
 800e67c:	ea42 0306 	orr.w	r3, r2, r6
 800e680:	4918      	ldr	r1, [pc, #96]	; (800e6e4 <rint+0x10c>)
 800e682:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e686:	4622      	mov	r2, r4
 800e688:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e68c:	4620      	mov	r0, r4
 800e68e:	4629      	mov	r1, r5
 800e690:	f7f1 fdfc 	bl	800028c <__adddf3>
 800e694:	e9cd 0100 	strd	r0, r1, [sp]
 800e698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e69c:	4622      	mov	r2, r4
 800e69e:	462b      	mov	r3, r5
 800e6a0:	f7f1 fdf2 	bl	8000288 <__aeabi_dsub>
 800e6a4:	e7d0      	b.n	800e648 <rint+0x70>
 800e6a6:	2e33      	cmp	r6, #51	; 0x33
 800e6a8:	dd07      	ble.n	800e6ba <rint+0xe2>
 800e6aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e6ae:	d1cb      	bne.n	800e648 <rint+0x70>
 800e6b0:	ee10 2a10 	vmov	r2, s0
 800e6b4:	f7f1 fdea 	bl	800028c <__adddf3>
 800e6b8:	e7c6      	b.n	800e648 <rint+0x70>
 800e6ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e6be:	f04f 36ff 	mov.w	r6, #4294967295
 800e6c2:	40d6      	lsrs	r6, r2
 800e6c4:	4230      	tst	r0, r6
 800e6c6:	d0bf      	beq.n	800e648 <rint+0x70>
 800e6c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e6cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e6d0:	bf1f      	itttt	ne
 800e6d2:	ea24 0101 	bicne.w	r1, r4, r1
 800e6d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e6da:	fa44 f202 	asrne.w	r2, r4, r2
 800e6de:	ea41 0402 	orrne.w	r4, r1, r2
 800e6e2:	e7cd      	b.n	800e680 <rint+0xa8>
 800e6e4:	080e9f00 	.word	0x080e9f00
 800e6e8:	000fffff 	.word	0x000fffff
 800e6ec:	00000000 	.word	0x00000000

0800e6f0 <scalbn>:
 800e6f0:	b570      	push	{r4, r5, r6, lr}
 800e6f2:	ec55 4b10 	vmov	r4, r5, d0
 800e6f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e6fa:	4606      	mov	r6, r0
 800e6fc:	462b      	mov	r3, r5
 800e6fe:	b99a      	cbnz	r2, 800e728 <scalbn+0x38>
 800e700:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e704:	4323      	orrs	r3, r4
 800e706:	d036      	beq.n	800e776 <scalbn+0x86>
 800e708:	4b39      	ldr	r3, [pc, #228]	; (800e7f0 <scalbn+0x100>)
 800e70a:	4629      	mov	r1, r5
 800e70c:	ee10 0a10 	vmov	r0, s0
 800e710:	2200      	movs	r2, #0
 800e712:	f7f1 ff71 	bl	80005f8 <__aeabi_dmul>
 800e716:	4b37      	ldr	r3, [pc, #220]	; (800e7f4 <scalbn+0x104>)
 800e718:	429e      	cmp	r6, r3
 800e71a:	4604      	mov	r4, r0
 800e71c:	460d      	mov	r5, r1
 800e71e:	da10      	bge.n	800e742 <scalbn+0x52>
 800e720:	a32b      	add	r3, pc, #172	; (adr r3, 800e7d0 <scalbn+0xe0>)
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	e03a      	b.n	800e79e <scalbn+0xae>
 800e728:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e72c:	428a      	cmp	r2, r1
 800e72e:	d10c      	bne.n	800e74a <scalbn+0x5a>
 800e730:	ee10 2a10 	vmov	r2, s0
 800e734:	4620      	mov	r0, r4
 800e736:	4629      	mov	r1, r5
 800e738:	f7f1 fda8 	bl	800028c <__adddf3>
 800e73c:	4604      	mov	r4, r0
 800e73e:	460d      	mov	r5, r1
 800e740:	e019      	b.n	800e776 <scalbn+0x86>
 800e742:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e746:	460b      	mov	r3, r1
 800e748:	3a36      	subs	r2, #54	; 0x36
 800e74a:	4432      	add	r2, r6
 800e74c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e750:	428a      	cmp	r2, r1
 800e752:	dd08      	ble.n	800e766 <scalbn+0x76>
 800e754:	2d00      	cmp	r5, #0
 800e756:	a120      	add	r1, pc, #128	; (adr r1, 800e7d8 <scalbn+0xe8>)
 800e758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e75c:	da1c      	bge.n	800e798 <scalbn+0xa8>
 800e75e:	a120      	add	r1, pc, #128	; (adr r1, 800e7e0 <scalbn+0xf0>)
 800e760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e764:	e018      	b.n	800e798 <scalbn+0xa8>
 800e766:	2a00      	cmp	r2, #0
 800e768:	dd08      	ble.n	800e77c <scalbn+0x8c>
 800e76a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e76e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e772:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e776:	ec45 4b10 	vmov	d0, r4, r5
 800e77a:	bd70      	pop	{r4, r5, r6, pc}
 800e77c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e780:	da19      	bge.n	800e7b6 <scalbn+0xc6>
 800e782:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e786:	429e      	cmp	r6, r3
 800e788:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e78c:	dd0a      	ble.n	800e7a4 <scalbn+0xb4>
 800e78e:	a112      	add	r1, pc, #72	; (adr r1, 800e7d8 <scalbn+0xe8>)
 800e790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1e2      	bne.n	800e75e <scalbn+0x6e>
 800e798:	a30f      	add	r3, pc, #60	; (adr r3, 800e7d8 <scalbn+0xe8>)
 800e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79e:	f7f1 ff2b 	bl	80005f8 <__aeabi_dmul>
 800e7a2:	e7cb      	b.n	800e73c <scalbn+0x4c>
 800e7a4:	a10a      	add	r1, pc, #40	; (adr r1, 800e7d0 <scalbn+0xe0>)
 800e7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d0b8      	beq.n	800e720 <scalbn+0x30>
 800e7ae:	a10e      	add	r1, pc, #56	; (adr r1, 800e7e8 <scalbn+0xf8>)
 800e7b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7b4:	e7b4      	b.n	800e720 <scalbn+0x30>
 800e7b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e7ba:	3236      	adds	r2, #54	; 0x36
 800e7bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e7c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	4b0c      	ldr	r3, [pc, #48]	; (800e7f8 <scalbn+0x108>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	e7e8      	b.n	800e79e <scalbn+0xae>
 800e7cc:	f3af 8000 	nop.w
 800e7d0:	c2f8f359 	.word	0xc2f8f359
 800e7d4:	01a56e1f 	.word	0x01a56e1f
 800e7d8:	8800759c 	.word	0x8800759c
 800e7dc:	7e37e43c 	.word	0x7e37e43c
 800e7e0:	8800759c 	.word	0x8800759c
 800e7e4:	fe37e43c 	.word	0xfe37e43c
 800e7e8:	c2f8f359 	.word	0xc2f8f359
 800e7ec:	81a56e1f 	.word	0x81a56e1f
 800e7f0:	43500000 	.word	0x43500000
 800e7f4:	ffff3cb0 	.word	0xffff3cb0
 800e7f8:	3c900000 	.word	0x3c900000

0800e7fc <_init>:
 800e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fe:	bf00      	nop
 800e800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e802:	bc08      	pop	{r3}
 800e804:	469e      	mov	lr, r3
 800e806:	4770      	bx	lr

0800e808 <_fini>:
 800e808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80a:	bf00      	nop
 800e80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e80e:	bc08      	pop	{r3}
 800e810:	469e      	mov	lr, r3
 800e812:	4770      	bx	lr
