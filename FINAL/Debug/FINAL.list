
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000db6f8  0800e740  0800e740  0001e740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e9e38  080e9e38  00100114  2**0
                  CONTENTS
  4 .ARM          00000008  080e9e38  080e9e38  000f9e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080e9e40  080e9e40  00100114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e9e40  080e9e40  000f9e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e9e44  080e9e44  000f9e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080e9e48  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00100114  2**0
                  CONTENTS
 10 .bss          000004c8  20000114  20000114  00100114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005dc  200005dc  00100114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00100114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b521  00000000  00000000  00100144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000565f  00000000  00000000  0012b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  00130cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001890  00000000  00000000  001327c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a71  00000000  00000000  00134058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f17  00000000  00000000  0015dac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e26ec  00000000  00000000  001839e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002660cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a68  00000000  00000000  00266120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e724 	.word	0x0800e724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	0800e724 	.word	0x0800e724

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <MX_ADC1_Init+0x108>)
 8000f94:	4a3d      	ldr	r2, [pc, #244]	; (800108c <MX_ADC1_Init+0x10c>)
 8000f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_ADC1_Init+0x108>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fc0:	4a33      	ldr	r2, [pc, #204]	; (8001090 <MX_ADC1_Init+0x110>)
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fcc:	2205      	movs	r2, #5
 8000fce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fe0:	f005 fdbc 	bl	8006b5c <HAL_ADC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f003 fc69 	bl	80048c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4822      	ldr	r0, [pc, #136]	; (8001088 <MX_ADC1_Init+0x108>)
 8001000:	f005 ff1e 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100a:	f003 fc59 	bl	80048c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800100e:	2309      	movs	r3, #9
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	481b      	ldr	r0, [pc, #108]	; (8001088 <MX_ADC1_Init+0x108>)
 800101c:	f005 ff10 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001026:	f003 fc4b 	bl	80048c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800102a:	230a      	movs	r3, #10
 800102c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	; (8001088 <MX_ADC1_Init+0x108>)
 8001038:	f005 ff02 	bl	8006e40 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001042:	f003 fc3d 	bl	80048c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001046:	230b      	movs	r3, #11
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_ADC1_Init+0x108>)
 8001054:	f005 fef4 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800105e:	f003 fc2f 	bl	80048c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001062:	230c      	movs	r3, #12
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001066:	2305      	movs	r3, #5
 8001068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_ADC1_Init+0x108>)
 8001070:	f005 fee6 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800107a:	f003 fc21 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001a8 	.word	0x200001a8
 800108c:	40012000 	.word	0x40012000
 8001090:	0f000001 	.word	0x0f000001

08001094 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	at24c_Check();
 8001098:	f000 f83c 	bl	8001114 <at24c_Check>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	230a      	movs	r3, #10
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 030f 	add.w	r3, r7, #15
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2310      	movs	r3, #16
 80010c0:	21a0      	movs	r1, #160	; 0xa0
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <at24c_ReadOneByte+0x34>)
 80010c4:	f007 fa7c 	bl	80085c0 <HAL_I2C_Mem_Read>
	return temp;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000314 	.word	0x20000314

080010d8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af04      	add	r7, sp, #16
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	80fb      	strh	r3, [r7, #6]
 80010e4:	4613      	mov	r3, r2
 80010e6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80010e8:	88fa      	ldrh	r2, [r7, #6]
 80010ea:	230a      	movs	r3, #10
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	1d7b      	adds	r3, r7, #5
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2310      	movs	r3, #16
 80010f8:	21a0      	movs	r1, #160	; 0xa0
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <at24c_WriteOneByte+0x38>)
 80010fc:	f007 f966 	bl	80083cc <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001100:	2005      	movs	r0, #5
 8001102:	f005 fd07 	bl	8006b14 <HAL_Delay>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000314 	.word	0x20000314

08001114 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800111a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800111e:	f7ff ffbf 	bl	80010a0 <at24c_ReadOneByte>
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b55      	cmp	r3, #85	; 0x55
 800112a:	d101      	bne.n	8001130 <at24c_Check+0x1c>
 800112c:	2300      	movs	r3, #0
 800112e:	e010      	b.n	8001152 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001130:	2155      	movs	r1, #85	; 0x55
 8001132:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001136:	f7ff ffcf 	bl	80010d8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800113a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800113e:	f7ff ffaf 	bl	80010a0 <at24c_ReadOneByte>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b55      	cmp	r3, #85	; 0x55
 800114a:	d101      	bne.n	8001150 <at24c_Check+0x3c>
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <at24c_Check+0x3e>
	}
	return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800115a:	b590      	push	{r4, r7, lr}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	6039      	str	r1, [r7, #0]
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4613      	mov	r3, r2
 8001168:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800116a:	e00d      	b.n	8001188 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	80fa      	strh	r2, [r7, #6]
 8001172:	683c      	ldr	r4, [r7, #0]
 8001174:	1c62      	adds	r2, r4, #1
 8001176:	603a      	str	r2, [r7, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff91 	bl	80010a0 <at24c_ReadOneByte>
 800117e:	4603      	mov	r3, r0
 8001180:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001182:	88bb      	ldrh	r3, [r7, #4]
 8001184:	3b01      	subs	r3, #1
 8001186:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ee      	bne.n	800116c <at24c_Read+0x12>
	}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}

08001198 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011a8:	e00c      	b.n	80011c4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff90 	bl	80010d8 <at24c_WriteOneByte>
		WriteAddr++;
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	3301      	adds	r3, #1
 80011bc:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	80ba      	strh	r2, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ed      	bne.n	80011aa <at24c_Write+0x12>
	}
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	2108      	movs	r1, #8
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <button_init+0x14>)
 80011e2:	f006 ff95 	bl	8008110 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020c00 	.word	0x40020c00

080011f0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2108      	movs	r1, #8
 80011fa:	482f      	ldr	r0, [pc, #188]	; (80012b8 <button_Scan+0xc8>)
 80011fc:	f006 ff88 	bl	8008110 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	2108      	movs	r1, #8
 8001204:	482c      	ldr	r0, [pc, #176]	; (80012b8 <button_Scan+0xc8>)
 8001206:	f006 ff83 	bl	8008110 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800120a:	230a      	movs	r3, #10
 800120c:	2202      	movs	r2, #2
 800120e:	492b      	ldr	r1, [pc, #172]	; (80012bc <button_Scan+0xcc>)
 8001210:	482b      	ldr	r0, [pc, #172]	; (80012c0 <button_Scan+0xd0>)
 8001212:	f008 fd90 	bl	8009d36 <HAL_SPI_Receive>
	  int button_index = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800121a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	e03f      	b.n	80012a6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db06      	blt.n	800123a <button_Scan+0x4a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b03      	cmp	r3, #3
 8001230:	dc03      	bgt.n	800123a <button_Scan+0x4a>
			  button_index = i + 4;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e018      	b.n	800126c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b03      	cmp	r3, #3
 800123e:	dd07      	ble.n	8001250 <button_Scan+0x60>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b07      	cmp	r3, #7
 8001244:	dc04      	bgt.n	8001250 <button_Scan+0x60>
			  button_index = 7 - i;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f1c3 0307 	rsb	r3, r3, #7
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e00d      	b.n	800126c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b07      	cmp	r3, #7
 8001254:	dd06      	ble.n	8001264 <button_Scan+0x74>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0b      	cmp	r3, #11
 800125a:	dc03      	bgt.n	8001264 <button_Scan+0x74>
			  button_index = i + 4;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3304      	adds	r3, #4
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e003      	b.n	800126c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1c3 0317 	rsb	r3, r3, #23
 800126a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <button_Scan+0xcc>)
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	897b      	ldrh	r3, [r7, #10]
 8001272:	4013      	ands	r3, r2
 8001274:	b29b      	uxth	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <button_Scan+0x96>
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <button_Scan+0xd4>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2100      	movs	r1, #0
 8001280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001284:	e009      	b.n	800129a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <button_Scan+0xd4>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128e:	3301      	adds	r3, #1
 8001290:	b299      	uxth	r1, r3
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <button_Scan+0xd4>)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800129a:	897b      	ldrh	r3, [r7, #10]
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	ddbc      	ble.n	8001226 <button_Scan+0x36>
	  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	20000130 	.word	0x20000130
 80012c0:	20000410 	.word	0x20000410
 80012c4:	200001f0 	.word	0x200001f0

080012c8 <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_DMA_Init+0x3c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <MX_DMA_Init+0x3c>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_DMA_Init+0x3c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2038      	movs	r0, #56	; 0x38
 80012f0:	f006 f921 	bl	8007536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f4:	2038      	movs	r0, #56	; 0x38
 80012f6:	f006 f93a 	bl	800756e <HAL_NVIC_EnableIRQ>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <user_esp>:

uint32_t counter_sensor = 0;
uint8_t temp_user = 0;
uint8_t light = 0;

void user_esp(){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if (flag_user == FLAG_PLAYING){
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <user_esp+0x40>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10b      	bne.n	800132c <user_esp+0x24>
		if (temp_user == 0) {
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <user_esp+0x44>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d112      	bne.n	8001342 <user_esp+0x3a>
			uart_EspSendBytes("A", 1);
 800131c:	2101      	movs	r1, #1
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <user_esp+0x48>)
 8001320:	f005 fa12 	bl	8006748 <uart_EspSendBytes>
			temp_user = 1;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <user_esp+0x44>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
//	if(light == 1){
//		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
//	} else {
//		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
//	}
}
 800132a:	e00a      	b.n	8001342 <user_esp+0x3a>
		if (temp_user == 1){
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <user_esp+0x44>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <user_esp+0x3a>
			uart_EspSendBytes("a", 1);
 8001334:	2101      	movs	r1, #1
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <user_esp+0x4c>)
 8001338:	f005 fa06 	bl	8006748 <uart_EspSendBytes>
			temp_user = 0;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <user_esp+0x44>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000154 	.word	0x20000154
 800134c:	20000138 	.word	0x20000138
 8001350:	0800e740 	.word	0x0800e740
 8001354:	0800e744 	.word	0x0800e744

08001358 <sensor_esp>:

void sensor_esp(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	if (++counter_sensor % 100 == 0 ){
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <sensor_esp+0x50>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <sensor_esp+0x50>)
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <sensor_esp+0x50>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <sensor_esp+0x54>)
 800136c:	fba3 1302 	umull	r1, r3, r3, r2
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	2164      	movs	r1, #100	; 0x64
 8001374:	fb01 f303 	mul.w	r3, r1, r3
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d112      	bne.n	80013a4 <sensor_esp+0x4c>
		counter_sensor = 0;
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <sensor_esp+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
		uart_EspSendBytes("L", 1);
 8001384:	2101      	movs	r1, #1
 8001386:	480a      	ldr	r0, [pc, #40]	; (80013b0 <sensor_esp+0x58>)
 8001388:	f005 f9de 	bl	8006748 <uart_EspSendBytes>
		uart_EspSendBytes(current_light, 4);
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <sensor_esp+0x5c>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2104      	movs	r1, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f005 f9d8 	bl	8006748 <uart_EspSendBytes>
		uart_EspSendBytes(current_hum, 2);
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <sensor_esp+0x60>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	2102      	movs	r1, #2
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 f9d2 	bl	8006748 <uart_EspSendBytes>
		//uart_EspSendBytes(current_temp, 1);
	}
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000134 	.word	0x20000134
 80013ac:	51eb851f 	.word	0x51eb851f
 80013b0:	0800e748 	.word	0x0800e748
 80013b4:	2000000a 	.word	0x2000000a
 80013b8:	20000008 	.word	0x20000008

080013bc <process_esp>:

void process_esp(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	user_esp();
 80013c0:	f7ff ffa2 	bl	8001308 <user_esp>
	sensor_esp();
 80013c4:	f7ff ffc8 	bl	8001358 <sensor_esp>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <clr_confirm>:

#include "fsm.h"

uint8_t confirm[4] = {0, 0, 0, 0};

void clr_confirm(){
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	e007      	b.n	80013e8 <clr_confirm+0x1c>
		confirm[i] = 0;
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <clr_confirm+0x30>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3301      	adds	r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	ddf4      	ble.n	80013d8 <clr_confirm+0xc>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	2000013c 	.word	0x2000013c

08001400 <temp_game>:

void temp_game(){
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	tempFlag = 1;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <temp_game+0x2c>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]
	tempStatus = status;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <temp_game+0x30>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <temp_game+0x34>)
 8001410:	6013      	str	r3, [r2, #0]
	tempMove = move;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <temp_game+0x38>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <temp_game+0x3c>)
 8001418:	6013      	str	r3, [r2, #0]
	flag_user = FLAG_PAUSE;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <temp_game+0x40>)
 800141c:	2203      	movs	r2, #3
 800141e:	701a      	strb	r2, [r3, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000016c 	.word	0x2000016c
 8001430:	2000015c 	.word	0x2000015c
 8001434:	20000170 	.word	0x20000170
 8001438:	20000160 	.word	0x20000160
 800143c:	20000174 	.word	0x20000174
 8001440:	20000154 	.word	0x20000154

08001444 <continue_game>:

void continue_game(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	if(tempFlag == 1){
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <continue_game+0x38>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d113      	bne.n	8001478 <continue_game+0x34>
		status = tempStatus;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <continue_game+0x3c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <continue_game+0x40>)
 8001456:	6013      	str	r3, [r2, #0]
		move = tempMove;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <continue_game+0x44>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <continue_game+0x48>)
 800145e:	6013      	str	r3, [r2, #0]
		reDraw_snake();
 8001460:	f003 fc38 	bl	8004cd4 <reDraw_snake>
		point_food_lcd(food);
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <continue_game+0x4c>)
 8001466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800146a:	f002 f89e 	bl	80035aa <point_food_lcd>
		score_lcd();
 800146e:	f001 fb59 	bl	8002b24 <score_lcd>
		flag_user = FLAG_PLAYING;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <continue_game+0x50>)
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
	}
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000016c 	.word	0x2000016c
 8001480:	20000170 	.word	0x20000170
 8001484:	2000015c 	.word	0x2000015c
 8001488:	20000174 	.word	0x20000174
 800148c:	20000160 	.word	0x20000160
 8001490:	20000050 	.word	0x20000050
 8001494:	20000154 	.word	0x20000154

08001498 <input_inGame>:

void input_inGame(){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if((is_touch_right() == 1 || button_count[6] == 1) && move != LEFT){
 800149c:	f000 fd4c 	bl	8001f38 <is_touch_right>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d003      	beq.n	80014ae <input_inGame+0x16>
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <input_inGame+0xb8>)
 80014a8:	899b      	ldrh	r3, [r3, #12]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <input_inGame+0x26>
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <input_inGame+0xbc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d003      	beq.n	80014be <input_inGame+0x26>
		move = RIGHT;
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <input_inGame+0xbc>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e046      	b.n	800154c <input_inGame+0xb4>
	}else if((is_touch_left() == 1 || button_count[4] == 1) && move != RIGHT){
 80014be:	f000 fd5f 	bl	8001f80 <is_touch_left>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d003      	beq.n	80014d0 <input_inGame+0x38>
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <input_inGame+0xb8>)
 80014ca:	891b      	ldrh	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <input_inGame+0x48>
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <input_inGame+0xbc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d003      	beq.n	80014e0 <input_inGame+0x48>
		move = LEFT;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <input_inGame+0xbc>)
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e035      	b.n	800154c <input_inGame+0xb4>
	}else if((is_touch_up() == 1 || button_count[1] == 1) && move != DOWN){
 80014e0:	f000 fd72 	bl	8001fc8 <is_touch_up>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <input_inGame+0x5a>
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <input_inGame+0xb8>)
 80014ec:	885b      	ldrh	r3, [r3, #2]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <input_inGame+0x6a>
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <input_inGame+0xbc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d003      	beq.n	8001502 <input_inGame+0x6a>
		move = UP;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <input_inGame+0xbc>)
 80014fc:	2203      	movs	r2, #3
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e024      	b.n	800154c <input_inGame+0xb4>
	}else if((is_touch_down() == 1 || button_count[9] == 1) && move != UP){
 8001502:	f000 fd83 	bl	800200c <is_touch_down>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d003      	beq.n	8001514 <input_inGame+0x7c>
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <input_inGame+0xb8>)
 800150e:	8a5b      	ldrh	r3, [r3, #18]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <input_inGame+0x8c>
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <input_inGame+0xbc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d003      	beq.n	8001524 <input_inGame+0x8c>
		move = DOWN;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <input_inGame+0xbc>)
 800151e:	2204      	movs	r2, #4
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e013      	b.n	800154c <input_inGame+0xb4>
	}else if(is_touch_pause() == 1 || button_count[5] == 1){
 8001524:	f000 fdfd 	bl	8002122 <is_touch_pause>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d003      	beq.n	8001536 <input_inGame+0x9e>
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <input_inGame+0xb8>)
 8001530:	895b      	ldrh	r3, [r3, #10]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d10a      	bne.n	800154c <input_inGame+0xb4>
		temp_game();
 8001536:	f7ff ff63 	bl	8001400 <temp_game>
		status = PAUSE;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <input_inGame+0xc0>)
 800153c:	220f      	movs	r2, #15
 800153e:	601a      	str	r2, [r3, #0]
		move = NOT;
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <input_inGame+0xbc>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
		pause_lcd();
 8001546:	f001 fb05 	bl	8002b54 <pause_lcd>
	}
}
 800154a:	e7ff      	b.n	800154c <input_inGame+0xb4>
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200001f0 	.word	0x200001f0
 8001554:	20000160 	.word	0x20000160
 8001558:	2000015c 	.word	0x2000015c

0800155c <input_enterName>:

void input_enterName(){
 800155c:	b598      	push	{r3, r4, r7, lr}
 800155e:	af00      	add	r7, sp, #0
	flag_change = 1;
 8001560:	4b8a      	ldr	r3, [pc, #552]	; (800178c <input_enterName+0x230>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
	if(is_touch_char() == 1){
 8001566:	f000 fecd 	bl	8002304 <is_touch_char>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d11a      	bne.n	80015a6 <input_enterName+0x4a>
		index_r = (touch_GetY() - POS_Y_CHAR)/CHAR_HEIGHT;
 8001570:	f005 f8c8 	bl	8006704 <touch_GetY>
 8001574:	4603      	mov	r3, r0
 8001576:	3b7c      	subs	r3, #124	; 0x7c
 8001578:	4a85      	ldr	r2, [pc, #532]	; (8001790 <input_enterName+0x234>)
 800157a:	fb82 1203 	smull	r1, r2, r2, r3
 800157e:	1112      	asrs	r2, r2, #4
 8001580:	17db      	asrs	r3, r3, #31
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b83      	ldr	r3, [pc, #524]	; (8001794 <input_enterName+0x238>)
 8001588:	701a      	strb	r2, [r3, #0]
		index_c = (touch_GetX() - POS_X_CHAR)/CHAR_WIDTH;
 800158a:	f005 f8af 	bl	80066ec <touch_GetX>
 800158e:	4603      	mov	r3, r0
 8001590:	3b06      	subs	r3, #6
 8001592:	4a7f      	ldr	r2, [pc, #508]	; (8001790 <input_enterName+0x234>)
 8001594:	fb82 1203 	smull	r1, r2, r2, r3
 8001598:	1112      	asrs	r2, r2, #4
 800159a:	17db      	asrs	r3, r3, #31
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <input_enterName+0x23c>)
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e04b      	b.n	800163e <input_enterName+0xe2>
	}else{
		if(button_count[1] == 1){
 80015a6:	4b7d      	ldr	r3, [pc, #500]	; (800179c <input_enterName+0x240>)
 80015a8:	885b      	ldrh	r3, [r3, #2]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d10a      	bne.n	80015c4 <input_enterName+0x68>
			if(index_r > 0) index_r--;
 80015ae:	4b79      	ldr	r3, [pc, #484]	; (8001794 <input_enterName+0x238>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d043      	beq.n	800163e <input_enterName+0xe2>
 80015b6:	4b77      	ldr	r3, [pc, #476]	; (8001794 <input_enterName+0x238>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b75      	ldr	r3, [pc, #468]	; (8001794 <input_enterName+0x238>)
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e03c      	b.n	800163e <input_enterName+0xe2>
		}else if(button_count[9] == 1){
 80015c4:	4b75      	ldr	r3, [pc, #468]	; (800179c <input_enterName+0x240>)
 80015c6:	8a5b      	ldrh	r3, [r3, #18]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d10a      	bne.n	80015e2 <input_enterName+0x86>
			if(index_r < CHAR_ROW - 1) index_r++;
 80015cc:	4b71      	ldr	r3, [pc, #452]	; (8001794 <input_enterName+0x238>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d834      	bhi.n	800163e <input_enterName+0xe2>
 80015d4:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <input_enterName+0x238>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b6d      	ldr	r3, [pc, #436]	; (8001794 <input_enterName+0x238>)
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e02d      	b.n	800163e <input_enterName+0xe2>
		}else if(button_count[4] == 1){
 80015e2:	4b6e      	ldr	r3, [pc, #440]	; (800179c <input_enterName+0x240>)
 80015e4:	891b      	ldrh	r3, [r3, #8]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10a      	bne.n	8001600 <input_enterName+0xa4>
			if(index_c > 0) index_c--;
 80015ea:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <input_enterName+0x23c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d025      	beq.n	800163e <input_enterName+0xe2>
 80015f2:	4b69      	ldr	r3, [pc, #420]	; (8001798 <input_enterName+0x23c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <input_enterName+0x23c>)
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e01e      	b.n	800163e <input_enterName+0xe2>
		}else if(button_count[6] == 1){
 8001600:	4b66      	ldr	r3, [pc, #408]	; (800179c <input_enterName+0x240>)
 8001602:	899b      	ldrh	r3, [r3, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d10a      	bne.n	800161e <input_enterName+0xc2>
			if(index_c < CHAR_COL - 1) index_c++;
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <input_enterName+0x23c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d816      	bhi.n	800163e <input_enterName+0xe2>
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <input_enterName+0x23c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <input_enterName+0x23c>)
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e00f      	b.n	800163e <input_enterName+0xe2>
		}else if(button_count[5] == 1){
 800161e:	4b5f      	ldr	r3, [pc, #380]	; (800179c <input_enterName+0x240>)
 8001620:	895b      	ldrh	r3, [r3, #10]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <input_enterName+0xdc>
			index_r = index_r_old;
 8001626:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <input_enterName+0x244>)
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <input_enterName+0x238>)
 800162c:	701a      	strb	r2, [r3, #0]
			index_c = index_c_old;
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <input_enterName+0x248>)
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	4b59      	ldr	r3, [pc, #356]	; (8001798 <input_enterName+0x23c>)
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e002      	b.n	800163e <input_enterName+0xe2>
		}else{
			flag_change = 0;
 8001638:	4b54      	ldr	r3, [pc, #336]	; (800178c <input_enterName+0x230>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(flag_change == 1){
 800163e:	4b53      	ldr	r3, [pc, #332]	; (800178c <input_enterName+0x230>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	f040 80a1 	bne.w	800178a <input_enterName+0x22e>
		if(index_r == index_r_old && index_c == index_c_old){
 8001648:	4b52      	ldr	r3, [pc, #328]	; (8001794 <input_enterName+0x238>)
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <input_enterName+0x244>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8098 	bne.w	8001786 <input_enterName+0x22a>
 8001656:	4b50      	ldr	r3, [pc, #320]	; (8001798 <input_enterName+0x23c>)
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <input_enterName+0x248>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	f040 8091 	bne.w	8001786 <input_enterName+0x22a>
			if(index_r == IDX_R_UPPER && index_c == IDX_C_UPPER){
 8001664:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <input_enterName+0x238>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d113      	bne.n	8001694 <input_enterName+0x138>
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <input_enterName+0x23c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10f      	bne.n	8001694 <input_enterName+0x138>
				if(flag_uppercase == 1){
 8001674:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <input_enterName+0x24c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <input_enterName+0x12c>
					flag_uppercase = 0;
 800167c:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <input_enterName+0x24c>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
					lowercase_lcd();
 8001682:	f001 fc59 	bl	8002f38 <lowercase_lcd>
				if(flag_uppercase == 1){
 8001686:	e07e      	b.n	8001786 <input_enterName+0x22a>
				}else{
					flag_uppercase = 1;
 8001688:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <input_enterName+0x24c>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
					uppercase_lcd();
 800168e:	f001 fc0b 	bl	8002ea8 <uppercase_lcd>
				if(flag_uppercase == 1){
 8001692:	e078      	b.n	8001786 <input_enterName+0x22a>
				}
			}else if(index_r == IDX_R_DEL && index_c == IDX_C_DEL){
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <input_enterName+0x238>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d116      	bne.n	80016ca <input_enterName+0x16e>
 800169c:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <input_enterName+0x23c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d112      	bne.n	80016ca <input_enterName+0x16e>
				if(name_length > 0){
 80016a4:	4b41      	ldr	r3, [pc, #260]	; (80017ac <input_enterName+0x250>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d06c      	beq.n	8001786 <input_enterName+0x22a>
					name_length--;
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <input_enterName+0x250>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <input_enterName+0x250>)
 80016b6:	701a      	strb	r2, [r3, #0]
					name[name_length] = '\0';
 80016b8:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <input_enterName+0x250>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <input_enterName+0x254>)
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]
					displayName_lcd();
 80016c4:	f001 fd04 	bl	80030d0 <displayName_lcd>
				if(name_length > 0){
 80016c8:	e05d      	b.n	8001786 <input_enterName+0x22a>
				}
			}else if(index_r == IDX_R_ENTR && index_c == IDX_C_ENTR){
 80016ca:	4b32      	ldr	r3, [pc, #200]	; (8001794 <input_enterName+0x238>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d122      	bne.n	8001718 <input_enterName+0x1bc>
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <input_enterName+0x23c>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d11e      	bne.n	8001718 <input_enterName+0x1bc>
				if(name_length > 0){
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <input_enterName+0x250>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d051      	beq.n	8001786 <input_enterName+0x22a>
					status = tempStatus;
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <input_enterName+0x258>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a34      	ldr	r2, [pc, #208]	; (80017b8 <input_enterName+0x25c>)
 80016e8:	6013      	str	r3, [r2, #0]
					setTimer3(500);
 80016ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ee:	f003 fb3f 	bl	8004d70 <setTimer3>
					game_lcd();					// Hien thi man hinh choi game
 80016f2:	f001 f92d 	bl	8002950 <game_lcd>
					mode_7seg();				// Ham hien thi che do choi tren led 7seg
 80016f6:	f001 ff7f 	bl	80035f8 <mode_7seg>
					reDraw_snake();				// Ham goi ve con ran
 80016fa:	f003 faeb 	bl	8004cd4 <reDraw_snake>
					point_food_lcd(food);
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <input_enterName+0x260>)
 8001700:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001704:	f001 ff51 	bl	80035aa <point_food_lcd>
					environment_lcd();			// Ham moi truong
 8001708:	f001 f9d4 	bl	8002ab4 <environment_lcd>
					score_lcd();				// Ham diem so
 800170c:	f001 fa0a 	bl	8002b24 <score_lcd>
					flag_user = FLAG_PLAYING;
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <input_enterName+0x264>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
					return;
 8001716:	e038      	b.n	800178a <input_enterName+0x22e>
				}
			}else if(name_length < 10){
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <input_enterName+0x250>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b09      	cmp	r3, #9
 800171e:	d832      	bhi.n	8001786 <input_enterName+0x22a>
				if(flag_uppercase == 1){
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <input_enterName+0x24c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d113      	bne.n	8001750 <input_enterName+0x1f4>
					name[name_length] = char_upper[index_r][index_c];
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <input_enterName+0x238>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <input_enterName+0x23c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461c      	mov	r4, r3
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <input_enterName+0x250>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <input_enterName+0x268>)
 800173c:	460b      	mov	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	4423      	add	r3, r4
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <input_enterName+0x254>)
 800174c:	541a      	strb	r2, [r3, r0]
 800174e:	e012      	b.n	8001776 <input_enterName+0x21a>
				}else{
					name[name_length] = char_lower[index_r][index_c];
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <input_enterName+0x238>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <input_enterName+0x23c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461c      	mov	r4, r3
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <input_enterName+0x250>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <input_enterName+0x26c>)
 8001764:	460b      	mov	r3, r1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	440b      	add	r3, r1
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	4423      	add	r3, r4
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <input_enterName+0x254>)
 8001774:	541a      	strb	r2, [r3, r0]
				}
				name_length++;
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <input_enterName+0x250>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <input_enterName+0x250>)
 8001780:	701a      	strb	r2, [r3, #0]
				displayName_lcd();
 8001782:	f001 fca5 	bl	80030d0 <displayName_lcd>
			}
		}
		selectbox_lcd();
 8001786:	f001 fc1f 	bl	8002fc8 <selectbox_lcd>
	}
}
 800178a:	bd98      	pop	{r3, r4, r7, pc}
 800178c:	20000155 	.word	0x20000155
 8001790:	6bca1af3 	.word	0x6bca1af3
 8001794:	20000157 	.word	0x20000157
 8001798:	20000158 	.word	0x20000158
 800179c:	200001f0 	.word	0x200001f0
 80017a0:	20000159 	.word	0x20000159
 80017a4:	2000015a 	.word	0x2000015a
 80017a8:	20000156 	.word	0x20000156
 80017ac:	2000014f 	.word	0x2000014f
 80017b0:	20000144 	.word	0x20000144
 80017b4:	20000170 	.word	0x20000170
 80017b8:	2000015c 	.word	0x2000015c
 80017bc:	20000050 	.word	0x20000050
 80017c0:	20000154 	.word	0x20000154
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	2000002c 	.word	0x2000002c

080017cc <input_process>:

void input_process(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	switch(status){
 80017d0:	4bb2      	ldr	r3, [pc, #712]	; (8001a9c <input_process+0x2d0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	f200 8188 	bhi.w	8001aea <input_process+0x31e>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <input_process+0x14>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	0800182d 	.word	0x0800182d
 80017e4:	080018ed 	.word	0x080018ed
 80017e8:	08001aeb 	.word	0x08001aeb
 80017ec:	080019e7 	.word	0x080019e7
 80017f0:	08001aeb 	.word	0x08001aeb
 80017f4:	08001aeb 	.word	0x08001aeb
 80017f8:	08001aeb 	.word	0x08001aeb
 80017fc:	08001aeb 	.word	0x08001aeb
 8001800:	08001aeb 	.word	0x08001aeb
 8001804:	08001aeb 	.word	0x08001aeb
 8001808:	08001aeb 	.word	0x08001aeb
 800180c:	08001a05 	.word	0x08001a05
 8001810:	08001a0b 	.word	0x08001a0b
 8001814:	08001a11 	.word	0x08001a11
 8001818:	08001aeb 	.word	0x08001aeb
 800181c:	08001a61 	.word	0x08001a61
 8001820:	08001a17 	.word	0x08001a17
 8001824:	08001a39 	.word	0x08001a39
 8001828:	08001a5b 	.word	0x08001a5b
		case HOME:
			if(is_touch_newGame() == 1 || button_count[3] == 1){
 800182c:	f000 fc9d 	bl	800216a <is_touch_newGame>
 8001830:	4603      	mov	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d003      	beq.n	800183e <input_process+0x72>
 8001836:	4b9a      	ldr	r3, [pc, #616]	; (8001aa0 <input_process+0x2d4>)
 8001838:	88db      	ldrh	r3, [r3, #6]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d117      	bne.n	800186e <input_process+0xa2>
				if(confirm[1] == 1){
 800183e:	4b99      	ldr	r3, [pc, #612]	; (8001aa4 <input_process+0x2d8>)
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10b      	bne.n	800185e <input_process+0x92>
					clr_confirm();
 8001846:	f7ff fdc1 	bl	80013cc <clr_confirm>
					status = MODE;
 800184a:	4b94      	ldr	r3, [pc, #592]	; (8001a9c <input_process+0x2d0>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
					user_init();
 8001850:	f005 f818 	bl	8006884 <user_init>
					snake_init();
 8001854:	f003 f88c 	bl	8004970 <snake_init>
					mode_game_lcd();
 8001858:	f000 ff2c 	bl	80026b4 <mode_game_lcd>
				if(confirm[1] == 1){
 800185c:	e045      	b.n	80018ea <input_process+0x11e>
				}else{
					clr_confirm();
 800185e:	f7ff fdb5 	bl	80013cc <clr_confirm>
					confirm[1] = 1;
 8001862:	4b90      	ldr	r3, [pc, #576]	; (8001aa4 <input_process+0x2d8>)
 8001864:	2201      	movs	r2, #1
 8001866:	705a      	strb	r2, [r3, #1]
					home_second_lcd();
 8001868:	f001 fd32 	bl	80032d0 <home_second_lcd>
				if(confirm[1] == 1){
 800186c:	e03d      	b.n	80018ea <input_process+0x11e>
				}
			}else if(is_touch_continue() == 1 || button_count[7] == 1){
 800186e:	f000 fc9e 	bl	80021ae <is_touch_continue>
 8001872:	4603      	mov	r3, r0
 8001874:	2b01      	cmp	r3, #1
 8001876:	d003      	beq.n	8001880 <input_process+0xb4>
 8001878:	4b89      	ldr	r3, [pc, #548]	; (8001aa0 <input_process+0x2d4>)
 800187a:	89db      	ldrh	r3, [r3, #14]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d116      	bne.n	80018ae <input_process+0xe2>
				if(confirm[2] == 1 && tempFlag == 1){
 8001880:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <input_process+0x2d8>)
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d10a      	bne.n	800189e <input_process+0xd2>
 8001888:	4b87      	ldr	r3, [pc, #540]	; (8001aa8 <input_process+0x2dc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <input_process+0xd2>
					clr_confirm();
 8001890:	f7ff fd9c 	bl	80013cc <clr_confirm>
					game_lcd();
 8001894:	f001 f85c 	bl	8002950 <game_lcd>
					continue_game();
 8001898:	f7ff fdd4 	bl	8001444 <continue_game>
				if(confirm[2] == 1 && tempFlag == 1){
 800189c:	e025      	b.n	80018ea <input_process+0x11e>
				}else{
					clr_confirm();
 800189e:	f7ff fd95 	bl	80013cc <clr_confirm>
					confirm[2] = 1;
 80018a2:	4b80      	ldr	r3, [pc, #512]	; (8001aa4 <input_process+0x2d8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	709a      	strb	r2, [r3, #2]
					home_third_lcd();
 80018a8:	f001 fd2a 	bl	8003300 <home_third_lcd>
				if(confirm[2] == 1 && tempFlag == 1){
 80018ac:	e01d      	b.n	80018ea <input_process+0x11e>
				}
			}else if(is_touch_highScore() == 1 || button_count[11] == 1){
 80018ae:	f000 fca0 	bl	80021f2 <is_touch_highScore>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d004      	beq.n	80018c2 <input_process+0xf6>
 80018b8:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <input_process+0x2d4>)
 80018ba:	8adb      	ldrh	r3, [r3, #22]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	f040 8116 	bne.w	8001aee <input_process+0x322>
				if(confirm[3] == 1){
 80018c2:	4b78      	ldr	r3, [pc, #480]	; (8001aa4 <input_process+0x2d8>)
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <input_process+0x10e>
					clr_confirm();
 80018ca:	f7ff fd7f 	bl	80013cc <clr_confirm>
					status = HIGHSCORE;
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <input_process+0x2d0>)
 80018d0:	2203      	movs	r2, #3
 80018d2:	601a      	str	r2, [r3, #0]
					highscore_lcd();
 80018d4:	f000 ff66 	bl	80027a4 <highscore_lcd>
					clr_confirm();
					confirm[3] = 1;
					home_forth_lcd();
				}
			}
			break;
 80018d8:	e109      	b.n	8001aee <input_process+0x322>
					clr_confirm();
 80018da:	f7ff fd77 	bl	80013cc <clr_confirm>
					confirm[3] = 1;
 80018de:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <input_process+0x2d8>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	70da      	strb	r2, [r3, #3]
					home_forth_lcd();
 80018e4:	f001 fd24 	bl	8003330 <home_forth_lcd>
			break;
 80018e8:	e101      	b.n	8001aee <input_process+0x322>
 80018ea:	e100      	b.n	8001aee <input_process+0x322>
		case MODE:
			if(is_touch_classic() == 1 || button_count[3] == 1){
 80018ec:	f000 fca4 	bl	8002238 <is_touch_classic>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d003      	beq.n	80018fe <input_process+0x132>
 80018f6:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <input_process+0x2d4>)
 80018f8:	88db      	ldrh	r3, [r3, #6]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d116      	bne.n	800192c <input_process+0x160>
				if(confirm[0] == 1){
 80018fe:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <input_process+0x2d8>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10a      	bne.n	800191c <input_process+0x150>
					clr_confirm();
 8001906:	f7ff fd61 	bl	80013cc <clr_confirm>
					tempStatus = CLASSIC;
 800190a:	4b68      	ldr	r3, [pc, #416]	; (8001aac <input_process+0x2e0>)
 800190c:	220b      	movs	r2, #11
 800190e:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001910:	4b62      	ldr	r3, [pc, #392]	; (8001a9c <input_process+0x2d0>)
 8001912:	2212      	movs	r2, #18
 8001914:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001916:	f001 fc27 	bl	8003168 <entername_lcd>
				if(confirm[0] == 1){
 800191a:	e046      	b.n	80019aa <input_process+0x1de>
				}else{
					clr_confirm();
 800191c:	f7ff fd56 	bl	80013cc <clr_confirm>
					confirm[0] = 1;
 8001920:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <input_process+0x2d8>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
					mode_first_lcd();
 8001926:	f001 fd1d 	bl	8003364 <mode_first_lcd>
				if(confirm[0] == 1){
 800192a:	e03e      	b.n	80019aa <input_process+0x1de>
				}
			}else if(is_touch_speed() == 1 || button_count[7] == 1){
 800192c:	f000 fca6 	bl	800227c <is_touch_speed>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	d003      	beq.n	800193e <input_process+0x172>
 8001936:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <input_process+0x2d4>)
 8001938:	89db      	ldrh	r3, [r3, #14]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d116      	bne.n	800196c <input_process+0x1a0>
				if(confirm[1] == 1){
 800193e:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <input_process+0x2d8>)
 8001940:	785b      	ldrb	r3, [r3, #1]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10a      	bne.n	800195c <input_process+0x190>
					clr_confirm();
 8001946:	f7ff fd41 	bl	80013cc <clr_confirm>
					tempStatus = SPEED;
 800194a:	4b58      	ldr	r3, [pc, #352]	; (8001aac <input_process+0x2e0>)
 800194c:	220c      	movs	r2, #12
 800194e:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001950:	4b52      	ldr	r3, [pc, #328]	; (8001a9c <input_process+0x2d0>)
 8001952:	2212      	movs	r2, #18
 8001954:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001956:	f001 fc07 	bl	8003168 <entername_lcd>
				if(confirm[1] == 1){
 800195a:	e026      	b.n	80019aa <input_process+0x1de>
				}else{
					clr_confirm();
 800195c:	f7ff fd36 	bl	80013cc <clr_confirm>
					confirm[1] = 1;
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <input_process+0x2d8>)
 8001962:	2201      	movs	r2, #1
 8001964:	705a      	strb	r2, [r3, #1]
					mode_second_lcd();
 8001966:	f001 fd15 	bl	8003394 <mode_second_lcd>
				if(confirm[1] == 1){
 800196a:	e01e      	b.n	80019aa <input_process+0x1de>
				}
			}else if(is_touch_time() == 1 || button_count[11] == 1){
 800196c:	f000 fca8 	bl	80022c0 <is_touch_time>
 8001970:	4603      	mov	r3, r0
 8001972:	2b01      	cmp	r3, #1
 8001974:	d003      	beq.n	800197e <input_process+0x1b2>
 8001976:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <input_process+0x2d4>)
 8001978:	8adb      	ldrh	r3, [r3, #22]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d115      	bne.n	80019aa <input_process+0x1de>
				if(confirm[2] == 1){
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <input_process+0x2d8>)
 8001980:	789b      	ldrb	r3, [r3, #2]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10a      	bne.n	800199c <input_process+0x1d0>
					clr_confirm();
 8001986:	f7ff fd21 	bl	80013cc <clr_confirm>
					tempStatus = TIME;
 800198a:	4b48      	ldr	r3, [pc, #288]	; (8001aac <input_process+0x2e0>)
 800198c:	220d      	movs	r2, #13
 800198e:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <input_process+0x2d0>)
 8001992:	2212      	movs	r2, #18
 8001994:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001996:	f001 fbe7 	bl	8003168 <entername_lcd>
 800199a:	e006      	b.n	80019aa <input_process+0x1de>
				}else{
					clr_confirm();
 800199c:	f7ff fd16 	bl	80013cc <clr_confirm>
					confirm[2] = 1;
 80019a0:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <input_process+0x2d8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	709a      	strb	r2, [r3, #2]
					mode_third_lcd();
 80019a6:	f001 fd0f 	bl	80033c8 <mode_third_lcd>
				}
			}
			if(is_touch_quit() == 1 || button_count[15] == 1){
 80019aa:	f000 fb53 	bl	8002054 <is_touch_quit>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d004      	beq.n	80019be <input_process+0x1f2>
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <input_process+0x2d4>)
 80019b6:	8bdb      	ldrh	r3, [r3, #30]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	f040 809a 	bne.w	8001af2 <input_process+0x326>
				if(confirm[3] == 1){
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <input_process+0x2d8>)
 80019c0:	78db      	ldrb	r3, [r3, #3]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <input_process+0x20a>
					clr_confirm();
 80019c6:	f7ff fd01 	bl	80013cc <clr_confirm>
					status = HOME;
 80019ca:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <input_process+0x2d0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
					home_lcd();
 80019d0:	f000 fe18 	bl	8002604 <home_lcd>
					clr_confirm();
					confirm[3] = 1;
					mode_forth_lcd();
				}
			}
			break;
 80019d4:	e08d      	b.n	8001af2 <input_process+0x326>
					clr_confirm();
 80019d6:	f7ff fcf9 	bl	80013cc <clr_confirm>
					confirm[3] = 1;
 80019da:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <input_process+0x2d8>)
 80019dc:	2201      	movs	r2, #1
 80019de:	70da      	strb	r2, [r3, #3]
					mode_forth_lcd();
 80019e0:	f001 fd0c 	bl	80033fc <mode_forth_lcd>
			break;
 80019e4:	e085      	b.n	8001af2 <input_process+0x326>
		case HIGHSCORE:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 80019e6:	f000 fb35 	bl	8002054 <is_touch_quit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d003      	beq.n	80019f8 <input_process+0x22c>
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <input_process+0x2d4>)
 80019f2:	88db      	ldrh	r3, [r3, #6]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d17e      	bne.n	8001af6 <input_process+0x32a>
				status = HOME;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <input_process+0x2d0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
				home_lcd();
 80019fe:	f000 fe01 	bl	8002604 <home_lcd>
			}
			break;
 8001a02:	e078      	b.n	8001af6 <input_process+0x32a>
		case CLASSIC:
			input_inGame();
 8001a04:	f7ff fd48 	bl	8001498 <input_inGame>
			break;
 8001a08:	e07c      	b.n	8001b04 <input_process+0x338>
		case SPEED:
			input_inGame();
 8001a0a:	f7ff fd45 	bl	8001498 <input_inGame>
			break;
 8001a0e:	e079      	b.n	8001b04 <input_process+0x338>
		case TIME:
			input_inGame();
 8001a10:	f7ff fd42 	bl	8001498 <input_inGame>
			break;
 8001a14:	e076      	b.n	8001b04 <input_process+0x338>
		case GAMEOVER:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001a16:	f000 fb1d 	bl	8002054 <is_touch_quit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d003      	beq.n	8001a28 <input_process+0x25c>
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <input_process+0x2d4>)
 8001a22:	88db      	ldrh	r3, [r3, #6]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d168      	bne.n	8001afa <input_process+0x32e>
				status = HOME;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <input_process+0x2d0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001a2e:	f000 fde9 	bl	8002604 <home_lcd>
				reset_7seg();				// Thoat che do choi game led 7 se quay tro ve 0
 8001a32:	f001 fe05 	bl	8003640 <reset_7seg>
			}
			break;
 8001a36:	e060      	b.n	8001afa <input_process+0x32e>
		case WIN:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001a38:	f000 fb0c 	bl	8002054 <is_touch_quit>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d003      	beq.n	8001a4a <input_process+0x27e>
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <input_process+0x2d4>)
 8001a44:	88db      	ldrh	r3, [r3, #6]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d159      	bne.n	8001afe <input_process+0x332>
				status = HOME;
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <input_process+0x2d0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001a50:	f000 fdd8 	bl	8002604 <home_lcd>
				reset_7seg();
 8001a54:	f001 fdf4 	bl	8003640 <reset_7seg>
			}
			break;
 8001a58:	e051      	b.n	8001afe <input_process+0x332>
		case NAME:
			input_enterName();
 8001a5a:	f7ff fd7f 	bl	800155c <input_enterName>
			break;
 8001a5e:	e051      	b.n	8001b04 <input_process+0x338>
		case PAUSE:
			if(is_touch_quit_end() == 1 || button_count[7] == 1){
 8001a60:	f000 fb1b 	bl	800209a <is_touch_quit_end>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d003      	beq.n	8001a72 <input_process+0x2a6>
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <input_process+0x2d4>)
 8001a6c:	89db      	ldrh	r3, [r3, #14]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d11e      	bne.n	8001ab0 <input_process+0x2e4>
				if(confirm[2] == 1){
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <input_process+0x2d8>)
 8001a74:	789b      	ldrb	r3, [r3, #2]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <input_process+0x2be>
					clr_confirm();
 8001a7a:	f7ff fca7 	bl	80013cc <clr_confirm>
					status = HOME;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <input_process+0x2d0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
					home_lcd();
 8001a84:	f000 fdbe 	bl	8002604 <home_lcd>
				if(confirm[2] == 1){
 8001a88:	e02e      	b.n	8001ae8 <input_process+0x31c>
				}else{
					clr_confirm();
 8001a8a:	f7ff fc9f 	bl	80013cc <clr_confirm>
					confirm[2] = 1;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <input_process+0x2d8>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	709a      	strb	r2, [r3, #2]
					pause_third_lcd();
 8001a94:	f001 fcf4 	bl	8003480 <pause_third_lcd>
				if(confirm[2] == 1){
 8001a98:	e026      	b.n	8001ae8 <input_process+0x31c>
 8001a9a:	bf00      	nop
 8001a9c:	2000015c 	.word	0x2000015c
 8001aa0:	200001f0 	.word	0x200001f0
 8001aa4:	2000013c 	.word	0x2000013c
 8001aa8:	2000016c 	.word	0x2000016c
 8001aac:	20000170 	.word	0x20000170
				}
			}else if(is_touch_resume() == 1 || button_count[3] == 1){
 8001ab0:	f000 fb15 	bl	80020de <is_touch_resume>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d003      	beq.n	8001ac2 <input_process+0x2f6>
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <input_process+0x33c>)
 8001abc:	88db      	ldrh	r3, [r3, #6]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d11f      	bne.n	8001b02 <input_process+0x336>
				if(confirm[1] == 1){
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <input_process+0x340>)
 8001ac4:	785b      	ldrb	r3, [r3, #1]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d106      	bne.n	8001ad8 <input_process+0x30c>
					clr_confirm();
 8001aca:	f7ff fc7f 	bl	80013cc <clr_confirm>
					game_lcd();
 8001ace:	f000 ff3f 	bl	8002950 <game_lcd>
					continue_game();
 8001ad2:	f7ff fcb7 	bl	8001444 <continue_game>
					clr_confirm();
					confirm[1] = 1;
					pause_second_lcd();
				}
			}
			break;
 8001ad6:	e014      	b.n	8001b02 <input_process+0x336>
					clr_confirm();
 8001ad8:	f7ff fc78 	bl	80013cc <clr_confirm>
					confirm[1] = 1;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <input_process+0x340>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	705a      	strb	r2, [r3, #1]
					pause_second_lcd();
 8001ae2:	f001 fca5 	bl	8003430 <pause_second_lcd>
			break;
 8001ae6:	e00c      	b.n	8001b02 <input_process+0x336>
 8001ae8:	e00b      	b.n	8001b02 <input_process+0x336>
		default:
			break;
 8001aea:	bf00      	nop
 8001aec:	e00a      	b.n	8001b04 <input_process+0x338>
			break;
 8001aee:	bf00      	nop
 8001af0:	e008      	b.n	8001b04 <input_process+0x338>
			break;
 8001af2:	bf00      	nop
 8001af4:	e006      	b.n	8001b04 <input_process+0x338>
			break;
 8001af6:	bf00      	nop
 8001af8:	e004      	b.n	8001b04 <input_process+0x338>
			break;
 8001afa:	bf00      	nop
 8001afc:	e002      	b.n	8001b04 <input_process+0x338>
			break;
 8001afe:	bf00      	nop
 8001b00:	e000      	b.n	8001b04 <input_process+0x338>
			break;
 8001b02:	bf00      	nop
	}
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200001f0 	.word	0x200001f0
 8001b0c:	2000013c 	.word	0x2000013c

08001b10 <environment_cal>:

// Cap nhat thong tin moi truong
void environment_cal(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	sensor_Read();
 8001b14:	f002 fee8 	bl	80048e8 <sensor_Read>
	current_temp = sensor_GetTemperature();
 8001b18:	f002 ff0c 	bl	8004934 <sensor_GetTemperature>
 8001b1c:	eef0 7a40 	vmov.f32	s15, s0
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <environment_cal+0x80>)
 8001b22:	edc3 7a00 	vstr	s15, [r3]
	current_hum = ((float)sensor_GetPotentiometer() / 4095.0) * 100;
 8001b26:	f002 fef9 	bl	800491c <sensor_GetPotentiometer>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	ee17 0a90 	vmov	r0, s15
 8001b38:	f7fe fd06 	bl	8000548 <__aeabi_f2d>
 8001b3c:	a312      	add	r3, pc, #72	; (adr r3, 8001b88 <environment_cal+0x78>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f7fe fe83 	bl	800084c <__aeabi_ddiv>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <environment_cal+0x84>)
 8001b54:	f7fe fd50 	bl	80005f8 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f822 	bl	8000ba8 <__aeabi_d2uiz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <environment_cal+0x88>)
 8001b6a:	801a      	strh	r2, [r3, #0]
	current_light = 4095 - sensor_GetLight();
 8001b6c:	f002 feca 	bl	8004904 <sensor_GetLight>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001b76:	330f      	adds	r3, #15
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <environment_cal+0x8c>)
 8001b7c:	801a      	strh	r2, [r3, #0]
	environment_lcd();
 8001b7e:	f000 ff99 	bl	8002ab4 <environment_lcd>
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	40affe00 	.word	0x40affe00
 8001b90:	20000004 	.word	0x20000004
 8001b94:	40590000 	.word	0x40590000
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	2000000a 	.word	0x2000000a

08001ba0 <score_cal>:

// Tinh toan cap nhat diem so
void score_cal(){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	current_score = current_score + (400 / counter_time_score) * 5 + 5;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <score_cal+0x30>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	441a      	add	r2, r3
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <score_cal+0x34>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	3305      	adds	r3, #5
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <score_cal+0x34>)
 8001bc0:	6013      	str	r3, [r2, #0]
	counter_time_score = 0;
 8001bc2:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <score_cal+0x30>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
	score_lcd();
 8001bc8:	f000 ffac 	bl	8002b24 <score_lcd>
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000164 	.word	0x20000164
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <inGame>:

void inGame(){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	if(move != NOT){
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <inGame+0x6c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <inGame+0x10>
		move_snake();
 8001be4:	f003 f814 	bl	8004c10 <move_snake>
	}
	if(is_collision() == 1){
 8001be8:	f002 ff42 	bl	8004a70 <is_collision>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d109      	bne.n	8001c06 <inGame+0x2e>
		status = GAMEOVER;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <inGame+0x70>)
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]
		game_over_lcd();
 8001bf8:	f000 fff6 	bl	8002be8 <game_over_lcd>
		user_history();
 8001bfc:	f004 fe72 	bl	80068e4 <user_history>
		snake_init();
 8001c00:	f002 feb6 	bl	8004970 <snake_init>
		status = WIN;
		youwin_lcd();
		user_history();
		snake_init();
	}
}
 8001c04:	e01b      	b.n	8001c3e <inGame+0x66>
	}else if(is_eat() == 1){
 8001c06:	f002 ff71 	bl	8004aec <is_eat>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d109      	bne.n	8001c24 <inGame+0x4c>
		length++;
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <inGame+0x74>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <inGame+0x74>)
 8001c18:	6013      	str	r3, [r2, #0]
		score_cal();
 8001c1a:	f7ff ffc1 	bl	8001ba0 <score_cal>
		rand_food();
 8001c1e:	f002 ffc5 	bl	8004bac <rand_food>
}
 8001c22:	e00c      	b.n	8001c3e <inGame+0x66>
	}else if(length == MAX_LENGTH_SNAKE){
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <inGame+0x74>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d108      	bne.n	8001c3e <inGame+0x66>
		status = WIN;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <inGame+0x70>)
 8001c2e:	2211      	movs	r2, #17
 8001c30:	601a      	str	r2, [r3, #0]
		youwin_lcd();
 8001c32:	f001 f889 	bl	8002d48 <youwin_lcd>
		user_history();
 8001c36:	f004 fe55 	bl	80068e4 <user_history>
		snake_init();
 8001c3a:	f002 fe99 	bl	8004970 <snake_init>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000160 	.word	0x20000160
 8001c48:	2000015c 	.word	0x2000015c
 8001c4c:	2000004c 	.word	0x2000004c

08001c50 <fsm_ingame>:

void fsm_ingame(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	switch(status){
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <fsm_ingame+0x138>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b0d      	cmp	r3, #13
 8001c5a:	d04e      	beq.n	8001cfa <fsm_ingame+0xaa>
 8001c5c:	2b0d      	cmp	r3, #13
 8001c5e:	f300 8089 	bgt.w	8001d74 <fsm_ingame+0x124>
 8001c62:	2b0b      	cmp	r3, #11
 8001c64:	d002      	beq.n	8001c6c <fsm_ingame+0x1c>
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d018      	beq.n	8001c9c <fsm_ingame+0x4c>
					snake_init();
				}
			}
			break;
		default:
			break;
 8001c6a:	e083      	b.n	8001d74 <fsm_ingame+0x124>
			counter_time_score++;
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <fsm_ingame+0x13c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <fsm_ingame+0x13c>)
 8001c74:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001c76:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <fsm_ingame+0x140>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d104      	bne.n	8001c88 <fsm_ingame+0x38>
				flag_timer4 = 0;
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <fsm_ingame+0x140>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001c84:	f7ff ff44 	bl	8001b10 <environment_cal>
			if(flag_timer3 == 1){
 8001c88:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <fsm_ingame+0x144>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d173      	bne.n	8001d78 <fsm_ingame+0x128>
				flag_timer3 = 0;
 8001c90:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <fsm_ingame+0x144>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	801a      	strh	r2, [r3, #0]
				inGame();
 8001c96:	f7ff ff9f 	bl	8001bd8 <inGame>
			break;
 8001c9a:	e06d      	b.n	8001d78 <fsm_ingame+0x128>
			counter_time_score++;
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <fsm_ingame+0x13c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a3a      	ldr	r2, [pc, #232]	; (8001d8c <fsm_ingame+0x13c>)
 8001ca4:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <fsm_ingame+0x140>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d104      	bne.n	8001cb8 <fsm_ingame+0x68>
				flag_timer4 = 0;
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <fsm_ingame+0x140>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001cb4:	f7ff ff2c 	bl	8001b10 <environment_cal>
			if(flag_timer3 == 1){
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <fsm_ingame+0x144>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d15d      	bne.n	8001d7c <fsm_ingame+0x12c>
				flag_timer3 = 0;
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <fsm_ingame+0x144>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	801a      	strh	r2, [r3, #0]
				inGame();
 8001cc6:	f7ff ff87 	bl	8001bd8 <inGame>
				if(length == 5){
 8001cca:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <fsm_ingame+0x148>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d103      	bne.n	8001cda <fsm_ingame+0x8a>
					setTimer3(200);
 8001cd2:	20c8      	movs	r0, #200	; 0xc8
 8001cd4:	f003 f84c 	bl	8004d70 <setTimer3>
			break;
 8001cd8:	e050      	b.n	8001d7c <fsm_ingame+0x12c>
				}else if(length == 10){
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <fsm_ingame+0x148>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	d103      	bne.n	8001cea <fsm_ingame+0x9a>
					setTimer3(100);
 8001ce2:	2064      	movs	r0, #100	; 0x64
 8001ce4:	f003 f844 	bl	8004d70 <setTimer3>
			break;
 8001ce8:	e048      	b.n	8001d7c <fsm_ingame+0x12c>
				}else if(length == 15){
 8001cea:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <fsm_ingame+0x148>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	d144      	bne.n	8001d7c <fsm_ingame+0x12c>
					setTimer3(50);
 8001cf2:	2032      	movs	r0, #50	; 0x32
 8001cf4:	f003 f83c 	bl	8004d70 <setTimer3>
			break;
 8001cf8:	e040      	b.n	8001d7c <fsm_ingame+0x12c>
			counter_time_score++;
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <fsm_ingame+0x13c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <fsm_ingame+0x13c>)
 8001d02:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <fsm_ingame+0x140>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d104      	bne.n	8001d16 <fsm_ingame+0xc6>
				flag_timer4 = 0;
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <fsm_ingame+0x140>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001d12:	f7ff fefd 	bl	8001b10 <environment_cal>
			if(flag_timer3 == 1){
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <fsm_ingame+0x144>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d130      	bne.n	8001d80 <fsm_ingame+0x130>
				flag_timer3 = 0;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <fsm_ingame+0x144>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	801a      	strh	r2, [r3, #0]
				inGame();
 8001d24:	f7ff ff58 	bl	8001bd8 <inGame>
				if(counter_time == 50){
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <fsm_ingame+0x14c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b32      	cmp	r3, #50	; 0x32
 8001d2e:	d103      	bne.n	8001d38 <fsm_ingame+0xe8>
					setTimer3(200);
 8001d30:	20c8      	movs	r0, #200	; 0xc8
 8001d32:	f003 f81d 	bl	8004d70 <setTimer3>
			break;
 8001d36:	e023      	b.n	8001d80 <fsm_ingame+0x130>
				}else if(counter_time == 35){
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <fsm_ingame+0x14c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b23      	cmp	r3, #35	; 0x23
 8001d3e:	d103      	bne.n	8001d48 <fsm_ingame+0xf8>
					setTimer3(100);
 8001d40:	2064      	movs	r0, #100	; 0x64
 8001d42:	f003 f815 	bl	8004d70 <setTimer3>
			break;
 8001d46:	e01b      	b.n	8001d80 <fsm_ingame+0x130>
				}else if(counter_time == 20){
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <fsm_ingame+0x14c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b14      	cmp	r3, #20
 8001d4e:	d103      	bne.n	8001d58 <fsm_ingame+0x108>
					setTimer3(50);
 8001d50:	2032      	movs	r0, #50	; 0x32
 8001d52:	f003 f80d 	bl	8004d70 <setTimer3>
			break;
 8001d56:	e013      	b.n	8001d80 <fsm_ingame+0x130>
				}else if(counter_time <= 0){
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <fsm_ingame+0x14c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	dc0f      	bgt.n	8001d80 <fsm_ingame+0x130>
					status = WIN;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <fsm_ingame+0x138>)
 8001d62:	2211      	movs	r2, #17
 8001d64:	601a      	str	r2, [r3, #0]
					youwin_lcd();
 8001d66:	f000 ffef 	bl	8002d48 <youwin_lcd>
					user_history();
 8001d6a:	f004 fdbb 	bl	80068e4 <user_history>
					snake_init();
 8001d6e:	f002 fdff 	bl	8004970 <snake_init>
			break;
 8001d72:	e005      	b.n	8001d80 <fsm_ingame+0x130>
			break;
 8001d74:	bf00      	nop
 8001d76:	e004      	b.n	8001d82 <fsm_ingame+0x132>
			break;
 8001d78:	bf00      	nop
 8001d7a:	e002      	b.n	8001d82 <fsm_ingame+0x132>
			break;
 8001d7c:	bf00      	nop
 8001d7e:	e000      	b.n	8001d82 <fsm_ingame+0x132>
			break;
 8001d80:	bf00      	nop
	}
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000015c 	.word	0x2000015c
 8001d8c:	20000164 	.word	0x20000164
 8001d90:	20000186 	.word	0x20000186
 8001d94:	20000180 	.word	0x20000180
 8001d98:	2000004c 	.word	0x2000004c
 8001d9c:	20000168 	.word	0x20000168

08001da0 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	; 0x38
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001dba:	463b      	mov	r3, r7
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001dce:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001dd2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001dd6:	4a2e      	ldr	r2, [pc, #184]	; (8001e90 <MX_FSMC_Init+0xf0>)
 8001dd8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001dee:	2210      	movs	r2, #16
 8001df0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001dfe:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001e32:	230f      	movs	r3, #15
 8001e34:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001e36:	230f      	movs	r3, #15
 8001e38:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001e3a:	233c      	movs	r3, #60	; 0x3c
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001e42:	2310      	movs	r3, #16
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001e46:	2311      	movs	r3, #17
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001e4e:	2308      	movs	r3, #8
 8001e50:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001e52:	230f      	movs	r3, #15
 8001e54:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001e56:	2309      	movs	r3, #9
 8001e58:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001e5e:	2310      	movs	r3, #16
 8001e60:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001e62:	2311      	movs	r3, #17
 8001e64:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001e6a:	463a      	mov	r2, r7
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <MX_FSMC_Init+0xec>)
 8001e74:	f008 fb42 	bl	800a4fc <HAL_SRAM_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001e7e:	f002 fd1f 	bl	80048c0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001e82:	bf00      	nop
 8001e84:	3738      	adds	r7, #56	; 0x38
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000210 	.word	0x20000210
 8001e90:	a0000104 	.word	0xa0000104
 8001e94:	00000000 	.word	0x00000000

08001e98 <distance_of_two_point>:
 */

#include "fun_touch.h"

// Tinh khoang cach hai diem
float distance_of_two_point(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4623      	mov	r3, r4
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80bb      	strh	r3, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	807b      	strh	r3, [r7, #2]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	803b      	strh	r3, [r7, #0]
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb31 	bl	8000524 <__aeabi_i2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001f30 <distance_of_two_point+0x98>
 8001eca:	ec43 2b10 	vmov	d0, r2, r3
 8001ece:	f00b fc3f 	bl	800d750 <pow>
 8001ed2:	ec55 4b10 	vmov	r4, r5, d0
 8001ed6:	88ba      	ldrh	r2, [r7, #4]
 8001ed8:	883b      	ldrh	r3, [r7, #0]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb21 	bl	8000524 <__aeabi_i2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001f30 <distance_of_two_point+0x98>
 8001eea:	ec43 2b10 	vmov	d0, r2, r3
 8001eee:	f00b fc2f 	bl	800d750 <pow>
 8001ef2:	ec53 2b10 	vmov	r2, r3, d0
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	f7fe f9c7 	bl	800028c <__adddf3>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	ec43 2b17 	vmov	d7, r2, r3
 8001f06:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0a:	eef0 0a67 	vmov.f32	s1, s15
 8001f0e:	f00b fccd 	bl	800d8ac <sqrt>
 8001f12:	ec53 2b10 	vmov	r2, r3, d0
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7fe fe65 	bl	8000be8 <__aeabi_d2f>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	ee07 3a90 	vmov	s15, r3
}
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	00000000 	.word	0x00000000
 8001f34:	40000000 	.word	0x40000000

08001f38 <is_touch_right>:

int is_touch_right(){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001f3c:	f004 fbc4 	bl	80066c8 <touch_IsTouched>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <is_touch_right+0x12>
 8001f46:	2300      	movs	r3, #0
 8001f48:	e018      	b.n	8001f7c <is_touch_right+0x44>
	return (touch_GetX() > POS_X_RIGHT
 8001f4a:	f004 fbcf 	bl	80066ec <touch_GetX>
 8001f4e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
			&& touch_GetY() > POS_Y_RIGHT
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001f50:	2ba5      	cmp	r3, #165	; 0xa5
 8001f52:	d912      	bls.n	8001f7a <is_touch_right+0x42>
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
 8001f54:	f004 fbca 	bl	80066ec <touch_GetX>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2bea      	cmp	r3, #234	; 0xea
 8001f5c:	d80d      	bhi.n	8001f7a <is_touch_right+0x42>
			&& touch_GetY() > POS_Y_RIGHT
 8001f5e:	f004 fbd1 	bl	8006704 <touch_GetY>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001f68:	d307      	bcc.n	8001f7a <is_touch_right+0x42>
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001f6a:	f004 fbcb 	bl	8006704 <touch_GetY>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001f74:	d801      	bhi.n	8001f7a <is_touch_right+0x42>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <is_touch_right+0x44>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <is_touch_left>:

int is_touch_left(){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001f84:	f004 fba0 	bl	80066c8 <touch_IsTouched>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <is_touch_left+0x12>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e018      	b.n	8001fc4 <is_touch_left+0x44>
	return (touch_GetX() > POS_X_LEFT
 8001f92:	f004 fbab 	bl	80066ec <touch_GetX>
 8001f96:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
			&& touch_GetY() > POS_Y_LEFT
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d912      	bls.n	8001fc2 <is_touch_left+0x42>
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
 8001f9c:	f004 fba6 	bl	80066ec <touch_GetX>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b4a      	cmp	r3, #74	; 0x4a
 8001fa4:	d80d      	bhi.n	8001fc2 <is_touch_left+0x42>
			&& touch_GetY() > POS_Y_LEFT
 8001fa6:	f004 fbad 	bl	8006704 <touch_GetY>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001fb0:	d307      	bcc.n	8001fc2 <is_touch_left+0x42>
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001fb2:	f004 fba7 	bl	8006704 <touch_GetY>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001fbc:	d801      	bhi.n	8001fc2 <is_touch_left+0x42>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <is_touch_left+0x44>
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <is_touch_up>:

int is_touch_up(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001fcc:	f004 fb7c 	bl	80066c8 <touch_IsTouched>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <is_touch_up+0x12>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e016      	b.n	8002008 <is_touch_up+0x40>
	return (touch_GetX() > POS_X_UP
 8001fda:	f004 fb87 	bl	80066ec <touch_GetX>
 8001fde:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
			&& touch_GetY() > POS_Y_UP
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001fe0:	2b55      	cmp	r3, #85	; 0x55
 8001fe2:	d910      	bls.n	8002006 <is_touch_up+0x3e>
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
 8001fe4:	f004 fb82 	bl	80066ec <touch_GetX>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b9a      	cmp	r3, #154	; 0x9a
 8001fec:	d80b      	bhi.n	8002006 <is_touch_up+0x3e>
			&& touch_GetY() > POS_Y_UP
 8001fee:	f004 fb89 	bl	8006704 <touch_GetY>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2bcd      	cmp	r3, #205	; 0xcd
 8001ff6:	d906      	bls.n	8002006 <is_touch_up+0x3e>
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001ff8:	f004 fb84 	bl	8006704 <touch_GetY>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2bfe      	cmp	r3, #254	; 0xfe
 8002000:	d801      	bhi.n	8002006 <is_touch_up+0x3e>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <is_touch_up+0x40>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}

0800200c <is_touch_down>:

int is_touch_down(){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002010:	f004 fb5a 	bl	80066c8 <touch_IsTouched>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <is_touch_down+0x12>
 800201a:	2300      	movs	r3, #0
 800201c:	e018      	b.n	8002050 <is_touch_down+0x44>
	return (touch_GetX() > POS_X_DOWN
 800201e:	f004 fb65 	bl	80066ec <touch_GetX>
 8002022:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
			&& touch_GetY() > POS_Y_DOWN
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8002024:	2b55      	cmp	r3, #85	; 0x55
 8002026:	d912      	bls.n	800204e <is_touch_down+0x42>
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
 8002028:	f004 fb60 	bl	80066ec <touch_GetX>
 800202c:	4603      	mov	r3, r0
 800202e:	2b9a      	cmp	r3, #154	; 0x9a
 8002030:	d80d      	bhi.n	800204e <is_touch_down+0x42>
			&& touch_GetY() > POS_Y_DOWN
 8002032:	f004 fb67 	bl	8006704 <touch_GetY>
 8002036:	4603      	mov	r3, r0
 8002038:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800203c:	d307      	bcc.n	800204e <is_touch_down+0x42>
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 800203e:	f004 fb61 	bl	8006704 <touch_GetY>
 8002042:	4603      	mov	r3, r0
 8002044:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8002048:	d801      	bhi.n	800204e <is_touch_down+0x42>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <is_touch_down+0x44>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}

08002054 <is_touch_quit>:

int is_touch_quit(){
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002058:	f004 fb36 	bl	80066c8 <touch_IsTouched>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <is_touch_quit+0x12>
 8002062:	2300      	movs	r3, #0
 8002064:	e017      	b.n	8002096 <is_touch_quit+0x42>
	return (touch_GetX() > POS_X_FORTH
 8002066:	f004 fb41 	bl	80066ec <touch_GetX>
 800206a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 800206c:	2b41      	cmp	r3, #65	; 0x41
 800206e:	d911      	bls.n	8002094 <is_touch_quit+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8002070:	f004 fb3c 	bl	80066ec <touch_GetX>
 8002074:	4603      	mov	r3, r0
 8002076:	2bb8      	cmp	r3, #184	; 0xb8
 8002078:	d80c      	bhi.n	8002094 <is_touch_quit+0x40>
			&& touch_GetY() > POS_Y_FORTH
 800207a:	f004 fb43 	bl	8006704 <touch_GetY>
 800207e:	4603      	mov	r3, r0
 8002080:	2bfa      	cmp	r3, #250	; 0xfa
 8002082:	d907      	bls.n	8002094 <is_touch_quit+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8002084:	f004 fb3e 	bl	8006704 <touch_GetY>
 8002088:	4603      	mov	r3, r0
 800208a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800208e:	d801      	bhi.n	8002094 <is_touch_quit+0x40>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <is_touch_quit+0x42>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}

0800209a <is_touch_quit_end>:

int is_touch_quit_end(){
 800209a:	b580      	push	{r7, lr}
 800209c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800209e:	f004 fb13 	bl	80066c8 <touch_IsTouched>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <is_touch_quit_end+0x12>
 80020a8:	2300      	movs	r3, #0
 80020aa:	e016      	b.n	80020da <is_touch_quit_end+0x40>
	return (touch_GetX() > POS_X_THIRD
 80020ac:	f004 fb1e 	bl	80066ec <touch_GetX>
 80020b0:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80020b2:	2b41      	cmp	r3, #65	; 0x41
 80020b4:	d910      	bls.n	80020d8 <is_touch_quit_end+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 80020b6:	f004 fb19 	bl	80066ec <touch_GetX>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2bb8      	cmp	r3, #184	; 0xb8
 80020be:	d80b      	bhi.n	80020d8 <is_touch_quit_end+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 80020c0:	f004 fb20 	bl	8006704 <touch_GetY>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2bc8      	cmp	r3, #200	; 0xc8
 80020c8:	d906      	bls.n	80020d8 <is_touch_quit_end+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80020ca:	f004 fb1b 	bl	8006704 <touch_GetY>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2bea      	cmp	r3, #234	; 0xea
 80020d2:	d801      	bhi.n	80020d8 <is_touch_quit_end+0x3e>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <is_touch_quit_end+0x40>
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}

080020de <is_touch_resume>:

int is_touch_resume(){
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80020e2:	f004 faf1 	bl	80066c8 <touch_IsTouched>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <is_touch_resume+0x12>
 80020ec:	2300      	movs	r3, #0
 80020ee:	e016      	b.n	800211e <is_touch_resume+0x40>
	return (touch_GetX() > POS_X_SECOND
 80020f0:	f004 fafc 	bl	80066ec <touch_GetX>
 80020f4:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80020f6:	2b41      	cmp	r3, #65	; 0x41
 80020f8:	d910      	bls.n	800211c <is_touch_resume+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 80020fa:	f004 faf7 	bl	80066ec <touch_GetX>
 80020fe:	4603      	mov	r3, r0
 8002100:	2bb8      	cmp	r3, #184	; 0xb8
 8002102:	d80b      	bhi.n	800211c <is_touch_resume+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8002104:	f004 fafe 	bl	8006704 <touch_GetY>
 8002108:	4603      	mov	r3, r0
 800210a:	2b96      	cmp	r3, #150	; 0x96
 800210c:	d906      	bls.n	800211c <is_touch_resume+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 800210e:	f004 faf9 	bl	8006704 <touch_GetY>
 8002112:	4603      	mov	r3, r0
 8002114:	2bb8      	cmp	r3, #184	; 0xb8
 8002116:	d801      	bhi.n	800211c <is_touch_resume+0x3e>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <is_touch_resume+0x40>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}

08002122 <is_touch_pause>:

int is_touch_pause(){
 8002122:	b598      	push	{r3, r4, r7, lr}
 8002124:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002126:	f004 facf 	bl	80066c8 <touch_IsTouched>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <is_touch_pause+0x12>
 8002130:	2300      	movs	r3, #0
 8002132:	e018      	b.n	8002166 <is_touch_pause+0x44>
	return distance_of_two_point(touch_GetX(), touch_GetY(), POS_X_PAUSE, POS_Y_PAUSE) < BTN_HEIGHT / 2;
 8002134:	f004 fada 	bl	80066ec <touch_GetX>
 8002138:	4603      	mov	r3, r0
 800213a:	461c      	mov	r4, r3
 800213c:	f004 fae2 	bl	8006704 <touch_GetY>
 8002140:	4603      	mov	r3, r0
 8002142:	4619      	mov	r1, r3
 8002144:	23e6      	movs	r3, #230	; 0xe6
 8002146:	22c8      	movs	r2, #200	; 0xc8
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff fea5 	bl	8001e98 <distance_of_two_point>
 800214e:	eef0 7a40 	vmov.f32	s15, s0
 8002152:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	bf4c      	ite	mi
 8002160:	2301      	movmi	r3, #1
 8002162:	2300      	movpl	r3, #0
 8002164:	b2db      	uxtb	r3, r3
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd98      	pop	{r3, r4, r7, pc}

0800216a <is_touch_newGame>:

int is_touch_newGame(){
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800216e:	f004 faab 	bl	80066c8 <touch_IsTouched>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <is_touch_newGame+0x12>
 8002178:	2300      	movs	r3, #0
 800217a:	e016      	b.n	80021aa <is_touch_newGame+0x40>
	return (touch_GetX() > POS_X_SECOND
 800217c:	f004 fab6 	bl	80066ec <touch_GetX>
 8002180:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8002182:	2b41      	cmp	r3, #65	; 0x41
 8002184:	d910      	bls.n	80021a8 <is_touch_newGame+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8002186:	f004 fab1 	bl	80066ec <touch_GetX>
 800218a:	4603      	mov	r3, r0
 800218c:	2bb8      	cmp	r3, #184	; 0xb8
 800218e:	d80b      	bhi.n	80021a8 <is_touch_newGame+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8002190:	f004 fab8 	bl	8006704 <touch_GetY>
 8002194:	4603      	mov	r3, r0
 8002196:	2b96      	cmp	r3, #150	; 0x96
 8002198:	d906      	bls.n	80021a8 <is_touch_newGame+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 800219a:	f004 fab3 	bl	8006704 <touch_GetY>
 800219e:	4603      	mov	r3, r0
 80021a0:	2bb8      	cmp	r3, #184	; 0xb8
 80021a2:	d801      	bhi.n	80021a8 <is_touch_newGame+0x3e>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <is_touch_newGame+0x40>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}

080021ae <is_touch_continue>:

int is_touch_continue(){
 80021ae:	b580      	push	{r7, lr}
 80021b0:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80021b2:	f004 fa89 	bl	80066c8 <touch_IsTouched>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <is_touch_continue+0x12>
 80021bc:	2300      	movs	r3, #0
 80021be:	e016      	b.n	80021ee <is_touch_continue+0x40>
	return (touch_GetX() > POS_X_THIRD
 80021c0:	f004 fa94 	bl	80066ec <touch_GetX>
 80021c4:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80021c6:	2b41      	cmp	r3, #65	; 0x41
 80021c8:	d910      	bls.n	80021ec <is_touch_continue+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 80021ca:	f004 fa8f 	bl	80066ec <touch_GetX>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2bb8      	cmp	r3, #184	; 0xb8
 80021d2:	d80b      	bhi.n	80021ec <is_touch_continue+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 80021d4:	f004 fa96 	bl	8006704 <touch_GetY>
 80021d8:	4603      	mov	r3, r0
 80021da:	2bc8      	cmp	r3, #200	; 0xc8
 80021dc:	d906      	bls.n	80021ec <is_touch_continue+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80021de:	f004 fa91 	bl	8006704 <touch_GetY>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2bea      	cmp	r3, #234	; 0xea
 80021e6:	d801      	bhi.n	80021ec <is_touch_continue+0x3e>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <is_touch_continue+0x40>
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <is_touch_highScore>:

int is_touch_highScore(){
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80021f6:	f004 fa67 	bl	80066c8 <touch_IsTouched>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <is_touch_highScore+0x12>
 8002200:	2300      	movs	r3, #0
 8002202:	e017      	b.n	8002234 <is_touch_highScore+0x42>
	return (touch_GetX() > POS_X_FORTH
 8002204:	f004 fa72 	bl	80066ec <touch_GetX>
 8002208:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 800220a:	2b41      	cmp	r3, #65	; 0x41
 800220c:	d911      	bls.n	8002232 <is_touch_highScore+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 800220e:	f004 fa6d 	bl	80066ec <touch_GetX>
 8002212:	4603      	mov	r3, r0
 8002214:	2bb8      	cmp	r3, #184	; 0xb8
 8002216:	d80c      	bhi.n	8002232 <is_touch_highScore+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8002218:	f004 fa74 	bl	8006704 <touch_GetY>
 800221c:	4603      	mov	r3, r0
 800221e:	2bfa      	cmp	r3, #250	; 0xfa
 8002220:	d907      	bls.n	8002232 <is_touch_highScore+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8002222:	f004 fa6f 	bl	8006704 <touch_GetY>
 8002226:	4603      	mov	r3, r0
 8002228:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800222c:	d801      	bhi.n	8002232 <is_touch_highScore+0x40>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <is_touch_highScore+0x42>
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}

08002238 <is_touch_classic>:

int is_touch_classic(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800223c:	f004 fa44 	bl	80066c8 <touch_IsTouched>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <is_touch_classic+0x12>
 8002246:	2300      	movs	r3, #0
 8002248:	e016      	b.n	8002278 <is_touch_classic+0x40>
	return (touch_GetX() > POS_X_FIRST
 800224a:	f004 fa4f 	bl	80066ec <touch_GetX>
 800224e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8002250:	2b41      	cmp	r3, #65	; 0x41
 8002252:	d910      	bls.n	8002276 <is_touch_classic+0x3e>
			&& touch_GetX() < POS_X_FIRST + WIDTH
 8002254:	f004 fa4a 	bl	80066ec <touch_GetX>
 8002258:	4603      	mov	r3, r0
 800225a:	2bb8      	cmp	r3, #184	; 0xb8
 800225c:	d80b      	bhi.n	8002276 <is_touch_classic+0x3e>
			&& touch_GetY() > POS_Y_FIRST
 800225e:	f004 fa51 	bl	8006704 <touch_GetY>
 8002262:	4603      	mov	r3, r0
 8002264:	2b64      	cmp	r3, #100	; 0x64
 8002266:	d906      	bls.n	8002276 <is_touch_classic+0x3e>
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8002268:	f004 fa4c 	bl	8006704 <touch_GetY>
 800226c:	4603      	mov	r3, r0
 800226e:	2b86      	cmp	r3, #134	; 0x86
 8002270:	d801      	bhi.n	8002276 <is_touch_classic+0x3e>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <is_touch_classic+0x40>
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}

0800227c <is_touch_speed>:

int is_touch_speed(){
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002280:	f004 fa22 	bl	80066c8 <touch_IsTouched>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <is_touch_speed+0x12>
 800228a:	2300      	movs	r3, #0
 800228c:	e016      	b.n	80022bc <is_touch_speed+0x40>
	return (touch_GetX() > POS_X_SECOND
 800228e:	f004 fa2d 	bl	80066ec <touch_GetX>
 8002292:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8002294:	2b41      	cmp	r3, #65	; 0x41
 8002296:	d910      	bls.n	80022ba <is_touch_speed+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8002298:	f004 fa28 	bl	80066ec <touch_GetX>
 800229c:	4603      	mov	r3, r0
 800229e:	2bb8      	cmp	r3, #184	; 0xb8
 80022a0:	d80b      	bhi.n	80022ba <is_touch_speed+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 80022a2:	f004 fa2f 	bl	8006704 <touch_GetY>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b96      	cmp	r3, #150	; 0x96
 80022aa:	d906      	bls.n	80022ba <is_touch_speed+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80022ac:	f004 fa2a 	bl	8006704 <touch_GetY>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2bb8      	cmp	r3, #184	; 0xb8
 80022b4:	d801      	bhi.n	80022ba <is_touch_speed+0x3e>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <is_touch_speed+0x40>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}

080022c0 <is_touch_time>:

int is_touch_time(){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80022c4:	f004 fa00 	bl	80066c8 <touch_IsTouched>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <is_touch_time+0x12>
 80022ce:	2300      	movs	r3, #0
 80022d0:	e016      	b.n	8002300 <is_touch_time+0x40>
	return (touch_GetX() > POS_X_THIRD
 80022d2:	f004 fa0b 	bl	80066ec <touch_GetX>
 80022d6:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80022d8:	2b41      	cmp	r3, #65	; 0x41
 80022da:	d910      	bls.n	80022fe <is_touch_time+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 80022dc:	f004 fa06 	bl	80066ec <touch_GetX>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2bb8      	cmp	r3, #184	; 0xb8
 80022e4:	d80b      	bhi.n	80022fe <is_touch_time+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 80022e6:	f004 fa0d 	bl	8006704 <touch_GetY>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2bc8      	cmp	r3, #200	; 0xc8
 80022ee:	d906      	bls.n	80022fe <is_touch_time+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80022f0:	f004 fa08 	bl	8006704 <touch_GetY>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2bea      	cmp	r3, #234	; 0xea
 80022f8:	d801      	bhi.n	80022fe <is_touch_time+0x3e>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <is_touch_time+0x40>
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}

08002304 <is_touch_char>:

int is_touch_char(){
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002308:	f004 f9de 	bl	80066c8 <touch_IsTouched>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <is_touch_char+0x12>
 8002312:	2300      	movs	r3, #0
 8002314:	e017      	b.n	8002346 <is_touch_char+0x42>
	return (touch_GetX() > POS_X_CHAR
 8002316:	f004 f9e9 	bl	80066ec <touch_GetX>
 800231a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_CHAR + CHAR_COL*CHAR_WIDTH
			&& touch_GetY() > POS_Y_CHAR
			&& touch_GetY() < POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT);
 800231c:	2b06      	cmp	r3, #6
 800231e:	d911      	bls.n	8002344 <is_touch_char+0x40>
			&& touch_GetX() < POS_X_CHAR + CHAR_COL*CHAR_WIDTH
 8002320:	f004 f9e4 	bl	80066ec <touch_GetX>
 8002324:	4603      	mov	r3, r0
 8002326:	2be9      	cmp	r3, #233	; 0xe9
 8002328:	d80c      	bhi.n	8002344 <is_touch_char+0x40>
			&& touch_GetY() > POS_Y_CHAR
 800232a:	f004 f9eb 	bl	8006704 <touch_GetY>
 800232e:	4603      	mov	r3, r0
 8002330:	2b7c      	cmp	r3, #124	; 0x7c
 8002332:	d907      	bls.n	8002344 <is_touch_char+0x40>
			&& touch_GetY() < POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT);
 8002334:	f004 f9e6 	bl	8006704 <touch_GetY>
 8002338:	4603      	mov	r3, r0
 800233a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800233e:	d201      	bcs.n	8002344 <is_touch_char+0x40>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <is_touch_char+0x42>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	; 0x38
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	4b89      	ldr	r3, [pc, #548]	; (800258c <MX_GPIO_Init+0x240>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a88      	ldr	r2, [pc, #544]	; (800258c <MX_GPIO_Init+0x240>)
 800236c:	f043 0310 	orr.w	r3, r3, #16
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b86      	ldr	r3, [pc, #536]	; (800258c <MX_GPIO_Init+0x240>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	4b82      	ldr	r3, [pc, #520]	; (800258c <MX_GPIO_Init+0x240>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a81      	ldr	r2, [pc, #516]	; (800258c <MX_GPIO_Init+0x240>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b7f      	ldr	r3, [pc, #508]	; (800258c <MX_GPIO_Init+0x240>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	4b7b      	ldr	r3, [pc, #492]	; (800258c <MX_GPIO_Init+0x240>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a7a      	ldr	r2, [pc, #488]	; (800258c <MX_GPIO_Init+0x240>)
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b78      	ldr	r3, [pc, #480]	; (800258c <MX_GPIO_Init+0x240>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	4b74      	ldr	r3, [pc, #464]	; (800258c <MX_GPIO_Init+0x240>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a73      	ldr	r2, [pc, #460]	; (800258c <MX_GPIO_Init+0x240>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b71      	ldr	r3, [pc, #452]	; (800258c <MX_GPIO_Init+0x240>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <MX_GPIO_Init+0x240>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a6c      	ldr	r2, [pc, #432]	; (800258c <MX_GPIO_Init+0x240>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b6a      	ldr	r3, [pc, #424]	; (800258c <MX_GPIO_Init+0x240>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b66      	ldr	r3, [pc, #408]	; (800258c <MX_GPIO_Init+0x240>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a65      	ldr	r2, [pc, #404]	; (800258c <MX_GPIO_Init+0x240>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b63      	ldr	r3, [pc, #396]	; (800258c <MX_GPIO_Init+0x240>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <MX_GPIO_Init+0x240>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a5e      	ldr	r2, [pc, #376]	; (800258c <MX_GPIO_Init+0x240>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <MX_GPIO_Init+0x240>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b58      	ldr	r3, [pc, #352]	; (800258c <MX_GPIO_Init+0x240>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a57      	ldr	r2, [pc, #348]	; (800258c <MX_GPIO_Init+0x240>)
 8002430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b55      	ldr	r3, [pc, #340]	; (800258c <MX_GPIO_Init+0x240>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2110      	movs	r1, #16
 8002446:	4852      	ldr	r0, [pc, #328]	; (8002590 <MX_GPIO_Init+0x244>)
 8002448:	f005 fe62 	bl	8008110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8002452:	4850      	ldr	r0, [pc, #320]	; (8002594 <MX_GPIO_Init+0x248>)
 8002454:	f005 fe5c 	bl	8008110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800245e:	484e      	ldr	r0, [pc, #312]	; (8002598 <MX_GPIO_Init+0x24c>)
 8002460:	f005 fe56 	bl	8008110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8002464:	2200      	movs	r2, #0
 8002466:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800246a:	484c      	ldr	r0, [pc, #304]	; (800259c <MX_GPIO_Init+0x250>)
 800246c:	f005 fe50 	bl	8008110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002476:	484a      	ldr	r0, [pc, #296]	; (80025a0 <MX_GPIO_Init+0x254>)
 8002478:	f005 fe4a 	bl	8008110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800247c:	2200      	movs	r2, #0
 800247e:	2108      	movs	r1, #8
 8002480:	4848      	ldr	r0, [pc, #288]	; (80025a4 <MX_GPIO_Init+0x258>)
 8002482:	f005 fe45 	bl	8008110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8002486:	2310      	movs	r3, #16
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249a:	4619      	mov	r1, r3
 800249c:	483c      	ldr	r0, [pc, #240]	; (8002590 <MX_GPIO_Init+0x244>)
 800249e:	f005 fc83 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80024a2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b8:	4619      	mov	r1, r3
 80024ba:	4836      	ldr	r0, [pc, #216]	; (8002594 <MX_GPIO_Init+0x248>)
 80024bc:	f005 fc74 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 80024c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	4830      	ldr	r0, [pc, #192]	; (8002598 <MX_GPIO_Init+0x24c>)
 80024d6:	f005 fc67 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 80024da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4829      	ldr	r0, [pc, #164]	; (8002598 <MX_GPIO_Init+0x24c>)
 80024f4:	f005 fc58 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80024f8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fe:	2301      	movs	r3, #1
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800250a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250e:	4619      	mov	r1, r3
 8002510:	4822      	ldr	r0, [pc, #136]	; (800259c <MX_GPIO_Init+0x250>)
 8002512:	f005 fc49 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8002516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002520:	2301      	movs	r3, #1
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	481a      	ldr	r0, [pc, #104]	; (8002594 <MX_GPIO_Init+0x248>)
 800252c:	f005 fc3c 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	2301      	movs	r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002546:	4619      	mov	r1, r3
 8002548:	4815      	ldr	r0, [pc, #84]	; (80025a0 <MX_GPIO_Init+0x254>)
 800254a:	f005 fc2d 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800254e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002554:	2300      	movs	r3, #0
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	480c      	ldr	r0, [pc, #48]	; (8002594 <MX_GPIO_Init+0x248>)
 8002564:	f005 fc20 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8002568:	2308      	movs	r3, #8
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256c:	2301      	movs	r3, #1
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8002578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257c:	4619      	mov	r1, r3
 800257e:	4809      	ldr	r0, [pc, #36]	; (80025a4 <MX_GPIO_Init+0x258>)
 8002580:	f005 fc12 	bl	8007da8 <HAL_GPIO_Init>

}
 8002584:	bf00      	nop
 8002586:	3738      	adds	r7, #56	; 0x38
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	40021000 	.word	0x40021000
 8002594:	40020800 	.word	0x40020800
 8002598:	40021400 	.word	0x40021400
 800259c:	40021800 	.word	0x40021800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020c00 	.word	0x40020c00

080025a8 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <MX_I2C1_Init+0x54>)
 80025b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025b4:	4a12      	ldr	r2, [pc, #72]	; (8002600 <MX_I2C1_Init+0x58>)
 80025b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <MX_I2C1_Init+0x50>)
 80025e6:	f005 fdad 	bl	8008144 <HAL_I2C_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025f0:	f002 f966 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000314 	.word	0x20000314
 80025fc:	40005400 	.word	0x40005400
 8002600:	000186a0 	.word	0x000186a0

08002604 <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <home_lcd+0xa0>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002612:	22f0      	movs	r2, #240	; 0xf0
 8002614:	2100      	movs	r1, #0
 8002616:	2000      	movs	r0, #0
 8002618:	f001 fc80 	bl	8003f1c <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 800261c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	23b9      	movs	r3, #185	; 0xb9
 8002624:	22b9      	movs	r2, #185	; 0xb9
 8002626:	2196      	movs	r1, #150	; 0x96
 8002628:	2041      	movs	r0, #65	; 0x41
 800262a:	f001 f96d 	bl	8003908 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 800262e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	23eb      	movs	r3, #235	; 0xeb
 8002636:	22b9      	movs	r2, #185	; 0xb9
 8002638:	21c8      	movs	r1, #200	; 0xc8
 800263a:	2041      	movs	r0, #65	; 0x41
 800263c:	f001 f964 	bl	8003908 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002640:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f240 131d 	movw	r3, #285	; 0x11d
 800264a:	22b9      	movs	r2, #185	; 0xb9
 800264c:	21fa      	movs	r1, #250	; 0xfa
 800264e:	2041      	movs	r0, #65	; 0x41
 8002650:	f001 f95a 	bl	8003908 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 8002654:	2301      	movs	r3, #1
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	2318      	movs	r3, #24
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	2300      	movs	r3, #0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2300      	movs	r3, #0
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <home_lcd+0xa4>)
 8002664:	219b      	movs	r1, #155	; 0x9b
 8002666:	2054      	movs	r0, #84	; 0x54
 8002668:	f001 ff29 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 800266c:	2301      	movs	r3, #1
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	2318      	movs	r3, #24
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2300      	movs	r3, #0
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <home_lcd+0xa8>)
 800267c:	21cd      	movs	r1, #205	; 0xcd
 800267e:	204d      	movs	r0, #77	; 0x4d
 8002680:	f001 ff1d 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 8002684:	2301      	movs	r3, #1
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	2318      	movs	r3, #24
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	2300      	movs	r3, #0
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2300      	movs	r3, #0
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <home_lcd+0xac>)
 8002694:	21ff      	movs	r1, #255	; 0xff
 8002696:	2048      	movs	r0, #72	; 0x48
 8002698:	f001 ff11 	bl	80044be <lcd_ShowStr>
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	08011cc4 	.word	0x08011cc4
 80026a8:	0800e74c 	.word	0x0800e74c
 80026ac:	0800e754 	.word	0x0800e754
 80026b0:	0800e760 	.word	0x0800e760

080026b4 <mode_game_lcd>:

void mode_game_lcd(){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 80026ba:	4b34      	ldr	r3, [pc, #208]	; (800278c <mode_game_lcd+0xd8>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026c2:	22f0      	movs	r2, #240	; 0xf0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f001 fc28 	bl	8003f1c <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 78, gImage_mode);
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <mode_game_lcd+0xdc>)
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	234e      	movs	r3, #78	; 0x4e
 80026d2:	22f0      	movs	r2, #240	; 0xf0
 80026d4:	2100      	movs	r1, #0
 80026d6:	2000      	movs	r0, #0
 80026d8:	f001 fc20 	bl	8003f1c <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 80026dc:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2387      	movs	r3, #135	; 0x87
 80026e4:	22b9      	movs	r2, #185	; 0xb9
 80026e6:	2164      	movs	r1, #100	; 0x64
 80026e8:	2041      	movs	r0, #65	; 0x41
 80026ea:	f001 f90d 	bl	8003908 <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 80026ee:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	23b9      	movs	r3, #185	; 0xb9
 80026f6:	22b9      	movs	r2, #185	; 0xb9
 80026f8:	2196      	movs	r1, #150	; 0x96
 80026fa:	2041      	movs	r0, #65	; 0x41
 80026fc:	f001 f904 	bl	8003908 <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002700:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	23eb      	movs	r3, #235	; 0xeb
 8002708:	22b9      	movs	r2, #185	; 0xb9
 800270a:	21c8      	movs	r1, #200	; 0xc8
 800270c:	2041      	movs	r0, #65	; 0x41
 800270e:	f001 f8fb 	bl	8003908 <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002712:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f240 131d 	movw	r3, #285	; 0x11d
 800271c:	22b9      	movs	r2, #185	; 0xb9
 800271e:	21fa      	movs	r1, #250	; 0xfa
 8002720:	2041      	movs	r0, #65	; 0x41
 8002722:	f001 f8f1 	bl	8003908 <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 8002726:	2301      	movs	r3, #1
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	2318      	movs	r3, #24
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	2300      	movs	r3, #0
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2300      	movs	r3, #0
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <mode_game_lcd+0xe0>)
 8002736:	2169      	movs	r1, #105	; 0x69
 8002738:	2054      	movs	r0, #84	; 0x54
 800273a:	f001 fec0 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 800273e:	2301      	movs	r3, #1
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2318      	movs	r3, #24
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2300      	movs	r3, #0
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2300      	movs	r3, #0
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <mode_game_lcd+0xe4>)
 800274e:	219b      	movs	r1, #155	; 0x9b
 8002750:	2060      	movs	r0, #96	; 0x60
 8002752:	f001 feb4 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 8002756:	2301      	movs	r3, #1
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	2318      	movs	r3, #24
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	2300      	movs	r3, #0
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2300      	movs	r3, #0
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <mode_game_lcd+0xe8>)
 8002766:	21cd      	movs	r1, #205	; 0xcd
 8002768:	2060      	movs	r0, #96	; 0x60
 800276a:	f001 fea8 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 800276e:	2301      	movs	r3, #1
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	2318      	movs	r3, #24
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2300      	movs	r3, #0
 800277c:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <mode_game_lcd+0xec>)
 800277e:	21ff      	movs	r1, #255	; 0xff
 8002780:	2064      	movs	r0, #100	; 0x64
 8002782:	f001 fe9c 	bl	80044be <lcd_ShowStr>
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	080374c4 	.word	0x080374c4
 8002790:	0805ccc4 	.word	0x0805ccc4
 8002794:	0800e76c 	.word	0x0800e76c
 8002798:	0800e774 	.word	0x0800e774
 800279c:	0800e77c 	.word	0x0800e77c
 80027a0:	0800e784 	.word	0x0800e784

080027a4 <highscore_lcd>:

void highscore_lcd(){
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 80027aa:	4b61      	ldr	r3, [pc, #388]	; (8002930 <highscore_lcd+0x18c>)
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027b2:	22f0      	movs	r2, #240	; 0xf0
 80027b4:	2100      	movs	r1, #0
 80027b6:	2000      	movs	r0, #0
 80027b8:	f001 fbb0 	bl	8003f1c <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 81, gImage_highscore);
 80027bc:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <highscore_lcd+0x190>)
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2351      	movs	r3, #81	; 0x51
 80027c2:	22f0      	movs	r2, #240	; 0xf0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2000      	movs	r0, #0
 80027c8:	f001 fba8 	bl	8003f1c <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 80027cc:	2301      	movs	r3, #1
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	2310      	movs	r3, #16
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	2300      	movs	r3, #0
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2300      	movs	r3, #0
 80027da:	4a57      	ldr	r2, [pc, #348]	; (8002938 <highscore_lcd+0x194>)
 80027dc:	2150      	movs	r1, #80	; 0x50
 80027de:	200a      	movs	r0, #10
 80027e0:	f001 fe6d 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 80027e4:	2301      	movs	r3, #1
 80027e6:	9302      	str	r3, [sp, #8]
 80027e8:	2310      	movs	r3, #16
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	2300      	movs	r3, #0
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2300      	movs	r3, #0
 80027f2:	4a52      	ldr	r2, [pc, #328]	; (800293c <highscore_lcd+0x198>)
 80027f4:	2150      	movs	r1, #80	; 0x50
 80027f6:	203c      	movs	r0, #60	; 0x3c
 80027f8:	f001 fe61 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 80027fc:	2301      	movs	r3, #1
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2310      	movs	r3, #16
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2300      	movs	r3, #0
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	4a4d      	ldr	r2, [pc, #308]	; (8002940 <highscore_lcd+0x19c>)
 800280c:	2150      	movs	r1, #80	; 0x50
 800280e:	20a0      	movs	r0, #160	; 0xa0
 8002810:	f001 fe55 	bl	80044be <lcd_ShowStr>
	char c[10] = "";
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	f107 0308 	add.w	r3, r7, #8
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e051      	b.n	80028cc <highscore_lcd+0x128>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	3305      	adds	r3, #5
 800282c:	b29b      	uxth	r3, r3
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	b29c      	uxth	r4, r3
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	1d39      	adds	r1, r7, #4
 8002836:	220a      	movs	r2, #10
 8002838:	4618      	mov	r0, r3
 800283a:	f009 ff33 	bl	800c6a4 <itoa>
 800283e:	4602      	mov	r2, r0
 8002840:	2301      	movs	r3, #1
 8002842:	9302      	str	r3, [sp, #8]
 8002844:	2310      	movs	r3, #16
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2300      	movs	r3, #0
 800284e:	4621      	mov	r1, r4
 8002850:	200a      	movs	r0, #10
 8002852:	f001 fe34 	bl	80044be <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3305      	adds	r3, #5
 800285a:	b29b      	uxth	r3, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	b299      	uxth	r1, r3
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	1e5a      	subs	r2, r3, #1
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4a35      	ldr	r2, [pc, #212]	; (8002944 <highscore_lcd+0x1a0>)
 800286e:	441a      	add	r2, r3
 8002870:	2301      	movs	r3, #1
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	2310      	movs	r3, #16
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2300      	movs	r3, #0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2300      	movs	r3, #0
 800287e:	203c      	movs	r0, #60	; 0x3c
 8002880:	f001 fe1d 	bl	80044be <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	3305      	adds	r3, #5
 8002888:	b29b      	uxth	r3, r3
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	b29c      	uxth	r4, r3
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	492c      	ldr	r1, [pc, #176]	; (8002944 <highscore_lcd+0x1a0>)
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	440b      	add	r3, r1
 800289e:	330c      	adds	r3, #12
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	220a      	movs	r2, #10
 80028a8:	4619      	mov	r1, r3
 80028aa:	f009 fefb 	bl	800c6a4 <itoa>
 80028ae:	4602      	mov	r2, r0
 80028b0:	2301      	movs	r3, #1
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	2310      	movs	r3, #16
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2300      	movs	r3, #0
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2300      	movs	r3, #0
 80028be:	4621      	mov	r1, r4
 80028c0:	20a0      	movs	r0, #160	; 0xa0
 80028c2:	f001 fdfc 	bl	80044be <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	3301      	adds	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <highscore_lcd+0x1a4>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d9a8      	bls.n	8002828 <highscore_lcd+0x84>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 80028d6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	f240 131d 	movw	r3, #285	; 0x11d
 80028e0:	22b9      	movs	r2, #185	; 0xb9
 80028e2:	21fa      	movs	r1, #250	; 0xfa
 80028e4:	2041      	movs	r0, #65	; 0x41
 80028e6:	f001 f80f 	bl	8003908 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 80028ea:	2301      	movs	r3, #1
 80028ec:	9302      	str	r3, [sp, #8]
 80028ee:	2318      	movs	r3, #24
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2300      	movs	r3, #0
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <highscore_lcd+0x1a8>)
 80028fa:	21ff      	movs	r1, #255	; 0xff
 80028fc:	2064      	movs	r0, #100	; 0x64
 80028fe:	f001 fdde 	bl	80044be <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002902:	2300      	movs	r3, #0
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	f240 131d 	movw	r3, #285	; 0x11d
 800290a:	22b9      	movs	r2, #185	; 0xb9
 800290c:	21fa      	movs	r1, #250	; 0xfa
 800290e:	2041      	movs	r0, #65	; 0x41
 8002910:	f001 f8cb 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800291c:	22b8      	movs	r2, #184	; 0xb8
 800291e:	21fb      	movs	r1, #251	; 0xfb
 8002920:	2042      	movs	r0, #66	; 0x42
 8002922:	f001 f8c2 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	080374c4 	.word	0x080374c4
 8002934:	08065f04 	.word	0x08065f04
 8002938:	0800e78c 	.word	0x0800e78c
 800293c:	0800e794 	.word	0x0800e794
 8002940:	0800e79c 	.word	0x0800e79c
 8002944:	20000288 	.word	0x20000288
 8002948:	20000140 	.word	0x20000140
 800294c:	0800e784 	.word	0x0800e784

08002950 <game_lcd>:

void game_lcd(){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 8002956:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800295a:	f000 ffa3 	bl	80038a4 <lcd_Clear>
	lcd_Fill(0, 0, 239, POS_Y_MIN - 1, LGRAYBLUE);
 800295e:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2311      	movs	r3, #17
 8002966:	22ef      	movs	r2, #239	; 0xef
 8002968:	2100      	movs	r1, #0
 800296a:	2000      	movs	r0, #0
 800296c:	f000 ffcc 	bl	8003908 <lcd_Fill>
	lcd_Fill(0, POS_Y_MAX + 1, 239, 319, LGRAYBLUE);
 8002970:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f240 133f 	movw	r3, #319	; 0x13f
 800297a:	22ef      	movs	r2, #239	; 0xef
 800297c:	21c8      	movs	r1, #200	; 0xc8
 800297e:	2000      	movs	r0, #0
 8002980:	f000 ffc2 	bl	8003908 <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 8002984:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f240 133b 	movw	r3, #315	; 0x13b
 800298e:	224b      	movs	r2, #75	; 0x4b
 8002990:	f240 1109 	movw	r1, #265	; 0x109
 8002994:	2005      	movs	r0, #5
 8002996:	f000 ffb7 	bl	8003908 <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 800299a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	f240 133b 	movw	r3, #315	; 0x13b
 80029a4:	22eb      	movs	r2, #235	; 0xeb
 80029a6:	f240 1109 	movw	r1, #265	; 0x109
 80029aa:	20a5      	movs	r0, #165	; 0xa5
 80029ac:	f000 ffac 	bl	8003908 <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 80029b0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	23ff      	movs	r3, #255	; 0xff
 80029b8:	229b      	movs	r2, #155	; 0x9b
 80029ba:	21cd      	movs	r1, #205	; 0xcd
 80029bc:	2055      	movs	r0, #85	; 0x55
 80029be:	f000 ffa3 	bl	8003908 <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 80029c2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	f240 133b 	movw	r3, #315	; 0x13b
 80029cc:	229b      	movs	r2, #155	; 0x9b
 80029ce:	f240 1109 	movw	r1, #265	; 0x109
 80029d2:	2055      	movs	r0, #85	; 0x55
 80029d4:	f000 ff98 	bl	8003908 <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 80029d8:	2301      	movs	r3, #1
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2319      	movs	r3, #25
 80029de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029e2:	21e6      	movs	r1, #230	; 0xe6
 80029e4:	20c8      	movs	r0, #200	; 0xc8
 80029e6:	f001 fcfe 	bl	80043e6 <lcd_DrawCircle>
	lcd_ShowStr(POS_X_TEMP, POS_Y_TEMP, "TEMP:", BLACK, BLACK, 12, 1);
 80029ea:	2301      	movs	r3, #1
 80029ec:	9302      	str	r3, [sp, #8]
 80029ee:	230c      	movs	r3, #12
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2300      	movs	r3, #0
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <game_lcd+0x148>)
 80029fa:	2103      	movs	r1, #3
 80029fc:	200a      	movs	r0, #10
 80029fe:	f001 fd5e 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_TEMP + 65, POS_Y_TEMP, "oC", BLACK, BLACK, 12, 1);
 8002a02:	2301      	movs	r3, #1
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	230c      	movs	r3, #12
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <game_lcd+0x14c>)
 8002a12:	2103      	movs	r1, #3
 8002a14:	204b      	movs	r0, #75	; 0x4b
 8002a16:	f001 fd52 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM, POS_Y_TEMP, "HUM:", BLACK, BLACK, 12, 1);
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	9302      	str	r3, [sp, #8]
 8002a1e:	230c      	movs	r3, #12
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2300      	movs	r3, #0
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2300      	movs	r3, #0
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <game_lcd+0x150>)
 8002a2a:	2103      	movs	r1, #3
 8002a2c:	206e      	movs	r0, #110	; 0x6e
 8002a2e:	f001 fd46 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM + 40, POS_Y_TEMP, "%", BLACK, BLACK, 12, 1);
 8002a32:	2301      	movs	r3, #1
 8002a34:	9302      	str	r3, [sp, #8]
 8002a36:	230c      	movs	r3, #12
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <game_lcd+0x154>)
 8002a42:	2103      	movs	r1, #3
 8002a44:	2096      	movs	r0, #150	; 0x96
 8002a46:	f001 fd3a 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_LIGHT, POS_Y_TEMP, "LIGHT:", BLACK, BLACK, 12, 1);
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	9302      	str	r3, [sp, #8]
 8002a4e:	230c      	movs	r3, #12
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2300      	movs	r3, #0
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2300      	movs	r3, #0
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <game_lcd+0x158>)
 8002a5a:	2103      	movs	r1, #3
 8002a5c:	20aa      	movs	r0, #170	; 0xaa
 8002a5e:	f001 fd2e 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 8002a62:	2301      	movs	r3, #1
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	2310      	movs	r3, #16
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <game_lcd+0x15c>)
 8002a72:	21de      	movs	r1, #222	; 0xde
 8002a74:	20b6      	movs	r0, #182	; 0xb6
 8002a76:	f001 fd22 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	9302      	str	r3, [sp, #8]
 8002a7e:	2310      	movs	r3, #16
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2300      	movs	r3, #0
 8002a88:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <game_lcd+0x160>)
 8002a8a:	21cd      	movs	r1, #205	; 0xcd
 8002a8c:	2005      	movs	r0, #5
 8002a8e:	f001 fd16 	bl	80044be <lcd_ShowStr>
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	0800e7a4 	.word	0x0800e7a4
 8002a9c:	0800e7ac 	.word	0x0800e7ac
 8002aa0:	0800e7b0 	.word	0x0800e7b0
 8002aa4:	0800e7b8 	.word	0x0800e7b8
 8002aa8:	0800e7bc 	.word	0x0800e7bc
 8002aac:	0800e7c4 	.word	0x0800e7c4
 8002ab0:	0800e7cc 	.word	0x0800e7cc

08002ab4 <environment_lcd>:

void environment_lcd(){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af04      	add	r7, sp, #16
	lcd_ShowFloatNum(POS_X_TEMP + 30, POS_Y_TEMP, current_temp, 4, BLACK, LGRAYBLUE, 12);
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <environment_lcd+0x64>)
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2300      	movs	r3, #0
 8002acc:	2204      	movs	r2, #4
 8002ace:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad2:	2103      	movs	r1, #3
 8002ad4:	2028      	movs	r0, #40	; 0x28
 8002ad6:	f001 f999 	bl	8003e0c <lcd_ShowFloatNum>
	lcd_ShowIntNum(POS_X_HUM + 25, POS_Y_TEMP, current_hum, 2, BLACK, LGRAYBLUE, 12);
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <environment_lcd+0x68>)
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	230c      	movs	r3, #12
 8002ae0:	9302      	str	r3, [sp, #8]
 8002ae2:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2302      	movs	r3, #2
 8002aee:	2103      	movs	r1, #3
 8002af0:	2087      	movs	r0, #135	; 0x87
 8002af2:	f001 f90d 	bl	8003d10 <lcd_ShowIntNum>
	lcd_ShowIntNum(POS_X_LIGHT + 37, POS_Y_TEMP, current_light, 4, BLACK, LGRAYBLUE, 12);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <environment_lcd+0x6c>)
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	230c      	movs	r3, #12
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2300      	movs	r3, #0
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2304      	movs	r3, #4
 8002b0a:	2103      	movs	r1, #3
 8002b0c:	20cf      	movs	r0, #207	; 0xcf
 8002b0e:	f001 f8ff 	bl	8003d10 <lcd_ShowIntNum>
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000004 	.word	0x20000004
 8002b1c:	20000008 	.word	0x20000008
 8002b20:	2000000a 	.word	0x2000000a

08002b24 <score_lcd>:

void score_lcd(){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <score_lcd+0x2c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	2310      	movs	r3, #16
 8002b32:	9302      	str	r3, [sp, #8]
 8002b34:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	2305      	movs	r3, #5
 8002b40:	21dd      	movs	r1, #221	; 0xdd
 8002b42:	2005      	movs	r0, #5
 8002b44:	f001 f8e4 	bl	8003d10 <lcd_ShowIntNum>
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000000 	.word	0x20000000

08002b54 <pause_lcd>:

void pause_lcd(){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <pause_lcd+0x84>)
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b62:	22f0      	movs	r2, #240	; 0xf0
 8002b64:	2100      	movs	r1, #0
 8002b66:	2000      	movs	r0, #0
 8002b68:	f001 f9d8 	bl	8003f1c <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 84, gImage_pause);
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <pause_lcd+0x88>)
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2354      	movs	r3, #84	; 0x54
 8002b72:	22f0      	movs	r2, #240	; 0xf0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2000      	movs	r0, #0
 8002b78:	f001 f9d0 	bl	8003f1c <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002b7c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	23b9      	movs	r3, #185	; 0xb9
 8002b84:	22b9      	movs	r2, #185	; 0xb9
 8002b86:	2196      	movs	r1, #150	; 0x96
 8002b88:	2041      	movs	r0, #65	; 0x41
 8002b8a:	f000 febd 	bl	8003908 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002b8e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	23eb      	movs	r3, #235	; 0xeb
 8002b96:	22b9      	movs	r2, #185	; 0xb9
 8002b98:	21c8      	movs	r1, #200	; 0xc8
 8002b9a:	2041      	movs	r0, #65	; 0x41
 8002b9c:	f000 feb4 	bl	8003908 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	2318      	movs	r3, #24
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	2300      	movs	r3, #0
 8002bae:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <pause_lcd+0x8c>)
 8002bb0:	219b      	movs	r1, #155	; 0x9b
 8002bb2:	205a      	movs	r0, #90	; 0x5a
 8002bb4:	f001 fc83 	bl	80044be <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002bb8:	2301      	movs	r3, #1
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	2318      	movs	r3, #24
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <pause_lcd+0x90>)
 8002bc8:	21cd      	movs	r1, #205	; 0xcd
 8002bca:	2064      	movs	r0, #100	; 0x64
 8002bcc:	f001 fc77 	bl	80044be <lcd_ShowStr>
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	080374c4 	.word	0x080374c4
 8002bdc:	0806f6e4 	.word	0x0806f6e4
 8002be0:	0800e7d4 	.word	0x0800e7d4
 8002be4:	0800e784 	.word	0x0800e784

08002be8 <game_over_lcd>:

void game_over_lcd(){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 8002bee:	4b4e      	ldr	r3, [pc, #312]	; (8002d28 <game_over_lcd+0x140>)
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002bf6:	22f0      	movs	r2, #240	; 0xf0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f001 f98e 	bl	8003f1c <lcd_ShowPicture>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002c00:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	f240 131d 	movw	r3, #285	; 0x11d
 8002c0a:	22b9      	movs	r2, #185	; 0xb9
 8002c0c:	21fa      	movs	r1, #250	; 0xfa
 8002c0e:	2041      	movs	r0, #65	; 0x41
 8002c10:	f000 fe7a 	bl	8003908 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002c14:	2300      	movs	r3, #0
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f240 131d 	movw	r3, #285	; 0x11d
 8002c1c:	22b9      	movs	r2, #185	; 0xb9
 8002c1e:	21fa      	movs	r1, #250	; 0xfa
 8002c20:	2041      	movs	r0, #65	; 0x41
 8002c22:	f000 ff42 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002c26:	2300      	movs	r3, #0
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002c2e:	22b8      	movs	r2, #184	; 0xb8
 8002c30:	21fb      	movs	r1, #251	; 0xfb
 8002c32:	2042      	movs	r0, #66	; 0x42
 8002c34:	f000 ff39 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002c38:	2301      	movs	r3, #1
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	2318      	movs	r3, #24
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2300      	movs	r3, #0
 8002c46:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <game_over_lcd+0x144>)
 8002c48:	21ff      	movs	r1, #255	; 0xff
 8002c4a:	2064      	movs	r0, #100	; 0x64
 8002c4c:	f001 fc37 	bl	80044be <lcd_ShowStr>
	char c[10] = "";
 8002c50:	2300      	movs	r3, #0
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	f107 0308 	add.w	r3, r7, #8
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	809a      	strh	r2, [r3, #4]
	lcd_StrCenter(0, POS_Y_INFO, "USER", BLACK, BROWN, 16, 1);
 8002c5e:	2301      	movs	r3, #1
 8002c60:	9302      	str	r3, [sp, #8]
 8002c62:	2310      	movs	r3, #16
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <game_over_lcd+0x148>)
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	2000      	movs	r0, #0
 8002c74:	f001 fc72 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + SPACE_INFO, name, DARKBLUE, BROWN, 16, 1);
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002c8a:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <game_over_lcd+0x14c>)
 8002c8c:	2178      	movs	r1, #120	; 0x78
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f001 fc64 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 2 * SPACE_INFO, "SCORE", BLACK, BROWN, 16, 1);
 8002c94:	2301      	movs	r3, #1
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	2310      	movs	r3, #16
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <game_over_lcd+0x150>)
 8002ca6:	218c      	movs	r1, #140	; 0x8c
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f001 fc57 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 3 * SPACE_INFO, itoa(current_score, c, 10), DARKBLUE, BROWN, 16, 1);
 8002cae:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <game_over_lcd+0x154>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	220a      	movs	r2, #10
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f009 fcf3 	bl	800c6a4 <itoa>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	9302      	str	r3, [sp, #8]
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002cd2:	21a0      	movs	r1, #160	; 0xa0
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f001 fc41 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 4 * SPACE_INFO, "TIME PLAYED", BLACK, BROWN, 16, 1);
 8002cda:	2301      	movs	r3, #1
 8002cdc:	9302      	str	r3, [sp, #8]
 8002cde:	2310      	movs	r3, #16
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <game_over_lcd+0x158>)
 8002cec:	21b4      	movs	r1, #180	; 0xb4
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f001 fc34 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 5 * SPACE_INFO, itoa(current_time, c, 10), DARKBLUE, BROWN, 16, 1);
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <game_over_lcd+0x15c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f009 fcd0 	bl	800c6a4 <itoa>
 8002d04:	4602      	mov	r2, r0
 8002d06:	2301      	movs	r3, #1
 8002d08:	9302      	str	r3, [sp, #8]
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002d18:	21c8      	movs	r1, #200	; 0xc8
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f001 fc1e 	bl	800455c <lcd_StrCenter>
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	08079464 	.word	0x08079464
 8002d2c:	0800e784 	.word	0x0800e784
 8002d30:	0800e7dc 	.word	0x0800e7dc
 8002d34:	20000144 	.word	0x20000144
 8002d38:	0800e79c 	.word	0x0800e79c
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	0800e7e4 	.word	0x0800e7e4
 8002d44:	20000150 	.word	0x20000150

08002d48 <youwin_lcd>:

void youwin_lcd(){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <youwin_lcd+0x140>)
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d56:	22f0      	movs	r2, #240	; 0xf0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f001 f8de 	bl	8003f1c <lcd_ShowPicture>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002d60:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f240 131d 	movw	r3, #285	; 0x11d
 8002d6a:	22b9      	movs	r2, #185	; 0xb9
 8002d6c:	21fa      	movs	r1, #250	; 0xfa
 8002d6e:	2041      	movs	r0, #65	; 0x41
 8002d70:	f000 fdca 	bl	8003908 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	f240 131d 	movw	r3, #285	; 0x11d
 8002d7c:	22b9      	movs	r2, #185	; 0xb9
 8002d7e:	21fa      	movs	r1, #250	; 0xfa
 8002d80:	2041      	movs	r0, #65	; 0x41
 8002d82:	f000 fe92 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002d86:	2300      	movs	r3, #0
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002d8e:	22b8      	movs	r2, #184	; 0xb8
 8002d90:	21fb      	movs	r1, #251	; 0xfb
 8002d92:	2042      	movs	r0, #66	; 0x42
 8002d94:	f000 fe89 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002d98:	2301      	movs	r3, #1
 8002d9a:	9302      	str	r3, [sp, #8]
 8002d9c:	2318      	movs	r3, #24
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	2300      	movs	r3, #0
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2300      	movs	r3, #0
 8002da6:	4a39      	ldr	r2, [pc, #228]	; (8002e8c <youwin_lcd+0x144>)
 8002da8:	21ff      	movs	r1, #255	; 0xff
 8002daa:	2064      	movs	r0, #100	; 0x64
 8002dac:	f001 fb87 	bl	80044be <lcd_ShowStr>
	char c[10] = "";
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	809a      	strh	r2, [r3, #4]
	lcd_StrCenter(0, POS_Y_INFO, "USER", BLACK, BROWN, 16, 1);
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <youwin_lcd+0x148>)
 8002dd0:	2164      	movs	r1, #100	; 0x64
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f001 fbc2 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + SPACE_INFO, name, DARKBLUE, BROWN, 16, 1);
 8002dd8:	2301      	movs	r3, #1
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	2310      	movs	r3, #16
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002dea:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <youwin_lcd+0x14c>)
 8002dec:	2178      	movs	r1, #120	; 0x78
 8002dee:	2000      	movs	r0, #0
 8002df0:	f001 fbb4 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 2 * SPACE_INFO, "SCORE", BLACK, BROWN, 16, 1);
 8002df4:	2301      	movs	r3, #1
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	2310      	movs	r3, #16
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <youwin_lcd+0x150>)
 8002e06:	218c      	movs	r1, #140	; 0x8c
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f001 fba7 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 3 * SPACE_INFO, itoa(current_score, c, 10), DARKBLUE, BROWN, 16, 1);
 8002e0e:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <youwin_lcd+0x154>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	220a      	movs	r2, #10
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f009 fc43 	bl	800c6a4 <itoa>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	2301      	movs	r3, #1
 8002e22:	9302      	str	r3, [sp, #8]
 8002e24:	2310      	movs	r3, #16
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002e32:	21a0      	movs	r1, #160	; 0xa0
 8002e34:	2000      	movs	r0, #0
 8002e36:	f001 fb91 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 4 * SPACE_INFO, "TIME PLAYED", BLACK, BROWN, 16, 1);
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	2310      	movs	r3, #16
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <youwin_lcd+0x158>)
 8002e4c:	21b4      	movs	r1, #180	; 0xb4
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f001 fb84 	bl	800455c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 5 * SPACE_INFO, itoa(current_time, c, 10), DARKBLUE, BROWN, 16, 1);
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <youwin_lcd+0x15c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	220a      	movs	r2, #10
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f009 fc20 	bl	800c6a4 <itoa>
 8002e64:	4602      	mov	r2, r0
 8002e66:	2301      	movs	r3, #1
 8002e68:	9302      	str	r3, [sp, #8]
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002e78:	21c8      	movs	r1, #200	; 0xc8
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f001 fb6e 	bl	800455c <lcd_StrCenter>
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	0809ec64 	.word	0x0809ec64
 8002e8c:	0800e784 	.word	0x0800e784
 8002e90:	0800e7dc 	.word	0x0800e7dc
 8002e94:	20000144 	.word	0x20000144
 8002e98:	0800e79c 	.word	0x0800e79c
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	0800e7e4 	.word	0x0800e7e4
 8002ea4:	20000150 	.word	0x20000150

08002ea8 <uppercase_lcd>:

void uppercase_lcd(){
 8002ea8:	b5b0      	push	{r4, r5, r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002eae:	2300      	movs	r3, #0
 8002eb0:	71fb      	strb	r3, [r7, #7]
 8002eb2:	e036      	b.n	8002f22 <uppercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	71bb      	strb	r3, [r7, #6]
 8002eb8:	e02d      	b.n	8002f16 <uppercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_upper[i][j], BLACK, BROWN, 16, 0);
 8002eba:	79bb      	ldrb	r3, [r7, #6]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	00d2      	lsls	r2, r2, #3
 8002ec2:	441a      	add	r2, r3
 8002ec4:	0052      	lsls	r2, r2, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3316      	adds	r3, #22
 8002ece:	b298      	uxth	r0, r3
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	00d2      	lsls	r2, r2, #3
 8002ed8:	441a      	add	r2, r3
 8002eda:	0052      	lsls	r2, r2, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3386      	adds	r3, #134	; 0x86
 8002ee4:	b29c      	uxth	r4, r3
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	79b9      	ldrb	r1, [r7, #6]
 8002eea:	4d12      	ldr	r5, [pc, #72]	; (8002f34 <uppercase_lcd+0x8c>)
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	442b      	add	r3, r5
 8002ef6:	440b      	add	r3, r1
 8002ef8:	781a      	ldrb	r2, [r3, #0]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	2310      	movs	r3, #16
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	f000 fe04 	bl	8003b18 <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002f10:	79bb      	ldrb	r3, [r7, #6]
 8002f12:	3301      	adds	r3, #1
 8002f14:	71bb      	strb	r3, [r7, #6]
 8002f16:	79bb      	ldrb	r3, [r7, #6]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d9ce      	bls.n	8002eba <uppercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	71fb      	strb	r3, [r7, #7]
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d9c5      	bls.n	8002eb4 <uppercase_lcd+0xc>
		}
	}
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bdb0      	pop	{r4, r5, r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000000c 	.word	0x2000000c

08002f38 <lowercase_lcd>:

void lowercase_lcd(){
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002f3e:	2300      	movs	r3, #0
 8002f40:	71fb      	strb	r3, [r7, #7]
 8002f42:	e036      	b.n	8002fb2 <lowercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002f44:	2300      	movs	r3, #0
 8002f46:	71bb      	strb	r3, [r7, #6]
 8002f48:	e02d      	b.n	8002fa6 <lowercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_lower[i][j], BLACK, BROWN, 16, 0);
 8002f4a:	79bb      	ldrb	r3, [r7, #6]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	441a      	add	r2, r3
 8002f54:	0052      	lsls	r2, r2, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3316      	adds	r3, #22
 8002f5e:	b298      	uxth	r0, r3
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	00d2      	lsls	r2, r2, #3
 8002f68:	441a      	add	r2, r3
 8002f6a:	0052      	lsls	r2, r2, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3386      	adds	r3, #134	; 0x86
 8002f74:	b29c      	uxth	r4, r3
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	79b9      	ldrb	r1, [r7, #6]
 8002f7a:	4d12      	ldr	r5, [pc, #72]	; (8002fc4 <lowercase_lcd+0x8c>)
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	442b      	add	r3, r5
 8002f86:	440b      	add	r3, r1
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9302      	str	r3, [sp, #8]
 8002f8e:	2310      	movs	r3, #16
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	f000 fdbc 	bl	8003b18 <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002fa0:	79bb      	ldrb	r3, [r7, #6]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	71bb      	strb	r3, [r7, #6]
 8002fa6:	79bb      	ldrb	r3, [r7, #6]
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d9ce      	bls.n	8002f4a <lowercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	71fb      	strb	r3, [r7, #7]
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d9c5      	bls.n	8002f44 <lowercase_lcd+0xc>
		}
	}
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000002c 	.word	0x2000002c

08002fc8 <selectbox_lcd>:

void selectbox_lcd(){
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 8002fce:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <selectbox_lcd+0xf8>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	00d2      	lsls	r2, r2, #3
 8002fd8:	441a      	add	r2, r3
 8002fda:	0052      	lsls	r2, r2, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3306      	adds	r3, #6
 8002fe4:	b298      	uxth	r0, r3
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <selectbox_lcd+0xfc>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	00d2      	lsls	r2, r2, #3
 8002ff0:	441a      	add	r2, r3
 8002ff2:	0052      	lsls	r2, r2, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	337c      	adds	r3, #124	; 0x7c
 8002ffc:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_c_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r_old + 1) * CHAR_HEIGHT, GRAY);
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <selectbox_lcd+0xf8>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 8003004:	b29b      	uxth	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	00d2      	lsls	r2, r2, #3
 800300a:	441a      	add	r2, r3
 800300c:	0052      	lsls	r2, r2, #1
 800300e:	4413      	add	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	b29b      	uxth	r3, r3
 8003014:	3306      	adds	r3, #6
 8003016:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_c_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r_old + 1) * CHAR_HEIGHT, GRAY);
 8003018:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <selectbox_lcd+0xfc>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 800301e:	b29b      	uxth	r3, r3
 8003020:	461c      	mov	r4, r3
 8003022:	00e4      	lsls	r4, r4, #3
 8003024:	441c      	add	r4, r3
 8003026:	0064      	lsls	r4, r4, #1
 8003028:	4423      	add	r3, r4
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	b29b      	uxth	r3, r3
 800302e:	337c      	adds	r3, #124	; 0x7c
 8003030:	b29b      	uxth	r3, r3
 8003032:	f248 4430 	movw	r4, #33840	; 0x8430
 8003036:	9400      	str	r4, [sp, #0]
 8003038:	f000 fd37 	bl	8003aaa <lcd_DrawRectangle>
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 800303c:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <selectbox_lcd+0x100>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	00d2      	lsls	r2, r2, #3
 8003046:	441a      	add	r2, r3
 8003048:	0052      	lsls	r2, r2, #1
 800304a:	4413      	add	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	b29b      	uxth	r3, r3
 8003050:	3306      	adds	r3, #6
 8003052:	b298      	uxth	r0, r3
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <selectbox_lcd+0x104>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	00d2      	lsls	r2, r2, #3
 800305e:	441a      	add	r2, r3
 8003060:	0052      	lsls	r2, r2, #1
 8003062:	4413      	add	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	b29b      	uxth	r3, r3
 8003068:	337c      	adds	r3, #124	; 0x7c
 800306a:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_c + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r + 1) * CHAR_HEIGHT, BLACK);
 800306c:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <selectbox_lcd+0x100>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	00d2      	lsls	r2, r2, #3
 8003078:	441a      	add	r2, r3
 800307a:	0052      	lsls	r2, r2, #1
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	b29b      	uxth	r3, r3
 8003082:	3306      	adds	r3, #6
 8003084:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_c + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r + 1) * CHAR_HEIGHT, BLACK);
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <selectbox_lcd+0x104>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 800308c:	b29b      	uxth	r3, r3
 800308e:	461c      	mov	r4, r3
 8003090:	00e4      	lsls	r4, r4, #3
 8003092:	441c      	add	r4, r3
 8003094:	0064      	lsls	r4, r4, #1
 8003096:	4423      	add	r3, r4
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	b29b      	uxth	r3, r3
 800309c:	337c      	adds	r3, #124	; 0x7c
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2400      	movs	r4, #0
 80030a2:	9400      	str	r4, [sp, #0]
 80030a4:	f000 fd01 	bl	8003aaa <lcd_DrawRectangle>
	index_r_old = index_r;
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <selectbox_lcd+0x104>)
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <selectbox_lcd+0xfc>)
 80030ae:	701a      	strb	r2, [r3, #0]
	index_c_old = index_c;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <selectbox_lcd+0x100>)
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	4b02      	ldr	r3, [pc, #8]	; (80030c0 <selectbox_lcd+0xf8>)
 80030b6:	701a      	strb	r2, [r3, #0]
}
 80030b8:	bf00      	nop
 80030ba:	3704      	adds	r7, #4
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd90      	pop	{r4, r7, pc}
 80030c0:	2000015a 	.word	0x2000015a
 80030c4:	20000159 	.word	0x20000159
 80030c8:	20000158 	.word	0x20000158
 80030cc:	20000157 	.word	0x20000157

080030d0 <displayName_lcd>:

void displayName_lcd(){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < name_length; i++){
 80030d6:	2300      	movs	r3, #0
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	e018      	b.n	800310e <displayName_lcd+0x3e>
		lcd_ShowChar(POS_X_DISP + i * SPACE_DISP, POS_Y_DISP, name[i], BLACK, BROWN, 24, 0);
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	332f      	adds	r3, #47	; 0x2f
 80030ea:	b298      	uxth	r0, r3
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <displayName_lcd+0x90>)
 80030f0:	5cd2      	ldrb	r2, [r2, r3]
 80030f2:	2300      	movs	r3, #0
 80030f4:	9302      	str	r3, [sp, #8]
 80030f6:	2318      	movs	r3, #24
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	2300      	movs	r3, #0
 8003102:	2150      	movs	r1, #80	; 0x50
 8003104:	f000 fd08 	bl	8003b18 <lcd_ShowChar>
	for(uint8_t i = 0; i < name_length; i++){
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	3301      	adds	r3, #1
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <displayName_lcd+0x94>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	79fa      	ldrb	r2, [r7, #7]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3e1      	bcc.n	80030dc <displayName_lcd+0xc>
	}
	for(uint8_t i = name_length; i < 10; i++){
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <displayName_lcd+0x94>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	71bb      	strb	r3, [r7, #6]
 800311e:	e016      	b.n	800314e <displayName_lcd+0x7e>
		lcd_ShowChar(POS_X_DISP + i * SPACE_DISP, POS_Y_DISP, '_', BLACK, BROWN, 24, 0);
 8003120:	79bb      	ldrb	r3, [r7, #6]
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	b29b      	uxth	r3, r3
 800312c:	332f      	adds	r3, #47	; 0x2f
 800312e:	b298      	uxth	r0, r3
 8003130:	2300      	movs	r3, #0
 8003132:	9302      	str	r3, [sp, #8]
 8003134:	2318      	movs	r3, #24
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	225f      	movs	r2, #95	; 0x5f
 8003142:	2150      	movs	r1, #80	; 0x50
 8003144:	f000 fce8 	bl	8003b18 <lcd_ShowChar>
	for(uint8_t i = name_length; i < 10; i++){
 8003148:	79bb      	ldrb	r3, [r7, #6]
 800314a:	3301      	adds	r3, #1
 800314c:	71bb      	strb	r3, [r7, #6]
 800314e:	79bb      	ldrb	r3, [r7, #6]
 8003150:	2b09      	cmp	r3, #9
 8003152:	d9e5      	bls.n	8003120 <displayName_lcd+0x50>
	}
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000144 	.word	0x20000144
 8003164:	2000014f 	.word	0x2000014f

08003168 <entername_lcd>:

void entername_lcd(){
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af02      	add	r7, sp, #8
	lcd_ShowPicture(0, 0, 240, 320, gImage_select);
 800316e:	4b35      	ldr	r3, [pc, #212]	; (8003244 <entername_lcd+0xdc>)
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003176:	22f0      	movs	r2, #240	; 0xf0
 8003178:	2100      	movs	r1, #0
 800317a:	2000      	movs	r0, #0
 800317c:	f000 fece 	bl	8003f1c <lcd_ShowPicture>
	lcd_Fill(POS_X_CHAR, POS_Y_CHAR,
 8003180:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800318a:	22ea      	movs	r2, #234	; 0xea
 800318c:	217c      	movs	r1, #124	; 0x7c
 800318e:	2006      	movs	r0, #6
 8003190:	f000 fbba 	bl	8003908 <lcd_Fill>
			POS_X_CHAR + CHAR_COL*CHAR_WIDTH, POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT, BROWN);
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8003194:	2300      	movs	r3, #0
 8003196:	71fb      	strb	r3, [r7, #7]
 8003198:	e03e      	b.n	8003218 <entername_lcd+0xb0>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 800319a:	2300      	movs	r3, #0
 800319c:	71bb      	strb	r3, [r7, #6]
 800319e:	e035      	b.n	800320c <entername_lcd+0xa4>
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 80031a0:	79bb      	ldrb	r3, [r7, #6]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	00d2      	lsls	r2, r2, #3
 80031a8:	441a      	add	r2, r3
 80031aa:	0052      	lsls	r2, r2, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3306      	adds	r3, #6
 80031b4:	b298      	uxth	r0, r3
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	00d2      	lsls	r2, r2, #3
 80031be:	441a      	add	r2, r3
 80031c0:	0052      	lsls	r2, r2, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	337c      	adds	r3, #124	; 0x7c
 80031ca:	b299      	uxth	r1, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 80031cc:	79bb      	ldrb	r3, [r7, #6]
 80031ce:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	00d2      	lsls	r2, r2, #3
 80031d6:	441a      	add	r2, r3
 80031d8:	0052      	lsls	r2, r2, #1
 80031da:	4413      	add	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3306      	adds	r3, #6
 80031e2:	b29a      	uxth	r2, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	461c      	mov	r4, r3
 80031ec:	00e4      	lsls	r4, r4, #3
 80031ee:	441c      	add	r4, r3
 80031f0:	0064      	lsls	r4, r4, #1
 80031f2:	4423      	add	r3, r4
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	337c      	adds	r3, #124	; 0x7c
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f248 4430 	movw	r4, #33840	; 0x8430
 8003200:	9400      	str	r4, [sp, #0]
 8003202:	f000 fc52 	bl	8003aaa <lcd_DrawRectangle>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8003206:	79bb      	ldrb	r3, [r7, #6]
 8003208:	3301      	adds	r3, #1
 800320a:	71bb      	strb	r3, [r7, #6]
 800320c:	79bb      	ldrb	r3, [r7, #6]
 800320e:	2b05      	cmp	r3, #5
 8003210:	d9c6      	bls.n	80031a0 <entername_lcd+0x38>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	3301      	adds	r3, #1
 8003216:	71fb      	strb	r3, [r7, #7]
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	2b04      	cmp	r3, #4
 800321c:	d9bd      	bls.n	800319a <entername_lcd+0x32>
		}
	}
	index_r = 0;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <entername_lcd+0xe0>)
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
	index_c = 0;
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <entername_lcd+0xe4>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
	flag_uppercase = 0;
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <entername_lcd+0xe8>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
	lowercase_lcd();
 8003230:	f7ff fe82 	bl	8002f38 <lowercase_lcd>
	selectbox_lcd();
 8003234:	f7ff fec8 	bl	8002fc8 <selectbox_lcd>
	displayName_lcd();
 8003238:	f7ff ff4a 	bl	80030d0 <displayName_lcd>
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	080c4464 	.word	0x080c4464
 8003248:	20000157 	.word	0x20000157
 800324c:	20000158 	.word	0x20000158
 8003250:	20000156 	.word	0x20000156

08003254 <home_not_select>:

void home_not_select(){
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 800325a:	f248 4330 	movw	r3, #33840	; 0x8430
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	23b9      	movs	r3, #185	; 0xb9
 8003262:	22b9      	movs	r2, #185	; 0xb9
 8003264:	2196      	movs	r1, #150	; 0x96
 8003266:	2041      	movs	r0, #65	; 0x41
 8003268:	f000 fc1f 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 800326c:	f248 4330 	movw	r3, #33840	; 0x8430
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	23b8      	movs	r3, #184	; 0xb8
 8003274:	22b8      	movs	r2, #184	; 0xb8
 8003276:	2197      	movs	r1, #151	; 0x97
 8003278:	2042      	movs	r0, #66	; 0x42
 800327a:	f000 fc16 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800327e:	f248 4330 	movw	r3, #33840	; 0x8430
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	23eb      	movs	r3, #235	; 0xeb
 8003286:	22b9      	movs	r2, #185	; 0xb9
 8003288:	21c8      	movs	r1, #200	; 0xc8
 800328a:	2041      	movs	r0, #65	; 0x41
 800328c:	f000 fc0d 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8003290:	f248 4330 	movw	r3, #33840	; 0x8430
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	23ea      	movs	r3, #234	; 0xea
 8003298:	22b8      	movs	r2, #184	; 0xb8
 800329a:	21c9      	movs	r1, #201	; 0xc9
 800329c:	2042      	movs	r0, #66	; 0x42
 800329e:	f000 fc04 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80032a2:	f248 4330 	movw	r3, #33840	; 0x8430
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	f240 131d 	movw	r3, #285	; 0x11d
 80032ac:	22b9      	movs	r2, #185	; 0xb9
 80032ae:	21fa      	movs	r1, #250	; 0xfa
 80032b0:	2041      	movs	r0, #65	; 0x41
 80032b2:	f000 fbfa 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80032b6:	f248 4330 	movw	r3, #33840	; 0x8430
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80032c0:	22b8      	movs	r2, #184	; 0xb8
 80032c2:	21fb      	movs	r1, #251	; 0xfb
 80032c4:	2042      	movs	r0, #66	; 0x42
 80032c6:	f000 fbf0 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <home_second_lcd>:

void home_second_lcd(){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af02      	add	r7, sp, #8
	home_not_select();
 80032d6:	f7ff ffbd 	bl	8003254 <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80032da:	2300      	movs	r3, #0
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	23b9      	movs	r3, #185	; 0xb9
 80032e0:	22b9      	movs	r2, #185	; 0xb9
 80032e2:	2196      	movs	r1, #150	; 0x96
 80032e4:	2041      	movs	r0, #65	; 0x41
 80032e6:	f000 fbe0 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80032ea:	2300      	movs	r3, #0
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	23b8      	movs	r3, #184	; 0xb8
 80032f0:	22b8      	movs	r2, #184	; 0xb8
 80032f2:	2197      	movs	r1, #151	; 0x97
 80032f4:	2042      	movs	r0, #66	; 0x42
 80032f6:	f000 fbd8 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 80032fa:	bf00      	nop
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <home_third_lcd>:

void home_third_lcd(){
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af02      	add	r7, sp, #8
	home_not_select();
 8003306:	f7ff ffa5 	bl	8003254 <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800330a:	2300      	movs	r3, #0
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	23eb      	movs	r3, #235	; 0xeb
 8003310:	22b9      	movs	r2, #185	; 0xb9
 8003312:	21c8      	movs	r1, #200	; 0xc8
 8003314:	2041      	movs	r0, #65	; 0x41
 8003316:	f000 fbc8 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 800331a:	2300      	movs	r3, #0
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	23ea      	movs	r3, #234	; 0xea
 8003320:	22b8      	movs	r2, #184	; 0xb8
 8003322:	21c9      	movs	r1, #201	; 0xc9
 8003324:	2042      	movs	r0, #66	; 0x42
 8003326:	f000 fbc0 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <home_forth_lcd>:

void home_forth_lcd(){
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af02      	add	r7, sp, #8
	home_not_select();
 8003336:	f7ff ff8d 	bl	8003254 <home_not_select>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	f240 131d 	movw	r3, #285	; 0x11d
 8003342:	22b9      	movs	r2, #185	; 0xb9
 8003344:	21fa      	movs	r1, #250	; 0xfa
 8003346:	2041      	movs	r0, #65	; 0x41
 8003348:	f000 fbaf 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 800334c:	2300      	movs	r3, #0
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003354:	22b8      	movs	r2, #184	; 0xb8
 8003356:	21fb      	movs	r1, #251	; 0xfb
 8003358:	2042      	movs	r0, #66	; 0x42
 800335a:	f000 fba6 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <mode_first_lcd>:

void mode_first_lcd(){
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800336a:	2300      	movs	r3, #0
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2387      	movs	r3, #135	; 0x87
 8003370:	22b9      	movs	r2, #185	; 0xb9
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	2041      	movs	r0, #65	; 0x41
 8003376:	f000 fb98 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2386      	movs	r3, #134	; 0x86
 8003380:	22b8      	movs	r2, #184	; 0xb8
 8003382:	2165      	movs	r1, #101	; 0x65
 8003384:	2042      	movs	r0, #66	; 0x42
 8003386:	f000 fb90 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, BLACK);
	home_not_select();
 800338a:	f7ff ff63 	bl	8003254 <home_not_select>
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <mode_second_lcd>:

void mode_second_lcd(){
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800339a:	f248 4330 	movw	r3, #33840	; 0x8430
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2387      	movs	r3, #135	; 0x87
 80033a2:	22b9      	movs	r2, #185	; 0xb9
 80033a4:	2164      	movs	r1, #100	; 0x64
 80033a6:	2041      	movs	r0, #65	; 0x41
 80033a8:	f000 fb7f 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80033ac:	f248 4330 	movw	r3, #33840	; 0x8430
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2386      	movs	r3, #134	; 0x86
 80033b4:	22b8      	movs	r2, #184	; 0xb8
 80033b6:	2165      	movs	r1, #101	; 0x65
 80033b8:	2042      	movs	r0, #66	; 0x42
 80033ba:	f000 fb76 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_second_lcd();
 80033be:	f7ff ff87 	bl	80032d0 <home_second_lcd>
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <mode_third_lcd>:

void mode_third_lcd(){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80033ce:	f248 4330 	movw	r3, #33840	; 0x8430
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2387      	movs	r3, #135	; 0x87
 80033d6:	22b9      	movs	r2, #185	; 0xb9
 80033d8:	2164      	movs	r1, #100	; 0x64
 80033da:	2041      	movs	r0, #65	; 0x41
 80033dc:	f000 fb65 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80033e0:	f248 4330 	movw	r3, #33840	; 0x8430
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2386      	movs	r3, #134	; 0x86
 80033e8:	22b8      	movs	r2, #184	; 0xb8
 80033ea:	2165      	movs	r1, #101	; 0x65
 80033ec:	2042      	movs	r0, #66	; 0x42
 80033ee:	f000 fb5c 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_third_lcd();
 80033f2:	f7ff ff85 	bl	8003300 <home_third_lcd>
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <mode_forth_lcd>:

void mode_forth_lcd(){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 8003402:	f248 4330 	movw	r3, #33840	; 0x8430
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2387      	movs	r3, #135	; 0x87
 800340a:	22b9      	movs	r2, #185	; 0xb9
 800340c:	2164      	movs	r1, #100	; 0x64
 800340e:	2041      	movs	r0, #65	; 0x41
 8003410:	f000 fb4b 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8003414:	f248 4330 	movw	r3, #33840	; 0x8430
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2386      	movs	r3, #134	; 0x86
 800341c:	22b8      	movs	r2, #184	; 0xb8
 800341e:	2165      	movs	r1, #101	; 0x65
 8003420:	2042      	movs	r0, #66	; 0x42
 8003422:	f000 fb42 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_forth_lcd();
 8003426:	f7ff ff83 	bl	8003330 <home_forth_lcd>
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <pause_second_lcd>:

void pause_second_lcd(){
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	23b9      	movs	r3, #185	; 0xb9
 800343c:	22b9      	movs	r2, #185	; 0xb9
 800343e:	2196      	movs	r1, #150	; 0x96
 8003440:	2041      	movs	r0, #65	; 0x41
 8003442:	f000 fb32 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8003446:	2300      	movs	r3, #0
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	23b8      	movs	r3, #184	; 0xb8
 800344c:	22b8      	movs	r2, #184	; 0xb8
 800344e:	2197      	movs	r1, #151	; 0x97
 8003450:	2042      	movs	r0, #66	; 0x42
 8003452:	f000 fb2a 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8003456:	f248 4330 	movw	r3, #33840	; 0x8430
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	23eb      	movs	r3, #235	; 0xeb
 800345e:	22b9      	movs	r2, #185	; 0xb9
 8003460:	21c8      	movs	r1, #200	; 0xc8
 8003462:	2041      	movs	r0, #65	; 0x41
 8003464:	f000 fb21 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8003468:	f248 4330 	movw	r3, #33840	; 0x8430
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	23ea      	movs	r3, #234	; 0xea
 8003470:	22b8      	movs	r2, #184	; 0xb8
 8003472:	21c9      	movs	r1, #201	; 0xc9
 8003474:	2042      	movs	r0, #66	; 0x42
 8003476:	f000 fb18 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <pause_third_lcd>:

void pause_third_lcd(){
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8003486:	f248 4330 	movw	r3, #33840	; 0x8430
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	23b9      	movs	r3, #185	; 0xb9
 800348e:	22b9      	movs	r2, #185	; 0xb9
 8003490:	2196      	movs	r1, #150	; 0x96
 8003492:	2041      	movs	r0, #65	; 0x41
 8003494:	f000 fb09 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8003498:	f248 4330 	movw	r3, #33840	; 0x8430
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	23b8      	movs	r3, #184	; 0xb8
 80034a0:	22b8      	movs	r2, #184	; 0xb8
 80034a2:	2197      	movs	r1, #151	; 0x97
 80034a4:	2042      	movs	r0, #66	; 0x42
 80034a6:	f000 fb00 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80034aa:	2300      	movs	r3, #0
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	23eb      	movs	r3, #235	; 0xeb
 80034b0:	22b9      	movs	r2, #185	; 0xb9
 80034b2:	21c8      	movs	r1, #200	; 0xc8
 80034b4:	2041      	movs	r0, #65	; 0x41
 80034b6:	f000 faf8 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80034ba:	2300      	movs	r3, #0
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	23ea      	movs	r3, #234	; 0xea
 80034c0:	22b8      	movs	r2, #184	; 0xb8
 80034c2:	21c9      	movs	r1, #201	; 0xc9
 80034c4:	2042      	movs	r0, #66	; 0x42
 80034c6:	f000 faf0 	bl	8003aaa <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <point_head_lcd>:

void point_head_lcd(struct Point head){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	463b      	mov	r3, r7
 80034d8:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(head.x, head.y, GREEN, RADIUS_SNAKE, 1);
 80034dc:	6838      	ldr	r0, [r7, #0]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	2301      	movs	r3, #1
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2304      	movs	r3, #4
 80034e6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80034ea:	f000 ff7c 	bl	80043e6 <lcd_DrawCircle>
	lcd_DrawCircle(head.x, head.y, BLACK, 1, 1);
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	2301      	movs	r3, #1
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2301      	movs	r3, #1
 80034f8:	2200      	movs	r2, #0
 80034fa:	f000 ff74 	bl	80043e6 <lcd_DrawCircle>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <point_snake_lcd>:

void point_snake_lcd(struct Point snake){
 8003506:	b590      	push	{r4, r7, lr}
 8003508:	b085      	sub	sp, #20
 800350a:	af02      	add	r7, sp, #8
 800350c:	463b      	mov	r3, r7
 800350e:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(snake.x, snake.y, GREEN, RADIUS_SNAKE, 1);
 8003512:	6838      	ldr	r0, [r7, #0]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	2301      	movs	r3, #1
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2304      	movs	r3, #4
 800351c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003520:	f000 ff61 	bl	80043e6 <lcd_DrawCircle>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b03      	subs	r3, #3
 800352a:	b298      	uxth	r0, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b03      	subs	r3, #3
 8003532:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8003534:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8003536:	b29b      	uxth	r3, r3
 8003538:	3304      	adds	r3, #4
 800353a:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 800353c:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 800353e:	b29b      	uxth	r3, r3
 8003540:	3304      	adds	r3, #4
 8003542:	b29b      	uxth	r3, r3
 8003544:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003548:	9400      	str	r4, [sp, #0]
 800354a:	f000 fa2a 	bl	80039a2 <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b03      	subs	r3, #3
 8003554:	b298      	uxth	r0, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b02      	subs	r3, #2
 800355c:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 800355e:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8003560:	b29b      	uxth	r3, r3
 8003562:	3303      	adds	r3, #3
 8003564:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8003566:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8003568:	b29b      	uxth	r3, r3
 800356a:	3304      	adds	r3, #4
 800356c:	b29b      	uxth	r3, r3
 800356e:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003572:	9400      	str	r4, [sp, #0]
 8003574:	f000 fa15 	bl	80039a2 <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b02      	subs	r3, #2
 800357e:	b298      	uxth	r0, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b03      	subs	r3, #3
 8003586:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 8003588:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 800358a:	b29b      	uxth	r3, r3
 800358c:	3304      	adds	r3, #4
 800358e:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 8003590:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8003592:	b29b      	uxth	r3, r3
 8003594:	3303      	adds	r3, #3
 8003596:	b29b      	uxth	r3, r3
 8003598:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800359c:	9400      	str	r4, [sp, #0]
 800359e:	f000 fa00 	bl	80039a2 <lcd_DrawLine>
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}

080035aa <point_food_lcd>:

void point_food_lcd(struct Point food){
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af02      	add	r7, sp, #8
 80035b0:	463b      	mov	r3, r7
 80035b2:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(food.x, food.y, RED, RADIUS_SNAKE, 1);
 80035b6:	6838      	ldr	r0, [r7, #0]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	2301      	movs	r3, #1
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2304      	movs	r3, #4
 80035c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80035c4:	f000 ff0f 	bl	80043e6 <lcd_DrawCircle>
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <point_clr>:

void point_clr(struct Point clr){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	463b      	mov	r3, r7
 80035d8:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(clr.x, clr.y, WHITE, RADIUS_SNAKE, 1);
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	2301      	movs	r3, #1
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2304      	movs	r3, #4
 80035e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ea:	f000 fefc 	bl	80043e6 <lcd_DrawCircle>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <mode_7seg>:

void mode_7seg(){
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	switch(status){
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <mode_7seg+0x44>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b0d      	cmp	r3, #13
 8003602:	d012      	beq.n	800362a <mode_7seg+0x32>
 8003604:	2b0d      	cmp	r3, #13
 8003606:	dc16      	bgt.n	8003636 <mode_7seg+0x3e>
 8003608:	2b0b      	cmp	r3, #11
 800360a:	d002      	beq.n	8003612 <mode_7seg+0x1a>
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d006      	beq.n	800361e <mode_7seg+0x26>
			break;
		case TIME:
			led7_SetDigit(3, 0, 1);
			break;
		default:
			break;
 8003610:	e011      	b.n	8003636 <mode_7seg+0x3e>
			led7_SetDigit(1, 0, 1);
 8003612:	2201      	movs	r2, #1
 8003614:	2100      	movs	r1, #0
 8003616:	2001      	movs	r0, #1
 8003618:	f001 f86a 	bl	80046f0 <led7_SetDigit>
			break;
 800361c:	e00c      	b.n	8003638 <mode_7seg+0x40>
			led7_SetDigit(2, 0, 1);
 800361e:	2201      	movs	r2, #1
 8003620:	2100      	movs	r1, #0
 8003622:	2002      	movs	r0, #2
 8003624:	f001 f864 	bl	80046f0 <led7_SetDigit>
			break;
 8003628:	e006      	b.n	8003638 <mode_7seg+0x40>
			led7_SetDigit(3, 0, 1);
 800362a:	2201      	movs	r2, #1
 800362c:	2100      	movs	r1, #0
 800362e:	2003      	movs	r0, #3
 8003630:	f001 f85e 	bl	80046f0 <led7_SetDigit>
			break;
 8003634:	e000      	b.n	8003638 <mode_7seg+0x40>
			break;
 8003636:	bf00      	nop
	}
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	2000015c 	.word	0x2000015c

08003640 <reset_7seg>:

void reset_7seg(){
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
	led7_SetDigit(0, 0, 0);
 8003644:	2200      	movs	r2, #0
 8003646:	2100      	movs	r1, #0
 8003648:	2000      	movs	r0, #0
 800364a:	f001 f851 	bl	80046f0 <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2101      	movs	r1, #1
 8003652:	2000      	movs	r0, #0
 8003654:	f001 f84c 	bl	80046f0 <led7_SetDigit>
	led7_SetDigit(0, 2, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2102      	movs	r1, #2
 800365c:	2000      	movs	r0, #0
 800365e:	f001 f847 	bl	80046f0 <led7_SetDigit>
	led7_SetDigit(0, 3, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2103      	movs	r1, #3
 8003666:	2000      	movs	r0, #0
 8003668:	f001 f842 	bl	80046f0 <led7_SetDigit>
}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}

08003670 <update_7seg_time>:

void update_7seg_time(){
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	if(flag_timer5 == 1 && flag_user == FLAG_PLAYING){
 8003674:	4b44      	ldr	r3, [pc, #272]	; (8003788 <update_7seg_time+0x118>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 8081 	bne.w	8003780 <update_7seg_time+0x110>
 800367e:	4b43      	ldr	r3, [pc, #268]	; (800378c <update_7seg_time+0x11c>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d17c      	bne.n	8003780 <update_7seg_time+0x110>
		flag_timer5 = 0;
 8003686:	4b40      	ldr	r3, [pc, #256]	; (8003788 <update_7seg_time+0x118>)
 8003688:	2200      	movs	r2, #0
 800368a:	801a      	strh	r2, [r3, #0]
		current_time++;
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <update_7seg_time+0x120>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3301      	adds	r3, #1
 8003692:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <update_7seg_time+0x120>)
 8003694:	6013      	str	r3, [r2, #0]
		switch(status){
 8003696:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <update_7seg_time+0x124>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	dc02      	bgt.n	80036a4 <update_7seg_time+0x34>
 800369e:	2b0b      	cmp	r3, #11
 80036a0:	da03      	bge.n	80036aa <update_7seg_time+0x3a>
				led7_SetDigit((counter_time % 100) / 10, 2, 0);
				led7_SetDigit(counter_time % 10, 3, 0);
				break;
		}
	}
}
 80036a2:	e06e      	b.n	8003782 <update_7seg_time+0x112>
		switch(status){
 80036a4:	2b0d      	cmp	r3, #13
 80036a6:	d030      	beq.n	800370a <update_7seg_time+0x9a>
}
 80036a8:	e06b      	b.n	8003782 <update_7seg_time+0x112>
				led7_SetDigit(current_time / 100, 1, 0);
 80036aa:	4b39      	ldr	r3, [pc, #228]	; (8003790 <update_7seg_time+0x120>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <update_7seg_time+0x128>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	2200      	movs	r2, #0
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 f818 	bl	80046f0 <led7_SetDigit>
				led7_SetDigit((current_time % 100) / 10, 2, 0);
 80036c0:	4b33      	ldr	r3, [pc, #204]	; (8003790 <update_7seg_time+0x120>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b34      	ldr	r3, [pc, #208]	; (8003798 <update_7seg_time+0x128>)
 80036c6:	fba3 1302 	umull	r1, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2164      	movs	r1, #100	; 0x64
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	4a31      	ldr	r2, [pc, #196]	; (800379c <update_7seg_time+0x12c>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	08db      	lsrs	r3, r3, #3
 80036dc:	2200      	movs	r2, #0
 80036de:	2102      	movs	r1, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 f805 	bl	80046f0 <led7_SetDigit>
				led7_SetDigit(current_time % 10, 3, 0);
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <update_7seg_time+0x120>)
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	4b2c      	ldr	r3, [pc, #176]	; (800379c <update_7seg_time+0x12c>)
 80036ec:	fba3 2301 	umull	r2, r3, r3, r1
 80036f0:	08da      	lsrs	r2, r3, #3
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	1aca      	subs	r2, r1, r3
 80036fc:	4613      	mov	r3, r2
 80036fe:	2200      	movs	r2, #0
 8003700:	2103      	movs	r1, #3
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fff4 	bl	80046f0 <led7_SetDigit>
				break;
 8003708:	e03b      	b.n	8003782 <update_7seg_time+0x112>
				counter_time--;
 800370a:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <update_7seg_time+0x130>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3b01      	subs	r3, #1
 8003710:	4a23      	ldr	r2, [pc, #140]	; (80037a0 <update_7seg_time+0x130>)
 8003712:	6013      	str	r3, [r2, #0]
				led7_SetDigit(counter_time / 100, 1, 0);
 8003714:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <update_7seg_time+0x130>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <update_7seg_time+0x128>)
 800371a:	fb82 1203 	smull	r1, r2, r2, r3
 800371e:	1152      	asrs	r2, r2, #5
 8003720:	17db      	asrs	r3, r3, #31
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2200      	movs	r2, #0
 8003726:	2101      	movs	r1, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f000 ffe1 	bl	80046f0 <led7_SetDigit>
				led7_SetDigit((counter_time % 100) / 10, 2, 0);
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <update_7seg_time+0x130>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b19      	ldr	r3, [pc, #100]	; (8003798 <update_7seg_time+0x128>)
 8003734:	fb83 1302 	smull	r1, r3, r3, r2
 8003738:	1159      	asrs	r1, r3, #5
 800373a:	17d3      	asrs	r3, r2, #31
 800373c:	1acb      	subs	r3, r1, r3
 800373e:	2164      	movs	r1, #100	; 0x64
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <update_7seg_time+0x134>)
 8003748:	fb82 1203 	smull	r1, r2, r2, r3
 800374c:	1092      	asrs	r2, r2, #2
 800374e:	17db      	asrs	r3, r3, #31
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2200      	movs	r2, #0
 8003754:	2102      	movs	r1, #2
 8003756:	4618      	mov	r0, r3
 8003758:	f000 ffca 	bl	80046f0 <led7_SetDigit>
				led7_SetDigit(counter_time % 10, 3, 0);
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <update_7seg_time+0x130>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <update_7seg_time+0x134>)
 8003762:	fb83 1302 	smull	r1, r3, r3, r2
 8003766:	1099      	asrs	r1, r3, #2
 8003768:	17d3      	asrs	r3, r2, #31
 800376a:	1ac8      	subs	r0, r1, r3
 800376c:	4603      	mov	r3, r0
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4403      	add	r3, r0
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	1ad0      	subs	r0, r2, r3
 8003776:	2200      	movs	r2, #0
 8003778:	2103      	movs	r1, #3
 800377a:	f000 ffb9 	bl	80046f0 <led7_SetDigit>
				break;
 800377e:	e000      	b.n	8003782 <update_7seg_time+0x112>
	}
 8003780:	bf00      	nop
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	2000018c 	.word	0x2000018c
 800378c:	20000154 	.word	0x20000154
 8003790:	20000150 	.word	0x20000150
 8003794:	2000015c 	.word	0x2000015c
 8003798:	51eb851f 	.word	0x51eb851f
 800379c:	cccccccd 	.word	0xcccccccd
 80037a0:	20000168 	.word	0x20000168
 80037a4:	66666667 	.word	0x66666667

080037a8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80037b2:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <LCD_WR_REG+0x1c>)
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	8013      	strh	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	600ffffe 	.word	0x600ffffe

080037c8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80037d2:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <LCD_WR_DATA+0x1c>)
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	8053      	strh	r3, [r2, #2]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	600ffffe 	.word	0x600ffffe

080037e8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <LCD_RD_DATA+0x20>)
 80037f0:	885b      	ldrh	r3, [r3, #2]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	b29b      	uxth	r3, r3
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	600ffffe 	.word	0x600ffffe

0800380c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4623      	mov	r3, r4
 800381c:	80fb      	strh	r3, [r7, #6]
 800381e:	4603      	mov	r3, r0
 8003820:	80bb      	strh	r3, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	807b      	strh	r3, [r7, #2]
 8003826:	4613      	mov	r3, r2
 8003828:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800382a:	202a      	movs	r0, #42	; 0x2a
 800382c:	f7ff ffbc 	bl	80037a8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	b29b      	uxth	r3, r3
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff ffc6 	bl	80037c8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ffc0 	bl	80037c8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b29b      	uxth	r3, r3
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ffba 	bl	80037c8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	b29b      	uxth	r3, r3
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff ffb4 	bl	80037c8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8003860:	202b      	movs	r0, #43	; 0x2b
 8003862:	f7ff ffa1 	bl	80037a8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8003866:	88bb      	ldrh	r3, [r7, #4]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	b29b      	uxth	r3, r3
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ffab 	bl	80037c8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8003872:	88bb      	ldrh	r3, [r7, #4]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	b29b      	uxth	r3, r3
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ffa5 	bl	80037c8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800387e:	883b      	ldrh	r3, [r7, #0]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	b29b      	uxth	r3, r3
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ff9f 	bl	80037c8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800388a:	883b      	ldrh	r3, [r7, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff99 	bl	80037c8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8003896:	202c      	movs	r0, #44	; 0x2c
 8003898:	f7ff ff86 	bl	80037a8 <LCD_WR_REG>
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd90      	pop	{r4, r7, pc}

080038a4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <lcd_Clear+0x60>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <lcd_Clear+0x60>)
 80038b8:	885b      	ldrh	r3, [r3, #2]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2100      	movs	r1, #0
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7ff ffa3 	bl	800380c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	81fb      	strh	r3, [r7, #14]
 80038ca:	e011      	b.n	80038f0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	81bb      	strh	r3, [r7, #12]
 80038d0:	e006      	b.n	80038e0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff77 	bl	80037c8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80038da:	89bb      	ldrh	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	81bb      	strh	r3, [r7, #12]
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <lcd_Clear+0x60>)
 80038e2:	885b      	ldrh	r3, [r3, #2]
 80038e4:	89ba      	ldrh	r2, [r7, #12]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d3f3      	bcc.n	80038d2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80038ea:	89fb      	ldrh	r3, [r7, #14]
 80038ec:	3301      	adds	r3, #1
 80038ee:	81fb      	strh	r3, [r7, #14]
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <lcd_Clear+0x60>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	89fa      	ldrh	r2, [r7, #14]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d3e8      	bcc.n	80038cc <lcd_Clear+0x28>
		}
	}
}
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000368 	.word	0x20000368

08003908 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	4604      	mov	r4, r0
 8003910:	4608      	mov	r0, r1
 8003912:	4611      	mov	r1, r2
 8003914:	461a      	mov	r2, r3
 8003916:	4623      	mov	r3, r4
 8003918:	80fb      	strh	r3, [r7, #6]
 800391a:	4603      	mov	r3, r0
 800391c:	80bb      	strh	r3, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	807b      	strh	r3, [r7, #2]
 8003922:	4613      	mov	r3, r2
 8003924:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	883b      	ldrh	r3, [r7, #0]
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	88b9      	ldrh	r1, [r7, #4]
 8003934:	88f8      	ldrh	r0, [r7, #6]
 8003936:	f7ff ff69 	bl	800380c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800393a:	88bb      	ldrh	r3, [r7, #4]
 800393c:	81fb      	strh	r3, [r7, #14]
 800393e:	e010      	b.n	8003962 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	81bb      	strh	r3, [r7, #12]
 8003944:	e006      	b.n	8003954 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8003946:	8c3b      	ldrh	r3, [r7, #32]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff3d 	bl	80037c8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800394e:	89bb      	ldrh	r3, [r7, #12]
 8003950:	3301      	adds	r3, #1
 8003952:	81bb      	strh	r3, [r7, #12]
 8003954:	89ba      	ldrh	r2, [r7, #12]
 8003956:	887b      	ldrh	r3, [r7, #2]
 8003958:	429a      	cmp	r2, r3
 800395a:	d3f4      	bcc.n	8003946 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800395c:	89fb      	ldrh	r3, [r7, #14]
 800395e:	3301      	adds	r3, #1
 8003960:	81fb      	strh	r3, [r7, #14]
 8003962:	89fa      	ldrh	r2, [r7, #14]
 8003964:	883b      	ldrh	r3, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d3ea      	bcc.n	8003940 <lcd_Fill+0x38>
		}
	}
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}

08003974 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	80fb      	strh	r3, [r7, #6]
 800397e:	460b      	mov	r3, r1
 8003980:	80bb      	strh	r3, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8003986:	88bb      	ldrh	r3, [r7, #4]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	88b9      	ldrh	r1, [r7, #4]
 800398c:	88f8      	ldrh	r0, [r7, #6]
 800398e:	f7ff ff3d 	bl	800380c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8003992:	887b      	ldrh	r3, [r7, #2]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff17 	bl	80037c8 <LCD_WR_DATA>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80039a2:	b590      	push	{r4, r7, lr}
 80039a4:	b08d      	sub	sp, #52	; 0x34
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4604      	mov	r4, r0
 80039aa:	4608      	mov	r0, r1
 80039ac:	4611      	mov	r1, r2
 80039ae:	461a      	mov	r2, r3
 80039b0:	4623      	mov	r3, r4
 80039b2:	80fb      	strh	r3, [r7, #6]
 80039b4:	4603      	mov	r3, r0
 80039b6:	80bb      	strh	r3, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
 80039bc:	4613      	mov	r3, r2
 80039be:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c4:	2300      	movs	r3, #0
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80039c8:	887a      	ldrh	r2, [r7, #2]
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80039d0:	883a      	ldrh	r2, [r7, #0]
 80039d2:	88bb      	ldrh	r3, [r7, #4]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80039dc:	88bb      	ldrh	r3, [r7, #4]
 80039de:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	dd02      	ble.n	80039ec <lcd_DrawLine+0x4a>
 80039e6:	2301      	movs	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e00b      	b.n	8003a04 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <lcd_DrawLine+0x56>
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e005      	b.n	8003a04 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	425b      	negs	r3, r3
 8003a02:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	dd02      	ble.n	8003a10 <lcd_DrawLine+0x6e>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e00b      	b.n	8003a28 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <lcd_DrawLine+0x7a>
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e005      	b.n	8003a28 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	425b      	negs	r3, r3
 8003a26:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	dd02      	ble.n	8003a36 <lcd_DrawLine+0x94>
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	e001      	b.n	8003a3a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a3e:	e02b      	b.n	8003a98 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	b291      	uxth	r1, r2
 8003a48:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff91 	bl	8003974 <lcd_DrawPoint>
		xerr+=delta_x;
 8003a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	4413      	add	r3, r2
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8003a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	dd07      	ble.n	8003a7a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8003a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	dd07      	ble.n	8003a92 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8003a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a94:	3301      	adds	r3, #1
 8003a96:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dacf      	bge.n	8003a40 <lcd_DrawLine+0x9e>
		}
	}
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3734      	adds	r7, #52	; 0x34
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd90      	pop	{r4, r7, pc}

08003aaa <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8003aaa:	b590      	push	{r4, r7, lr}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af02      	add	r7, sp, #8
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	4608      	mov	r0, r1
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4623      	mov	r3, r4
 8003aba:	80fb      	strh	r3, [r7, #6]
 8003abc:	4603      	mov	r3, r0
 8003abe:	80bb      	strh	r3, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8003ac8:	88bc      	ldrh	r4, [r7, #4]
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	88b9      	ldrh	r1, [r7, #4]
 8003ace:	88f8      	ldrh	r0, [r7, #6]
 8003ad0:	8b3b      	ldrh	r3, [r7, #24]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	f7ff ff64 	bl	80039a2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8003ada:	883c      	ldrh	r4, [r7, #0]
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	88b9      	ldrh	r1, [r7, #4]
 8003ae0:	88f8      	ldrh	r0, [r7, #6]
 8003ae2:	8b3b      	ldrh	r3, [r7, #24]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	4623      	mov	r3, r4
 8003ae8:	f7ff ff5b 	bl	80039a2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8003aec:	883c      	ldrh	r4, [r7, #0]
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	8839      	ldrh	r1, [r7, #0]
 8003af2:	88f8      	ldrh	r0, [r7, #6]
 8003af4:	8b3b      	ldrh	r3, [r7, #24]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	4623      	mov	r3, r4
 8003afa:	f7ff ff52 	bl	80039a2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8003afe:	883c      	ldrh	r4, [r7, #0]
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	88b9      	ldrh	r1, [r7, #4]
 8003b04:	8878      	ldrh	r0, [r7, #2]
 8003b06:	8b3b      	ldrh	r3, [r7, #24]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	f7ff ff49 	bl	80039a2 <lcd_DrawLine>
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd90      	pop	{r4, r7, pc}

08003b18 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4623      	mov	r3, r4
 8003b28:	80fb      	strh	r3, [r7, #6]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	80bb      	strh	r3, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	70fb      	strb	r3, [r7, #3]
 8003b32:	4613      	mov	r3, r2
 8003b34:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8003b3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	08db      	lsrs	r3, r3, #3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	fb12 f303 	smulbb	r3, r2, r3
 8003b6e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	3b20      	subs	r3, #32
 8003b74:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29c      	uxth	r4, r3
 8003b84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	88bb      	ldrh	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	88b9      	ldrh	r1, [r7, #4]
 8003b96:	88f8      	ldrh	r0, [r7, #6]
 8003b98:	4622      	mov	r2, r4
 8003b9a:	f7ff fe37 	bl	800380c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	827b      	strh	r3, [r7, #18]
 8003ba2:	e086      	b.n	8003cb2 <lcd_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[character][i];
 8003ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	d10b      	bne.n	8003bc4 <lcd_ShowChar+0xac>
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	8a79      	ldrh	r1, [r7, #18]
 8003bb0:	4845      	ldr	r0, [pc, #276]	; (8003cc8 <lcd_ShowChar+0x1b0>)
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4403      	add	r3, r0
 8003bbc:	440b      	add	r3, r1
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	75fb      	strb	r3, [r7, #23]
 8003bc2:	e028      	b.n	8003c16 <lcd_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[character][i];
 8003bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d108      	bne.n	8003bde <lcd_ShowChar+0xc6>
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	8a7b      	ldrh	r3, [r7, #18]
 8003bd0:	493e      	ldr	r1, [pc, #248]	; (8003ccc <lcd_ShowChar+0x1b4>)
 8003bd2:	0112      	lsls	r2, r2, #4
 8003bd4:	440a      	add	r2, r1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	75fb      	strb	r3, [r7, #23]
 8003bdc:	e01b      	b.n	8003c16 <lcd_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[character][i];
 8003bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003be2:	2b18      	cmp	r3, #24
 8003be4:	d10b      	bne.n	8003bfe <lcd_ShowChar+0xe6>
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	8a79      	ldrh	r1, [r7, #18]
 8003bea:	4839      	ldr	r0, [pc, #228]	; (8003cd0 <lcd_ShowChar+0x1b8>)
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	4403      	add	r3, r0
 8003bf6:	440b      	add	r3, r1
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	75fb      	strb	r3, [r7, #23]
 8003bfc:	e00b      	b.n	8003c16 <lcd_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[character][i];
 8003bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d15b      	bne.n	8003cbe <lcd_ShowChar+0x1a6>
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	8a7b      	ldrh	r3, [r7, #18]
 8003c0a:	4932      	ldr	r1, [pc, #200]	; (8003cd4 <lcd_ShowChar+0x1bc>)
 8003c0c:	0192      	lsls	r2, r2, #6
 8003c0e:	440a      	add	r2, r1
 8003c10:	4413      	add	r3, r2
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	75bb      	strb	r3, [r7, #22]
 8003c1a:	e044      	b.n	8003ca6 <lcd_ShowChar+0x18e>
		{
			if(!mode)
 8003c1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d120      	bne.n	8003c66 <lcd_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8003c24:	7dfa      	ldrb	r2, [r7, #23]
 8003c26:	7dbb      	ldrb	r3, [r7, #22]
 8003c28:	fa42 f303 	asr.w	r3, r2, r3
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <lcd_ShowChar+0x126>
 8003c34:	883b      	ldrh	r3, [r7, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fdc6 	bl	80037c8 <LCD_WR_DATA>
 8003c3c:	e003      	b.n	8003c46 <lcd_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8003c3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fdc1 	bl	80037c8 <LCD_WR_DATA>
				m++;
 8003c46:	7d7b      	ldrb	r3, [r7, #21]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8003c4c:	7d7b      	ldrb	r3, [r7, #21]
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c54:	fb02 f201 	mul.w	r2, r2, r1
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d11f      	bne.n	8003ca0 <lcd_ShowChar+0x188>
				{
					m=0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	757b      	strb	r3, [r7, #21]
					break;
 8003c64:	e022      	b.n	8003cac <lcd_ShowChar+0x194>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8003c66:	7dfa      	ldrb	r2, [r7, #23]
 8003c68:	7dbb      	ldrb	r3, [r7, #22]
 8003c6a:	fa42 f303 	asr.w	r3, r2, r3
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <lcd_ShowChar+0x16a>
 8003c76:	883a      	ldrh	r2, [r7, #0]
 8003c78:	88b9      	ldrh	r1, [r7, #4]
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fe79 	bl	8003974 <lcd_DrawPoint>
				x++;
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	3301      	adds	r3, #1
 8003c86:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	8a3b      	ldrh	r3, [r7, #16]
 8003c8c:	1ad2      	subs	r2, r2, r3
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d105      	bne.n	8003ca0 <lcd_ShowChar+0x188>
				{
					x=x0;
 8003c94:	8a3b      	ldrh	r3, [r7, #16]
 8003c96:	80fb      	strh	r3, [r7, #6]
					y++;
 8003c98:	88bb      	ldrh	r3, [r7, #4]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	80bb      	strh	r3, [r7, #4]
					break;
 8003c9e:	e005      	b.n	8003cac <lcd_ShowChar+0x194>
		for(t=0;t<8;t++)
 8003ca0:	7dbb      	ldrb	r3, [r7, #22]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	75bb      	strb	r3, [r7, #22]
 8003ca6:	7dbb      	ldrb	r3, [r7, #22]
 8003ca8:	2b07      	cmp	r3, #7
 8003caa:	d9b7      	bls.n	8003c1c <lcd_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8003cac:	8a7b      	ldrh	r3, [r7, #18]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	827b      	strh	r3, [r7, #18]
 8003cb2:	8a7a      	ldrh	r2, [r7, #18]
 8003cb4:	89bb      	ldrh	r3, [r7, #12]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f4ff af74 	bcc.w	8003ba4 <lcd_ShowChar+0x8c>
 8003cbc:	e000      	b.n	8003cc0 <lcd_ShowChar+0x1a8>
		else return;
 8003cbe:	bf00      	nop
				}
			}
		}
	}
}
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd90      	pop	{r4, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	0800e8d0 	.word	0x0800e8d0
 8003ccc:	0800ed44 	.word	0x0800ed44
 8003cd0:	0800f334 	.word	0x0800f334
 8003cd4:	08010504 	.word	0x08010504

08003cd8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	460a      	mov	r2, r1
 8003ce2:	71fb      	strb	r3, [r7, #7]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8003cec:	e004      	b.n	8003cf8 <mypow+0x20>
 8003cee:	79fa      	ldrb	r2, [r7, #7]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	79bb      	ldrb	r3, [r7, #6]
 8003cfa:	1e5a      	subs	r2, r3, #1
 8003cfc:	71ba      	strb	r2, [r7, #6]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f5      	bne.n	8003cee <mypow+0x16>
	return result;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af04      	add	r7, sp, #16
 8003d16:	4604      	mov	r4, r0
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	80fb      	strh	r3, [r7, #6]
 8003d22:	4603      	mov	r3, r0
 8003d24:	80bb      	strh	r3, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	807b      	strh	r3, [r7, #2]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8003d32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	e059      	b.n	8003df4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8003d40:	887c      	ldrh	r4, [r7, #2]
 8003d42:	787a      	ldrb	r2, [r7, #1]
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4619      	mov	r1, r3
 8003d50:	200a      	movs	r0, #10
 8003d52:	f7ff ffc1 	bl	8003cd8 <mypow>
 8003d56:	4603      	mov	r3, r0
 8003d58:	fbb4 f1f3 	udiv	r1, r4, r3
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <lcd_ShowIntNum+0xf8>)
 8003d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	1aca      	subs	r2, r1, r3
 8003d6e:	4613      	mov	r3, r2
 8003d70:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8003d72:	7bbb      	ldrb	r3, [r7, #14]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d121      	bne.n	8003dbc <lcd_ShowIntNum+0xac>
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	787b      	ldrb	r3, [r7, #1]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	da1c      	bge.n	8003dbc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8003d82:	7b3b      	ldrb	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d117      	bne.n	8003db8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	7b7b      	ldrb	r3, [r7, #13]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	fb12 f303 	smulbb	r3, r2, r3
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	4413      	add	r3, r2
 8003d9a:	b298      	uxth	r0, r3
 8003d9c:	8c3a      	ldrh	r2, [r7, #32]
 8003d9e:	88b9      	ldrh	r1, [r7, #4]
 8003da0:	2300      	movs	r3, #0
 8003da2:	9302      	str	r3, [sp, #8]
 8003da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	2220      	movs	r2, #32
 8003db2:	f7ff feb1 	bl	8003b18 <lcd_ShowChar>
				continue;
 8003db6:	e01a      	b.n	8003dee <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	7b7b      	ldrb	r3, [r7, #13]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	fb12 f303 	smulbb	r3, r2, r3
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	4413      	add	r3, r2
 8003dce:	b298      	uxth	r0, r3
 8003dd0:	7b3b      	ldrb	r3, [r7, #12]
 8003dd2:	3330      	adds	r3, #48	; 0x30
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	8c3c      	ldrh	r4, [r7, #32]
 8003dd8:	88b9      	ldrh	r1, [r7, #4]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9302      	str	r3, [sp, #8]
 8003dde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4623      	mov	r3, r4
 8003dea:	f7ff fe95 	bl	8003b18 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	3301      	adds	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	787b      	ldrb	r3, [r7, #1]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d3a1      	bcc.n	8003d40 <lcd_ShowIntNum+0x30>
	}
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	bf00      	nop
 8003e08:	cccccccd 	.word	0xcccccccd

08003e0c <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b08b      	sub	sp, #44	; 0x2c
 8003e10:	af04      	add	r7, sp, #16
 8003e12:	4604      	mov	r4, r0
 8003e14:	4608      	mov	r0, r1
 8003e16:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	81fb      	strh	r3, [r7, #14]
 8003e22:	4603      	mov	r3, r0
 8003e24:	81bb      	strh	r3, [r7, #12]
 8003e26:	460b      	mov	r3, r1
 8003e28:	71fb      	strb	r3, [r7, #7]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8003e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8003e36:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e3a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003f14 <lcd_ShowFloatNum+0x108>
 8003e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e46:	ee17 3a90 	vmov	r3, s15
 8003e4a:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75fb      	strb	r3, [r7, #23]
 8003e50:	e057      	b.n	8003f02 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8003e52:	8abc      	ldrh	r4, [r7, #20]
 8003e54:	79fa      	ldrb	r2, [r7, #7]
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	4619      	mov	r1, r3
 8003e62:	200a      	movs	r0, #10
 8003e64:	f7ff ff38 	bl	8003cd8 <mypow>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	fbb4 f1f3 	udiv	r1, r4, r3
 8003e6e:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <lcd_ShowFloatNum+0x10c>)
 8003e70:	fba3 2301 	umull	r2, r3, r3, r1
 8003e74:	08da      	lsrs	r2, r3, #3
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	1aca      	subs	r2, r1, r3
 8003e80:	4613      	mov	r3, r2
 8003e82:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8003e84:	7dfa      	ldrb	r2, [r7, #23]
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	3b02      	subs	r3, #2
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d11d      	bne.n	8003eca <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	3b02      	subs	r3, #2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	7dbb      	ldrb	r3, [r7, #22]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	fb12 f303 	smulbb	r3, r2, r3
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	89fb      	ldrh	r3, [r7, #14]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	b298      	uxth	r0, r3
 8003ea4:	88ba      	ldrh	r2, [r7, #4]
 8003ea6:	89b9      	ldrh	r1, [r7, #12]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	222e      	movs	r2, #46	; 0x2e
 8003eba:	f7ff fe2d 	bl	8003b18 <lcd_ShowChar>
			t++;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	7dbb      	ldrb	r3, [r7, #22]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	fb12 f303 	smulbb	r3, r2, r3
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	89fb      	ldrh	r3, [r7, #14]
 8003eda:	4413      	add	r3, r2
 8003edc:	b298      	uxth	r0, r3
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	3330      	adds	r3, #48	; 0x30
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	88bc      	ldrh	r4, [r7, #4]
 8003ee6:	89b9      	ldrh	r1, [r7, #12]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9302      	str	r3, [sp, #8]
 8003eec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	f7ff fe0e 	bl	8003b18 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	3301      	adds	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
 8003f02:	7dfa      	ldrb	r2, [r7, #23]
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d3a3      	bcc.n	8003e52 <lcd_ShowFloatNum+0x46>
	}
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd90      	pop	{r4, r7, pc}
 8003f14:	42c80000 	.word	0x42c80000
 8003f18:	cccccccd 	.word	0xcccccccd

08003f1c <lcd_ShowPicture>:

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4604      	mov	r4, r0
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	80fb      	strh	r3, [r7, #6]
 8003f2e:	4603      	mov	r3, r0
 8003f30:	80bb      	strh	r3, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	807b      	strh	r3, [r7, #2]
 8003f36:	4613      	mov	r3, r2
 8003f38:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	4413      	add	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29c      	uxth	r4, r3
 8003f4a:	88ba      	ldrh	r2, [r7, #4]
 8003f4c:	883b      	ldrh	r3, [r7, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	88b9      	ldrh	r1, [r7, #4]
 8003f58:	88f8      	ldrh	r0, [r7, #6]
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	f7ff fc56 	bl	800380c <lcd_AddressSet>
	for(i=0;i<length;i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	82fb      	strh	r3, [r7, #22]
 8003f64:	e027      	b.n	8003fb6 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	82bb      	strh	r3, [r7, #20]
 8003f6a:	e01d      	b.n	8003fa8 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f72:	4413      	add	r3, r2
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	b21a      	sxth	r2, r3
 8003f8c:	7bbb      	ldrb	r3, [r7, #14]
 8003f8e:	b21b      	sxth	r3, r3
 8003f90:	4313      	orrs	r3, r2
 8003f92:	b21b      	sxth	r3, r3
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fc16 	bl	80037c8 <LCD_WR_DATA>
			k++;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8003fa2:	8abb      	ldrh	r3, [r7, #20]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	82bb      	strh	r3, [r7, #20]
 8003fa8:	8aba      	ldrh	r2, [r7, #20]
 8003faa:	883b      	ldrh	r3, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d3dd      	bcc.n	8003f6c <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8003fb0:	8afb      	ldrh	r3, [r7, #22]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	82fb      	strh	r3, [r7, #22]
 8003fb6:	8afa      	ldrh	r2, [r7, #22]
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d3d3      	bcc.n	8003f66 <lcd_ShowPicture+0x4a>
		}
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}

08003fc8 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <lcd_SetDir+0x44>)
 8003fe4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003fe8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <lcd_SetDir+0x44>)
 8003fec:	22f0      	movs	r2, #240	; 0xf0
 8003fee:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8003ff0:	e006      	b.n	8004000 <lcd_SetDir+0x38>
		lcddev.width=240;
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <lcd_SetDir+0x44>)
 8003ff4:	22f0      	movs	r2, #240	; 0xf0
 8003ff6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <lcd_SetDir+0x44>)
 8003ffa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ffe:	805a      	strh	r2, [r3, #2]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20000368 	.word	0x20000368

08004010 <lcd_init>:


void lcd_init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8004014:	2200      	movs	r2, #0
 8004016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800401a:	48aa      	ldr	r0, [pc, #680]	; (80042c4 <lcd_init+0x2b4>)
 800401c:	f004 f878 	bl	8008110 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004024:	f002 fd76 	bl	8006b14 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8004028:	2201      	movs	r2, #1
 800402a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800402e:	48a5      	ldr	r0, [pc, #660]	; (80042c4 <lcd_init+0x2b4>)
 8004030:	f004 f86e 	bl	8008110 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004038:	f002 fd6c 	bl	8006b14 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800403c:	2000      	movs	r0, #0
 800403e:	f7ff ffc3 	bl	8003fc8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8004042:	20d3      	movs	r0, #211	; 0xd3
 8004044:	f7ff fbb0 	bl	80037a8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8004048:	f7ff fbce 	bl	80037e8 <LCD_RD_DATA>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	4b9d      	ldr	r3, [pc, #628]	; (80042c8 <lcd_init+0x2b8>)
 8004052:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8004054:	f7ff fbc8 	bl	80037e8 <LCD_RD_DATA>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	4b9a      	ldr	r3, [pc, #616]	; (80042c8 <lcd_init+0x2b8>)
 800405e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8004060:	f7ff fbc2 	bl	80037e8 <LCD_RD_DATA>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	4b97      	ldr	r3, [pc, #604]	; (80042c8 <lcd_init+0x2b8>)
 800406a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800406c:	4b96      	ldr	r3, [pc, #600]	; (80042c8 <lcd_init+0x2b8>)
 800406e:	889b      	ldrh	r3, [r3, #4]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	b29a      	uxth	r2, r3
 8004074:	4b94      	ldr	r3, [pc, #592]	; (80042c8 <lcd_init+0x2b8>)
 8004076:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8004078:	f7ff fbb6 	bl	80037e8 <LCD_RD_DATA>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	4b91      	ldr	r3, [pc, #580]	; (80042c8 <lcd_init+0x2b8>)
 8004082:	889b      	ldrh	r3, [r3, #4]
 8004084:	4313      	orrs	r3, r2
 8004086:	b29a      	uxth	r2, r3
 8004088:	4b8f      	ldr	r3, [pc, #572]	; (80042c8 <lcd_init+0x2b8>)
 800408a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800408c:	20cf      	movs	r0, #207	; 0xcf
 800408e:	f7ff fb8b 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004092:	2000      	movs	r0, #0
 8004094:	f7ff fb98 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8004098:	20c1      	movs	r0, #193	; 0xc1
 800409a:	f7ff fb95 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800409e:	2030      	movs	r0, #48	; 0x30
 80040a0:	f7ff fb92 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80040a4:	20ed      	movs	r0, #237	; 0xed
 80040a6:	f7ff fb7f 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80040aa:	2064      	movs	r0, #100	; 0x64
 80040ac:	f7ff fb8c 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80040b0:	2003      	movs	r0, #3
 80040b2:	f7ff fb89 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80040b6:	2012      	movs	r0, #18
 80040b8:	f7ff fb86 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80040bc:	2081      	movs	r0, #129	; 0x81
 80040be:	f7ff fb83 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80040c2:	20e8      	movs	r0, #232	; 0xe8
 80040c4:	f7ff fb70 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80040c8:	2085      	movs	r0, #133	; 0x85
 80040ca:	f7ff fb7d 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80040ce:	2010      	movs	r0, #16
 80040d0:	f7ff fb7a 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80040d4:	207a      	movs	r0, #122	; 0x7a
 80040d6:	f7ff fb77 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80040da:	20cb      	movs	r0, #203	; 0xcb
 80040dc:	f7ff fb64 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80040e0:	2039      	movs	r0, #57	; 0x39
 80040e2:	f7ff fb71 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80040e6:	202c      	movs	r0, #44	; 0x2c
 80040e8:	f7ff fb6e 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80040ec:	2000      	movs	r0, #0
 80040ee:	f7ff fb6b 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80040f2:	2034      	movs	r0, #52	; 0x34
 80040f4:	f7ff fb68 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80040f8:	2002      	movs	r0, #2
 80040fa:	f7ff fb65 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80040fe:	20f7      	movs	r0, #247	; 0xf7
 8004100:	f7ff fb52 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8004104:	2020      	movs	r0, #32
 8004106:	f7ff fb5f 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800410a:	20ea      	movs	r0, #234	; 0xea
 800410c:	f7ff fb4c 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004110:	2000      	movs	r0, #0
 8004112:	f7ff fb59 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004116:	2000      	movs	r0, #0
 8004118:	f7ff fb56 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800411c:	20c0      	movs	r0, #192	; 0xc0
 800411e:	f7ff fb43 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8004122:	201b      	movs	r0, #27
 8004124:	f7ff fb50 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8004128:	20c1      	movs	r0, #193	; 0xc1
 800412a:	f7ff fb3d 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800412e:	2001      	movs	r0, #1
 8004130:	f7ff fb4a 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8004134:	20c5      	movs	r0, #197	; 0xc5
 8004136:	f7ff fb37 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800413a:	2030      	movs	r0, #48	; 0x30
 800413c:	f7ff fb44 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8004140:	2030      	movs	r0, #48	; 0x30
 8004142:	f7ff fb41 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8004146:	20c7      	movs	r0, #199	; 0xc7
 8004148:	f7ff fb2e 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800414c:	20b7      	movs	r0, #183	; 0xb7
 800414e:	f7ff fb3b 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8004152:	2036      	movs	r0, #54	; 0x36
 8004154:	f7ff fb28 	bl	80037a8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8004158:	2008      	movs	r0, #8
 800415a:	f7ff fb35 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800415e:	203a      	movs	r0, #58	; 0x3a
 8004160:	f7ff fb22 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8004164:	2055      	movs	r0, #85	; 0x55
 8004166:	f7ff fb2f 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800416a:	20b1      	movs	r0, #177	; 0xb1
 800416c:	f7ff fb1c 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004170:	2000      	movs	r0, #0
 8004172:	f7ff fb29 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8004176:	201a      	movs	r0, #26
 8004178:	f7ff fb26 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800417c:	20b6      	movs	r0, #182	; 0xb6
 800417e:	f7ff fb13 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8004182:	200a      	movs	r0, #10
 8004184:	f7ff fb20 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8004188:	20a2      	movs	r0, #162	; 0xa2
 800418a:	f7ff fb1d 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800418e:	20f2      	movs	r0, #242	; 0xf2
 8004190:	f7ff fb0a 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004194:	2000      	movs	r0, #0
 8004196:	f7ff fb17 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800419a:	2026      	movs	r0, #38	; 0x26
 800419c:	f7ff fb04 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80041a0:	2001      	movs	r0, #1
 80041a2:	f7ff fb11 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80041a6:	20e0      	movs	r0, #224	; 0xe0
 80041a8:	f7ff fafe 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80041ac:	200f      	movs	r0, #15
 80041ae:	f7ff fb0b 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80041b2:	202a      	movs	r0, #42	; 0x2a
 80041b4:	f7ff fb08 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80041b8:	2028      	movs	r0, #40	; 0x28
 80041ba:	f7ff fb05 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80041be:	2008      	movs	r0, #8
 80041c0:	f7ff fb02 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80041c4:	200e      	movs	r0, #14
 80041c6:	f7ff faff 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80041ca:	2008      	movs	r0, #8
 80041cc:	f7ff fafc 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80041d0:	2054      	movs	r0, #84	; 0x54
 80041d2:	f7ff faf9 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80041d6:	20a9      	movs	r0, #169	; 0xa9
 80041d8:	f7ff faf6 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80041dc:	2043      	movs	r0, #67	; 0x43
 80041de:	f7ff faf3 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80041e2:	200a      	movs	r0, #10
 80041e4:	f7ff faf0 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80041e8:	200f      	movs	r0, #15
 80041ea:	f7ff faed 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041ee:	2000      	movs	r0, #0
 80041f0:	f7ff faea 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041f4:	2000      	movs	r0, #0
 80041f6:	f7ff fae7 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041fa:	2000      	movs	r0, #0
 80041fc:	f7ff fae4 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004200:	2000      	movs	r0, #0
 8004202:	f7ff fae1 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8004206:	20e1      	movs	r0, #225	; 0xe1
 8004208:	f7ff face 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800420c:	2000      	movs	r0, #0
 800420e:	f7ff fadb 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8004212:	2015      	movs	r0, #21
 8004214:	f7ff fad8 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8004218:	2017      	movs	r0, #23
 800421a:	f7ff fad5 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800421e:	2007      	movs	r0, #7
 8004220:	f7ff fad2 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8004224:	2011      	movs	r0, #17
 8004226:	f7ff facf 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800422a:	2006      	movs	r0, #6
 800422c:	f7ff facc 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8004230:	202b      	movs	r0, #43	; 0x2b
 8004232:	f7ff fac9 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8004236:	2056      	movs	r0, #86	; 0x56
 8004238:	f7ff fac6 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800423c:	203c      	movs	r0, #60	; 0x3c
 800423e:	f7ff fac3 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8004242:	2005      	movs	r0, #5
 8004244:	f7ff fac0 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8004248:	2010      	movs	r0, #16
 800424a:	f7ff fabd 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800424e:	200f      	movs	r0, #15
 8004250:	f7ff faba 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8004254:	203f      	movs	r0, #63	; 0x3f
 8004256:	f7ff fab7 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800425a:	203f      	movs	r0, #63	; 0x3f
 800425c:	f7ff fab4 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8004260:	200f      	movs	r0, #15
 8004262:	f7ff fab1 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8004266:	202b      	movs	r0, #43	; 0x2b
 8004268:	f7ff fa9e 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800426c:	2000      	movs	r0, #0
 800426e:	f7ff faab 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004272:	2000      	movs	r0, #0
 8004274:	f7ff faa8 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8004278:	2001      	movs	r0, #1
 800427a:	f7ff faa5 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800427e:	203f      	movs	r0, #63	; 0x3f
 8004280:	f7ff faa2 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8004284:	202a      	movs	r0, #42	; 0x2a
 8004286:	f7ff fa8f 	bl	80037a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800428a:	2000      	movs	r0, #0
 800428c:	f7ff fa9c 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004290:	2000      	movs	r0, #0
 8004292:	f7ff fa99 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004296:	2000      	movs	r0, #0
 8004298:	f7ff fa96 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800429c:	20ef      	movs	r0, #239	; 0xef
 800429e:	f7ff fa93 	bl	80037c8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80042a2:	2011      	movs	r0, #17
 80042a4:	f7ff fa80 	bl	80037a8 <LCD_WR_REG>
	HAL_Delay(120);
 80042a8:	2078      	movs	r0, #120	; 0x78
 80042aa:	f002 fc33 	bl	8006b14 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80042ae:	2029      	movs	r0, #41	; 0x29
 80042b0:	f7ff fa7a 	bl	80037a8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80042b4:	2201      	movs	r2, #1
 80042b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042ba:	4804      	ldr	r0, [pc, #16]	; (80042cc <lcd_init+0x2bc>)
 80042bc:	f003 ff28 	bl	8008110 <HAL_GPIO_WritePin>
}
 80042c0:	bf00      	nop
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40020800 	.word	0x40020800
 80042c8:	20000368 	.word	0x20000368
 80042cc:	40020000 	.word	0x40020000

080042d0 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	b298      	uxth	r0, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8b3a      	ldrh	r2, [r7, #24]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f7ff fb3b 	bl	8003974 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	b29b      	uxth	r3, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	b298      	uxth	r0, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	b29a      	uxth	r2, r3
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	4413      	add	r3, r2
 8004314:	b29b      	uxth	r3, r3
 8004316:	8b3a      	ldrh	r2, [r7, #24]
 8004318:	4619      	mov	r1, r3
 800431a:	f7ff fb2b 	bl	8003974 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	b29b      	uxth	r3, r3
 8004326:	4413      	add	r3, r2
 8004328:	b298      	uxth	r0, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	b29a      	uxth	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	8b3a      	ldrh	r2, [r7, #24]
 8004338:	4619      	mov	r1, r3
 800433a:	f7ff fb1b 	bl	8003974 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	b29b      	uxth	r3, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	b298      	uxth	r0, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	b29a      	uxth	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	b29b      	uxth	r3, r3
 8004356:	8b3a      	ldrh	r2, [r7, #24]
 8004358:	4619      	mov	r1, r3
 800435a:	f7ff fb0b 	bl	8003974 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	b29a      	uxth	r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	4413      	add	r3, r2
 8004368:	b298      	uxth	r0, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	b29b      	uxth	r3, r3
 8004372:	4413      	add	r3, r2
 8004374:	b29b      	uxth	r3, r3
 8004376:	8b3a      	ldrh	r2, [r7, #24]
 8004378:	4619      	mov	r1, r3
 800437a:	f7ff fafb 	bl	8003974 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	b29a      	uxth	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	b298      	uxth	r0, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	b29b      	uxth	r3, r3
 8004392:	4413      	add	r3, r2
 8004394:	b29b      	uxth	r3, r3
 8004396:	8b3a      	ldrh	r2, [r7, #24]
 8004398:	4619      	mov	r1, r3
 800439a:	f7ff faeb 	bl	8003974 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	b298      	uxth	r0, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8b3a      	ldrh	r2, [r7, #24]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f7ff fadb 	bl	8003974 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	b298      	uxth	r0, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	8b3a      	ldrh	r2, [r7, #24]
 80043d8:	4619      	mov	r1, r3
 80043da:	f7ff facb 	bl	8003974 <lcd_DrawPoint>
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b08a      	sub	sp, #40	; 0x28
 80043ea:	af02      	add	r7, sp, #8
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	f1c3 0303 	rsb	r3, r3, #3
 8004406:	613b      	str	r3, [r7, #16]


	if (fill)
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d04f      	beq.n	80044ae <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 800440e:	e029      	b.n	8004464 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e00a      	b.n	800442c <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff ff55 	bl	80042d0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3301      	adds	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	ddf0      	ble.n	8004416 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	da06      	bge.n	8004448 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	009a      	lsls	r2, r3, #2
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	3306      	adds	r3, #6
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e00a      	b.n	800445e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	009a      	lsls	r2, r3, #2
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4413      	add	r3, r2
 8004454:	330a      	adds	r3, #10
 8004456:	613b      	str	r3, [r7, #16]
				y--;
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	3b01      	subs	r3, #1
 800445c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3301      	adds	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	ddd1      	ble.n	8004410 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800446c:	e023      	b.n	80044b6 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff ff29 	bl	80042d0 <_draw_circle_8>
			if (d < 0) {
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	da06      	bge.n	8004492 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	3306      	adds	r3, #6
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	e00a      	b.n	80044a8 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	009a      	lsls	r2, r3, #2
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4413      	add	r3, r2
 800449e:	330a      	adds	r3, #10
 80044a0:	613b      	str	r3, [r7, #16]
				y--;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	61bb      	str	r3, [r7, #24]
			x++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dddb      	ble.n	800446e <lcd_DrawCircle+0x88>
}
 80044b6:	bf00      	nop
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80044be:	b590      	push	{r4, r7, lr}
 80044c0:	b08b      	sub	sp, #44	; 0x2c
 80044c2:	af04      	add	r7, sp, #16
 80044c4:	60ba      	str	r2, [r7, #8]
 80044c6:	461a      	mov	r2, r3
 80044c8:	4603      	mov	r3, r0
 80044ca:	81fb      	strh	r3, [r7, #14]
 80044cc:	460b      	mov	r3, r1
 80044ce:	81bb      	strh	r3, [r7, #12]
 80044d0:	4613      	mov	r3, r2
 80044d2:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80044d4:	89fb      	ldrh	r3, [r7, #14]
 80044d6:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80044d8:	2300      	movs	r3, #0
 80044da:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80044dc:	e034      	b.n	8004548 <lcd_ShowStr+0x8a>
	{
		if(!bHz)
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d131      	bne.n	8004548 <lcd_ShowStr+0x8a>
		{
//			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
			if(*str>0x80)bHz=1;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d902      	bls.n	80044f2 <lcd_ShowStr+0x34>
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
 80044f0:	e02a      	b.n	8004548 <lcd_ShowStr+0x8a>
			else
			{
				if(*str==0x0D)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b0d      	cmp	r3, #13
 80044f8:	d10b      	bne.n	8004512 <lcd_ShowStr+0x54>
				{
					y+=sizey;
 80044fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80044fe:	b29a      	uxth	r2, r3
 8004500:	89bb      	ldrh	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8004506:	8abb      	ldrh	r3, [r7, #20]
 8004508:	81fb      	strh	r3, [r7, #14]
					str++;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3301      	adds	r3, #1
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e017      	b.n	8004542 <lcd_ShowStr+0x84>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	88fc      	ldrh	r4, [r7, #6]
 8004518:	89b9      	ldrh	r1, [r7, #12]
 800451a:	89f8      	ldrh	r0, [r7, #14]
 800451c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004520:	9302      	str	r3, [sp, #8]
 8004522:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4623      	mov	r3, r4
 800452e:	f7ff faf3 	bl	8003b18 <lcd_ShowChar>
					x+=sizey/2;
 8004532:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	b29a      	uxth	r2, r3
 800453c:	89fb      	ldrh	r3, [r7, #14]
 800453e:	4413      	add	r3, r2
 8004540:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3301      	adds	r3, #1
 8004546:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1c6      	bne.n	80044de <lcd_ShowStr+0x20>
			}
		}
	}
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}
	...

0800455c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	; 0x28
 8004560:	af04      	add	r7, sp, #16
 8004562:	60ba      	str	r2, [r7, #8]
 8004564:	461a      	mov	r2, r3
 8004566:	4603      	mov	r3, r0
 8004568:	81fb      	strh	r3, [r7, #14]
 800456a:	460b      	mov	r3, r1
 800456c:	81bb      	strh	r3, [r7, #12]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8004572:	68b8      	ldr	r0, [r7, #8]
 8004574:	f7fb fe2c 	bl	80001d0 <strlen>
 8004578:	4603      	mov	r3, r0
 800457a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800457c:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <lcd_StrCenter+0x60>)
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	8afb      	ldrh	r3, [r7, #22]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	0fda      	lsrs	r2, r3, #31
 800458a:	4413      	add	r3, r2
 800458c:	105b      	asrs	r3, r3, #1
 800458e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8004590:	89fa      	ldrh	r2, [r7, #14]
 8004592:	8abb      	ldrh	r3, [r7, #20]
 8004594:	4413      	add	r3, r2
 8004596:	b298      	uxth	r0, r3
 8004598:	88fa      	ldrh	r2, [r7, #6]
 800459a:	89b9      	ldrh	r1, [r7, #12]
 800459c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045a0:	9302      	str	r3, [sp, #8]
 80045a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	8c3b      	ldrh	r3, [r7, #32]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	f7ff ff85 	bl	80044be <lcd_ShowStr>
}
 80045b4:	bf00      	nop
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000368 	.word	0x20000368

080045c0 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80045c4:	2201      	movs	r2, #1
 80045c6:	2140      	movs	r1, #64	; 0x40
 80045c8:	4802      	ldr	r0, [pc, #8]	; (80045d4 <led7_init+0x14>)
 80045ca:	f003 fda1 	bl	8008110 <HAL_GPIO_WritePin>
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40021800 	.word	0x40021800

080045d8 <led7_Scan>:

void led7_Scan(){
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <led7_Scan+0x104>)
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	4b3d      	ldr	r3, [pc, #244]	; (80046dc <led7_Scan+0x104>)
 80045e6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80045e8:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <led7_Scan+0x108>)
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b3d      	ldr	r3, [pc, #244]	; (80046e4 <led7_Scan+0x10c>)
 80045f0:	5c9b      	ldrb	r3, [r3, r2]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	b21a      	sxth	r2, r3
 80045f6:	4b39      	ldr	r3, [pc, #228]	; (80046dc <led7_Scan+0x104>)
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b21b      	sxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b21b      	sxth	r3, r3
 8004600:	b29a      	uxth	r2, r3
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <led7_Scan+0x104>)
 8004604:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <led7_Scan+0x108>)
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d846      	bhi.n	800469c <led7_Scan+0xc4>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <led7_Scan+0x3c>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004625 	.word	0x08004625
 8004618:	08004643 	.word	0x08004643
 800461c:	08004661 	.word	0x08004661
 8004620:	0800467f 	.word	0x0800467f
	case 0:
		spi_buffer |= 0x00b0;
 8004624:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <led7_Scan+0x104>)
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800462c:	b29a      	uxth	r2, r3
 800462e:	4b2b      	ldr	r3, [pc, #172]	; (80046dc <led7_Scan+0x104>)
 8004630:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8004632:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <led7_Scan+0x104>)
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463a:	b29a      	uxth	r2, r3
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <led7_Scan+0x104>)
 800463e:	801a      	strh	r2, [r3, #0]
		break;
 8004640:	e02d      	b.n	800469e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <led7_Scan+0x104>)
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800464a:	b29a      	uxth	r2, r3
 800464c:	4b23      	ldr	r3, [pc, #140]	; (80046dc <led7_Scan+0x104>)
 800464e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8004650:	4b22      	ldr	r3, [pc, #136]	; (80046dc <led7_Scan+0x104>)
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	f023 0320 	bic.w	r3, r3, #32
 8004658:	b29a      	uxth	r2, r3
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <led7_Scan+0x104>)
 800465c:	801a      	strh	r2, [r3, #0]
		break;
 800465e:	e01e      	b.n	800469e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8004660:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <led7_Scan+0x104>)
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004668:	b29a      	uxth	r2, r3
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <led7_Scan+0x104>)
 800466c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <led7_Scan+0x104>)
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	b29a      	uxth	r2, r3
 8004678:	4b18      	ldr	r3, [pc, #96]	; (80046dc <led7_Scan+0x104>)
 800467a:	801a      	strh	r2, [r3, #0]
		break;
 800467c:	e00f      	b.n	800469e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <led7_Scan+0x104>)
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004686:	b29a      	uxth	r2, r3
 8004688:	4b14      	ldr	r3, [pc, #80]	; (80046dc <led7_Scan+0x104>)
 800468a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800468c:	4b13      	ldr	r3, [pc, #76]	; (80046dc <led7_Scan+0x104>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004694:	b29a      	uxth	r2, r3
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <led7_Scan+0x104>)
 8004698:	801a      	strh	r2, [r3, #0]
		break;
 800469a:	e000      	b.n	800469e <led7_Scan+0xc6>
	default:
		break;
 800469c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <led7_Scan+0x108>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	425a      	negs	r2, r3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	f002 0203 	and.w	r2, r2, #3
 80046ae:	bf58      	it	pl
 80046b0:	4253      	negpl	r3, r2
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <led7_Scan+0x108>)
 80046b6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80046b8:	2200      	movs	r2, #0
 80046ba:	2140      	movs	r1, #64	; 0x40
 80046bc:	480a      	ldr	r0, [pc, #40]	; (80046e8 <led7_Scan+0x110>)
 80046be:	f003 fd27 	bl	8008110 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80046c2:	2301      	movs	r3, #1
 80046c4:	2202      	movs	r2, #2
 80046c6:	4905      	ldr	r1, [pc, #20]	; (80046dc <led7_Scan+0x104>)
 80046c8:	4808      	ldr	r0, [pc, #32]	; (80046ec <led7_Scan+0x114>)
 80046ca:	f005 f9f8 	bl	8009abe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80046ce:	2201      	movs	r2, #1
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	4805      	ldr	r0, [pc, #20]	; (80046e8 <led7_Scan+0x110>)
 80046d4:	f003 fd1c 	bl	8008110 <HAL_GPIO_WritePin>
}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000066 	.word	0x20000066
 80046e0:	20000178 	.word	0x20000178
 80046e4:	20000058 	.word	0x20000058
 80046e8:	40021800 	.word	0x40021800
 80046ec:	20000410 	.word	0x20000410

080046f0 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	db0e      	blt.n	8004722 <led7_SetDigit+0x32>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b09      	cmp	r3, #9
 8004708:	dc0b      	bgt.n	8004722 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800470a:	4a09      	ldr	r2, [pc, #36]	; (8004730 <led7_SetDigit+0x40>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	b2d9      	uxtb	r1, r3
 8004718:	4a06      	ldr	r2, [pc, #24]	; (8004734 <led7_SetDigit+0x44>)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4413      	add	r3, r2
 800471e:	460a      	mov	r2, r1
 8004720:	701a      	strb	r2, [r3, #0]
	}
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	2000005c 	.word	0x2000005c
 8004734:	20000058 	.word	0x20000058

08004738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800473c:	f002 f978 	bl	8006a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004740:	f000 f82e 	bl	80047a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004744:	f7fd fe02 	bl	800234c <MX_GPIO_Init>
  MX_DMA_Init();
 8004748:	f7fc fdbe 	bl	80012c8 <MX_DMA_Init>
  MX_ADC1_Init();
 800474c:	f7fc fc18 	bl	8000f80 <MX_ADC1_Init>
  MX_FSMC_Init();
 8004750:	f7fd fb26 	bl	8001da0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8004754:	f7fd ff28 	bl	80025a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004758:	f000 fbf4 	bl	8004f44 <MX_SPI1_Init>
  MX_TIM2_Init();
 800475c:	f001 f85c 	bl	8005818 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004760:	f002 f83c 	bl	80067dc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004764:	f001 f808 	bl	8005778 <MX_TIM1_Init>
  MX_TIM13_Init();
 8004768:	f001 f8a2 	bl	80058b0 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 800476c:	f002 f860 	bl	8006830 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8004770:	f000 f880 	bl	8004874 <system_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Scan touch screen
	  // 50ms task
	  if(flag_timer2 == 1){
 8004774:	4b09      	ldr	r3, [pc, #36]	; (800479c <main+0x64>)
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d1fb      	bne.n	8004774 <main+0x3c>
		  flag_timer2 = 0;
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <main+0x64>)
 800477e:	2200      	movs	r2, #0
 8004780:	801a      	strh	r2, [r3, #0]
		  touch_Scan();
 8004782:	f001 ff97 	bl	80066b4 <touch_Scan>
		  button_Scan();
 8004786:	f7fc fd33 	bl	80011f0 <button_Scan>

		  input_process();
 800478a:	f7fd f81f 	bl	80017cc <input_process>
		  fsm_ingame();
 800478e:	f7fd fa5f 	bl	8001c50 <fsm_ingame>
		  update_7seg_time();
 8004792:	f7fe ff6d 	bl	8003670 <update_7seg_time>
		  process_esp();
 8004796:	f7fc fe11 	bl	80013bc <process_esp>
	  if(flag_timer2 == 1){
 800479a:	e7eb      	b.n	8004774 <main+0x3c>
 800479c:	2000017a 	.word	0x2000017a

080047a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b094      	sub	sp, #80	; 0x50
 80047a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047a6:	f107 0320 	add.w	r3, r7, #32
 80047aa:	2230      	movs	r2, #48	; 0x30
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f007 ff7a 	bl	800c6a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <SystemClock_Config+0xcc>)
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	4a27      	ldr	r2, [pc, #156]	; (800486c <SystemClock_Config+0xcc>)
 80047ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6413      	str	r3, [r2, #64]	; 0x40
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <SystemClock_Config+0xcc>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047e0:	2300      	movs	r3, #0
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	4b22      	ldr	r3, [pc, #136]	; (8004870 <SystemClock_Config+0xd0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a21      	ldr	r2, [pc, #132]	; (8004870 <SystemClock_Config+0xd0>)
 80047ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <SystemClock_Config+0xd0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047fc:	2302      	movs	r3, #2
 80047fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004800:	2301      	movs	r3, #1
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004804:	2310      	movs	r3, #16
 8004806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004808:	2302      	movs	r3, #2
 800480a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800480c:	2300      	movs	r3, #0
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004810:	2308      	movs	r3, #8
 8004812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004814:	23a8      	movs	r3, #168	; 0xa8
 8004816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004818:	2302      	movs	r3, #2
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800481c:	2304      	movs	r3, #4
 800481e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004820:	f107 0320 	add.w	r3, r7, #32
 8004824:	4618      	mov	r0, r3
 8004826:	f004 fc4d 	bl	80090c4 <HAL_RCC_OscConfig>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004830:	f000 f846 	bl	80048c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004834:	230f      	movs	r3, #15
 8004836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004838:	2302      	movs	r3, #2
 800483a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004840:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004846:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800484a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800484c:	f107 030c 	add.w	r3, r7, #12
 8004850:	2105      	movs	r1, #5
 8004852:	4618      	mov	r0, r3
 8004854:	f004 feae 	bl	80095b4 <HAL_RCC_ClockConfig>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800485e:	f000 f82f 	bl	80048c0 <Error_Handler>
  }
}
 8004862:	bf00      	nop
 8004864:	3750      	adds	r7, #80	; 0x50
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	40007000 	.word	0x40007000

08004874 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
	  timer_init();
 8004878:	f000 fa50 	bl	8004d1c <timer_init>
	  button_init();
 800487c:	f7fc fcac 	bl	80011d8 <button_init>
	  lcd_init();
 8004880:	f7ff fbc6 	bl	8004010 <lcd_init>
	  sensor_init();
 8004884:	f000 f822 	bl	80048cc <sensor_init>
	  touch_init();
 8004888:	f001 ff04 	bl	8006694 <touch_init>
	  led7_init();
 800488c:	f7ff fe98 	bl	80045c0 <led7_init>
	  //ds3231_init();
	  uart_init_esp();
 8004890:	f001 ff44 	bl	800671c <uart_init_esp>

	  home_lcd();		// Hien thi man hinh vua moi dau
 8004894:	f7fd feb6 	bl	8002604 <home_lcd>
	  snake_init();		// Khoi tao ran
 8004898:	f000 f86a 	bl	8004970 <snake_init>
	  reset_7seg();
 800489c:	f7fe fed0 	bl	8003640 <reset_7seg>

	  setTimer2(50);
 80048a0:	2032      	movs	r0, #50	; 0x32
 80048a2:	f000 fa49 	bl	8004d38 <setTimer2>
	  setTimer3(50);
 80048a6:	2032      	movs	r0, #50	; 0x32
 80048a8:	f000 fa62 	bl	8004d70 <setTimer3>
	  setTimer4(3000);
 80048ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80048b0:	f000 fa7a 	bl	8004da8 <setTimer4>
	  setTimer5(1000);
 80048b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048b8:	f000 fa92 	bl	8004de0 <setTimer5>
}
 80048bc:	bf00      	nop
 80048be:	bd80      	pop	{r7, pc}

080048c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048c4:	b672      	cpsid	i
}
 80048c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048c8:	e7fe      	b.n	80048c8 <Error_Handler+0x8>
	...

080048cc <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80048d0:	2205      	movs	r2, #5
 80048d2:	4903      	ldr	r1, [pc, #12]	; (80048e0 <sensor_init+0x14>)
 80048d4:	4803      	ldr	r0, [pc, #12]	; (80048e4 <sensor_init+0x18>)
 80048d6:	f002 f985 	bl	8006be4 <HAL_ADC_Start_DMA>
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000404 	.word	0x20000404
 80048e4:	200001a8 	.word	0x200001a8

080048e8 <sensor_Read>:

void sensor_Read(){
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80048ec:	2205      	movs	r2, #5
 80048ee:	4903      	ldr	r1, [pc, #12]	; (80048fc <sensor_Read+0x14>)
 80048f0:	4803      	ldr	r0, [pc, #12]	; (8004900 <sensor_Read+0x18>)
 80048f2:	f002 f977 	bl	8006be4 <HAL_ADC_Start_DMA>
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000404 	.word	0x20000404
 8004900:	200001a8 	.word	0x200001a8

08004904 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <sensor_GetLight+0x14>)
 800490a:	889b      	ldrh	r3, [r3, #4]
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000404 	.word	0x20000404

0800491c <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <sensor_GetPotentiometer+0x14>)
 8004922:	88db      	ldrh	r3, [r3, #6]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000404 	.word	0x20000404

08004934 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <sensor_GetTemperature+0x30>)
 800493a:	891b      	ldrh	r3, [r3, #8]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004968 <sensor_GetTemperature+0x34>
 8004948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800494c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800496c <sensor_GetTemperature+0x38>
 8004950:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004954:	eef0 7a66 	vmov.f32	s15, s13
}
 8004958:	eeb0 0a67 	vmov.f32	s0, s15
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	20000404 	.word	0x20000404
 8004968:	43a50000 	.word	0x43a50000
 800496c:	457ff000 	.word	0x457ff000

08004970 <snake_init>:
 *      Author: ADMIN
 */

#include "snake.h"

void snake_init(){
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
	snake[0].x = (POS_X_MAX - POS_X_MIN) / 2;
 8004976:	4b19      	ldr	r3, [pc, #100]	; (80049dc <snake_init+0x6c>)
 8004978:	2277      	movs	r2, #119	; 0x77
 800497a:	601a      	str	r2, [r3, #0]
	snake[0].y = (POS_Y_MAX - POS_Y_MIN) / 2;
 800497c:	4b17      	ldr	r3, [pc, #92]	; (80049dc <snake_init+0x6c>)
 800497e:	225a      	movs	r2, #90	; 0x5a
 8004980:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 8004982:	2301      	movs	r3, #1
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	e00d      	b.n	80049a4 <snake_init+0x34>
		snake[i].x = 0;
 8004988:	4a14      	ldr	r2, [pc, #80]	; (80049dc <snake_init+0x6c>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2100      	movs	r1, #0
 800498e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <snake_init+0x6c>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3301      	adds	r3, #1
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	ddee      	ble.n	8004988 <snake_init+0x18>
	}
	move = UP;
 80049aa:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <snake_init+0x70>)
 80049ac:	2203      	movs	r2, #3
 80049ae:	601a      	str	r2, [r3, #0]
	length = 1;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <snake_init+0x74>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
	current_score = 0;
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <snake_init+0x78>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
	counter_time_score = 0;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <snake_init+0x7c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
	counter_time = 60;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <snake_init+0x80>)
 80049c4:	223c      	movs	r2, #60	; 0x3c
 80049c6:	601a      	str	r2, [r3, #0]
	tempFlag = 0;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <snake_init+0x84>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000260 	.word	0x20000260
 80049e0:	20000160 	.word	0x20000160
 80049e4:	2000004c 	.word	0x2000004c
 80049e8:	20000000 	.word	0x20000000
 80049ec:	20000164 	.word	0x20000164
 80049f0:	20000168 	.word	0x20000168
 80049f4:	2000016c 	.word	0x2000016c

080049f8 <is_collision_food>:

int is_collision_food(struct Point p){
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	463b      	mov	r3, r7
 8004a00:	e883 0003 	stmia.w	r3, {r0, r1}
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	dd08      	ble.n	8004a1c <is_collision_food+0x24>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2bee      	cmp	r3, #238	; 0xee
 8004a0e:	dc05      	bgt.n	8004a1c <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8004a10:	687b      	ldr	r3, [r7, #4]
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8004a12:	2b12      	cmp	r3, #18
 8004a14:	dd02      	ble.n	8004a1c <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2bc6      	cmp	r3, #198	; 0xc6
 8004a1a:	dd01      	ble.n	8004a20 <is_collision_food+0x28>
		return 1;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e01c      	b.n	8004a5a <is_collision_food+0x62>
	}
	for (int i = 0; i < length; i++){
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e013      	b.n	8004a4e <is_collision_food+0x56>
		if (p.x == snake[i].x && p.y == snake[i].y)
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	490f      	ldr	r1, [pc, #60]	; (8004a68 <is_collision_food+0x70>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d109      	bne.n	8004a48 <is_collision_food+0x50>
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	490c      	ldr	r1, [pc, #48]	; (8004a68 <is_collision_food+0x70>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	440b      	add	r3, r1
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d101      	bne.n	8004a48 <is_collision_food+0x50>
			return 1;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e008      	b.n	8004a5a <is_collision_food+0x62>
	for (int i = 0; i < length; i++){
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <is_collision_food+0x74>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d3e6      	bcc.n	8004a26 <is_collision_food+0x2e>
	}
	return 0;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000260 	.word	0x20000260
 8004a6c:	2000004c 	.word	0x2000004c

08004a70 <is_collision>:

int is_collision(){
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 8004a76:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <is_collision+0x74>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dd0b      	ble.n	8004a96 <is_collision+0x26>
 8004a7e:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <is_collision+0x74>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2bee      	cmp	r3, #238	; 0xee
 8004a84:	dc07      	bgt.n	8004a96 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 8004a86:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <is_collision+0x74>)
 8004a88:	685b      	ldr	r3, [r3, #4]
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 8004a8a:	2b12      	cmp	r3, #18
 8004a8c:	dd03      	ble.n	8004a96 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <is_collision+0x74>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2bc6      	cmp	r3, #198	; 0xc6
 8004a94:	dd01      	ble.n	8004a9a <is_collision+0x2a>
		return 1;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e01e      	b.n	8004ad8 <is_collision+0x68>
	}
	for (int i = 1; i < length; i++){
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	e015      	b.n	8004acc <is_collision+0x5c>
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <is_collision+0x74>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	490f      	ldr	r1, [pc, #60]	; (8004ae4 <is_collision+0x74>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d10a      	bne.n	8004ac6 <is_collision+0x56>
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <is_collision+0x74>)
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	490b      	ldr	r1, [pc, #44]	; (8004ae4 <is_collision+0x74>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	440b      	add	r3, r1
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d101      	bne.n	8004ac6 <is_collision+0x56>
			return 1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e008      	b.n	8004ad8 <is_collision+0x68>
	for (int i = 1; i < length; i++){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <is_collision+0x78>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3e4      	bcc.n	8004aa0 <is_collision+0x30>
	}
	return 0;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000260 	.word	0x20000260
 8004ae8:	2000004c 	.word	0x2000004c

08004aec <is_eat>:

int is_eat(){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
	if (snake[0].x <= (food.x + 6) && snake[0].x >= (food.x - 6) &&
 8004af0:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <is_eat+0x54>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <is_eat+0x58>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3306      	adds	r3, #6
 8004afa:	429a      	cmp	r2, r3
 8004afc:	dc1d      	bgt.n	8004b3a <is_eat+0x4e>
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <is_eat+0x54>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <is_eat+0x58>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3b06      	subs	r3, #6
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	db16      	blt.n	8004b3a <is_eat+0x4e>
		snake[0].y <= (food.y + 6) && snake[0].y >= (food.y - 6) ){
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <is_eat+0x54>)
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <is_eat+0x58>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	3306      	adds	r3, #6
	if (snake[0].x <= (food.x + 6) && snake[0].x >= (food.x - 6) &&
 8004b16:	429a      	cmp	r2, r3
 8004b18:	dc0f      	bgt.n	8004b3a <is_eat+0x4e>
		snake[0].y <= (food.y + 6) && snake[0].y >= (food.y - 6) ){
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <is_eat+0x54>)
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <is_eat+0x58>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	3b06      	subs	r3, #6
 8004b24:	429a      	cmp	r2, r3
 8004b26:	db08      	blt.n	8004b3a <is_eat+0x4e>
		point_clr(food);
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <is_eat+0x58>)
 8004b2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b2e:	f7fe fd4f 	bl	80035d0 <point_clr>
		reDraw_snake();
 8004b32:	f000 f8cf 	bl	8004cd4 <reDraw_snake>
		return 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <is_eat+0x50>
	}
	return 0;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000260 	.word	0x20000260
 8004b44:	20000050 	.word	0x20000050

08004b48 <get_rand>:

int get_rand(int max){
 8004b48:	b5b0      	push	{r4, r5, r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	return 0 + (int)(rand()*(max - 0 + 1.0)/(1.0 + RAND_MAX));
 8004b50:	f007 fdb2 	bl	800c6b8 <rand>
 8004b54:	4603      	mov	r3, r0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fb fce4 	bl	8000524 <__aeabi_i2d>
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	460d      	mov	r5, r1
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7fb fcdf 	bl	8000524 <__aeabi_i2d>
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <get_rand+0x5c>)
 8004b6c:	f7fb fb8e 	bl	800028c <__adddf3>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb fd3e 	bl	80005f8 <__aeabi_dmul>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <get_rand+0x60>)
 8004b8a:	f7fb fe5f 	bl	800084c <__aeabi_ddiv>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	f7fb ffdf 	bl	8000b58 <__aeabi_d2iz>
 8004b9a:	4603      	mov	r3, r0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba4:	3ff00000 	.word	0x3ff00000
 8004ba8:	41e00000 	.word	0x41e00000

08004bac <rand_food>:

void rand_food(){
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	struct Point p;
	p.x = get_rand(POS_X_MAX);
 8004bb2:	20ef      	movs	r0, #239	; 0xef
 8004bb4:	f7ff ffc8 	bl	8004b48 <get_rand>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	603b      	str	r3, [r7, #0]
	p.y = get_rand(POS_Y_MAX);
 8004bbc:	20c7      	movs	r0, #199	; 0xc7
 8004bbe:	f7ff ffc3 	bl	8004b48 <get_rand>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004bc6:	e009      	b.n	8004bdc <rand_food+0x30>
		p.x = get_rand(POS_X_MAX);
 8004bc8:	20ef      	movs	r0, #239	; 0xef
 8004bca:	f7ff ffbd 	bl	8004b48 <get_rand>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	603b      	str	r3, [r7, #0]
		p.y = get_rand(POS_Y_MAX);
 8004bd2:	20c7      	movs	r0, #199	; 0xc7
 8004bd4:	f7ff ffb8 	bl	8004b48 <get_rand>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004bdc:	463b      	mov	r3, r7
 8004bde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004be2:	f7ff ff09 	bl	80049f8 <is_collision_food>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d0ed      	beq.n	8004bc8 <rand_food+0x1c>
	}
	food = p;
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <rand_food+0x60>)
 8004bee:	461a      	mov	r2, r3
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bf6:	e882 0003 	stmia.w	r2, {r0, r1}
	point_food_lcd(food);
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <rand_food+0x60>)
 8004bfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c00:	f7fe fcd3 	bl	80035aa <point_food_lcd>
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000050 	.word	0x20000050

08004c10 <move_snake>:

void move_snake(){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
	point_clr(snake[length - 1]);
 8004c16:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <move_snake+0xb8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <move_snake+0xbc>)
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c26:	f7fe fcd3 	bl	80035d0 <point_clr>
	for (int i = length - 1; i > 0; i--){
 8004c2a:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <move_snake+0xb8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	e016      	b.n	8004c62 <move_snake+0x52>
		snake[i].x = snake[i-1].x;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <move_snake+0xbc>)
 8004c3a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004c3e:	4923      	ldr	r1, [pc, #140]	; (8004ccc <move_snake+0xbc>)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[i].y = snake[i-1].y;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	4a20      	ldr	r2, [pc, #128]	; (8004ccc <move_snake+0xbc>)
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4413      	add	r3, r2
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	491e      	ldr	r1, [pc, #120]	; (8004ccc <move_snake+0xbc>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	605a      	str	r2, [r3, #4]
	for (int i = length - 1; i > 0; i--){
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	dce5      	bgt.n	8004c34 <move_snake+0x24>
	}
	switch (move) {
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <move_snake+0xc0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d822      	bhi.n	8004cb8 <move_snake+0xa8>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <move_snake+0x68>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c95 	.word	0x08004c95
 8004c80:	08004ca1 	.word	0x08004ca1
 8004c84:	08004cad 	.word	0x08004cad
		case RIGHT:
			snake[0].x += 7;
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <move_snake+0xbc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <move_snake+0xbc>)
 8004c90:	6013      	str	r3, [r2, #0]
			break;
 8004c92:	e012      	b.n	8004cba <move_snake+0xaa>
		case LEFT:
			snake[0].x -= 7;
 8004c94:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <move_snake+0xbc>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3b07      	subs	r3, #7
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <move_snake+0xbc>)
 8004c9c:	6013      	str	r3, [r2, #0]
			break;
 8004c9e:	e00c      	b.n	8004cba <move_snake+0xaa>
		case UP:
			snake[0].y -= 7;
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <move_snake+0xbc>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	3b07      	subs	r3, #7
 8004ca6:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <move_snake+0xbc>)
 8004ca8:	6053      	str	r3, [r2, #4]
			break;
 8004caa:	e006      	b.n	8004cba <move_snake+0xaa>
		case DOWN:
			snake[0].y += 7;
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <move_snake+0xbc>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	4a06      	ldr	r2, [pc, #24]	; (8004ccc <move_snake+0xbc>)
 8004cb4:	6053      	str	r3, [r2, #4]
			break;
 8004cb6:	e000      	b.n	8004cba <move_snake+0xaa>
		default:
			break;
 8004cb8:	bf00      	nop
	}
	reDraw_snake();
 8004cba:	f000 f80b 	bl	8004cd4 <reDraw_snake>
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000004c 	.word	0x2000004c
 8004ccc:	20000260 	.word	0x20000260
 8004cd0:	20000160 	.word	0x20000160

08004cd4 <reDraw_snake>:

void reDraw_snake(){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
	point_head_lcd(snake[0]);
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <reDraw_snake+0x40>)
 8004cdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ce0:	f7fe fbf6 	bl	80034d0 <point_head_lcd>
	for (int i = 1; i < length; i++){
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	607b      	str	r3, [r7, #4]
 8004ce8:	e00a      	b.n	8004d00 <reDraw_snake+0x2c>
		point_snake_lcd(snake[i]);
 8004cea:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <reDraw_snake+0x40>)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cf6:	f7fe fc06 	bl	8003506 <point_snake_lcd>
	for (int i = 1; i < length; i++){
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <reDraw_snake+0x44>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d3ef      	bcc.n	8004cea <reDraw_snake+0x16>
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000260 	.word	0x20000260
 8004d18:	2000004c 	.word	0x2000004c

08004d1c <timer_init>:

uint16_t flag_timer5 = 0;
uint16_t timer5_counter = 0;
uint16_t timer5_MUL = 0;

void timer_init(){
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004d20:	4803      	ldr	r0, [pc, #12]	; (8004d30 <timer_init+0x14>)
 8004d22:	f005 fce7 	bl	800a6f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8004d26:	4803      	ldr	r0, [pc, #12]	; (8004d34 <timer_init+0x18>)
 8004d28:	f005 fc7c 	bl	800a624 <HAL_TIM_Base_Start>
}
 8004d2c:	bf00      	nop
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	200004f8 	.word	0x200004f8
 8004d34:	200004b0 	.word	0x200004b0

08004d38 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8004d42:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <setTimer2+0x2c>)
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <setTimer2+0x2c>)
 8004d4a:	881a      	ldrh	r2, [r3, #0]
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <setTimer2+0x30>)
 8004d4e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <setTimer2+0x34>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	801a      	strh	r2, [r3, #0]
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	2000017e 	.word	0x2000017e
 8004d68:	2000017c 	.word	0x2000017c
 8004d6c:	2000017a 	.word	0x2000017a

08004d70 <setTimer3>:

void setTimer3(uint16_t duration){
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8004d7a:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <setTimer3+0x2c>)
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <setTimer3+0x2c>)
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <setTimer3+0x30>)
 8004d86:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <setTimer3+0x34>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	801a      	strh	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000184 	.word	0x20000184
 8004da0:	20000182 	.word	0x20000182
 8004da4:	20000180 	.word	0x20000180

08004da8 <setTimer4>:

void setTimer4(uint16_t duration){
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 8004db2:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <setTimer4+0x2c>)
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <setTimer4+0x2c>)
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <setTimer4+0x30>)
 8004dbe:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <setTimer4+0x34>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	801a      	strh	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	2000018a 	.word	0x2000018a
 8004dd8:	20000188 	.word	0x20000188
 8004ddc:	20000186 	.word	0x20000186

08004de0 <setTimer5>:

void setTimer5(uint16_t duration){
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 8004dea:	4a08      	ldr	r2, [pc, #32]	; (8004e0c <setTimer5+0x2c>)
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <setTimer5+0x2c>)
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <setTimer5+0x30>)
 8004df6:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <setTimer5+0x34>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	801a      	strh	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000190 	.word	0x20000190
 8004e10:	2000018e 	.word	0x2000018e
 8004e14:	2000018c 	.word	0x2000018c

08004e18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	d155      	bne.n	8004ed6 <HAL_TIM_PeriodElapsedCallback+0xbe>
		if(timer2_counter > 0){
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d010      	beq.n	8004e54 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8004e32:	4b2b      	ldr	r3, [pc, #172]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	4b29      	ldr	r3, [pc, #164]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004e3c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0){
 8004e3e:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004e46:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8004e4c:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004e52:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004e54:	4b25      	ldr	r3, [pc, #148]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d010      	beq.n	8004e7e <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8004e5c:	4b23      	ldr	r3, [pc, #140]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	4b21      	ldr	r3, [pc, #132]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004e66:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0){
 8004e68:	4b20      	ldr	r3, [pc, #128]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004e76:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004e7c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004e90:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0){
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8004e9a:	4b18      	ldr	r3, [pc, #96]	; (8004efc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8004ea0:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004ea2:	881a      	ldrh	r2, [r3, #0]
 8004ea4:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004ea6:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8004ea8:	4b16      	ldr	r3, [pc, #88]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d010      	beq.n	8004ed2 <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004eba:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0){
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004ecc:	881a      	ldrh	r2, [r3, #0]
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004ed0:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8004ed2:	f7ff fb81 	bl	80045d8 <led7_Scan>
	}
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	2000017c 	.word	0x2000017c
 8004ee4:	2000017a 	.word	0x2000017a
 8004ee8:	2000017e 	.word	0x2000017e
 8004eec:	20000182 	.word	0x20000182
 8004ef0:	20000180 	.word	0x20000180
 8004ef4:	20000184 	.word	0x20000184
 8004ef8:	20000188 	.word	0x20000188
 8004efc:	20000186 	.word	0x20000186
 8004f00:	2000018a 	.word	0x2000018a
 8004f04:	2000018e 	.word	0x2000018e
 8004f08:	2000018c 	.word	0x2000018c
 8004f0c:	20000190 	.word	0x20000190

08004f10 <delay_us>:

void delay_us (uint16_t us){
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <delay_us+0x30>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8004f22:	bf00      	nop
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <delay_us+0x30>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3f9      	bcc.n	8004f24 <delay_us+0x14>
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	200004b0 	.word	0x200004b0

08004f44 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004f48:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f4a:	4a18      	ldr	r2, [pc, #96]	; (8004fac <MX_SPI1_Init+0x68>)
 8004f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f4e:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f5c:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f88:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f90:	220a      	movs	r2, #10
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f94:	4804      	ldr	r0, [pc, #16]	; (8004fa8 <MX_SPI1_Init+0x64>)
 8004f96:	f004 fd09 	bl	80099ac <HAL_SPI_Init>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004fa0:	f7ff fc8e 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004fa4:	bf00      	nop
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000410 	.word	0x20000410
 8004fac:	40013000 	.word	0x40013000

08004fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	607b      	str	r3, [r7, #4]
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_MspInit+0x4c>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	4a0f      	ldr	r2, [pc, #60]	; (8004ffc <HAL_MspInit+0x4c>)
 8004fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <HAL_MspInit+0x4c>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_MspInit+0x4c>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <HAL_MspInit+0x4c>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_MspInit+0x4c>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800

08005000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3c      	ldr	r2, [pc, #240]	; (8005110 <HAL_ADC_MspInit+0x110>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d171      	bne.n	8005106 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	4b3b      	ldr	r3, [pc, #236]	; (8005114 <HAL_ADC_MspInit+0x114>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	4a3a      	ldr	r2, [pc, #232]	; (8005114 <HAL_ADC_MspInit+0x114>)
 800502c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005030:	6453      	str	r3, [r2, #68]	; 0x44
 8005032:	4b38      	ldr	r3, [pc, #224]	; (8005114 <HAL_ADC_MspInit+0x114>)
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <HAL_ADC_MspInit+0x114>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	4a33      	ldr	r2, [pc, #204]	; (8005114 <HAL_ADC_MspInit+0x114>)
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	6313      	str	r3, [r2, #48]	; 0x30
 800504e:	4b31      	ldr	r3, [pc, #196]	; (8005114 <HAL_ADC_MspInit+0x114>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	4b2d      	ldr	r3, [pc, #180]	; (8005114 <HAL_ADC_MspInit+0x114>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	4a2c      	ldr	r2, [pc, #176]	; (8005114 <HAL_ADC_MspInit+0x114>)
 8005064:	f043 0302 	orr.w	r3, r3, #2
 8005068:	6313      	str	r3, [r2, #48]	; 0x30
 800506a:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <HAL_ADC_MspInit+0x114>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005076:	2307      	movs	r3, #7
 8005078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800507a:	2303      	movs	r3, #3
 800507c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	4619      	mov	r1, r3
 8005088:	4823      	ldr	r0, [pc, #140]	; (8005118 <HAL_ADC_MspInit+0x118>)
 800508a:	f002 fe8d 	bl	8007da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800508e:	2303      	movs	r3, #3
 8005090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005092:	2303      	movs	r3, #3
 8005094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509a:	f107 0314 	add.w	r3, r7, #20
 800509e:	4619      	mov	r1, r3
 80050a0:	481e      	ldr	r0, [pc, #120]	; (800511c <HAL_ADC_MspInit+0x11c>)
 80050a2:	f002 fe81 	bl	8007da8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80050a6:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050a8:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <HAL_ADC_MspInit+0x124>)
 80050aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80050ac:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050b2:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050ce:	4b14      	ldr	r3, [pc, #80]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80050ea:	480d      	ldr	r0, [pc, #52]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050ec:	f002 fa5a 	bl	80075a4 <HAL_DMA_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80050f6:	f7ff fbe3 	bl	80048c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a08      	ldr	r2, [pc, #32]	; (8005120 <HAL_ADC_MspInit+0x120>)
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38
 8005100:	4a07      	ldr	r2, [pc, #28]	; (8005120 <HAL_ADC_MspInit+0x120>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005106:	bf00      	nop
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40012000 	.word	0x40012000
 8005114:	40023800 	.word	0x40023800
 8005118:	40020800 	.word	0x40020800
 800511c:	40020400 	.word	0x40020400
 8005120:	200003a4 	.word	0x200003a4
 8005124:	40026410 	.word	0x40026410

08005128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	f107 0314 	add.w	r3, r7, #20
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <HAL_I2C_MspInit+0x84>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d12b      	bne.n	80051a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <HAL_I2C_MspInit+0x88>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <HAL_I2C_MspInit+0x88>)
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	6313      	str	r3, [r2, #48]	; 0x30
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <HAL_I2C_MspInit+0x88>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005166:	23c0      	movs	r3, #192	; 0xc0
 8005168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800516a:	2312      	movs	r3, #18
 800516c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005172:	2303      	movs	r3, #3
 8005174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005176:	2304      	movs	r3, #4
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	4619      	mov	r1, r3
 8005180:	480c      	ldr	r0, [pc, #48]	; (80051b4 <HAL_I2C_MspInit+0x8c>)
 8005182:	f002 fe11 	bl	8007da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_I2C_MspInit+0x88>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <HAL_I2C_MspInit+0x88>)
 8005190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005194:	6413      	str	r3, [r2, #64]	; 0x40
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_I2C_MspInit+0x88>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051a2:	bf00      	nop
 80051a4:	3728      	adds	r7, #40	; 0x28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40005400 	.word	0x40005400
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40020400 	.word	0x40020400

080051b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c0:	f107 0314 	add.w	r3, r7, #20
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	605a      	str	r2, [r3, #4]
 80051ca:	609a      	str	r2, [r3, #8]
 80051cc:	60da      	str	r2, [r3, #12]
 80051ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <HAL_SPI_MspInit+0x84>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d12b      	bne.n	8005232 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	4b18      	ldr	r3, [pc, #96]	; (8005240 <HAL_SPI_MspInit+0x88>)
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	4a17      	ldr	r2, [pc, #92]	; (8005240 <HAL_SPI_MspInit+0x88>)
 80051e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051e8:	6453      	str	r3, [r2, #68]	; 0x44
 80051ea:	4b15      	ldr	r3, [pc, #84]	; (8005240 <HAL_SPI_MspInit+0x88>)
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	4b11      	ldr	r3, [pc, #68]	; (8005240 <HAL_SPI_MspInit+0x88>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	4a10      	ldr	r2, [pc, #64]	; (8005240 <HAL_SPI_MspInit+0x88>)
 8005200:	f043 0302 	orr.w	r3, r3, #2
 8005204:	6313      	str	r3, [r2, #48]	; 0x30
 8005206:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_SPI_MspInit+0x88>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005212:	2338      	movs	r3, #56	; 0x38
 8005214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005216:	2302      	movs	r3, #2
 8005218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521e:	2303      	movs	r3, #3
 8005220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005222:	2305      	movs	r3, #5
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005226:	f107 0314 	add.w	r3, r7, #20
 800522a:	4619      	mov	r1, r3
 800522c:	4805      	ldr	r0, [pc, #20]	; (8005244 <HAL_SPI_MspInit+0x8c>)
 800522e:	f002 fdbb 	bl	8007da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005232:	bf00      	nop
 8005234:	3728      	adds	r7, #40	; 0x28
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40013000 	.word	0x40013000
 8005240:	40023800 	.word	0x40023800
 8005244:	40020400 	.word	0x40020400

08005248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <HAL_TIM_Base_MspInit+0x98>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10e      	bne.n	8005278 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	4b21      	ldr	r3, [pc, #132]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6453      	str	r3, [r2, #68]	; 0x44
 800526a:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005276:	e02e      	b.n	80052d6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005280:	d116      	bne.n	80052b0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6413      	str	r3, [r2, #64]	; 0x40
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800529e:	2200      	movs	r2, #0
 80052a0:	2100      	movs	r1, #0
 80052a2:	201c      	movs	r0, #28
 80052a4:	f002 f947 	bl	8007536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80052a8:	201c      	movs	r0, #28
 80052aa:	f002 f960 	bl	800756e <HAL_NVIC_EnableIRQ>
}
 80052ae:	e012      	b.n	80052d6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <HAL_TIM_Base_MspInit+0xa0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10d      	bne.n	80052d6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	4a08      	ldr	r2, [pc, #32]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_TIM_Base_MspInit+0x9c>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40001c00 	.word	0x40001c00

080052ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f4:	f107 030c 	add.w	r3, r7, #12
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a12      	ldr	r2, [pc, #72]	; (8005354 <HAL_TIM_MspPostInit+0x68>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d11e      	bne.n	800534c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_TIM_MspPostInit+0x6c>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	4a10      	ldr	r2, [pc, #64]	; (8005358 <HAL_TIM_MspPostInit+0x6c>)
 8005318:	f043 0320 	orr.w	r3, r3, #32
 800531c:	6313      	str	r3, [r2, #48]	; 0x30
 800531e:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <HAL_TIM_MspPostInit+0x6c>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800532a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800532e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005330:	2302      	movs	r3, #2
 8005332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005338:	2300      	movs	r3, #0
 800533a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800533c:	2309      	movs	r3, #9
 800533e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005340:	f107 030c 	add.w	r3, r7, #12
 8005344:	4619      	mov	r1, r3
 8005346:	4805      	ldr	r0, [pc, #20]	; (800535c <HAL_TIM_MspPostInit+0x70>)
 8005348:	f002 fd2e 	bl	8007da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800534c:	bf00      	nop
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40001c00 	.word	0x40001c00
 8005358:	40023800 	.word	0x40023800
 800535c:	40021400 	.word	0x40021400

08005360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005368:	f107 031c 	add.w	r3, r7, #28
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a3a      	ldr	r2, [pc, #232]	; (8005468 <HAL_UART_MspInit+0x108>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d135      	bne.n	80053ee <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005382:	2300      	movs	r3, #0
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	4b39      	ldr	r3, [pc, #228]	; (800546c <HAL_UART_MspInit+0x10c>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	4a38      	ldr	r2, [pc, #224]	; (800546c <HAL_UART_MspInit+0x10c>)
 800538c:	f043 0310 	orr.w	r3, r3, #16
 8005390:	6453      	str	r3, [r2, #68]	; 0x44
 8005392:	4b36      	ldr	r3, [pc, #216]	; (800546c <HAL_UART_MspInit+0x10c>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	4b32      	ldr	r3, [pc, #200]	; (800546c <HAL_UART_MspInit+0x10c>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	4a31      	ldr	r2, [pc, #196]	; (800546c <HAL_UART_MspInit+0x10c>)
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	6313      	str	r3, [r2, #48]	; 0x30
 80053ae:	4b2f      	ldr	r3, [pc, #188]	; (800546c <HAL_UART_MspInit+0x10c>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80053ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c0:	2302      	movs	r3, #2
 80053c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c8:	2303      	movs	r3, #3
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053cc:	2307      	movs	r3, #7
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d0:	f107 031c 	add.w	r3, r7, #28
 80053d4:	4619      	mov	r1, r3
 80053d6:	4826      	ldr	r0, [pc, #152]	; (8005470 <HAL_UART_MspInit+0x110>)
 80053d8:	f002 fce6 	bl	8007da8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80053dc:	2200      	movs	r2, #0
 80053de:	2100      	movs	r1, #0
 80053e0:	2025      	movs	r0, #37	; 0x25
 80053e2:	f002 f8a8 	bl	8007536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053e6:	2025      	movs	r0, #37	; 0x25
 80053e8:	f002 f8c1 	bl	800756e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80053ec:	e038      	b.n	8005460 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a20      	ldr	r2, [pc, #128]	; (8005474 <HAL_UART_MspInit+0x114>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d133      	bne.n	8005460 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <HAL_UART_MspInit+0x10c>)
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	4a1a      	ldr	r2, [pc, #104]	; (800546c <HAL_UART_MspInit+0x10c>)
 8005402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005406:	6413      	str	r3, [r2, #64]	; 0x40
 8005408:	4b18      	ldr	r3, [pc, #96]	; (800546c <HAL_UART_MspInit+0x10c>)
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <HAL_UART_MspInit+0x10c>)
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <HAL_UART_MspInit+0x10c>)
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	6313      	str	r3, [r2, #48]	; 0x30
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <HAL_UART_MspInit+0x10c>)
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005430:	230c      	movs	r3, #12
 8005432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005434:	2302      	movs	r3, #2
 8005436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	2300      	movs	r3, #0
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800543c:	2303      	movs	r3, #3
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005440:	2307      	movs	r3, #7
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005444:	f107 031c 	add.w	r3, r7, #28
 8005448:	4619      	mov	r1, r3
 800544a:	4809      	ldr	r0, [pc, #36]	; (8005470 <HAL_UART_MspInit+0x110>)
 800544c:	f002 fcac 	bl	8007da8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005450:	2200      	movs	r2, #0
 8005452:	2100      	movs	r1, #0
 8005454:	2026      	movs	r0, #38	; 0x26
 8005456:	f002 f86e 	bl	8007536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800545a:	2026      	movs	r0, #38	; 0x26
 800545c:	f002 f887 	bl	800756e <HAL_NVIC_EnableIRQ>
}
 8005460:	bf00      	nop
 8005462:	3730      	adds	r7, #48	; 0x30
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40011000 	.word	0x40011000
 800546c:	40023800 	.word	0x40023800
 8005470:	40020000 	.word	0x40020000
 8005474:	40004400 	.word	0x40004400

08005478 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800548c:	4b1c      	ldr	r3, [pc, #112]	; (8005500 <HAL_FSMC_MspInit+0x88>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d131      	bne.n	80054f8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005494:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <HAL_FSMC_MspInit+0x88>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800549a:	2300      	movs	r3, #0
 800549c:	603b      	str	r3, [r7, #0]
 800549e:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_FSMC_MspInit+0x8c>)
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_FSMC_MspInit+0x8c>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6393      	str	r3, [r2, #56]	; 0x38
 80054aa:	4b16      	ldr	r3, [pc, #88]	; (8005504 <HAL_FSMC_MspInit+0x8c>)
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80054b6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80054ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054bc:	2302      	movs	r3, #2
 80054be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c4:	2303      	movs	r3, #3
 80054c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80054c8:	230c      	movs	r3, #12
 80054ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054cc:	1d3b      	adds	r3, r7, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	480d      	ldr	r0, [pc, #52]	; (8005508 <HAL_FSMC_MspInit+0x90>)
 80054d2:	f002 fc69 	bl	8007da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80054d6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80054da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054dc:	2302      	movs	r3, #2
 80054de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e4:	2303      	movs	r3, #3
 80054e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80054e8:	230c      	movs	r3, #12
 80054ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4806      	ldr	r0, [pc, #24]	; (800550c <HAL_FSMC_MspInit+0x94>)
 80054f2:	f002 fc59 	bl	8007da8 <HAL_GPIO_Init>
 80054f6:	e000      	b.n	80054fa <HAL_FSMC_MspInit+0x82>
    return;
 80054f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000194 	.word	0x20000194
 8005504:	40023800 	.word	0x40023800
 8005508:	40021000 	.word	0x40021000
 800550c:	40020c00 	.word	0x40020c00

08005510 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005518:	f7ff ffae 	bl	8005478 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005528:	e7fe      	b.n	8005528 <NMI_Handler+0x4>

0800552a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800552e:	e7fe      	b.n	800552e <HardFault_Handler+0x4>

08005530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005534:	e7fe      	b.n	8005534 <MemManage_Handler+0x4>

08005536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800553a:	e7fe      	b.n	800553a <BusFault_Handler+0x4>

0800553c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005540:	e7fe      	b.n	8005540 <UsageFault_Handler+0x4>

08005542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005546:	bf00      	nop
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005562:	bf00      	nop
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005570:	f001 fab0 	bl	8006ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005574:	bf00      	nop
 8005576:	bd80      	pop	{r7, pc}

08005578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800557c:	4802      	ldr	r0, [pc, #8]	; (8005588 <TIM2_IRQHandler+0x10>)
 800557e:	f005 f982 	bl	800a886 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200004f8 	.word	0x200004f8

0800558c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005590:	4802      	ldr	r0, [pc, #8]	; (800559c <USART1_IRQHandler+0x10>)
 8005592:	f006 f8bd 	bl	800b710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000540 	.word	0x20000540

080055a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055a4:	4802      	ldr	r0, [pc, #8]	; (80055b0 <USART2_IRQHandler+0x10>)
 80055a6:	f006 f8b3 	bl	800b710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000584 	.word	0x20000584

080055b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80055b8:	4802      	ldr	r0, [pc, #8]	; (80055c4 <DMA2_Stream0_IRQHandler+0x10>)
 80055ba:	f002 f98b 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	200003a4 	.word	0x200003a4

080055c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
	return 1;
 80055cc:	2301      	movs	r3, #1
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <_kill>:

int _kill(int pid, int sig)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055e2:	f007 f81d 	bl	800c620 <__errno>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2216      	movs	r2, #22
 80055ea:	601a      	str	r2, [r3, #0]
	return -1;
 80055ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <_exit>:

void _exit (int status)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005600:	f04f 31ff 	mov.w	r1, #4294967295
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ffe7 	bl	80055d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800560a:	e7fe      	b.n	800560a <_exit+0x12>

0800560c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e00a      	b.n	8005634 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800561e:	f3af 8000 	nop.w
 8005622:	4601      	mov	r1, r0
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	60ba      	str	r2, [r7, #8]
 800562a:	b2ca      	uxtb	r2, r1
 800562c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	3301      	adds	r3, #1
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	dbf0      	blt.n	800561e <_read+0x12>
	}

return len;
 800563c:	687b      	ldr	r3, [r7, #4]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e009      	b.n	800566c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	60ba      	str	r2, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	3301      	adds	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	dbf1      	blt.n	8005658 <_write+0x12>
	}
	return len;
 8005674:	687b      	ldr	r3, [r7, #4]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_close>:

int _close(int file)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
	return -1;
 8005686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056a6:	605a      	str	r2, [r3, #4]
	return 0;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <_isatty>:

int _isatty(int file)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
	return 1;
 80056be:	2301      	movs	r3, #1
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
	return 0;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056f0:	4a14      	ldr	r2, [pc, #80]	; (8005744 <_sbrk+0x5c>)
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <_sbrk+0x60>)
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <_sbrk+0x64>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <_sbrk+0x64>)
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <_sbrk+0x68>)
 8005708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800570a:	4b10      	ldr	r3, [pc, #64]	; (800574c <_sbrk+0x64>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4413      	add	r3, r2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	d207      	bcs.n	8005728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005718:	f006 ff82 	bl	800c620 <__errno>
 800571c:	4603      	mov	r3, r0
 800571e:	220c      	movs	r2, #12
 8005720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295
 8005726:	e009      	b.n	800573c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <_sbrk+0x64>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <_sbrk+0x64>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4413      	add	r3, r2
 8005736:	4a05      	ldr	r2, [pc, #20]	; (800574c <_sbrk+0x64>)
 8005738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20020000 	.word	0x20020000
 8005748:	00000400 	.word	0x00000400
 800574c:	20000198 	.word	0x20000198
 8005750:	200005e0 	.word	0x200005e0

08005754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <SystemInit+0x20>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	4a05      	ldr	r2, [pc, #20]	; (8005774 <SystemInit+0x20>)
 8005760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	e000ed00 	.word	0xe000ed00

08005778 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	605a      	str	r2, [r3, #4]
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800578c:	463b      	mov	r3, r7
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005794:	4b1e      	ldr	r3, [pc, #120]	; (8005810 <MX_TIM1_Init+0x98>)
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <MX_TIM1_Init+0x9c>)
 8005798:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <MX_TIM1_Init+0x98>)
 800579c:	2253      	movs	r2, #83	; 0x53
 800579e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a0:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <MX_TIM1_Init+0x98>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <MX_TIM1_Init+0x98>)
 80057a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ae:	4b18      	ldr	r3, [pc, #96]	; (8005810 <MX_TIM1_Init+0x98>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80057b4:	4b16      	ldr	r3, [pc, #88]	; (8005810 <MX_TIM1_Init+0x98>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <MX_TIM1_Init+0x98>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80057c0:	4813      	ldr	r0, [pc, #76]	; (8005810 <MX_TIM1_Init+0x98>)
 80057c2:	f004 fedf 	bl	800a584 <HAL_TIM_Base_Init>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80057cc:	f7ff f878 	bl	80048c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	4619      	mov	r1, r3
 80057dc:	480c      	ldr	r0, [pc, #48]	; (8005810 <MX_TIM1_Init+0x98>)
 80057de:	f005 fa1d 	bl	800ac1c <HAL_TIM_ConfigClockSource>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80057e8:	f7ff f86a 	bl	80048c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ec:	2300      	movs	r3, #0
 80057ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057f4:	463b      	mov	r3, r7
 80057f6:	4619      	mov	r1, r3
 80057f8:	4805      	ldr	r0, [pc, #20]	; (8005810 <MX_TIM1_Init+0x98>)
 80057fa:	f005 fde9 	bl	800b3d0 <HAL_TIMEx_MasterConfigSynchronization>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005804:	f7ff f85c 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005808:	bf00      	nop
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	200004b0 	.word	0x200004b0
 8005814:	40010000 	.word	0x40010000

08005818 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	609a      	str	r2, [r3, #8]
 800582a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800582c:	463b      	mov	r3, r7
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005834:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <MX_TIM2_Init+0x94>)
 8005836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800583a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <MX_TIM2_Init+0x94>)
 800583e:	f240 3247 	movw	r2, #839	; 0x347
 8005842:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005844:	4b19      	ldr	r3, [pc, #100]	; (80058ac <MX_TIM2_Init+0x94>)
 8005846:	2200      	movs	r2, #0
 8005848:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800584a:	4b18      	ldr	r3, [pc, #96]	; (80058ac <MX_TIM2_Init+0x94>)
 800584c:	2263      	movs	r2, #99	; 0x63
 800584e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005850:	4b16      	ldr	r3, [pc, #88]	; (80058ac <MX_TIM2_Init+0x94>)
 8005852:	2200      	movs	r2, #0
 8005854:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <MX_TIM2_Init+0x94>)
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800585c:	4813      	ldr	r0, [pc, #76]	; (80058ac <MX_TIM2_Init+0x94>)
 800585e:	f004 fe91 	bl	800a584 <HAL_TIM_Base_Init>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005868:	f7ff f82a 	bl	80048c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800586c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4619      	mov	r1, r3
 8005878:	480c      	ldr	r0, [pc, #48]	; (80058ac <MX_TIM2_Init+0x94>)
 800587a:	f005 f9cf 	bl	800ac1c <HAL_TIM_ConfigClockSource>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005884:	f7ff f81c 	bl	80048c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005888:	2300      	movs	r3, #0
 800588a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800588c:	2300      	movs	r3, #0
 800588e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005890:	463b      	mov	r3, r7
 8005892:	4619      	mov	r1, r3
 8005894:	4805      	ldr	r0, [pc, #20]	; (80058ac <MX_TIM2_Init+0x94>)
 8005896:	f005 fd9b 	bl	800b3d0 <HAL_TIMEx_MasterConfigSynchronization>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80058a0:	f7ff f80e 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80058a4:	bf00      	nop
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	200004f8 	.word	0x200004f8

080058b0 <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80058b6:	1d3b      	adds	r3, r7, #4
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	609a      	str	r2, [r3, #8]
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	611a      	str	r2, [r3, #16]
 80058c4:	615a      	str	r2, [r3, #20]
 80058c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <MX_TIM13_Init+0x94>)
 80058ca:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <MX_TIM13_Init+0x98>)
 80058cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <MX_TIM13_Init+0x94>)
 80058d0:	f240 3247 	movw	r2, #839	; 0x347
 80058d4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058d6:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <MX_TIM13_Init+0x94>)
 80058d8:	2200      	movs	r2, #0
 80058da:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <MX_TIM13_Init+0x94>)
 80058de:	2263      	movs	r2, #99	; 0x63
 80058e0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058e2:	4b18      	ldr	r3, [pc, #96]	; (8005944 <MX_TIM13_Init+0x94>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <MX_TIM13_Init+0x94>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80058ee:	4815      	ldr	r0, [pc, #84]	; (8005944 <MX_TIM13_Init+0x94>)
 80058f0:	f004 fe48 	bl	800a584 <HAL_TIM_Base_Init>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80058fa:	f7fe ffe1 	bl	80048c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80058fe:	4811      	ldr	r0, [pc, #68]	; (8005944 <MX_TIM13_Init+0x94>)
 8005900:	f004 ff68 	bl	800a7d4 <HAL_TIM_PWM_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800590a:	f7fe ffd9 	bl	80048c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800590e:	2360      	movs	r3, #96	; 0x60
 8005910:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	2200      	movs	r2, #0
 8005922:	4619      	mov	r1, r3
 8005924:	4807      	ldr	r0, [pc, #28]	; (8005944 <MX_TIM13_Init+0x94>)
 8005926:	f005 f8b7 	bl	800aa98 <HAL_TIM_PWM_ConfigChannel>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8005930:	f7fe ffc6 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8005934:	4803      	ldr	r0, [pc, #12]	; (8005944 <MX_TIM13_Init+0x94>)
 8005936:	f7ff fcd9 	bl	80052ec <HAL_TIM_MspPostInit>

}
 800593a:	bf00      	nop
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000468 	.word	0x20000468
 8005948:	40001c00 	.word	0x40001c00

0800594c <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
 800595e:	e025      	b.n	80059ac <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8005960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005964:	2b00      	cmp	r3, #0
 8005966:	da06      	bge.n	8005976 <TP_Write_Byte+0x2a>
 8005968:	2201      	movs	r2, #1
 800596a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800596e:	4813      	ldr	r0, [pc, #76]	; (80059bc <TP_Write_Byte+0x70>)
 8005970:	f002 fbce 	bl	8008110 <HAL_GPIO_WritePin>
 8005974:	e005      	b.n	8005982 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8005976:	2200      	movs	r2, #0
 8005978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800597c:	480f      	ldr	r0, [pc, #60]	; (80059bc <TP_Write_Byte+0x70>)
 800597e:	f002 fbc7 	bl	8008110 <HAL_GPIO_WritePin>
		num<<=1;
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800598e:	480c      	ldr	r0, [pc, #48]	; (80059c0 <TP_Write_Byte+0x74>)
 8005990:	f002 fbbe 	bl	8008110 <HAL_GPIO_WritePin>
		delay_us(1);
 8005994:	2001      	movs	r0, #1
 8005996:	f7ff fabb 	bl	8004f10 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800599a:	2201      	movs	r2, #1
 800599c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059a0:	4807      	ldr	r0, [pc, #28]	; (80059c0 <TP_Write_Byte+0x74>)
 80059a2:	f002 fbb5 	bl	8008110 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	3301      	adds	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b07      	cmp	r3, #7
 80059b0:	d9d6      	bls.n	8005960 <TP_Write_Byte+0x14>
	}
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40020800 	.word	0x40020800
 80059c0:	40021800 	.word	0x40021800

080059c4 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80059d6:	2200      	movs	r2, #0
 80059d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059dc:	482f      	ldr	r0, [pc, #188]	; (8005a9c <TP_Read_AD+0xd8>)
 80059de:	f002 fb97 	bl	8008110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80059e2:	2200      	movs	r2, #0
 80059e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059e8:	482d      	ldr	r0, [pc, #180]	; (8005aa0 <TP_Read_AD+0xdc>)
 80059ea:	f002 fb91 	bl	8008110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 80059ee:	2200      	movs	r2, #0
 80059f0:	2180      	movs	r1, #128	; 0x80
 80059f2:	482a      	ldr	r0, [pc, #168]	; (8005a9c <TP_Read_AD+0xd8>)
 80059f4:	f002 fb8c 	bl	8008110 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff ffa6 	bl	800594c <TP_Write_Byte>
	delay_us(6);
 8005a00:	2006      	movs	r0, #6
 8005a02:	f7ff fa85 	bl	8004f10 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005a06:	2200      	movs	r2, #0
 8005a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a0c:	4823      	ldr	r0, [pc, #140]	; (8005a9c <TP_Read_AD+0xd8>)
 8005a0e:	f002 fb7f 	bl	8008110 <HAL_GPIO_WritePin>
	delay_us(1);
 8005a12:	2001      	movs	r0, #1
 8005a14:	f7ff fa7c 	bl	8004f10 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a1e:	481f      	ldr	r0, [pc, #124]	; (8005a9c <TP_Read_AD+0xd8>)
 8005a20:	f002 fb76 	bl	8008110 <HAL_GPIO_WritePin>
	delay_us(1);
 8005a24:	2001      	movs	r0, #1
 8005a26:	f7ff fa73 	bl	8004f10 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a30:	481a      	ldr	r0, [pc, #104]	; (8005a9c <TP_Read_AD+0xd8>)
 8005a32:	f002 fb6d 	bl	8008110 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	e01f      	b.n	8005a7c <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8005a3c:	89bb      	ldrh	r3, [r7, #12]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005a42:	2200      	movs	r2, #0
 8005a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a48:	4814      	ldr	r0, [pc, #80]	; (8005a9c <TP_Read_AD+0xd8>)
 8005a4a:	f002 fb61 	bl	8008110 <HAL_GPIO_WritePin>
		delay_us(1);
 8005a4e:	2001      	movs	r0, #1
 8005a50:	f7ff fa5e 	bl	8004f10 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005a54:	2201      	movs	r2, #1
 8005a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a5a:	4810      	ldr	r0, [pc, #64]	; (8005a9c <TP_Read_AD+0xd8>)
 8005a5c:	f002 fb58 	bl	8008110 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8005a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a64:	480e      	ldr	r0, [pc, #56]	; (8005aa0 <TP_Read_AD+0xdc>)
 8005a66:	f002 fb3b 	bl	80080e0 <HAL_GPIO_ReadPin>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <TP_Read_AD+0xb2>
 8005a70:	89bb      	ldrh	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b0f      	cmp	r3, #15
 8005a80:	d9dc      	bls.n	8005a3c <TP_Read_AD+0x78>
	}
	Num>>=4;
 8005a82:	89bb      	ldrh	r3, [r7, #12]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8005a88:	2201      	movs	r2, #1
 8005a8a:	2180      	movs	r1, #128	; 0x80
 8005a8c:	4803      	ldr	r0, [pc, #12]	; (8005a9c <TP_Read_AD+0xd8>)
 8005a8e:	f002 fb3f 	bl	8008110 <HAL_GPIO_WritePin>
	return(Num);
 8005a92:	89bb      	ldrh	r3, [r7, #12]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40021800 	.word	0x40021800
 8005aa0:	40020800 	.word	0x40020800

08005aa4 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8005aa4:	b590      	push	{r4, r7, lr}
 8005aa6:	b089      	sub	sp, #36	; 0x24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	83fb      	strh	r3, [r7, #30]
 8005ab6:	e00f      	b.n	8005ad8 <TP_Read_XOY+0x34>
 8005ab8:	8bfc      	ldrh	r4, [r7, #30]
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff ff81 	bl	80059c4 <TP_Read_AD>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	0063      	lsls	r3, r4, #1
 8005ac8:	f107 0120 	add.w	r1, r7, #32
 8005acc:	440b      	add	r3, r1
 8005ace:	f823 2c14 	strh.w	r2, [r3, #-20]
 8005ad2:	8bfb      	ldrh	r3, [r7, #30]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	83fb      	strh	r3, [r7, #30]
 8005ad8:	8bfb      	ldrh	r3, [r7, #30]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d9ec      	bls.n	8005ab8 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	83fb      	strh	r3, [r7, #30]
 8005ae2:	e03b      	b.n	8005b5c <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8005ae4:	8bfb      	ldrh	r3, [r7, #30]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	83bb      	strh	r3, [r7, #28]
 8005aea:	e031      	b.n	8005b50 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8005aec:	8bfb      	ldrh	r3, [r7, #30]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	f107 0220 	add.w	r2, r7, #32
 8005af4:	4413      	add	r3, r2
 8005af6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005afa:	8bbb      	ldrh	r3, [r7, #28]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	f107 0120 	add.w	r1, r7, #32
 8005b02:	440b      	add	r3, r1
 8005b04:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d91e      	bls.n	8005b4a <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8005b0c:	8bfb      	ldrh	r3, [r7, #30]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	f107 0220 	add.w	r2, r7, #32
 8005b14:	4413      	add	r3, r2
 8005b16:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005b1a:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8005b1c:	8bbb      	ldrh	r3, [r7, #28]
 8005b1e:	8bfa      	ldrh	r2, [r7, #30]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	f107 0120 	add.w	r1, r7, #32
 8005b26:	440b      	add	r3, r1
 8005b28:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8005b2c:	0053      	lsls	r3, r2, #1
 8005b2e:	f107 0220 	add.w	r2, r7, #32
 8005b32:	4413      	add	r3, r2
 8005b34:	460a      	mov	r2, r1
 8005b36:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8005b3a:	8bbb      	ldrh	r3, [r7, #28]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	f107 0220 	add.w	r2, r7, #32
 8005b42:	4413      	add	r3, r2
 8005b44:	8b3a      	ldrh	r2, [r7, #24]
 8005b46:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8005b4a:	8bbb      	ldrh	r3, [r7, #28]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	83bb      	strh	r3, [r7, #28]
 8005b50:	8bbb      	ldrh	r3, [r7, #28]
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d9ca      	bls.n	8005aec <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8005b56:	8bfb      	ldrh	r3, [r7, #30]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	83fb      	strh	r3, [r7, #30]
 8005b5c:	8bfb      	ldrh	r3, [r7, #30]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d9c0      	bls.n	8005ae4 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8005b66:	2301      	movs	r3, #1
 8005b68:	83fb      	strh	r3, [r7, #30]
 8005b6a:	e00c      	b.n	8005b86 <TP_Read_XOY+0xe2>
 8005b6c:	8bfb      	ldrh	r3, [r7, #30]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	f107 0220 	add.w	r2, r7, #32
 8005b74:	4413      	add	r3, r2
 8005b76:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005b7a:	8b7b      	ldrh	r3, [r7, #26]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	837b      	strh	r3, [r7, #26]
 8005b80:	8bfb      	ldrh	r3, [r7, #30]
 8005b82:	3301      	adds	r3, #1
 8005b84:	83fb      	strh	r3, [r7, #30]
 8005b86:	8bfb      	ldrh	r3, [r7, #30]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d9ef      	bls.n	8005b6c <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8005b8c:	8b7b      	ldrh	r3, [r7, #26]
 8005b8e:	4a05      	ldr	r2, [pc, #20]	; (8005ba4 <TP_Read_XOY+0x100>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	833b      	strh	r3, [r7, #24]
	return temp;
 8005b98:	8b3b      	ldrh	r3, [r7, #24]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3724      	adds	r7, #36	; 0x24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd90      	pop	{r4, r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	aaaaaaab 	.word	0xaaaaaaab

08005ba8 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <TP_Read_XY+0x3c>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff ff74 	bl	8005aa4 <TP_Read_XOY>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005bc0:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <TP_Read_XY+0x40>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff ff6d 	bl	8005aa4 <TP_Read_XOY>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	89fa      	ldrh	r2, [r7, #14]
 8005bd2:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	89ba      	ldrh	r2, [r7, #12]
 8005bd8:	801a      	strh	r2, [r3, #0]
	return 1;
 8005bda:	2301      	movs	r3, #1
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	200000a0 	.word	0x200000a0
 8005be8:	200000a1 	.word	0x200000a1

08005bec <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8005bf6:	f107 0212 	add.w	r2, r7, #18
 8005bfa:	f107 0314 	add.w	r3, r7, #20
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ffd1 	bl	8005ba8 <TP_Read_XY>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <TP_Read_XY2+0x28>
 8005c10:	2300      	movs	r3, #0
 8005c12:	e049      	b.n	8005ca8 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8005c14:	f107 020e 	add.w	r2, r7, #14
 8005c18:	f107 0310 	add.w	r3, r7, #16
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff ffc2 	bl	8005ba8 <TP_Read_XY>
 8005c24:	4603      	mov	r3, r0
 8005c26:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <TP_Read_XY2+0x46>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e03a      	b.n	8005ca8 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8005c32:	8a3a      	ldrh	r2, [r7, #16]
 8005c34:	8abb      	ldrh	r3, [r7, #20]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d804      	bhi.n	8005c44 <TP_Read_XY2+0x58>
 8005c3a:	8a3b      	ldrh	r3, [r7, #16]
 8005c3c:	3363      	adds	r3, #99	; 0x63
 8005c3e:	8aba      	ldrh	r2, [r7, #20]
 8005c40:	4293      	cmp	r3, r2
 8005c42:	da08      	bge.n	8005c56 <TP_Read_XY2+0x6a>
 8005c44:	8aba      	ldrh	r2, [r7, #20]
 8005c46:	8a3b      	ldrh	r3, [r7, #16]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d82c      	bhi.n	8005ca6 <TP_Read_XY2+0xba>
 8005c4c:	8abb      	ldrh	r3, [r7, #20]
 8005c4e:	3363      	adds	r3, #99	; 0x63
 8005c50:	8a3a      	ldrh	r2, [r7, #16]
 8005c52:	4293      	cmp	r3, r2
 8005c54:	db27      	blt.n	8005ca6 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8005c56:	89fa      	ldrh	r2, [r7, #14]
 8005c58:	8a7b      	ldrh	r3, [r7, #18]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d804      	bhi.n	8005c68 <TP_Read_XY2+0x7c>
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
 8005c60:	3363      	adds	r3, #99	; 0x63
 8005c62:	8a7a      	ldrh	r2, [r7, #18]
 8005c64:	4293      	cmp	r3, r2
 8005c66:	da08      	bge.n	8005c7a <TP_Read_XY2+0x8e>
 8005c68:	8a7a      	ldrh	r2, [r7, #18]
 8005c6a:	89fb      	ldrh	r3, [r7, #14]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d81a      	bhi.n	8005ca6 <TP_Read_XY2+0xba>
 8005c70:	8a7b      	ldrh	r3, [r7, #18]
 8005c72:	3363      	adds	r3, #99	; 0x63
 8005c74:	89fa      	ldrh	r2, [r7, #14]
 8005c76:	4293      	cmp	r3, r2
 8005c78:	db15      	blt.n	8005ca6 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8005c7a:	8abb      	ldrh	r3, [r7, #20]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	8a3b      	ldrh	r3, [r7, #16]
 8005c80:	4413      	add	r3, r2
 8005c82:	0fda      	lsrs	r2, r3, #31
 8005c84:	4413      	add	r3, r2
 8005c86:	105b      	asrs	r3, r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8005c8e:	8a7b      	ldrh	r3, [r7, #18]
 8005c90:	461a      	mov	r2, r3
 8005c92:	89fb      	ldrh	r3, [r7, #14]
 8005c94:	4413      	add	r3, r2
 8005c96:	0fda      	lsrs	r2, r3, #31
 8005c98:	4413      	add	r3, r2
 8005c9a:	105b      	asrs	r3, r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	801a      	strh	r2, [r3, #0]
		return 1;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <TP_Read_XY2+0xbc>
	}else return 0;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	80fb      	strh	r3, [r7, #6]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	80bb      	strh	r3, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	3b0c      	subs	r3, #12
 8005cc6:	b298      	uxth	r0, r3
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	330d      	adds	r3, #13
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	88bc      	ldrh	r4, [r7, #4]
 8005cd0:	88b9      	ldrh	r1, [r7, #4]
 8005cd2:	887b      	ldrh	r3, [r7, #2]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	f7fd fe63 	bl	80039a2 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8005cdc:	88bb      	ldrh	r3, [r7, #4]
 8005cde:	3b0c      	subs	r3, #12
 8005ce0:	b299      	uxth	r1, r3
 8005ce2:	88bb      	ldrh	r3, [r7, #4]
 8005ce4:	330d      	adds	r3, #13
 8005ce6:	b29c      	uxth	r4, r3
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	88f8      	ldrh	r0, [r7, #6]
 8005cec:	887b      	ldrh	r3, [r7, #2]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4623      	mov	r3, r4
 8005cf2:	f7fd fe56 	bl	80039a2 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b298      	uxth	r0, r3
 8005cfc:	88bb      	ldrh	r3, [r7, #4]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	887a      	ldrh	r2, [r7, #2]
 8005d04:	4619      	mov	r1, r3
 8005d06:	f7fd fe35 	bl	8003974 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8005d0a:	88fb      	ldrh	r3, [r7, #6]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b298      	uxth	r0, r3
 8005d10:	88bb      	ldrh	r3, [r7, #4]
 8005d12:	3301      	adds	r3, #1
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	887a      	ldrh	r2, [r7, #2]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	f7fd fe2b 	bl	8003974 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	3301      	adds	r3, #1
 8005d22:	b298      	uxth	r0, r3
 8005d24:	88bb      	ldrh	r3, [r7, #4]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f7fd fe21 	bl	8003974 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b298      	uxth	r0, r3
 8005d38:	88bb      	ldrh	r3, [r7, #4]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	887a      	ldrh	r2, [r7, #2]
 8005d40:	4619      	mov	r1, r3
 8005d42:	f7fd fe17 	bl	8003974 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8005d46:	88f8      	ldrh	r0, [r7, #6]
 8005d48:	88b9      	ldrh	r1, [r7, #4]
 8005d4a:	887a      	ldrh	r2, [r7, #2]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2306      	movs	r3, #6
 8005d52:	f7fe fb48 	bl	80043e6 <lcd_DrawCircle>
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd90      	pop	{r4, r7, pc}
	...

08005d60 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8005d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d6e:	4843      	ldr	r0, [pc, #268]	; (8005e7c <TP_Scan+0x11c>)
 8005d70:	f002 f9b6 	bl	80080e0 <HAL_GPIO_ReadPin>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d157      	bne.n	8005e2a <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <TP_Scan+0x2a>
 8005d80:	493f      	ldr	r1, [pc, #252]	; (8005e80 <TP_Scan+0x120>)
 8005d82:	4840      	ldr	r0, [pc, #256]	; (8005e84 <TP_Scan+0x124>)
 8005d84:	f7ff ff32 	bl	8005bec <TP_Read_XY2>
 8005d88:	e03c      	b.n	8005e04 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8005d8a:	493d      	ldr	r1, [pc, #244]	; (8005e80 <TP_Scan+0x120>)
 8005d8c:	483d      	ldr	r0, [pc, #244]	; (8005e84 <TP_Scan+0x124>)
 8005d8e:	f7ff ff2d 	bl	8005bec <TP_Read_XY2>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d035      	beq.n	8005e04 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8005d98:	4b3b      	ldr	r3, [pc, #236]	; (8005e88 <TP_Scan+0x128>)
 8005d9a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005d9e:	4b3a      	ldr	r3, [pc, #232]	; (8005e88 <TP_Scan+0x128>)
 8005da0:	899b      	ldrh	r3, [r3, #12]
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dae:	4b36      	ldr	r3, [pc, #216]	; (8005e88 <TP_Scan+0x128>)
 8005db0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005db4:	ee07 3a90 	vmov	s15, r3
 8005db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc4:	ee17 3a90 	vmov	r3, s15
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <TP_Scan+0x128>)
 8005dcc:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <TP_Scan+0x128>)
 8005dd0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <TP_Scan+0x128>)
 8005dd6:	8adb      	ldrh	r3, [r3, #22]
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005de4:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <TP_Scan+0x128>)
 8005de6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfa:	ee17 3a90 	vmov	r3, s15
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	4b21      	ldr	r3, [pc, #132]	; (8005e88 <TP_Scan+0x128>)
 8005e02:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8005e04:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <TP_Scan+0x128>)
 8005e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	db2a      	blt.n	8005e66 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <TP_Scan+0x128>)
 8005e12:	22c0      	movs	r2, #192	; 0xc0
 8005e14:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <TP_Scan+0x128>)
 8005e1a:	899a      	ldrh	r2, [r3, #12]
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <TP_Scan+0x128>)
 8005e1e:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8005e20:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <TP_Scan+0x128>)
 8005e22:	8ada      	ldrh	r2, [r3, #22]
 8005e24:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <TP_Scan+0x128>)
 8005e26:	83da      	strh	r2, [r3, #30]
 8005e28:	e01d      	b.n	8005e66 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8005e2a:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <TP_Scan+0x128>)
 8005e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	da09      	bge.n	8005e4a <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <TP_Scan+0x128>)
 8005e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <TP_Scan+0x128>)
 8005e44:	f883 2020 	strb.w	r2, [r3, #32]
 8005e48:	e00d      	b.n	8005e66 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <TP_Scan+0x128>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8005e50:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <TP_Scan+0x128>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <TP_Scan+0x128>)
 8005e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e5c:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <TP_Scan+0x128>)
 8005e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e64:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <TP_Scan+0x128>)
 8005e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e70:	b2db      	uxtb	r3, r3
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40020800 	.word	0x40020800
 8005e80:	20000082 	.word	0x20000082
 8005e84:	20000078 	.word	0x20000078
 8005e88:	2000006c 	.word	0x2000006c

08005e8c <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005e90:	220e      	movs	r2, #14
 8005e92:	4905      	ldr	r1, [pc, #20]	; (8005ea8 <TP_Save_Adjdata+0x1c>)
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7fb f97f 	bl	8001198 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	200e      	movs	r0, #14
 8005e9e:	f7fb f91b 	bl	80010d8 <at24c_WriteOneByte>
}
 8005ea2:	bf00      	nop
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000090 	.word	0x20000090

08005eac <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8005eb6:	200e      	movs	r0, #14
 8005eb8:	f7fb f8f2 	bl	80010a0 <at24c_ReadOneByte>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005ec6:	220e      	movs	r2, #14
 8005ec8:	4905      	ldr	r1, [pc, #20]	; (8005ee0 <TP_Get_Adjdata+0x34>)
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f7fb f945 	bl	800115a <at24c_Read>
		return 1;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000090 	.word	0x20000090
 8005ee4:	00000000 	.word	0x00000000

08005ee8 <touch_Adjust>:


void touch_Adjust(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	; 0x38
 8005eec:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8005efa:	4b61      	ldr	r3, [pc, #388]	; (8006080 <touch_Adjust+0x198>)
 8005efc:	881a      	ldrh	r2, [r3, #0]
 8005efe:	4b60      	ldr	r3, [pc, #384]	; (8006080 <touch_Adjust+0x198>)
 8005f00:	885b      	ldrh	r3, [r3, #2]
 8005f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f06:	9100      	str	r1, [sp, #0]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f7fd fcfc 	bl	8003908 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8005f10:	2300      	movs	r3, #0
 8005f12:	9302      	str	r3, [sp, #8]
 8005f14:	2310      	movs	r3, #16
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f22:	4a58      	ldr	r2, [pc, #352]	; (8006084 <touch_Adjust+0x19c>)
 8005f24:	2128      	movs	r1, #40	; 0x28
 8005f26:	2005      	movs	r0, #5
 8005f28:	f7fe fac9 	bl	80044be <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	9302      	str	r3, [sp, #8]
 8005f30:	2310      	movs	r3, #16
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f3e:	4a52      	ldr	r2, [pc, #328]	; (8006088 <touch_Adjust+0x1a0>)
 8005f40:	2141      	movs	r1, #65	; 0x41
 8005f42:	2005      	movs	r0, #5
 8005f44:	f7fe fabb 	bl	80044be <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9302      	str	r3, [sp, #8]
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f5a:	4a4c      	ldr	r2, [pc, #304]	; (800608c <touch_Adjust+0x1a4>)
 8005f5c:	215a      	movs	r1, #90	; 0x5a
 8005f5e:	2005      	movs	r0, #5
 8005f60:	f7fe faad 	bl	80044be <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8005f64:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005f68:	2114      	movs	r1, #20
 8005f6a:	2014      	movs	r0, #20
 8005f6c:	f7ff fea0 	bl	8005cb0 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8005f70:	4b47      	ldr	r3, [pc, #284]	; (8006090 <touch_Adjust+0x1a8>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8005f78:	4b45      	ldr	r3, [pc, #276]	; (8006090 <touch_Adjust+0x1a8>)
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8005f80:	2032      	movs	r0, #50	; 0x32
 8005f82:	f000 fdc7 	bl	8006b14 <HAL_Delay>
		tp_dev.scan(1);
 8005f86:	4b42      	ldr	r3, [pc, #264]	; (8006090 <touch_Adjust+0x1a8>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8005f8e:	4b40      	ldr	r3, [pc, #256]	; (8006090 <touch_Adjust+0x1a8>)
 8005f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	f040 835e 	bne.w	800665a <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8005f9e:	4b3c      	ldr	r3, [pc, #240]	; (8006090 <touch_Adjust+0x1a8>)
 8005fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b39      	ldr	r3, [pc, #228]	; (8006090 <touch_Adjust+0x1a8>)
 8005fac:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8005fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fb4:	4a36      	ldr	r2, [pc, #216]	; (8006090 <touch_Adjust+0x1a8>)
 8005fb6:	8992      	ldrh	r2, [r2, #12]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8005fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fc8:	4a31      	ldr	r2, [pc, #196]	; (8006090 <touch_Adjust+0x1a8>)
 8005fca:	8ad2      	ldrh	r2, [r2, #22]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005fd2:	440b      	add	r3, r1
 8005fd4:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8005fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fdc:	3301      	adds	r3, #1
 8005fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8005fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d8c9      	bhi.n	8005f80 <touch_Adjust+0x98>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <touch_Adjust+0x10c>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	08006027 	.word	0x08006027
 8005ffc:	08006051 	.word	0x08006051
 8006000:	08006095 	.word	0x08006095
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8006004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006008:	2114      	movs	r1, #20
 800600a:	2014      	movs	r0, #20
 800600c:	f7ff fe50 	bl	8005cb0 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <touch_Adjust+0x198>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	3b14      	subs	r3, #20
 8006016:	b29b      	uxth	r3, r3
 8006018:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800601c:	2114      	movs	r1, #20
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fe46 	bl	8005cb0 <TP_Drow_Touch_Point>
					break;
 8006024:	e31a      	b.n	800665c <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <touch_Adjust+0x198>)
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	3b14      	subs	r3, #20
 800602c:	b29b      	uxth	r3, r3
 800602e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006032:	2114      	movs	r1, #20
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fe3b 	bl	8005cb0 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <touch_Adjust+0x198>)
 800603c:	885b      	ldrh	r3, [r3, #2]
 800603e:	3b14      	subs	r3, #20
 8006040:	b29b      	uxth	r3, r3
 8006042:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006046:	4619      	mov	r1, r3
 8006048:	2014      	movs	r0, #20
 800604a:	f7ff fe31 	bl	8005cb0 <TP_Drow_Touch_Point>
					break;
 800604e:	e305      	b.n	800665c <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <touch_Adjust+0x198>)
 8006052:	885b      	ldrh	r3, [r3, #2]
 8006054:	3b14      	subs	r3, #20
 8006056:	b29b      	uxth	r3, r3
 8006058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800605c:	4619      	mov	r1, r3
 800605e:	2014      	movs	r0, #20
 8006060:	f7ff fe26 	bl	8005cb0 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <touch_Adjust+0x198>)
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	3b14      	subs	r3, #20
 800606a:	b298      	uxth	r0, r3
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <touch_Adjust+0x198>)
 800606e:	885b      	ldrh	r3, [r3, #2]
 8006070:	3b14      	subs	r3, #20
 8006072:	b29b      	uxth	r3, r3
 8006074:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006078:	4619      	mov	r1, r3
 800607a:	f7ff fe19 	bl	8005cb0 <TP_Drow_Touch_Point>
					break;
 800607e:	e2ed      	b.n	800665c <touch_Adjust+0x774>
 8006080:	20000368 	.word	0x20000368
 8006084:	0800e7f0 	.word	0x0800e7f0
 8006088:	0800e80c 	.word	0x0800e80c
 800608c:	0800e824 	.word	0x0800e824
 8006090:	2000006c 	.word	0x2000006c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8006094:	883b      	ldrh	r3, [r7, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	88bb      	ldrh	r3, [r7, #4]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfb8      	it	lt
 80060a0:	425b      	neglt	r3, r3
 80060a2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	461a      	mov	r2, r3
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bfb8      	it	lt
 80060b0:	425b      	neglt	r3, r3
 80060b2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	fb03 f303 	mul.w	r3, r3, r3
 80060ba:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	fb03 f303 	mul.w	r3, r3, r3
 80060c2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80060c4:	6a3a      	ldr	r2, [r7, #32]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fa fa1a 	bl	8000504 <__aeabi_ui2d>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	ec43 2b10 	vmov	d0, r2, r3
 80060d8:	f007 fbe8 	bl	800d8ac <sqrt>
 80060dc:	ec53 2b10 	vmov	r2, r3, d0
 80060e0:	4610      	mov	r0, r2
 80060e2:	4619      	mov	r1, r3
 80060e4:	f7fa fd60 	bl	8000ba8 <__aeabi_d2uiz>
 80060e8:	4603      	mov	r3, r0
 80060ea:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	461a      	mov	r2, r3
 80060f0:	89bb      	ldrh	r3, [r7, #12]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bfb8      	it	lt
 80060f8:	425b      	neglt	r3, r3
 80060fa:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80060fc:	897b      	ldrh	r3, [r7, #10]
 80060fe:	461a      	mov	r2, r3
 8006100:	89fb      	ldrh	r3, [r7, #14]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfb8      	it	lt
 8006108:	425b      	neglt	r3, r3
 800610a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	fb03 f303 	mul.w	r3, r3, r3
 8006112:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	fb03 f303 	mul.w	r3, r3, r3
 800611a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f7fa f9ee 	bl	8000504 <__aeabi_ui2d>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	ec43 2b10 	vmov	d0, r2, r3
 8006130:	f007 fbbc 	bl	800d8ac <sqrt>
 8006134:	ec53 2b10 	vmov	r2, r3, d0
 8006138:	4610      	mov	r0, r2
 800613a:	4619      	mov	r1, r3
 800613c:	f7fa fd34 	bl	8000ba8 <__aeabi_d2uiz>
 8006140:	4603      	mov	r3, r0
 8006142:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8006144:	8b7b      	ldrh	r3, [r7, #26]
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800614e:	8b3b      	ldrh	r3, [r7, #24]
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006158:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800615c:	ee16 0a90 	vmov	r0, s13
 8006160:	f7fa f9f2 	bl	8000548 <__aeabi_f2d>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 800616c:	a384      	add	r3, pc, #528	; (adr r3, 8006380 <touch_Adjust+0x498>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006176:	f7fa fcb1 	bl	8000adc <__aeabi_dcmplt>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10f      	bne.n	80061a0 <touch_Adjust+0x2b8>
 8006180:	a381      	add	r3, pc, #516	; (adr r3, 8006388 <touch_Adjust+0x4a0>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800618a:	f7fa fcc5 	bl	8000b18 <__aeabi_dcmpgt>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <touch_Adjust+0x2b8>
 8006194:	8b7b      	ldrh	r3, [r7, #26]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <touch_Adjust+0x2b8>
 800619a:	8b3b      	ldrh	r3, [r7, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d136      	bne.n	800620e <touch_Adjust+0x326>
					{
						cnt=0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80061a6:	4b7a      	ldr	r3, [pc, #488]	; (8006390 <touch_Adjust+0x4a8>)
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	3b14      	subs	r3, #20
 80061ac:	b298      	uxth	r0, r3
 80061ae:	4b78      	ldr	r3, [pc, #480]	; (8006390 <touch_Adjust+0x4a8>)
 80061b0:	885b      	ldrh	r3, [r3, #2]
 80061b2:	3b14      	subs	r3, #20
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061ba:	4619      	mov	r1, r3
 80061bc:	f7ff fd78 	bl	8005cb0 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80061c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80061c4:	2114      	movs	r1, #20
 80061c6:	2014      	movs	r0, #20
 80061c8:	f7ff fd72 	bl	8005cb0 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80061cc:	2300      	movs	r3, #0
 80061ce:	9302      	str	r3, [sp, #8]
 80061d0:	2310      	movs	r3, #16
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80061de:	4a6d      	ldr	r2, [pc, #436]	; (8006394 <touch_Adjust+0x4ac>)
 80061e0:	2128      	movs	r1, #40	; 0x28
 80061e2:	2005      	movs	r0, #5
 80061e4:	f7fe f96b 	bl	80044be <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80061e8:	2300      	movs	r3, #0
 80061ea:	9302      	str	r3, [sp, #8]
 80061ec:	2310      	movs	r3, #16
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80061fa:	4a67      	ldr	r2, [pc, #412]	; (8006398 <touch_Adjust+0x4b0>)
 80061fc:	213c      	movs	r1, #60	; 0x3c
 80061fe:	2005      	movs	r0, #5
 8006200:	f7fe f95d 	bl	80044be <lcd_ShowStr>
						HAL_Delay(1000);
 8006204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006208:	f000 fc84 	bl	8006b14 <HAL_Delay>
 						continue;
 800620c:	e226      	b.n	800665c <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 800620e:	883b      	ldrh	r3, [r7, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	893b      	ldrh	r3, [r7, #8]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	bfb8      	it	lt
 800621a:	425b      	neglt	r3, r3
 800621c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 800621e:	887b      	ldrh	r3, [r7, #2]
 8006220:	461a      	mov	r2, r3
 8006222:	897b      	ldrh	r3, [r7, #10]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	bfb8      	it	lt
 800622a:	425b      	neglt	r3, r3
 800622c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	fb03 f303 	mul.w	r3, r3, r3
 8006234:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	fb03 f303 	mul.w	r3, r3, r3
 800623c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f7fa f95d 	bl	8000504 <__aeabi_ui2d>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	ec43 2b10 	vmov	d0, r2, r3
 8006252:	f007 fb2b 	bl	800d8ac <sqrt>
 8006256:	ec53 2b10 	vmov	r2, r3, d0
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	f7fa fca3 	bl	8000ba8 <__aeabi_d2uiz>
 8006262:	4603      	mov	r3, r0
 8006264:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8006266:	88bb      	ldrh	r3, [r7, #4]
 8006268:	461a      	mov	r2, r3
 800626a:	89bb      	ldrh	r3, [r7, #12]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	bfb8      	it	lt
 8006272:	425b      	neglt	r3, r3
 8006274:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	461a      	mov	r2, r3
 800627a:	89fb      	ldrh	r3, [r7, #14]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	bfb8      	it	lt
 8006282:	425b      	neglt	r3, r3
 8006284:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	fb03 f303 	mul.w	r3, r3, r3
 800628c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	fb03 f303 	mul.w	r3, r3, r3
 8006294:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8006296:	6a3a      	ldr	r2, [r7, #32]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa f931 	bl	8000504 <__aeabi_ui2d>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	ec43 2b10 	vmov	d0, r2, r3
 80062aa:	f007 faff 	bl	800d8ac <sqrt>
 80062ae:	ec53 2b10 	vmov	r2, r3, d0
 80062b2:	4610      	mov	r0, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	f7fa fc77 	bl	8000ba8 <__aeabi_d2uiz>
 80062ba:	4603      	mov	r3, r0
 80062bc:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80062be:	8b7b      	ldrh	r3, [r7, #26]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062c8:	8b3b      	ldrh	r3, [r7, #24]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80062d6:	ee16 0a90 	vmov	r0, s13
 80062da:	f7fa f935 	bl	8000548 <__aeabi_f2d>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80062e6:	a326      	add	r3, pc, #152	; (adr r3, 8006380 <touch_Adjust+0x498>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062f0:	f7fa fbf4 	bl	8000adc <__aeabi_dcmplt>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <touch_Adjust+0x426>
 80062fa:	a323      	add	r3, pc, #140	; (adr r3, 8006388 <touch_Adjust+0x4a0>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006304:	f7fa fc08 	bl	8000b18 <__aeabi_dcmpgt>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d046      	beq.n	800639c <touch_Adjust+0x4b4>
					{
						cnt=0;
 800630e:	2300      	movs	r3, #0
 8006310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8006314:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <touch_Adjust+0x4a8>)
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	3b14      	subs	r3, #20
 800631a:	b298      	uxth	r0, r3
 800631c:	4b1c      	ldr	r3, [pc, #112]	; (8006390 <touch_Adjust+0x4a8>)
 800631e:	885b      	ldrh	r3, [r3, #2]
 8006320:	3b14      	subs	r3, #20
 8006322:	b29b      	uxth	r3, r3
 8006324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006328:	4619      	mov	r1, r3
 800632a:	f7ff fcc1 	bl	8005cb0 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800632e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006332:	2114      	movs	r1, #20
 8006334:	2014      	movs	r0, #20
 8006336:	f7ff fcbb 	bl	8005cb0 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800633a:	2300      	movs	r3, #0
 800633c:	9302      	str	r3, [sp, #8]
 800633e:	2310      	movs	r3, #16
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800634c:	4a11      	ldr	r2, [pc, #68]	; (8006394 <touch_Adjust+0x4ac>)
 800634e:	2128      	movs	r1, #40	; 0x28
 8006350:	2005      	movs	r0, #5
 8006352:	f7fe f8b4 	bl	80044be <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8006356:	2300      	movs	r3, #0
 8006358:	9302      	str	r3, [sp, #8]
 800635a:	2310      	movs	r3, #16
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006368:	4a0b      	ldr	r2, [pc, #44]	; (8006398 <touch_Adjust+0x4b0>)
 800636a:	213c      	movs	r1, #60	; 0x3c
 800636c:	2005      	movs	r0, #5
 800636e:	f7fe f8a6 	bl	80044be <lcd_ShowStr>
						HAL_Delay(1000);
 8006372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006376:	f000 fbcd 	bl	8006b14 <HAL_Delay>
						continue;
 800637a:	e16f      	b.n	800665c <touch_Adjust+0x774>
 800637c:	f3af 8000 	nop.w
 8006380:	66666666 	.word	0x66666666
 8006384:	3fee6666 	.word	0x3fee6666
 8006388:	cccccccd 	.word	0xcccccccd
 800638c:	3ff0cccc 	.word	0x3ff0cccc
 8006390:	20000368 	.word	0x20000368
 8006394:	0800e838 	.word	0x0800e838
 8006398:	0800e858 	.word	0x0800e858
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 800639c:	88bb      	ldrh	r3, [r7, #4]
 800639e:	461a      	mov	r2, r3
 80063a0:	893b      	ldrh	r3, [r7, #8]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bfb8      	it	lt
 80063a8:	425b      	neglt	r3, r3
 80063aa:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	461a      	mov	r2, r3
 80063b0:	897b      	ldrh	r3, [r7, #10]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bfb8      	it	lt
 80063b8:	425b      	neglt	r3, r3
 80063ba:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	fb03 f303 	mul.w	r3, r3, r3
 80063c2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	fb03 f303 	mul.w	r3, r3, r3
 80063ca:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80063cc:	6a3a      	ldr	r2, [r7, #32]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fa f896 	bl	8000504 <__aeabi_ui2d>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	ec43 2b10 	vmov	d0, r2, r3
 80063e0:	f007 fa64 	bl	800d8ac <sqrt>
 80063e4:	ec53 2b10 	vmov	r2, r3, d0
 80063e8:	4610      	mov	r0, r2
 80063ea:	4619      	mov	r1, r3
 80063ec:	f7fa fbdc 	bl	8000ba8 <__aeabi_d2uiz>
 80063f0:	4603      	mov	r3, r0
 80063f2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 80063f4:	883b      	ldrh	r3, [r7, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	89bb      	ldrh	r3, [r7, #12]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bfb8      	it	lt
 8006400:	425b      	neglt	r3, r3
 8006402:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8006404:	887b      	ldrh	r3, [r7, #2]
 8006406:	461a      	mov	r2, r3
 8006408:	89fb      	ldrh	r3, [r7, #14]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	bfb8      	it	lt
 8006410:	425b      	neglt	r3, r3
 8006412:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	fb03 f303 	mul.w	r3, r3, r3
 800641a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	fb03 f303 	mul.w	r3, r3, r3
 8006422:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f7fa f86a 	bl	8000504 <__aeabi_ui2d>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	ec43 2b10 	vmov	d0, r2, r3
 8006438:	f007 fa38 	bl	800d8ac <sqrt>
 800643c:	ec53 2b10 	vmov	r2, r3, d0
 8006440:	4610      	mov	r0, r2
 8006442:	4619      	mov	r1, r3
 8006444:	f7fa fbb0 	bl	8000ba8 <__aeabi_d2uiz>
 8006448:	4603      	mov	r3, r0
 800644a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800644c:	8b7b      	ldrh	r3, [r7, #26]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006456:	8b3b      	ldrh	r3, [r7, #24]
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006460:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006464:	ee16 0a90 	vmov	r0, s13
 8006468:	f7fa f86e 	bl	8000548 <__aeabi_f2d>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8006474:	a383      	add	r3, pc, #524	; (adr r3, 8006684 <touch_Adjust+0x79c>)
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800647e:	f7fa fb2d 	bl	8000adc <__aeabi_dcmplt>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <touch_Adjust+0x5b4>
 8006488:	a380      	add	r3, pc, #512	; (adr r3, 800668c <touch_Adjust+0x7a4>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006492:	f7fa fb41 	bl	8000b18 <__aeabi_dcmpgt>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d036      	beq.n	800650a <touch_Adjust+0x622>
					{
						cnt=0;
 800649c:	2300      	movs	r3, #0
 800649e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80064a2:	4b71      	ldr	r3, [pc, #452]	; (8006668 <touch_Adjust+0x780>)
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	3b14      	subs	r3, #20
 80064a8:	b298      	uxth	r0, r3
 80064aa:	4b6f      	ldr	r3, [pc, #444]	; (8006668 <touch_Adjust+0x780>)
 80064ac:	885b      	ldrh	r3, [r3, #2]
 80064ae:	3b14      	subs	r3, #20
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064b6:	4619      	mov	r1, r3
 80064b8:	f7ff fbfa 	bl	8005cb0 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80064bc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80064c0:	2114      	movs	r1, #20
 80064c2:	2014      	movs	r0, #20
 80064c4:	f7ff fbf4 	bl	8005cb0 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80064c8:	2300      	movs	r3, #0
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	2310      	movs	r3, #16
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80064da:	4a64      	ldr	r2, [pc, #400]	; (800666c <touch_Adjust+0x784>)
 80064dc:	2128      	movs	r1, #40	; 0x28
 80064de:	2005      	movs	r0, #5
 80064e0:	f7fd ffed 	bl	80044be <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80064e4:	2300      	movs	r3, #0
 80064e6:	9302      	str	r3, [sp, #8]
 80064e8:	2310      	movs	r3, #16
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80064f6:	4a5e      	ldr	r2, [pc, #376]	; (8006670 <touch_Adjust+0x788>)
 80064f8:	213c      	movs	r1, #60	; 0x3c
 80064fa:	2005      	movs	r0, #5
 80064fc:	f7fd ffdf 	bl	80044be <lcd_ShowStr>

						HAL_Delay(1000);
 8006500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006504:	f000 fb06 	bl	8006b14 <HAL_Delay>
 							continue;
 8006508:	e0a8      	b.n	800665c <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 800650a:	4b57      	ldr	r3, [pc, #348]	; (8006668 <touch_Adjust+0x780>)
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	3b28      	subs	r3, #40	; 0x28
 8006510:	ee07 3a90 	vmov	s15, r3
 8006514:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006518:	88bb      	ldrh	r3, [r7, #4]
 800651a:	461a      	mov	r2, r3
 800651c:	883b      	ldrh	r3, [r7, #0]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800652c:	4b51      	ldr	r3, [pc, #324]	; (8006674 <touch_Adjust+0x78c>)
 800652e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8006532:	4b4d      	ldr	r3, [pc, #308]	; (8006668 <touch_Adjust+0x780>)
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800653e:	4b4d      	ldr	r3, [pc, #308]	; (8006674 <touch_Adjust+0x78c>)
 8006540:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8006544:	88bb      	ldrh	r3, [r7, #4]
 8006546:	461a      	mov	r2, r3
 8006548:	883b      	ldrh	r3, [r7, #0]
 800654a:	4413      	add	r3, r2
 800654c:	ee07 3a90 	vmov	s15, r3
 8006550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006558:	ee37 7a67 	vsub.f32	s14, s14, s15
 800655c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006568:	ee17 3a90 	vmov	r3, s15
 800656c:	b21a      	sxth	r2, r3
 800656e:	4b41      	ldr	r3, [pc, #260]	; (8006674 <touch_Adjust+0x78c>)
 8006570:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8006572:	4b3d      	ldr	r3, [pc, #244]	; (8006668 <touch_Adjust+0x780>)
 8006574:	885b      	ldrh	r3, [r3, #2]
 8006576:	3b28      	subs	r3, #40	; 0x28
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006580:	897b      	ldrh	r3, [r7, #10]
 8006582:	461a      	mov	r2, r3
 8006584:	887b      	ldrh	r3, [r7, #2]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006594:	4b37      	ldr	r3, [pc, #220]	; (8006674 <touch_Adjust+0x78c>)
 8006596:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 800659a:	4b33      	ldr	r3, [pc, #204]	; (8006668 <touch_Adjust+0x780>)
 800659c:	885b      	ldrh	r3, [r3, #2]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065a6:	4b33      	ldr	r3, [pc, #204]	; (8006674 <touch_Adjust+0x78c>)
 80065a8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80065ac:	897b      	ldrh	r3, [r7, #10]
 80065ae:	461a      	mov	r2, r3
 80065b0:	887b      	ldrh	r3, [r7, #2]
 80065b2:	4413      	add	r3, r2
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80065c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065d0:	ee17 3a90 	vmov	r3, s15
 80065d4:	b21a      	sxth	r2, r3
 80065d6:	4b27      	ldr	r3, [pc, #156]	; (8006674 <touch_Adjust+0x78c>)
 80065d8:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80065da:	4b23      	ldr	r3, [pc, #140]	; (8006668 <touch_Adjust+0x780>)
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	3b14      	subs	r3, #20
 80065e0:	b298      	uxth	r0, r3
 80065e2:	4b21      	ldr	r3, [pc, #132]	; (8006668 <touch_Adjust+0x780>)
 80065e4:	885b      	ldrh	r3, [r3, #2]
 80065e6:	3b14      	subs	r3, #20
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065ee:	4619      	mov	r1, r3
 80065f0:	f7ff fb5e 	bl	8005cb0 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 80065f4:	2300      	movs	r3, #0
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	2310      	movs	r3, #16
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006606:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <touch_Adjust+0x790>)
 8006608:	2128      	movs	r1, #40	; 0x28
 800660a:	2005      	movs	r0, #5
 800660c:	f7fd ff57 	bl	80044be <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8006610:	2300      	movs	r3, #0
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	2310      	movs	r3, #16
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006622:	4a16      	ldr	r2, [pc, #88]	; (800667c <touch_Adjust+0x794>)
 8006624:	213c      	movs	r1, #60	; 0x3c
 8006626:	2005      	movs	r0, #5
 8006628:	f7fd ff49 	bl	80044be <lcd_ShowStr>
					HAL_Delay(1000);
 800662c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006630:	f000 fa70 	bl	8006b14 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8006634:	2300      	movs	r3, #0
 8006636:	9302      	str	r3, [sp, #8]
 8006638:	2310      	movs	r3, #16
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006646:	4a0e      	ldr	r2, [pc, #56]	; (8006680 <touch_Adjust+0x798>)
 8006648:	2128      	movs	r1, #40	; 0x28
 800664a:	2005      	movs	r0, #5
 800664c:	f7fd ff37 	bl	80044be <lcd_ShowStr>
					TP_Save_Adjdata();
 8006650:	f7ff fc1c 	bl	8005e8c <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8006654:	f7ff fc2a 	bl	8005eac <TP_Get_Adjdata>
					return;
 8006658:	e001      	b.n	800665e <touch_Adjust+0x776>
			}
		}
 800665a:	bf00      	nop
		HAL_Delay(50);
 800665c:	e490      	b.n	8005f80 <touch_Adjust+0x98>
 	}
}
 800665e:	3728      	adds	r7, #40	; 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	f3af 8000 	nop.w
 8006668:	20000368 	.word	0x20000368
 800666c:	0800e838 	.word	0x0800e838
 8006670:	0800e858 	.word	0x0800e858
 8006674:	2000006c 	.word	0x2000006c
 8006678:	0800e878 	.word	0x0800e878
 800667c:	0800e898 	.word	0x0800e898
 8006680:	0800e8b8 	.word	0x0800e8b8
 8006684:	66666666 	.word	0x66666666
 8006688:	3fee6666 	.word	0x3fee6666
 800668c:	cccccccd 	.word	0xcccccccd
 8006690:	3ff0cccc 	.word	0x3ff0cccc

08006694 <touch_init>:

void touch_init(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8006698:	4904      	ldr	r1, [pc, #16]	; (80066ac <touch_init+0x18>)
 800669a:	4805      	ldr	r0, [pc, #20]	; (80066b0 <touch_init+0x1c>)
 800669c:	f7ff fa84 	bl	8005ba8 <TP_Read_XY>
	at24c_init();
 80066a0:	f7fa fcf8 	bl	8001094 <at24c_init>
	TP_Get_Adjdata();
 80066a4:	f7ff fc02 	bl	8005eac <TP_Get_Adjdata>
}
 80066a8:	bf00      	nop
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000082 	.word	0x20000082
 80066b0:	20000078 	.word	0x20000078

080066b4 <touch_Scan>:

void touch_Scan(){
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80066b8:	4b02      	ldr	r3, [pc, #8]	; (80066c4 <touch_Scan+0x10>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2000      	movs	r0, #0
 80066be:	4798      	blx	r3
}
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	2000006c 	.word	0x2000006c

080066c8 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 80066cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066d0:	4805      	ldr	r0, [pc, #20]	; (80066e8 <touch_IsTouched+0x20>)
 80066d2:	f001 fd05 	bl	80080e0 <HAL_GPIO_ReadPin>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40020800 	.word	0x40020800

080066ec <touch_GetX>:

uint16_t touch_GetX(){
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <touch_GetX+0x14>)
 80066f2:	899b      	ldrh	r3, [r3, #12]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	2000006c 	.word	0x2000006c

08006704 <touch_GetY>:

uint16_t touch_GetY(){
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <touch_GetY+0x14>)
 800670a:	8adb      	ldrh	r3, [r3, #22]
}
 800670c:	4618      	mov	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	2000006c 	.word	0x2000006c

0800671c <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006720:	2201      	movs	r2, #1
 8006722:	4906      	ldr	r1, [pc, #24]	; (800673c <uart_init_esp+0x20>)
 8006724:	4806      	ldr	r0, [pc, #24]	; (8006740 <uart_init_esp+0x24>)
 8006726:	f004 ffc2 	bl	800b6ae <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, 1);
 800672a:	2201      	movs	r2, #1
 800672c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006730:	4804      	ldr	r0, [pc, #16]	; (8006744 <uart_init_esp+0x28>)
 8006732:	f001 fced 	bl	8008110 <HAL_GPIO_WritePin>
}
 8006736:	bf00      	nop
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	2000019d 	.word	0x2000019d
 8006740:	20000584 	.word	0x20000584
 8006744:	40021400 	.word	0x40021400

08006748 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8006754:	887a      	ldrh	r2, [r7, #2]
 8006756:	230a      	movs	r3, #10
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4803      	ldr	r0, [pc, #12]	; (8006768 <uart_EspSendBytes+0x20>)
 800675c:	f004 ff15 	bl	800b58a <HAL_UART_Transmit>
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000584 	.word	0x20000584

0800676c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a11      	ldr	r2, [pc, #68]	; (80067c0 <HAL_UART_RxCpltCallback+0x54>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10a      	bne.n	8006794 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800677e:	230a      	movs	r3, #10
 8006780:	2201      	movs	r2, #1
 8006782:	4910      	ldr	r1, [pc, #64]	; (80067c4 <HAL_UART_RxCpltCallback+0x58>)
 8006784:	4810      	ldr	r0, [pc, #64]	; (80067c8 <HAL_UART_RxCpltCallback+0x5c>)
 8006786:	f004 ff00 	bl	800b58a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800678a:	2201      	movs	r2, #1
 800678c:	490d      	ldr	r1, [pc, #52]	; (80067c4 <HAL_UART_RxCpltCallback+0x58>)
 800678e:	480e      	ldr	r0, [pc, #56]	; (80067c8 <HAL_UART_RxCpltCallback+0x5c>)
 8006790:	f004 ff8d 	bl	800b6ae <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a0c      	ldr	r2, [pc, #48]	; (80067cc <HAL_UART_RxCpltCallback+0x60>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10b      	bne.n	80067b6 <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <HAL_UART_RxCpltCallback+0x64>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b4f      	cmp	r3, #79	; 0x4f
 80067a4:	d102      	bne.n	80067ac <HAL_UART_RxCpltCallback+0x40>
 80067a6:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <HAL_UART_RxCpltCallback+0x68>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
		//else if(receive_buffer2 == 'a') light_status = 0;
		//else if(receive_buffer2 == 'A') light_status = 1;
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80067ac:	2201      	movs	r2, #1
 80067ae:	4908      	ldr	r1, [pc, #32]	; (80067d0 <HAL_UART_RxCpltCallback+0x64>)
 80067b0:	4809      	ldr	r0, [pc, #36]	; (80067d8 <HAL_UART_RxCpltCallback+0x6c>)
 80067b2:	f004 ff7c 	bl	800b6ae <HAL_UART_Receive_IT>
	}
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40011000 	.word	0x40011000
 80067c4:	2000019c 	.word	0x2000019c
 80067c8:	20000540 	.word	0x20000540
 80067cc:	40004400 	.word	0x40004400
 80067d0:	2000019d 	.word	0x2000019d
 80067d4:	2000019e 	.word	0x2000019e
 80067d8:	20000584 	.word	0x20000584

080067dc <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067e0:	4b11      	ldr	r3, [pc, #68]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <MX_USART1_UART_Init+0x50>)
 80067e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067e6:	4b10      	ldr	r3, [pc, #64]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 80067e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067ee:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067f4:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067fa:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006800:	4b09      	ldr	r3, [pc, #36]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 8006802:	220c      	movs	r2, #12
 8006804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006806:	4b08      	ldr	r3, [pc, #32]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 8006808:	2200      	movs	r2, #0
 800680a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 800680e:	2200      	movs	r2, #0
 8006810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006812:	4805      	ldr	r0, [pc, #20]	; (8006828 <MX_USART1_UART_Init+0x4c>)
 8006814:	f004 fe6c 	bl	800b4f0 <HAL_UART_Init>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800681e:	f7fe f84f 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006822:	bf00      	nop
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000540 	.word	0x20000540
 800682c:	40011000 	.word	0x40011000

08006830 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006834:	4b11      	ldr	r3, [pc, #68]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006836:	4a12      	ldr	r2, [pc, #72]	; (8006880 <MX_USART2_UART_Init+0x50>)
 8006838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800683a:	4b10      	ldr	r3, [pc, #64]	; (800687c <MX_USART2_UART_Init+0x4c>)
 800683c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006842:	4b0e      	ldr	r3, [pc, #56]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <MX_USART2_UART_Init+0x4c>)
 800684a:	2200      	movs	r2, #0
 800684c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006850:	2200      	movs	r2, #0
 8006852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006854:	4b09      	ldr	r3, [pc, #36]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006856:	220c      	movs	r2, #12
 8006858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800685a:	4b08      	ldr	r3, [pc, #32]	; (800687c <MX_USART2_UART_Init+0x4c>)
 800685c:	2200      	movs	r2, #0
 800685e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006862:	2200      	movs	r2, #0
 8006864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006866:	4805      	ldr	r0, [pc, #20]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006868:	f004 fe42 	bl	800b4f0 <HAL_UART_Init>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006872:	f7fe f825 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006876:	bf00      	nop
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000584 	.word	0x20000584
 8006880:	40004400 	.word	0x40004400

08006884 <user_init>:
 *      Author: Duyen
 */

#include "user.h"

void user_init(){
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
	memset(name, '\0', sizeof(name));	// Ten nguoi choi nhap vao
 8006888:	220b      	movs	r2, #11
 800688a:	2100      	movs	r1, #0
 800688c:	480d      	ldr	r0, [pc, #52]	; (80068c4 <user_init+0x40>)
 800688e:	f005 ff0b 	bl	800c6a8 <memset>
	name_length = 0;					// Do dai ten nguoi choi
 8006892:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <user_init+0x44>)
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
	current_score = 0;					// Diem hien tai cua nguoi choi
 8006898:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <user_init+0x48>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
	current_temp = 0.0;					// Nhiet do hien tai
 800689e:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <user_init+0x4c>)
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
	current_hum = 0;					// Do am hien tai
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <user_init+0x50>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	801a      	strh	r2, [r3, #0]
	current_light = 0;					// Anh sang hien tai
 80068ac:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <user_init+0x54>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	801a      	strh	r2, [r3, #0]
	current_time = 0;					// Tong thoi gian choi hien tai
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <user_init+0x58>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
	flag_user = FLAG_NOTSTART;			// Trang thai nguoi choi
 80068b8:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <user_init+0x5c>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000144 	.word	0x20000144
 80068c8:	2000014f 	.word	0x2000014f
 80068cc:	20000000 	.word	0x20000000
 80068d0:	20000004 	.word	0x20000004
 80068d4:	20000008 	.word	0x20000008
 80068d8:	2000000a 	.word	0x2000000a
 80068dc:	20000150 	.word	0x20000150
 80068e0:	20000154 	.word	0x20000154

080068e4 <user_history>:

void user_history(){
 80068e4:	b590      	push	{r4, r7, lr}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
	flag_user = FLAG_END;
 80068ea:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <user_history+0xe4>)
 80068ec:	2202      	movs	r2, #2
 80068ee:	701a      	strb	r2, [r3, #0]
	if(num_history == 0){
 80068f0:	4b36      	ldr	r3, [pc, #216]	; (80069cc <user_history+0xe8>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10f      	bne.n	8006918 <user_history+0x34>
		strcpy(history[0].name, name);
 80068f8:	4935      	ldr	r1, [pc, #212]	; (80069d0 <user_history+0xec>)
 80068fa:	4836      	ldr	r0, [pc, #216]	; (80069d4 <user_history+0xf0>)
 80068fc:	f005 ff1c 	bl	800c738 <strcpy>
		history[0].score = current_score;
 8006900:	4b35      	ldr	r3, [pc, #212]	; (80069d8 <user_history+0xf4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	b29a      	uxth	r2, r3
 8006906:	4b33      	ldr	r3, [pc, #204]	; (80069d4 <user_history+0xf0>)
 8006908:	819a      	strh	r2, [r3, #12]
		num_history++;
 800690a:	4b30      	ldr	r3, [pc, #192]	; (80069cc <user_history+0xe8>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	3301      	adds	r3, #1
 8006910:	b2da      	uxtb	r2, r3
 8006912:	4b2e      	ldr	r3, [pc, #184]	; (80069cc <user_history+0xe8>)
 8006914:	701a      	strb	r2, [r3, #0]
		return;
 8006916:	e054      	b.n	80069c2 <user_history+0xde>
	}
	uint8_t i;
	for(i = num_history; i > 0; i--){
 8006918:	4b2c      	ldr	r3, [pc, #176]	; (80069cc <user_history+0xe8>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	71fb      	strb	r3, [r7, #7]
 800691e:	e029      	b.n	8006974 <user_history+0x90>
		if(history[i - 1].score < current_score){
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	1e5a      	subs	r2, r3, #1
 8006924:	492b      	ldr	r1, [pc, #172]	; (80069d4 <user_history+0xf0>)
 8006926:	4613      	mov	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	440b      	add	r3, r1
 8006930:	330c      	adds	r3, #12
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	4b28      	ldr	r3, [pc, #160]	; (80069d8 <user_history+0xf4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d21e      	bcs.n	800697c <user_history+0x98>
			history[i] = history[i - 1];
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	1e5a      	subs	r2, r3, #1
 8006942:	79f9      	ldrb	r1, [r7, #7]
 8006944:	4823      	ldr	r0, [pc, #140]	; (80069d4 <user_history+0xf0>)
 8006946:	460b      	mov	r3, r1
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	1a5b      	subs	r3, r3, r1
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4418      	add	r0, r3
 8006950:	4920      	ldr	r1, [pc, #128]	; (80069d4 <user_history+0xf0>)
 8006952:	4613      	mov	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	18ca      	adds	r2, r1, r3
 800695c:	4603      	mov	r3, r0
 800695e:	6814      	ldr	r4, [r2, #0]
 8006960:	6850      	ldr	r0, [r2, #4]
 8006962:	6891      	ldr	r1, [r2, #8]
 8006964:	601c      	str	r4, [r3, #0]
 8006966:	6058      	str	r0, [r3, #4]
 8006968:	6099      	str	r1, [r3, #8]
 800696a:	8992      	ldrh	r2, [r2, #12]
 800696c:	819a      	strh	r2, [r3, #12]
	for(i = num_history; i > 0; i--){
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	3b01      	subs	r3, #1
 8006972:	71fb      	strb	r3, [r7, #7]
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1d2      	bne.n	8006920 <user_history+0x3c>
 800697a:	e000      	b.n	800697e <user_history+0x9a>
		}else{
			break;
 800697c:	bf00      	nop
		}
	}
	strcpy(history[i].name, name);
 800697e:	79fa      	ldrb	r2, [r7, #7]
 8006980:	4613      	mov	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <user_history+0xf0>)
 800698a:	4413      	add	r3, r2
 800698c:	4910      	ldr	r1, [pc, #64]	; (80069d0 <user_history+0xec>)
 800698e:	4618      	mov	r0, r3
 8006990:	f005 fed2 	bl	800c738 <strcpy>
	history[i].score = current_score;
 8006994:	4b10      	ldr	r3, [pc, #64]	; (80069d8 <user_history+0xf4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	79fa      	ldrb	r2, [r7, #7]
 800699a:	b298      	uxth	r0, r3
 800699c:	490d      	ldr	r1, [pc, #52]	; (80069d4 <user_history+0xf0>)
 800699e:	4613      	mov	r3, r2
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	440b      	add	r3, r1
 80069a8:	330c      	adds	r3, #12
 80069aa:	4602      	mov	r2, r0
 80069ac:	801a      	strh	r2, [r3, #0]
	if(num_history < MAX_HISTORY){
 80069ae:	4b07      	ldr	r3, [pc, #28]	; (80069cc <user_history+0xe8>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d805      	bhi.n	80069c2 <user_history+0xde>
		num_history++;
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <user_history+0xe8>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	4b03      	ldr	r3, [pc, #12]	; (80069cc <user_history+0xe8>)
 80069c0:	701a      	strb	r2, [r3, #0]
	}
}
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd90      	pop	{r4, r7, pc}
 80069c8:	20000154 	.word	0x20000154
 80069cc:	20000140 	.word	0x20000140
 80069d0:	20000144 	.word	0x20000144
 80069d4:	20000288 	.word	0x20000288
 80069d8:	20000000 	.word	0x20000000

080069dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80069dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80069e0:	480d      	ldr	r0, [pc, #52]	; (8006a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80069e2:	490e      	ldr	r1, [pc, #56]	; (8006a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80069e4:	4a0e      	ldr	r2, [pc, #56]	; (8006a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80069e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069e8:	e002      	b.n	80069f0 <LoopCopyDataInit>

080069ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069ee:	3304      	adds	r3, #4

080069f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069f4:	d3f9      	bcc.n	80069ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069f6:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80069f8:	4c0b      	ldr	r4, [pc, #44]	; (8006a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80069fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069fc:	e001      	b.n	8006a02 <LoopFillZerobss>

080069fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a00:	3204      	adds	r2, #4

08006a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a04:	d3fb      	bcc.n	80069fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a06:	f7fe fea5 	bl	8005754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a0a:	f005 fe0f 	bl	800c62c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a0e:	f7fd fe93 	bl	8004738 <main>
  bx  lr    
 8006a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a1c:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8006a20:	080e9e48 	.word	0x080e9e48
  ldr r2, =_sbss
 8006a24:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8006a28:	200005dc 	.word	0x200005dc

08006a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a2c:	e7fe      	b.n	8006a2c <ADC_IRQHandler>
	...

08006a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a34:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <HAL_Init+0x40>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a0d      	ldr	r2, [pc, #52]	; (8006a70 <HAL_Init+0x40>)
 8006a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_Init+0x40>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <HAL_Init+0x40>)
 8006a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a4c:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <HAL_Init+0x40>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <HAL_Init+0x40>)
 8006a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a58:	2003      	movs	r0, #3
 8006a5a:	f000 fd61 	bl	8007520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a5e:	200f      	movs	r0, #15
 8006a60:	f000 f808 	bl	8006a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a64:	f7fe faa4 	bl	8004fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40023c00 	.word	0x40023c00

08006a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a7c:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <HAL_InitTick+0x54>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_InitTick+0x58>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	4619      	mov	r1, r3
 8006a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fd79 	bl	800758a <HAL_SYSTICK_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e00e      	b.n	8006ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b0f      	cmp	r3, #15
 8006aa6:	d80a      	bhi.n	8006abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	f000 fd41 	bl	8007536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ab4:	4a06      	ldr	r2, [pc, #24]	; (8006ad0 <HAL_InitTick+0x5c>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e000      	b.n	8006ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000068 	.word	0x20000068
 8006acc:	200000a8 	.word	0x200000a8
 8006ad0:	200000a4 	.word	0x200000a4

08006ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <HAL_IncTick+0x20>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <HAL_IncTick+0x24>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <HAL_IncTick+0x24>)
 8006ae6:	6013      	str	r3, [r2, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	200000a8 	.word	0x200000a8
 8006af8:	200005c8 	.word	0x200005c8

08006afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return uwTick;
 8006b00:	4b03      	ldr	r3, [pc, #12]	; (8006b10 <HAL_GetTick+0x14>)
 8006b02:	681b      	ldr	r3, [r3, #0]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	200005c8 	.word	0x200005c8

08006b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b1c:	f7ff ffee 	bl	8006afc <HAL_GetTick>
 8006b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d005      	beq.n	8006b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <HAL_Delay+0x44>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b3a:	bf00      	nop
 8006b3c:	f7ff ffde 	bl	8006afc <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d8f7      	bhi.n	8006b3c <HAL_Delay+0x28>
  {
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200000a8 	.word	0x200000a8

08006b5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e033      	b.n	8006bda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fe fa40 	bl	8005000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d118      	bne.n	8006bcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ba2:	f023 0302 	bic.w	r3, r3, #2
 8006ba6:	f043 0202 	orr.w	r2, r3, #2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa68 	bl	8007084 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	f043 0201 	orr.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8006bca:	e001      	b.n	8006bd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_ADC_Start_DMA+0x1e>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e0e9      	b.n	8006dd6 <HAL_ADC_Start_DMA+0x1f2>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d018      	beq.n	8006c4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006c28:	4b6d      	ldr	r3, [pc, #436]	; (8006de0 <HAL_ADC_Start_DMA+0x1fc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6d      	ldr	r2, [pc, #436]	; (8006de4 <HAL_ADC_Start_DMA+0x200>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	0c9a      	lsrs	r2, r3, #18
 8006c34:	4613      	mov	r3, r2
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c3c:	e002      	b.n	8006c44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f9      	bne.n	8006c3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c58:	d107      	bne.n	8006c6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	f040 80a1 	bne.w	8006dbc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ca4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb8:	d106      	bne.n	8006cc8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	f023 0206 	bic.w	r2, r3, #6
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8006cc6:	e002      	b.n	8006cce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006cd6:	4b44      	ldr	r3, [pc, #272]	; (8006de8 <HAL_ADC_Start_DMA+0x204>)
 8006cd8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	4a43      	ldr	r2, [pc, #268]	; (8006dec <HAL_ADC_Start_DMA+0x208>)
 8006ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	4a42      	ldr	r2, [pc, #264]	; (8006df0 <HAL_ADC_Start_DMA+0x20c>)
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	4a41      	ldr	r2, [pc, #260]	; (8006df4 <HAL_ADC_Start_DMA+0x210>)
 8006cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006d0a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d1a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	334c      	adds	r3, #76	; 0x4c
 8006d26:	4619      	mov	r1, r3
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f000 fce8 	bl	8007700 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d12a      	bne.n	8006d92 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2d      	ldr	r2, [pc, #180]	; (8006df8 <HAL_ADC_Start_DMA+0x214>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d015      	beq.n	8006d72 <HAL_ADC_Start_DMA+0x18e>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a2c      	ldr	r2, [pc, #176]	; (8006dfc <HAL_ADC_Start_DMA+0x218>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d105      	bne.n	8006d5c <HAL_ADC_Start_DMA+0x178>
 8006d50:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <HAL_ADC_Start_DMA+0x204>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <HAL_ADC_Start_DMA+0x21c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d136      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
 8006d66:	4b20      	ldr	r3, [pc, #128]	; (8006de8 <HAL_ADC_Start_DMA+0x204>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d130      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d129      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d8e:	609a      	str	r2, [r3, #8]
 8006d90:	e020      	b.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <HAL_ADC_Start_DMA+0x214>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d11b      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d114      	bne.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006db8:	609a      	str	r2, [r3, #8]
 8006dba:	e00b      	b.n	8006dd4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	f043 0210 	orr.w	r2, r3, #16
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dcc:	f043 0201 	orr.w	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000068 	.word	0x20000068
 8006de4:	431bde83 	.word	0x431bde83
 8006de8:	40012300 	.word	0x40012300
 8006dec:	0800727d 	.word	0x0800727d
 8006df0:	08007337 	.word	0x08007337
 8006df4:	08007353 	.word	0x08007353
 8006df8:	40012000 	.word	0x40012000
 8006dfc:	40012100 	.word	0x40012100
 8006e00:	40012200 	.word	0x40012200

08006e04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_ADC_ConfigChannel+0x1c>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e105      	b.n	8007068 <HAL_ADC_ConfigChannel+0x228>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b09      	cmp	r3, #9
 8006e6a:	d925      	bls.n	8006eb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68d9      	ldr	r1, [r3, #12]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	4413      	add	r3, r2
 8006e80:	3b1e      	subs	r3, #30
 8006e82:	2207      	movs	r2, #7
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	43da      	mvns	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	400a      	ands	r2, r1
 8006e90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68d9      	ldr	r1, [r3, #12]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	4403      	add	r3, r0
 8006eaa:	3b1e      	subs	r3, #30
 8006eac:	409a      	lsls	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	e022      	b.n	8006efe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6919      	ldr	r1, [r3, #16]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	4413      	add	r3, r2
 8006ecc:	2207      	movs	r2, #7
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	43da      	mvns	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	400a      	ands	r2, r1
 8006eda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6919      	ldr	r1, [r3, #16]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	4618      	mov	r0, r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4403      	add	r3, r0
 8006ef4:	409a      	lsls	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d824      	bhi.n	8006f50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	3b05      	subs	r3, #5
 8006f18:	221f      	movs	r2, #31
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	400a      	ands	r2, r1
 8006f26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4618      	mov	r0, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	3b05      	subs	r3, #5
 8006f42:	fa00 f203 	lsl.w	r2, r0, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8006f4e:	e04c      	b.n	8006fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d824      	bhi.n	8006fa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	3b23      	subs	r3, #35	; 0x23
 8006f6a:	221f      	movs	r2, #31
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	43da      	mvns	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	400a      	ands	r2, r1
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	4618      	mov	r0, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	3b23      	subs	r3, #35	; 0x23
 8006f94:	fa00 f203 	lsl.w	r2, r0, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006fa0:	e023      	b.n	8006fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3b41      	subs	r3, #65	; 0x41
 8006fb4:	221f      	movs	r2, #31
 8006fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fba:	43da      	mvns	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	400a      	ands	r2, r1
 8006fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	3b41      	subs	r3, #65	; 0x41
 8006fde:	fa00 f203 	lsl.w	r2, r0, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fea:	4b22      	ldr	r3, [pc, #136]	; (8007074 <HAL_ADC_ConfigChannel+0x234>)
 8006fec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a21      	ldr	r2, [pc, #132]	; (8007078 <HAL_ADC_ConfigChannel+0x238>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d109      	bne.n	800700c <HAL_ADC_ConfigChannel+0x1cc>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b12      	cmp	r3, #18
 8006ffe:	d105      	bne.n	800700c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a19      	ldr	r2, [pc, #100]	; (8007078 <HAL_ADC_ConfigChannel+0x238>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d123      	bne.n	800705e <HAL_ADC_ConfigChannel+0x21e>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b10      	cmp	r3, #16
 800701c:	d003      	beq.n	8007026 <HAL_ADC_ConfigChannel+0x1e6>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b11      	cmp	r3, #17
 8007024:	d11b      	bne.n	800705e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b10      	cmp	r3, #16
 8007038:	d111      	bne.n	800705e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800703a:	4b10      	ldr	r3, [pc, #64]	; (800707c <HAL_ADC_ConfigChannel+0x23c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a10      	ldr	r2, [pc, #64]	; (8007080 <HAL_ADC_ConfigChannel+0x240>)
 8007040:	fba2 2303 	umull	r2, r3, r2, r3
 8007044:	0c9a      	lsrs	r2, r3, #18
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007050:	e002      	b.n	8007058 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	3b01      	subs	r3, #1
 8007056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f9      	bne.n	8007052 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40012300 	.word	0x40012300
 8007078:	40012000 	.word	0x40012000
 800707c:	20000068 	.word	0x20000068
 8007080:	431bde83 	.word	0x431bde83

08007084 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800708c:	4b79      	ldr	r3, [pc, #484]	; (8007274 <ADC_Init+0x1f0>)
 800708e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6859      	ldr	r1, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	021a      	lsls	r2, r3, #8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80070dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6859      	ldr	r1, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6899      	ldr	r1, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	4a58      	ldr	r2, [pc, #352]	; (8007278 <ADC_Init+0x1f4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d022      	beq.n	8007162 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800712a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6899      	ldr	r1, [r3, #8]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800714c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6899      	ldr	r1, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	609a      	str	r2, [r3, #8]
 8007160:	e00f      	b.n	8007182 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007180:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0202 	bic.w	r2, r2, #2
 8007190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7e1b      	ldrb	r3, [r3, #24]
 800719c:	005a      	lsls	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01b      	beq.n	80071e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80071ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6859      	ldr	r1, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	3b01      	subs	r3, #1
 80071dc:	035a      	lsls	r2, r3, #13
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	e007      	b.n	80071f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	3b01      	subs	r3, #1
 8007214:	051a      	lsls	r2, r3, #20
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800722c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6899      	ldr	r1, [r3, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800723a:	025a      	lsls	r2, r3, #9
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6899      	ldr	r1, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	029a      	lsls	r2, r3, #10
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	609a      	str	r2, [r3, #8]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	40012300 	.word	0x40012300
 8007278:	0f000001 	.word	0x0f000001

0800727c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007292:	2b00      	cmp	r3, #0
 8007294:	d13c      	bne.n	8007310 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d12b      	bne.n	8007308 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d127      	bne.n	8007308 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d006      	beq.n	80072d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d119      	bne.n	8007308 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0220 	bic.w	r2, r2, #32
 80072e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d105      	bne.n	8007308 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	f043 0201 	orr.w	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff fd7b 	bl	8006e04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800730e:	e00e      	b.n	800732e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fd85 	bl	8006e2c <HAL_ADC_ErrorCallback>
}
 8007322:	e004      	b.n	800732e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff fd67 	bl	8006e18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2240      	movs	r2, #64	; 0x40
 8007364:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	f043 0204 	orr.w	r2, r3, #4
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff fd5a 	bl	8006e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007390:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <__NVIC_SetPriorityGrouping+0x44>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800739c:	4013      	ands	r3, r2
 800739e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <__NVIC_SetPriorityGrouping+0x44>)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	60d3      	str	r3, [r2, #12]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	e000ed00 	.word	0xe000ed00

080073c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073cc:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <__NVIC_GetPriorityGrouping+0x18>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	0a1b      	lsrs	r3, r3, #8
 80073d2:	f003 0307 	and.w	r3, r3, #7
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	e000ed00 	.word	0xe000ed00

080073e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	db0b      	blt.n	800740e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	f003 021f 	and.w	r2, r3, #31
 80073fc:	4907      	ldr	r1, [pc, #28]	; (800741c <__NVIC_EnableIRQ+0x38>)
 80073fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	2001      	movs	r0, #1
 8007406:	fa00 f202 	lsl.w	r2, r0, r2
 800740a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	e000e100 	.word	0xe000e100

08007420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800742c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007430:	2b00      	cmp	r3, #0
 8007432:	db0a      	blt.n	800744a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	b2da      	uxtb	r2, r3
 8007438:	490c      	ldr	r1, [pc, #48]	; (800746c <__NVIC_SetPriority+0x4c>)
 800743a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800743e:	0112      	lsls	r2, r2, #4
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	440b      	add	r3, r1
 8007444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007448:	e00a      	b.n	8007460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	b2da      	uxtb	r2, r3
 800744e:	4908      	ldr	r1, [pc, #32]	; (8007470 <__NVIC_SetPriority+0x50>)
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	3b04      	subs	r3, #4
 8007458:	0112      	lsls	r2, r2, #4
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	440b      	add	r3, r1
 800745e:	761a      	strb	r2, [r3, #24]
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	e000e100 	.word	0xe000e100
 8007470:	e000ed00 	.word	0xe000ed00

08007474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007474:	b480      	push	{r7}
 8007476:	b089      	sub	sp, #36	; 0x24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	f1c3 0307 	rsb	r3, r3, #7
 800748e:	2b04      	cmp	r3, #4
 8007490:	bf28      	it	cs
 8007492:	2304      	movcs	r3, #4
 8007494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	3304      	adds	r3, #4
 800749a:	2b06      	cmp	r3, #6
 800749c:	d902      	bls.n	80074a4 <NVIC_EncodePriority+0x30>
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	3b03      	subs	r3, #3
 80074a2:	e000      	b.n	80074a6 <NVIC_EncodePriority+0x32>
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074a8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	43da      	mvns	r2, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	401a      	ands	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074bc:	f04f 31ff 	mov.w	r1, #4294967295
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	fa01 f303 	lsl.w	r3, r1, r3
 80074c6:	43d9      	mvns	r1, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074cc:	4313      	orrs	r3, r2
         );
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3724      	adds	r7, #36	; 0x24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074ec:	d301      	bcc.n	80074f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074ee:	2301      	movs	r3, #1
 80074f0:	e00f      	b.n	8007512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074f2:	4a0a      	ldr	r2, [pc, #40]	; (800751c <SysTick_Config+0x40>)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074fa:	210f      	movs	r1, #15
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	f7ff ff8e 	bl	8007420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <SysTick_Config+0x40>)
 8007506:	2200      	movs	r2, #0
 8007508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800750a:	4b04      	ldr	r3, [pc, #16]	; (800751c <SysTick_Config+0x40>)
 800750c:	2207      	movs	r2, #7
 800750e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	e000e010 	.word	0xe000e010

08007520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff ff29 	bl	8007380 <__NVIC_SetPriorityGrouping>
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	4603      	mov	r3, r0
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007548:	f7ff ff3e 	bl	80073c8 <__NVIC_GetPriorityGrouping>
 800754c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	6978      	ldr	r0, [r7, #20]
 8007554:	f7ff ff8e 	bl	8007474 <NVIC_EncodePriority>
 8007558:	4602      	mov	r2, r0
 800755a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800755e:	4611      	mov	r1, r2
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff ff5d 	bl	8007420 <__NVIC_SetPriority>
}
 8007566:	bf00      	nop
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	4603      	mov	r3, r0
 8007576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff ff31 	bl	80073e4 <__NVIC_EnableIRQ>
}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff ffa2 	bl	80074dc <SysTick_Config>
 8007598:	4603      	mov	r3, r0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80075b0:	f7ff faa4 	bl	8006afc <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e099      	b.n	80076f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075e0:	e00f      	b.n	8007602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075e2:	f7ff fa8b 	bl	8006afc <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b05      	cmp	r3, #5
 80075ee:	d908      	bls.n	8007602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2203      	movs	r2, #3
 80075fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e078      	b.n	80076f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e8      	bne.n	80075e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4b38      	ldr	r3, [pc, #224]	; (80076fc <HAL_DMA_Init+0x158>)
 800761c:	4013      	ands	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800762e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800763a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b04      	cmp	r3, #4
 800765a:	d107      	bne.n	800766c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	4313      	orrs	r3, r2
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4313      	orrs	r3, r2
 800766a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f023 0307 	bic.w	r3, r3, #7
 8007682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	4313      	orrs	r3, r2
 800768c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	2b04      	cmp	r3, #4
 8007694:	d117      	bne.n	80076c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00e      	beq.n	80076c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb01 	bl	8007cb0 <DMA_CheckFifoParam>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2240      	movs	r2, #64	; 0x40
 80076b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80076c2:	2301      	movs	r3, #1
 80076c4:	e016      	b.n	80076f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fab8 	bl	8007c44 <DMA_CalcBaseAndBitshift>
 80076d4:	4603      	mov	r3, r0
 80076d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076dc:	223f      	movs	r2, #63	; 0x3f
 80076de:	409a      	lsls	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	f010803f 	.word	0xf010803f

08007700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_DMA_Start_IT+0x26>
 8007722:	2302      	movs	r3, #2
 8007724:	e040      	b.n	80077a8 <HAL_DMA_Start_IT+0xa8>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b01      	cmp	r3, #1
 8007738:	d12f      	bne.n	800779a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fa4a 	bl	8007be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007758:	223f      	movs	r2, #63	; 0x3f
 800775a:	409a      	lsls	r2, r3
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0216 	orr.w	r2, r2, #22
 800776e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0208 	orr.w	r2, r2, #8
 8007786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e005      	b.n	80077a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80077a2:	2302      	movs	r3, #2
 80077a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80077be:	f7ff f99d 	bl	8006afc <HAL_GetTick>
 80077c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d008      	beq.n	80077e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2280      	movs	r2, #128	; 0x80
 80077d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e052      	b.n	8007888 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0216 	bic.w	r2, r2, #22
 80077f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007800:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <HAL_DMA_Abort+0x62>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0208 	bic.w	r2, r2, #8
 8007820:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0201 	bic.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007832:	e013      	b.n	800785c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007834:	f7ff f962 	bl	8006afc <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b05      	cmp	r3, #5
 8007840:	d90c      	bls.n	800785c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2203      	movs	r2, #3
 800784c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e015      	b.n	8007888 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e4      	bne.n	8007834 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786e:	223f      	movs	r2, #63	; 0x3f
 8007870:	409a      	lsls	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d004      	beq.n	80078ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2280      	movs	r2, #128	; 0x80
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e00c      	b.n	80078c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2205      	movs	r2, #5
 80078b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078e0:	4b92      	ldr	r3, [pc, #584]	; (8007b2c <HAL_DMA_IRQHandler+0x258>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a92      	ldr	r2, [pc, #584]	; (8007b30 <HAL_DMA_IRQHandler+0x25c>)
 80078e6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ea:	0a9b      	lsrs	r3, r3, #10
 80078ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fe:	2208      	movs	r2, #8
 8007900:	409a      	lsls	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4013      	ands	r3, r2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01a      	beq.n	8007940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d013      	beq.n	8007940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0204 	bic.w	r2, r2, #4
 8007926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792c:	2208      	movs	r2, #8
 800792e:	409a      	lsls	r2, r3
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007938:	f043 0201 	orr.w	r2, r3, #1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007944:	2201      	movs	r2, #1
 8007946:	409a      	lsls	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d012      	beq.n	8007976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007962:	2201      	movs	r2, #1
 8007964:	409a      	lsls	r2, r3
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	f043 0202 	orr.w	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797a:	2204      	movs	r2, #4
 800797c:	409a      	lsls	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4013      	ands	r3, r2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d012      	beq.n	80079ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007998:	2204      	movs	r2, #4
 800799a:	409a      	lsls	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a4:	f043 0204 	orr.w	r2, r3, #4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b0:	2210      	movs	r2, #16
 80079b2:	409a      	lsls	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d043      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d03c      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ce:	2210      	movs	r2, #16
 80079d0:	409a      	lsls	r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d018      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d108      	bne.n	8007a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d024      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	e01f      	b.n	8007a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01b      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
 8007a14:	e016      	b.n	8007a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d107      	bne.n	8007a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0208 	bic.w	r2, r2, #8
 8007a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a48:	2220      	movs	r2, #32
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 808e 	beq.w	8007b72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8086 	beq.w	8007b72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	409a      	lsls	r2, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b05      	cmp	r3, #5
 8007a7c:	d136      	bne.n	8007aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0216 	bic.w	r2, r2, #22
 8007a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	695a      	ldr	r2, [r3, #20]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <HAL_DMA_IRQHandler+0x1da>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d007      	beq.n	8007abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0208 	bic.w	r2, r2, #8
 8007abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac2:	223f      	movs	r2, #63	; 0x3f
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d07d      	beq.n	8007bde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
        }
        return;
 8007aea:	e078      	b.n	8007bde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01c      	beq.n	8007b34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d108      	bne.n	8007b1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d030      	beq.n	8007b72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4798      	blx	r3
 8007b18:	e02b      	b.n	8007b72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d027      	beq.n	8007b72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
 8007b2a:	e022      	b.n	8007b72 <HAL_DMA_IRQHandler+0x29e>
 8007b2c:	20000068 	.word	0x20000068
 8007b30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10f      	bne.n	8007b62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0210 	bic.w	r2, r2, #16
 8007b50:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d032      	beq.n	8007be0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d022      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2205      	movs	r2, #5
 8007b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	60bb      	str	r3, [r7, #8]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d307      	bcc.n	8007bba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f2      	bne.n	8007b9e <HAL_DMA_IRQHandler+0x2ca>
 8007bb8:	e000      	b.n	8007bbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007bba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
 8007bdc:	e000      	b.n	8007be0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007bde:	bf00      	nop
    }
  }
}
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop

08007be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d108      	bne.n	8007c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007c26:	e007      	b.n	8007c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	60da      	str	r2, [r3, #12]
}
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	3b10      	subs	r3, #16
 8007c54:	4a14      	ldr	r2, [pc, #80]	; (8007ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8007c56:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5a:	091b      	lsrs	r3, r3, #4
 8007c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007c5e:	4a13      	ldr	r2, [pc, #76]	; (8007cac <DMA_CalcBaseAndBitshift+0x68>)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d909      	bls.n	8007c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c7a:	f023 0303 	bic.w	r3, r3, #3
 8007c7e:	1d1a      	adds	r2, r3, #4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	659a      	str	r2, [r3, #88]	; 0x58
 8007c84:	e007      	b.n	8007c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c8e:	f023 0303 	bic.w	r3, r3, #3
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	aaaaaaab 	.word	0xaaaaaaab
 8007cac:	080e9c7c 	.word	0x080e9c7c

08007cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d11f      	bne.n	8007d0a <DMA_CheckFifoParam+0x5a>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d856      	bhi.n	8007d7e <DMA_CheckFifoParam+0xce>
 8007cd0:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <DMA_CheckFifoParam+0x28>)
 8007cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd6:	bf00      	nop
 8007cd8:	08007ce9 	.word	0x08007ce9
 8007cdc:	08007cfb 	.word	0x08007cfb
 8007ce0:	08007ce9 	.word	0x08007ce9
 8007ce4:	08007d7f 	.word	0x08007d7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d046      	beq.n	8007d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cf8:	e043      	b.n	8007d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d02:	d140      	bne.n	8007d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d08:	e03d      	b.n	8007d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d12:	d121      	bne.n	8007d58 <DMA_CheckFifoParam+0xa8>
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d837      	bhi.n	8007d8a <DMA_CheckFifoParam+0xda>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <DMA_CheckFifoParam+0x70>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d37 	.word	0x08007d37
 8007d28:	08007d31 	.word	0x08007d31
 8007d2c:	08007d49 	.word	0x08007d49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
      break;
 8007d34:	e030      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d025      	beq.n	8007d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d46:	e022      	b.n	8007d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d50:	d11f      	bne.n	8007d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007d56:	e01c      	b.n	8007d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d903      	bls.n	8007d66 <DMA_CheckFifoParam+0xb6>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d003      	beq.n	8007d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007d64:	e018      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6a:	e015      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00e      	beq.n	8007d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d7c:	e00b      	b.n	8007d96 <DMA_CheckFifoParam+0xe6>
      break;
 8007d7e:	bf00      	nop
 8007d80:	e00a      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
      break;
 8007d82:	bf00      	nop
 8007d84:	e008      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
      break;
 8007d86:	bf00      	nop
 8007d88:	e006      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
      break;
 8007d8a:	bf00      	nop
 8007d8c:	e004      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
      break;
 8007d8e:	bf00      	nop
 8007d90:	e002      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8007d92:	bf00      	nop
 8007d94:	e000      	b.n	8007d98 <DMA_CheckFifoParam+0xe8>
      break;
 8007d96:	bf00      	nop
    }
  } 
  
  return status; 
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop

08007da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b089      	sub	sp, #36	; 0x24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	61fb      	str	r3, [r7, #28]
 8007dc2:	e16b      	b.n	800809c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	f040 815a 	bne.w	8008096 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d005      	beq.n	8007dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d130      	bne.n	8007e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	2203      	movs	r2, #3
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e30:	2201      	movs	r2, #1
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	43db      	mvns	r3, r3
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	091b      	lsrs	r3, r3, #4
 8007e46:	f003 0201 	and.w	r2, r3, #1
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d017      	beq.n	8007e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	2203      	movs	r2, #3
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d123      	bne.n	8007eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	08da      	lsrs	r2, r3, #3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3208      	adds	r2, #8
 8007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	220f      	movs	r2, #15
 8007ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	08da      	lsrs	r2, r3, #3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3208      	adds	r2, #8
 8007ee6:	69b9      	ldr	r1, [r7, #24]
 8007ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8007efc:	43db      	mvns	r3, r3
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	4013      	ands	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f003 0203 	and.w	r2, r3, #3
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80b4 	beq.w	8008096 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	4b60      	ldr	r3, [pc, #384]	; (80080b4 <HAL_GPIO_Init+0x30c>)
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	4a5f      	ldr	r2, [pc, #380]	; (80080b4 <HAL_GPIO_Init+0x30c>)
 8007f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f3e:	4b5d      	ldr	r3, [pc, #372]	; (80080b4 <HAL_GPIO_Init+0x30c>)
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f4a:	4a5b      	ldr	r2, [pc, #364]	; (80080b8 <HAL_GPIO_Init+0x310>)
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	089b      	lsrs	r3, r3, #2
 8007f50:	3302      	adds	r3, #2
 8007f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	220f      	movs	r2, #15
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	43db      	mvns	r3, r3
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a52      	ldr	r2, [pc, #328]	; (80080bc <HAL_GPIO_Init+0x314>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d02b      	beq.n	8007fce <HAL_GPIO_Init+0x226>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a51      	ldr	r2, [pc, #324]	; (80080c0 <HAL_GPIO_Init+0x318>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d025      	beq.n	8007fca <HAL_GPIO_Init+0x222>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a50      	ldr	r2, [pc, #320]	; (80080c4 <HAL_GPIO_Init+0x31c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d01f      	beq.n	8007fc6 <HAL_GPIO_Init+0x21e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a4f      	ldr	r2, [pc, #316]	; (80080c8 <HAL_GPIO_Init+0x320>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d019      	beq.n	8007fc2 <HAL_GPIO_Init+0x21a>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a4e      	ldr	r2, [pc, #312]	; (80080cc <HAL_GPIO_Init+0x324>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d013      	beq.n	8007fbe <HAL_GPIO_Init+0x216>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a4d      	ldr	r2, [pc, #308]	; (80080d0 <HAL_GPIO_Init+0x328>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00d      	beq.n	8007fba <HAL_GPIO_Init+0x212>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a4c      	ldr	r2, [pc, #304]	; (80080d4 <HAL_GPIO_Init+0x32c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d007      	beq.n	8007fb6 <HAL_GPIO_Init+0x20e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a4b      	ldr	r2, [pc, #300]	; (80080d8 <HAL_GPIO_Init+0x330>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d101      	bne.n	8007fb2 <HAL_GPIO_Init+0x20a>
 8007fae:	2307      	movs	r3, #7
 8007fb0:	e00e      	b.n	8007fd0 <HAL_GPIO_Init+0x228>
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	e00c      	b.n	8007fd0 <HAL_GPIO_Init+0x228>
 8007fb6:	2306      	movs	r3, #6
 8007fb8:	e00a      	b.n	8007fd0 <HAL_GPIO_Init+0x228>
 8007fba:	2305      	movs	r3, #5
 8007fbc:	e008      	b.n	8007fd0 <HAL_GPIO_Init+0x228>
 8007fbe:	2304      	movs	r3, #4
 8007fc0:	e006      	b.n	8007fd0 <HAL_GPIO_Init+0x228>
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e004      	b.n	8007fd0 <HAL_GPIO_Init+0x228>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e002      	b.n	8007fd0 <HAL_GPIO_Init+0x228>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <HAL_GPIO_Init+0x228>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	f002 0203 	and.w	r2, r2, #3
 8007fd6:	0092      	lsls	r2, r2, #2
 8007fd8:	4093      	lsls	r3, r2
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fe0:	4935      	ldr	r1, [pc, #212]	; (80080b8 <HAL_GPIO_Init+0x310>)
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	089b      	lsrs	r3, r3, #2
 8007fe6:	3302      	adds	r3, #2
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007fee:	4b3b      	ldr	r3, [pc, #236]	; (80080dc <HAL_GPIO_Init+0x334>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4313      	orrs	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008012:	4a32      	ldr	r2, [pc, #200]	; (80080dc <HAL_GPIO_Init+0x334>)
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008018:	4b30      	ldr	r3, [pc, #192]	; (80080dc <HAL_GPIO_Init+0x334>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	43db      	mvns	r3, r3
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	4013      	ands	r3, r2
 8008026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800803c:	4a27      	ldr	r2, [pc, #156]	; (80080dc <HAL_GPIO_Init+0x334>)
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008042:	4b26      	ldr	r3, [pc, #152]	; (80080dc <HAL_GPIO_Init+0x334>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	43db      	mvns	r3, r3
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	4013      	ands	r3, r2
 8008050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4313      	orrs	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008066:	4a1d      	ldr	r2, [pc, #116]	; (80080dc <HAL_GPIO_Init+0x334>)
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800806c:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <HAL_GPIO_Init+0x334>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	43db      	mvns	r3, r3
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	4013      	ands	r3, r2
 800807a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008090:	4a12      	ldr	r2, [pc, #72]	; (80080dc <HAL_GPIO_Init+0x334>)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3301      	adds	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	f67f ae90 	bls.w	8007dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	3724      	adds	r7, #36	; 0x24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	40013800 	.word	0x40013800
 80080bc:	40020000 	.word	0x40020000
 80080c0:	40020400 	.word	0x40020400
 80080c4:	40020800 	.word	0x40020800
 80080c8:	40020c00 	.word	0x40020c00
 80080cc:	40021000 	.word	0x40021000
 80080d0:	40021400 	.word	0x40021400
 80080d4:	40021800 	.word	0x40021800
 80080d8:	40021c00 	.word	0x40021c00
 80080dc:	40013c00 	.word	0x40013c00

080080e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	887b      	ldrh	r3, [r7, #2]
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
 80080fc:	e001      	b.n	8008102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	807b      	strh	r3, [r7, #2]
 800811c:	4613      	mov	r3, r2
 800811e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008120:	787b      	ldrb	r3, [r7, #1]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008126:	887a      	ldrh	r2, [r7, #2]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800812c:	e003      	b.n	8008136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800812e:	887b      	ldrh	r3, [r7, #2]
 8008130:	041a      	lsls	r2, r3, #16
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	619a      	str	r2, [r3, #24]
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e12b      	b.n	80083ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fc ffdc 	bl	8005128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2224      	movs	r2, #36	; 0x24
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80081a8:	f001 fbd8 	bl	800995c <HAL_RCC_GetPCLK1Freq>
 80081ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	4a81      	ldr	r2, [pc, #516]	; (80083b8 <HAL_I2C_Init+0x274>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d807      	bhi.n	80081c8 <HAL_I2C_Init+0x84>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4a80      	ldr	r2, [pc, #512]	; (80083bc <HAL_I2C_Init+0x278>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	bf94      	ite	ls
 80081c0:	2301      	movls	r3, #1
 80081c2:	2300      	movhi	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	e006      	b.n	80081d6 <HAL_I2C_Init+0x92>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a7d      	ldr	r2, [pc, #500]	; (80083c0 <HAL_I2C_Init+0x27c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	bf94      	ite	ls
 80081d0:	2301      	movls	r3, #1
 80081d2:	2300      	movhi	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e0e7      	b.n	80083ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4a78      	ldr	r2, [pc, #480]	; (80083c4 <HAL_I2C_Init+0x280>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	0c9b      	lsrs	r3, r3, #18
 80081e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	4a6a      	ldr	r2, [pc, #424]	; (80083b8 <HAL_I2C_Init+0x274>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d802      	bhi.n	8008218 <HAL_I2C_Init+0xd4>
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	3301      	adds	r3, #1
 8008216:	e009      	b.n	800822c <HAL_I2C_Init+0xe8>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	4a69      	ldr	r2, [pc, #420]	; (80083c8 <HAL_I2C_Init+0x284>)
 8008224:	fba2 2303 	umull	r2, r3, r2, r3
 8008228:	099b      	lsrs	r3, r3, #6
 800822a:	3301      	adds	r3, #1
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	430b      	orrs	r3, r1
 8008232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800823e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	495c      	ldr	r1, [pc, #368]	; (80083b8 <HAL_I2C_Init+0x274>)
 8008248:	428b      	cmp	r3, r1
 800824a:	d819      	bhi.n	8008280 <HAL_I2C_Init+0x13c>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	1e59      	subs	r1, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	fbb1 f3f3 	udiv	r3, r1, r3
 800825a:	1c59      	adds	r1, r3, #1
 800825c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008260:	400b      	ands	r3, r1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <HAL_I2C_Init+0x138>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	1e59      	subs	r1, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	fbb1 f3f3 	udiv	r3, r1, r3
 8008274:	3301      	adds	r3, #1
 8008276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800827a:	e051      	b.n	8008320 <HAL_I2C_Init+0x1dc>
 800827c:	2304      	movs	r3, #4
 800827e:	e04f      	b.n	8008320 <HAL_I2C_Init+0x1dc>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d111      	bne.n	80082ac <HAL_I2C_Init+0x168>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	1e58      	subs	r0, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6859      	ldr	r1, [r3, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	440b      	add	r3, r1
 8008296:	fbb0 f3f3 	udiv	r3, r0, r3
 800829a:	3301      	adds	r3, #1
 800829c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bf0c      	ite	eq
 80082a4:	2301      	moveq	r3, #1
 80082a6:	2300      	movne	r3, #0
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	e012      	b.n	80082d2 <HAL_I2C_Init+0x18e>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1e58      	subs	r0, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	0099      	lsls	r1, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	fbb0 f3f3 	udiv	r3, r0, r3
 80082c2:	3301      	adds	r3, #1
 80082c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bf0c      	ite	eq
 80082cc:	2301      	moveq	r3, #1
 80082ce:	2300      	movne	r3, #0
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_I2C_Init+0x196>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e022      	b.n	8008320 <HAL_I2C_Init+0x1dc>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10e      	bne.n	8008300 <HAL_I2C_Init+0x1bc>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	1e58      	subs	r0, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6859      	ldr	r1, [r3, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	440b      	add	r3, r1
 80082f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80082f4:	3301      	adds	r3, #1
 80082f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082fe:	e00f      	b.n	8008320 <HAL_I2C_Init+0x1dc>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	1e58      	subs	r0, r3, #1
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6859      	ldr	r1, [r3, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	0099      	lsls	r1, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	fbb0 f3f3 	udiv	r3, r0, r3
 8008316:	3301      	adds	r3, #1
 8008318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800831c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	6809      	ldr	r1, [r1, #0]
 8008324:	4313      	orrs	r3, r2
 8008326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800834e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6911      	ldr	r1, [r2, #16]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	68d2      	ldr	r2, [r2, #12]
 800835a:	4311      	orrs	r1, r2
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	430b      	orrs	r3, r1
 8008362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	695a      	ldr	r2, [r3, #20]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0201 	orr.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	000186a0 	.word	0x000186a0
 80083bc:	001e847f 	.word	0x001e847f
 80083c0:	003d08ff 	.word	0x003d08ff
 80083c4:	431bde83 	.word	0x431bde83
 80083c8:	10624dd3 	.word	0x10624dd3

080083cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af02      	add	r7, sp, #8
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	4608      	mov	r0, r1
 80083d6:	4611      	mov	r1, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	4603      	mov	r3, r0
 80083dc:	817b      	strh	r3, [r7, #10]
 80083de:	460b      	mov	r3, r1
 80083e0:	813b      	strh	r3, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80083e6:	f7fe fb89 	bl	8006afc <HAL_GetTick>
 80083ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	f040 80d9 	bne.w	80085ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	2319      	movs	r3, #25
 8008400:	2201      	movs	r2, #1
 8008402:	496d      	ldr	r1, [pc, #436]	; (80085b8 <HAL_I2C_Mem_Write+0x1ec>)
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 fc7f 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008410:	2302      	movs	r3, #2
 8008412:	e0cc      	b.n	80085ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_I2C_Mem_Write+0x56>
 800841e:	2302      	movs	r3, #2
 8008420:	e0c5      	b.n	80085ae <HAL_I2C_Mem_Write+0x1e2>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b01      	cmp	r3, #1
 8008436:	d007      	beq.n	8008448 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0201 	orr.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008456:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2221      	movs	r2, #33	; 0x21
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2240      	movs	r2, #64	; 0x40
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a3a      	ldr	r2, [r7, #32]
 8008472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4a4d      	ldr	r2, [pc, #308]	; (80085bc <HAL_I2C_Mem_Write+0x1f0>)
 8008488:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800848a:	88f8      	ldrh	r0, [r7, #6]
 800848c:	893a      	ldrh	r2, [r7, #8]
 800848e:	8979      	ldrh	r1, [r7, #10]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	4603      	mov	r3, r0
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fab6 	bl	8008a0c <I2C_RequestMemoryWrite>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d052      	beq.n	800854c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e081      	b.n	80085ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 fd00 	bl	8008eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00d      	beq.n	80084d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d107      	bne.n	80084d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e06b      	b.n	80085ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b04      	cmp	r3, #4
 8008512:	d11b      	bne.n	800854c <HAL_I2C_Mem_Write+0x180>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008518:	2b00      	cmp	r3, #0
 800851a:	d017      	beq.n	800854c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	781a      	ldrb	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008542:	b29b      	uxth	r3, r3
 8008544:	3b01      	subs	r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1aa      	bne.n	80084aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fcec 	bl	8008f36 <I2C_WaitOnBTFFlagUntilTimeout>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00d      	beq.n	8008580 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008568:	2b04      	cmp	r3, #4
 800856a:	d107      	bne.n	800857c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800857a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e016      	b.n	80085ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e000      	b.n	80085ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80085ac:	2302      	movs	r3, #2
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	00100002 	.word	0x00100002
 80085bc:	ffff0000 	.word	0xffff0000

080085c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08c      	sub	sp, #48	; 0x30
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	4608      	mov	r0, r1
 80085ca:	4611      	mov	r1, r2
 80085cc:	461a      	mov	r2, r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	817b      	strh	r3, [r7, #10]
 80085d2:	460b      	mov	r3, r1
 80085d4:	813b      	strh	r3, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085da:	f7fe fa8f 	bl	8006afc <HAL_GetTick>
 80085de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	f040 8208 	bne.w	80089fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	2319      	movs	r3, #25
 80085f4:	2201      	movs	r2, #1
 80085f6:	497b      	ldr	r1, [pc, #492]	; (80087e4 <HAL_I2C_Mem_Read+0x224>)
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fb85 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008604:	2302      	movs	r3, #2
 8008606:	e1fb      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_I2C_Mem_Read+0x56>
 8008612:	2302      	movs	r3, #2
 8008614:	e1f4      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b01      	cmp	r3, #1
 800862a:	d007      	beq.n	800863c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0201 	orr.w	r2, r2, #1
 800863a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800864a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2222      	movs	r2, #34	; 0x22
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2240      	movs	r2, #64	; 0x40
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800866c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a5b      	ldr	r2, [pc, #364]	; (80087e8 <HAL_I2C_Mem_Read+0x228>)
 800867c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800867e:	88f8      	ldrh	r0, [r7, #6]
 8008680:	893a      	ldrh	r2, [r7, #8]
 8008682:	8979      	ldrh	r1, [r7, #10]
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	4603      	mov	r3, r0
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 fa52 	bl	8008b38 <I2C_RequestMemoryRead>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e1b0      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d113      	bne.n	80086ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a6:	2300      	movs	r3, #0
 80086a8:	623b      	str	r3, [r7, #32]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	623b      	str	r3, [r7, #32]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	623b      	str	r3, [r7, #32]
 80086ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e184      	b.n	80089d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d11b      	bne.n	800870e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086e6:	2300      	movs	r3, #0
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	61fb      	str	r3, [r7, #28]
 80086fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	e164      	b.n	80089d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008712:	2b02      	cmp	r3, #2
 8008714:	d11b      	bne.n	800874e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008724:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008736:	2300      	movs	r3, #0
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	61bb      	str	r3, [r7, #24]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	e144      	b.n	80089d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008764:	e138      	b.n	80089d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800876a:	2b03      	cmp	r3, #3
 800876c:	f200 80f1 	bhi.w	8008952 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008774:	2b01      	cmp	r3, #1
 8008776:	d123      	bne.n	80087c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fc1b 	bl	8008fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e139      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691a      	ldr	r2, [r3, #16]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087be:	e10b      	b.n	80089d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d14e      	bne.n	8008866 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ce:	2200      	movs	r2, #0
 80087d0:	4906      	ldr	r1, [pc, #24]	; (80087ec <HAL_I2C_Mem_Read+0x22c>)
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fa98 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d008      	beq.n	80087f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e10e      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
 80087e2:	bf00      	nop
 80087e4:	00100002 	.word	0x00100002
 80087e8:	ffff0000 	.word	0xffff0000
 80087ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691a      	ldr	r2, [r3, #16]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	b2d2      	uxtb	r2, r2
 800880c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881c:	3b01      	subs	r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008828:	b29b      	uxth	r3, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	b29a      	uxth	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	691a      	ldr	r2, [r3, #16]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	b2d2      	uxtb	r2, r2
 800883e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800884e:	3b01      	subs	r3, #1
 8008850:	b29a      	uxth	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885a:	b29b      	uxth	r3, r3
 800885c:	3b01      	subs	r3, #1
 800885e:	b29a      	uxth	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008864:	e0b8      	b.n	80089d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	2200      	movs	r2, #0
 800886e:	4966      	ldr	r1, [pc, #408]	; (8008a08 <HAL_I2C_Mem_Read+0x448>)
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fa49 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e0bf      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691a      	ldr	r2, [r3, #16]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	2200      	movs	r2, #0
 80088ca:	494f      	ldr	r1, [pc, #316]	; (8008a08 <HAL_I2C_Mem_Read+0x448>)
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fa1b 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e091      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008908:	3b01      	subs	r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	b2d2      	uxtb	r2, r2
 800892a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893a:	3b01      	subs	r3, #1
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008946:	b29b      	uxth	r3, r3
 8008948:	3b01      	subs	r3, #1
 800894a:	b29a      	uxth	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008950:	e042      	b.n	80089d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fb2e 	bl	8008fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e04c      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d118      	bne.n	80089d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f47f aec2 	bne.w	8008766 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e000      	b.n	8008a00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80089fe:	2302      	movs	r3, #2
  }
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3728      	adds	r7, #40	; 0x28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	00010004 	.word	0x00010004

08008a0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	4608      	mov	r0, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	817b      	strh	r3, [r7, #10]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	813b      	strh	r3, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 f960 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00d      	beq.n	8008a6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5c:	d103      	bne.n	8008a66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e05f      	b.n	8008b2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a6a:	897b      	ldrh	r3, [r7, #10]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	6a3a      	ldr	r2, [r7, #32]
 8008a7e:	492d      	ldr	r1, [pc, #180]	; (8008b34 <I2C_RequestMemoryWrite+0x128>)
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 f998 	bl	8008db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e04c      	b.n	8008b2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a90:	2300      	movs	r3, #0
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa8:	6a39      	ldr	r1, [r7, #32]
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fa02 	bl	8008eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00d      	beq.n	8008ad2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d107      	bne.n	8008ace <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008acc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e02b      	b.n	8008b2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d105      	bne.n	8008ae4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ad8:	893b      	ldrh	r3, [r7, #8]
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	611a      	str	r2, [r3, #16]
 8008ae2:	e021      	b.n	8008b28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ae4:	893b      	ldrh	r3, [r7, #8]
 8008ae6:	0a1b      	lsrs	r3, r3, #8
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af4:	6a39      	ldr	r1, [r7, #32]
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f9dc 	bl	8008eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00d      	beq.n	8008b1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d107      	bne.n	8008b1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e005      	b.n	8008b2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b1e:	893b      	ldrh	r3, [r7, #8]
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	00010002 	.word	0x00010002

08008b38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	4608      	mov	r0, r1
 8008b42:	4611      	mov	r1, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	817b      	strh	r3, [r7, #10]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	813b      	strh	r3, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f8c2 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00d      	beq.n	8008ba6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b98:	d103      	bne.n	8008ba2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e0aa      	b.n	8008cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ba6:	897b      	ldrh	r3, [r7, #10]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	6a3a      	ldr	r2, [r7, #32]
 8008bba:	4952      	ldr	r1, [pc, #328]	; (8008d04 <I2C_RequestMemoryRead+0x1cc>)
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f8fa 	bl	8008db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e097      	b.n	8008cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be4:	6a39      	ldr	r1, [r7, #32]
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 f964 	bl	8008eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00d      	beq.n	8008c0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d107      	bne.n	8008c0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e076      	b.n	8008cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c0e:	88fb      	ldrh	r3, [r7, #6]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d105      	bne.n	8008c20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c14:	893b      	ldrh	r3, [r7, #8]
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	611a      	str	r2, [r3, #16]
 8008c1e:	e021      	b.n	8008c64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c20:	893b      	ldrh	r3, [r7, #8]
 8008c22:	0a1b      	lsrs	r3, r3, #8
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c30:	6a39      	ldr	r1, [r7, #32]
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 f93e 	bl	8008eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00d      	beq.n	8008c5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d107      	bne.n	8008c56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e050      	b.n	8008cfc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c5a:	893b      	ldrh	r3, [r7, #8]
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c66:	6a39      	ldr	r1, [r7, #32]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f923 	bl	8008eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00d      	beq.n	8008c90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d107      	bne.n	8008c8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e035      	b.n	8008cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 f82b 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00d      	beq.n	8008cd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc6:	d103      	bne.n	8008cd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e013      	b.n	8008cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008cd4:	897b      	ldrh	r3, [r7, #10]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	6a3a      	ldr	r2, [r7, #32]
 8008ce8:	4906      	ldr	r1, [pc, #24]	; (8008d04 <I2C_RequestMemoryRead+0x1cc>)
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 f863 	bl	8008db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e000      	b.n	8008cfc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	00010002 	.word	0x00010002

08008d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	4613      	mov	r3, r2
 8008d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d18:	e025      	b.n	8008d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d021      	beq.n	8008d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d22:	f7fd feeb 	bl	8006afc <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d302      	bcc.n	8008d38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d116      	bne.n	8008d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d52:	f043 0220 	orr.w	r2, r3, #32
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e023      	b.n	8008dae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	0c1b      	lsrs	r3, r3, #16
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d10d      	bne.n	8008d8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	43da      	mvns	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	e00c      	b.n	8008da6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	43da      	mvns	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4013      	ands	r3, r2
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bf0c      	ite	eq
 8008d9e:	2301      	moveq	r3, #1
 8008da0:	2300      	movne	r3, #0
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d0b6      	beq.n	8008d1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008dc4:	e051      	b.n	8008e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dd4:	d123      	bne.n	8008e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008dee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	f043 0204 	orr.w	r2, r3, #4
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e046      	b.n	8008eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d021      	beq.n	8008e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e26:	f7fd fe69 	bl	8006afc <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d302      	bcc.n	8008e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d116      	bne.n	8008e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	f043 0220 	orr.w	r2, r3, #32
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e020      	b.n	8008eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	0c1b      	lsrs	r3, r3, #16
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d10c      	bne.n	8008e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	43da      	mvns	r2, r3
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bf14      	ite	ne
 8008e86:	2301      	movne	r3, #1
 8008e88:	2300      	moveq	r3, #0
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	e00b      	b.n	8008ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	43da      	mvns	r2, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bf14      	ite	ne
 8008ea0:	2301      	movne	r3, #1
 8008ea2:	2300      	moveq	r3, #0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d18d      	bne.n	8008dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ec0:	e02d      	b.n	8008f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f8ce 	bl	8009064 <I2C_IsAcknowledgeFailed>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e02d      	b.n	8008f2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	d021      	beq.n	8008f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eda:	f7fd fe0f 	bl	8006afc <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d302      	bcc.n	8008ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d116      	bne.n	8008f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	f043 0220 	orr.w	r2, r3, #32
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e007      	b.n	8008f2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f28:	2b80      	cmp	r3, #128	; 0x80
 8008f2a:	d1ca      	bne.n	8008ec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f42:	e02d      	b.n	8008fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 f88d 	bl	8009064 <I2C_IsAcknowledgeFailed>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e02d      	b.n	8008fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5a:	d021      	beq.n	8008fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f5c:	f7fd fdce 	bl	8006afc <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d302      	bcc.n	8008f72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d116      	bne.n	8008fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	f043 0220 	orr.w	r2, r3, #32
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e007      	b.n	8008fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	f003 0304 	and.w	r3, r3, #4
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d1ca      	bne.n	8008f44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fc4:	e042      	b.n	800904c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	d119      	bne.n	8009008 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f06f 0210 	mvn.w	r2, #16
 8008fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e029      	b.n	800905c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009008:	f7fd fd78 	bl	8006afc <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	429a      	cmp	r2, r3
 8009016:	d302      	bcc.n	800901e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d116      	bne.n	800904c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009038:	f043 0220 	orr.w	r2, r3, #32
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e007      	b.n	800905c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d1b5      	bne.n	8008fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800907a:	d11b      	bne.n	80090b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009084:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a0:	f043 0204 	orr.w	r2, r3, #4
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e000      	b.n	80090b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
	...

080090c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e264      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d075      	beq.n	80091ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80090e2:	4ba3      	ldr	r3, [pc, #652]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f003 030c 	and.w	r3, r3, #12
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d00c      	beq.n	8009108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80090ee:	4ba0      	ldr	r3, [pc, #640]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80090f6:	2b08      	cmp	r3, #8
 80090f8:	d112      	bne.n	8009120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80090fa:	4b9d      	ldr	r3, [pc, #628]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009106:	d10b      	bne.n	8009120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009108:	4b99      	ldr	r3, [pc, #612]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d05b      	beq.n	80091cc <HAL_RCC_OscConfig+0x108>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d157      	bne.n	80091cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e23f      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009128:	d106      	bne.n	8009138 <HAL_RCC_OscConfig+0x74>
 800912a:	4b91      	ldr	r3, [pc, #580]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a90      	ldr	r2, [pc, #576]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	e01d      	b.n	8009174 <HAL_RCC_OscConfig+0xb0>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009140:	d10c      	bne.n	800915c <HAL_RCC_OscConfig+0x98>
 8009142:	4b8b      	ldr	r3, [pc, #556]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a8a      	ldr	r2, [pc, #552]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	4b88      	ldr	r3, [pc, #544]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a87      	ldr	r2, [pc, #540]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	e00b      	b.n	8009174 <HAL_RCC_OscConfig+0xb0>
 800915c:	4b84      	ldr	r3, [pc, #528]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a83      	ldr	r2, [pc, #524]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	4b81      	ldr	r3, [pc, #516]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a80      	ldr	r2, [pc, #512]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 800916e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d013      	beq.n	80091a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800917c:	f7fd fcbe 	bl	8006afc <HAL_GetTick>
 8009180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009182:	e008      	b.n	8009196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009184:	f7fd fcba 	bl	8006afc <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b64      	cmp	r3, #100	; 0x64
 8009190:	d901      	bls.n	8009196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e204      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009196:	4b76      	ldr	r3, [pc, #472]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0f0      	beq.n	8009184 <HAL_RCC_OscConfig+0xc0>
 80091a2:	e014      	b.n	80091ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091a4:	f7fd fcaa 	bl	8006afc <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091ac:	f7fd fca6 	bl	8006afc <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b64      	cmp	r3, #100	; 0x64
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e1f0      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091be:	4b6c      	ldr	r3, [pc, #432]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f0      	bne.n	80091ac <HAL_RCC_OscConfig+0xe8>
 80091ca:	e000      	b.n	80091ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d063      	beq.n	80092a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80091da:	4b65      	ldr	r3, [pc, #404]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f003 030c 	and.w	r3, r3, #12
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00b      	beq.n	80091fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091e6:	4b62      	ldr	r3, [pc, #392]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80091ee:	2b08      	cmp	r3, #8
 80091f0:	d11c      	bne.n	800922c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091f2:	4b5f      	ldr	r3, [pc, #380]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d116      	bne.n	800922c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091fe:	4b5c      	ldr	r3, [pc, #368]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d005      	beq.n	8009216 <HAL_RCC_OscConfig+0x152>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d001      	beq.n	8009216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e1c4      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009216:	4b56      	ldr	r3, [pc, #344]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	4952      	ldr	r1, [pc, #328]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009226:	4313      	orrs	r3, r2
 8009228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800922a:	e03a      	b.n	80092a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d020      	beq.n	8009276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009234:	4b4f      	ldr	r3, [pc, #316]	; (8009374 <HAL_RCC_OscConfig+0x2b0>)
 8009236:	2201      	movs	r2, #1
 8009238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800923a:	f7fd fc5f 	bl	8006afc <HAL_GetTick>
 800923e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009240:	e008      	b.n	8009254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009242:	f7fd fc5b 	bl	8006afc <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	2b02      	cmp	r3, #2
 800924e:	d901      	bls.n	8009254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e1a5      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009254:	4b46      	ldr	r3, [pc, #280]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0f0      	beq.n	8009242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009260:	4b43      	ldr	r3, [pc, #268]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	4940      	ldr	r1, [pc, #256]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009270:	4313      	orrs	r3, r2
 8009272:	600b      	str	r3, [r1, #0]
 8009274:	e015      	b.n	80092a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009276:	4b3f      	ldr	r3, [pc, #252]	; (8009374 <HAL_RCC_OscConfig+0x2b0>)
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927c:	f7fd fc3e 	bl	8006afc <HAL_GetTick>
 8009280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009284:	f7fd fc3a 	bl	8006afc <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e184      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009296:	4b36      	ldr	r3, [pc, #216]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0308 	and.w	r3, r3, #8
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d030      	beq.n	8009310 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d016      	beq.n	80092e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092b6:	4b30      	ldr	r3, [pc, #192]	; (8009378 <HAL_RCC_OscConfig+0x2b4>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092bc:	f7fd fc1e 	bl	8006afc <HAL_GetTick>
 80092c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092c2:	e008      	b.n	80092d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092c4:	f7fd fc1a 	bl	8006afc <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d901      	bls.n	80092d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e164      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092d6:	4b26      	ldr	r3, [pc, #152]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 80092d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0f0      	beq.n	80092c4 <HAL_RCC_OscConfig+0x200>
 80092e2:	e015      	b.n	8009310 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092e4:	4b24      	ldr	r3, [pc, #144]	; (8009378 <HAL_RCC_OscConfig+0x2b4>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ea:	f7fd fc07 	bl	8006afc <HAL_GetTick>
 80092ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092f0:	e008      	b.n	8009304 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092f2:	f7fd fc03 	bl	8006afc <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d901      	bls.n	8009304 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e14d      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009304:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1f0      	bne.n	80092f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0304 	and.w	r3, r3, #4
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 80a0 	beq.w	800945e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800931e:	2300      	movs	r3, #0
 8009320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009322:	4b13      	ldr	r3, [pc, #76]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10f      	bne.n	800934e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800932e:	2300      	movs	r3, #0
 8009330:	60bb      	str	r3, [r7, #8]
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	4a0e      	ldr	r2, [pc, #56]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800933c:	6413      	str	r3, [r2, #64]	; 0x40
 800933e:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <HAL_RCC_OscConfig+0x2ac>)
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009346:	60bb      	str	r3, [r7, #8]
 8009348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800934a:	2301      	movs	r3, #1
 800934c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <HAL_RCC_OscConfig+0x2b8>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009356:	2b00      	cmp	r3, #0
 8009358:	d121      	bne.n	800939e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800935a:	4b08      	ldr	r3, [pc, #32]	; (800937c <HAL_RCC_OscConfig+0x2b8>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a07      	ldr	r2, [pc, #28]	; (800937c <HAL_RCC_OscConfig+0x2b8>)
 8009360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009366:	f7fd fbc9 	bl	8006afc <HAL_GetTick>
 800936a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800936c:	e011      	b.n	8009392 <HAL_RCC_OscConfig+0x2ce>
 800936e:	bf00      	nop
 8009370:	40023800 	.word	0x40023800
 8009374:	42470000 	.word	0x42470000
 8009378:	42470e80 	.word	0x42470e80
 800937c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009380:	f7fd fbbc 	bl	8006afc <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	2b02      	cmp	r3, #2
 800938c:	d901      	bls.n	8009392 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e106      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009392:	4b85      	ldr	r3, [pc, #532]	; (80095a8 <HAL_RCC_OscConfig+0x4e4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0f0      	beq.n	8009380 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d106      	bne.n	80093b4 <HAL_RCC_OscConfig+0x2f0>
 80093a6:	4b81      	ldr	r3, [pc, #516]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093aa:	4a80      	ldr	r2, [pc, #512]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093ac:	f043 0301 	orr.w	r3, r3, #1
 80093b0:	6713      	str	r3, [r2, #112]	; 0x70
 80093b2:	e01c      	b.n	80093ee <HAL_RCC_OscConfig+0x32a>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	2b05      	cmp	r3, #5
 80093ba:	d10c      	bne.n	80093d6 <HAL_RCC_OscConfig+0x312>
 80093bc:	4b7b      	ldr	r3, [pc, #492]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c0:	4a7a      	ldr	r2, [pc, #488]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093c2:	f043 0304 	orr.w	r3, r3, #4
 80093c6:	6713      	str	r3, [r2, #112]	; 0x70
 80093c8:	4b78      	ldr	r3, [pc, #480]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093cc:	4a77      	ldr	r2, [pc, #476]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093ce:	f043 0301 	orr.w	r3, r3, #1
 80093d2:	6713      	str	r3, [r2, #112]	; 0x70
 80093d4:	e00b      	b.n	80093ee <HAL_RCC_OscConfig+0x32a>
 80093d6:	4b75      	ldr	r3, [pc, #468]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	4a74      	ldr	r2, [pc, #464]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	6713      	str	r3, [r2, #112]	; 0x70
 80093e2:	4b72      	ldr	r3, [pc, #456]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e6:	4a71      	ldr	r2, [pc, #452]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80093e8:	f023 0304 	bic.w	r3, r3, #4
 80093ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d015      	beq.n	8009422 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f6:	f7fd fb81 	bl	8006afc <HAL_GetTick>
 80093fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093fc:	e00a      	b.n	8009414 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093fe:	f7fd fb7d 	bl	8006afc <HAL_GetTick>
 8009402:	4602      	mov	r2, r0
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	f241 3288 	movw	r2, #5000	; 0x1388
 800940c:	4293      	cmp	r3, r2
 800940e:	d901      	bls.n	8009414 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e0c5      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009414:	4b65      	ldr	r3, [pc, #404]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 8009416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009418:	f003 0302 	and.w	r3, r3, #2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0ee      	beq.n	80093fe <HAL_RCC_OscConfig+0x33a>
 8009420:	e014      	b.n	800944c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009422:	f7fd fb6b 	bl	8006afc <HAL_GetTick>
 8009426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009428:	e00a      	b.n	8009440 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800942a:	f7fd fb67 	bl	8006afc <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	f241 3288 	movw	r2, #5000	; 0x1388
 8009438:	4293      	cmp	r3, r2
 800943a:	d901      	bls.n	8009440 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e0af      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009440:	4b5a      	ldr	r3, [pc, #360]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 8009442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009444:	f003 0302 	and.w	r3, r3, #2
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1ee      	bne.n	800942a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d105      	bne.n	800945e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009452:	4b56      	ldr	r3, [pc, #344]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	4a55      	ldr	r2, [pc, #340]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 8009458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800945c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 809b 	beq.w	800959e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009468:	4b50      	ldr	r3, [pc, #320]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f003 030c 	and.w	r3, r3, #12
 8009470:	2b08      	cmp	r3, #8
 8009472:	d05c      	beq.n	800952e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	2b02      	cmp	r3, #2
 800947a:	d141      	bne.n	8009500 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800947c:	4b4c      	ldr	r3, [pc, #304]	; (80095b0 <HAL_RCC_OscConfig+0x4ec>)
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009482:	f7fd fb3b 	bl	8006afc <HAL_GetTick>
 8009486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009488:	e008      	b.n	800949c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800948a:	f7fd fb37 	bl	8006afc <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d901      	bls.n	800949c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e081      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800949c:	4b43      	ldr	r3, [pc, #268]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1f0      	bne.n	800948a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	431a      	orrs	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	019b      	lsls	r3, r3, #6
 80094b8:	431a      	orrs	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094be:	085b      	lsrs	r3, r3, #1
 80094c0:	3b01      	subs	r3, #1
 80094c2:	041b      	lsls	r3, r3, #16
 80094c4:	431a      	orrs	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	061b      	lsls	r3, r3, #24
 80094cc:	4937      	ldr	r1, [pc, #220]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094d2:	4b37      	ldr	r3, [pc, #220]	; (80095b0 <HAL_RCC_OscConfig+0x4ec>)
 80094d4:	2201      	movs	r2, #1
 80094d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094d8:	f7fd fb10 	bl	8006afc <HAL_GetTick>
 80094dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094de:	e008      	b.n	80094f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094e0:	f7fd fb0c 	bl	8006afc <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e056      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094f2:	4b2e      	ldr	r3, [pc, #184]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0f0      	beq.n	80094e0 <HAL_RCC_OscConfig+0x41c>
 80094fe:	e04e      	b.n	800959e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009500:	4b2b      	ldr	r3, [pc, #172]	; (80095b0 <HAL_RCC_OscConfig+0x4ec>)
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009506:	f7fd faf9 	bl	8006afc <HAL_GetTick>
 800950a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800950c:	e008      	b.n	8009520 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800950e:	f7fd faf5 	bl	8006afc <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	2b02      	cmp	r3, #2
 800951a:	d901      	bls.n	8009520 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e03f      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009520:	4b22      	ldr	r3, [pc, #136]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1f0      	bne.n	800950e <HAL_RCC_OscConfig+0x44a>
 800952c:	e037      	b.n	800959e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d101      	bne.n	800953a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e032      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800953a:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <HAL_RCC_OscConfig+0x4e8>)
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d028      	beq.n	800959a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009552:	429a      	cmp	r2, r3
 8009554:	d121      	bne.n	800959a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009560:	429a      	cmp	r2, r3
 8009562:	d11a      	bne.n	800959a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800956a:	4013      	ands	r3, r2
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009570:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009572:	4293      	cmp	r3, r2
 8009574:	d111      	bne.n	800959a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009580:	085b      	lsrs	r3, r3, #1
 8009582:	3b01      	subs	r3, #1
 8009584:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009586:	429a      	cmp	r2, r3
 8009588:	d107      	bne.n	800959a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009596:	429a      	cmp	r2, r3
 8009598:	d001      	beq.n	800959e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	40007000 	.word	0x40007000
 80095ac:	40023800 	.word	0x40023800
 80095b0:	42470060 	.word	0x42470060

080095b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e0cc      	b.n	8009762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095c8:	4b68      	ldr	r3, [pc, #416]	; (800976c <HAL_RCC_ClockConfig+0x1b8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0307 	and.w	r3, r3, #7
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d90c      	bls.n	80095f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095d6:	4b65      	ldr	r3, [pc, #404]	; (800976c <HAL_RCC_ClockConfig+0x1b8>)
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095de:	4b63      	ldr	r3, [pc, #396]	; (800976c <HAL_RCC_ClockConfig+0x1b8>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d001      	beq.n	80095f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e0b8      	b.n	8009762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d020      	beq.n	800963e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009608:	4b59      	ldr	r3, [pc, #356]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	4a58      	ldr	r2, [pc, #352]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 800960e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0308 	and.w	r3, r3, #8
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009620:	4b53      	ldr	r3, [pc, #332]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	4a52      	ldr	r2, [pc, #328]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800962a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800962c:	4b50      	ldr	r3, [pc, #320]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	494d      	ldr	r1, [pc, #308]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 800963a:	4313      	orrs	r3, r2
 800963c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d044      	beq.n	80096d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d107      	bne.n	8009662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009652:	4b47      	ldr	r3, [pc, #284]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d119      	bne.n	8009692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e07f      	b.n	8009762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d003      	beq.n	8009672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800966e:	2b03      	cmp	r3, #3
 8009670:	d107      	bne.n	8009682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009672:	4b3f      	ldr	r3, [pc, #252]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e06f      	b.n	8009762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009682:	4b3b      	ldr	r3, [pc, #236]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e067      	b.n	8009762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009692:	4b37      	ldr	r3, [pc, #220]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f023 0203 	bic.w	r2, r3, #3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	4934      	ldr	r1, [pc, #208]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096a4:	f7fd fa2a 	bl	8006afc <HAL_GetTick>
 80096a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096aa:	e00a      	b.n	80096c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096ac:	f7fd fa26 	bl	8006afc <HAL_GetTick>
 80096b0:	4602      	mov	r2, r0
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d901      	bls.n	80096c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e04f      	b.n	8009762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096c2:	4b2b      	ldr	r3, [pc, #172]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f003 020c 	and.w	r2, r3, #12
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d1eb      	bne.n	80096ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096d4:	4b25      	ldr	r3, [pc, #148]	; (800976c <HAL_RCC_ClockConfig+0x1b8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0307 	and.w	r3, r3, #7
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d20c      	bcs.n	80096fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096e2:	4b22      	ldr	r3, [pc, #136]	; (800976c <HAL_RCC_ClockConfig+0x1b8>)
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ea:	4b20      	ldr	r3, [pc, #128]	; (800976c <HAL_RCC_ClockConfig+0x1b8>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d001      	beq.n	80096fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e032      	b.n	8009762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d008      	beq.n	800971a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009708:	4b19      	ldr	r3, [pc, #100]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	4916      	ldr	r1, [pc, #88]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009716:	4313      	orrs	r3, r2
 8009718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0308 	and.w	r3, r3, #8
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009726:	4b12      	ldr	r3, [pc, #72]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	490e      	ldr	r1, [pc, #56]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009736:	4313      	orrs	r3, r2
 8009738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800973a:	f000 f821 	bl	8009780 <HAL_RCC_GetSysClockFreq>
 800973e:	4602      	mov	r2, r0
 8009740:	4b0b      	ldr	r3, [pc, #44]	; (8009770 <HAL_RCC_ClockConfig+0x1bc>)
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	091b      	lsrs	r3, r3, #4
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	490a      	ldr	r1, [pc, #40]	; (8009774 <HAL_RCC_ClockConfig+0x1c0>)
 800974c:	5ccb      	ldrb	r3, [r1, r3]
 800974e:	fa22 f303 	lsr.w	r3, r2, r3
 8009752:	4a09      	ldr	r2, [pc, #36]	; (8009778 <HAL_RCC_ClockConfig+0x1c4>)
 8009754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <HAL_RCC_ClockConfig+0x1c8>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f7fd f98a 	bl	8006a74 <HAL_InitTick>

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	40023c00 	.word	0x40023c00
 8009770:	40023800 	.word	0x40023800
 8009774:	080e9c64 	.word	0x080e9c64
 8009778:	20000068 	.word	0x20000068
 800977c:	200000a4 	.word	0x200000a4

08009780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	607b      	str	r3, [r7, #4]
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	2300      	movs	r3, #0
 8009792:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009798:	4b67      	ldr	r3, [pc, #412]	; (8009938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f003 030c 	and.w	r3, r3, #12
 80097a0:	2b08      	cmp	r3, #8
 80097a2:	d00d      	beq.n	80097c0 <HAL_RCC_GetSysClockFreq+0x40>
 80097a4:	2b08      	cmp	r3, #8
 80097a6:	f200 80bd 	bhi.w	8009924 <HAL_RCC_GetSysClockFreq+0x1a4>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <HAL_RCC_GetSysClockFreq+0x34>
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d003      	beq.n	80097ba <HAL_RCC_GetSysClockFreq+0x3a>
 80097b2:	e0b7      	b.n	8009924 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097b4:	4b61      	ldr	r3, [pc, #388]	; (800993c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80097b6:	60bb      	str	r3, [r7, #8]
       break;
 80097b8:	e0b7      	b.n	800992a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097ba:	4b61      	ldr	r3, [pc, #388]	; (8009940 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80097bc:	60bb      	str	r3, [r7, #8]
      break;
 80097be:	e0b4      	b.n	800992a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097c0:	4b5d      	ldr	r3, [pc, #372]	; (8009938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097ca:	4b5b      	ldr	r3, [pc, #364]	; (8009938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d04d      	beq.n	8009872 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097d6:	4b58      	ldr	r3, [pc, #352]	; (8009938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	099b      	lsrs	r3, r3, #6
 80097dc:	461a      	mov	r2, r3
 80097de:	f04f 0300 	mov.w	r3, #0
 80097e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80097e6:	f04f 0100 	mov.w	r1, #0
 80097ea:	ea02 0800 	and.w	r8, r2, r0
 80097ee:	ea03 0901 	and.w	r9, r3, r1
 80097f2:	4640      	mov	r0, r8
 80097f4:	4649      	mov	r1, r9
 80097f6:	f04f 0200 	mov.w	r2, #0
 80097fa:	f04f 0300 	mov.w	r3, #0
 80097fe:	014b      	lsls	r3, r1, #5
 8009800:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009804:	0142      	lsls	r2, r0, #5
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	ebb0 0008 	subs.w	r0, r0, r8
 800980e:	eb61 0109 	sbc.w	r1, r1, r9
 8009812:	f04f 0200 	mov.w	r2, #0
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	018b      	lsls	r3, r1, #6
 800981c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009820:	0182      	lsls	r2, r0, #6
 8009822:	1a12      	subs	r2, r2, r0
 8009824:	eb63 0301 	sbc.w	r3, r3, r1
 8009828:	f04f 0000 	mov.w	r0, #0
 800982c:	f04f 0100 	mov.w	r1, #0
 8009830:	00d9      	lsls	r1, r3, #3
 8009832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009836:	00d0      	lsls	r0, r2, #3
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	eb12 0208 	adds.w	r2, r2, r8
 8009840:	eb43 0309 	adc.w	r3, r3, r9
 8009844:	f04f 0000 	mov.w	r0, #0
 8009848:	f04f 0100 	mov.w	r1, #0
 800984c:	0259      	lsls	r1, r3, #9
 800984e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009852:	0250      	lsls	r0, r2, #9
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4610      	mov	r0, r2
 800985a:	4619      	mov	r1, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	461a      	mov	r2, r3
 8009860:	f04f 0300 	mov.w	r3, #0
 8009864:	f7f7 fa10 	bl	8000c88 <__aeabi_uldivmod>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4613      	mov	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	e04a      	b.n	8009908 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009872:	4b31      	ldr	r3, [pc, #196]	; (8009938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	099b      	lsrs	r3, r3, #6
 8009878:	461a      	mov	r2, r3
 800987a:	f04f 0300 	mov.w	r3, #0
 800987e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009882:	f04f 0100 	mov.w	r1, #0
 8009886:	ea02 0400 	and.w	r4, r2, r0
 800988a:	ea03 0501 	and.w	r5, r3, r1
 800988e:	4620      	mov	r0, r4
 8009890:	4629      	mov	r1, r5
 8009892:	f04f 0200 	mov.w	r2, #0
 8009896:	f04f 0300 	mov.w	r3, #0
 800989a:	014b      	lsls	r3, r1, #5
 800989c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80098a0:	0142      	lsls	r2, r0, #5
 80098a2:	4610      	mov	r0, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	1b00      	subs	r0, r0, r4
 80098a8:	eb61 0105 	sbc.w	r1, r1, r5
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	018b      	lsls	r3, r1, #6
 80098b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80098ba:	0182      	lsls	r2, r0, #6
 80098bc:	1a12      	subs	r2, r2, r0
 80098be:	eb63 0301 	sbc.w	r3, r3, r1
 80098c2:	f04f 0000 	mov.w	r0, #0
 80098c6:	f04f 0100 	mov.w	r1, #0
 80098ca:	00d9      	lsls	r1, r3, #3
 80098cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098d0:	00d0      	lsls	r0, r2, #3
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	1912      	adds	r2, r2, r4
 80098d8:	eb45 0303 	adc.w	r3, r5, r3
 80098dc:	f04f 0000 	mov.w	r0, #0
 80098e0:	f04f 0100 	mov.w	r1, #0
 80098e4:	0299      	lsls	r1, r3, #10
 80098e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80098ea:	0290      	lsls	r0, r2, #10
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	4610      	mov	r0, r2
 80098f2:	4619      	mov	r1, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	461a      	mov	r2, r3
 80098f8:	f04f 0300 	mov.w	r3, #0
 80098fc:	f7f7 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4613      	mov	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009908:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	3301      	adds	r3, #1
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009920:	60bb      	str	r3, [r7, #8]
      break;
 8009922:	e002      	b.n	800992a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009926:	60bb      	str	r3, [r7, #8]
      break;
 8009928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800992a:	68bb      	ldr	r3, [r7, #8]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009936:	bf00      	nop
 8009938:	40023800 	.word	0x40023800
 800993c:	00f42400 	.word	0x00f42400
 8009940:	007a1200 	.word	0x007a1200

08009944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009944:	b480      	push	{r7}
 8009946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009948:	4b03      	ldr	r3, [pc, #12]	; (8009958 <HAL_RCC_GetHCLKFreq+0x14>)
 800994a:	681b      	ldr	r3, [r3, #0]
}
 800994c:	4618      	mov	r0, r3
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	20000068 	.word	0x20000068

0800995c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009960:	f7ff fff0 	bl	8009944 <HAL_RCC_GetHCLKFreq>
 8009964:	4602      	mov	r2, r0
 8009966:	4b05      	ldr	r3, [pc, #20]	; (800997c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	0a9b      	lsrs	r3, r3, #10
 800996c:	f003 0307 	and.w	r3, r3, #7
 8009970:	4903      	ldr	r1, [pc, #12]	; (8009980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009972:	5ccb      	ldrb	r3, [r1, r3]
 8009974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009978:	4618      	mov	r0, r3
 800997a:	bd80      	pop	{r7, pc}
 800997c:	40023800 	.word	0x40023800
 8009980:	080e9c74 	.word	0x080e9c74

08009984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009988:	f7ff ffdc 	bl	8009944 <HAL_RCC_GetHCLKFreq>
 800998c:	4602      	mov	r2, r0
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	0b5b      	lsrs	r3, r3, #13
 8009994:	f003 0307 	and.w	r3, r3, #7
 8009998:	4903      	ldr	r1, [pc, #12]	; (80099a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800999a:	5ccb      	ldrb	r3, [r1, r3]
 800999c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	40023800 	.word	0x40023800
 80099a8:	080e9c74 	.word	0x080e9c74

080099ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e07b      	b.n	8009ab6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d108      	bne.n	80099d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ce:	d009      	beq.n	80099e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	61da      	str	r2, [r3, #28]
 80099d6:	e005      	b.n	80099e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d106      	bne.n	8009a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fb fbda 	bl	80051b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2202      	movs	r2, #2
 8009a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	431a      	orrs	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a54:	431a      	orrs	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a1b      	ldr	r3, [r3, #32]
 8009a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a68:	ea42 0103 	orr.w	r1, r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	0c1b      	lsrs	r3, r3, #16
 8009a82:	f003 0104 	and.w	r1, r3, #4
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	f003 0210 	and.w	r2, r3, #16
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69da      	ldr	r2, [r3, #28]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009aa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b088      	sub	sp, #32
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	603b      	str	r3, [r7, #0]
 8009aca:	4613      	mov	r3, r2
 8009acc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d101      	bne.n	8009ae0 <HAL_SPI_Transmit+0x22>
 8009adc:	2302      	movs	r3, #2
 8009ade:	e126      	b.n	8009d2e <HAL_SPI_Transmit+0x270>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ae8:	f7fd f808 	bl	8006afc <HAL_GetTick>
 8009aec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d002      	beq.n	8009b04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009afe:	2302      	movs	r3, #2
 8009b00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b02:	e10b      	b.n	8009d1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <HAL_SPI_Transmit+0x52>
 8009b0a:	88fb      	ldrh	r3, [r7, #6]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b14:	e102      	b.n	8009d1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2203      	movs	r2, #3
 8009b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	88fa      	ldrh	r2, [r7, #6]
 8009b2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	88fa      	ldrh	r2, [r7, #6]
 8009b34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b5c:	d10f      	bne.n	8009b7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b88:	2b40      	cmp	r3, #64	; 0x40
 8009b8a:	d007      	beq.n	8009b9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba4:	d14b      	bne.n	8009c3e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <HAL_SPI_Transmit+0xf6>
 8009bae:	8afb      	ldrh	r3, [r7, #22]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d13e      	bne.n	8009c32 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb8:	881a      	ldrh	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc4:	1c9a      	adds	r2, r3, #2
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009bd8:	e02b      	b.n	8009c32 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d112      	bne.n	8009c0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bec:	881a      	ldrh	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf8:	1c9a      	adds	r2, r3, #2
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	3b01      	subs	r3, #1
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c0c:	e011      	b.n	8009c32 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c0e:	f7fc ff75 	bl	8006afc <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d803      	bhi.n	8009c26 <HAL_SPI_Transmit+0x168>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c24:	d102      	bne.n	8009c2c <HAL_SPI_Transmit+0x16e>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c30:	e074      	b.n	8009d1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1ce      	bne.n	8009bda <HAL_SPI_Transmit+0x11c>
 8009c3c:	e04c      	b.n	8009cd8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <HAL_SPI_Transmit+0x18e>
 8009c46:	8afb      	ldrh	r3, [r7, #22]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d140      	bne.n	8009cce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	330c      	adds	r3, #12
 8009c56:	7812      	ldrb	r2, [r2, #0]
 8009c58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009c72:	e02c      	b.n	8009cce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d113      	bne.n	8009caa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	330c      	adds	r3, #12
 8009c8c:	7812      	ldrb	r2, [r2, #0]
 8009c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ca8:	e011      	b.n	8009cce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009caa:	f7fc ff27 	bl	8006afc <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d803      	bhi.n	8009cc2 <HAL_SPI_Transmit+0x204>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc0:	d102      	bne.n	8009cc8 <HAL_SPI_Transmit+0x20a>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d102      	bne.n	8009cce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ccc:	e026      	b.n	8009d1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1cd      	bne.n	8009c74 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 fbcb 	bl	800a478 <SPI_EndRxTxTransaction>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2220      	movs	r2, #32
 8009cec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10a      	bne.n	8009d0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	613b      	str	r3, [r7, #16]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	613b      	str	r3, [r7, #16]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	77fb      	strb	r3, [r7, #31]
 8009d18:	e000      	b.n	8009d1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8009d1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3720      	adds	r7, #32
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b088      	sub	sp, #32
 8009d3a:	af02      	add	r7, sp, #8
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	60b9      	str	r1, [r7, #8]
 8009d40:	603b      	str	r3, [r7, #0]
 8009d42:	4613      	mov	r3, r2
 8009d44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d52:	d112      	bne.n	8009d7a <HAL_SPI_Receive+0x44>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10e      	bne.n	8009d7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2204      	movs	r2, #4
 8009d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009d64:	88fa      	ldrh	r2, [r7, #6]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	68b9      	ldr	r1, [r7, #8]
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f8f1 	bl	8009f58 <HAL_SPI_TransmitReceive>
 8009d76:	4603      	mov	r3, r0
 8009d78:	e0ea      	b.n	8009f50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_SPI_Receive+0x52>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e0e3      	b.n	8009f50 <HAL_SPI_Receive+0x21a>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d90:	f7fc feb4 	bl	8006afc <HAL_GetTick>
 8009d94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d002      	beq.n	8009da8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009da2:	2302      	movs	r3, #2
 8009da4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009da6:	e0ca      	b.n	8009f3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <HAL_SPI_Receive+0x7e>
 8009dae:	88fb      	ldrh	r3, [r7, #6]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009db8:	e0c1      	b.n	8009f3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	88fa      	ldrh	r2, [r7, #6]
 8009dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	88fa      	ldrh	r2, [r7, #6]
 8009dd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e00:	d10f      	bne.n	8009e22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2c:	2b40      	cmp	r3, #64	; 0x40
 8009e2e:	d007      	beq.n	8009e40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d162      	bne.n	8009f0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009e48:	e02e      	b.n	8009ea8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d115      	bne.n	8009e84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f103 020c 	add.w	r2, r3, #12
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	7812      	ldrb	r2, [r2, #0]
 8009e66:	b2d2      	uxtb	r2, r2
 8009e68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e82:	e011      	b.n	8009ea8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e84:	f7fc fe3a 	bl	8006afc <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d803      	bhi.n	8009e9c <HAL_SPI_Receive+0x166>
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d102      	bne.n	8009ea2 <HAL_SPI_Receive+0x16c>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009ea6:	e04a      	b.n	8009f3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1cb      	bne.n	8009e4a <HAL_SPI_Receive+0x114>
 8009eb2:	e031      	b.n	8009f18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d113      	bne.n	8009eea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68da      	ldr	r2, [r3, #12]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	b292      	uxth	r2, r2
 8009ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed4:	1c9a      	adds	r2, r3, #2
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ee8:	e011      	b.n	8009f0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eea:	f7fc fe07 	bl	8006afc <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d803      	bhi.n	8009f02 <HAL_SPI_Receive+0x1cc>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f00:	d102      	bne.n	8009f08 <HAL_SPI_Receive+0x1d2>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d102      	bne.n	8009f0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009f0c:	e017      	b.n	8009f3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1cd      	bne.n	8009eb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 fa45 	bl	800a3ac <SPI_EndRxTransaction>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	75fb      	strb	r3, [r7, #23]
 8009f3a:	e000      	b.n	8009f3e <HAL_SPI_Receive+0x208>
  }

error :
 8009f3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08c      	sub	sp, #48	; 0x30
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009f66:	2301      	movs	r3, #1
 8009f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d101      	bne.n	8009f7e <HAL_SPI_TransmitReceive+0x26>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e18a      	b.n	800a294 <HAL_SPI_TransmitReceive+0x33c>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f86:	f7fc fdb9 	bl	8006afc <HAL_GetTick>
 8009f8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009f9c:	887b      	ldrh	r3, [r7, #2]
 8009f9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d00f      	beq.n	8009fc8 <HAL_SPI_TransmitReceive+0x70>
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fae:	d107      	bne.n	8009fc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <HAL_SPI_TransmitReceive+0x68>
 8009fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	d003      	beq.n	8009fc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009fc6:	e15b      	b.n	800a280 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d005      	beq.n	8009fda <HAL_SPI_TransmitReceive+0x82>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <HAL_SPI_TransmitReceive+0x82>
 8009fd4:	887b      	ldrh	r3, [r7, #2]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d103      	bne.n	8009fe2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009fe0:	e14e      	b.n	800a280 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d003      	beq.n	8009ff6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	887a      	ldrh	r2, [r7, #2]
 800a006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	887a      	ldrh	r2, [r7, #2]
 800a00c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	887a      	ldrh	r2, [r7, #2]
 800a018:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	887a      	ldrh	r2, [r7, #2]
 800a01e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a036:	2b40      	cmp	r3, #64	; 0x40
 800a038:	d007      	beq.n	800a04a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a052:	d178      	bne.n	800a146 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <HAL_SPI_TransmitReceive+0x10a>
 800a05c:	8b7b      	ldrh	r3, [r7, #26]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d166      	bne.n	800a130 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a066:	881a      	ldrh	r2, [r3, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a072:	1c9a      	adds	r2, r3, #2
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	3b01      	subs	r3, #1
 800a080:	b29a      	uxth	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a086:	e053      	b.n	800a130 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f003 0302 	and.w	r3, r3, #2
 800a092:	2b02      	cmp	r3, #2
 800a094:	d11b      	bne.n	800a0ce <HAL_SPI_TransmitReceive+0x176>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d016      	beq.n	800a0ce <HAL_SPI_TransmitReceive+0x176>
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d113      	bne.n	800a0ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0aa:	881a      	ldrh	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b6:	1c9a      	adds	r2, r3, #2
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f003 0301 	and.w	r3, r3, #1
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d119      	bne.n	800a110 <HAL_SPI_TransmitReceive+0x1b8>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d014      	beq.n	800a110 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f0:	b292      	uxth	r2, r2
 800a0f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f8:	1c9a      	adds	r2, r3, #2
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a102:	b29b      	uxth	r3, r3
 800a104:	3b01      	subs	r3, #1
 800a106:	b29a      	uxth	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a10c:	2301      	movs	r3, #1
 800a10e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a110:	f7fc fcf4 	bl	8006afc <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d807      	bhi.n	800a130 <HAL_SPI_TransmitReceive+0x1d8>
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d003      	beq.n	800a130 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a12e:	e0a7      	b.n	800a280 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a134:	b29b      	uxth	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1a6      	bne.n	800a088 <HAL_SPI_TransmitReceive+0x130>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a13e:	b29b      	uxth	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1a1      	bne.n	800a088 <HAL_SPI_TransmitReceive+0x130>
 800a144:	e07c      	b.n	800a240 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <HAL_SPI_TransmitReceive+0x1fc>
 800a14e:	8b7b      	ldrh	r3, [r7, #26]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d16b      	bne.n	800a22c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	330c      	adds	r3, #12
 800a15e:	7812      	ldrb	r2, [r2, #0]
 800a160:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a170:	b29b      	uxth	r3, r3
 800a172:	3b01      	subs	r3, #1
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a17a:	e057      	b.n	800a22c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	2b02      	cmp	r3, #2
 800a188:	d11c      	bne.n	800a1c4 <HAL_SPI_TransmitReceive+0x26c>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a18e:	b29b      	uxth	r3, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d017      	beq.n	800a1c4 <HAL_SPI_TransmitReceive+0x26c>
 800a194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a196:	2b01      	cmp	r3, #1
 800a198:	d114      	bne.n	800a1c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	330c      	adds	r3, #12
 800a1a4:	7812      	ldrb	r2, [r2, #0]
 800a1a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d119      	bne.n	800a206 <HAL_SPI_TransmitReceive+0x2ae>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d014      	beq.n	800a206 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68da      	ldr	r2, [r3, #12]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	b2d2      	uxtb	r2, r2
 800a1e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a202:	2301      	movs	r3, #1
 800a204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a206:	f7fc fc79 	bl	8006afc <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a212:	429a      	cmp	r2, r3
 800a214:	d803      	bhi.n	800a21e <HAL_SPI_TransmitReceive+0x2c6>
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21c:	d102      	bne.n	800a224 <HAL_SPI_TransmitReceive+0x2cc>
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	2b00      	cmp	r3, #0
 800a222:	d103      	bne.n	800a22c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a22a:	e029      	b.n	800a280 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a230:	b29b      	uxth	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1a2      	bne.n	800a17c <HAL_SPI_TransmitReceive+0x224>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d19d      	bne.n	800a17c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f917 	bl	800a478 <SPI_EndRxTxTransaction>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2220      	movs	r2, #32
 800a25a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a25c:	e010      	b.n	800a280 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10b      	bne.n	800a27e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a266:	2300      	movs	r3, #0
 800a268:	617b      	str	r3, [r7, #20]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	e000      	b.n	800a280 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a27e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a290:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a294:	4618      	mov	r0, r3
 800a296:	3730      	adds	r7, #48	; 0x30
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b088      	sub	sp, #32
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a2ac:	f7fc fc26 	bl	8006afc <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	1a9b      	subs	r3, r3, r2
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a2bc:	f7fc fc1e 	bl	8006afc <HAL_GetTick>
 800a2c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a2c2:	4b39      	ldr	r3, [pc, #228]	; (800a3a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	015b      	lsls	r3, r3, #5
 800a2c8:	0d1b      	lsrs	r3, r3, #20
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	fb02 f303 	mul.w	r3, r2, r3
 800a2d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2d2:	e054      	b.n	800a37e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d050      	beq.n	800a37e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a2dc:	f7fc fc0e 	bl	8006afc <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	69fa      	ldr	r2, [r7, #28]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d902      	bls.n	800a2f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d13d      	bne.n	800a36e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a30a:	d111      	bne.n	800a330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a314:	d004      	beq.n	800a320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a31e:	d107      	bne.n	800a330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a32e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a338:	d10f      	bne.n	800a35a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e017      	b.n	800a39e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4013      	ands	r3, r2
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	bf0c      	ite	eq
 800a38e:	2301      	moveq	r3, #1
 800a390:	2300      	movne	r3, #0
 800a392:	b2db      	uxtb	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d19b      	bne.n	800a2d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3720      	adds	r7, #32
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20000068 	.word	0x20000068

0800a3ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3c0:	d111      	bne.n	800a3e6 <SPI_EndRxTransaction+0x3a>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3ca:	d004      	beq.n	800a3d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3d4:	d107      	bne.n	800a3e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3ee:	d12a      	bne.n	800a446 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f8:	d012      	beq.n	800a420 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2200      	movs	r2, #0
 800a402:	2180      	movs	r1, #128	; 0x80
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f7ff ff49 	bl	800a29c <SPI_WaitFlagStateUntilTimeout>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d02d      	beq.n	800a46c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a414:	f043 0220 	orr.w	r2, r3, #32
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e026      	b.n	800a46e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2200      	movs	r2, #0
 800a428:	2101      	movs	r1, #1
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff ff36 	bl	800a29c <SPI_WaitFlagStateUntilTimeout>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d01a      	beq.n	800a46c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43a:	f043 0220 	orr.w	r2, r3, #32
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e013      	b.n	800a46e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2200      	movs	r2, #0
 800a44e:	2101      	movs	r1, #1
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff ff23 	bl	800a29c <SPI_WaitFlagStateUntilTimeout>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d007      	beq.n	800a46c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a460:	f043 0220 	orr.w	r2, r3, #32
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e000      	b.n	800a46e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a484:	4b1b      	ldr	r3, [pc, #108]	; (800a4f4 <SPI_EndRxTxTransaction+0x7c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a1b      	ldr	r2, [pc, #108]	; (800a4f8 <SPI_EndRxTxTransaction+0x80>)
 800a48a:	fba2 2303 	umull	r2, r3, r2, r3
 800a48e:	0d5b      	lsrs	r3, r3, #21
 800a490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a494:	fb02 f303 	mul.w	r3, r2, r3
 800a498:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4a2:	d112      	bne.n	800a4ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	2180      	movs	r1, #128	; 0x80
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7ff fef4 	bl	800a29c <SPI_WaitFlagStateUntilTimeout>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d016      	beq.n	800a4e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4be:	f043 0220 	orr.w	r2, r3, #32
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e00f      	b.n	800a4ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00a      	beq.n	800a4e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e0:	2b80      	cmp	r3, #128	; 0x80
 800a4e2:	d0f2      	beq.n	800a4ca <SPI_EndRxTxTransaction+0x52>
 800a4e4:	e000      	b.n	800a4e8 <SPI_EndRxTxTransaction+0x70>
        break;
 800a4e6:	bf00      	nop
  }

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	20000068 	.word	0x20000068
 800a4f8:	165e9f81 	.word	0x165e9f81

0800a4fc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e034      	b.n	800a57c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d106      	bne.n	800a52c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7fa fff2 	bl	8005510 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3308      	adds	r3, #8
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f001 ffa2 	bl	800c480 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	461a      	mov	r2, r3
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	f001 ffec 	bl	800c524 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6858      	ldr	r0, [r3, #4]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	f002 f821 	bl	800c5a0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	6892      	ldr	r2, [r2, #8]
 800a566:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	6892      	ldr	r2, [r2, #8]
 800a572:	f041 0101 	orr.w	r1, r1, #1
 800a576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e041      	b.n	800a61a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7fa fe4c 	bl	8005248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f000 fc1a 	bl	800adfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b01      	cmp	r3, #1
 800a636:	d001      	beq.n	800a63c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e046      	b.n	800a6ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a23      	ldr	r2, [pc, #140]	; (800a6d8 <HAL_TIM_Base_Start+0xb4>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d022      	beq.n	800a694 <HAL_TIM_Base_Start+0x70>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a656:	d01d      	beq.n	800a694 <HAL_TIM_Base_Start+0x70>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a1f      	ldr	r2, [pc, #124]	; (800a6dc <HAL_TIM_Base_Start+0xb8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d018      	beq.n	800a694 <HAL_TIM_Base_Start+0x70>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a1e      	ldr	r2, [pc, #120]	; (800a6e0 <HAL_TIM_Base_Start+0xbc>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d013      	beq.n	800a694 <HAL_TIM_Base_Start+0x70>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a1c      	ldr	r2, [pc, #112]	; (800a6e4 <HAL_TIM_Base_Start+0xc0>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00e      	beq.n	800a694 <HAL_TIM_Base_Start+0x70>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a1b      	ldr	r2, [pc, #108]	; (800a6e8 <HAL_TIM_Base_Start+0xc4>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d009      	beq.n	800a694 <HAL_TIM_Base_Start+0x70>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a19      	ldr	r2, [pc, #100]	; (800a6ec <HAL_TIM_Base_Start+0xc8>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d004      	beq.n	800a694 <HAL_TIM_Base_Start+0x70>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a18      	ldr	r2, [pc, #96]	; (800a6f0 <HAL_TIM_Base_Start+0xcc>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d111      	bne.n	800a6b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f003 0307 	and.w	r3, r3, #7
 800a69e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b06      	cmp	r3, #6
 800a6a4:	d010      	beq.n	800a6c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f042 0201 	orr.w	r2, r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6b6:	e007      	b.n	800a6c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f042 0201 	orr.w	r2, r2, #1
 800a6c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	40010000 	.word	0x40010000
 800a6dc:	40000400 	.word	0x40000400
 800a6e0:	40000800 	.word	0x40000800
 800a6e4:	40000c00 	.word	0x40000c00
 800a6e8:	40010400 	.word	0x40010400
 800a6ec:	40014000 	.word	0x40014000
 800a6f0:	40001800 	.word	0x40001800

0800a6f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b01      	cmp	r3, #1
 800a706:	d001      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e04e      	b.n	800a7aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2202      	movs	r2, #2
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0201 	orr.w	r2, r2, #1
 800a722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a23      	ldr	r2, [pc, #140]	; (800a7b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d022      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a736:	d01d      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a1f      	ldr	r2, [pc, #124]	; (800a7bc <HAL_TIM_Base_Start_IT+0xc8>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d018      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a1e      	ldr	r2, [pc, #120]	; (800a7c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d013      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a1c      	ldr	r2, [pc, #112]	; (800a7c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00e      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a1b      	ldr	r2, [pc, #108]	; (800a7c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d009      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a19      	ldr	r2, [pc, #100]	; (800a7cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d004      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x80>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a18      	ldr	r2, [pc, #96]	; (800a7d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d111      	bne.n	800a798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b06      	cmp	r3, #6
 800a784:	d010      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f042 0201 	orr.w	r2, r2, #1
 800a794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a796:	e007      	b.n	800a7a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0201 	orr.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010000 	.word	0x40010000
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40010400 	.word	0x40010400
 800a7cc:	40014000 	.word	0x40014000
 800a7d0:	40001800 	.word	0x40001800

0800a7d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e041      	b.n	800a86a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f839 	bl	800a872 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3304      	adds	r3, #4
 800a810:	4619      	mov	r1, r3
 800a812:	4610      	mov	r0, r2
 800a814:	f000 faf2 	bl	800adfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a87a:	bf00      	nop
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d122      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d11b      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f06f 0202 	mvn.w	r2, #2
 800a8b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fa78 	bl	800adbe <HAL_TIM_IC_CaptureCallback>
 800a8ce:	e005      	b.n	800a8dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fa6a 	bl	800adaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fa7b 	bl	800add2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d122      	bne.n	800a936 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d11b      	bne.n	800a936 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f06f 0204 	mvn.w	r2, #4
 800a906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fa4e 	bl	800adbe <HAL_TIM_IC_CaptureCallback>
 800a922:	e005      	b.n	800a930 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fa40 	bl	800adaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa51 	bl	800add2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	2b08      	cmp	r3, #8
 800a942:	d122      	bne.n	800a98a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	f003 0308 	and.w	r3, r3, #8
 800a94e:	2b08      	cmp	r3, #8
 800a950:	d11b      	bne.n	800a98a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f06f 0208 	mvn.w	r2, #8
 800a95a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2204      	movs	r2, #4
 800a960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	f003 0303 	and.w	r3, r3, #3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fa24 	bl	800adbe <HAL_TIM_IC_CaptureCallback>
 800a976:	e005      	b.n	800a984 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fa16 	bl	800adaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fa27 	bl	800add2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	f003 0310 	and.w	r3, r3, #16
 800a994:	2b10      	cmp	r3, #16
 800a996:	d122      	bne.n	800a9de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f003 0310 	and.w	r3, r3, #16
 800a9a2:	2b10      	cmp	r3, #16
 800a9a4:	d11b      	bne.n	800a9de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f06f 0210 	mvn.w	r2, #16
 800a9ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2208      	movs	r2, #8
 800a9b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f9fa 	bl	800adbe <HAL_TIM_IC_CaptureCallback>
 800a9ca:	e005      	b.n	800a9d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f9ec 	bl	800adaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f9fd 	bl	800add2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d10e      	bne.n	800aa0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d107      	bne.n	800aa0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f06f 0201 	mvn.w	r2, #1
 800aa02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7fa fa07 	bl	8004e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa14:	2b80      	cmp	r3, #128	; 0x80
 800aa16:	d10e      	bne.n	800aa36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa22:	2b80      	cmp	r3, #128	; 0x80
 800aa24:	d107      	bne.n	800aa36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fd53 	bl	800b4dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa40:	2b40      	cmp	r3, #64	; 0x40
 800aa42:	d10e      	bne.n	800aa62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4e:	2b40      	cmp	r3, #64	; 0x40
 800aa50:	d107      	bne.n	800aa62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f9c2 	bl	800ade6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	f003 0320 	and.w	r3, r3, #32
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d10e      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b20      	cmp	r3, #32
 800aa7c:	d107      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f06f 0220 	mvn.w	r2, #32
 800aa86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fd1d 	bl	800b4c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa8e:	bf00      	nop
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d101      	bne.n	800aab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aab2:	2302      	movs	r3, #2
 800aab4:	e0ae      	b.n	800ac14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b0c      	cmp	r3, #12
 800aac2:	f200 809f 	bhi.w	800ac04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aac6:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aacc:	0800ab01 	.word	0x0800ab01
 800aad0:	0800ac05 	.word	0x0800ac05
 800aad4:	0800ac05 	.word	0x0800ac05
 800aad8:	0800ac05 	.word	0x0800ac05
 800aadc:	0800ab41 	.word	0x0800ab41
 800aae0:	0800ac05 	.word	0x0800ac05
 800aae4:	0800ac05 	.word	0x0800ac05
 800aae8:	0800ac05 	.word	0x0800ac05
 800aaec:	0800ab83 	.word	0x0800ab83
 800aaf0:	0800ac05 	.word	0x0800ac05
 800aaf4:	0800ac05 	.word	0x0800ac05
 800aaf8:	0800ac05 	.word	0x0800ac05
 800aafc:	0800abc3 	.word	0x0800abc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fa18 	bl	800af3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0208 	orr.w	r2, r2, #8
 800ab1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0204 	bic.w	r2, r2, #4
 800ab2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6999      	ldr	r1, [r3, #24]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	691a      	ldr	r2, [r3, #16]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	619a      	str	r2, [r3, #24]
      break;
 800ab3e:	e064      	b.n	800ac0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68b9      	ldr	r1, [r7, #8]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fa68 	bl	800b01c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	699a      	ldr	r2, [r3, #24]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699a      	ldr	r2, [r3, #24]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6999      	ldr	r1, [r3, #24]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	021a      	lsls	r2, r3, #8
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	619a      	str	r2, [r3, #24]
      break;
 800ab80:	e043      	b.n	800ac0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68b9      	ldr	r1, [r7, #8]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fabd 	bl	800b108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69da      	ldr	r2, [r3, #28]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f042 0208 	orr.w	r2, r2, #8
 800ab9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69da      	ldr	r2, [r3, #28]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 0204 	bic.w	r2, r2, #4
 800abac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69d9      	ldr	r1, [r3, #28]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	691a      	ldr	r2, [r3, #16]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	61da      	str	r2, [r3, #28]
      break;
 800abc0:	e023      	b.n	800ac0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68b9      	ldr	r1, [r7, #8]
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fb11 	bl	800b1f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	69da      	ldr	r2, [r3, #28]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	69da      	ldr	r2, [r3, #28]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	69d9      	ldr	r1, [r3, #28]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	021a      	lsls	r2, r3, #8
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	61da      	str	r2, [r3, #28]
      break;
 800ac02:	e002      	b.n	800ac0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	75fb      	strb	r3, [r7, #23]
      break;
 800ac08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3718      	adds	r7, #24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d101      	bne.n	800ac38 <HAL_TIM_ConfigClockSource+0x1c>
 800ac34:	2302      	movs	r3, #2
 800ac36:	e0b4      	b.n	800ada2 <HAL_TIM_ConfigClockSource+0x186>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac70:	d03e      	beq.n	800acf0 <HAL_TIM_ConfigClockSource+0xd4>
 800ac72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac76:	f200 8087 	bhi.w	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
 800ac7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac7e:	f000 8086 	beq.w	800ad8e <HAL_TIM_ConfigClockSource+0x172>
 800ac82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac86:	d87f      	bhi.n	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
 800ac88:	2b70      	cmp	r3, #112	; 0x70
 800ac8a:	d01a      	beq.n	800acc2 <HAL_TIM_ConfigClockSource+0xa6>
 800ac8c:	2b70      	cmp	r3, #112	; 0x70
 800ac8e:	d87b      	bhi.n	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
 800ac90:	2b60      	cmp	r3, #96	; 0x60
 800ac92:	d050      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x11a>
 800ac94:	2b60      	cmp	r3, #96	; 0x60
 800ac96:	d877      	bhi.n	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
 800ac98:	2b50      	cmp	r3, #80	; 0x50
 800ac9a:	d03c      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0xfa>
 800ac9c:	2b50      	cmp	r3, #80	; 0x50
 800ac9e:	d873      	bhi.n	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
 800aca0:	2b40      	cmp	r3, #64	; 0x40
 800aca2:	d058      	beq.n	800ad56 <HAL_TIM_ConfigClockSource+0x13a>
 800aca4:	2b40      	cmp	r3, #64	; 0x40
 800aca6:	d86f      	bhi.n	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
 800aca8:	2b30      	cmp	r3, #48	; 0x30
 800acaa:	d064      	beq.n	800ad76 <HAL_TIM_ConfigClockSource+0x15a>
 800acac:	2b30      	cmp	r3, #48	; 0x30
 800acae:	d86b      	bhi.n	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
 800acb0:	2b20      	cmp	r3, #32
 800acb2:	d060      	beq.n	800ad76 <HAL_TIM_ConfigClockSource+0x15a>
 800acb4:	2b20      	cmp	r3, #32
 800acb6:	d867      	bhi.n	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d05c      	beq.n	800ad76 <HAL_TIM_ConfigClockSource+0x15a>
 800acbc:	2b10      	cmp	r3, #16
 800acbe:	d05a      	beq.n	800ad76 <HAL_TIM_ConfigClockSource+0x15a>
 800acc0:	e062      	b.n	800ad88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	6899      	ldr	r1, [r3, #8]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	f000 fb5d 	bl	800b390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ace4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	609a      	str	r2, [r3, #8]
      break;
 800acee:	e04f      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6818      	ldr	r0, [r3, #0]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	6899      	ldr	r1, [r3, #8]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f000 fb46 	bl	800b390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689a      	ldr	r2, [r3, #8]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad12:	609a      	str	r2, [r3, #8]
      break;
 800ad14:	e03c      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	6859      	ldr	r1, [r3, #4]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f000 faba 	bl	800b29c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2150      	movs	r1, #80	; 0x50
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 fb13 	bl	800b35a <TIM_ITRx_SetConfig>
      break;
 800ad34:	e02c      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	6859      	ldr	r1, [r3, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f000 fad9 	bl	800b2fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2160      	movs	r1, #96	; 0x60
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 fb03 	bl	800b35a <TIM_ITRx_SetConfig>
      break;
 800ad54:	e01c      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6818      	ldr	r0, [r3, #0]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	6859      	ldr	r1, [r3, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	461a      	mov	r2, r3
 800ad64:	f000 fa9a 	bl	800b29c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2140      	movs	r1, #64	; 0x40
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 faf3 	bl	800b35a <TIM_ITRx_SetConfig>
      break;
 800ad74:	e00c      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	4610      	mov	r0, r2
 800ad82:	f000 faea 	bl	800b35a <TIM_ITRx_SetConfig>
      break;
 800ad86:	e003      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad8c:	e000      	b.n	800ad90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ad8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adb2:	bf00      	nop
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adda:	bf00      	nop
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adee:	bf00      	nop
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
	...

0800adfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a40      	ldr	r2, [pc, #256]	; (800af10 <TIM_Base_SetConfig+0x114>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d013      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae1a:	d00f      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a3d      	ldr	r2, [pc, #244]	; (800af14 <TIM_Base_SetConfig+0x118>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d00b      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a3c      	ldr	r2, [pc, #240]	; (800af18 <TIM_Base_SetConfig+0x11c>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d007      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a3b      	ldr	r2, [pc, #236]	; (800af1c <TIM_Base_SetConfig+0x120>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d003      	beq.n	800ae3c <TIM_Base_SetConfig+0x40>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a3a      	ldr	r2, [pc, #232]	; (800af20 <TIM_Base_SetConfig+0x124>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d108      	bne.n	800ae4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a2f      	ldr	r2, [pc, #188]	; (800af10 <TIM_Base_SetConfig+0x114>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d02b      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5c:	d027      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a2c      	ldr	r2, [pc, #176]	; (800af14 <TIM_Base_SetConfig+0x118>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d023      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a2b      	ldr	r2, [pc, #172]	; (800af18 <TIM_Base_SetConfig+0x11c>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d01f      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a2a      	ldr	r2, [pc, #168]	; (800af1c <TIM_Base_SetConfig+0x120>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d01b      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a29      	ldr	r2, [pc, #164]	; (800af20 <TIM_Base_SetConfig+0x124>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d017      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a28      	ldr	r2, [pc, #160]	; (800af24 <TIM_Base_SetConfig+0x128>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d013      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a27      	ldr	r2, [pc, #156]	; (800af28 <TIM_Base_SetConfig+0x12c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d00f      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a26      	ldr	r2, [pc, #152]	; (800af2c <TIM_Base_SetConfig+0x130>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d00b      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a25      	ldr	r2, [pc, #148]	; (800af30 <TIM_Base_SetConfig+0x134>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d007      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a24      	ldr	r2, [pc, #144]	; (800af34 <TIM_Base_SetConfig+0x138>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d003      	beq.n	800aeae <TIM_Base_SetConfig+0xb2>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a23      	ldr	r2, [pc, #140]	; (800af38 <TIM_Base_SetConfig+0x13c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d108      	bne.n	800aec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	689a      	ldr	r2, [r3, #8]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a0a      	ldr	r2, [pc, #40]	; (800af10 <TIM_Base_SetConfig+0x114>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d003      	beq.n	800aef4 <TIM_Base_SetConfig+0xf8>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a0c      	ldr	r2, [pc, #48]	; (800af20 <TIM_Base_SetConfig+0x124>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d103      	bne.n	800aefc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	691a      	ldr	r2, [r3, #16]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	615a      	str	r2, [r3, #20]
}
 800af02:	bf00      	nop
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	40010000 	.word	0x40010000
 800af14:	40000400 	.word	0x40000400
 800af18:	40000800 	.word	0x40000800
 800af1c:	40000c00 	.word	0x40000c00
 800af20:	40010400 	.word	0x40010400
 800af24:	40014000 	.word	0x40014000
 800af28:	40014400 	.word	0x40014400
 800af2c:	40014800 	.word	0x40014800
 800af30:	40001800 	.word	0x40001800
 800af34:	40001c00 	.word	0x40001c00
 800af38:	40002000 	.word	0x40002000

0800af3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	f023 0201 	bic.w	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f023 0303 	bic.w	r3, r3, #3
 800af72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f023 0302 	bic.w	r3, r3, #2
 800af84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a20      	ldr	r2, [pc, #128]	; (800b014 <TIM_OC1_SetConfig+0xd8>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d003      	beq.n	800afa0 <TIM_OC1_SetConfig+0x64>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a1f      	ldr	r2, [pc, #124]	; (800b018 <TIM_OC1_SetConfig+0xdc>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d10c      	bne.n	800afba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f023 0308 	bic.w	r3, r3, #8
 800afa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	4313      	orrs	r3, r2
 800afb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f023 0304 	bic.w	r3, r3, #4
 800afb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a15      	ldr	r2, [pc, #84]	; (800b014 <TIM_OC1_SetConfig+0xd8>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d003      	beq.n	800afca <TIM_OC1_SetConfig+0x8e>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a14      	ldr	r2, [pc, #80]	; (800b018 <TIM_OC1_SetConfig+0xdc>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d111      	bne.n	800afee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	4313      	orrs	r3, r2
 800afec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	621a      	str	r2, [r3, #32]
}
 800b008:	bf00      	nop
 800b00a:	371c      	adds	r7, #28
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	40010000 	.word	0x40010000
 800b018:	40010400 	.word	0x40010400

0800b01c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	f023 0210 	bic.w	r2, r3, #16
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f023 0320 	bic.w	r3, r3, #32
 800b066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	011b      	lsls	r3, r3, #4
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4313      	orrs	r3, r2
 800b072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a22      	ldr	r2, [pc, #136]	; (800b100 <TIM_OC2_SetConfig+0xe4>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d003      	beq.n	800b084 <TIM_OC2_SetConfig+0x68>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a21      	ldr	r2, [pc, #132]	; (800b104 <TIM_OC2_SetConfig+0xe8>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d10d      	bne.n	800b0a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b08a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	4313      	orrs	r3, r2
 800b096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b09e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a17      	ldr	r2, [pc, #92]	; (800b100 <TIM_OC2_SetConfig+0xe4>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d003      	beq.n	800b0b0 <TIM_OC2_SetConfig+0x94>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a16      	ldr	r2, [pc, #88]	; (800b104 <TIM_OC2_SetConfig+0xe8>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d113      	bne.n	800b0d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	621a      	str	r2, [r3, #32]
}
 800b0f2:	bf00      	nop
 800b0f4:	371c      	adds	r7, #28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	40010000 	.word	0x40010000
 800b104:	40010400 	.word	0x40010400

0800b108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b108:	b480      	push	{r7}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	69db      	ldr	r3, [r3, #28]
 800b12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f023 0303 	bic.w	r3, r3, #3
 800b13e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	4313      	orrs	r3, r2
 800b148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	021b      	lsls	r3, r3, #8
 800b158:	697a      	ldr	r2, [r7, #20]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a21      	ldr	r2, [pc, #132]	; (800b1e8 <TIM_OC3_SetConfig+0xe0>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d003      	beq.n	800b16e <TIM_OC3_SetConfig+0x66>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a20      	ldr	r2, [pc, #128]	; (800b1ec <TIM_OC3_SetConfig+0xe4>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d10d      	bne.n	800b18a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	021b      	lsls	r3, r3, #8
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	4313      	orrs	r3, r2
 800b180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a16      	ldr	r2, [pc, #88]	; (800b1e8 <TIM_OC3_SetConfig+0xe0>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d003      	beq.n	800b19a <TIM_OC3_SetConfig+0x92>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a15      	ldr	r2, [pc, #84]	; (800b1ec <TIM_OC3_SetConfig+0xe4>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d113      	bne.n	800b1c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	011b      	lsls	r3, r3, #4
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	621a      	str	r2, [r3, #32]
}
 800b1dc:	bf00      	nop
 800b1de:	371c      	adds	r7, #28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr
 800b1e8:	40010000 	.word	0x40010000
 800b1ec:	40010400 	.word	0x40010400

0800b1f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	021b      	lsls	r3, r3, #8
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b23a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	031b      	lsls	r3, r3, #12
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	4313      	orrs	r3, r2
 800b246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a12      	ldr	r2, [pc, #72]	; (800b294 <TIM_OC4_SetConfig+0xa4>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d003      	beq.n	800b258 <TIM_OC4_SetConfig+0x68>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a11      	ldr	r2, [pc, #68]	; (800b298 <TIM_OC4_SetConfig+0xa8>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d109      	bne.n	800b26c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b25e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	019b      	lsls	r3, r3, #6
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	4313      	orrs	r3, r2
 800b26a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	621a      	str	r2, [r3, #32]
}
 800b286:	bf00      	nop
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	40010000 	.word	0x40010000
 800b298:	40010400 	.word	0x40010400

0800b29c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6a1b      	ldr	r3, [r3, #32]
 800b2ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6a1b      	ldr	r3, [r3, #32]
 800b2b2:	f023 0201 	bic.w	r2, r3, #1
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f023 030a 	bic.w	r3, r3, #10
 800b2d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	621a      	str	r2, [r3, #32]
}
 800b2ee:	bf00      	nop
 800b2f0:	371c      	adds	r7, #28
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b087      	sub	sp, #28
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	60b9      	str	r1, [r7, #8]
 800b304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	f023 0210 	bic.w	r2, r3, #16
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	031b      	lsls	r3, r3, #12
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b336:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4313      	orrs	r3, r2
 800b340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	621a      	str	r2, [r3, #32]
}
 800b34e:	bf00      	nop
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b085      	sub	sp, #20
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	4313      	orrs	r3, r2
 800b378:	f043 0307 	orr.w	r3, r3, #7
 800b37c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	609a      	str	r2, [r3, #8]
}
 800b384:	bf00      	nop
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	021a      	lsls	r2, r3, #8
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	697a      	ldr	r2, [r7, #20]
 800b3c2:	609a      	str	r2, [r3, #8]
}
 800b3c4:	bf00      	nop
 800b3c6:	371c      	adds	r7, #28
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d101      	bne.n	800b3e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	e05a      	b.n	800b49e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b40e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a21      	ldr	r2, [pc, #132]	; (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d022      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b434:	d01d      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a1d      	ldr	r2, [pc, #116]	; (800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d018      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a1b      	ldr	r2, [pc, #108]	; (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d013      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a1a      	ldr	r2, [pc, #104]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d00e      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a18      	ldr	r2, [pc, #96]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d009      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a17      	ldr	r2, [pc, #92]	; (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d004      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a15      	ldr	r2, [pc, #84]	; (800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d10c      	bne.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4313      	orrs	r3, r2
 800b482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	40010000 	.word	0x40010000
 800b4b0:	40000400 	.word	0x40000400
 800b4b4:	40000800 	.word	0x40000800
 800b4b8:	40000c00 	.word	0x40000c00
 800b4bc:	40010400 	.word	0x40010400
 800b4c0:	40014000 	.word	0x40014000
 800b4c4:	40001800 	.word	0x40001800

0800b4c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e03f      	b.n	800b582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7f9 ff22 	bl	8005360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2224      	movs	r2, #36	; 0x24
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fddb 	bl	800c0f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	691a      	ldr	r2, [r3, #16]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	695a      	ldr	r2, [r3, #20]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68da      	ldr	r2, [r3, #12]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2220      	movs	r2, #32
 800b574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2220      	movs	r2, #32
 800b57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b08a      	sub	sp, #40	; 0x28
 800b58e:	af02      	add	r7, sp, #8
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	603b      	str	r3, [r7, #0]
 800b596:	4613      	mov	r3, r2
 800b598:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b20      	cmp	r3, #32
 800b5a8:	d17c      	bne.n	800b6a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <HAL_UART_Transmit+0x2c>
 800b5b0:	88fb      	ldrh	r3, [r7, #6]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e075      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d101      	bne.n	800b5c8 <HAL_UART_Transmit+0x3e>
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	e06e      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2221      	movs	r2, #33	; 0x21
 800b5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5de:	f7fb fa8d 	bl	8006afc <HAL_GetTick>
 800b5e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	88fa      	ldrh	r2, [r7, #6]
 800b5e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	88fa      	ldrh	r2, [r7, #6]
 800b5ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5f8:	d108      	bne.n	800b60c <HAL_UART_Transmit+0x82>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d104      	bne.n	800b60c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	e003      	b.n	800b614 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b610:	2300      	movs	r3, #0
 800b612:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b61c:	e02a      	b.n	800b674 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2200      	movs	r2, #0
 800b626:	2180      	movs	r1, #128	; 0x80
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 fb1f 	bl	800bc6c <UART_WaitOnFlagUntilTimeout>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e036      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10b      	bne.n	800b656 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b64c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	3302      	adds	r3, #2
 800b652:	61bb      	str	r3, [r7, #24]
 800b654:	e007      	b.n	800b666 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	781a      	ldrb	r2, [r3, #0]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	3301      	adds	r3, #1
 800b664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	3b01      	subs	r3, #1
 800b66e:	b29a      	uxth	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b678:	b29b      	uxth	r3, r3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1cf      	bne.n	800b61e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2200      	movs	r2, #0
 800b686:	2140      	movs	r1, #64	; 0x40
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 faef 	bl	800bc6c <UART_WaitOnFlagUntilTimeout>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e006      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e000      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b6a4:	2302      	movs	r3, #2
  }
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3720      	adds	r7, #32
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	d11d      	bne.n	800b704 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d002      	beq.n	800b6d4 <HAL_UART_Receive_IT+0x26>
 800b6ce:	88fb      	ldrh	r3, [r7, #6]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e016      	b.n	800b706 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d101      	bne.n	800b6e6 <HAL_UART_Receive_IT+0x38>
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e00f      	b.n	800b706 <HAL_UART_Receive_IT+0x58>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b6f4:	88fb      	ldrh	r3, [r7, #6]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	68b9      	ldr	r1, [r7, #8]
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f000 fb24 	bl	800bd48 <UART_Start_Receive_IT>
 800b700:	4603      	mov	r3, r0
 800b702:	e000      	b.n	800b706 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b704:	2302      	movs	r3, #2
  }
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
	...

0800b710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b0ba      	sub	sp, #232	; 0xe8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b736:	2300      	movs	r3, #0
 800b738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b73c:	2300      	movs	r3, #0
 800b73e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b746:	f003 030f 	and.w	r3, r3, #15
 800b74a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b74e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10f      	bne.n	800b776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75a:	f003 0320 	and.w	r3, r3, #32
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d009      	beq.n	800b776 <HAL_UART_IRQHandler+0x66>
 800b762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b766:	f003 0320 	and.w	r3, r3, #32
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d003      	beq.n	800b776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fc03 	bl	800bf7a <UART_Receive_IT>
      return;
 800b774:	e256      	b.n	800bc24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 80de 	beq.w	800b93c <HAL_UART_IRQHandler+0x22c>
 800b780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d106      	bne.n	800b79a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b790:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 80d1 	beq.w	800b93c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00b      	beq.n	800b7be <HAL_UART_IRQHandler+0xae>
 800b7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d005      	beq.n	800b7be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b6:	f043 0201 	orr.w	r2, r3, #1
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7c2:	f003 0304 	and.w	r3, r3, #4
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00b      	beq.n	800b7e2 <HAL_UART_IRQHandler+0xd2>
 800b7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d005      	beq.n	800b7e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	f043 0202 	orr.w	r2, r3, #2
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7e6:	f003 0302 	and.w	r3, r3, #2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00b      	beq.n	800b806 <HAL_UART_IRQHandler+0xf6>
 800b7ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7f2:	f003 0301 	and.w	r3, r3, #1
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fe:	f043 0204 	orr.w	r2, r3, #4
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80a:	f003 0308 	and.w	r3, r3, #8
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d011      	beq.n	800b836 <HAL_UART_IRQHandler+0x126>
 800b812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b816:	f003 0320 	and.w	r3, r3, #32
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d105      	bne.n	800b82a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b81e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	d005      	beq.n	800b836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	f043 0208 	orr.w	r2, r3, #8
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f000 81ed 	beq.w	800bc1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b844:	f003 0320 	and.w	r3, r3, #32
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d008      	beq.n	800b85e <HAL_UART_IRQHandler+0x14e>
 800b84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fb8e 	bl	800bf7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b868:	2b40      	cmp	r3, #64	; 0x40
 800b86a:	bf0c      	ite	eq
 800b86c:	2301      	moveq	r3, #1
 800b86e:	2300      	movne	r3, #0
 800b870:	b2db      	uxtb	r3, r3
 800b872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87a:	f003 0308 	and.w	r3, r3, #8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d103      	bne.n	800b88a <HAL_UART_IRQHandler+0x17a>
 800b882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b886:	2b00      	cmp	r3, #0
 800b888:	d04f      	beq.n	800b92a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fa96 	bl	800bdbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b89a:	2b40      	cmp	r3, #64	; 0x40
 800b89c:	d141      	bne.n	800b922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3314      	adds	r3, #20
 800b8a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8ac:	e853 3f00 	ldrex	r3, [r3]
 800b8b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b8b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3314      	adds	r3, #20
 800b8c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b8ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b8ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b8d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b8da:	e841 2300 	strex	r3, r2, [r1]
 800b8de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b8e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1d9      	bne.n	800b89e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d013      	beq.n	800b91a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f6:	4a7d      	ldr	r2, [pc, #500]	; (800baec <HAL_UART_IRQHandler+0x3dc>)
 800b8f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fb ffc6 	bl	8007890 <HAL_DMA_Abort_IT>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d016      	beq.n	800b938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b918:	e00e      	b.n	800b938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f990 	bl	800bc40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b920:	e00a      	b.n	800b938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f98c 	bl	800bc40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b928:	e006      	b.n	800b938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f988 	bl	800bc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b936:	e170      	b.n	800bc1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b938:	bf00      	nop
    return;
 800b93a:	e16e      	b.n	800bc1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b940:	2b01      	cmp	r3, #1
 800b942:	f040 814a 	bne.w	800bbda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b94a:	f003 0310 	and.w	r3, r3, #16
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 8143 	beq.w	800bbda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b958:	f003 0310 	and.w	r3, r3, #16
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 813c 	beq.w	800bbda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b962:	2300      	movs	r3, #0
 800b964:	60bb      	str	r3, [r7, #8]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	60bb      	str	r3, [r7, #8]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	60bb      	str	r3, [r7, #8]
 800b976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b982:	2b40      	cmp	r3, #64	; 0x40
 800b984:	f040 80b4 	bne.w	800baf0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 8140 	beq.w	800bc1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	f080 8139 	bcs.w	800bc1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9be:	f000 8088 	beq.w	800bad2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	330c      	adds	r3, #12
 800b9c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b9d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	330c      	adds	r3, #12
 800b9ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b9ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b9f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b9fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9fe:	e841 2300 	strex	r3, r2, [r1]
 800ba02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1d9      	bne.n	800b9c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3314      	adds	r3, #20
 800ba14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba20:	f023 0301 	bic.w	r3, r3, #1
 800ba24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3314      	adds	r3, #20
 800ba2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba3e:	e841 2300 	strex	r3, r2, [r1]
 800ba42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e1      	bne.n	800ba0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3314      	adds	r3, #20
 800ba50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3314      	adds	r3, #20
 800ba6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e3      	bne.n	800ba4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	330c      	adds	r3, #12
 800ba96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba9a:	e853 3f00 	ldrex	r3, [r3]
 800ba9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800baa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baa2:	f023 0310 	bic.w	r3, r3, #16
 800baa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	330c      	adds	r3, #12
 800bab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bab4:	65ba      	str	r2, [r7, #88]	; 0x58
 800bab6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800baba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e3      	bne.n	800ba90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fb fe6f 	bl	80077b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bada:	b29b      	uxth	r3, r3
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	b29b      	uxth	r3, r3
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f8b6 	bl	800bc54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bae8:	e099      	b.n	800bc1e <HAL_UART_IRQHandler+0x50e>
 800baea:	bf00      	nop
 800baec:	0800be83 	.word	0x0800be83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 808b 	beq.w	800bc22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bb0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 8086 	beq.w	800bc22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	330c      	adds	r3, #12
 800bb1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	e853 3f00 	ldrex	r3, [r3]
 800bb24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	330c      	adds	r3, #12
 800bb36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bb3a:	647a      	str	r2, [r7, #68]	; 0x44
 800bb3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e3      	bne.n	800bb16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3314      	adds	r3, #20
 800bb54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb58:	e853 3f00 	ldrex	r3, [r3]
 800bb5c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	f023 0301 	bic.w	r3, r3, #1
 800bb64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3314      	adds	r3, #20
 800bb6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb72:	633a      	str	r2, [r7, #48]	; 0x30
 800bb74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e3      	bne.n	800bb4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	330c      	adds	r3, #12
 800bb9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	e853 3f00 	ldrex	r3, [r3]
 800bba2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0310 	bic.w	r3, r3, #16
 800bbaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	330c      	adds	r3, #12
 800bbb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bbb8:	61fa      	str	r2, [r7, #28]
 800bbba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbc:	69b9      	ldr	r1, [r7, #24]
 800bbbe:	69fa      	ldr	r2, [r7, #28]
 800bbc0:	e841 2300 	strex	r3, r2, [r1]
 800bbc4:	617b      	str	r3, [r7, #20]
   return(result);
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e3      	bne.n	800bb94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bbcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f83e 	bl	800bc54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbd8:	e023      	b.n	800bc22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bbda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d009      	beq.n	800bbfa <HAL_UART_IRQHandler+0x4ea>
 800bbe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f959 	bl	800beaa <UART_Transmit_IT>
    return;
 800bbf8:	e014      	b.n	800bc24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00e      	beq.n	800bc24 <HAL_UART_IRQHandler+0x514>
 800bc06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d008      	beq.n	800bc24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f999 	bl	800bf4a <UART_EndTransmit_IT>
    return;
 800bc18:	e004      	b.n	800bc24 <HAL_UART_IRQHandler+0x514>
    return;
 800bc1a:	bf00      	nop
 800bc1c:	e002      	b.n	800bc24 <HAL_UART_IRQHandler+0x514>
      return;
 800bc1e:	bf00      	nop
 800bc20:	e000      	b.n	800bc24 <HAL_UART_IRQHandler+0x514>
      return;
 800bc22:	bf00      	nop
  }
}
 800bc24:	37e8      	adds	r7, #232	; 0xe8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop

0800bc2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b090      	sub	sp, #64	; 0x40
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	603b      	str	r3, [r7, #0]
 800bc78:	4613      	mov	r3, r2
 800bc7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc7c:	e050      	b.n	800bd20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc84:	d04c      	beq.n	800bd20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bc86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d007      	beq.n	800bc9c <UART_WaitOnFlagUntilTimeout+0x30>
 800bc8c:	f7fa ff36 	bl	8006afc <HAL_GetTick>
 800bc90:	4602      	mov	r2, r0
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d241      	bcs.n	800bd20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	330c      	adds	r3, #12
 800bca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	e853 3f00 	ldrex	r3, [r3]
 800bcaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	330c      	adds	r3, #12
 800bcba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcbc:	637a      	str	r2, [r7, #52]	; 0x34
 800bcbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcc4:	e841 2300 	strex	r3, r2, [r1]
 800bcc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1e5      	bne.n	800bc9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3314      	adds	r3, #20
 800bcd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	e853 3f00 	ldrex	r3, [r3]
 800bcde:	613b      	str	r3, [r7, #16]
   return(result);
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f023 0301 	bic.w	r3, r3, #1
 800bce6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3314      	adds	r3, #20
 800bcee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcf0:	623a      	str	r2, [r7, #32]
 800bcf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf4:	69f9      	ldr	r1, [r7, #28]
 800bcf6:	6a3a      	ldr	r2, [r7, #32]
 800bcf8:	e841 2300 	strex	r3, r2, [r1]
 800bcfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1e5      	bne.n	800bcd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2220      	movs	r2, #32
 800bd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2220      	movs	r2, #32
 800bd10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e00f      	b.n	800bd40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	4013      	ands	r3, r2
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	bf0c      	ite	eq
 800bd30:	2301      	moveq	r3, #1
 800bd32:	2300      	movne	r3, #0
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	461a      	mov	r2, r3
 800bd38:	79fb      	ldrb	r3, [r7, #7]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d09f      	beq.n	800bc7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3740      	adds	r7, #64	; 0x40
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	4613      	mov	r3, r2
 800bd54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	68ba      	ldr	r2, [r7, #8]
 800bd5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	88fa      	ldrh	r2, [r7, #6]
 800bd60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	88fa      	ldrh	r2, [r7, #6]
 800bd66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2222      	movs	r2, #34	; 0x22
 800bd72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd8c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	695a      	ldr	r2, [r3, #20]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f042 0201 	orr.w	r2, r2, #1
 800bd9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68da      	ldr	r2, [r3, #12]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f042 0220 	orr.w	r2, r2, #32
 800bdac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b095      	sub	sp, #84	; 0x54
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	330c      	adds	r3, #12
 800bdca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	330c      	adds	r3, #12
 800bde2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bde4:	643a      	str	r2, [r7, #64]	; 0x40
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdec:	e841 2300 	strex	r3, r2, [r1]
 800bdf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1e5      	bne.n	800bdc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3314      	adds	r3, #20
 800bdfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be00:	6a3b      	ldr	r3, [r7, #32]
 800be02:	e853 3f00 	ldrex	r3, [r3]
 800be06:	61fb      	str	r3, [r7, #28]
   return(result);
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	f023 0301 	bic.w	r3, r3, #1
 800be0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3314      	adds	r3, #20
 800be16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be18:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be20:	e841 2300 	strex	r3, r2, [r1]
 800be24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1e5      	bne.n	800bdf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	2b01      	cmp	r3, #1
 800be32:	d119      	bne.n	800be68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	330c      	adds	r3, #12
 800be3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	60bb      	str	r3, [r7, #8]
   return(result);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f023 0310 	bic.w	r3, r3, #16
 800be4a:	647b      	str	r3, [r7, #68]	; 0x44
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	330c      	adds	r3, #12
 800be52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be54:	61ba      	str	r2, [r7, #24]
 800be56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be58:	6979      	ldr	r1, [r7, #20]
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	e841 2300 	strex	r3, r2, [r1]
 800be60:	613b      	str	r3, [r7, #16]
   return(result);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e5      	bne.n	800be34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be76:	bf00      	nop
 800be78:	3754      	adds	r7, #84	; 0x54
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f7ff fecf 	bl	800bc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bea2:	bf00      	nop
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800beaa:	b480      	push	{r7}
 800beac:	b085      	sub	sp, #20
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b21      	cmp	r3, #33	; 0x21
 800bebc:	d13e      	bne.n	800bf3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec6:	d114      	bne.n	800bef2 <UART_Transmit_IT+0x48>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d110      	bne.n	800bef2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bee4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	1c9a      	adds	r2, r3, #2
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	621a      	str	r2, [r3, #32]
 800bef0:	e008      	b.n	800bf04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	1c59      	adds	r1, r3, #1
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	6211      	str	r1, [r2, #32]
 800befc:	781a      	ldrb	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	4619      	mov	r1, r3
 800bf12:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10f      	bne.n	800bf38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68da      	ldr	r2, [r3, #12]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68da      	ldr	r2, [r3, #12]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e000      	b.n	800bf3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf3c:	2302      	movs	r3, #2
  }
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2220      	movs	r2, #32
 800bf66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff fe5e 	bl	800bc2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b08c      	sub	sp, #48	; 0x30
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b22      	cmp	r3, #34	; 0x22
 800bf8c:	f040 80ab 	bne.w	800c0e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf98:	d117      	bne.n	800bfca <UART_Receive_IT+0x50>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d113      	bne.n	800bfca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc2:	1c9a      	adds	r2, r3, #2
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	629a      	str	r2, [r3, #40]	; 0x28
 800bfc8:	e026      	b.n	800c018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfdc:	d007      	beq.n	800bfee <UART_Receive_IT+0x74>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d10a      	bne.n	800bffc <UART_Receive_IT+0x82>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d106      	bne.n	800bffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	701a      	strb	r2, [r3, #0]
 800bffa:	e008      	b.n	800c00e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c012:	1c5a      	adds	r2, r3, #1
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	b29b      	uxth	r3, r3
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	4619      	mov	r1, r3
 800c026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d15a      	bne.n	800c0e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68da      	ldr	r2, [r3, #12]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f022 0220 	bic.w	r2, r2, #32
 800c03a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68da      	ldr	r2, [r3, #12]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c04a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	695a      	ldr	r2, [r3, #20]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f022 0201 	bic.w	r2, r2, #1
 800c05a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2220      	movs	r2, #32
 800c060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d135      	bne.n	800c0d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	330c      	adds	r3, #12
 800c078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	613b      	str	r3, [r7, #16]
   return(result);
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f023 0310 	bic.w	r3, r3, #16
 800c088:	627b      	str	r3, [r7, #36]	; 0x24
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	330c      	adds	r3, #12
 800c090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c092:	623a      	str	r2, [r7, #32]
 800c094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	69f9      	ldr	r1, [r7, #28]
 800c098:	6a3a      	ldr	r2, [r7, #32]
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e5      	bne.n	800c072 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 0310 	and.w	r3, r3, #16
 800c0b0:	2b10      	cmp	r3, #16
 800c0b2:	d10a      	bne.n	800c0ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff fdbf 	bl	800bc54 <HAL_UARTEx_RxEventCallback>
 800c0d6:	e002      	b.n	800c0de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7fa fb47 	bl	800676c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	e002      	b.n	800c0e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e000      	b.n	800c0e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c0e6:	2302      	movs	r3, #2
  }
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3730      	adds	r7, #48	; 0x30
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	b09f      	sub	sp, #124	; 0x7c
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c106:	68d9      	ldr	r1, [r3, #12]
 800c108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	ea40 0301 	orr.w	r3, r0, r1
 800c110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c114:	689a      	ldr	r2, [r3, #8]
 800c116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	431a      	orrs	r2, r3
 800c11c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	431a      	orrs	r2, r3
 800c122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c124:	69db      	ldr	r3, [r3, #28]
 800c126:	4313      	orrs	r3, r2
 800c128:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c12a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c134:	f021 010c 	bic.w	r1, r1, #12
 800c138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c13e:	430b      	orrs	r3, r1
 800c140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c14e:	6999      	ldr	r1, [r3, #24]
 800c150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	ea40 0301 	orr.w	r3, r0, r1
 800c158:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c15a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	4bc5      	ldr	r3, [pc, #788]	; (800c474 <UART_SetConfig+0x384>)
 800c160:	429a      	cmp	r2, r3
 800c162:	d004      	beq.n	800c16e <UART_SetConfig+0x7e>
 800c164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	4bc3      	ldr	r3, [pc, #780]	; (800c478 <UART_SetConfig+0x388>)
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d103      	bne.n	800c176 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c16e:	f7fd fc09 	bl	8009984 <HAL_RCC_GetPCLK2Freq>
 800c172:	6778      	str	r0, [r7, #116]	; 0x74
 800c174:	e002      	b.n	800c17c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c176:	f7fd fbf1 	bl	800995c <HAL_RCC_GetPCLK1Freq>
 800c17a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c184:	f040 80b6 	bne.w	800c2f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c18a:	461c      	mov	r4, r3
 800c18c:	f04f 0500 	mov.w	r5, #0
 800c190:	4622      	mov	r2, r4
 800c192:	462b      	mov	r3, r5
 800c194:	1891      	adds	r1, r2, r2
 800c196:	6439      	str	r1, [r7, #64]	; 0x40
 800c198:	415b      	adcs	r3, r3
 800c19a:	647b      	str	r3, [r7, #68]	; 0x44
 800c19c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c1a0:	1912      	adds	r2, r2, r4
 800c1a2:	eb45 0303 	adc.w	r3, r5, r3
 800c1a6:	f04f 0000 	mov.w	r0, #0
 800c1aa:	f04f 0100 	mov.w	r1, #0
 800c1ae:	00d9      	lsls	r1, r3, #3
 800c1b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c1b4:	00d0      	lsls	r0, r2, #3
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	1911      	adds	r1, r2, r4
 800c1bc:	6639      	str	r1, [r7, #96]	; 0x60
 800c1be:	416b      	adcs	r3, r5
 800c1c0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	f04f 0300 	mov.w	r3, #0
 800c1cc:	1891      	adds	r1, r2, r2
 800c1ce:	63b9      	str	r1, [r7, #56]	; 0x38
 800c1d0:	415b      	adcs	r3, r3
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c1d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c1dc:	f7f4 fd54 	bl	8000c88 <__aeabi_uldivmod>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4ba5      	ldr	r3, [pc, #660]	; (800c47c <UART_SetConfig+0x38c>)
 800c1e6:	fba3 2302 	umull	r2, r3, r3, r2
 800c1ea:	095b      	lsrs	r3, r3, #5
 800c1ec:	011e      	lsls	r6, r3, #4
 800c1ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1f0:	461c      	mov	r4, r3
 800c1f2:	f04f 0500 	mov.w	r5, #0
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	462b      	mov	r3, r5
 800c1fa:	1891      	adds	r1, r2, r2
 800c1fc:	6339      	str	r1, [r7, #48]	; 0x30
 800c1fe:	415b      	adcs	r3, r3
 800c200:	637b      	str	r3, [r7, #52]	; 0x34
 800c202:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c206:	1912      	adds	r2, r2, r4
 800c208:	eb45 0303 	adc.w	r3, r5, r3
 800c20c:	f04f 0000 	mov.w	r0, #0
 800c210:	f04f 0100 	mov.w	r1, #0
 800c214:	00d9      	lsls	r1, r3, #3
 800c216:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c21a:	00d0      	lsls	r0, r2, #3
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	1911      	adds	r1, r2, r4
 800c222:	65b9      	str	r1, [r7, #88]	; 0x58
 800c224:	416b      	adcs	r3, r5
 800c226:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	461a      	mov	r2, r3
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	1891      	adds	r1, r2, r2
 800c234:	62b9      	str	r1, [r7, #40]	; 0x28
 800c236:	415b      	adcs	r3, r3
 800c238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c23a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c23e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c242:	f7f4 fd21 	bl	8000c88 <__aeabi_uldivmod>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	4b8c      	ldr	r3, [pc, #560]	; (800c47c <UART_SetConfig+0x38c>)
 800c24c:	fba3 1302 	umull	r1, r3, r3, r2
 800c250:	095b      	lsrs	r3, r3, #5
 800c252:	2164      	movs	r1, #100	; 0x64
 800c254:	fb01 f303 	mul.w	r3, r1, r3
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	3332      	adds	r3, #50	; 0x32
 800c25e:	4a87      	ldr	r2, [pc, #540]	; (800c47c <UART_SetConfig+0x38c>)
 800c260:	fba2 2303 	umull	r2, r3, r2, r3
 800c264:	095b      	lsrs	r3, r3, #5
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c26c:	441e      	add	r6, r3
 800c26e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c270:	4618      	mov	r0, r3
 800c272:	f04f 0100 	mov.w	r1, #0
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	1894      	adds	r4, r2, r2
 800c27c:	623c      	str	r4, [r7, #32]
 800c27e:	415b      	adcs	r3, r3
 800c280:	627b      	str	r3, [r7, #36]	; 0x24
 800c282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c286:	1812      	adds	r2, r2, r0
 800c288:	eb41 0303 	adc.w	r3, r1, r3
 800c28c:	f04f 0400 	mov.w	r4, #0
 800c290:	f04f 0500 	mov.w	r5, #0
 800c294:	00dd      	lsls	r5, r3, #3
 800c296:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c29a:	00d4      	lsls	r4, r2, #3
 800c29c:	4622      	mov	r2, r4
 800c29e:	462b      	mov	r3, r5
 800c2a0:	1814      	adds	r4, r2, r0
 800c2a2:	653c      	str	r4, [r7, #80]	; 0x50
 800c2a4:	414b      	adcs	r3, r1
 800c2a6:	657b      	str	r3, [r7, #84]	; 0x54
 800c2a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	1891      	adds	r1, r2, r2
 800c2b4:	61b9      	str	r1, [r7, #24]
 800c2b6:	415b      	adcs	r3, r3
 800c2b8:	61fb      	str	r3, [r7, #28]
 800c2ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c2be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c2c2:	f7f4 fce1 	bl	8000c88 <__aeabi_uldivmod>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4b6c      	ldr	r3, [pc, #432]	; (800c47c <UART_SetConfig+0x38c>)
 800c2cc:	fba3 1302 	umull	r1, r3, r3, r2
 800c2d0:	095b      	lsrs	r3, r3, #5
 800c2d2:	2164      	movs	r1, #100	; 0x64
 800c2d4:	fb01 f303 	mul.w	r3, r1, r3
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	3332      	adds	r3, #50	; 0x32
 800c2de:	4a67      	ldr	r2, [pc, #412]	; (800c47c <UART_SetConfig+0x38c>)
 800c2e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e4:	095b      	lsrs	r3, r3, #5
 800c2e6:	f003 0207 	and.w	r2, r3, #7
 800c2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4432      	add	r2, r6
 800c2f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c2f2:	e0b9      	b.n	800c468 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2f6:	461c      	mov	r4, r3
 800c2f8:	f04f 0500 	mov.w	r5, #0
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	462b      	mov	r3, r5
 800c300:	1891      	adds	r1, r2, r2
 800c302:	6139      	str	r1, [r7, #16]
 800c304:	415b      	adcs	r3, r3
 800c306:	617b      	str	r3, [r7, #20]
 800c308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c30c:	1912      	adds	r2, r2, r4
 800c30e:	eb45 0303 	adc.w	r3, r5, r3
 800c312:	f04f 0000 	mov.w	r0, #0
 800c316:	f04f 0100 	mov.w	r1, #0
 800c31a:	00d9      	lsls	r1, r3, #3
 800c31c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c320:	00d0      	lsls	r0, r2, #3
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	eb12 0804 	adds.w	r8, r2, r4
 800c32a:	eb43 0905 	adc.w	r9, r3, r5
 800c32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	4618      	mov	r0, r3
 800c334:	f04f 0100 	mov.w	r1, #0
 800c338:	f04f 0200 	mov.w	r2, #0
 800c33c:	f04f 0300 	mov.w	r3, #0
 800c340:	008b      	lsls	r3, r1, #2
 800c342:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c346:	0082      	lsls	r2, r0, #2
 800c348:	4640      	mov	r0, r8
 800c34a:	4649      	mov	r1, r9
 800c34c:	f7f4 fc9c 	bl	8000c88 <__aeabi_uldivmod>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4b49      	ldr	r3, [pc, #292]	; (800c47c <UART_SetConfig+0x38c>)
 800c356:	fba3 2302 	umull	r2, r3, r3, r2
 800c35a:	095b      	lsrs	r3, r3, #5
 800c35c:	011e      	lsls	r6, r3, #4
 800c35e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c360:	4618      	mov	r0, r3
 800c362:	f04f 0100 	mov.w	r1, #0
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	1894      	adds	r4, r2, r2
 800c36c:	60bc      	str	r4, [r7, #8]
 800c36e:	415b      	adcs	r3, r3
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c376:	1812      	adds	r2, r2, r0
 800c378:	eb41 0303 	adc.w	r3, r1, r3
 800c37c:	f04f 0400 	mov.w	r4, #0
 800c380:	f04f 0500 	mov.w	r5, #0
 800c384:	00dd      	lsls	r5, r3, #3
 800c386:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c38a:	00d4      	lsls	r4, r2, #3
 800c38c:	4622      	mov	r2, r4
 800c38e:	462b      	mov	r3, r5
 800c390:	1814      	adds	r4, r2, r0
 800c392:	64bc      	str	r4, [r7, #72]	; 0x48
 800c394:	414b      	adcs	r3, r1
 800c396:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f04f 0100 	mov.w	r1, #0
 800c3a2:	f04f 0200 	mov.w	r2, #0
 800c3a6:	f04f 0300 	mov.w	r3, #0
 800c3aa:	008b      	lsls	r3, r1, #2
 800c3ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c3b0:	0082      	lsls	r2, r0, #2
 800c3b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c3b6:	f7f4 fc67 	bl	8000c88 <__aeabi_uldivmod>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4b2f      	ldr	r3, [pc, #188]	; (800c47c <UART_SetConfig+0x38c>)
 800c3c0:	fba3 1302 	umull	r1, r3, r3, r2
 800c3c4:	095b      	lsrs	r3, r3, #5
 800c3c6:	2164      	movs	r1, #100	; 0x64
 800c3c8:	fb01 f303 	mul.w	r3, r1, r3
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	011b      	lsls	r3, r3, #4
 800c3d0:	3332      	adds	r3, #50	; 0x32
 800c3d2:	4a2a      	ldr	r2, [pc, #168]	; (800c47c <UART_SetConfig+0x38c>)
 800c3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d8:	095b      	lsrs	r3, r3, #5
 800c3da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3de:	441e      	add	r6, r3
 800c3e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f04f 0100 	mov.w	r1, #0
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	1894      	adds	r4, r2, r2
 800c3ee:	603c      	str	r4, [r7, #0]
 800c3f0:	415b      	adcs	r3, r3
 800c3f2:	607b      	str	r3, [r7, #4]
 800c3f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f8:	1812      	adds	r2, r2, r0
 800c3fa:	eb41 0303 	adc.w	r3, r1, r3
 800c3fe:	f04f 0400 	mov.w	r4, #0
 800c402:	f04f 0500 	mov.w	r5, #0
 800c406:	00dd      	lsls	r5, r3, #3
 800c408:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c40c:	00d4      	lsls	r4, r2, #3
 800c40e:	4622      	mov	r2, r4
 800c410:	462b      	mov	r3, r5
 800c412:	eb12 0a00 	adds.w	sl, r2, r0
 800c416:	eb43 0b01 	adc.w	fp, r3, r1
 800c41a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	4618      	mov	r0, r3
 800c420:	f04f 0100 	mov.w	r1, #0
 800c424:	f04f 0200 	mov.w	r2, #0
 800c428:	f04f 0300 	mov.w	r3, #0
 800c42c:	008b      	lsls	r3, r1, #2
 800c42e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c432:	0082      	lsls	r2, r0, #2
 800c434:	4650      	mov	r0, sl
 800c436:	4659      	mov	r1, fp
 800c438:	f7f4 fc26 	bl	8000c88 <__aeabi_uldivmod>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	4b0e      	ldr	r3, [pc, #56]	; (800c47c <UART_SetConfig+0x38c>)
 800c442:	fba3 1302 	umull	r1, r3, r3, r2
 800c446:	095b      	lsrs	r3, r3, #5
 800c448:	2164      	movs	r1, #100	; 0x64
 800c44a:	fb01 f303 	mul.w	r3, r1, r3
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	3332      	adds	r3, #50	; 0x32
 800c454:	4a09      	ldr	r2, [pc, #36]	; (800c47c <UART_SetConfig+0x38c>)
 800c456:	fba2 2303 	umull	r2, r3, r2, r3
 800c45a:	095b      	lsrs	r3, r3, #5
 800c45c:	f003 020f 	and.w	r2, r3, #15
 800c460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4432      	add	r2, r6
 800c466:	609a      	str	r2, [r3, #8]
}
 800c468:	bf00      	nop
 800c46a:	377c      	adds	r7, #124	; 0x7c
 800c46c:	46bd      	mov	sp, r7
 800c46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c472:	bf00      	nop
 800c474:	40011000 	.word	0x40011000
 800c478:	40011400 	.word	0x40011400
 800c47c:	51eb851f 	.word	0x51eb851f

0800c480 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c498:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	4b20      	ldr	r3, [pc, #128]	; (800c520 <FSMC_NORSRAM_Init+0xa0>)
 800c49e:	4013      	ands	r3, r2
 800c4a0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c4aa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c4b0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c4b6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c4bc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800c4c2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800c4c8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c4ce:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800c4d4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800c4da:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800c4e0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800c4e6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800c4ec:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	2b08      	cmp	r3, #8
 800c4fa:	d103      	bne.n	800c504 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c502:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68f9      	ldr	r1, [r7, #12]
 800c50c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3714      	adds	r7, #20
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	fff00080 	.word	0xfff00080

0800c524 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c524:	b480      	push	{r7}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c530:	2300      	movs	r3, #0
 800c532:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	1c5a      	adds	r2, r3, #1
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c53e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c546:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c552:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c55a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c562:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	3b01      	subs	r3, #1
 800c56a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c56c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	3b02      	subs	r3, #2
 800c574:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c576:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c57c:	4313      	orrs	r3, r2
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	4313      	orrs	r3, r2
 800c582:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6979      	ldr	r1, [r7, #20]
 800c58c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	371c      	adds	r7, #28
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
	...

0800c5a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b087      	sub	sp, #28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5b8:	d122      	bne.n	800c600 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800c5c4:	697a      	ldr	r2, [r7, #20]
 800c5c6:	4b15      	ldr	r3, [pc, #84]	; (800c61c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c5d6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c5de:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800c5e6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c5ec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	6979      	ldr	r1, [r7, #20]
 800c5fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c5fe:	e005      	b.n	800c60c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	cff00000 	.word	0xcff00000

0800c620 <__errno>:
 800c620:	4b01      	ldr	r3, [pc, #4]	; (800c628 <__errno+0x8>)
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	200000ac 	.word	0x200000ac

0800c62c <__libc_init_array>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	4d0d      	ldr	r5, [pc, #52]	; (800c664 <__libc_init_array+0x38>)
 800c630:	4c0d      	ldr	r4, [pc, #52]	; (800c668 <__libc_init_array+0x3c>)
 800c632:	1b64      	subs	r4, r4, r5
 800c634:	10a4      	asrs	r4, r4, #2
 800c636:	2600      	movs	r6, #0
 800c638:	42a6      	cmp	r6, r4
 800c63a:	d109      	bne.n	800c650 <__libc_init_array+0x24>
 800c63c:	4d0b      	ldr	r5, [pc, #44]	; (800c66c <__libc_init_array+0x40>)
 800c63e:	4c0c      	ldr	r4, [pc, #48]	; (800c670 <__libc_init_array+0x44>)
 800c640:	f002 f870 	bl	800e724 <_init>
 800c644:	1b64      	subs	r4, r4, r5
 800c646:	10a4      	asrs	r4, r4, #2
 800c648:	2600      	movs	r6, #0
 800c64a:	42a6      	cmp	r6, r4
 800c64c:	d105      	bne.n	800c65a <__libc_init_array+0x2e>
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	f855 3b04 	ldr.w	r3, [r5], #4
 800c654:	4798      	blx	r3
 800c656:	3601      	adds	r6, #1
 800c658:	e7ee      	b.n	800c638 <__libc_init_array+0xc>
 800c65a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c65e:	4798      	blx	r3
 800c660:	3601      	adds	r6, #1
 800c662:	e7f2      	b.n	800c64a <__libc_init_array+0x1e>
 800c664:	080e9e40 	.word	0x080e9e40
 800c668:	080e9e40 	.word	0x080e9e40
 800c66c:	080e9e40 	.word	0x080e9e40
 800c670:	080e9e44 	.word	0x080e9e44

0800c674 <__itoa>:
 800c674:	1e93      	subs	r3, r2, #2
 800c676:	2b22      	cmp	r3, #34	; 0x22
 800c678:	b510      	push	{r4, lr}
 800c67a:	460c      	mov	r4, r1
 800c67c:	d904      	bls.n	800c688 <__itoa+0x14>
 800c67e:	2300      	movs	r3, #0
 800c680:	700b      	strb	r3, [r1, #0]
 800c682:	461c      	mov	r4, r3
 800c684:	4620      	mov	r0, r4
 800c686:	bd10      	pop	{r4, pc}
 800c688:	2a0a      	cmp	r2, #10
 800c68a:	d109      	bne.n	800c6a0 <__itoa+0x2c>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	da07      	bge.n	800c6a0 <__itoa+0x2c>
 800c690:	232d      	movs	r3, #45	; 0x2d
 800c692:	700b      	strb	r3, [r1, #0]
 800c694:	4240      	negs	r0, r0
 800c696:	2101      	movs	r1, #1
 800c698:	4421      	add	r1, r4
 800c69a:	f000 f855 	bl	800c748 <__utoa>
 800c69e:	e7f1      	b.n	800c684 <__itoa+0x10>
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	e7f9      	b.n	800c698 <__itoa+0x24>

0800c6a4 <itoa>:
 800c6a4:	f7ff bfe6 	b.w	800c674 <__itoa>

0800c6a8 <memset>:
 800c6a8:	4402      	add	r2, r0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d100      	bne.n	800c6b2 <memset+0xa>
 800c6b0:	4770      	bx	lr
 800c6b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6b6:	e7f9      	b.n	800c6ac <memset+0x4>

0800c6b8 <rand>:
 800c6b8:	4b17      	ldr	r3, [pc, #92]	; (800c718 <rand+0x60>)
 800c6ba:	b510      	push	{r4, lr}
 800c6bc:	681c      	ldr	r4, [r3, #0]
 800c6be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c6c0:	b9b3      	cbnz	r3, 800c6f0 <rand+0x38>
 800c6c2:	2018      	movs	r0, #24
 800c6c4:	f000 f8b2 	bl	800c82c <malloc>
 800c6c8:	63a0      	str	r0, [r4, #56]	; 0x38
 800c6ca:	b928      	cbnz	r0, 800c6d8 <rand+0x20>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	4b13      	ldr	r3, [pc, #76]	; (800c71c <rand+0x64>)
 800c6d0:	4813      	ldr	r0, [pc, #76]	; (800c720 <rand+0x68>)
 800c6d2:	214e      	movs	r1, #78	; 0x4e
 800c6d4:	f000 f87a 	bl	800c7cc <__assert_func>
 800c6d8:	4a12      	ldr	r2, [pc, #72]	; (800c724 <rand+0x6c>)
 800c6da:	4b13      	ldr	r3, [pc, #76]	; (800c728 <rand+0x70>)
 800c6dc:	e9c0 2300 	strd	r2, r3, [r0]
 800c6e0:	4b12      	ldr	r3, [pc, #72]	; (800c72c <rand+0x74>)
 800c6e2:	6083      	str	r3, [r0, #8]
 800c6e4:	230b      	movs	r3, #11
 800c6e6:	8183      	strh	r3, [r0, #12]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c6f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c6f2:	480f      	ldr	r0, [pc, #60]	; (800c730 <rand+0x78>)
 800c6f4:	690a      	ldr	r2, [r1, #16]
 800c6f6:	694b      	ldr	r3, [r1, #20]
 800c6f8:	4c0e      	ldr	r4, [pc, #56]	; (800c734 <rand+0x7c>)
 800c6fa:	4350      	muls	r0, r2
 800c6fc:	fb04 0003 	mla	r0, r4, r3, r0
 800c700:	fba2 3404 	umull	r3, r4, r2, r4
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	4404      	add	r4, r0
 800c708:	f144 0000 	adc.w	r0, r4, #0
 800c70c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c710:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c714:	bd10      	pop	{r4, pc}
 800c716:	bf00      	nop
 800c718:	200000ac 	.word	0x200000ac
 800c71c:	080e9c88 	.word	0x080e9c88
 800c720:	080e9c9f 	.word	0x080e9c9f
 800c724:	abcd330e 	.word	0xabcd330e
 800c728:	e66d1234 	.word	0xe66d1234
 800c72c:	0005deec 	.word	0x0005deec
 800c730:	5851f42d 	.word	0x5851f42d
 800c734:	4c957f2d 	.word	0x4c957f2d

0800c738 <strcpy>:
 800c738:	4603      	mov	r3, r0
 800c73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c73e:	f803 2b01 	strb.w	r2, [r3], #1
 800c742:	2a00      	cmp	r2, #0
 800c744:	d1f9      	bne.n	800c73a <strcpy+0x2>
 800c746:	4770      	bx	lr

0800c748 <__utoa>:
 800c748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c74a:	4c1f      	ldr	r4, [pc, #124]	; (800c7c8 <__utoa+0x80>)
 800c74c:	b08b      	sub	sp, #44	; 0x2c
 800c74e:	4605      	mov	r5, r0
 800c750:	460b      	mov	r3, r1
 800c752:	466e      	mov	r6, sp
 800c754:	f104 0c20 	add.w	ip, r4, #32
 800c758:	6820      	ldr	r0, [r4, #0]
 800c75a:	6861      	ldr	r1, [r4, #4]
 800c75c:	4637      	mov	r7, r6
 800c75e:	c703      	stmia	r7!, {r0, r1}
 800c760:	3408      	adds	r4, #8
 800c762:	4564      	cmp	r4, ip
 800c764:	463e      	mov	r6, r7
 800c766:	d1f7      	bne.n	800c758 <__utoa+0x10>
 800c768:	7921      	ldrb	r1, [r4, #4]
 800c76a:	7139      	strb	r1, [r7, #4]
 800c76c:	1e91      	subs	r1, r2, #2
 800c76e:	6820      	ldr	r0, [r4, #0]
 800c770:	6038      	str	r0, [r7, #0]
 800c772:	2922      	cmp	r1, #34	; 0x22
 800c774:	f04f 0100 	mov.w	r1, #0
 800c778:	d904      	bls.n	800c784 <__utoa+0x3c>
 800c77a:	7019      	strb	r1, [r3, #0]
 800c77c:	460b      	mov	r3, r1
 800c77e:	4618      	mov	r0, r3
 800c780:	b00b      	add	sp, #44	; 0x2c
 800c782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c784:	1e58      	subs	r0, r3, #1
 800c786:	4684      	mov	ip, r0
 800c788:	fbb5 f7f2 	udiv	r7, r5, r2
 800c78c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c790:	fb02 5617 	mls	r6, r2, r7, r5
 800c794:	4476      	add	r6, lr
 800c796:	460c      	mov	r4, r1
 800c798:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c79c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c7a0:	462e      	mov	r6, r5
 800c7a2:	42b2      	cmp	r2, r6
 800c7a4:	f101 0101 	add.w	r1, r1, #1
 800c7a8:	463d      	mov	r5, r7
 800c7aa:	d9ed      	bls.n	800c788 <__utoa+0x40>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	545a      	strb	r2, [r3, r1]
 800c7b0:	1919      	adds	r1, r3, r4
 800c7b2:	1aa5      	subs	r5, r4, r2
 800c7b4:	42aa      	cmp	r2, r5
 800c7b6:	dae2      	bge.n	800c77e <__utoa+0x36>
 800c7b8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c7bc:	780e      	ldrb	r6, [r1, #0]
 800c7be:	7006      	strb	r6, [r0, #0]
 800c7c0:	3201      	adds	r2, #1
 800c7c2:	f801 5901 	strb.w	r5, [r1], #-1
 800c7c6:	e7f4      	b.n	800c7b2 <__utoa+0x6a>
 800c7c8:	080e9cfe 	.word	0x080e9cfe

0800c7cc <__assert_func>:
 800c7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7ce:	4614      	mov	r4, r2
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <__assert_func+0x2c>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	68d8      	ldr	r0, [r3, #12]
 800c7da:	b14c      	cbz	r4, 800c7f0 <__assert_func+0x24>
 800c7dc:	4b07      	ldr	r3, [pc, #28]	; (800c7fc <__assert_func+0x30>)
 800c7de:	9100      	str	r1, [sp, #0]
 800c7e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7e4:	4906      	ldr	r1, [pc, #24]	; (800c800 <__assert_func+0x34>)
 800c7e6:	462b      	mov	r3, r5
 800c7e8:	f000 f80e 	bl	800c808 <fiprintf>
 800c7ec:	f000 fc8e 	bl	800d10c <abort>
 800c7f0:	4b04      	ldr	r3, [pc, #16]	; (800c804 <__assert_func+0x38>)
 800c7f2:	461c      	mov	r4, r3
 800c7f4:	e7f3      	b.n	800c7de <__assert_func+0x12>
 800c7f6:	bf00      	nop
 800c7f8:	200000ac 	.word	0x200000ac
 800c7fc:	080e9d23 	.word	0x080e9d23
 800c800:	080e9d30 	.word	0x080e9d30
 800c804:	080e9d5e 	.word	0x080e9d5e

0800c808 <fiprintf>:
 800c808:	b40e      	push	{r1, r2, r3}
 800c80a:	b503      	push	{r0, r1, lr}
 800c80c:	4601      	mov	r1, r0
 800c80e:	ab03      	add	r3, sp, #12
 800c810:	4805      	ldr	r0, [pc, #20]	; (800c828 <fiprintf+0x20>)
 800c812:	f853 2b04 	ldr.w	r2, [r3], #4
 800c816:	6800      	ldr	r0, [r0, #0]
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	f000 f8e3 	bl	800c9e4 <_vfiprintf_r>
 800c81e:	b002      	add	sp, #8
 800c820:	f85d eb04 	ldr.w	lr, [sp], #4
 800c824:	b003      	add	sp, #12
 800c826:	4770      	bx	lr
 800c828:	200000ac 	.word	0x200000ac

0800c82c <malloc>:
 800c82c:	4b02      	ldr	r3, [pc, #8]	; (800c838 <malloc+0xc>)
 800c82e:	4601      	mov	r1, r0
 800c830:	6818      	ldr	r0, [r3, #0]
 800c832:	f000 b853 	b.w	800c8dc <_malloc_r>
 800c836:	bf00      	nop
 800c838:	200000ac 	.word	0x200000ac

0800c83c <_free_r>:
 800c83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c83e:	2900      	cmp	r1, #0
 800c840:	d048      	beq.n	800c8d4 <_free_r+0x98>
 800c842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c846:	9001      	str	r0, [sp, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f1a1 0404 	sub.w	r4, r1, #4
 800c84e:	bfb8      	it	lt
 800c850:	18e4      	addlt	r4, r4, r3
 800c852:	f000 fe81 	bl	800d558 <__malloc_lock>
 800c856:	4a20      	ldr	r2, [pc, #128]	; (800c8d8 <_free_r+0x9c>)
 800c858:	9801      	ldr	r0, [sp, #4]
 800c85a:	6813      	ldr	r3, [r2, #0]
 800c85c:	4615      	mov	r5, r2
 800c85e:	b933      	cbnz	r3, 800c86e <_free_r+0x32>
 800c860:	6063      	str	r3, [r4, #4]
 800c862:	6014      	str	r4, [r2, #0]
 800c864:	b003      	add	sp, #12
 800c866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c86a:	f000 be7b 	b.w	800d564 <__malloc_unlock>
 800c86e:	42a3      	cmp	r3, r4
 800c870:	d90b      	bls.n	800c88a <_free_r+0x4e>
 800c872:	6821      	ldr	r1, [r4, #0]
 800c874:	1862      	adds	r2, r4, r1
 800c876:	4293      	cmp	r3, r2
 800c878:	bf04      	itt	eq
 800c87a:	681a      	ldreq	r2, [r3, #0]
 800c87c:	685b      	ldreq	r3, [r3, #4]
 800c87e:	6063      	str	r3, [r4, #4]
 800c880:	bf04      	itt	eq
 800c882:	1852      	addeq	r2, r2, r1
 800c884:	6022      	streq	r2, [r4, #0]
 800c886:	602c      	str	r4, [r5, #0]
 800c888:	e7ec      	b.n	800c864 <_free_r+0x28>
 800c88a:	461a      	mov	r2, r3
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	b10b      	cbz	r3, 800c894 <_free_r+0x58>
 800c890:	42a3      	cmp	r3, r4
 800c892:	d9fa      	bls.n	800c88a <_free_r+0x4e>
 800c894:	6811      	ldr	r1, [r2, #0]
 800c896:	1855      	adds	r5, r2, r1
 800c898:	42a5      	cmp	r5, r4
 800c89a:	d10b      	bne.n	800c8b4 <_free_r+0x78>
 800c89c:	6824      	ldr	r4, [r4, #0]
 800c89e:	4421      	add	r1, r4
 800c8a0:	1854      	adds	r4, r2, r1
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	6011      	str	r1, [r2, #0]
 800c8a6:	d1dd      	bne.n	800c864 <_free_r+0x28>
 800c8a8:	681c      	ldr	r4, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	6053      	str	r3, [r2, #4]
 800c8ae:	4421      	add	r1, r4
 800c8b0:	6011      	str	r1, [r2, #0]
 800c8b2:	e7d7      	b.n	800c864 <_free_r+0x28>
 800c8b4:	d902      	bls.n	800c8bc <_free_r+0x80>
 800c8b6:	230c      	movs	r3, #12
 800c8b8:	6003      	str	r3, [r0, #0]
 800c8ba:	e7d3      	b.n	800c864 <_free_r+0x28>
 800c8bc:	6825      	ldr	r5, [r4, #0]
 800c8be:	1961      	adds	r1, r4, r5
 800c8c0:	428b      	cmp	r3, r1
 800c8c2:	bf04      	itt	eq
 800c8c4:	6819      	ldreq	r1, [r3, #0]
 800c8c6:	685b      	ldreq	r3, [r3, #4]
 800c8c8:	6063      	str	r3, [r4, #4]
 800c8ca:	bf04      	itt	eq
 800c8cc:	1949      	addeq	r1, r1, r5
 800c8ce:	6021      	streq	r1, [r4, #0]
 800c8d0:	6054      	str	r4, [r2, #4]
 800c8d2:	e7c7      	b.n	800c864 <_free_r+0x28>
 800c8d4:	b003      	add	sp, #12
 800c8d6:	bd30      	pop	{r4, r5, pc}
 800c8d8:	200001a0 	.word	0x200001a0

0800c8dc <_malloc_r>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	1ccd      	adds	r5, r1, #3
 800c8e0:	f025 0503 	bic.w	r5, r5, #3
 800c8e4:	3508      	adds	r5, #8
 800c8e6:	2d0c      	cmp	r5, #12
 800c8e8:	bf38      	it	cc
 800c8ea:	250c      	movcc	r5, #12
 800c8ec:	2d00      	cmp	r5, #0
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	db01      	blt.n	800c8f6 <_malloc_r+0x1a>
 800c8f2:	42a9      	cmp	r1, r5
 800c8f4:	d903      	bls.n	800c8fe <_malloc_r+0x22>
 800c8f6:	230c      	movs	r3, #12
 800c8f8:	6033      	str	r3, [r6, #0]
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8fe:	f000 fe2b 	bl	800d558 <__malloc_lock>
 800c902:	4921      	ldr	r1, [pc, #132]	; (800c988 <_malloc_r+0xac>)
 800c904:	680a      	ldr	r2, [r1, #0]
 800c906:	4614      	mov	r4, r2
 800c908:	b99c      	cbnz	r4, 800c932 <_malloc_r+0x56>
 800c90a:	4f20      	ldr	r7, [pc, #128]	; (800c98c <_malloc_r+0xb0>)
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	b923      	cbnz	r3, 800c91a <_malloc_r+0x3e>
 800c910:	4621      	mov	r1, r4
 800c912:	4630      	mov	r0, r6
 800c914:	f000 fb2a 	bl	800cf6c <_sbrk_r>
 800c918:	6038      	str	r0, [r7, #0]
 800c91a:	4629      	mov	r1, r5
 800c91c:	4630      	mov	r0, r6
 800c91e:	f000 fb25 	bl	800cf6c <_sbrk_r>
 800c922:	1c43      	adds	r3, r0, #1
 800c924:	d123      	bne.n	800c96e <_malloc_r+0x92>
 800c926:	230c      	movs	r3, #12
 800c928:	6033      	str	r3, [r6, #0]
 800c92a:	4630      	mov	r0, r6
 800c92c:	f000 fe1a 	bl	800d564 <__malloc_unlock>
 800c930:	e7e3      	b.n	800c8fa <_malloc_r+0x1e>
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	1b5b      	subs	r3, r3, r5
 800c936:	d417      	bmi.n	800c968 <_malloc_r+0x8c>
 800c938:	2b0b      	cmp	r3, #11
 800c93a:	d903      	bls.n	800c944 <_malloc_r+0x68>
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	441c      	add	r4, r3
 800c940:	6025      	str	r5, [r4, #0]
 800c942:	e004      	b.n	800c94e <_malloc_r+0x72>
 800c944:	6863      	ldr	r3, [r4, #4]
 800c946:	42a2      	cmp	r2, r4
 800c948:	bf0c      	ite	eq
 800c94a:	600b      	streq	r3, [r1, #0]
 800c94c:	6053      	strne	r3, [r2, #4]
 800c94e:	4630      	mov	r0, r6
 800c950:	f000 fe08 	bl	800d564 <__malloc_unlock>
 800c954:	f104 000b 	add.w	r0, r4, #11
 800c958:	1d23      	adds	r3, r4, #4
 800c95a:	f020 0007 	bic.w	r0, r0, #7
 800c95e:	1ac2      	subs	r2, r0, r3
 800c960:	d0cc      	beq.n	800c8fc <_malloc_r+0x20>
 800c962:	1a1b      	subs	r3, r3, r0
 800c964:	50a3      	str	r3, [r4, r2]
 800c966:	e7c9      	b.n	800c8fc <_malloc_r+0x20>
 800c968:	4622      	mov	r2, r4
 800c96a:	6864      	ldr	r4, [r4, #4]
 800c96c:	e7cc      	b.n	800c908 <_malloc_r+0x2c>
 800c96e:	1cc4      	adds	r4, r0, #3
 800c970:	f024 0403 	bic.w	r4, r4, #3
 800c974:	42a0      	cmp	r0, r4
 800c976:	d0e3      	beq.n	800c940 <_malloc_r+0x64>
 800c978:	1a21      	subs	r1, r4, r0
 800c97a:	4630      	mov	r0, r6
 800c97c:	f000 faf6 	bl	800cf6c <_sbrk_r>
 800c980:	3001      	adds	r0, #1
 800c982:	d1dd      	bne.n	800c940 <_malloc_r+0x64>
 800c984:	e7cf      	b.n	800c926 <_malloc_r+0x4a>
 800c986:	bf00      	nop
 800c988:	200001a0 	.word	0x200001a0
 800c98c:	200001a4 	.word	0x200001a4

0800c990 <__sfputc_r>:
 800c990:	6893      	ldr	r3, [r2, #8]
 800c992:	3b01      	subs	r3, #1
 800c994:	2b00      	cmp	r3, #0
 800c996:	b410      	push	{r4}
 800c998:	6093      	str	r3, [r2, #8]
 800c99a:	da08      	bge.n	800c9ae <__sfputc_r+0x1e>
 800c99c:	6994      	ldr	r4, [r2, #24]
 800c99e:	42a3      	cmp	r3, r4
 800c9a0:	db01      	blt.n	800c9a6 <__sfputc_r+0x16>
 800c9a2:	290a      	cmp	r1, #10
 800c9a4:	d103      	bne.n	800c9ae <__sfputc_r+0x1e>
 800c9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9aa:	f000 baef 	b.w	800cf8c <__swbuf_r>
 800c9ae:	6813      	ldr	r3, [r2, #0]
 800c9b0:	1c58      	adds	r0, r3, #1
 800c9b2:	6010      	str	r0, [r2, #0]
 800c9b4:	7019      	strb	r1, [r3, #0]
 800c9b6:	4608      	mov	r0, r1
 800c9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <__sfputs_r>:
 800c9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	460f      	mov	r7, r1
 800c9c4:	4614      	mov	r4, r2
 800c9c6:	18d5      	adds	r5, r2, r3
 800c9c8:	42ac      	cmp	r4, r5
 800c9ca:	d101      	bne.n	800c9d0 <__sfputs_r+0x12>
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	e007      	b.n	800c9e0 <__sfputs_r+0x22>
 800c9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d4:	463a      	mov	r2, r7
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	f7ff ffda 	bl	800c990 <__sfputc_r>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	d1f3      	bne.n	800c9c8 <__sfputs_r+0xa>
 800c9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9e4 <_vfiprintf_r>:
 800c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e8:	460d      	mov	r5, r1
 800c9ea:	b09d      	sub	sp, #116	; 0x74
 800c9ec:	4614      	mov	r4, r2
 800c9ee:	4698      	mov	r8, r3
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	b118      	cbz	r0, 800c9fc <_vfiprintf_r+0x18>
 800c9f4:	6983      	ldr	r3, [r0, #24]
 800c9f6:	b90b      	cbnz	r3, 800c9fc <_vfiprintf_r+0x18>
 800c9f8:	f000 fcaa 	bl	800d350 <__sinit>
 800c9fc:	4b89      	ldr	r3, [pc, #548]	; (800cc24 <_vfiprintf_r+0x240>)
 800c9fe:	429d      	cmp	r5, r3
 800ca00:	d11b      	bne.n	800ca3a <_vfiprintf_r+0x56>
 800ca02:	6875      	ldr	r5, [r6, #4]
 800ca04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca06:	07d9      	lsls	r1, r3, #31
 800ca08:	d405      	bmi.n	800ca16 <_vfiprintf_r+0x32>
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	059a      	lsls	r2, r3, #22
 800ca0e:	d402      	bmi.n	800ca16 <_vfiprintf_r+0x32>
 800ca10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca12:	f000 fd3b 	bl	800d48c <__retarget_lock_acquire_recursive>
 800ca16:	89ab      	ldrh	r3, [r5, #12]
 800ca18:	071b      	lsls	r3, r3, #28
 800ca1a:	d501      	bpl.n	800ca20 <_vfiprintf_r+0x3c>
 800ca1c:	692b      	ldr	r3, [r5, #16]
 800ca1e:	b9eb      	cbnz	r3, 800ca5c <_vfiprintf_r+0x78>
 800ca20:	4629      	mov	r1, r5
 800ca22:	4630      	mov	r0, r6
 800ca24:	f000 fb04 	bl	800d030 <__swsetup_r>
 800ca28:	b1c0      	cbz	r0, 800ca5c <_vfiprintf_r+0x78>
 800ca2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca2c:	07dc      	lsls	r4, r3, #31
 800ca2e:	d50e      	bpl.n	800ca4e <_vfiprintf_r+0x6a>
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295
 800ca34:	b01d      	add	sp, #116	; 0x74
 800ca36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3a:	4b7b      	ldr	r3, [pc, #492]	; (800cc28 <_vfiprintf_r+0x244>)
 800ca3c:	429d      	cmp	r5, r3
 800ca3e:	d101      	bne.n	800ca44 <_vfiprintf_r+0x60>
 800ca40:	68b5      	ldr	r5, [r6, #8]
 800ca42:	e7df      	b.n	800ca04 <_vfiprintf_r+0x20>
 800ca44:	4b79      	ldr	r3, [pc, #484]	; (800cc2c <_vfiprintf_r+0x248>)
 800ca46:	429d      	cmp	r5, r3
 800ca48:	bf08      	it	eq
 800ca4a:	68f5      	ldreq	r5, [r6, #12]
 800ca4c:	e7da      	b.n	800ca04 <_vfiprintf_r+0x20>
 800ca4e:	89ab      	ldrh	r3, [r5, #12]
 800ca50:	0598      	lsls	r0, r3, #22
 800ca52:	d4ed      	bmi.n	800ca30 <_vfiprintf_r+0x4c>
 800ca54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca56:	f000 fd1a 	bl	800d48e <__retarget_lock_release_recursive>
 800ca5a:	e7e9      	b.n	800ca30 <_vfiprintf_r+0x4c>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca60:	2320      	movs	r3, #32
 800ca62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca6a:	2330      	movs	r3, #48	; 0x30
 800ca6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc30 <_vfiprintf_r+0x24c>
 800ca70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca74:	f04f 0901 	mov.w	r9, #1
 800ca78:	4623      	mov	r3, r4
 800ca7a:	469a      	mov	sl, r3
 800ca7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca80:	b10a      	cbz	r2, 800ca86 <_vfiprintf_r+0xa2>
 800ca82:	2a25      	cmp	r2, #37	; 0x25
 800ca84:	d1f9      	bne.n	800ca7a <_vfiprintf_r+0x96>
 800ca86:	ebba 0b04 	subs.w	fp, sl, r4
 800ca8a:	d00b      	beq.n	800caa4 <_vfiprintf_r+0xc0>
 800ca8c:	465b      	mov	r3, fp
 800ca8e:	4622      	mov	r2, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	4630      	mov	r0, r6
 800ca94:	f7ff ff93 	bl	800c9be <__sfputs_r>
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f000 80aa 	beq.w	800cbf2 <_vfiprintf_r+0x20e>
 800ca9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caa0:	445a      	add	r2, fp
 800caa2:	9209      	str	r2, [sp, #36]	; 0x24
 800caa4:	f89a 3000 	ldrb.w	r3, [sl]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 80a2 	beq.w	800cbf2 <_vfiprintf_r+0x20e>
 800caae:	2300      	movs	r3, #0
 800cab0:	f04f 32ff 	mov.w	r2, #4294967295
 800cab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cab8:	f10a 0a01 	add.w	sl, sl, #1
 800cabc:	9304      	str	r3, [sp, #16]
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cac4:	931a      	str	r3, [sp, #104]	; 0x68
 800cac6:	4654      	mov	r4, sl
 800cac8:	2205      	movs	r2, #5
 800caca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cace:	4858      	ldr	r0, [pc, #352]	; (800cc30 <_vfiprintf_r+0x24c>)
 800cad0:	f7f3 fb86 	bl	80001e0 <memchr>
 800cad4:	9a04      	ldr	r2, [sp, #16]
 800cad6:	b9d8      	cbnz	r0, 800cb10 <_vfiprintf_r+0x12c>
 800cad8:	06d1      	lsls	r1, r2, #27
 800cada:	bf44      	itt	mi
 800cadc:	2320      	movmi	r3, #32
 800cade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cae2:	0713      	lsls	r3, r2, #28
 800cae4:	bf44      	itt	mi
 800cae6:	232b      	movmi	r3, #43	; 0x2b
 800cae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caec:	f89a 3000 	ldrb.w	r3, [sl]
 800caf0:	2b2a      	cmp	r3, #42	; 0x2a
 800caf2:	d015      	beq.n	800cb20 <_vfiprintf_r+0x13c>
 800caf4:	9a07      	ldr	r2, [sp, #28]
 800caf6:	4654      	mov	r4, sl
 800caf8:	2000      	movs	r0, #0
 800cafa:	f04f 0c0a 	mov.w	ip, #10
 800cafe:	4621      	mov	r1, r4
 800cb00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb04:	3b30      	subs	r3, #48	; 0x30
 800cb06:	2b09      	cmp	r3, #9
 800cb08:	d94e      	bls.n	800cba8 <_vfiprintf_r+0x1c4>
 800cb0a:	b1b0      	cbz	r0, 800cb3a <_vfiprintf_r+0x156>
 800cb0c:	9207      	str	r2, [sp, #28]
 800cb0e:	e014      	b.n	800cb3a <_vfiprintf_r+0x156>
 800cb10:	eba0 0308 	sub.w	r3, r0, r8
 800cb14:	fa09 f303 	lsl.w	r3, r9, r3
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	9304      	str	r3, [sp, #16]
 800cb1c:	46a2      	mov	sl, r4
 800cb1e:	e7d2      	b.n	800cac6 <_vfiprintf_r+0xe2>
 800cb20:	9b03      	ldr	r3, [sp, #12]
 800cb22:	1d19      	adds	r1, r3, #4
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	9103      	str	r1, [sp, #12]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	bfbb      	ittet	lt
 800cb2c:	425b      	neglt	r3, r3
 800cb2e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb32:	9307      	strge	r3, [sp, #28]
 800cb34:	9307      	strlt	r3, [sp, #28]
 800cb36:	bfb8      	it	lt
 800cb38:	9204      	strlt	r2, [sp, #16]
 800cb3a:	7823      	ldrb	r3, [r4, #0]
 800cb3c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb3e:	d10c      	bne.n	800cb5a <_vfiprintf_r+0x176>
 800cb40:	7863      	ldrb	r3, [r4, #1]
 800cb42:	2b2a      	cmp	r3, #42	; 0x2a
 800cb44:	d135      	bne.n	800cbb2 <_vfiprintf_r+0x1ce>
 800cb46:	9b03      	ldr	r3, [sp, #12]
 800cb48:	1d1a      	adds	r2, r3, #4
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	9203      	str	r2, [sp, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	bfb8      	it	lt
 800cb52:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb56:	3402      	adds	r4, #2
 800cb58:	9305      	str	r3, [sp, #20]
 800cb5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc40 <_vfiprintf_r+0x25c>
 800cb5e:	7821      	ldrb	r1, [r4, #0]
 800cb60:	2203      	movs	r2, #3
 800cb62:	4650      	mov	r0, sl
 800cb64:	f7f3 fb3c 	bl	80001e0 <memchr>
 800cb68:	b140      	cbz	r0, 800cb7c <_vfiprintf_r+0x198>
 800cb6a:	2340      	movs	r3, #64	; 0x40
 800cb6c:	eba0 000a 	sub.w	r0, r0, sl
 800cb70:	fa03 f000 	lsl.w	r0, r3, r0
 800cb74:	9b04      	ldr	r3, [sp, #16]
 800cb76:	4303      	orrs	r3, r0
 800cb78:	3401      	adds	r4, #1
 800cb7a:	9304      	str	r3, [sp, #16]
 800cb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb80:	482c      	ldr	r0, [pc, #176]	; (800cc34 <_vfiprintf_r+0x250>)
 800cb82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb86:	2206      	movs	r2, #6
 800cb88:	f7f3 fb2a 	bl	80001e0 <memchr>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d03f      	beq.n	800cc10 <_vfiprintf_r+0x22c>
 800cb90:	4b29      	ldr	r3, [pc, #164]	; (800cc38 <_vfiprintf_r+0x254>)
 800cb92:	bb1b      	cbnz	r3, 800cbdc <_vfiprintf_r+0x1f8>
 800cb94:	9b03      	ldr	r3, [sp, #12]
 800cb96:	3307      	adds	r3, #7
 800cb98:	f023 0307 	bic.w	r3, r3, #7
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	9303      	str	r3, [sp, #12]
 800cba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba2:	443b      	add	r3, r7
 800cba4:	9309      	str	r3, [sp, #36]	; 0x24
 800cba6:	e767      	b.n	800ca78 <_vfiprintf_r+0x94>
 800cba8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbac:	460c      	mov	r4, r1
 800cbae:	2001      	movs	r0, #1
 800cbb0:	e7a5      	b.n	800cafe <_vfiprintf_r+0x11a>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	3401      	adds	r4, #1
 800cbb6:	9305      	str	r3, [sp, #20]
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f04f 0c0a 	mov.w	ip, #10
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbc4:	3a30      	subs	r2, #48	; 0x30
 800cbc6:	2a09      	cmp	r2, #9
 800cbc8:	d903      	bls.n	800cbd2 <_vfiprintf_r+0x1ee>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0c5      	beq.n	800cb5a <_vfiprintf_r+0x176>
 800cbce:	9105      	str	r1, [sp, #20]
 800cbd0:	e7c3      	b.n	800cb5a <_vfiprintf_r+0x176>
 800cbd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e7f0      	b.n	800cbbe <_vfiprintf_r+0x1da>
 800cbdc:	ab03      	add	r3, sp, #12
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	4b16      	ldr	r3, [pc, #88]	; (800cc3c <_vfiprintf_r+0x258>)
 800cbe4:	a904      	add	r1, sp, #16
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f3af 8000 	nop.w
 800cbec:	4607      	mov	r7, r0
 800cbee:	1c78      	adds	r0, r7, #1
 800cbf0:	d1d6      	bne.n	800cba0 <_vfiprintf_r+0x1bc>
 800cbf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbf4:	07d9      	lsls	r1, r3, #31
 800cbf6:	d405      	bmi.n	800cc04 <_vfiprintf_r+0x220>
 800cbf8:	89ab      	ldrh	r3, [r5, #12]
 800cbfa:	059a      	lsls	r2, r3, #22
 800cbfc:	d402      	bmi.n	800cc04 <_vfiprintf_r+0x220>
 800cbfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc00:	f000 fc45 	bl	800d48e <__retarget_lock_release_recursive>
 800cc04:	89ab      	ldrh	r3, [r5, #12]
 800cc06:	065b      	lsls	r3, r3, #25
 800cc08:	f53f af12 	bmi.w	800ca30 <_vfiprintf_r+0x4c>
 800cc0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc0e:	e711      	b.n	800ca34 <_vfiprintf_r+0x50>
 800cc10:	ab03      	add	r3, sp, #12
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	462a      	mov	r2, r5
 800cc16:	4b09      	ldr	r3, [pc, #36]	; (800cc3c <_vfiprintf_r+0x258>)
 800cc18:	a904      	add	r1, sp, #16
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f000 f880 	bl	800cd20 <_printf_i>
 800cc20:	e7e4      	b.n	800cbec <_vfiprintf_r+0x208>
 800cc22:	bf00      	nop
 800cc24:	080e9db4 	.word	0x080e9db4
 800cc28:	080e9dd4 	.word	0x080e9dd4
 800cc2c:	080e9d94 	.word	0x080e9d94
 800cc30:	080e9d5f 	.word	0x080e9d5f
 800cc34:	080e9d69 	.word	0x080e9d69
 800cc38:	00000000 	.word	0x00000000
 800cc3c:	0800c9bf 	.word	0x0800c9bf
 800cc40:	080e9d65 	.word	0x080e9d65

0800cc44 <_printf_common>:
 800cc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc48:	4616      	mov	r6, r2
 800cc4a:	4699      	mov	r9, r3
 800cc4c:	688a      	ldr	r2, [r1, #8]
 800cc4e:	690b      	ldr	r3, [r1, #16]
 800cc50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	bfb8      	it	lt
 800cc58:	4613      	movlt	r3, r2
 800cc5a:	6033      	str	r3, [r6, #0]
 800cc5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc60:	4607      	mov	r7, r0
 800cc62:	460c      	mov	r4, r1
 800cc64:	b10a      	cbz	r2, 800cc6a <_printf_common+0x26>
 800cc66:	3301      	adds	r3, #1
 800cc68:	6033      	str	r3, [r6, #0]
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	0699      	lsls	r1, r3, #26
 800cc6e:	bf42      	ittt	mi
 800cc70:	6833      	ldrmi	r3, [r6, #0]
 800cc72:	3302      	addmi	r3, #2
 800cc74:	6033      	strmi	r3, [r6, #0]
 800cc76:	6825      	ldr	r5, [r4, #0]
 800cc78:	f015 0506 	ands.w	r5, r5, #6
 800cc7c:	d106      	bne.n	800cc8c <_printf_common+0x48>
 800cc7e:	f104 0a19 	add.w	sl, r4, #25
 800cc82:	68e3      	ldr	r3, [r4, #12]
 800cc84:	6832      	ldr	r2, [r6, #0]
 800cc86:	1a9b      	subs	r3, r3, r2
 800cc88:	42ab      	cmp	r3, r5
 800cc8a:	dc26      	bgt.n	800ccda <_printf_common+0x96>
 800cc8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc90:	1e13      	subs	r3, r2, #0
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	bf18      	it	ne
 800cc96:	2301      	movne	r3, #1
 800cc98:	0692      	lsls	r2, r2, #26
 800cc9a:	d42b      	bmi.n	800ccf4 <_printf_common+0xb0>
 800cc9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cca0:	4649      	mov	r1, r9
 800cca2:	4638      	mov	r0, r7
 800cca4:	47c0      	blx	r8
 800cca6:	3001      	adds	r0, #1
 800cca8:	d01e      	beq.n	800cce8 <_printf_common+0xa4>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	68e5      	ldr	r5, [r4, #12]
 800ccae:	6832      	ldr	r2, [r6, #0]
 800ccb0:	f003 0306 	and.w	r3, r3, #6
 800ccb4:	2b04      	cmp	r3, #4
 800ccb6:	bf08      	it	eq
 800ccb8:	1aad      	subeq	r5, r5, r2
 800ccba:	68a3      	ldr	r3, [r4, #8]
 800ccbc:	6922      	ldr	r2, [r4, #16]
 800ccbe:	bf0c      	ite	eq
 800ccc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccc4:	2500      	movne	r5, #0
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	bfc4      	itt	gt
 800ccca:	1a9b      	subgt	r3, r3, r2
 800cccc:	18ed      	addgt	r5, r5, r3
 800ccce:	2600      	movs	r6, #0
 800ccd0:	341a      	adds	r4, #26
 800ccd2:	42b5      	cmp	r5, r6
 800ccd4:	d11a      	bne.n	800cd0c <_printf_common+0xc8>
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	e008      	b.n	800ccec <_printf_common+0xa8>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	4652      	mov	r2, sl
 800ccde:	4649      	mov	r1, r9
 800cce0:	4638      	mov	r0, r7
 800cce2:	47c0      	blx	r8
 800cce4:	3001      	adds	r0, #1
 800cce6:	d103      	bne.n	800ccf0 <_printf_common+0xac>
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf0:	3501      	adds	r5, #1
 800ccf2:	e7c6      	b.n	800cc82 <_printf_common+0x3e>
 800ccf4:	18e1      	adds	r1, r4, r3
 800ccf6:	1c5a      	adds	r2, r3, #1
 800ccf8:	2030      	movs	r0, #48	; 0x30
 800ccfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccfe:	4422      	add	r2, r4
 800cd00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd08:	3302      	adds	r3, #2
 800cd0a:	e7c7      	b.n	800cc9c <_printf_common+0x58>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	4622      	mov	r2, r4
 800cd10:	4649      	mov	r1, r9
 800cd12:	4638      	mov	r0, r7
 800cd14:	47c0      	blx	r8
 800cd16:	3001      	adds	r0, #1
 800cd18:	d0e6      	beq.n	800cce8 <_printf_common+0xa4>
 800cd1a:	3601      	adds	r6, #1
 800cd1c:	e7d9      	b.n	800ccd2 <_printf_common+0x8e>
	...

0800cd20 <_printf_i>:
 800cd20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd24:	460c      	mov	r4, r1
 800cd26:	4691      	mov	r9, r2
 800cd28:	7e27      	ldrb	r7, [r4, #24]
 800cd2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd2c:	2f78      	cmp	r7, #120	; 0x78
 800cd2e:	4680      	mov	r8, r0
 800cd30:	469a      	mov	sl, r3
 800cd32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd36:	d807      	bhi.n	800cd48 <_printf_i+0x28>
 800cd38:	2f62      	cmp	r7, #98	; 0x62
 800cd3a:	d80a      	bhi.n	800cd52 <_printf_i+0x32>
 800cd3c:	2f00      	cmp	r7, #0
 800cd3e:	f000 80d8 	beq.w	800cef2 <_printf_i+0x1d2>
 800cd42:	2f58      	cmp	r7, #88	; 0x58
 800cd44:	f000 80a3 	beq.w	800ce8e <_printf_i+0x16e>
 800cd48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd50:	e03a      	b.n	800cdc8 <_printf_i+0xa8>
 800cd52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd56:	2b15      	cmp	r3, #21
 800cd58:	d8f6      	bhi.n	800cd48 <_printf_i+0x28>
 800cd5a:	a001      	add	r0, pc, #4	; (adr r0, 800cd60 <_printf_i+0x40>)
 800cd5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cd60:	0800cdb9 	.word	0x0800cdb9
 800cd64:	0800cdcd 	.word	0x0800cdcd
 800cd68:	0800cd49 	.word	0x0800cd49
 800cd6c:	0800cd49 	.word	0x0800cd49
 800cd70:	0800cd49 	.word	0x0800cd49
 800cd74:	0800cd49 	.word	0x0800cd49
 800cd78:	0800cdcd 	.word	0x0800cdcd
 800cd7c:	0800cd49 	.word	0x0800cd49
 800cd80:	0800cd49 	.word	0x0800cd49
 800cd84:	0800cd49 	.word	0x0800cd49
 800cd88:	0800cd49 	.word	0x0800cd49
 800cd8c:	0800ced9 	.word	0x0800ced9
 800cd90:	0800cdfd 	.word	0x0800cdfd
 800cd94:	0800cebb 	.word	0x0800cebb
 800cd98:	0800cd49 	.word	0x0800cd49
 800cd9c:	0800cd49 	.word	0x0800cd49
 800cda0:	0800cefb 	.word	0x0800cefb
 800cda4:	0800cd49 	.word	0x0800cd49
 800cda8:	0800cdfd 	.word	0x0800cdfd
 800cdac:	0800cd49 	.word	0x0800cd49
 800cdb0:	0800cd49 	.word	0x0800cd49
 800cdb4:	0800cec3 	.word	0x0800cec3
 800cdb8:	680b      	ldr	r3, [r1, #0]
 800cdba:	1d1a      	adds	r2, r3, #4
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	600a      	str	r2, [r1, #0]
 800cdc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cdc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e0a3      	b.n	800cf14 <_printf_i+0x1f4>
 800cdcc:	6825      	ldr	r5, [r4, #0]
 800cdce:	6808      	ldr	r0, [r1, #0]
 800cdd0:	062e      	lsls	r6, r5, #24
 800cdd2:	f100 0304 	add.w	r3, r0, #4
 800cdd6:	d50a      	bpl.n	800cdee <_printf_i+0xce>
 800cdd8:	6805      	ldr	r5, [r0, #0]
 800cdda:	600b      	str	r3, [r1, #0]
 800cddc:	2d00      	cmp	r5, #0
 800cdde:	da03      	bge.n	800cde8 <_printf_i+0xc8>
 800cde0:	232d      	movs	r3, #45	; 0x2d
 800cde2:	426d      	negs	r5, r5
 800cde4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cde8:	485e      	ldr	r0, [pc, #376]	; (800cf64 <_printf_i+0x244>)
 800cdea:	230a      	movs	r3, #10
 800cdec:	e019      	b.n	800ce22 <_printf_i+0x102>
 800cdee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cdf2:	6805      	ldr	r5, [r0, #0]
 800cdf4:	600b      	str	r3, [r1, #0]
 800cdf6:	bf18      	it	ne
 800cdf8:	b22d      	sxthne	r5, r5
 800cdfa:	e7ef      	b.n	800cddc <_printf_i+0xbc>
 800cdfc:	680b      	ldr	r3, [r1, #0]
 800cdfe:	6825      	ldr	r5, [r4, #0]
 800ce00:	1d18      	adds	r0, r3, #4
 800ce02:	6008      	str	r0, [r1, #0]
 800ce04:	0628      	lsls	r0, r5, #24
 800ce06:	d501      	bpl.n	800ce0c <_printf_i+0xec>
 800ce08:	681d      	ldr	r5, [r3, #0]
 800ce0a:	e002      	b.n	800ce12 <_printf_i+0xf2>
 800ce0c:	0669      	lsls	r1, r5, #25
 800ce0e:	d5fb      	bpl.n	800ce08 <_printf_i+0xe8>
 800ce10:	881d      	ldrh	r5, [r3, #0]
 800ce12:	4854      	ldr	r0, [pc, #336]	; (800cf64 <_printf_i+0x244>)
 800ce14:	2f6f      	cmp	r7, #111	; 0x6f
 800ce16:	bf0c      	ite	eq
 800ce18:	2308      	moveq	r3, #8
 800ce1a:	230a      	movne	r3, #10
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce22:	6866      	ldr	r6, [r4, #4]
 800ce24:	60a6      	str	r6, [r4, #8]
 800ce26:	2e00      	cmp	r6, #0
 800ce28:	bfa2      	ittt	ge
 800ce2a:	6821      	ldrge	r1, [r4, #0]
 800ce2c:	f021 0104 	bicge.w	r1, r1, #4
 800ce30:	6021      	strge	r1, [r4, #0]
 800ce32:	b90d      	cbnz	r5, 800ce38 <_printf_i+0x118>
 800ce34:	2e00      	cmp	r6, #0
 800ce36:	d04d      	beq.n	800ced4 <_printf_i+0x1b4>
 800ce38:	4616      	mov	r6, r2
 800ce3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce3e:	fb03 5711 	mls	r7, r3, r1, r5
 800ce42:	5dc7      	ldrb	r7, [r0, r7]
 800ce44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce48:	462f      	mov	r7, r5
 800ce4a:	42bb      	cmp	r3, r7
 800ce4c:	460d      	mov	r5, r1
 800ce4e:	d9f4      	bls.n	800ce3a <_printf_i+0x11a>
 800ce50:	2b08      	cmp	r3, #8
 800ce52:	d10b      	bne.n	800ce6c <_printf_i+0x14c>
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	07df      	lsls	r7, r3, #31
 800ce58:	d508      	bpl.n	800ce6c <_printf_i+0x14c>
 800ce5a:	6923      	ldr	r3, [r4, #16]
 800ce5c:	6861      	ldr	r1, [r4, #4]
 800ce5e:	4299      	cmp	r1, r3
 800ce60:	bfde      	ittt	le
 800ce62:	2330      	movle	r3, #48	; 0x30
 800ce64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ce6c:	1b92      	subs	r2, r2, r6
 800ce6e:	6122      	str	r2, [r4, #16]
 800ce70:	f8cd a000 	str.w	sl, [sp]
 800ce74:	464b      	mov	r3, r9
 800ce76:	aa03      	add	r2, sp, #12
 800ce78:	4621      	mov	r1, r4
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	f7ff fee2 	bl	800cc44 <_printf_common>
 800ce80:	3001      	adds	r0, #1
 800ce82:	d14c      	bne.n	800cf1e <_printf_i+0x1fe>
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295
 800ce88:	b004      	add	sp, #16
 800ce8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8e:	4835      	ldr	r0, [pc, #212]	; (800cf64 <_printf_i+0x244>)
 800ce90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	680e      	ldr	r6, [r1, #0]
 800ce98:	061f      	lsls	r7, r3, #24
 800ce9a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ce9e:	600e      	str	r6, [r1, #0]
 800cea0:	d514      	bpl.n	800cecc <_printf_i+0x1ac>
 800cea2:	07d9      	lsls	r1, r3, #31
 800cea4:	bf44      	itt	mi
 800cea6:	f043 0320 	orrmi.w	r3, r3, #32
 800ceaa:	6023      	strmi	r3, [r4, #0]
 800ceac:	b91d      	cbnz	r5, 800ceb6 <_printf_i+0x196>
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	f023 0320 	bic.w	r3, r3, #32
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	2310      	movs	r3, #16
 800ceb8:	e7b0      	b.n	800ce1c <_printf_i+0xfc>
 800ceba:	6823      	ldr	r3, [r4, #0]
 800cebc:	f043 0320 	orr.w	r3, r3, #32
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	2378      	movs	r3, #120	; 0x78
 800cec4:	4828      	ldr	r0, [pc, #160]	; (800cf68 <_printf_i+0x248>)
 800cec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ceca:	e7e3      	b.n	800ce94 <_printf_i+0x174>
 800cecc:	065e      	lsls	r6, r3, #25
 800cece:	bf48      	it	mi
 800ced0:	b2ad      	uxthmi	r5, r5
 800ced2:	e7e6      	b.n	800cea2 <_printf_i+0x182>
 800ced4:	4616      	mov	r6, r2
 800ced6:	e7bb      	b.n	800ce50 <_printf_i+0x130>
 800ced8:	680b      	ldr	r3, [r1, #0]
 800ceda:	6826      	ldr	r6, [r4, #0]
 800cedc:	6960      	ldr	r0, [r4, #20]
 800cede:	1d1d      	adds	r5, r3, #4
 800cee0:	600d      	str	r5, [r1, #0]
 800cee2:	0635      	lsls	r5, r6, #24
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	d501      	bpl.n	800ceec <_printf_i+0x1cc>
 800cee8:	6018      	str	r0, [r3, #0]
 800ceea:	e002      	b.n	800cef2 <_printf_i+0x1d2>
 800ceec:	0671      	lsls	r1, r6, #25
 800ceee:	d5fb      	bpl.n	800cee8 <_printf_i+0x1c8>
 800cef0:	8018      	strh	r0, [r3, #0]
 800cef2:	2300      	movs	r3, #0
 800cef4:	6123      	str	r3, [r4, #16]
 800cef6:	4616      	mov	r6, r2
 800cef8:	e7ba      	b.n	800ce70 <_printf_i+0x150>
 800cefa:	680b      	ldr	r3, [r1, #0]
 800cefc:	1d1a      	adds	r2, r3, #4
 800cefe:	600a      	str	r2, [r1, #0]
 800cf00:	681e      	ldr	r6, [r3, #0]
 800cf02:	6862      	ldr	r2, [r4, #4]
 800cf04:	2100      	movs	r1, #0
 800cf06:	4630      	mov	r0, r6
 800cf08:	f7f3 f96a 	bl	80001e0 <memchr>
 800cf0c:	b108      	cbz	r0, 800cf12 <_printf_i+0x1f2>
 800cf0e:	1b80      	subs	r0, r0, r6
 800cf10:	6060      	str	r0, [r4, #4]
 800cf12:	6863      	ldr	r3, [r4, #4]
 800cf14:	6123      	str	r3, [r4, #16]
 800cf16:	2300      	movs	r3, #0
 800cf18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf1c:	e7a8      	b.n	800ce70 <_printf_i+0x150>
 800cf1e:	6923      	ldr	r3, [r4, #16]
 800cf20:	4632      	mov	r2, r6
 800cf22:	4649      	mov	r1, r9
 800cf24:	4640      	mov	r0, r8
 800cf26:	47d0      	blx	sl
 800cf28:	3001      	adds	r0, #1
 800cf2a:	d0ab      	beq.n	800ce84 <_printf_i+0x164>
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	079b      	lsls	r3, r3, #30
 800cf30:	d413      	bmi.n	800cf5a <_printf_i+0x23a>
 800cf32:	68e0      	ldr	r0, [r4, #12]
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	4298      	cmp	r0, r3
 800cf38:	bfb8      	it	lt
 800cf3a:	4618      	movlt	r0, r3
 800cf3c:	e7a4      	b.n	800ce88 <_printf_i+0x168>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4632      	mov	r2, r6
 800cf42:	4649      	mov	r1, r9
 800cf44:	4640      	mov	r0, r8
 800cf46:	47d0      	blx	sl
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d09b      	beq.n	800ce84 <_printf_i+0x164>
 800cf4c:	3501      	adds	r5, #1
 800cf4e:	68e3      	ldr	r3, [r4, #12]
 800cf50:	9903      	ldr	r1, [sp, #12]
 800cf52:	1a5b      	subs	r3, r3, r1
 800cf54:	42ab      	cmp	r3, r5
 800cf56:	dcf2      	bgt.n	800cf3e <_printf_i+0x21e>
 800cf58:	e7eb      	b.n	800cf32 <_printf_i+0x212>
 800cf5a:	2500      	movs	r5, #0
 800cf5c:	f104 0619 	add.w	r6, r4, #25
 800cf60:	e7f5      	b.n	800cf4e <_printf_i+0x22e>
 800cf62:	bf00      	nop
 800cf64:	080e9d70 	.word	0x080e9d70
 800cf68:	080e9d81 	.word	0x080e9d81

0800cf6c <_sbrk_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4d06      	ldr	r5, [pc, #24]	; (800cf88 <_sbrk_r+0x1c>)
 800cf70:	2300      	movs	r3, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	602b      	str	r3, [r5, #0]
 800cf78:	f7f8 fbb6 	bl	80056e8 <_sbrk>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d102      	bne.n	800cf86 <_sbrk_r+0x1a>
 800cf80:	682b      	ldr	r3, [r5, #0]
 800cf82:	b103      	cbz	r3, 800cf86 <_sbrk_r+0x1a>
 800cf84:	6023      	str	r3, [r4, #0]
 800cf86:	bd38      	pop	{r3, r4, r5, pc}
 800cf88:	200005d8 	.word	0x200005d8

0800cf8c <__swbuf_r>:
 800cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8e:	460e      	mov	r6, r1
 800cf90:	4614      	mov	r4, r2
 800cf92:	4605      	mov	r5, r0
 800cf94:	b118      	cbz	r0, 800cf9e <__swbuf_r+0x12>
 800cf96:	6983      	ldr	r3, [r0, #24]
 800cf98:	b90b      	cbnz	r3, 800cf9e <__swbuf_r+0x12>
 800cf9a:	f000 f9d9 	bl	800d350 <__sinit>
 800cf9e:	4b21      	ldr	r3, [pc, #132]	; (800d024 <__swbuf_r+0x98>)
 800cfa0:	429c      	cmp	r4, r3
 800cfa2:	d12b      	bne.n	800cffc <__swbuf_r+0x70>
 800cfa4:	686c      	ldr	r4, [r5, #4]
 800cfa6:	69a3      	ldr	r3, [r4, #24]
 800cfa8:	60a3      	str	r3, [r4, #8]
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	071a      	lsls	r2, r3, #28
 800cfae:	d52f      	bpl.n	800d010 <__swbuf_r+0x84>
 800cfb0:	6923      	ldr	r3, [r4, #16]
 800cfb2:	b36b      	cbz	r3, 800d010 <__swbuf_r+0x84>
 800cfb4:	6923      	ldr	r3, [r4, #16]
 800cfb6:	6820      	ldr	r0, [r4, #0]
 800cfb8:	1ac0      	subs	r0, r0, r3
 800cfba:	6963      	ldr	r3, [r4, #20]
 800cfbc:	b2f6      	uxtb	r6, r6
 800cfbe:	4283      	cmp	r3, r0
 800cfc0:	4637      	mov	r7, r6
 800cfc2:	dc04      	bgt.n	800cfce <__swbuf_r+0x42>
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	f000 f92e 	bl	800d228 <_fflush_r>
 800cfcc:	bb30      	cbnz	r0, 800d01c <__swbuf_r+0x90>
 800cfce:	68a3      	ldr	r3, [r4, #8]
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	60a3      	str	r3, [r4, #8]
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	6022      	str	r2, [r4, #0]
 800cfda:	701e      	strb	r6, [r3, #0]
 800cfdc:	6963      	ldr	r3, [r4, #20]
 800cfde:	3001      	adds	r0, #1
 800cfe0:	4283      	cmp	r3, r0
 800cfe2:	d004      	beq.n	800cfee <__swbuf_r+0x62>
 800cfe4:	89a3      	ldrh	r3, [r4, #12]
 800cfe6:	07db      	lsls	r3, r3, #31
 800cfe8:	d506      	bpl.n	800cff8 <__swbuf_r+0x6c>
 800cfea:	2e0a      	cmp	r6, #10
 800cfec:	d104      	bne.n	800cff8 <__swbuf_r+0x6c>
 800cfee:	4621      	mov	r1, r4
 800cff0:	4628      	mov	r0, r5
 800cff2:	f000 f919 	bl	800d228 <_fflush_r>
 800cff6:	b988      	cbnz	r0, 800d01c <__swbuf_r+0x90>
 800cff8:	4638      	mov	r0, r7
 800cffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cffc:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <__swbuf_r+0x9c>)
 800cffe:	429c      	cmp	r4, r3
 800d000:	d101      	bne.n	800d006 <__swbuf_r+0x7a>
 800d002:	68ac      	ldr	r4, [r5, #8]
 800d004:	e7cf      	b.n	800cfa6 <__swbuf_r+0x1a>
 800d006:	4b09      	ldr	r3, [pc, #36]	; (800d02c <__swbuf_r+0xa0>)
 800d008:	429c      	cmp	r4, r3
 800d00a:	bf08      	it	eq
 800d00c:	68ec      	ldreq	r4, [r5, #12]
 800d00e:	e7ca      	b.n	800cfa6 <__swbuf_r+0x1a>
 800d010:	4621      	mov	r1, r4
 800d012:	4628      	mov	r0, r5
 800d014:	f000 f80c 	bl	800d030 <__swsetup_r>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d0cb      	beq.n	800cfb4 <__swbuf_r+0x28>
 800d01c:	f04f 37ff 	mov.w	r7, #4294967295
 800d020:	e7ea      	b.n	800cff8 <__swbuf_r+0x6c>
 800d022:	bf00      	nop
 800d024:	080e9db4 	.word	0x080e9db4
 800d028:	080e9dd4 	.word	0x080e9dd4
 800d02c:	080e9d94 	.word	0x080e9d94

0800d030 <__swsetup_r>:
 800d030:	4b32      	ldr	r3, [pc, #200]	; (800d0fc <__swsetup_r+0xcc>)
 800d032:	b570      	push	{r4, r5, r6, lr}
 800d034:	681d      	ldr	r5, [r3, #0]
 800d036:	4606      	mov	r6, r0
 800d038:	460c      	mov	r4, r1
 800d03a:	b125      	cbz	r5, 800d046 <__swsetup_r+0x16>
 800d03c:	69ab      	ldr	r3, [r5, #24]
 800d03e:	b913      	cbnz	r3, 800d046 <__swsetup_r+0x16>
 800d040:	4628      	mov	r0, r5
 800d042:	f000 f985 	bl	800d350 <__sinit>
 800d046:	4b2e      	ldr	r3, [pc, #184]	; (800d100 <__swsetup_r+0xd0>)
 800d048:	429c      	cmp	r4, r3
 800d04a:	d10f      	bne.n	800d06c <__swsetup_r+0x3c>
 800d04c:	686c      	ldr	r4, [r5, #4]
 800d04e:	89a3      	ldrh	r3, [r4, #12]
 800d050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d054:	0719      	lsls	r1, r3, #28
 800d056:	d42c      	bmi.n	800d0b2 <__swsetup_r+0x82>
 800d058:	06dd      	lsls	r5, r3, #27
 800d05a:	d411      	bmi.n	800d080 <__swsetup_r+0x50>
 800d05c:	2309      	movs	r3, #9
 800d05e:	6033      	str	r3, [r6, #0]
 800d060:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d064:	81a3      	strh	r3, [r4, #12]
 800d066:	f04f 30ff 	mov.w	r0, #4294967295
 800d06a:	e03e      	b.n	800d0ea <__swsetup_r+0xba>
 800d06c:	4b25      	ldr	r3, [pc, #148]	; (800d104 <__swsetup_r+0xd4>)
 800d06e:	429c      	cmp	r4, r3
 800d070:	d101      	bne.n	800d076 <__swsetup_r+0x46>
 800d072:	68ac      	ldr	r4, [r5, #8]
 800d074:	e7eb      	b.n	800d04e <__swsetup_r+0x1e>
 800d076:	4b24      	ldr	r3, [pc, #144]	; (800d108 <__swsetup_r+0xd8>)
 800d078:	429c      	cmp	r4, r3
 800d07a:	bf08      	it	eq
 800d07c:	68ec      	ldreq	r4, [r5, #12]
 800d07e:	e7e6      	b.n	800d04e <__swsetup_r+0x1e>
 800d080:	0758      	lsls	r0, r3, #29
 800d082:	d512      	bpl.n	800d0aa <__swsetup_r+0x7a>
 800d084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d086:	b141      	cbz	r1, 800d09a <__swsetup_r+0x6a>
 800d088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d08c:	4299      	cmp	r1, r3
 800d08e:	d002      	beq.n	800d096 <__swsetup_r+0x66>
 800d090:	4630      	mov	r0, r6
 800d092:	f7ff fbd3 	bl	800c83c <_free_r>
 800d096:	2300      	movs	r3, #0
 800d098:	6363      	str	r3, [r4, #52]	; 0x34
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	6063      	str	r3, [r4, #4]
 800d0a6:	6923      	ldr	r3, [r4, #16]
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f043 0308 	orr.w	r3, r3, #8
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	b94b      	cbnz	r3, 800d0ca <__swsetup_r+0x9a>
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0c0:	d003      	beq.n	800d0ca <__swsetup_r+0x9a>
 800d0c2:	4621      	mov	r1, r4
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f000 fa07 	bl	800d4d8 <__smakebuf_r>
 800d0ca:	89a0      	ldrh	r0, [r4, #12]
 800d0cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0d0:	f010 0301 	ands.w	r3, r0, #1
 800d0d4:	d00a      	beq.n	800d0ec <__swsetup_r+0xbc>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60a3      	str	r3, [r4, #8]
 800d0da:	6963      	ldr	r3, [r4, #20]
 800d0dc:	425b      	negs	r3, r3
 800d0de:	61a3      	str	r3, [r4, #24]
 800d0e0:	6923      	ldr	r3, [r4, #16]
 800d0e2:	b943      	cbnz	r3, 800d0f6 <__swsetup_r+0xc6>
 800d0e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0e8:	d1ba      	bne.n	800d060 <__swsetup_r+0x30>
 800d0ea:	bd70      	pop	{r4, r5, r6, pc}
 800d0ec:	0781      	lsls	r1, r0, #30
 800d0ee:	bf58      	it	pl
 800d0f0:	6963      	ldrpl	r3, [r4, #20]
 800d0f2:	60a3      	str	r3, [r4, #8]
 800d0f4:	e7f4      	b.n	800d0e0 <__swsetup_r+0xb0>
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	e7f7      	b.n	800d0ea <__swsetup_r+0xba>
 800d0fa:	bf00      	nop
 800d0fc:	200000ac 	.word	0x200000ac
 800d100:	080e9db4 	.word	0x080e9db4
 800d104:	080e9dd4 	.word	0x080e9dd4
 800d108:	080e9d94 	.word	0x080e9d94

0800d10c <abort>:
 800d10c:	b508      	push	{r3, lr}
 800d10e:	2006      	movs	r0, #6
 800d110:	f000 fa56 	bl	800d5c0 <raise>
 800d114:	2001      	movs	r0, #1
 800d116:	f7f8 fa6f 	bl	80055f8 <_exit>
	...

0800d11c <__sflush_r>:
 800d11c:	898a      	ldrh	r2, [r1, #12]
 800d11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d122:	4605      	mov	r5, r0
 800d124:	0710      	lsls	r0, r2, #28
 800d126:	460c      	mov	r4, r1
 800d128:	d458      	bmi.n	800d1dc <__sflush_r+0xc0>
 800d12a:	684b      	ldr	r3, [r1, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	dc05      	bgt.n	800d13c <__sflush_r+0x20>
 800d130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d132:	2b00      	cmp	r3, #0
 800d134:	dc02      	bgt.n	800d13c <__sflush_r+0x20>
 800d136:	2000      	movs	r0, #0
 800d138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d13c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d13e:	2e00      	cmp	r6, #0
 800d140:	d0f9      	beq.n	800d136 <__sflush_r+0x1a>
 800d142:	2300      	movs	r3, #0
 800d144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d148:	682f      	ldr	r7, [r5, #0]
 800d14a:	602b      	str	r3, [r5, #0]
 800d14c:	d032      	beq.n	800d1b4 <__sflush_r+0x98>
 800d14e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d150:	89a3      	ldrh	r3, [r4, #12]
 800d152:	075a      	lsls	r2, r3, #29
 800d154:	d505      	bpl.n	800d162 <__sflush_r+0x46>
 800d156:	6863      	ldr	r3, [r4, #4]
 800d158:	1ac0      	subs	r0, r0, r3
 800d15a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d15c:	b10b      	cbz	r3, 800d162 <__sflush_r+0x46>
 800d15e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d160:	1ac0      	subs	r0, r0, r3
 800d162:	2300      	movs	r3, #0
 800d164:	4602      	mov	r2, r0
 800d166:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d168:	6a21      	ldr	r1, [r4, #32]
 800d16a:	4628      	mov	r0, r5
 800d16c:	47b0      	blx	r6
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	d106      	bne.n	800d182 <__sflush_r+0x66>
 800d174:	6829      	ldr	r1, [r5, #0]
 800d176:	291d      	cmp	r1, #29
 800d178:	d82c      	bhi.n	800d1d4 <__sflush_r+0xb8>
 800d17a:	4a2a      	ldr	r2, [pc, #168]	; (800d224 <__sflush_r+0x108>)
 800d17c:	40ca      	lsrs	r2, r1
 800d17e:	07d6      	lsls	r6, r2, #31
 800d180:	d528      	bpl.n	800d1d4 <__sflush_r+0xb8>
 800d182:	2200      	movs	r2, #0
 800d184:	6062      	str	r2, [r4, #4]
 800d186:	04d9      	lsls	r1, r3, #19
 800d188:	6922      	ldr	r2, [r4, #16]
 800d18a:	6022      	str	r2, [r4, #0]
 800d18c:	d504      	bpl.n	800d198 <__sflush_r+0x7c>
 800d18e:	1c42      	adds	r2, r0, #1
 800d190:	d101      	bne.n	800d196 <__sflush_r+0x7a>
 800d192:	682b      	ldr	r3, [r5, #0]
 800d194:	b903      	cbnz	r3, 800d198 <__sflush_r+0x7c>
 800d196:	6560      	str	r0, [r4, #84]	; 0x54
 800d198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d19a:	602f      	str	r7, [r5, #0]
 800d19c:	2900      	cmp	r1, #0
 800d19e:	d0ca      	beq.n	800d136 <__sflush_r+0x1a>
 800d1a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1a4:	4299      	cmp	r1, r3
 800d1a6:	d002      	beq.n	800d1ae <__sflush_r+0x92>
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	f7ff fb47 	bl	800c83c <_free_r>
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	6360      	str	r0, [r4, #52]	; 0x34
 800d1b2:	e7c1      	b.n	800d138 <__sflush_r+0x1c>
 800d1b4:	6a21      	ldr	r1, [r4, #32]
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	47b0      	blx	r6
 800d1bc:	1c41      	adds	r1, r0, #1
 800d1be:	d1c7      	bne.n	800d150 <__sflush_r+0x34>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0c4      	beq.n	800d150 <__sflush_r+0x34>
 800d1c6:	2b1d      	cmp	r3, #29
 800d1c8:	d001      	beq.n	800d1ce <__sflush_r+0xb2>
 800d1ca:	2b16      	cmp	r3, #22
 800d1cc:	d101      	bne.n	800d1d2 <__sflush_r+0xb6>
 800d1ce:	602f      	str	r7, [r5, #0]
 800d1d0:	e7b1      	b.n	800d136 <__sflush_r+0x1a>
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d8:	81a3      	strh	r3, [r4, #12]
 800d1da:	e7ad      	b.n	800d138 <__sflush_r+0x1c>
 800d1dc:	690f      	ldr	r7, [r1, #16]
 800d1de:	2f00      	cmp	r7, #0
 800d1e0:	d0a9      	beq.n	800d136 <__sflush_r+0x1a>
 800d1e2:	0793      	lsls	r3, r2, #30
 800d1e4:	680e      	ldr	r6, [r1, #0]
 800d1e6:	bf08      	it	eq
 800d1e8:	694b      	ldreq	r3, [r1, #20]
 800d1ea:	600f      	str	r7, [r1, #0]
 800d1ec:	bf18      	it	ne
 800d1ee:	2300      	movne	r3, #0
 800d1f0:	eba6 0807 	sub.w	r8, r6, r7
 800d1f4:	608b      	str	r3, [r1, #8]
 800d1f6:	f1b8 0f00 	cmp.w	r8, #0
 800d1fa:	dd9c      	ble.n	800d136 <__sflush_r+0x1a>
 800d1fc:	6a21      	ldr	r1, [r4, #32]
 800d1fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d200:	4643      	mov	r3, r8
 800d202:	463a      	mov	r2, r7
 800d204:	4628      	mov	r0, r5
 800d206:	47b0      	blx	r6
 800d208:	2800      	cmp	r0, #0
 800d20a:	dc06      	bgt.n	800d21a <__sflush_r+0xfe>
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d212:	81a3      	strh	r3, [r4, #12]
 800d214:	f04f 30ff 	mov.w	r0, #4294967295
 800d218:	e78e      	b.n	800d138 <__sflush_r+0x1c>
 800d21a:	4407      	add	r7, r0
 800d21c:	eba8 0800 	sub.w	r8, r8, r0
 800d220:	e7e9      	b.n	800d1f6 <__sflush_r+0xda>
 800d222:	bf00      	nop
 800d224:	20400001 	.word	0x20400001

0800d228 <_fflush_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	690b      	ldr	r3, [r1, #16]
 800d22c:	4605      	mov	r5, r0
 800d22e:	460c      	mov	r4, r1
 800d230:	b913      	cbnz	r3, 800d238 <_fflush_r+0x10>
 800d232:	2500      	movs	r5, #0
 800d234:	4628      	mov	r0, r5
 800d236:	bd38      	pop	{r3, r4, r5, pc}
 800d238:	b118      	cbz	r0, 800d242 <_fflush_r+0x1a>
 800d23a:	6983      	ldr	r3, [r0, #24]
 800d23c:	b90b      	cbnz	r3, 800d242 <_fflush_r+0x1a>
 800d23e:	f000 f887 	bl	800d350 <__sinit>
 800d242:	4b14      	ldr	r3, [pc, #80]	; (800d294 <_fflush_r+0x6c>)
 800d244:	429c      	cmp	r4, r3
 800d246:	d11b      	bne.n	800d280 <_fflush_r+0x58>
 800d248:	686c      	ldr	r4, [r5, #4]
 800d24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d0ef      	beq.n	800d232 <_fflush_r+0xa>
 800d252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d254:	07d0      	lsls	r0, r2, #31
 800d256:	d404      	bmi.n	800d262 <_fflush_r+0x3a>
 800d258:	0599      	lsls	r1, r3, #22
 800d25a:	d402      	bmi.n	800d262 <_fflush_r+0x3a>
 800d25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d25e:	f000 f915 	bl	800d48c <__retarget_lock_acquire_recursive>
 800d262:	4628      	mov	r0, r5
 800d264:	4621      	mov	r1, r4
 800d266:	f7ff ff59 	bl	800d11c <__sflush_r>
 800d26a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d26c:	07da      	lsls	r2, r3, #31
 800d26e:	4605      	mov	r5, r0
 800d270:	d4e0      	bmi.n	800d234 <_fflush_r+0xc>
 800d272:	89a3      	ldrh	r3, [r4, #12]
 800d274:	059b      	lsls	r3, r3, #22
 800d276:	d4dd      	bmi.n	800d234 <_fflush_r+0xc>
 800d278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d27a:	f000 f908 	bl	800d48e <__retarget_lock_release_recursive>
 800d27e:	e7d9      	b.n	800d234 <_fflush_r+0xc>
 800d280:	4b05      	ldr	r3, [pc, #20]	; (800d298 <_fflush_r+0x70>)
 800d282:	429c      	cmp	r4, r3
 800d284:	d101      	bne.n	800d28a <_fflush_r+0x62>
 800d286:	68ac      	ldr	r4, [r5, #8]
 800d288:	e7df      	b.n	800d24a <_fflush_r+0x22>
 800d28a:	4b04      	ldr	r3, [pc, #16]	; (800d29c <_fflush_r+0x74>)
 800d28c:	429c      	cmp	r4, r3
 800d28e:	bf08      	it	eq
 800d290:	68ec      	ldreq	r4, [r5, #12]
 800d292:	e7da      	b.n	800d24a <_fflush_r+0x22>
 800d294:	080e9db4 	.word	0x080e9db4
 800d298:	080e9dd4 	.word	0x080e9dd4
 800d29c:	080e9d94 	.word	0x080e9d94

0800d2a0 <std>:
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	b510      	push	{r4, lr}
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	e9c0 3300 	strd	r3, r3, [r0]
 800d2aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2ae:	6083      	str	r3, [r0, #8]
 800d2b0:	8181      	strh	r1, [r0, #12]
 800d2b2:	6643      	str	r3, [r0, #100]	; 0x64
 800d2b4:	81c2      	strh	r2, [r0, #14]
 800d2b6:	6183      	str	r3, [r0, #24]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	2208      	movs	r2, #8
 800d2bc:	305c      	adds	r0, #92	; 0x5c
 800d2be:	f7ff f9f3 	bl	800c6a8 <memset>
 800d2c2:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <std+0x38>)
 800d2c4:	6263      	str	r3, [r4, #36]	; 0x24
 800d2c6:	4b05      	ldr	r3, [pc, #20]	; (800d2dc <std+0x3c>)
 800d2c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2ca:	4b05      	ldr	r3, [pc, #20]	; (800d2e0 <std+0x40>)
 800d2cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2ce:	4b05      	ldr	r3, [pc, #20]	; (800d2e4 <std+0x44>)
 800d2d0:	6224      	str	r4, [r4, #32]
 800d2d2:	6323      	str	r3, [r4, #48]	; 0x30
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	bf00      	nop
 800d2d8:	0800d5f9 	.word	0x0800d5f9
 800d2dc:	0800d61b 	.word	0x0800d61b
 800d2e0:	0800d653 	.word	0x0800d653
 800d2e4:	0800d677 	.word	0x0800d677

0800d2e8 <_cleanup_r>:
 800d2e8:	4901      	ldr	r1, [pc, #4]	; (800d2f0 <_cleanup_r+0x8>)
 800d2ea:	f000 b8af 	b.w	800d44c <_fwalk_reent>
 800d2ee:	bf00      	nop
 800d2f0:	0800d229 	.word	0x0800d229

0800d2f4 <__sfmoreglue>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	1e4a      	subs	r2, r1, #1
 800d2f8:	2568      	movs	r5, #104	; 0x68
 800d2fa:	4355      	muls	r5, r2
 800d2fc:	460e      	mov	r6, r1
 800d2fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d302:	f7ff faeb 	bl	800c8dc <_malloc_r>
 800d306:	4604      	mov	r4, r0
 800d308:	b140      	cbz	r0, 800d31c <__sfmoreglue+0x28>
 800d30a:	2100      	movs	r1, #0
 800d30c:	e9c0 1600 	strd	r1, r6, [r0]
 800d310:	300c      	adds	r0, #12
 800d312:	60a0      	str	r0, [r4, #8]
 800d314:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d318:	f7ff f9c6 	bl	800c6a8 <memset>
 800d31c:	4620      	mov	r0, r4
 800d31e:	bd70      	pop	{r4, r5, r6, pc}

0800d320 <__sfp_lock_acquire>:
 800d320:	4801      	ldr	r0, [pc, #4]	; (800d328 <__sfp_lock_acquire+0x8>)
 800d322:	f000 b8b3 	b.w	800d48c <__retarget_lock_acquire_recursive>
 800d326:	bf00      	nop
 800d328:	200005d4 	.word	0x200005d4

0800d32c <__sfp_lock_release>:
 800d32c:	4801      	ldr	r0, [pc, #4]	; (800d334 <__sfp_lock_release+0x8>)
 800d32e:	f000 b8ae 	b.w	800d48e <__retarget_lock_release_recursive>
 800d332:	bf00      	nop
 800d334:	200005d4 	.word	0x200005d4

0800d338 <__sinit_lock_acquire>:
 800d338:	4801      	ldr	r0, [pc, #4]	; (800d340 <__sinit_lock_acquire+0x8>)
 800d33a:	f000 b8a7 	b.w	800d48c <__retarget_lock_acquire_recursive>
 800d33e:	bf00      	nop
 800d340:	200005cf 	.word	0x200005cf

0800d344 <__sinit_lock_release>:
 800d344:	4801      	ldr	r0, [pc, #4]	; (800d34c <__sinit_lock_release+0x8>)
 800d346:	f000 b8a2 	b.w	800d48e <__retarget_lock_release_recursive>
 800d34a:	bf00      	nop
 800d34c:	200005cf 	.word	0x200005cf

0800d350 <__sinit>:
 800d350:	b510      	push	{r4, lr}
 800d352:	4604      	mov	r4, r0
 800d354:	f7ff fff0 	bl	800d338 <__sinit_lock_acquire>
 800d358:	69a3      	ldr	r3, [r4, #24]
 800d35a:	b11b      	cbz	r3, 800d364 <__sinit+0x14>
 800d35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d360:	f7ff bff0 	b.w	800d344 <__sinit_lock_release>
 800d364:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d368:	6523      	str	r3, [r4, #80]	; 0x50
 800d36a:	4b13      	ldr	r3, [pc, #76]	; (800d3b8 <__sinit+0x68>)
 800d36c:	4a13      	ldr	r2, [pc, #76]	; (800d3bc <__sinit+0x6c>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	62a2      	str	r2, [r4, #40]	; 0x28
 800d372:	42a3      	cmp	r3, r4
 800d374:	bf04      	itt	eq
 800d376:	2301      	moveq	r3, #1
 800d378:	61a3      	streq	r3, [r4, #24]
 800d37a:	4620      	mov	r0, r4
 800d37c:	f000 f820 	bl	800d3c0 <__sfp>
 800d380:	6060      	str	r0, [r4, #4]
 800d382:	4620      	mov	r0, r4
 800d384:	f000 f81c 	bl	800d3c0 <__sfp>
 800d388:	60a0      	str	r0, [r4, #8]
 800d38a:	4620      	mov	r0, r4
 800d38c:	f000 f818 	bl	800d3c0 <__sfp>
 800d390:	2200      	movs	r2, #0
 800d392:	60e0      	str	r0, [r4, #12]
 800d394:	2104      	movs	r1, #4
 800d396:	6860      	ldr	r0, [r4, #4]
 800d398:	f7ff ff82 	bl	800d2a0 <std>
 800d39c:	68a0      	ldr	r0, [r4, #8]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	2109      	movs	r1, #9
 800d3a2:	f7ff ff7d 	bl	800d2a0 <std>
 800d3a6:	68e0      	ldr	r0, [r4, #12]
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	2112      	movs	r1, #18
 800d3ac:	f7ff ff78 	bl	800d2a0 <std>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	61a3      	str	r3, [r4, #24]
 800d3b4:	e7d2      	b.n	800d35c <__sinit+0xc>
 800d3b6:	bf00      	nop
 800d3b8:	080e9c84 	.word	0x080e9c84
 800d3bc:	0800d2e9 	.word	0x0800d2e9

0800d3c0 <__sfp>:
 800d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c2:	4607      	mov	r7, r0
 800d3c4:	f7ff ffac 	bl	800d320 <__sfp_lock_acquire>
 800d3c8:	4b1e      	ldr	r3, [pc, #120]	; (800d444 <__sfp+0x84>)
 800d3ca:	681e      	ldr	r6, [r3, #0]
 800d3cc:	69b3      	ldr	r3, [r6, #24]
 800d3ce:	b913      	cbnz	r3, 800d3d6 <__sfp+0x16>
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f7ff ffbd 	bl	800d350 <__sinit>
 800d3d6:	3648      	adds	r6, #72	; 0x48
 800d3d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	d503      	bpl.n	800d3e8 <__sfp+0x28>
 800d3e0:	6833      	ldr	r3, [r6, #0]
 800d3e2:	b30b      	cbz	r3, 800d428 <__sfp+0x68>
 800d3e4:	6836      	ldr	r6, [r6, #0]
 800d3e6:	e7f7      	b.n	800d3d8 <__sfp+0x18>
 800d3e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d3ec:	b9d5      	cbnz	r5, 800d424 <__sfp+0x64>
 800d3ee:	4b16      	ldr	r3, [pc, #88]	; (800d448 <__sfp+0x88>)
 800d3f0:	60e3      	str	r3, [r4, #12]
 800d3f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d3f6:	6665      	str	r5, [r4, #100]	; 0x64
 800d3f8:	f000 f847 	bl	800d48a <__retarget_lock_init_recursive>
 800d3fc:	f7ff ff96 	bl	800d32c <__sfp_lock_release>
 800d400:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d404:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d408:	6025      	str	r5, [r4, #0]
 800d40a:	61a5      	str	r5, [r4, #24]
 800d40c:	2208      	movs	r2, #8
 800d40e:	4629      	mov	r1, r5
 800d410:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d414:	f7ff f948 	bl	800c6a8 <memset>
 800d418:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d41c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d420:	4620      	mov	r0, r4
 800d422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d424:	3468      	adds	r4, #104	; 0x68
 800d426:	e7d9      	b.n	800d3dc <__sfp+0x1c>
 800d428:	2104      	movs	r1, #4
 800d42a:	4638      	mov	r0, r7
 800d42c:	f7ff ff62 	bl	800d2f4 <__sfmoreglue>
 800d430:	4604      	mov	r4, r0
 800d432:	6030      	str	r0, [r6, #0]
 800d434:	2800      	cmp	r0, #0
 800d436:	d1d5      	bne.n	800d3e4 <__sfp+0x24>
 800d438:	f7ff ff78 	bl	800d32c <__sfp_lock_release>
 800d43c:	230c      	movs	r3, #12
 800d43e:	603b      	str	r3, [r7, #0]
 800d440:	e7ee      	b.n	800d420 <__sfp+0x60>
 800d442:	bf00      	nop
 800d444:	080e9c84 	.word	0x080e9c84
 800d448:	ffff0001 	.word	0xffff0001

0800d44c <_fwalk_reent>:
 800d44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d450:	4606      	mov	r6, r0
 800d452:	4688      	mov	r8, r1
 800d454:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d458:	2700      	movs	r7, #0
 800d45a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d45e:	f1b9 0901 	subs.w	r9, r9, #1
 800d462:	d505      	bpl.n	800d470 <_fwalk_reent+0x24>
 800d464:	6824      	ldr	r4, [r4, #0]
 800d466:	2c00      	cmp	r4, #0
 800d468:	d1f7      	bne.n	800d45a <_fwalk_reent+0xe>
 800d46a:	4638      	mov	r0, r7
 800d46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d470:	89ab      	ldrh	r3, [r5, #12]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d907      	bls.n	800d486 <_fwalk_reent+0x3a>
 800d476:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d47a:	3301      	adds	r3, #1
 800d47c:	d003      	beq.n	800d486 <_fwalk_reent+0x3a>
 800d47e:	4629      	mov	r1, r5
 800d480:	4630      	mov	r0, r6
 800d482:	47c0      	blx	r8
 800d484:	4307      	orrs	r7, r0
 800d486:	3568      	adds	r5, #104	; 0x68
 800d488:	e7e9      	b.n	800d45e <_fwalk_reent+0x12>

0800d48a <__retarget_lock_init_recursive>:
 800d48a:	4770      	bx	lr

0800d48c <__retarget_lock_acquire_recursive>:
 800d48c:	4770      	bx	lr

0800d48e <__retarget_lock_release_recursive>:
 800d48e:	4770      	bx	lr

0800d490 <__swhatbuf_r>:
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	460e      	mov	r6, r1
 800d494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d498:	2900      	cmp	r1, #0
 800d49a:	b096      	sub	sp, #88	; 0x58
 800d49c:	4614      	mov	r4, r2
 800d49e:	461d      	mov	r5, r3
 800d4a0:	da07      	bge.n	800d4b2 <__swhatbuf_r+0x22>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	602b      	str	r3, [r5, #0]
 800d4a6:	89b3      	ldrh	r3, [r6, #12]
 800d4a8:	061a      	lsls	r2, r3, #24
 800d4aa:	d410      	bmi.n	800d4ce <__swhatbuf_r+0x3e>
 800d4ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4b0:	e00e      	b.n	800d4d0 <__swhatbuf_r+0x40>
 800d4b2:	466a      	mov	r2, sp
 800d4b4:	f000 f906 	bl	800d6c4 <_fstat_r>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	dbf2      	blt.n	800d4a2 <__swhatbuf_r+0x12>
 800d4bc:	9a01      	ldr	r2, [sp, #4]
 800d4be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d4c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d4c6:	425a      	negs	r2, r3
 800d4c8:	415a      	adcs	r2, r3
 800d4ca:	602a      	str	r2, [r5, #0]
 800d4cc:	e7ee      	b.n	800d4ac <__swhatbuf_r+0x1c>
 800d4ce:	2340      	movs	r3, #64	; 0x40
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	6023      	str	r3, [r4, #0]
 800d4d4:	b016      	add	sp, #88	; 0x58
 800d4d6:	bd70      	pop	{r4, r5, r6, pc}

0800d4d8 <__smakebuf_r>:
 800d4d8:	898b      	ldrh	r3, [r1, #12]
 800d4da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4dc:	079d      	lsls	r5, r3, #30
 800d4de:	4606      	mov	r6, r0
 800d4e0:	460c      	mov	r4, r1
 800d4e2:	d507      	bpl.n	800d4f4 <__smakebuf_r+0x1c>
 800d4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	6123      	str	r3, [r4, #16]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	6163      	str	r3, [r4, #20]
 800d4f0:	b002      	add	sp, #8
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
 800d4f4:	ab01      	add	r3, sp, #4
 800d4f6:	466a      	mov	r2, sp
 800d4f8:	f7ff ffca 	bl	800d490 <__swhatbuf_r>
 800d4fc:	9900      	ldr	r1, [sp, #0]
 800d4fe:	4605      	mov	r5, r0
 800d500:	4630      	mov	r0, r6
 800d502:	f7ff f9eb 	bl	800c8dc <_malloc_r>
 800d506:	b948      	cbnz	r0, 800d51c <__smakebuf_r+0x44>
 800d508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d50c:	059a      	lsls	r2, r3, #22
 800d50e:	d4ef      	bmi.n	800d4f0 <__smakebuf_r+0x18>
 800d510:	f023 0303 	bic.w	r3, r3, #3
 800d514:	f043 0302 	orr.w	r3, r3, #2
 800d518:	81a3      	strh	r3, [r4, #12]
 800d51a:	e7e3      	b.n	800d4e4 <__smakebuf_r+0xc>
 800d51c:	4b0d      	ldr	r3, [pc, #52]	; (800d554 <__smakebuf_r+0x7c>)
 800d51e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d520:	89a3      	ldrh	r3, [r4, #12]
 800d522:	6020      	str	r0, [r4, #0]
 800d524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d528:	81a3      	strh	r3, [r4, #12]
 800d52a:	9b00      	ldr	r3, [sp, #0]
 800d52c:	6163      	str	r3, [r4, #20]
 800d52e:	9b01      	ldr	r3, [sp, #4]
 800d530:	6120      	str	r0, [r4, #16]
 800d532:	b15b      	cbz	r3, 800d54c <__smakebuf_r+0x74>
 800d534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d538:	4630      	mov	r0, r6
 800d53a:	f000 f8d5 	bl	800d6e8 <_isatty_r>
 800d53e:	b128      	cbz	r0, 800d54c <__smakebuf_r+0x74>
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	f023 0303 	bic.w	r3, r3, #3
 800d546:	f043 0301 	orr.w	r3, r3, #1
 800d54a:	81a3      	strh	r3, [r4, #12]
 800d54c:	89a0      	ldrh	r0, [r4, #12]
 800d54e:	4305      	orrs	r5, r0
 800d550:	81a5      	strh	r5, [r4, #12]
 800d552:	e7cd      	b.n	800d4f0 <__smakebuf_r+0x18>
 800d554:	0800d2e9 	.word	0x0800d2e9

0800d558 <__malloc_lock>:
 800d558:	4801      	ldr	r0, [pc, #4]	; (800d560 <__malloc_lock+0x8>)
 800d55a:	f7ff bf97 	b.w	800d48c <__retarget_lock_acquire_recursive>
 800d55e:	bf00      	nop
 800d560:	200005d0 	.word	0x200005d0

0800d564 <__malloc_unlock>:
 800d564:	4801      	ldr	r0, [pc, #4]	; (800d56c <__malloc_unlock+0x8>)
 800d566:	f7ff bf92 	b.w	800d48e <__retarget_lock_release_recursive>
 800d56a:	bf00      	nop
 800d56c:	200005d0 	.word	0x200005d0

0800d570 <_raise_r>:
 800d570:	291f      	cmp	r1, #31
 800d572:	b538      	push	{r3, r4, r5, lr}
 800d574:	4604      	mov	r4, r0
 800d576:	460d      	mov	r5, r1
 800d578:	d904      	bls.n	800d584 <_raise_r+0x14>
 800d57a:	2316      	movs	r3, #22
 800d57c:	6003      	str	r3, [r0, #0]
 800d57e:	f04f 30ff 	mov.w	r0, #4294967295
 800d582:	bd38      	pop	{r3, r4, r5, pc}
 800d584:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d586:	b112      	cbz	r2, 800d58e <_raise_r+0x1e>
 800d588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d58c:	b94b      	cbnz	r3, 800d5a2 <_raise_r+0x32>
 800d58e:	4620      	mov	r0, r4
 800d590:	f000 f830 	bl	800d5f4 <_getpid_r>
 800d594:	462a      	mov	r2, r5
 800d596:	4601      	mov	r1, r0
 800d598:	4620      	mov	r0, r4
 800d59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d59e:	f000 b817 	b.w	800d5d0 <_kill_r>
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d00a      	beq.n	800d5bc <_raise_r+0x4c>
 800d5a6:	1c59      	adds	r1, r3, #1
 800d5a8:	d103      	bne.n	800d5b2 <_raise_r+0x42>
 800d5aa:	2316      	movs	r3, #22
 800d5ac:	6003      	str	r3, [r0, #0]
 800d5ae:	2001      	movs	r0, #1
 800d5b0:	e7e7      	b.n	800d582 <_raise_r+0x12>
 800d5b2:	2400      	movs	r4, #0
 800d5b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	4798      	blx	r3
 800d5bc:	2000      	movs	r0, #0
 800d5be:	e7e0      	b.n	800d582 <_raise_r+0x12>

0800d5c0 <raise>:
 800d5c0:	4b02      	ldr	r3, [pc, #8]	; (800d5cc <raise+0xc>)
 800d5c2:	4601      	mov	r1, r0
 800d5c4:	6818      	ldr	r0, [r3, #0]
 800d5c6:	f7ff bfd3 	b.w	800d570 <_raise_r>
 800d5ca:	bf00      	nop
 800d5cc:	200000ac 	.word	0x200000ac

0800d5d0 <_kill_r>:
 800d5d0:	b538      	push	{r3, r4, r5, lr}
 800d5d2:	4d07      	ldr	r5, [pc, #28]	; (800d5f0 <_kill_r+0x20>)
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	4608      	mov	r0, r1
 800d5da:	4611      	mov	r1, r2
 800d5dc:	602b      	str	r3, [r5, #0]
 800d5de:	f7f7 fffb 	bl	80055d8 <_kill>
 800d5e2:	1c43      	adds	r3, r0, #1
 800d5e4:	d102      	bne.n	800d5ec <_kill_r+0x1c>
 800d5e6:	682b      	ldr	r3, [r5, #0]
 800d5e8:	b103      	cbz	r3, 800d5ec <_kill_r+0x1c>
 800d5ea:	6023      	str	r3, [r4, #0]
 800d5ec:	bd38      	pop	{r3, r4, r5, pc}
 800d5ee:	bf00      	nop
 800d5f0:	200005d8 	.word	0x200005d8

0800d5f4 <_getpid_r>:
 800d5f4:	f7f7 bfe8 	b.w	80055c8 <_getpid>

0800d5f8 <__sread>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d600:	f000 f894 	bl	800d72c <_read_r>
 800d604:	2800      	cmp	r0, #0
 800d606:	bfab      	itete	ge
 800d608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d60a:	89a3      	ldrhlt	r3, [r4, #12]
 800d60c:	181b      	addge	r3, r3, r0
 800d60e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d612:	bfac      	ite	ge
 800d614:	6563      	strge	r3, [r4, #84]	; 0x54
 800d616:	81a3      	strhlt	r3, [r4, #12]
 800d618:	bd10      	pop	{r4, pc}

0800d61a <__swrite>:
 800d61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d61e:	461f      	mov	r7, r3
 800d620:	898b      	ldrh	r3, [r1, #12]
 800d622:	05db      	lsls	r3, r3, #23
 800d624:	4605      	mov	r5, r0
 800d626:	460c      	mov	r4, r1
 800d628:	4616      	mov	r6, r2
 800d62a:	d505      	bpl.n	800d638 <__swrite+0x1e>
 800d62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d630:	2302      	movs	r3, #2
 800d632:	2200      	movs	r2, #0
 800d634:	f000 f868 	bl	800d708 <_lseek_r>
 800d638:	89a3      	ldrh	r3, [r4, #12]
 800d63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d63e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d642:	81a3      	strh	r3, [r4, #12]
 800d644:	4632      	mov	r2, r6
 800d646:	463b      	mov	r3, r7
 800d648:	4628      	mov	r0, r5
 800d64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d64e:	f000 b817 	b.w	800d680 <_write_r>

0800d652 <__sseek>:
 800d652:	b510      	push	{r4, lr}
 800d654:	460c      	mov	r4, r1
 800d656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d65a:	f000 f855 	bl	800d708 <_lseek_r>
 800d65e:	1c43      	adds	r3, r0, #1
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	bf15      	itete	ne
 800d664:	6560      	strne	r0, [r4, #84]	; 0x54
 800d666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d66a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d66e:	81a3      	strheq	r3, [r4, #12]
 800d670:	bf18      	it	ne
 800d672:	81a3      	strhne	r3, [r4, #12]
 800d674:	bd10      	pop	{r4, pc}

0800d676 <__sclose>:
 800d676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d67a:	f000 b813 	b.w	800d6a4 <_close_r>
	...

0800d680 <_write_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4d07      	ldr	r5, [pc, #28]	; (800d6a0 <_write_r+0x20>)
 800d684:	4604      	mov	r4, r0
 800d686:	4608      	mov	r0, r1
 800d688:	4611      	mov	r1, r2
 800d68a:	2200      	movs	r2, #0
 800d68c:	602a      	str	r2, [r5, #0]
 800d68e:	461a      	mov	r2, r3
 800d690:	f7f7 ffd9 	bl	8005646 <_write>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d102      	bne.n	800d69e <_write_r+0x1e>
 800d698:	682b      	ldr	r3, [r5, #0]
 800d69a:	b103      	cbz	r3, 800d69e <_write_r+0x1e>
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	bd38      	pop	{r3, r4, r5, pc}
 800d6a0:	200005d8 	.word	0x200005d8

0800d6a4 <_close_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	4d06      	ldr	r5, [pc, #24]	; (800d6c0 <_close_r+0x1c>)
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	4608      	mov	r0, r1
 800d6ae:	602b      	str	r3, [r5, #0]
 800d6b0:	f7f7 ffe5 	bl	800567e <_close>
 800d6b4:	1c43      	adds	r3, r0, #1
 800d6b6:	d102      	bne.n	800d6be <_close_r+0x1a>
 800d6b8:	682b      	ldr	r3, [r5, #0]
 800d6ba:	b103      	cbz	r3, 800d6be <_close_r+0x1a>
 800d6bc:	6023      	str	r3, [r4, #0]
 800d6be:	bd38      	pop	{r3, r4, r5, pc}
 800d6c0:	200005d8 	.word	0x200005d8

0800d6c4 <_fstat_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	4d07      	ldr	r5, [pc, #28]	; (800d6e4 <_fstat_r+0x20>)
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	4608      	mov	r0, r1
 800d6ce:	4611      	mov	r1, r2
 800d6d0:	602b      	str	r3, [r5, #0]
 800d6d2:	f7f7 ffe0 	bl	8005696 <_fstat>
 800d6d6:	1c43      	adds	r3, r0, #1
 800d6d8:	d102      	bne.n	800d6e0 <_fstat_r+0x1c>
 800d6da:	682b      	ldr	r3, [r5, #0]
 800d6dc:	b103      	cbz	r3, 800d6e0 <_fstat_r+0x1c>
 800d6de:	6023      	str	r3, [r4, #0]
 800d6e0:	bd38      	pop	{r3, r4, r5, pc}
 800d6e2:	bf00      	nop
 800d6e4:	200005d8 	.word	0x200005d8

0800d6e8 <_isatty_r>:
 800d6e8:	b538      	push	{r3, r4, r5, lr}
 800d6ea:	4d06      	ldr	r5, [pc, #24]	; (800d704 <_isatty_r+0x1c>)
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	4608      	mov	r0, r1
 800d6f2:	602b      	str	r3, [r5, #0]
 800d6f4:	f7f7 ffdf 	bl	80056b6 <_isatty>
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	d102      	bne.n	800d702 <_isatty_r+0x1a>
 800d6fc:	682b      	ldr	r3, [r5, #0]
 800d6fe:	b103      	cbz	r3, 800d702 <_isatty_r+0x1a>
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	bd38      	pop	{r3, r4, r5, pc}
 800d704:	200005d8 	.word	0x200005d8

0800d708 <_lseek_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	4d07      	ldr	r5, [pc, #28]	; (800d728 <_lseek_r+0x20>)
 800d70c:	4604      	mov	r4, r0
 800d70e:	4608      	mov	r0, r1
 800d710:	4611      	mov	r1, r2
 800d712:	2200      	movs	r2, #0
 800d714:	602a      	str	r2, [r5, #0]
 800d716:	461a      	mov	r2, r3
 800d718:	f7f7 ffd8 	bl	80056cc <_lseek>
 800d71c:	1c43      	adds	r3, r0, #1
 800d71e:	d102      	bne.n	800d726 <_lseek_r+0x1e>
 800d720:	682b      	ldr	r3, [r5, #0]
 800d722:	b103      	cbz	r3, 800d726 <_lseek_r+0x1e>
 800d724:	6023      	str	r3, [r4, #0]
 800d726:	bd38      	pop	{r3, r4, r5, pc}
 800d728:	200005d8 	.word	0x200005d8

0800d72c <_read_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4d07      	ldr	r5, [pc, #28]	; (800d74c <_read_r+0x20>)
 800d730:	4604      	mov	r4, r0
 800d732:	4608      	mov	r0, r1
 800d734:	4611      	mov	r1, r2
 800d736:	2200      	movs	r2, #0
 800d738:	602a      	str	r2, [r5, #0]
 800d73a:	461a      	mov	r2, r3
 800d73c:	f7f7 ff66 	bl	800560c <_read>
 800d740:	1c43      	adds	r3, r0, #1
 800d742:	d102      	bne.n	800d74a <_read_r+0x1e>
 800d744:	682b      	ldr	r3, [r5, #0]
 800d746:	b103      	cbz	r3, 800d74a <_read_r+0x1e>
 800d748:	6023      	str	r3, [r4, #0]
 800d74a:	bd38      	pop	{r3, r4, r5, pc}
 800d74c:	200005d8 	.word	0x200005d8

0800d750 <pow>:
 800d750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d754:	ec59 8b10 	vmov	r8, r9, d0
 800d758:	ec57 6b11 	vmov	r6, r7, d1
 800d75c:	f000 f8dc 	bl	800d918 <__ieee754_pow>
 800d760:	4b4e      	ldr	r3, [pc, #312]	; (800d89c <pow+0x14c>)
 800d762:	f993 3000 	ldrsb.w	r3, [r3]
 800d766:	3301      	adds	r3, #1
 800d768:	ec55 4b10 	vmov	r4, r5, d0
 800d76c:	d015      	beq.n	800d79a <pow+0x4a>
 800d76e:	4632      	mov	r2, r6
 800d770:	463b      	mov	r3, r7
 800d772:	4630      	mov	r0, r6
 800d774:	4639      	mov	r1, r7
 800d776:	f7f3 f9d9 	bl	8000b2c <__aeabi_dcmpun>
 800d77a:	b970      	cbnz	r0, 800d79a <pow+0x4a>
 800d77c:	4642      	mov	r2, r8
 800d77e:	464b      	mov	r3, r9
 800d780:	4640      	mov	r0, r8
 800d782:	4649      	mov	r1, r9
 800d784:	f7f3 f9d2 	bl	8000b2c <__aeabi_dcmpun>
 800d788:	2200      	movs	r2, #0
 800d78a:	2300      	movs	r3, #0
 800d78c:	b148      	cbz	r0, 800d7a2 <pow+0x52>
 800d78e:	4630      	mov	r0, r6
 800d790:	4639      	mov	r1, r7
 800d792:	f7f3 f999 	bl	8000ac8 <__aeabi_dcmpeq>
 800d796:	2800      	cmp	r0, #0
 800d798:	d17d      	bne.n	800d896 <pow+0x146>
 800d79a:	ec45 4b10 	vmov	d0, r4, r5
 800d79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a2:	4640      	mov	r0, r8
 800d7a4:	4649      	mov	r1, r9
 800d7a6:	f7f3 f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7aa:	b1e0      	cbz	r0, 800d7e6 <pow+0x96>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	f7f3 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d16c      	bne.n	800d896 <pow+0x146>
 800d7bc:	ec47 6b10 	vmov	d0, r6, r7
 800d7c0:	f000 fe89 	bl	800e4d6 <finite>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d0e8      	beq.n	800d79a <pow+0x4a>
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	4639      	mov	r1, r7
 800d7d0:	f7f3 f984 	bl	8000adc <__aeabi_dcmplt>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d0e0      	beq.n	800d79a <pow+0x4a>
 800d7d8:	f7fe ff22 	bl	800c620 <__errno>
 800d7dc:	2321      	movs	r3, #33	; 0x21
 800d7de:	6003      	str	r3, [r0, #0]
 800d7e0:	2400      	movs	r4, #0
 800d7e2:	4d2f      	ldr	r5, [pc, #188]	; (800d8a0 <pow+0x150>)
 800d7e4:	e7d9      	b.n	800d79a <pow+0x4a>
 800d7e6:	ec45 4b10 	vmov	d0, r4, r5
 800d7ea:	f000 fe74 	bl	800e4d6 <finite>
 800d7ee:	bbb8      	cbnz	r0, 800d860 <pow+0x110>
 800d7f0:	ec49 8b10 	vmov	d0, r8, r9
 800d7f4:	f000 fe6f 	bl	800e4d6 <finite>
 800d7f8:	b390      	cbz	r0, 800d860 <pow+0x110>
 800d7fa:	ec47 6b10 	vmov	d0, r6, r7
 800d7fe:	f000 fe6a 	bl	800e4d6 <finite>
 800d802:	b368      	cbz	r0, 800d860 <pow+0x110>
 800d804:	4622      	mov	r2, r4
 800d806:	462b      	mov	r3, r5
 800d808:	4620      	mov	r0, r4
 800d80a:	4629      	mov	r1, r5
 800d80c:	f7f3 f98e 	bl	8000b2c <__aeabi_dcmpun>
 800d810:	b160      	cbz	r0, 800d82c <pow+0xdc>
 800d812:	f7fe ff05 	bl	800c620 <__errno>
 800d816:	2321      	movs	r3, #33	; 0x21
 800d818:	6003      	str	r3, [r0, #0]
 800d81a:	2200      	movs	r2, #0
 800d81c:	2300      	movs	r3, #0
 800d81e:	4610      	mov	r0, r2
 800d820:	4619      	mov	r1, r3
 800d822:	f7f3 f813 	bl	800084c <__aeabi_ddiv>
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
 800d82a:	e7b6      	b.n	800d79a <pow+0x4a>
 800d82c:	f7fe fef8 	bl	800c620 <__errno>
 800d830:	2322      	movs	r3, #34	; 0x22
 800d832:	6003      	str	r3, [r0, #0]
 800d834:	2200      	movs	r2, #0
 800d836:	2300      	movs	r3, #0
 800d838:	4640      	mov	r0, r8
 800d83a:	4649      	mov	r1, r9
 800d83c:	f7f3 f94e 	bl	8000adc <__aeabi_dcmplt>
 800d840:	2400      	movs	r4, #0
 800d842:	b158      	cbz	r0, 800d85c <pow+0x10c>
 800d844:	ec47 6b10 	vmov	d0, r6, r7
 800d848:	f000 fe5a 	bl	800e500 <rint>
 800d84c:	4632      	mov	r2, r6
 800d84e:	ec51 0b10 	vmov	r0, r1, d0
 800d852:	463b      	mov	r3, r7
 800d854:	f7f3 f938 	bl	8000ac8 <__aeabi_dcmpeq>
 800d858:	2800      	cmp	r0, #0
 800d85a:	d0c2      	beq.n	800d7e2 <pow+0x92>
 800d85c:	4d11      	ldr	r5, [pc, #68]	; (800d8a4 <pow+0x154>)
 800d85e:	e79c      	b.n	800d79a <pow+0x4a>
 800d860:	2200      	movs	r2, #0
 800d862:	2300      	movs	r3, #0
 800d864:	4620      	mov	r0, r4
 800d866:	4629      	mov	r1, r5
 800d868:	f7f3 f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d094      	beq.n	800d79a <pow+0x4a>
 800d870:	ec49 8b10 	vmov	d0, r8, r9
 800d874:	f000 fe2f 	bl	800e4d6 <finite>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d08e      	beq.n	800d79a <pow+0x4a>
 800d87c:	ec47 6b10 	vmov	d0, r6, r7
 800d880:	f000 fe29 	bl	800e4d6 <finite>
 800d884:	2800      	cmp	r0, #0
 800d886:	d088      	beq.n	800d79a <pow+0x4a>
 800d888:	f7fe feca 	bl	800c620 <__errno>
 800d88c:	2322      	movs	r3, #34	; 0x22
 800d88e:	6003      	str	r3, [r0, #0]
 800d890:	2400      	movs	r4, #0
 800d892:	2500      	movs	r5, #0
 800d894:	e781      	b.n	800d79a <pow+0x4a>
 800d896:	4d04      	ldr	r5, [pc, #16]	; (800d8a8 <pow+0x158>)
 800d898:	2400      	movs	r4, #0
 800d89a:	e77e      	b.n	800d79a <pow+0x4a>
 800d89c:	20000110 	.word	0x20000110
 800d8a0:	fff00000 	.word	0xfff00000
 800d8a4:	7ff00000 	.word	0x7ff00000
 800d8a8:	3ff00000 	.word	0x3ff00000

0800d8ac <sqrt>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	ed2d 8b02 	vpush	{d8}
 800d8b2:	ec55 4b10 	vmov	r4, r5, d0
 800d8b6:	f000 fd51 	bl	800e35c <__ieee754_sqrt>
 800d8ba:	4b15      	ldr	r3, [pc, #84]	; (800d910 <sqrt+0x64>)
 800d8bc:	eeb0 8a40 	vmov.f32	s16, s0
 800d8c0:	eef0 8a60 	vmov.f32	s17, s1
 800d8c4:	f993 3000 	ldrsb.w	r3, [r3]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	d019      	beq.n	800d900 <sqrt+0x54>
 800d8cc:	4622      	mov	r2, r4
 800d8ce:	462b      	mov	r3, r5
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f7f3 f92a 	bl	8000b2c <__aeabi_dcmpun>
 800d8d8:	b990      	cbnz	r0, 800d900 <sqrt+0x54>
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2300      	movs	r3, #0
 800d8de:	4620      	mov	r0, r4
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	f7f3 f8fb 	bl	8000adc <__aeabi_dcmplt>
 800d8e6:	b158      	cbz	r0, 800d900 <sqrt+0x54>
 800d8e8:	f7fe fe9a 	bl	800c620 <__errno>
 800d8ec:	2321      	movs	r3, #33	; 0x21
 800d8ee:	6003      	str	r3, [r0, #0]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	f7f2 ffa8 	bl	800084c <__aeabi_ddiv>
 800d8fc:	ec41 0b18 	vmov	d8, r0, r1
 800d900:	eeb0 0a48 	vmov.f32	s0, s16
 800d904:	eef0 0a68 	vmov.f32	s1, s17
 800d908:	ecbd 8b02 	vpop	{d8}
 800d90c:	bd38      	pop	{r3, r4, r5, pc}
 800d90e:	bf00      	nop
 800d910:	20000110 	.word	0x20000110
 800d914:	00000000 	.word	0x00000000

0800d918 <__ieee754_pow>:
 800d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91c:	ed2d 8b06 	vpush	{d8-d10}
 800d920:	b08d      	sub	sp, #52	; 0x34
 800d922:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d926:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d92a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d92e:	ea56 0100 	orrs.w	r1, r6, r0
 800d932:	ec53 2b10 	vmov	r2, r3, d0
 800d936:	f000 84d1 	beq.w	800e2dc <__ieee754_pow+0x9c4>
 800d93a:	497f      	ldr	r1, [pc, #508]	; (800db38 <__ieee754_pow+0x220>)
 800d93c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d940:	428c      	cmp	r4, r1
 800d942:	ee10 8a10 	vmov	r8, s0
 800d946:	4699      	mov	r9, r3
 800d948:	dc09      	bgt.n	800d95e <__ieee754_pow+0x46>
 800d94a:	d103      	bne.n	800d954 <__ieee754_pow+0x3c>
 800d94c:	b97a      	cbnz	r2, 800d96e <__ieee754_pow+0x56>
 800d94e:	42a6      	cmp	r6, r4
 800d950:	dd02      	ble.n	800d958 <__ieee754_pow+0x40>
 800d952:	e00c      	b.n	800d96e <__ieee754_pow+0x56>
 800d954:	428e      	cmp	r6, r1
 800d956:	dc02      	bgt.n	800d95e <__ieee754_pow+0x46>
 800d958:	428e      	cmp	r6, r1
 800d95a:	d110      	bne.n	800d97e <__ieee754_pow+0x66>
 800d95c:	b178      	cbz	r0, 800d97e <__ieee754_pow+0x66>
 800d95e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d962:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d966:	ea54 0308 	orrs.w	r3, r4, r8
 800d96a:	f000 84b7 	beq.w	800e2dc <__ieee754_pow+0x9c4>
 800d96e:	4873      	ldr	r0, [pc, #460]	; (800db3c <__ieee754_pow+0x224>)
 800d970:	b00d      	add	sp, #52	; 0x34
 800d972:	ecbd 8b06 	vpop	{d8-d10}
 800d976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97a:	f000 bdb9 	b.w	800e4f0 <nan>
 800d97e:	f1b9 0f00 	cmp.w	r9, #0
 800d982:	da36      	bge.n	800d9f2 <__ieee754_pow+0xda>
 800d984:	496e      	ldr	r1, [pc, #440]	; (800db40 <__ieee754_pow+0x228>)
 800d986:	428e      	cmp	r6, r1
 800d988:	dc51      	bgt.n	800da2e <__ieee754_pow+0x116>
 800d98a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d98e:	428e      	cmp	r6, r1
 800d990:	f340 84af 	ble.w	800e2f2 <__ieee754_pow+0x9da>
 800d994:	1531      	asrs	r1, r6, #20
 800d996:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d99a:	2914      	cmp	r1, #20
 800d99c:	dd0f      	ble.n	800d9be <__ieee754_pow+0xa6>
 800d99e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d9a2:	fa20 fc01 	lsr.w	ip, r0, r1
 800d9a6:	fa0c f101 	lsl.w	r1, ip, r1
 800d9aa:	4281      	cmp	r1, r0
 800d9ac:	f040 84a1 	bne.w	800e2f2 <__ieee754_pow+0x9da>
 800d9b0:	f00c 0c01 	and.w	ip, ip, #1
 800d9b4:	f1cc 0102 	rsb	r1, ip, #2
 800d9b8:	9100      	str	r1, [sp, #0]
 800d9ba:	b180      	cbz	r0, 800d9de <__ieee754_pow+0xc6>
 800d9bc:	e059      	b.n	800da72 <__ieee754_pow+0x15a>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d155      	bne.n	800da6e <__ieee754_pow+0x156>
 800d9c2:	f1c1 0114 	rsb	r1, r1, #20
 800d9c6:	fa46 fc01 	asr.w	ip, r6, r1
 800d9ca:	fa0c f101 	lsl.w	r1, ip, r1
 800d9ce:	42b1      	cmp	r1, r6
 800d9d0:	f040 848c 	bne.w	800e2ec <__ieee754_pow+0x9d4>
 800d9d4:	f00c 0c01 	and.w	ip, ip, #1
 800d9d8:	f1cc 0102 	rsb	r1, ip, #2
 800d9dc:	9100      	str	r1, [sp, #0]
 800d9de:	4959      	ldr	r1, [pc, #356]	; (800db44 <__ieee754_pow+0x22c>)
 800d9e0:	428e      	cmp	r6, r1
 800d9e2:	d12d      	bne.n	800da40 <__ieee754_pow+0x128>
 800d9e4:	2f00      	cmp	r7, #0
 800d9e6:	da79      	bge.n	800dadc <__ieee754_pow+0x1c4>
 800d9e8:	4956      	ldr	r1, [pc, #344]	; (800db44 <__ieee754_pow+0x22c>)
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	f7f2 ff2e 	bl	800084c <__aeabi_ddiv>
 800d9f0:	e016      	b.n	800da20 <__ieee754_pow+0x108>
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	9100      	str	r1, [sp, #0]
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d13b      	bne.n	800da72 <__ieee754_pow+0x15a>
 800d9fa:	494f      	ldr	r1, [pc, #316]	; (800db38 <__ieee754_pow+0x220>)
 800d9fc:	428e      	cmp	r6, r1
 800d9fe:	d1ee      	bne.n	800d9de <__ieee754_pow+0xc6>
 800da00:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800da04:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800da08:	ea53 0308 	orrs.w	r3, r3, r8
 800da0c:	f000 8466 	beq.w	800e2dc <__ieee754_pow+0x9c4>
 800da10:	4b4d      	ldr	r3, [pc, #308]	; (800db48 <__ieee754_pow+0x230>)
 800da12:	429c      	cmp	r4, r3
 800da14:	dd0d      	ble.n	800da32 <__ieee754_pow+0x11a>
 800da16:	2f00      	cmp	r7, #0
 800da18:	f280 8464 	bge.w	800e2e4 <__ieee754_pow+0x9cc>
 800da1c:	2000      	movs	r0, #0
 800da1e:	2100      	movs	r1, #0
 800da20:	ec41 0b10 	vmov	d0, r0, r1
 800da24:	b00d      	add	sp, #52	; 0x34
 800da26:	ecbd 8b06 	vpop	{d8-d10}
 800da2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2e:	2102      	movs	r1, #2
 800da30:	e7e0      	b.n	800d9f4 <__ieee754_pow+0xdc>
 800da32:	2f00      	cmp	r7, #0
 800da34:	daf2      	bge.n	800da1c <__ieee754_pow+0x104>
 800da36:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800da3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800da3e:	e7ef      	b.n	800da20 <__ieee754_pow+0x108>
 800da40:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800da44:	d104      	bne.n	800da50 <__ieee754_pow+0x138>
 800da46:	4610      	mov	r0, r2
 800da48:	4619      	mov	r1, r3
 800da4a:	f7f2 fdd5 	bl	80005f8 <__aeabi_dmul>
 800da4e:	e7e7      	b.n	800da20 <__ieee754_pow+0x108>
 800da50:	493e      	ldr	r1, [pc, #248]	; (800db4c <__ieee754_pow+0x234>)
 800da52:	428f      	cmp	r7, r1
 800da54:	d10d      	bne.n	800da72 <__ieee754_pow+0x15a>
 800da56:	f1b9 0f00 	cmp.w	r9, #0
 800da5a:	db0a      	blt.n	800da72 <__ieee754_pow+0x15a>
 800da5c:	ec43 2b10 	vmov	d0, r2, r3
 800da60:	b00d      	add	sp, #52	; 0x34
 800da62:	ecbd 8b06 	vpop	{d8-d10}
 800da66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6a:	f000 bc77 	b.w	800e35c <__ieee754_sqrt>
 800da6e:	2100      	movs	r1, #0
 800da70:	9100      	str	r1, [sp, #0]
 800da72:	ec43 2b10 	vmov	d0, r2, r3
 800da76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da7a:	f000 fd23 	bl	800e4c4 <fabs>
 800da7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da82:	ec51 0b10 	vmov	r0, r1, d0
 800da86:	f1b8 0f00 	cmp.w	r8, #0
 800da8a:	d12a      	bne.n	800dae2 <__ieee754_pow+0x1ca>
 800da8c:	b12c      	cbz	r4, 800da9a <__ieee754_pow+0x182>
 800da8e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800db44 <__ieee754_pow+0x22c>
 800da92:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800da96:	45e6      	cmp	lr, ip
 800da98:	d123      	bne.n	800dae2 <__ieee754_pow+0x1ca>
 800da9a:	2f00      	cmp	r7, #0
 800da9c:	da05      	bge.n	800daaa <__ieee754_pow+0x192>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	2000      	movs	r0, #0
 800daa4:	4927      	ldr	r1, [pc, #156]	; (800db44 <__ieee754_pow+0x22c>)
 800daa6:	f7f2 fed1 	bl	800084c <__aeabi_ddiv>
 800daaa:	f1b9 0f00 	cmp.w	r9, #0
 800daae:	dab7      	bge.n	800da20 <__ieee754_pow+0x108>
 800dab0:	9b00      	ldr	r3, [sp, #0]
 800dab2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dab6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800daba:	4323      	orrs	r3, r4
 800dabc:	d108      	bne.n	800dad0 <__ieee754_pow+0x1b8>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4610      	mov	r0, r2
 800dac4:	4619      	mov	r1, r3
 800dac6:	f7f2 fbdf 	bl	8000288 <__aeabi_dsub>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	e78d      	b.n	800d9ec <__ieee754_pow+0xd4>
 800dad0:	9b00      	ldr	r3, [sp, #0]
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d1a4      	bne.n	800da20 <__ieee754_pow+0x108>
 800dad6:	4602      	mov	r2, r0
 800dad8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dadc:	4610      	mov	r0, r2
 800dade:	4619      	mov	r1, r3
 800dae0:	e79e      	b.n	800da20 <__ieee754_pow+0x108>
 800dae2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800dae6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800daea:	950a      	str	r5, [sp, #40]	; 0x28
 800daec:	9d00      	ldr	r5, [sp, #0]
 800daee:	46ac      	mov	ip, r5
 800daf0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800daf2:	ea5c 0505 	orrs.w	r5, ip, r5
 800daf6:	d0e4      	beq.n	800dac2 <__ieee754_pow+0x1aa>
 800daf8:	4b15      	ldr	r3, [pc, #84]	; (800db50 <__ieee754_pow+0x238>)
 800dafa:	429e      	cmp	r6, r3
 800dafc:	f340 80fc 	ble.w	800dcf8 <__ieee754_pow+0x3e0>
 800db00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800db04:	429e      	cmp	r6, r3
 800db06:	4b10      	ldr	r3, [pc, #64]	; (800db48 <__ieee754_pow+0x230>)
 800db08:	dd07      	ble.n	800db1a <__ieee754_pow+0x202>
 800db0a:	429c      	cmp	r4, r3
 800db0c:	dc0a      	bgt.n	800db24 <__ieee754_pow+0x20c>
 800db0e:	2f00      	cmp	r7, #0
 800db10:	da84      	bge.n	800da1c <__ieee754_pow+0x104>
 800db12:	a307      	add	r3, pc, #28	; (adr r3, 800db30 <__ieee754_pow+0x218>)
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	e795      	b.n	800da46 <__ieee754_pow+0x12e>
 800db1a:	429c      	cmp	r4, r3
 800db1c:	dbf7      	blt.n	800db0e <__ieee754_pow+0x1f6>
 800db1e:	4b09      	ldr	r3, [pc, #36]	; (800db44 <__ieee754_pow+0x22c>)
 800db20:	429c      	cmp	r4, r3
 800db22:	dd17      	ble.n	800db54 <__ieee754_pow+0x23c>
 800db24:	2f00      	cmp	r7, #0
 800db26:	dcf4      	bgt.n	800db12 <__ieee754_pow+0x1fa>
 800db28:	e778      	b.n	800da1c <__ieee754_pow+0x104>
 800db2a:	bf00      	nop
 800db2c:	f3af 8000 	nop.w
 800db30:	8800759c 	.word	0x8800759c
 800db34:	7e37e43c 	.word	0x7e37e43c
 800db38:	7ff00000 	.word	0x7ff00000
 800db3c:	080e9d5e 	.word	0x080e9d5e
 800db40:	433fffff 	.word	0x433fffff
 800db44:	3ff00000 	.word	0x3ff00000
 800db48:	3fefffff 	.word	0x3fefffff
 800db4c:	3fe00000 	.word	0x3fe00000
 800db50:	41e00000 	.word	0x41e00000
 800db54:	4b64      	ldr	r3, [pc, #400]	; (800dce8 <__ieee754_pow+0x3d0>)
 800db56:	2200      	movs	r2, #0
 800db58:	f7f2 fb96 	bl	8000288 <__aeabi_dsub>
 800db5c:	a356      	add	r3, pc, #344	; (adr r3, 800dcb8 <__ieee754_pow+0x3a0>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	4604      	mov	r4, r0
 800db64:	460d      	mov	r5, r1
 800db66:	f7f2 fd47 	bl	80005f8 <__aeabi_dmul>
 800db6a:	a355      	add	r3, pc, #340	; (adr r3, 800dcc0 <__ieee754_pow+0x3a8>)
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	4606      	mov	r6, r0
 800db72:	460f      	mov	r7, r1
 800db74:	4620      	mov	r0, r4
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 fd3e 	bl	80005f8 <__aeabi_dmul>
 800db7c:	4b5b      	ldr	r3, [pc, #364]	; (800dcec <__ieee754_pow+0x3d4>)
 800db7e:	4682      	mov	sl, r0
 800db80:	468b      	mov	fp, r1
 800db82:	2200      	movs	r2, #0
 800db84:	4620      	mov	r0, r4
 800db86:	4629      	mov	r1, r5
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	a14d      	add	r1, pc, #308	; (adr r1, 800dcc8 <__ieee754_pow+0x3b0>)
 800db92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db96:	f7f2 fb77 	bl	8000288 <__aeabi_dsub>
 800db9a:	4622      	mov	r2, r4
 800db9c:	462b      	mov	r3, r5
 800db9e:	f7f2 fd2b 	bl	80005f8 <__aeabi_dmul>
 800dba2:	4602      	mov	r2, r0
 800dba4:	460b      	mov	r3, r1
 800dba6:	2000      	movs	r0, #0
 800dba8:	4951      	ldr	r1, [pc, #324]	; (800dcf0 <__ieee754_pow+0x3d8>)
 800dbaa:	f7f2 fb6d 	bl	8000288 <__aeabi_dsub>
 800dbae:	4622      	mov	r2, r4
 800dbb0:	4680      	mov	r8, r0
 800dbb2:	4689      	mov	r9, r1
 800dbb4:	462b      	mov	r3, r5
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	4629      	mov	r1, r5
 800dbba:	f7f2 fd1d 	bl	80005f8 <__aeabi_dmul>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	4649      	mov	r1, r9
 800dbc6:	f7f2 fd17 	bl	80005f8 <__aeabi_dmul>
 800dbca:	a341      	add	r3, pc, #260	; (adr r3, 800dcd0 <__ieee754_pow+0x3b8>)
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	f7f2 fd12 	bl	80005f8 <__aeabi_dmul>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4650      	mov	r0, sl
 800dbda:	4659      	mov	r1, fp
 800dbdc:	f7f2 fb54 	bl	8000288 <__aeabi_dsub>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4680      	mov	r8, r0
 800dbe6:	4689      	mov	r9, r1
 800dbe8:	4630      	mov	r0, r6
 800dbea:	4639      	mov	r1, r7
 800dbec:	f7f2 fb4e 	bl	800028c <__adddf3>
 800dbf0:	2400      	movs	r4, #0
 800dbf2:	4632      	mov	r2, r6
 800dbf4:	463b      	mov	r3, r7
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	f7f2 fb45 	bl	8000288 <__aeabi_dsub>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	460b      	mov	r3, r1
 800dc02:	4640      	mov	r0, r8
 800dc04:	4649      	mov	r1, r9
 800dc06:	f7f2 fb3f 	bl	8000288 <__aeabi_dsub>
 800dc0a:	9b00      	ldr	r3, [sp, #0]
 800dc0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	4313      	orrs	r3, r2
 800dc12:	4682      	mov	sl, r0
 800dc14:	468b      	mov	fp, r1
 800dc16:	f040 81f1 	bne.w	800dffc <__ieee754_pow+0x6e4>
 800dc1a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dcd8 <__ieee754_pow+0x3c0>
 800dc1e:	eeb0 8a47 	vmov.f32	s16, s14
 800dc22:	eef0 8a67 	vmov.f32	s17, s15
 800dc26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc2a:	2600      	movs	r6, #0
 800dc2c:	4632      	mov	r2, r6
 800dc2e:	463b      	mov	r3, r7
 800dc30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc34:	f7f2 fb28 	bl	8000288 <__aeabi_dsub>
 800dc38:	4622      	mov	r2, r4
 800dc3a:	462b      	mov	r3, r5
 800dc3c:	f7f2 fcdc 	bl	80005f8 <__aeabi_dmul>
 800dc40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc44:	4680      	mov	r8, r0
 800dc46:	4689      	mov	r9, r1
 800dc48:	4650      	mov	r0, sl
 800dc4a:	4659      	mov	r1, fp
 800dc4c:	f7f2 fcd4 	bl	80005f8 <__aeabi_dmul>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	4640      	mov	r0, r8
 800dc56:	4649      	mov	r1, r9
 800dc58:	f7f2 fb18 	bl	800028c <__adddf3>
 800dc5c:	4632      	mov	r2, r6
 800dc5e:	463b      	mov	r3, r7
 800dc60:	4680      	mov	r8, r0
 800dc62:	4689      	mov	r9, r1
 800dc64:	4620      	mov	r0, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	4604      	mov	r4, r0
 800dc70:	460d      	mov	r5, r1
 800dc72:	4602      	mov	r2, r0
 800dc74:	4649      	mov	r1, r9
 800dc76:	4640      	mov	r0, r8
 800dc78:	f7f2 fb08 	bl	800028c <__adddf3>
 800dc7c:	4b1d      	ldr	r3, [pc, #116]	; (800dcf4 <__ieee754_pow+0x3dc>)
 800dc7e:	4299      	cmp	r1, r3
 800dc80:	ec45 4b19 	vmov	d9, r4, r5
 800dc84:	4606      	mov	r6, r0
 800dc86:	460f      	mov	r7, r1
 800dc88:	468b      	mov	fp, r1
 800dc8a:	f340 82fe 	ble.w	800e28a <__ieee754_pow+0x972>
 800dc8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dc92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dc96:	4303      	orrs	r3, r0
 800dc98:	f000 81f0 	beq.w	800e07c <__ieee754_pow+0x764>
 800dc9c:	a310      	add	r3, pc, #64	; (adr r3, 800dce0 <__ieee754_pow+0x3c8>)
 800dc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca2:	ec51 0b18 	vmov	r0, r1, d8
 800dca6:	f7f2 fca7 	bl	80005f8 <__aeabi_dmul>
 800dcaa:	a30d      	add	r3, pc, #52	; (adr r3, 800dce0 <__ieee754_pow+0x3c8>)
 800dcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb0:	e6cb      	b.n	800da4a <__ieee754_pow+0x132>
 800dcb2:	bf00      	nop
 800dcb4:	f3af 8000 	nop.w
 800dcb8:	60000000 	.word	0x60000000
 800dcbc:	3ff71547 	.word	0x3ff71547
 800dcc0:	f85ddf44 	.word	0xf85ddf44
 800dcc4:	3e54ae0b 	.word	0x3e54ae0b
 800dcc8:	55555555 	.word	0x55555555
 800dccc:	3fd55555 	.word	0x3fd55555
 800dcd0:	652b82fe 	.word	0x652b82fe
 800dcd4:	3ff71547 	.word	0x3ff71547
 800dcd8:	00000000 	.word	0x00000000
 800dcdc:	bff00000 	.word	0xbff00000
 800dce0:	8800759c 	.word	0x8800759c
 800dce4:	7e37e43c 	.word	0x7e37e43c
 800dce8:	3ff00000 	.word	0x3ff00000
 800dcec:	3fd00000 	.word	0x3fd00000
 800dcf0:	3fe00000 	.word	0x3fe00000
 800dcf4:	408fffff 	.word	0x408fffff
 800dcf8:	4bd7      	ldr	r3, [pc, #860]	; (800e058 <__ieee754_pow+0x740>)
 800dcfa:	ea03 0309 	and.w	r3, r3, r9
 800dcfe:	2200      	movs	r2, #0
 800dd00:	b92b      	cbnz	r3, 800dd0e <__ieee754_pow+0x3f6>
 800dd02:	4bd6      	ldr	r3, [pc, #856]	; (800e05c <__ieee754_pow+0x744>)
 800dd04:	f7f2 fc78 	bl	80005f8 <__aeabi_dmul>
 800dd08:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dd0c:	460c      	mov	r4, r1
 800dd0e:	1523      	asrs	r3, r4, #20
 800dd10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dd14:	4413      	add	r3, r2
 800dd16:	9309      	str	r3, [sp, #36]	; 0x24
 800dd18:	4bd1      	ldr	r3, [pc, #836]	; (800e060 <__ieee754_pow+0x748>)
 800dd1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dd1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dd22:	429c      	cmp	r4, r3
 800dd24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dd28:	dd08      	ble.n	800dd3c <__ieee754_pow+0x424>
 800dd2a:	4bce      	ldr	r3, [pc, #824]	; (800e064 <__ieee754_pow+0x74c>)
 800dd2c:	429c      	cmp	r4, r3
 800dd2e:	f340 8163 	ble.w	800dff8 <__ieee754_pow+0x6e0>
 800dd32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd34:	3301      	adds	r3, #1
 800dd36:	9309      	str	r3, [sp, #36]	; 0x24
 800dd38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dd3c:	2400      	movs	r4, #0
 800dd3e:	00e3      	lsls	r3, r4, #3
 800dd40:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd42:	4bc9      	ldr	r3, [pc, #804]	; (800e068 <__ieee754_pow+0x750>)
 800dd44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd48:	ed93 7b00 	vldr	d7, [r3]
 800dd4c:	4629      	mov	r1, r5
 800dd4e:	ec53 2b17 	vmov	r2, r3, d7
 800dd52:	eeb0 8a47 	vmov.f32	s16, s14
 800dd56:	eef0 8a67 	vmov.f32	s17, s15
 800dd5a:	4682      	mov	sl, r0
 800dd5c:	f7f2 fa94 	bl	8000288 <__aeabi_dsub>
 800dd60:	4652      	mov	r2, sl
 800dd62:	4606      	mov	r6, r0
 800dd64:	460f      	mov	r7, r1
 800dd66:	462b      	mov	r3, r5
 800dd68:	ec51 0b18 	vmov	r0, r1, d8
 800dd6c:	f7f2 fa8e 	bl	800028c <__adddf3>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	2000      	movs	r0, #0
 800dd76:	49bd      	ldr	r1, [pc, #756]	; (800e06c <__ieee754_pow+0x754>)
 800dd78:	f7f2 fd68 	bl	800084c <__aeabi_ddiv>
 800dd7c:	ec41 0b19 	vmov	d9, r0, r1
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4630      	mov	r0, r6
 800dd86:	4639      	mov	r1, r7
 800dd88:	f7f2 fc36 	bl	80005f8 <__aeabi_dmul>
 800dd8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dd90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd98:	2300      	movs	r3, #0
 800dd9a:	9304      	str	r3, [sp, #16]
 800dd9c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dda0:	46ab      	mov	fp, r5
 800dda2:	106d      	asrs	r5, r5, #1
 800dda4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dda8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ddac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4640      	mov	r0, r8
 800ddb4:	4649      	mov	r1, r9
 800ddb6:	4614      	mov	r4, r2
 800ddb8:	461d      	mov	r5, r3
 800ddba:	f7f2 fc1d 	bl	80005f8 <__aeabi_dmul>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	f7f2 fa5f 	bl	8000288 <__aeabi_dsub>
 800ddca:	ec53 2b18 	vmov	r2, r3, d8
 800ddce:	4606      	mov	r6, r0
 800ddd0:	460f      	mov	r7, r1
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	f7f2 fa57 	bl	8000288 <__aeabi_dsub>
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4650      	mov	r0, sl
 800dde0:	4659      	mov	r1, fp
 800dde2:	f7f2 fa51 	bl	8000288 <__aeabi_dsub>
 800dde6:	4642      	mov	r2, r8
 800dde8:	464b      	mov	r3, r9
 800ddea:	f7f2 fc05 	bl	80005f8 <__aeabi_dmul>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	4639      	mov	r1, r7
 800ddf6:	f7f2 fa47 	bl	8000288 <__aeabi_dsub>
 800ddfa:	ec53 2b19 	vmov	r2, r3, d9
 800ddfe:	f7f2 fbfb 	bl	80005f8 <__aeabi_dmul>
 800de02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de06:	ec41 0b18 	vmov	d8, r0, r1
 800de0a:	4610      	mov	r0, r2
 800de0c:	4619      	mov	r1, r3
 800de0e:	f7f2 fbf3 	bl	80005f8 <__aeabi_dmul>
 800de12:	a37d      	add	r3, pc, #500	; (adr r3, 800e008 <__ieee754_pow+0x6f0>)
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	4604      	mov	r4, r0
 800de1a:	460d      	mov	r5, r1
 800de1c:	f7f2 fbec 	bl	80005f8 <__aeabi_dmul>
 800de20:	a37b      	add	r3, pc, #492	; (adr r3, 800e010 <__ieee754_pow+0x6f8>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f7f2 fa31 	bl	800028c <__adddf3>
 800de2a:	4622      	mov	r2, r4
 800de2c:	462b      	mov	r3, r5
 800de2e:	f7f2 fbe3 	bl	80005f8 <__aeabi_dmul>
 800de32:	a379      	add	r3, pc, #484	; (adr r3, 800e018 <__ieee754_pow+0x700>)
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f7f2 fa28 	bl	800028c <__adddf3>
 800de3c:	4622      	mov	r2, r4
 800de3e:	462b      	mov	r3, r5
 800de40:	f7f2 fbda 	bl	80005f8 <__aeabi_dmul>
 800de44:	a376      	add	r3, pc, #472	; (adr r3, 800e020 <__ieee754_pow+0x708>)
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 fa1f 	bl	800028c <__adddf3>
 800de4e:	4622      	mov	r2, r4
 800de50:	462b      	mov	r3, r5
 800de52:	f7f2 fbd1 	bl	80005f8 <__aeabi_dmul>
 800de56:	a374      	add	r3, pc, #464	; (adr r3, 800e028 <__ieee754_pow+0x710>)
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	f7f2 fa16 	bl	800028c <__adddf3>
 800de60:	4622      	mov	r2, r4
 800de62:	462b      	mov	r3, r5
 800de64:	f7f2 fbc8 	bl	80005f8 <__aeabi_dmul>
 800de68:	a371      	add	r3, pc, #452	; (adr r3, 800e030 <__ieee754_pow+0x718>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	f7f2 fa0d 	bl	800028c <__adddf3>
 800de72:	4622      	mov	r2, r4
 800de74:	4606      	mov	r6, r0
 800de76:	460f      	mov	r7, r1
 800de78:	462b      	mov	r3, r5
 800de7a:	4620      	mov	r0, r4
 800de7c:	4629      	mov	r1, r5
 800de7e:	f7f2 fbbb 	bl	80005f8 <__aeabi_dmul>
 800de82:	4602      	mov	r2, r0
 800de84:	460b      	mov	r3, r1
 800de86:	4630      	mov	r0, r6
 800de88:	4639      	mov	r1, r7
 800de8a:	f7f2 fbb5 	bl	80005f8 <__aeabi_dmul>
 800de8e:	4642      	mov	r2, r8
 800de90:	4604      	mov	r4, r0
 800de92:	460d      	mov	r5, r1
 800de94:	464b      	mov	r3, r9
 800de96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de9a:	f7f2 f9f7 	bl	800028c <__adddf3>
 800de9e:	ec53 2b18 	vmov	r2, r3, d8
 800dea2:	f7f2 fba9 	bl	80005f8 <__aeabi_dmul>
 800dea6:	4622      	mov	r2, r4
 800dea8:	462b      	mov	r3, r5
 800deaa:	f7f2 f9ef 	bl	800028c <__adddf3>
 800deae:	4642      	mov	r2, r8
 800deb0:	4682      	mov	sl, r0
 800deb2:	468b      	mov	fp, r1
 800deb4:	464b      	mov	r3, r9
 800deb6:	4640      	mov	r0, r8
 800deb8:	4649      	mov	r1, r9
 800deba:	f7f2 fb9d 	bl	80005f8 <__aeabi_dmul>
 800debe:	4b6c      	ldr	r3, [pc, #432]	; (800e070 <__ieee754_pow+0x758>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	4606      	mov	r6, r0
 800dec4:	460f      	mov	r7, r1
 800dec6:	f7f2 f9e1 	bl	800028c <__adddf3>
 800deca:	4652      	mov	r2, sl
 800decc:	465b      	mov	r3, fp
 800dece:	f7f2 f9dd 	bl	800028c <__adddf3>
 800ded2:	9c04      	ldr	r4, [sp, #16]
 800ded4:	460d      	mov	r5, r1
 800ded6:	4622      	mov	r2, r4
 800ded8:	460b      	mov	r3, r1
 800deda:	4640      	mov	r0, r8
 800dedc:	4649      	mov	r1, r9
 800dede:	f7f2 fb8b 	bl	80005f8 <__aeabi_dmul>
 800dee2:	4b63      	ldr	r3, [pc, #396]	; (800e070 <__ieee754_pow+0x758>)
 800dee4:	4680      	mov	r8, r0
 800dee6:	4689      	mov	r9, r1
 800dee8:	2200      	movs	r2, #0
 800deea:	4620      	mov	r0, r4
 800deec:	4629      	mov	r1, r5
 800deee:	f7f2 f9cb 	bl	8000288 <__aeabi_dsub>
 800def2:	4632      	mov	r2, r6
 800def4:	463b      	mov	r3, r7
 800def6:	f7f2 f9c7 	bl	8000288 <__aeabi_dsub>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	4650      	mov	r0, sl
 800df00:	4659      	mov	r1, fp
 800df02:	f7f2 f9c1 	bl	8000288 <__aeabi_dsub>
 800df06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df0a:	f7f2 fb75 	bl	80005f8 <__aeabi_dmul>
 800df0e:	4622      	mov	r2, r4
 800df10:	4606      	mov	r6, r0
 800df12:	460f      	mov	r7, r1
 800df14:	462b      	mov	r3, r5
 800df16:	ec51 0b18 	vmov	r0, r1, d8
 800df1a:	f7f2 fb6d 	bl	80005f8 <__aeabi_dmul>
 800df1e:	4602      	mov	r2, r0
 800df20:	460b      	mov	r3, r1
 800df22:	4630      	mov	r0, r6
 800df24:	4639      	mov	r1, r7
 800df26:	f7f2 f9b1 	bl	800028c <__adddf3>
 800df2a:	4606      	mov	r6, r0
 800df2c:	460f      	mov	r7, r1
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	4640      	mov	r0, r8
 800df34:	4649      	mov	r1, r9
 800df36:	f7f2 f9a9 	bl	800028c <__adddf3>
 800df3a:	9c04      	ldr	r4, [sp, #16]
 800df3c:	a33e      	add	r3, pc, #248	; (adr r3, 800e038 <__ieee754_pow+0x720>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	4620      	mov	r0, r4
 800df44:	460d      	mov	r5, r1
 800df46:	f7f2 fb57 	bl	80005f8 <__aeabi_dmul>
 800df4a:	4642      	mov	r2, r8
 800df4c:	ec41 0b18 	vmov	d8, r0, r1
 800df50:	464b      	mov	r3, r9
 800df52:	4620      	mov	r0, r4
 800df54:	4629      	mov	r1, r5
 800df56:	f7f2 f997 	bl	8000288 <__aeabi_dsub>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4630      	mov	r0, r6
 800df60:	4639      	mov	r1, r7
 800df62:	f7f2 f991 	bl	8000288 <__aeabi_dsub>
 800df66:	a336      	add	r3, pc, #216	; (adr r3, 800e040 <__ieee754_pow+0x728>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	f7f2 fb44 	bl	80005f8 <__aeabi_dmul>
 800df70:	a335      	add	r3, pc, #212	; (adr r3, 800e048 <__ieee754_pow+0x730>)
 800df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df76:	4606      	mov	r6, r0
 800df78:	460f      	mov	r7, r1
 800df7a:	4620      	mov	r0, r4
 800df7c:	4629      	mov	r1, r5
 800df7e:	f7f2 fb3b 	bl	80005f8 <__aeabi_dmul>
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	4630      	mov	r0, r6
 800df88:	4639      	mov	r1, r7
 800df8a:	f7f2 f97f 	bl	800028c <__adddf3>
 800df8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df90:	4b38      	ldr	r3, [pc, #224]	; (800e074 <__ieee754_pow+0x75c>)
 800df92:	4413      	add	r3, r2
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	f7f2 f978 	bl	800028c <__adddf3>
 800df9c:	4682      	mov	sl, r0
 800df9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfa0:	468b      	mov	fp, r1
 800dfa2:	f7f2 fabf 	bl	8000524 <__aeabi_i2d>
 800dfa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dfa8:	4b33      	ldr	r3, [pc, #204]	; (800e078 <__ieee754_pow+0x760>)
 800dfaa:	4413      	add	r3, r2
 800dfac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dfb0:	4606      	mov	r6, r0
 800dfb2:	460f      	mov	r7, r1
 800dfb4:	4652      	mov	r2, sl
 800dfb6:	465b      	mov	r3, fp
 800dfb8:	ec51 0b18 	vmov	r0, r1, d8
 800dfbc:	f7f2 f966 	bl	800028c <__adddf3>
 800dfc0:	4642      	mov	r2, r8
 800dfc2:	464b      	mov	r3, r9
 800dfc4:	f7f2 f962 	bl	800028c <__adddf3>
 800dfc8:	4632      	mov	r2, r6
 800dfca:	463b      	mov	r3, r7
 800dfcc:	f7f2 f95e 	bl	800028c <__adddf3>
 800dfd0:	9c04      	ldr	r4, [sp, #16]
 800dfd2:	4632      	mov	r2, r6
 800dfd4:	463b      	mov	r3, r7
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	460d      	mov	r5, r1
 800dfda:	f7f2 f955 	bl	8000288 <__aeabi_dsub>
 800dfde:	4642      	mov	r2, r8
 800dfe0:	464b      	mov	r3, r9
 800dfe2:	f7f2 f951 	bl	8000288 <__aeabi_dsub>
 800dfe6:	ec53 2b18 	vmov	r2, r3, d8
 800dfea:	f7f2 f94d 	bl	8000288 <__aeabi_dsub>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4650      	mov	r0, sl
 800dff4:	4659      	mov	r1, fp
 800dff6:	e606      	b.n	800dc06 <__ieee754_pow+0x2ee>
 800dff8:	2401      	movs	r4, #1
 800dffa:	e6a0      	b.n	800dd3e <__ieee754_pow+0x426>
 800dffc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e050 <__ieee754_pow+0x738>
 800e000:	e60d      	b.n	800dc1e <__ieee754_pow+0x306>
 800e002:	bf00      	nop
 800e004:	f3af 8000 	nop.w
 800e008:	4a454eef 	.word	0x4a454eef
 800e00c:	3fca7e28 	.word	0x3fca7e28
 800e010:	93c9db65 	.word	0x93c9db65
 800e014:	3fcd864a 	.word	0x3fcd864a
 800e018:	a91d4101 	.word	0xa91d4101
 800e01c:	3fd17460 	.word	0x3fd17460
 800e020:	518f264d 	.word	0x518f264d
 800e024:	3fd55555 	.word	0x3fd55555
 800e028:	db6fabff 	.word	0xdb6fabff
 800e02c:	3fdb6db6 	.word	0x3fdb6db6
 800e030:	33333303 	.word	0x33333303
 800e034:	3fe33333 	.word	0x3fe33333
 800e038:	e0000000 	.word	0xe0000000
 800e03c:	3feec709 	.word	0x3feec709
 800e040:	dc3a03fd 	.word	0xdc3a03fd
 800e044:	3feec709 	.word	0x3feec709
 800e048:	145b01f5 	.word	0x145b01f5
 800e04c:	be3e2fe0 	.word	0xbe3e2fe0
 800e050:	00000000 	.word	0x00000000
 800e054:	3ff00000 	.word	0x3ff00000
 800e058:	7ff00000 	.word	0x7ff00000
 800e05c:	43400000 	.word	0x43400000
 800e060:	0003988e 	.word	0x0003988e
 800e064:	000bb679 	.word	0x000bb679
 800e068:	080e9df8 	.word	0x080e9df8
 800e06c:	3ff00000 	.word	0x3ff00000
 800e070:	40080000 	.word	0x40080000
 800e074:	080e9e18 	.word	0x080e9e18
 800e078:	080e9e08 	.word	0x080e9e08
 800e07c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e354 <__ieee754_pow+0xa3c>)
 800e07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e082:	4640      	mov	r0, r8
 800e084:	4649      	mov	r1, r9
 800e086:	f7f2 f901 	bl	800028c <__adddf3>
 800e08a:	4622      	mov	r2, r4
 800e08c:	ec41 0b1a 	vmov	d10, r0, r1
 800e090:	462b      	mov	r3, r5
 800e092:	4630      	mov	r0, r6
 800e094:	4639      	mov	r1, r7
 800e096:	f7f2 f8f7 	bl	8000288 <__aeabi_dsub>
 800e09a:	4602      	mov	r2, r0
 800e09c:	460b      	mov	r3, r1
 800e09e:	ec51 0b1a 	vmov	r0, r1, d10
 800e0a2:	f7f2 fd39 	bl	8000b18 <__aeabi_dcmpgt>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f47f adf8 	bne.w	800dc9c <__ieee754_pow+0x384>
 800e0ac:	4aa4      	ldr	r2, [pc, #656]	; (800e340 <__ieee754_pow+0xa28>)
 800e0ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	f340 810b 	ble.w	800e2ce <__ieee754_pow+0x9b6>
 800e0b8:	151b      	asrs	r3, r3, #20
 800e0ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e0be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e0c2:	fa4a f303 	asr.w	r3, sl, r3
 800e0c6:	445b      	add	r3, fp
 800e0c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e0cc:	4e9d      	ldr	r6, [pc, #628]	; (800e344 <__ieee754_pow+0xa2c>)
 800e0ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e0d2:	4116      	asrs	r6, r2
 800e0d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e0d8:	2000      	movs	r0, #0
 800e0da:	ea23 0106 	bic.w	r1, r3, r6
 800e0de:	f1c2 0214 	rsb	r2, r2, #20
 800e0e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e0e6:	fa4a fa02 	asr.w	sl, sl, r2
 800e0ea:	f1bb 0f00 	cmp.w	fp, #0
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	bfb8      	it	lt
 800e0f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e0fc:	f7f2 f8c4 	bl	8000288 <__aeabi_dsub>
 800e100:	ec41 0b19 	vmov	d9, r0, r1
 800e104:	4642      	mov	r2, r8
 800e106:	464b      	mov	r3, r9
 800e108:	ec51 0b19 	vmov	r0, r1, d9
 800e10c:	f7f2 f8be 	bl	800028c <__adddf3>
 800e110:	2400      	movs	r4, #0
 800e112:	a379      	add	r3, pc, #484	; (adr r3, 800e2f8 <__ieee754_pow+0x9e0>)
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	4620      	mov	r0, r4
 800e11a:	460d      	mov	r5, r1
 800e11c:	f7f2 fa6c 	bl	80005f8 <__aeabi_dmul>
 800e120:	ec53 2b19 	vmov	r2, r3, d9
 800e124:	4606      	mov	r6, r0
 800e126:	460f      	mov	r7, r1
 800e128:	4620      	mov	r0, r4
 800e12a:	4629      	mov	r1, r5
 800e12c:	f7f2 f8ac 	bl	8000288 <__aeabi_dsub>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	4640      	mov	r0, r8
 800e136:	4649      	mov	r1, r9
 800e138:	f7f2 f8a6 	bl	8000288 <__aeabi_dsub>
 800e13c:	a370      	add	r3, pc, #448	; (adr r3, 800e300 <__ieee754_pow+0x9e8>)
 800e13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e142:	f7f2 fa59 	bl	80005f8 <__aeabi_dmul>
 800e146:	a370      	add	r3, pc, #448	; (adr r3, 800e308 <__ieee754_pow+0x9f0>)
 800e148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14c:	4680      	mov	r8, r0
 800e14e:	4689      	mov	r9, r1
 800e150:	4620      	mov	r0, r4
 800e152:	4629      	mov	r1, r5
 800e154:	f7f2 fa50 	bl	80005f8 <__aeabi_dmul>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	4640      	mov	r0, r8
 800e15e:	4649      	mov	r1, r9
 800e160:	f7f2 f894 	bl	800028c <__adddf3>
 800e164:	4604      	mov	r4, r0
 800e166:	460d      	mov	r5, r1
 800e168:	4602      	mov	r2, r0
 800e16a:	460b      	mov	r3, r1
 800e16c:	4630      	mov	r0, r6
 800e16e:	4639      	mov	r1, r7
 800e170:	f7f2 f88c 	bl	800028c <__adddf3>
 800e174:	4632      	mov	r2, r6
 800e176:	463b      	mov	r3, r7
 800e178:	4680      	mov	r8, r0
 800e17a:	4689      	mov	r9, r1
 800e17c:	f7f2 f884 	bl	8000288 <__aeabi_dsub>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4620      	mov	r0, r4
 800e186:	4629      	mov	r1, r5
 800e188:	f7f2 f87e 	bl	8000288 <__aeabi_dsub>
 800e18c:	4642      	mov	r2, r8
 800e18e:	4606      	mov	r6, r0
 800e190:	460f      	mov	r7, r1
 800e192:	464b      	mov	r3, r9
 800e194:	4640      	mov	r0, r8
 800e196:	4649      	mov	r1, r9
 800e198:	f7f2 fa2e 	bl	80005f8 <__aeabi_dmul>
 800e19c:	a35c      	add	r3, pc, #368	; (adr r3, 800e310 <__ieee754_pow+0x9f8>)
 800e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	460d      	mov	r5, r1
 800e1a6:	f7f2 fa27 	bl	80005f8 <__aeabi_dmul>
 800e1aa:	a35b      	add	r3, pc, #364	; (adr r3, 800e318 <__ieee754_pow+0xa00>)
 800e1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b0:	f7f2 f86a 	bl	8000288 <__aeabi_dsub>
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	462b      	mov	r3, r5
 800e1b8:	f7f2 fa1e 	bl	80005f8 <__aeabi_dmul>
 800e1bc:	a358      	add	r3, pc, #352	; (adr r3, 800e320 <__ieee754_pow+0xa08>)
 800e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c2:	f7f2 f863 	bl	800028c <__adddf3>
 800e1c6:	4622      	mov	r2, r4
 800e1c8:	462b      	mov	r3, r5
 800e1ca:	f7f2 fa15 	bl	80005f8 <__aeabi_dmul>
 800e1ce:	a356      	add	r3, pc, #344	; (adr r3, 800e328 <__ieee754_pow+0xa10>)
 800e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d4:	f7f2 f858 	bl	8000288 <__aeabi_dsub>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	462b      	mov	r3, r5
 800e1dc:	f7f2 fa0c 	bl	80005f8 <__aeabi_dmul>
 800e1e0:	a353      	add	r3, pc, #332	; (adr r3, 800e330 <__ieee754_pow+0xa18>)
 800e1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e6:	f7f2 f851 	bl	800028c <__adddf3>
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	f7f2 fa03 	bl	80005f8 <__aeabi_dmul>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4640      	mov	r0, r8
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	f7f2 f845 	bl	8000288 <__aeabi_dsub>
 800e1fe:	4604      	mov	r4, r0
 800e200:	460d      	mov	r5, r1
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	4640      	mov	r0, r8
 800e208:	4649      	mov	r1, r9
 800e20a:	f7f2 f9f5 	bl	80005f8 <__aeabi_dmul>
 800e20e:	2200      	movs	r2, #0
 800e210:	ec41 0b19 	vmov	d9, r0, r1
 800e214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e218:	4620      	mov	r0, r4
 800e21a:	4629      	mov	r1, r5
 800e21c:	f7f2 f834 	bl	8000288 <__aeabi_dsub>
 800e220:	4602      	mov	r2, r0
 800e222:	460b      	mov	r3, r1
 800e224:	ec51 0b19 	vmov	r0, r1, d9
 800e228:	f7f2 fb10 	bl	800084c <__aeabi_ddiv>
 800e22c:	4632      	mov	r2, r6
 800e22e:	4604      	mov	r4, r0
 800e230:	460d      	mov	r5, r1
 800e232:	463b      	mov	r3, r7
 800e234:	4640      	mov	r0, r8
 800e236:	4649      	mov	r1, r9
 800e238:	f7f2 f9de 	bl	80005f8 <__aeabi_dmul>
 800e23c:	4632      	mov	r2, r6
 800e23e:	463b      	mov	r3, r7
 800e240:	f7f2 f824 	bl	800028c <__adddf3>
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	4620      	mov	r0, r4
 800e24a:	4629      	mov	r1, r5
 800e24c:	f7f2 f81c 	bl	8000288 <__aeabi_dsub>
 800e250:	4642      	mov	r2, r8
 800e252:	464b      	mov	r3, r9
 800e254:	f7f2 f818 	bl	8000288 <__aeabi_dsub>
 800e258:	460b      	mov	r3, r1
 800e25a:	4602      	mov	r2, r0
 800e25c:	493a      	ldr	r1, [pc, #232]	; (800e348 <__ieee754_pow+0xa30>)
 800e25e:	2000      	movs	r0, #0
 800e260:	f7f2 f812 	bl	8000288 <__aeabi_dsub>
 800e264:	e9cd 0100 	strd	r0, r1, [sp]
 800e268:	9b01      	ldr	r3, [sp, #4]
 800e26a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e26e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e272:	da2f      	bge.n	800e2d4 <__ieee754_pow+0x9bc>
 800e274:	4650      	mov	r0, sl
 800e276:	ed9d 0b00 	vldr	d0, [sp]
 800e27a:	f000 f9cd 	bl	800e618 <scalbn>
 800e27e:	ec51 0b10 	vmov	r0, r1, d0
 800e282:	ec53 2b18 	vmov	r2, r3, d8
 800e286:	f7ff bbe0 	b.w	800da4a <__ieee754_pow+0x132>
 800e28a:	4b30      	ldr	r3, [pc, #192]	; (800e34c <__ieee754_pow+0xa34>)
 800e28c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e290:	429e      	cmp	r6, r3
 800e292:	f77f af0b 	ble.w	800e0ac <__ieee754_pow+0x794>
 800e296:	4b2e      	ldr	r3, [pc, #184]	; (800e350 <__ieee754_pow+0xa38>)
 800e298:	440b      	add	r3, r1
 800e29a:	4303      	orrs	r3, r0
 800e29c:	d00b      	beq.n	800e2b6 <__ieee754_pow+0x99e>
 800e29e:	a326      	add	r3, pc, #152	; (adr r3, 800e338 <__ieee754_pow+0xa20>)
 800e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a4:	ec51 0b18 	vmov	r0, r1, d8
 800e2a8:	f7f2 f9a6 	bl	80005f8 <__aeabi_dmul>
 800e2ac:	a322      	add	r3, pc, #136	; (adr r3, 800e338 <__ieee754_pow+0xa20>)
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	f7ff bbca 	b.w	800da4a <__ieee754_pow+0x132>
 800e2b6:	4622      	mov	r2, r4
 800e2b8:	462b      	mov	r3, r5
 800e2ba:	f7f1 ffe5 	bl	8000288 <__aeabi_dsub>
 800e2be:	4642      	mov	r2, r8
 800e2c0:	464b      	mov	r3, r9
 800e2c2:	f7f2 fc1f 	bl	8000b04 <__aeabi_dcmpge>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	f43f aef0 	beq.w	800e0ac <__ieee754_pow+0x794>
 800e2cc:	e7e7      	b.n	800e29e <__ieee754_pow+0x986>
 800e2ce:	f04f 0a00 	mov.w	sl, #0
 800e2d2:	e717      	b.n	800e104 <__ieee754_pow+0x7ec>
 800e2d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2d8:	4619      	mov	r1, r3
 800e2da:	e7d2      	b.n	800e282 <__ieee754_pow+0x96a>
 800e2dc:	491a      	ldr	r1, [pc, #104]	; (800e348 <__ieee754_pow+0xa30>)
 800e2de:	2000      	movs	r0, #0
 800e2e0:	f7ff bb9e 	b.w	800da20 <__ieee754_pow+0x108>
 800e2e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2e8:	f7ff bb9a 	b.w	800da20 <__ieee754_pow+0x108>
 800e2ec:	9000      	str	r0, [sp, #0]
 800e2ee:	f7ff bb76 	b.w	800d9de <__ieee754_pow+0xc6>
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	f7ff bb60 	b.w	800d9b8 <__ieee754_pow+0xa0>
 800e2f8:	00000000 	.word	0x00000000
 800e2fc:	3fe62e43 	.word	0x3fe62e43
 800e300:	fefa39ef 	.word	0xfefa39ef
 800e304:	3fe62e42 	.word	0x3fe62e42
 800e308:	0ca86c39 	.word	0x0ca86c39
 800e30c:	be205c61 	.word	0xbe205c61
 800e310:	72bea4d0 	.word	0x72bea4d0
 800e314:	3e663769 	.word	0x3e663769
 800e318:	c5d26bf1 	.word	0xc5d26bf1
 800e31c:	3ebbbd41 	.word	0x3ebbbd41
 800e320:	af25de2c 	.word	0xaf25de2c
 800e324:	3f11566a 	.word	0x3f11566a
 800e328:	16bebd93 	.word	0x16bebd93
 800e32c:	3f66c16c 	.word	0x3f66c16c
 800e330:	5555553e 	.word	0x5555553e
 800e334:	3fc55555 	.word	0x3fc55555
 800e338:	c2f8f359 	.word	0xc2f8f359
 800e33c:	01a56e1f 	.word	0x01a56e1f
 800e340:	3fe00000 	.word	0x3fe00000
 800e344:	000fffff 	.word	0x000fffff
 800e348:	3ff00000 	.word	0x3ff00000
 800e34c:	4090cbff 	.word	0x4090cbff
 800e350:	3f6f3400 	.word	0x3f6f3400
 800e354:	652b82fe 	.word	0x652b82fe
 800e358:	3c971547 	.word	0x3c971547

0800e35c <__ieee754_sqrt>:
 800e35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e360:	ec55 4b10 	vmov	r4, r5, d0
 800e364:	4e56      	ldr	r6, [pc, #344]	; (800e4c0 <__ieee754_sqrt+0x164>)
 800e366:	43ae      	bics	r6, r5
 800e368:	ee10 0a10 	vmov	r0, s0
 800e36c:	ee10 3a10 	vmov	r3, s0
 800e370:	4629      	mov	r1, r5
 800e372:	462a      	mov	r2, r5
 800e374:	d110      	bne.n	800e398 <__ieee754_sqrt+0x3c>
 800e376:	ee10 2a10 	vmov	r2, s0
 800e37a:	462b      	mov	r3, r5
 800e37c:	f7f2 f93c 	bl	80005f8 <__aeabi_dmul>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	4620      	mov	r0, r4
 800e386:	4629      	mov	r1, r5
 800e388:	f7f1 ff80 	bl	800028c <__adddf3>
 800e38c:	4604      	mov	r4, r0
 800e38e:	460d      	mov	r5, r1
 800e390:	ec45 4b10 	vmov	d0, r4, r5
 800e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e398:	2d00      	cmp	r5, #0
 800e39a:	dc10      	bgt.n	800e3be <__ieee754_sqrt+0x62>
 800e39c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e3a0:	4330      	orrs	r0, r6
 800e3a2:	d0f5      	beq.n	800e390 <__ieee754_sqrt+0x34>
 800e3a4:	b15d      	cbz	r5, 800e3be <__ieee754_sqrt+0x62>
 800e3a6:	ee10 2a10 	vmov	r2, s0
 800e3aa:	462b      	mov	r3, r5
 800e3ac:	ee10 0a10 	vmov	r0, s0
 800e3b0:	f7f1 ff6a 	bl	8000288 <__aeabi_dsub>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	f7f2 fa48 	bl	800084c <__aeabi_ddiv>
 800e3bc:	e7e6      	b.n	800e38c <__ieee754_sqrt+0x30>
 800e3be:	1509      	asrs	r1, r1, #20
 800e3c0:	d076      	beq.n	800e4b0 <__ieee754_sqrt+0x154>
 800e3c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e3c6:	07ce      	lsls	r6, r1, #31
 800e3c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e3cc:	bf5e      	ittt	pl
 800e3ce:	0fda      	lsrpl	r2, r3, #31
 800e3d0:	005b      	lslpl	r3, r3, #1
 800e3d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e3d6:	0fda      	lsrs	r2, r3, #31
 800e3d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e3dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	106d      	asrs	r5, r5, #1
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	f04f 0e16 	mov.w	lr, #22
 800e3ea:	4684      	mov	ip, r0
 800e3ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3f0:	eb0c 0401 	add.w	r4, ip, r1
 800e3f4:	4294      	cmp	r4, r2
 800e3f6:	bfde      	ittt	le
 800e3f8:	1b12      	suble	r2, r2, r4
 800e3fa:	eb04 0c01 	addle.w	ip, r4, r1
 800e3fe:	1840      	addle	r0, r0, r1
 800e400:	0052      	lsls	r2, r2, #1
 800e402:	f1be 0e01 	subs.w	lr, lr, #1
 800e406:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e40a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e40e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e412:	d1ed      	bne.n	800e3f0 <__ieee754_sqrt+0x94>
 800e414:	4671      	mov	r1, lr
 800e416:	2720      	movs	r7, #32
 800e418:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e41c:	4562      	cmp	r2, ip
 800e41e:	eb04 060e 	add.w	r6, r4, lr
 800e422:	dc02      	bgt.n	800e42a <__ieee754_sqrt+0xce>
 800e424:	d113      	bne.n	800e44e <__ieee754_sqrt+0xf2>
 800e426:	429e      	cmp	r6, r3
 800e428:	d811      	bhi.n	800e44e <__ieee754_sqrt+0xf2>
 800e42a:	2e00      	cmp	r6, #0
 800e42c:	eb06 0e04 	add.w	lr, r6, r4
 800e430:	da43      	bge.n	800e4ba <__ieee754_sqrt+0x15e>
 800e432:	f1be 0f00 	cmp.w	lr, #0
 800e436:	db40      	blt.n	800e4ba <__ieee754_sqrt+0x15e>
 800e438:	f10c 0801 	add.w	r8, ip, #1
 800e43c:	eba2 020c 	sub.w	r2, r2, ip
 800e440:	429e      	cmp	r6, r3
 800e442:	bf88      	it	hi
 800e444:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e448:	1b9b      	subs	r3, r3, r6
 800e44a:	4421      	add	r1, r4
 800e44c:	46c4      	mov	ip, r8
 800e44e:	0052      	lsls	r2, r2, #1
 800e450:	3f01      	subs	r7, #1
 800e452:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e456:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e45a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e45e:	d1dd      	bne.n	800e41c <__ieee754_sqrt+0xc0>
 800e460:	4313      	orrs	r3, r2
 800e462:	d006      	beq.n	800e472 <__ieee754_sqrt+0x116>
 800e464:	1c4c      	adds	r4, r1, #1
 800e466:	bf13      	iteet	ne
 800e468:	3101      	addne	r1, #1
 800e46a:	3001      	addeq	r0, #1
 800e46c:	4639      	moveq	r1, r7
 800e46e:	f021 0101 	bicne.w	r1, r1, #1
 800e472:	1043      	asrs	r3, r0, #1
 800e474:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e478:	0849      	lsrs	r1, r1, #1
 800e47a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e47e:	07c2      	lsls	r2, r0, #31
 800e480:	bf48      	it	mi
 800e482:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e486:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e48a:	460c      	mov	r4, r1
 800e48c:	463d      	mov	r5, r7
 800e48e:	e77f      	b.n	800e390 <__ieee754_sqrt+0x34>
 800e490:	0ada      	lsrs	r2, r3, #11
 800e492:	3815      	subs	r0, #21
 800e494:	055b      	lsls	r3, r3, #21
 800e496:	2a00      	cmp	r2, #0
 800e498:	d0fa      	beq.n	800e490 <__ieee754_sqrt+0x134>
 800e49a:	02d7      	lsls	r7, r2, #11
 800e49c:	d50a      	bpl.n	800e4b4 <__ieee754_sqrt+0x158>
 800e49e:	f1c1 0420 	rsb	r4, r1, #32
 800e4a2:	fa23 f404 	lsr.w	r4, r3, r4
 800e4a6:	1e4d      	subs	r5, r1, #1
 800e4a8:	408b      	lsls	r3, r1
 800e4aa:	4322      	orrs	r2, r4
 800e4ac:	1b41      	subs	r1, r0, r5
 800e4ae:	e788      	b.n	800e3c2 <__ieee754_sqrt+0x66>
 800e4b0:	4608      	mov	r0, r1
 800e4b2:	e7f0      	b.n	800e496 <__ieee754_sqrt+0x13a>
 800e4b4:	0052      	lsls	r2, r2, #1
 800e4b6:	3101      	adds	r1, #1
 800e4b8:	e7ef      	b.n	800e49a <__ieee754_sqrt+0x13e>
 800e4ba:	46e0      	mov	r8, ip
 800e4bc:	e7be      	b.n	800e43c <__ieee754_sqrt+0xe0>
 800e4be:	bf00      	nop
 800e4c0:	7ff00000 	.word	0x7ff00000

0800e4c4 <fabs>:
 800e4c4:	ec51 0b10 	vmov	r0, r1, d0
 800e4c8:	ee10 2a10 	vmov	r2, s0
 800e4cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4d0:	ec43 2b10 	vmov	d0, r2, r3
 800e4d4:	4770      	bx	lr

0800e4d6 <finite>:
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	ed8d 0b00 	vstr	d0, [sp]
 800e4dc:	9801      	ldr	r0, [sp, #4]
 800e4de:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e4e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e4e6:	0fc0      	lsrs	r0, r0, #31
 800e4e8:	b002      	add	sp, #8
 800e4ea:	4770      	bx	lr
 800e4ec:	0000      	movs	r0, r0
	...

0800e4f0 <nan>:
 800e4f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4f8 <nan+0x8>
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	00000000 	.word	0x00000000
 800e4fc:	7ff80000 	.word	0x7ff80000

0800e500 <rint>:
 800e500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e502:	ec51 0b10 	vmov	r0, r1, d0
 800e506:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e50a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e50e:	2e13      	cmp	r6, #19
 800e510:	ee10 4a10 	vmov	r4, s0
 800e514:	460b      	mov	r3, r1
 800e516:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e51a:	dc58      	bgt.n	800e5ce <rint+0xce>
 800e51c:	2e00      	cmp	r6, #0
 800e51e:	da2b      	bge.n	800e578 <rint+0x78>
 800e520:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e524:	4302      	orrs	r2, r0
 800e526:	d023      	beq.n	800e570 <rint+0x70>
 800e528:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e52c:	4302      	orrs	r2, r0
 800e52e:	4254      	negs	r4, r2
 800e530:	4314      	orrs	r4, r2
 800e532:	0c4b      	lsrs	r3, r1, #17
 800e534:	0b24      	lsrs	r4, r4, #12
 800e536:	045b      	lsls	r3, r3, #17
 800e538:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e53c:	ea44 0103 	orr.w	r1, r4, r3
 800e540:	4b32      	ldr	r3, [pc, #200]	; (800e60c <rint+0x10c>)
 800e542:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e546:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	4630      	mov	r0, r6
 800e550:	4639      	mov	r1, r7
 800e552:	f7f1 fe9b 	bl	800028c <__adddf3>
 800e556:	e9cd 0100 	strd	r0, r1, [sp]
 800e55a:	463b      	mov	r3, r7
 800e55c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e560:	4632      	mov	r2, r6
 800e562:	f7f1 fe91 	bl	8000288 <__aeabi_dsub>
 800e566:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e56a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e56e:	4639      	mov	r1, r7
 800e570:	ec41 0b10 	vmov	d0, r0, r1
 800e574:	b003      	add	sp, #12
 800e576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e578:	4a25      	ldr	r2, [pc, #148]	; (800e610 <rint+0x110>)
 800e57a:	4132      	asrs	r2, r6
 800e57c:	ea01 0702 	and.w	r7, r1, r2
 800e580:	4307      	orrs	r7, r0
 800e582:	d0f5      	beq.n	800e570 <rint+0x70>
 800e584:	0851      	lsrs	r1, r2, #1
 800e586:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e58a:	4314      	orrs	r4, r2
 800e58c:	d00c      	beq.n	800e5a8 <rint+0xa8>
 800e58e:	ea23 0201 	bic.w	r2, r3, r1
 800e592:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e596:	2e13      	cmp	r6, #19
 800e598:	fa43 f606 	asr.w	r6, r3, r6
 800e59c:	bf0c      	ite	eq
 800e59e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e5a2:	2400      	movne	r4, #0
 800e5a4:	ea42 0306 	orr.w	r3, r2, r6
 800e5a8:	4918      	ldr	r1, [pc, #96]	; (800e60c <rint+0x10c>)
 800e5aa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e5ae:	4622      	mov	r2, r4
 800e5b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	f7f1 fe68 	bl	800028c <__adddf3>
 800e5bc:	e9cd 0100 	strd	r0, r1, [sp]
 800e5c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5c4:	4622      	mov	r2, r4
 800e5c6:	462b      	mov	r3, r5
 800e5c8:	f7f1 fe5e 	bl	8000288 <__aeabi_dsub>
 800e5cc:	e7d0      	b.n	800e570 <rint+0x70>
 800e5ce:	2e33      	cmp	r6, #51	; 0x33
 800e5d0:	dd07      	ble.n	800e5e2 <rint+0xe2>
 800e5d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e5d6:	d1cb      	bne.n	800e570 <rint+0x70>
 800e5d8:	ee10 2a10 	vmov	r2, s0
 800e5dc:	f7f1 fe56 	bl	800028c <__adddf3>
 800e5e0:	e7c6      	b.n	800e570 <rint+0x70>
 800e5e2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e5e6:	f04f 36ff 	mov.w	r6, #4294967295
 800e5ea:	40d6      	lsrs	r6, r2
 800e5ec:	4230      	tst	r0, r6
 800e5ee:	d0bf      	beq.n	800e570 <rint+0x70>
 800e5f0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e5f4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e5f8:	bf1f      	itttt	ne
 800e5fa:	ea24 0101 	bicne.w	r1, r4, r1
 800e5fe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e602:	fa44 f202 	asrne.w	r2, r4, r2
 800e606:	ea41 0402 	orrne.w	r4, r1, r2
 800e60a:	e7cd      	b.n	800e5a8 <rint+0xa8>
 800e60c:	080e9e28 	.word	0x080e9e28
 800e610:	000fffff 	.word	0x000fffff
 800e614:	00000000 	.word	0x00000000

0800e618 <scalbn>:
 800e618:	b570      	push	{r4, r5, r6, lr}
 800e61a:	ec55 4b10 	vmov	r4, r5, d0
 800e61e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e622:	4606      	mov	r6, r0
 800e624:	462b      	mov	r3, r5
 800e626:	b99a      	cbnz	r2, 800e650 <scalbn+0x38>
 800e628:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e62c:	4323      	orrs	r3, r4
 800e62e:	d036      	beq.n	800e69e <scalbn+0x86>
 800e630:	4b39      	ldr	r3, [pc, #228]	; (800e718 <scalbn+0x100>)
 800e632:	4629      	mov	r1, r5
 800e634:	ee10 0a10 	vmov	r0, s0
 800e638:	2200      	movs	r2, #0
 800e63a:	f7f1 ffdd 	bl	80005f8 <__aeabi_dmul>
 800e63e:	4b37      	ldr	r3, [pc, #220]	; (800e71c <scalbn+0x104>)
 800e640:	429e      	cmp	r6, r3
 800e642:	4604      	mov	r4, r0
 800e644:	460d      	mov	r5, r1
 800e646:	da10      	bge.n	800e66a <scalbn+0x52>
 800e648:	a32b      	add	r3, pc, #172	; (adr r3, 800e6f8 <scalbn+0xe0>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	e03a      	b.n	800e6c6 <scalbn+0xae>
 800e650:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e654:	428a      	cmp	r2, r1
 800e656:	d10c      	bne.n	800e672 <scalbn+0x5a>
 800e658:	ee10 2a10 	vmov	r2, s0
 800e65c:	4620      	mov	r0, r4
 800e65e:	4629      	mov	r1, r5
 800e660:	f7f1 fe14 	bl	800028c <__adddf3>
 800e664:	4604      	mov	r4, r0
 800e666:	460d      	mov	r5, r1
 800e668:	e019      	b.n	800e69e <scalbn+0x86>
 800e66a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e66e:	460b      	mov	r3, r1
 800e670:	3a36      	subs	r2, #54	; 0x36
 800e672:	4432      	add	r2, r6
 800e674:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e678:	428a      	cmp	r2, r1
 800e67a:	dd08      	ble.n	800e68e <scalbn+0x76>
 800e67c:	2d00      	cmp	r5, #0
 800e67e:	a120      	add	r1, pc, #128	; (adr r1, 800e700 <scalbn+0xe8>)
 800e680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e684:	da1c      	bge.n	800e6c0 <scalbn+0xa8>
 800e686:	a120      	add	r1, pc, #128	; (adr r1, 800e708 <scalbn+0xf0>)
 800e688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e68c:	e018      	b.n	800e6c0 <scalbn+0xa8>
 800e68e:	2a00      	cmp	r2, #0
 800e690:	dd08      	ble.n	800e6a4 <scalbn+0x8c>
 800e692:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e696:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e69a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e69e:	ec45 4b10 	vmov	d0, r4, r5
 800e6a2:	bd70      	pop	{r4, r5, r6, pc}
 800e6a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e6a8:	da19      	bge.n	800e6de <scalbn+0xc6>
 800e6aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e6ae:	429e      	cmp	r6, r3
 800e6b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e6b4:	dd0a      	ble.n	800e6cc <scalbn+0xb4>
 800e6b6:	a112      	add	r1, pc, #72	; (adr r1, 800e700 <scalbn+0xe8>)
 800e6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e2      	bne.n	800e686 <scalbn+0x6e>
 800e6c0:	a30f      	add	r3, pc, #60	; (adr r3, 800e700 <scalbn+0xe8>)
 800e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c6:	f7f1 ff97 	bl	80005f8 <__aeabi_dmul>
 800e6ca:	e7cb      	b.n	800e664 <scalbn+0x4c>
 800e6cc:	a10a      	add	r1, pc, #40	; (adr r1, 800e6f8 <scalbn+0xe0>)
 800e6ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d0b8      	beq.n	800e648 <scalbn+0x30>
 800e6d6:	a10e      	add	r1, pc, #56	; (adr r1, 800e710 <scalbn+0xf8>)
 800e6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6dc:	e7b4      	b.n	800e648 <scalbn+0x30>
 800e6de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6e2:	3236      	adds	r2, #54	; 0x36
 800e6e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4b0c      	ldr	r3, [pc, #48]	; (800e720 <scalbn+0x108>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	e7e8      	b.n	800e6c6 <scalbn+0xae>
 800e6f4:	f3af 8000 	nop.w
 800e6f8:	c2f8f359 	.word	0xc2f8f359
 800e6fc:	01a56e1f 	.word	0x01a56e1f
 800e700:	8800759c 	.word	0x8800759c
 800e704:	7e37e43c 	.word	0x7e37e43c
 800e708:	8800759c 	.word	0x8800759c
 800e70c:	fe37e43c 	.word	0xfe37e43c
 800e710:	c2f8f359 	.word	0xc2f8f359
 800e714:	81a56e1f 	.word	0x81a56e1f
 800e718:	43500000 	.word	0x43500000
 800e71c:	ffff3cb0 	.word	0xffff3cb0
 800e720:	3c900000 	.word	0x3c900000

0800e724 <_init>:
 800e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e726:	bf00      	nop
 800e728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e72a:	bc08      	pop	{r3}
 800e72c:	469e      	mov	lr, r3
 800e72e:	4770      	bx	lr

0800e730 <_fini>:
 800e730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e732:	bf00      	nop
 800e734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e736:	bc08      	pop	{r3}
 800e738:	469e      	mov	lr, r3
 800e73a:	4770      	bx	lr
