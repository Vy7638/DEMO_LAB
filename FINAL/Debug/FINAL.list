
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e65c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000db728  0800e7f0  0800e7f0  0001e7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e9f18  080e9f18  00100114  2**0
                  CONTENTS
  4 .ARM          00000008  080e9f18  080e9f18  000f9f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080e9f20  080e9f20  00100114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e9f20  080e9f20  000f9f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e9f24  080e9f24  000f9f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080e9f28  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00100114  2**0
                  CONTENTS
 10 .bss          000004c8  20000114  20000114  00100114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005dc  200005dc  00100114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00100114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b521  00000000  00000000  00100144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000565f  00000000  00000000  0012b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  00130cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001890  00000000  00000000  001327c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a71  00000000  00000000  00134058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f28  00000000  00000000  0015dac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e26ec  00000000  00000000  001839f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002660dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a68  00000000  00000000  00266130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e7d4 	.word	0x0800e7d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	0800e7d4 	.word	0x0800e7d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <MX_ADC1_Init+0x108>)
 8000f94:	4a3d      	ldr	r2, [pc, #244]	; (800108c <MX_ADC1_Init+0x10c>)
 8000f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_ADC1_Init+0x108>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fc0:	4a33      	ldr	r2, [pc, #204]	; (8001090 <MX_ADC1_Init+0x110>)
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fcc:	2205      	movs	r2, #5
 8000fce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <MX_ADC1_Init+0x108>)
 8000fe0:	f005 fe14 	bl	8006c0c <HAL_ADC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f003 fcc1 	bl	8004970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4822      	ldr	r0, [pc, #136]	; (8001088 <MX_ADC1_Init+0x108>)
 8001000:	f005 ff76 	bl	8006ef0 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100a:	f003 fcb1 	bl	8004970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800100e:	2309      	movs	r3, #9
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	481b      	ldr	r0, [pc, #108]	; (8001088 <MX_ADC1_Init+0x108>)
 800101c:	f005 ff68 	bl	8006ef0 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001026:	f003 fca3 	bl	8004970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800102a:	230a      	movs	r3, #10
 800102c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	; (8001088 <MX_ADC1_Init+0x108>)
 8001038:	f005 ff5a 	bl	8006ef0 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001042:	f003 fc95 	bl	8004970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001046:	230b      	movs	r3, #11
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_ADC1_Init+0x108>)
 8001054:	f005 ff4c 	bl	8006ef0 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800105e:	f003 fc87 	bl	8004970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001062:	230c      	movs	r3, #12
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001066:	2305      	movs	r3, #5
 8001068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_ADC1_Init+0x108>)
 8001070:	f005 ff3e 	bl	8006ef0 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800107a:	f003 fc79 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001a8 	.word	0x200001a8
 800108c:	40012000 	.word	0x40012000
 8001090:	0f000001 	.word	0x0f000001

08001094 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	at24c_Check();
 8001098:	f000 f83c 	bl	8001114 <at24c_Check>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	230a      	movs	r3, #10
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 030f 	add.w	r3, r7, #15
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2310      	movs	r3, #16
 80010c0:	21a0      	movs	r1, #160	; 0xa0
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <at24c_ReadOneByte+0x34>)
 80010c4:	f007 fad4 	bl	8008670 <HAL_I2C_Mem_Read>
	return temp;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000314 	.word	0x20000314

080010d8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af04      	add	r7, sp, #16
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	80fb      	strh	r3, [r7, #6]
 80010e4:	4613      	mov	r3, r2
 80010e6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80010e8:	88fa      	ldrh	r2, [r7, #6]
 80010ea:	230a      	movs	r3, #10
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	1d7b      	adds	r3, r7, #5
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2310      	movs	r3, #16
 80010f8:	21a0      	movs	r1, #160	; 0xa0
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <at24c_WriteOneByte+0x38>)
 80010fc:	f007 f9be 	bl	800847c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001100:	2005      	movs	r0, #5
 8001102:	f005 fd5f 	bl	8006bc4 <HAL_Delay>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000314 	.word	0x20000314

08001114 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800111a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800111e:	f7ff ffbf 	bl	80010a0 <at24c_ReadOneByte>
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b55      	cmp	r3, #85	; 0x55
 800112a:	d101      	bne.n	8001130 <at24c_Check+0x1c>
 800112c:	2300      	movs	r3, #0
 800112e:	e010      	b.n	8001152 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001130:	2155      	movs	r1, #85	; 0x55
 8001132:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001136:	f7ff ffcf 	bl	80010d8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800113a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800113e:	f7ff ffaf 	bl	80010a0 <at24c_ReadOneByte>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b55      	cmp	r3, #85	; 0x55
 800114a:	d101      	bne.n	8001150 <at24c_Check+0x3c>
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <at24c_Check+0x3e>
	}
	return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800115a:	b590      	push	{r4, r7, lr}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	6039      	str	r1, [r7, #0]
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4613      	mov	r3, r2
 8001168:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800116a:	e00d      	b.n	8001188 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	80fa      	strh	r2, [r7, #6]
 8001172:	683c      	ldr	r4, [r7, #0]
 8001174:	1c62      	adds	r2, r4, #1
 8001176:	603a      	str	r2, [r7, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff91 	bl	80010a0 <at24c_ReadOneByte>
 800117e:	4603      	mov	r3, r0
 8001180:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001182:	88bb      	ldrh	r3, [r7, #4]
 8001184:	3b01      	subs	r3, #1
 8001186:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ee      	bne.n	800116c <at24c_Read+0x12>
	}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}

08001198 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011a8:	e00c      	b.n	80011c4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff90 	bl	80010d8 <at24c_WriteOneByte>
		WriteAddr++;
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	3301      	adds	r3, #1
 80011bc:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	80ba      	strh	r2, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ed      	bne.n	80011aa <at24c_Write+0x12>
	}
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	2108      	movs	r1, #8
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <button_init+0x14>)
 80011e2:	f006 ffed 	bl	80081c0 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020c00 	.word	0x40020c00

080011f0 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2108      	movs	r1, #8
 80011fa:	482f      	ldr	r0, [pc, #188]	; (80012b8 <button_Scan+0xc8>)
 80011fc:	f006 ffe0 	bl	80081c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	2108      	movs	r1, #8
 8001204:	482c      	ldr	r0, [pc, #176]	; (80012b8 <button_Scan+0xc8>)
 8001206:	f006 ffdb 	bl	80081c0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800120a:	230a      	movs	r3, #10
 800120c:	2202      	movs	r2, #2
 800120e:	492b      	ldr	r1, [pc, #172]	; (80012bc <button_Scan+0xcc>)
 8001210:	482b      	ldr	r0, [pc, #172]	; (80012c0 <button_Scan+0xd0>)
 8001212:	f008 fde8 	bl	8009de6 <HAL_SPI_Receive>
	  int button_index = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800121a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	e03f      	b.n	80012a6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db06      	blt.n	800123a <button_Scan+0x4a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b03      	cmp	r3, #3
 8001230:	dc03      	bgt.n	800123a <button_Scan+0x4a>
			  button_index = i + 4;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e018      	b.n	800126c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b03      	cmp	r3, #3
 800123e:	dd07      	ble.n	8001250 <button_Scan+0x60>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b07      	cmp	r3, #7
 8001244:	dc04      	bgt.n	8001250 <button_Scan+0x60>
			  button_index = 7 - i;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f1c3 0307 	rsb	r3, r3, #7
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e00d      	b.n	800126c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b07      	cmp	r3, #7
 8001254:	dd06      	ble.n	8001264 <button_Scan+0x74>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0b      	cmp	r3, #11
 800125a:	dc03      	bgt.n	8001264 <button_Scan+0x74>
			  button_index = i + 4;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3304      	adds	r3, #4
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e003      	b.n	800126c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1c3 0317 	rsb	r3, r3, #23
 800126a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <button_Scan+0xcc>)
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	897b      	ldrh	r3, [r7, #10]
 8001272:	4013      	ands	r3, r2
 8001274:	b29b      	uxth	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <button_Scan+0x96>
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <button_Scan+0xd4>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2100      	movs	r1, #0
 8001280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001284:	e009      	b.n	800129a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <button_Scan+0xd4>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128e:	3301      	adds	r3, #1
 8001290:	b299      	uxth	r1, r3
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <button_Scan+0xd4>)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800129a:	897b      	ldrh	r3, [r7, #10]
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	ddbc      	ble.n	8001226 <button_Scan+0x36>
	  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	20000130 	.word	0x20000130
 80012c0:	20000410 	.word	0x20000410
 80012c4:	200001f0 	.word	0x200001f0

080012c8 <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_DMA_Init+0x3c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <MX_DMA_Init+0x3c>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_DMA_Init+0x3c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2038      	movs	r0, #56	; 0x38
 80012f0:	f006 f979 	bl	80075e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f4:	2038      	movs	r0, #56	; 0x38
 80012f6:	f006 f992 	bl	800761e <HAL_NVIC_EnableIRQ>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <user_esp>:

uint32_t counter_sensor = 0;
uint8_t temp_user = 0;
uint8_t light = 0;

void user_esp(){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if (flag_user == FLAG_PLAYING){
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <user_esp+0x40>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10b      	bne.n	800132c <user_esp+0x24>
		if (temp_user == 0) {
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <user_esp+0x44>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d112      	bne.n	8001342 <user_esp+0x3a>
			uart_EspSendBytes("A", 1);
 800131c:	2101      	movs	r1, #1
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <user_esp+0x48>)
 8001320:	f005 fa6a 	bl	80067f8 <uart_EspSendBytes>
			temp_user = 1;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <user_esp+0x44>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
//	if(light == 1){
//		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
//	} else {
//		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
//	}
}
 800132a:	e00a      	b.n	8001342 <user_esp+0x3a>
		if (temp_user == 1){
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <user_esp+0x44>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <user_esp+0x3a>
			uart_EspSendBytes("a", 1);
 8001334:	2101      	movs	r1, #1
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <user_esp+0x4c>)
 8001338:	f005 fa5e 	bl	80067f8 <uart_EspSendBytes>
			temp_user = 0;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <user_esp+0x44>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000154 	.word	0x20000154
 800134c:	20000138 	.word	0x20000138
 8001350:	0800e7f0 	.word	0x0800e7f0
 8001354:	0800e7f4 	.word	0x0800e7f4

08001358 <sensor_esp>:

void sensor_esp(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	switch (++counter_sensor) {
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <sensor_esp+0xf4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a3a      	ldr	r2, [pc, #232]	; (800144c <sensor_esp+0xf4>)
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b39      	ldr	r3, [pc, #228]	; (800144c <sensor_esp+0xf4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b3c      	cmp	r3, #60	; 0x3c
 800136c:	d86b      	bhi.n	8001446 <sensor_esp+0xee>
 800136e:	2b1e      	cmp	r3, #30
 8001370:	d204      	bcs.n	800137c <sensor_esp+0x24>
 8001372:	2b0a      	cmp	r3, #10
 8001374:	d046      	beq.n	8001404 <sensor_esp+0xac>
 8001376:	2b14      	cmp	r3, #20
 8001378:	d049      	beq.n	800140e <sensor_esp+0xb6>
		case 60:
			uart_EspSendBytes("current_temp", 2);
			counter_sensor = 0;
			break;
		default:
			break;
 800137a:	e064      	b.n	8001446 <sensor_esp+0xee>
 800137c:	3b1e      	subs	r3, #30
 800137e:	2b1e      	cmp	r3, #30
 8001380:	d861      	bhi.n	8001446 <sensor_esp+0xee>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <sensor_esp+0x30>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001419 	.word	0x08001419
 800138c:	08001447 	.word	0x08001447
 8001390:	08001447 	.word	0x08001447
 8001394:	08001447 	.word	0x08001447
 8001398:	08001447 	.word	0x08001447
 800139c:	08001447 	.word	0x08001447
 80013a0:	08001447 	.word	0x08001447
 80013a4:	08001447 	.word	0x08001447
 80013a8:	08001447 	.word	0x08001447
 80013ac:	08001447 	.word	0x08001447
 80013b0:	08001423 	.word	0x08001423
 80013b4:	08001447 	.word	0x08001447
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001447 	.word	0x08001447
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001447 	.word	0x08001447
 80013c8:	08001447 	.word	0x08001447
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001447 	.word	0x08001447
 80013d4:	08001447 	.word	0x08001447
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	08001447 	.word	0x08001447
 80013e0:	08001447 	.word	0x08001447
 80013e4:	08001447 	.word	0x08001447
 80013e8:	08001447 	.word	0x08001447
 80013ec:	08001447 	.word	0x08001447
 80013f0:	08001447 	.word	0x08001447
 80013f4:	08001447 	.word	0x08001447
 80013f8:	08001447 	.word	0x08001447
 80013fc:	08001447 	.word	0x08001447
 8001400:	08001437 	.word	0x08001437
			uart_EspSendBytes("L", 1);
 8001404:	2101      	movs	r1, #1
 8001406:	4812      	ldr	r0, [pc, #72]	; (8001450 <sensor_esp+0xf8>)
 8001408:	f005 f9f6 	bl	80067f8 <uart_EspSendBytes>
			break;
 800140c:	e01c      	b.n	8001448 <sensor_esp+0xf0>
			uart_EspSendBytes("current_light", 4);
 800140e:	2104      	movs	r1, #4
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <sensor_esp+0xfc>)
 8001412:	f005 f9f1 	bl	80067f8 <uart_EspSendBytes>
			break;
 8001416:	e017      	b.n	8001448 <sensor_esp+0xf0>
			uart_EspSendBytes("H", 1);
 8001418:	2101      	movs	r1, #1
 800141a:	480f      	ldr	r0, [pc, #60]	; (8001458 <sensor_esp+0x100>)
 800141c:	f005 f9ec 	bl	80067f8 <uart_EspSendBytes>
			break;
 8001420:	e012      	b.n	8001448 <sensor_esp+0xf0>
			uart_EspSendBytes("current_hum", 2);
 8001422:	2102      	movs	r1, #2
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <sensor_esp+0x104>)
 8001426:	f005 f9e7 	bl	80067f8 <uart_EspSendBytes>
			break;
 800142a:	e00d      	b.n	8001448 <sensor_esp+0xf0>
			uart_EspSendBytes("T", 1);
 800142c:	2101      	movs	r1, #1
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <sensor_esp+0x108>)
 8001430:	f005 f9e2 	bl	80067f8 <uart_EspSendBytes>
			break;
 8001434:	e008      	b.n	8001448 <sensor_esp+0xf0>
			uart_EspSendBytes("current_temp", 2);
 8001436:	2102      	movs	r1, #2
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <sensor_esp+0x10c>)
 800143a:	f005 f9dd 	bl	80067f8 <uart_EspSendBytes>
			counter_sensor = 0;
 800143e:	4b03      	ldr	r3, [pc, #12]	; (800144c <sensor_esp+0xf4>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
			break;
 8001444:	e000      	b.n	8001448 <sensor_esp+0xf0>
			break;
 8001446:	bf00      	nop
	}
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000134 	.word	0x20000134
 8001450:	0800e7f8 	.word	0x0800e7f8
 8001454:	0800e7fc 	.word	0x0800e7fc
 8001458:	0800e80c 	.word	0x0800e80c
 800145c:	0800e810 	.word	0x0800e810
 8001460:	0800e81c 	.word	0x0800e81c
 8001464:	0800e820 	.word	0x0800e820

08001468 <process_esp>:

void process_esp(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	user_esp();
 800146c:	f7ff ff4c 	bl	8001308 <user_esp>
	sensor_esp();
 8001470:	f7ff ff72 	bl	8001358 <sensor_esp>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <clr_confirm>:

#include "fsm.h"

uint8_t confirm[4] = {0, 0, 0, 0};

void clr_confirm(){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	e007      	b.n	8001494 <clr_confirm+0x1c>
		confirm[i] = 0;
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <clr_confirm+0x30>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3301      	adds	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b03      	cmp	r3, #3
 8001498:	ddf4      	ble.n	8001484 <clr_confirm+0xc>
	}
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	2000013c 	.word	0x2000013c

080014ac <temp_game>:

void temp_game(){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	tempFlag = 1;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <temp_game+0x2c>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
	tempStatus = status;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <temp_game+0x30>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <temp_game+0x34>)
 80014bc:	6013      	str	r3, [r2, #0]
	tempMove = move;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <temp_game+0x38>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <temp_game+0x3c>)
 80014c4:	6013      	str	r3, [r2, #0]
	flag_user = FLAG_PAUSE;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <temp_game+0x40>)
 80014c8:	2203      	movs	r2, #3
 80014ca:	701a      	strb	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000016c 	.word	0x2000016c
 80014dc:	2000015c 	.word	0x2000015c
 80014e0:	20000170 	.word	0x20000170
 80014e4:	20000160 	.word	0x20000160
 80014e8:	20000174 	.word	0x20000174
 80014ec:	20000154 	.word	0x20000154

080014f0 <continue_game>:

void continue_game(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if(tempFlag == 1){
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <continue_game+0x38>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d113      	bne.n	8001524 <continue_game+0x34>
		status = tempStatus;
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <continue_game+0x3c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <continue_game+0x40>)
 8001502:	6013      	str	r3, [r2, #0]
		move = tempMove;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <continue_game+0x44>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <continue_game+0x48>)
 800150a:	6013      	str	r3, [r2, #0]
		reDraw_snake();
 800150c:	f003 fc3a 	bl	8004d84 <reDraw_snake>
		point_food_lcd(food);
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <continue_game+0x4c>)
 8001512:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001516:	f002 f8a0 	bl	800365a <point_food_lcd>
		score_lcd();
 800151a:	f001 fb5b 	bl	8002bd4 <score_lcd>
		flag_user = FLAG_PLAYING;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <continue_game+0x50>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
	}
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000016c 	.word	0x2000016c
 800152c:	20000170 	.word	0x20000170
 8001530:	2000015c 	.word	0x2000015c
 8001534:	20000174 	.word	0x20000174
 8001538:	20000160 	.word	0x20000160
 800153c:	20000050 	.word	0x20000050
 8001540:	20000154 	.word	0x20000154

08001544 <input_inGame>:

void input_inGame(){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	if((is_touch_right() == 1 || button_count[6] == 1) && move != LEFT){
 8001548:	f000 fd4e 	bl	8001fe8 <is_touch_right>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d003      	beq.n	800155a <input_inGame+0x16>
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <input_inGame+0xb8>)
 8001554:	899b      	ldrh	r3, [r3, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d107      	bne.n	800156a <input_inGame+0x26>
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <input_inGame+0xbc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d003      	beq.n	800156a <input_inGame+0x26>
		move = RIGHT;
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <input_inGame+0xbc>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e046      	b.n	80015f8 <input_inGame+0xb4>
	}else if((is_touch_left() == 1 || button_count[4] == 1) && move != RIGHT){
 800156a:	f000 fd61 	bl	8002030 <is_touch_left>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d003      	beq.n	800157c <input_inGame+0x38>
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <input_inGame+0xb8>)
 8001576:	891b      	ldrh	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <input_inGame+0x48>
 800157c:	4b20      	ldr	r3, [pc, #128]	; (8001600 <input_inGame+0xbc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d003      	beq.n	800158c <input_inGame+0x48>
		move = LEFT;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <input_inGame+0xbc>)
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e035      	b.n	80015f8 <input_inGame+0xb4>
	}else if((is_touch_up() == 1 || button_count[1] == 1) && move != DOWN){
 800158c:	f000 fd74 	bl	8002078 <is_touch_up>
 8001590:	4603      	mov	r3, r0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d003      	beq.n	800159e <input_inGame+0x5a>
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <input_inGame+0xb8>)
 8001598:	885b      	ldrh	r3, [r3, #2]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <input_inGame+0x6a>
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <input_inGame+0xbc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d003      	beq.n	80015ae <input_inGame+0x6a>
		move = UP;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <input_inGame+0xbc>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e024      	b.n	80015f8 <input_inGame+0xb4>
	}else if((is_touch_down() == 1 || button_count[9] == 1) && move != UP){
 80015ae:	f000 fd85 	bl	80020bc <is_touch_down>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d003      	beq.n	80015c0 <input_inGame+0x7c>
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <input_inGame+0xb8>)
 80015ba:	8a5b      	ldrh	r3, [r3, #18]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <input_inGame+0x8c>
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <input_inGame+0xbc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d003      	beq.n	80015d0 <input_inGame+0x8c>
		move = DOWN;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <input_inGame+0xbc>)
 80015ca:	2204      	movs	r2, #4
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e013      	b.n	80015f8 <input_inGame+0xb4>
	}else if(is_touch_pause() == 1 || button_count[5] == 1){
 80015d0:	f000 fdff 	bl	80021d2 <is_touch_pause>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d003      	beq.n	80015e2 <input_inGame+0x9e>
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <input_inGame+0xb8>)
 80015dc:	895b      	ldrh	r3, [r3, #10]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d10a      	bne.n	80015f8 <input_inGame+0xb4>
		temp_game();
 80015e2:	f7ff ff63 	bl	80014ac <temp_game>
		status = PAUSE;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <input_inGame+0xc0>)
 80015e8:	220f      	movs	r2, #15
 80015ea:	601a      	str	r2, [r3, #0]
		move = NOT;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <input_inGame+0xbc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
		pause_lcd();
 80015f2:	f001 fb07 	bl	8002c04 <pause_lcd>
	}
}
 80015f6:	e7ff      	b.n	80015f8 <input_inGame+0xb4>
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200001f0 	.word	0x200001f0
 8001600:	20000160 	.word	0x20000160
 8001604:	2000015c 	.word	0x2000015c

08001608 <input_enterName>:

void input_enterName(){
 8001608:	b598      	push	{r3, r4, r7, lr}
 800160a:	af00      	add	r7, sp, #0
	flag_change = 1;
 800160c:	4b8a      	ldr	r3, [pc, #552]	; (8001838 <input_enterName+0x230>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
	if(is_touch_char() == 1){
 8001612:	f000 fecf 	bl	80023b4 <is_touch_char>
 8001616:	4603      	mov	r3, r0
 8001618:	2b01      	cmp	r3, #1
 800161a:	d11a      	bne.n	8001652 <input_enterName+0x4a>
		index_r = (touch_GetY() - POS_Y_CHAR)/CHAR_HEIGHT;
 800161c:	f005 f8ca 	bl	80067b4 <touch_GetY>
 8001620:	4603      	mov	r3, r0
 8001622:	3b7c      	subs	r3, #124	; 0x7c
 8001624:	4a85      	ldr	r2, [pc, #532]	; (800183c <input_enterName+0x234>)
 8001626:	fb82 1203 	smull	r1, r2, r2, r3
 800162a:	1112      	asrs	r2, r2, #4
 800162c:	17db      	asrs	r3, r3, #31
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b83      	ldr	r3, [pc, #524]	; (8001840 <input_enterName+0x238>)
 8001634:	701a      	strb	r2, [r3, #0]
		index_c = (touch_GetX() - POS_X_CHAR)/CHAR_WIDTH;
 8001636:	f005 f8b1 	bl	800679c <touch_GetX>
 800163a:	4603      	mov	r3, r0
 800163c:	3b06      	subs	r3, #6
 800163e:	4a7f      	ldr	r2, [pc, #508]	; (800183c <input_enterName+0x234>)
 8001640:	fb82 1203 	smull	r1, r2, r2, r3
 8001644:	1112      	asrs	r2, r2, #4
 8001646:	17db      	asrs	r3, r3, #31
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b7d      	ldr	r3, [pc, #500]	; (8001844 <input_enterName+0x23c>)
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e04b      	b.n	80016ea <input_enterName+0xe2>
	}else{
		if(button_count[1] == 1){
 8001652:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <input_enterName+0x240>)
 8001654:	885b      	ldrh	r3, [r3, #2]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10a      	bne.n	8001670 <input_enterName+0x68>
			if(index_r > 0) index_r--;
 800165a:	4b79      	ldr	r3, [pc, #484]	; (8001840 <input_enterName+0x238>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d043      	beq.n	80016ea <input_enterName+0xe2>
 8001662:	4b77      	ldr	r3, [pc, #476]	; (8001840 <input_enterName+0x238>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	3b01      	subs	r3, #1
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b75      	ldr	r3, [pc, #468]	; (8001840 <input_enterName+0x238>)
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e03c      	b.n	80016ea <input_enterName+0xe2>
		}else if(button_count[9] == 1){
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <input_enterName+0x240>)
 8001672:	8a5b      	ldrh	r3, [r3, #18]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10a      	bne.n	800168e <input_enterName+0x86>
			if(index_r < CHAR_ROW - 1) index_r++;
 8001678:	4b71      	ldr	r3, [pc, #452]	; (8001840 <input_enterName+0x238>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d834      	bhi.n	80016ea <input_enterName+0xe2>
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <input_enterName+0x238>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <input_enterName+0x238>)
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e02d      	b.n	80016ea <input_enterName+0xe2>
		}else if(button_count[4] == 1){
 800168e:	4b6e      	ldr	r3, [pc, #440]	; (8001848 <input_enterName+0x240>)
 8001690:	891b      	ldrh	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10a      	bne.n	80016ac <input_enterName+0xa4>
			if(index_c > 0) index_c--;
 8001696:	4b6b      	ldr	r3, [pc, #428]	; (8001844 <input_enterName+0x23c>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d025      	beq.n	80016ea <input_enterName+0xe2>
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <input_enterName+0x23c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <input_enterName+0x23c>)
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e01e      	b.n	80016ea <input_enterName+0xe2>
		}else if(button_count[6] == 1){
 80016ac:	4b66      	ldr	r3, [pc, #408]	; (8001848 <input_enterName+0x240>)
 80016ae:	899b      	ldrh	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10a      	bne.n	80016ca <input_enterName+0xc2>
			if(index_c < CHAR_COL - 1) index_c++;
 80016b4:	4b63      	ldr	r3, [pc, #396]	; (8001844 <input_enterName+0x23c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d816      	bhi.n	80016ea <input_enterName+0xe2>
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <input_enterName+0x23c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <input_enterName+0x23c>)
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e00f      	b.n	80016ea <input_enterName+0xe2>
		}else if(button_count[5] == 1){
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <input_enterName+0x240>)
 80016cc:	895b      	ldrh	r3, [r3, #10]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <input_enterName+0xdc>
			index_r = index_r_old;
 80016d2:	4b5e      	ldr	r3, [pc, #376]	; (800184c <input_enterName+0x244>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <input_enterName+0x238>)
 80016d8:	701a      	strb	r2, [r3, #0]
			index_c = index_c_old;
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <input_enterName+0x248>)
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	4b59      	ldr	r3, [pc, #356]	; (8001844 <input_enterName+0x23c>)
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	e002      	b.n	80016ea <input_enterName+0xe2>
		}else{
			flag_change = 0;
 80016e4:	4b54      	ldr	r3, [pc, #336]	; (8001838 <input_enterName+0x230>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
		}
	}
	if(flag_change == 1){
 80016ea:	4b53      	ldr	r3, [pc, #332]	; (8001838 <input_enterName+0x230>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	f040 80a1 	bne.w	8001836 <input_enterName+0x22e>
		if(index_r == index_r_old && index_c == index_c_old){
 80016f4:	4b52      	ldr	r3, [pc, #328]	; (8001840 <input_enterName+0x238>)
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	4b54      	ldr	r3, [pc, #336]	; (800184c <input_enterName+0x244>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f040 8098 	bne.w	8001832 <input_enterName+0x22a>
 8001702:	4b50      	ldr	r3, [pc, #320]	; (8001844 <input_enterName+0x23c>)
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <input_enterName+0x248>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	f040 8091 	bne.w	8001832 <input_enterName+0x22a>
			if(index_r == IDX_R_UPPER && index_c == IDX_C_UPPER){
 8001710:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <input_enterName+0x238>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d113      	bne.n	8001740 <input_enterName+0x138>
 8001718:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <input_enterName+0x23c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10f      	bne.n	8001740 <input_enterName+0x138>
				if(flag_uppercase == 1){
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <input_enterName+0x24c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <input_enterName+0x12c>
					flag_uppercase = 0;
 8001728:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <input_enterName+0x24c>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
					lowercase_lcd();
 800172e:	f001 fc5b 	bl	8002fe8 <lowercase_lcd>
				if(flag_uppercase == 1){
 8001732:	e07e      	b.n	8001832 <input_enterName+0x22a>
				}else{
					flag_uppercase = 1;
 8001734:	4b47      	ldr	r3, [pc, #284]	; (8001854 <input_enterName+0x24c>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
					uppercase_lcd();
 800173a:	f001 fc0d 	bl	8002f58 <uppercase_lcd>
				if(flag_uppercase == 1){
 800173e:	e078      	b.n	8001832 <input_enterName+0x22a>
				}
			}else if(index_r == IDX_R_DEL && index_c == IDX_C_DEL){
 8001740:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <input_enterName+0x238>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d116      	bne.n	8001776 <input_enterName+0x16e>
 8001748:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <input_enterName+0x23c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d112      	bne.n	8001776 <input_enterName+0x16e>
				if(name_length > 0){
 8001750:	4b41      	ldr	r3, [pc, #260]	; (8001858 <input_enterName+0x250>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d06c      	beq.n	8001832 <input_enterName+0x22a>
					name_length--;
 8001758:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <input_enterName+0x250>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <input_enterName+0x250>)
 8001762:	701a      	strb	r2, [r3, #0]
					name[name_length] = '\0';
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <input_enterName+0x250>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b3c      	ldr	r3, [pc, #240]	; (800185c <input_enterName+0x254>)
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]
					displayName_lcd();
 8001770:	f001 fd06 	bl	8003180 <displayName_lcd>
				if(name_length > 0){
 8001774:	e05d      	b.n	8001832 <input_enterName+0x22a>
				}
			}else if(index_r == IDX_R_ENTR && index_c == IDX_C_ENTR){
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <input_enterName+0x238>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b04      	cmp	r3, #4
 800177c:	d122      	bne.n	80017c4 <input_enterName+0x1bc>
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <input_enterName+0x23c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d11e      	bne.n	80017c4 <input_enterName+0x1bc>
				if(name_length > 0){
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <input_enterName+0x250>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d051      	beq.n	8001832 <input_enterName+0x22a>
					status = tempStatus;
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <input_enterName+0x258>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a34      	ldr	r2, [pc, #208]	; (8001864 <input_enterName+0x25c>)
 8001794:	6013      	str	r3, [r2, #0]
					setTimer3(500);
 8001796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800179a:	f003 fb41 	bl	8004e20 <setTimer3>
					game_lcd();					// Hien thi man hinh choi game
 800179e:	f001 f92f 	bl	8002a00 <game_lcd>
					mode_7seg();				// Ham hien thi che do choi tren led 7seg
 80017a2:	f001 ff81 	bl	80036a8 <mode_7seg>
					reDraw_snake();				// Ham goi ve con ran
 80017a6:	f003 faed 	bl	8004d84 <reDraw_snake>
					point_food_lcd(food);
 80017aa:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <input_enterName+0x260>)
 80017ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017b0:	f001 ff53 	bl	800365a <point_food_lcd>
					environment_lcd();			// Ham moi truong
 80017b4:	f001 f9d6 	bl	8002b64 <environment_lcd>
					score_lcd();				// Ham diem so
 80017b8:	f001 fa0c 	bl	8002bd4 <score_lcd>
					flag_user = FLAG_PLAYING;
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <input_enterName+0x264>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
					return;
 80017c2:	e038      	b.n	8001836 <input_enterName+0x22e>
				}
			}else if(name_length < 10){
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <input_enterName+0x250>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d832      	bhi.n	8001832 <input_enterName+0x22a>
				if(flag_uppercase == 1){
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <input_enterName+0x24c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d113      	bne.n	80017fc <input_enterName+0x1f4>
					name[name_length] = char_upper[index_r][index_c];
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <input_enterName+0x238>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <input_enterName+0x23c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461c      	mov	r4, r3
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <input_enterName+0x250>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	4a22      	ldr	r2, [pc, #136]	; (8001870 <input_enterName+0x268>)
 80017e8:	460b      	mov	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	440b      	add	r3, r1
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	4423      	add	r3, r4
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <input_enterName+0x254>)
 80017f8:	541a      	strb	r2, [r3, r0]
 80017fa:	e012      	b.n	8001822 <input_enterName+0x21a>
				}else{
					name[name_length] = char_lower[index_r][index_c];
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <input_enterName+0x238>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <input_enterName+0x23c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461c      	mov	r4, r3
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <input_enterName+0x250>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	4a19      	ldr	r2, [pc, #100]	; (8001874 <input_enterName+0x26c>)
 8001810:	460b      	mov	r3, r1
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	440b      	add	r3, r1
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	4423      	add	r3, r4
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <input_enterName+0x254>)
 8001820:	541a      	strb	r2, [r3, r0]
				}
				name_length++;
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <input_enterName+0x250>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <input_enterName+0x250>)
 800182c:	701a      	strb	r2, [r3, #0]
				displayName_lcd();
 800182e:	f001 fca7 	bl	8003180 <displayName_lcd>
			}
		}
		selectbox_lcd();
 8001832:	f001 fc21 	bl	8003078 <selectbox_lcd>
	}
}
 8001836:	bd98      	pop	{r3, r4, r7, pc}
 8001838:	20000155 	.word	0x20000155
 800183c:	6bca1af3 	.word	0x6bca1af3
 8001840:	20000157 	.word	0x20000157
 8001844:	20000158 	.word	0x20000158
 8001848:	200001f0 	.word	0x200001f0
 800184c:	20000159 	.word	0x20000159
 8001850:	2000015a 	.word	0x2000015a
 8001854:	20000156 	.word	0x20000156
 8001858:	2000014f 	.word	0x2000014f
 800185c:	20000144 	.word	0x20000144
 8001860:	20000170 	.word	0x20000170
 8001864:	2000015c 	.word	0x2000015c
 8001868:	20000050 	.word	0x20000050
 800186c:	20000154 	.word	0x20000154
 8001870:	2000000c 	.word	0x2000000c
 8001874:	2000002c 	.word	0x2000002c

08001878 <input_process>:

void input_process(){
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	switch(status){
 800187c:	4bb2      	ldr	r3, [pc, #712]	; (8001b48 <input_process+0x2d0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b12      	cmp	r3, #18
 8001882:	f200 8188 	bhi.w	8001b96 <input_process+0x31e>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <input_process+0x14>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	080018d9 	.word	0x080018d9
 8001890:	08001999 	.word	0x08001999
 8001894:	08001b97 	.word	0x08001b97
 8001898:	08001a93 	.word	0x08001a93
 800189c:	08001b97 	.word	0x08001b97
 80018a0:	08001b97 	.word	0x08001b97
 80018a4:	08001b97 	.word	0x08001b97
 80018a8:	08001b97 	.word	0x08001b97
 80018ac:	08001b97 	.word	0x08001b97
 80018b0:	08001b97 	.word	0x08001b97
 80018b4:	08001b97 	.word	0x08001b97
 80018b8:	08001ab1 	.word	0x08001ab1
 80018bc:	08001ab7 	.word	0x08001ab7
 80018c0:	08001abd 	.word	0x08001abd
 80018c4:	08001b97 	.word	0x08001b97
 80018c8:	08001b0d 	.word	0x08001b0d
 80018cc:	08001ac3 	.word	0x08001ac3
 80018d0:	08001ae5 	.word	0x08001ae5
 80018d4:	08001b07 	.word	0x08001b07
		case HOME:
			if(is_touch_newGame() == 1 || button_count[3] == 1){
 80018d8:	f000 fc9f 	bl	800221a <is_touch_newGame>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d003      	beq.n	80018ea <input_process+0x72>
 80018e2:	4b9a      	ldr	r3, [pc, #616]	; (8001b4c <input_process+0x2d4>)
 80018e4:	88db      	ldrh	r3, [r3, #6]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d117      	bne.n	800191a <input_process+0xa2>
				if(confirm[1] == 1){
 80018ea:	4b99      	ldr	r3, [pc, #612]	; (8001b50 <input_process+0x2d8>)
 80018ec:	785b      	ldrb	r3, [r3, #1]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10b      	bne.n	800190a <input_process+0x92>
					clr_confirm();
 80018f2:	f7ff fdc1 	bl	8001478 <clr_confirm>
					status = MODE;
 80018f6:	4b94      	ldr	r3, [pc, #592]	; (8001b48 <input_process+0x2d0>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
					user_init();
 80018fc:	f005 f81a 	bl	8006934 <user_init>
					snake_init();
 8001900:	f003 f88e 	bl	8004a20 <snake_init>
					mode_game_lcd();
 8001904:	f000 ff2e 	bl	8002764 <mode_game_lcd>
				if(confirm[1] == 1){
 8001908:	e045      	b.n	8001996 <input_process+0x11e>
				}else{
					clr_confirm();
 800190a:	f7ff fdb5 	bl	8001478 <clr_confirm>
					confirm[1] = 1;
 800190e:	4b90      	ldr	r3, [pc, #576]	; (8001b50 <input_process+0x2d8>)
 8001910:	2201      	movs	r2, #1
 8001912:	705a      	strb	r2, [r3, #1]
					home_second_lcd();
 8001914:	f001 fd34 	bl	8003380 <home_second_lcd>
				if(confirm[1] == 1){
 8001918:	e03d      	b.n	8001996 <input_process+0x11e>
				}
			}else if(is_touch_continue() == 1 || button_count[7] == 1){
 800191a:	f000 fca0 	bl	800225e <is_touch_continue>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d003      	beq.n	800192c <input_process+0xb4>
 8001924:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <input_process+0x2d4>)
 8001926:	89db      	ldrh	r3, [r3, #14]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d116      	bne.n	800195a <input_process+0xe2>
				if(confirm[2] == 1 && tempFlag == 1){
 800192c:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <input_process+0x2d8>)
 800192e:	789b      	ldrb	r3, [r3, #2]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d10a      	bne.n	800194a <input_process+0xd2>
 8001934:	4b87      	ldr	r3, [pc, #540]	; (8001b54 <input_process+0x2dc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <input_process+0xd2>
					clr_confirm();
 800193c:	f7ff fd9c 	bl	8001478 <clr_confirm>
					game_lcd();
 8001940:	f001 f85e 	bl	8002a00 <game_lcd>
					continue_game();
 8001944:	f7ff fdd4 	bl	80014f0 <continue_game>
				if(confirm[2] == 1 && tempFlag == 1){
 8001948:	e025      	b.n	8001996 <input_process+0x11e>
				}else{
					clr_confirm();
 800194a:	f7ff fd95 	bl	8001478 <clr_confirm>
					confirm[2] = 1;
 800194e:	4b80      	ldr	r3, [pc, #512]	; (8001b50 <input_process+0x2d8>)
 8001950:	2201      	movs	r2, #1
 8001952:	709a      	strb	r2, [r3, #2]
					home_third_lcd();
 8001954:	f001 fd2c 	bl	80033b0 <home_third_lcd>
				if(confirm[2] == 1 && tempFlag == 1){
 8001958:	e01d      	b.n	8001996 <input_process+0x11e>
				}
			}else if(is_touch_highScore() == 1 || button_count[11] == 1){
 800195a:	f000 fca2 	bl	80022a2 <is_touch_highScore>
 800195e:	4603      	mov	r3, r0
 8001960:	2b01      	cmp	r3, #1
 8001962:	d004      	beq.n	800196e <input_process+0xf6>
 8001964:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <input_process+0x2d4>)
 8001966:	8adb      	ldrh	r3, [r3, #22]
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 8116 	bne.w	8001b9a <input_process+0x322>
				if(confirm[3] == 1){
 800196e:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <input_process+0x2d8>)
 8001970:	78db      	ldrb	r3, [r3, #3]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <input_process+0x10e>
					clr_confirm();
 8001976:	f7ff fd7f 	bl	8001478 <clr_confirm>
					status = HIGHSCORE;
 800197a:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <input_process+0x2d0>)
 800197c:	2203      	movs	r2, #3
 800197e:	601a      	str	r2, [r3, #0]
					highscore_lcd();
 8001980:	f000 ff68 	bl	8002854 <highscore_lcd>
					clr_confirm();
					confirm[3] = 1;
					home_forth_lcd();
				}
			}
			break;
 8001984:	e109      	b.n	8001b9a <input_process+0x322>
					clr_confirm();
 8001986:	f7ff fd77 	bl	8001478 <clr_confirm>
					confirm[3] = 1;
 800198a:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <input_process+0x2d8>)
 800198c:	2201      	movs	r2, #1
 800198e:	70da      	strb	r2, [r3, #3]
					home_forth_lcd();
 8001990:	f001 fd26 	bl	80033e0 <home_forth_lcd>
			break;
 8001994:	e101      	b.n	8001b9a <input_process+0x322>
 8001996:	e100      	b.n	8001b9a <input_process+0x322>
		case MODE:
			if(is_touch_classic() == 1 || button_count[3] == 1){
 8001998:	f000 fca6 	bl	80022e8 <is_touch_classic>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d003      	beq.n	80019aa <input_process+0x132>
 80019a2:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <input_process+0x2d4>)
 80019a4:	88db      	ldrh	r3, [r3, #6]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d116      	bne.n	80019d8 <input_process+0x160>
				if(confirm[0] == 1){
 80019aa:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <input_process+0x2d8>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10a      	bne.n	80019c8 <input_process+0x150>
					clr_confirm();
 80019b2:	f7ff fd61 	bl	8001478 <clr_confirm>
					tempStatus = CLASSIC;
 80019b6:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <input_process+0x2e0>)
 80019b8:	220b      	movs	r2, #11
 80019ba:	601a      	str	r2, [r3, #0]
					status = NAME;
 80019bc:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <input_process+0x2d0>)
 80019be:	2212      	movs	r2, #18
 80019c0:	601a      	str	r2, [r3, #0]
					entername_lcd();
 80019c2:	f001 fc29 	bl	8003218 <entername_lcd>
				if(confirm[0] == 1){
 80019c6:	e046      	b.n	8001a56 <input_process+0x1de>
				}else{
					clr_confirm();
 80019c8:	f7ff fd56 	bl	8001478 <clr_confirm>
					confirm[0] = 1;
 80019cc:	4b60      	ldr	r3, [pc, #384]	; (8001b50 <input_process+0x2d8>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
					mode_first_lcd();
 80019d2:	f001 fd1f 	bl	8003414 <mode_first_lcd>
				if(confirm[0] == 1){
 80019d6:	e03e      	b.n	8001a56 <input_process+0x1de>
				}
			}else if(is_touch_speed() == 1 || button_count[7] == 1){
 80019d8:	f000 fca8 	bl	800232c <is_touch_speed>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d003      	beq.n	80019ea <input_process+0x172>
 80019e2:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <input_process+0x2d4>)
 80019e4:	89db      	ldrh	r3, [r3, #14]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d116      	bne.n	8001a18 <input_process+0x1a0>
				if(confirm[1] == 1){
 80019ea:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <input_process+0x2d8>)
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10a      	bne.n	8001a08 <input_process+0x190>
					clr_confirm();
 80019f2:	f7ff fd41 	bl	8001478 <clr_confirm>
					tempStatus = SPEED;
 80019f6:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <input_process+0x2e0>)
 80019f8:	220c      	movs	r2, #12
 80019fa:	601a      	str	r2, [r3, #0]
					status = NAME;
 80019fc:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <input_process+0x2d0>)
 80019fe:	2212      	movs	r2, #18
 8001a00:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001a02:	f001 fc09 	bl	8003218 <entername_lcd>
				if(confirm[1] == 1){
 8001a06:	e026      	b.n	8001a56 <input_process+0x1de>
				}else{
					clr_confirm();
 8001a08:	f7ff fd36 	bl	8001478 <clr_confirm>
					confirm[1] = 1;
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <input_process+0x2d8>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	705a      	strb	r2, [r3, #1]
					mode_second_lcd();
 8001a12:	f001 fd17 	bl	8003444 <mode_second_lcd>
				if(confirm[1] == 1){
 8001a16:	e01e      	b.n	8001a56 <input_process+0x1de>
				}
			}else if(is_touch_time() == 1 || button_count[11] == 1){
 8001a18:	f000 fcaa 	bl	8002370 <is_touch_time>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d003      	beq.n	8001a2a <input_process+0x1b2>
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <input_process+0x2d4>)
 8001a24:	8adb      	ldrh	r3, [r3, #22]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d115      	bne.n	8001a56 <input_process+0x1de>
				if(confirm[2] == 1){
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <input_process+0x2d8>)
 8001a2c:	789b      	ldrb	r3, [r3, #2]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10a      	bne.n	8001a48 <input_process+0x1d0>
					clr_confirm();
 8001a32:	f7ff fd21 	bl	8001478 <clr_confirm>
					tempStatus = TIME;
 8001a36:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <input_process+0x2e0>)
 8001a38:	220d      	movs	r2, #13
 8001a3a:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001a3c:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <input_process+0x2d0>)
 8001a3e:	2212      	movs	r2, #18
 8001a40:	601a      	str	r2, [r3, #0]
					entername_lcd();
 8001a42:	f001 fbe9 	bl	8003218 <entername_lcd>
 8001a46:	e006      	b.n	8001a56 <input_process+0x1de>
				}else{
					clr_confirm();
 8001a48:	f7ff fd16 	bl	8001478 <clr_confirm>
					confirm[2] = 1;
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <input_process+0x2d8>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	709a      	strb	r2, [r3, #2]
					mode_third_lcd();
 8001a52:	f001 fd11 	bl	8003478 <mode_third_lcd>
				}
			}
			if(is_touch_quit() == 1 || button_count[15] == 1){
 8001a56:	f000 fb55 	bl	8002104 <is_touch_quit>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d004      	beq.n	8001a6a <input_process+0x1f2>
 8001a60:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <input_process+0x2d4>)
 8001a62:	8bdb      	ldrh	r3, [r3, #30]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 809a 	bne.w	8001b9e <input_process+0x326>
				if(confirm[3] == 1){
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <input_process+0x2d8>)
 8001a6c:	78db      	ldrb	r3, [r3, #3]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <input_process+0x20a>
					clr_confirm();
 8001a72:	f7ff fd01 	bl	8001478 <clr_confirm>
					status = HOME;
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <input_process+0x2d0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
					home_lcd();
 8001a7c:	f000 fe1a 	bl	80026b4 <home_lcd>
					clr_confirm();
					confirm[3] = 1;
					mode_forth_lcd();
				}
			}
			break;
 8001a80:	e08d      	b.n	8001b9e <input_process+0x326>
					clr_confirm();
 8001a82:	f7ff fcf9 	bl	8001478 <clr_confirm>
					confirm[3] = 1;
 8001a86:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <input_process+0x2d8>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	70da      	strb	r2, [r3, #3]
					mode_forth_lcd();
 8001a8c:	f001 fd0e 	bl	80034ac <mode_forth_lcd>
			break;
 8001a90:	e085      	b.n	8001b9e <input_process+0x326>
		case HIGHSCORE:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001a92:	f000 fb37 	bl	8002104 <is_touch_quit>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d003      	beq.n	8001aa4 <input_process+0x22c>
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <input_process+0x2d4>)
 8001a9e:	88db      	ldrh	r3, [r3, #6]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d17e      	bne.n	8001ba2 <input_process+0x32a>
				status = HOME;
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <input_process+0x2d0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001aaa:	f000 fe03 	bl	80026b4 <home_lcd>
			}
			break;
 8001aae:	e078      	b.n	8001ba2 <input_process+0x32a>
		case CLASSIC:
			input_inGame();
 8001ab0:	f7ff fd48 	bl	8001544 <input_inGame>
			break;
 8001ab4:	e07c      	b.n	8001bb0 <input_process+0x338>
		case SPEED:
			input_inGame();
 8001ab6:	f7ff fd45 	bl	8001544 <input_inGame>
			break;
 8001aba:	e079      	b.n	8001bb0 <input_process+0x338>
		case TIME:
			input_inGame();
 8001abc:	f7ff fd42 	bl	8001544 <input_inGame>
			break;
 8001ac0:	e076      	b.n	8001bb0 <input_process+0x338>
		case GAMEOVER:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001ac2:	f000 fb1f 	bl	8002104 <is_touch_quit>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d003      	beq.n	8001ad4 <input_process+0x25c>
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <input_process+0x2d4>)
 8001ace:	88db      	ldrh	r3, [r3, #6]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d168      	bne.n	8001ba6 <input_process+0x32e>
				status = HOME;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <input_process+0x2d0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001ada:	f000 fdeb 	bl	80026b4 <home_lcd>
				reset_7seg();				// Thoat che do choi game led 7 se quay tro ve 0
 8001ade:	f001 fe07 	bl	80036f0 <reset_7seg>
			}
			break;
 8001ae2:	e060      	b.n	8001ba6 <input_process+0x32e>
		case WIN:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001ae4:	f000 fb0e 	bl	8002104 <is_touch_quit>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d003      	beq.n	8001af6 <input_process+0x27e>
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <input_process+0x2d4>)
 8001af0:	88db      	ldrh	r3, [r3, #6]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d159      	bne.n	8001baa <input_process+0x332>
				status = HOME;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <input_process+0x2d0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001afc:	f000 fdda 	bl	80026b4 <home_lcd>
				reset_7seg();
 8001b00:	f001 fdf6 	bl	80036f0 <reset_7seg>
			}
			break;
 8001b04:	e051      	b.n	8001baa <input_process+0x332>
		case NAME:
			input_enterName();
 8001b06:	f7ff fd7f 	bl	8001608 <input_enterName>
			break;
 8001b0a:	e051      	b.n	8001bb0 <input_process+0x338>
		case PAUSE:
			if(is_touch_quit_end() == 1 || button_count[7] == 1){
 8001b0c:	f000 fb1d 	bl	800214a <is_touch_quit_end>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d003      	beq.n	8001b1e <input_process+0x2a6>
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <input_process+0x2d4>)
 8001b18:	89db      	ldrh	r3, [r3, #14]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d11e      	bne.n	8001b5c <input_process+0x2e4>
				if(confirm[2] == 1){
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <input_process+0x2d8>)
 8001b20:	789b      	ldrb	r3, [r3, #2]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <input_process+0x2be>
					clr_confirm();
 8001b26:	f7ff fca7 	bl	8001478 <clr_confirm>
					status = HOME;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <input_process+0x2d0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
					home_lcd();
 8001b30:	f000 fdc0 	bl	80026b4 <home_lcd>
				if(confirm[2] == 1){
 8001b34:	e02e      	b.n	8001b94 <input_process+0x31c>
				}else{
					clr_confirm();
 8001b36:	f7ff fc9f 	bl	8001478 <clr_confirm>
					confirm[2] = 1;
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <input_process+0x2d8>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	709a      	strb	r2, [r3, #2]
					pause_third_lcd();
 8001b40:	f001 fcf6 	bl	8003530 <pause_third_lcd>
				if(confirm[2] == 1){
 8001b44:	e026      	b.n	8001b94 <input_process+0x31c>
 8001b46:	bf00      	nop
 8001b48:	2000015c 	.word	0x2000015c
 8001b4c:	200001f0 	.word	0x200001f0
 8001b50:	2000013c 	.word	0x2000013c
 8001b54:	2000016c 	.word	0x2000016c
 8001b58:	20000170 	.word	0x20000170
				}
			}else if(is_touch_resume() == 1 || button_count[3] == 1){
 8001b5c:	f000 fb17 	bl	800218e <is_touch_resume>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d003      	beq.n	8001b6e <input_process+0x2f6>
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <input_process+0x33c>)
 8001b68:	88db      	ldrh	r3, [r3, #6]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d11f      	bne.n	8001bae <input_process+0x336>
				if(confirm[1] == 1){
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <input_process+0x340>)
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d106      	bne.n	8001b84 <input_process+0x30c>
					clr_confirm();
 8001b76:	f7ff fc7f 	bl	8001478 <clr_confirm>
					game_lcd();
 8001b7a:	f000 ff41 	bl	8002a00 <game_lcd>
					continue_game();
 8001b7e:	f7ff fcb7 	bl	80014f0 <continue_game>
					clr_confirm();
					confirm[1] = 1;
					pause_second_lcd();
				}
			}
			break;
 8001b82:	e014      	b.n	8001bae <input_process+0x336>
					clr_confirm();
 8001b84:	f7ff fc78 	bl	8001478 <clr_confirm>
					confirm[1] = 1;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <input_process+0x340>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	705a      	strb	r2, [r3, #1]
					pause_second_lcd();
 8001b8e:	f001 fca7 	bl	80034e0 <pause_second_lcd>
			break;
 8001b92:	e00c      	b.n	8001bae <input_process+0x336>
 8001b94:	e00b      	b.n	8001bae <input_process+0x336>
		default:
			break;
 8001b96:	bf00      	nop
 8001b98:	e00a      	b.n	8001bb0 <input_process+0x338>
			break;
 8001b9a:	bf00      	nop
 8001b9c:	e008      	b.n	8001bb0 <input_process+0x338>
			break;
 8001b9e:	bf00      	nop
 8001ba0:	e006      	b.n	8001bb0 <input_process+0x338>
			break;
 8001ba2:	bf00      	nop
 8001ba4:	e004      	b.n	8001bb0 <input_process+0x338>
			break;
 8001ba6:	bf00      	nop
 8001ba8:	e002      	b.n	8001bb0 <input_process+0x338>
			break;
 8001baa:	bf00      	nop
 8001bac:	e000      	b.n	8001bb0 <input_process+0x338>
			break;
 8001bae:	bf00      	nop
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200001f0 	.word	0x200001f0
 8001bb8:	2000013c 	.word	0x2000013c
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <environment_cal>:

// Cap nhat thong tin moi truong
void environment_cal(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	sensor_Read();
 8001bc4:	f002 fee8 	bl	8004998 <sensor_Read>
	current_temp = sensor_GetTemperature();
 8001bc8:	f002 ff0c 	bl	80049e4 <sensor_GetTemperature>
 8001bcc:	eef0 7a40 	vmov.f32	s15, s0
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <environment_cal+0x80>)
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
	current_hum = ((float)sensor_GetPotentiometer() / 4095.0) * 100;
 8001bd6:	f002 fef9 	bl	80049cc <sensor_GetPotentiometer>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be4:	ee17 0a90 	vmov	r0, s15
 8001be8:	f7fe fcae 	bl	8000548 <__aeabi_f2d>
 8001bec:	a312      	add	r3, pc, #72	; (adr r3, 8001c38 <environment_cal+0x78>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f7fe fe2b 	bl	800084c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <environment_cal+0x84>)
 8001c04:	f7fe fcf8 	bl	80005f8 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ffca 	bl	8000ba8 <__aeabi_d2uiz>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <environment_cal+0x88>)
 8001c1a:	801a      	strh	r2, [r3, #0]
	current_light = 4095 - sensor_GetLight();
 8001c1c:	f002 feca 	bl	80049b4 <sensor_GetLight>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001c26:	330f      	adds	r3, #15
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <environment_cal+0x8c>)
 8001c2c:	801a      	strh	r2, [r3, #0]
	environment_lcd();
 8001c2e:	f000 ff99 	bl	8002b64 <environment_lcd>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40affe00 	.word	0x40affe00
 8001c40:	20000004 	.word	0x20000004
 8001c44:	40590000 	.word	0x40590000
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	2000000a 	.word	0x2000000a

08001c50 <score_cal>:

// Tinh toan cap nhat diem so
void score_cal(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	current_score = current_score + (400 / counter_time_score) * 5 + 5;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <score_cal+0x30>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	441a      	add	r2, r3
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <score_cal+0x34>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3305      	adds	r3, #5
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <score_cal+0x34>)
 8001c70:	6013      	str	r3, [r2, #0]
	counter_time_score = 0;
 8001c72:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <score_cal+0x30>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
	score_lcd();
 8001c78:	f000 ffac 	bl	8002bd4 <score_lcd>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000164 	.word	0x20000164
 8001c84:	20000000 	.word	0x20000000

08001c88 <inGame>:

void inGame(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	if(move != NOT){
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <inGame+0x6c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <inGame+0x10>
		move_snake();
 8001c94:	f003 f814 	bl	8004cc0 <move_snake>
	}
	if(is_collision() == 1){
 8001c98:	f002 ff42 	bl	8004b20 <is_collision>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d109      	bne.n	8001cb6 <inGame+0x2e>
		status = GAMEOVER;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <inGame+0x70>)
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	601a      	str	r2, [r3, #0]
		game_over_lcd();
 8001ca8:	f000 fff6 	bl	8002c98 <game_over_lcd>
		user_history();
 8001cac:	f004 fe72 	bl	8006994 <user_history>
		snake_init();
 8001cb0:	f002 feb6 	bl	8004a20 <snake_init>
		status = WIN;
		youwin_lcd();
		user_history();
		snake_init();
	}
}
 8001cb4:	e01b      	b.n	8001cee <inGame+0x66>
	}else if(is_eat() == 1){
 8001cb6:	f002 ff71 	bl	8004b9c <is_eat>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d109      	bne.n	8001cd4 <inGame+0x4c>
		length++;
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <inGame+0x74>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <inGame+0x74>)
 8001cc8:	6013      	str	r3, [r2, #0]
		score_cal();
 8001cca:	f7ff ffc1 	bl	8001c50 <score_cal>
		rand_food();
 8001cce:	f002 ffc5 	bl	8004c5c <rand_food>
}
 8001cd2:	e00c      	b.n	8001cee <inGame+0x66>
	}else if(length == MAX_LENGTH_SNAKE){
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <inGame+0x74>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d108      	bne.n	8001cee <inGame+0x66>
		status = WIN;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <inGame+0x70>)
 8001cde:	2211      	movs	r2, #17
 8001ce0:	601a      	str	r2, [r3, #0]
		youwin_lcd();
 8001ce2:	f001 f889 	bl	8002df8 <youwin_lcd>
		user_history();
 8001ce6:	f004 fe55 	bl	8006994 <user_history>
		snake_init();
 8001cea:	f002 fe99 	bl	8004a20 <snake_init>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000160 	.word	0x20000160
 8001cf8:	2000015c 	.word	0x2000015c
 8001cfc:	2000004c 	.word	0x2000004c

08001d00 <fsm_ingame>:

void fsm_ingame(){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	switch(status){
 8001d04:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <fsm_ingame+0x138>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b0d      	cmp	r3, #13
 8001d0a:	d04e      	beq.n	8001daa <fsm_ingame+0xaa>
 8001d0c:	2b0d      	cmp	r3, #13
 8001d0e:	f300 8089 	bgt.w	8001e24 <fsm_ingame+0x124>
 8001d12:	2b0b      	cmp	r3, #11
 8001d14:	d002      	beq.n	8001d1c <fsm_ingame+0x1c>
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d018      	beq.n	8001d4c <fsm_ingame+0x4c>
					snake_init();
				}
			}
			break;
		default:
			break;
 8001d1a:	e083      	b.n	8001e24 <fsm_ingame+0x124>
			counter_time_score++;
 8001d1c:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <fsm_ingame+0x13c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a46      	ldr	r2, [pc, #280]	; (8001e3c <fsm_ingame+0x13c>)
 8001d24:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <fsm_ingame+0x140>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d104      	bne.n	8001d38 <fsm_ingame+0x38>
				flag_timer4 = 0;
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <fsm_ingame+0x140>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001d34:	f7ff ff44 	bl	8001bc0 <environment_cal>
			if(flag_timer3 == 1){
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <fsm_ingame+0x144>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d173      	bne.n	8001e28 <fsm_ingame+0x128>
				flag_timer3 = 0;
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <fsm_ingame+0x144>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	801a      	strh	r2, [r3, #0]
				inGame();
 8001d46:	f7ff ff9f 	bl	8001c88 <inGame>
			break;
 8001d4a:	e06d      	b.n	8001e28 <fsm_ingame+0x128>
			counter_time_score++;
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <fsm_ingame+0x13c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	4a3a      	ldr	r2, [pc, #232]	; (8001e3c <fsm_ingame+0x13c>)
 8001d54:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001d56:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <fsm_ingame+0x140>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d104      	bne.n	8001d68 <fsm_ingame+0x68>
				flag_timer4 = 0;
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <fsm_ingame+0x140>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001d64:	f7ff ff2c 	bl	8001bc0 <environment_cal>
			if(flag_timer3 == 1){
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <fsm_ingame+0x144>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d15d      	bne.n	8001e2c <fsm_ingame+0x12c>
				flag_timer3 = 0;
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <fsm_ingame+0x144>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	801a      	strh	r2, [r3, #0]
				inGame();
 8001d76:	f7ff ff87 	bl	8001c88 <inGame>
				if(length == 5){
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <fsm_ingame+0x148>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d103      	bne.n	8001d8a <fsm_ingame+0x8a>
					setTimer3(200);
 8001d82:	20c8      	movs	r0, #200	; 0xc8
 8001d84:	f003 f84c 	bl	8004e20 <setTimer3>
			break;
 8001d88:	e050      	b.n	8001e2c <fsm_ingame+0x12c>
				}else if(length == 10){
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <fsm_ingame+0x148>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b0a      	cmp	r3, #10
 8001d90:	d103      	bne.n	8001d9a <fsm_ingame+0x9a>
					setTimer3(100);
 8001d92:	2064      	movs	r0, #100	; 0x64
 8001d94:	f003 f844 	bl	8004e20 <setTimer3>
			break;
 8001d98:	e048      	b.n	8001e2c <fsm_ingame+0x12c>
				}else if(length == 15){
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <fsm_ingame+0x148>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	d144      	bne.n	8001e2c <fsm_ingame+0x12c>
					setTimer3(50);
 8001da2:	2032      	movs	r0, #50	; 0x32
 8001da4:	f003 f83c 	bl	8004e20 <setTimer3>
			break;
 8001da8:	e040      	b.n	8001e2c <fsm_ingame+0x12c>
			counter_time_score++;
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <fsm_ingame+0x13c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <fsm_ingame+0x13c>)
 8001db2:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <fsm_ingame+0x140>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d104      	bne.n	8001dc6 <fsm_ingame+0xc6>
				flag_timer4 = 0;
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <fsm_ingame+0x140>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001dc2:	f7ff fefd 	bl	8001bc0 <environment_cal>
			if(flag_timer3 == 1){
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <fsm_ingame+0x144>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d130      	bne.n	8001e30 <fsm_ingame+0x130>
				flag_timer3 = 0;
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <fsm_ingame+0x144>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	801a      	strh	r2, [r3, #0]
				inGame();
 8001dd4:	f7ff ff58 	bl	8001c88 <inGame>
				if(counter_time == 50){
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <fsm_ingame+0x14c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b32      	cmp	r3, #50	; 0x32
 8001dde:	d103      	bne.n	8001de8 <fsm_ingame+0xe8>
					setTimer3(200);
 8001de0:	20c8      	movs	r0, #200	; 0xc8
 8001de2:	f003 f81d 	bl	8004e20 <setTimer3>
			break;
 8001de6:	e023      	b.n	8001e30 <fsm_ingame+0x130>
				}else if(counter_time == 35){
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <fsm_ingame+0x14c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b23      	cmp	r3, #35	; 0x23
 8001dee:	d103      	bne.n	8001df8 <fsm_ingame+0xf8>
					setTimer3(100);
 8001df0:	2064      	movs	r0, #100	; 0x64
 8001df2:	f003 f815 	bl	8004e20 <setTimer3>
			break;
 8001df6:	e01b      	b.n	8001e30 <fsm_ingame+0x130>
				}else if(counter_time == 20){
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <fsm_ingame+0x14c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b14      	cmp	r3, #20
 8001dfe:	d103      	bne.n	8001e08 <fsm_ingame+0x108>
					setTimer3(50);
 8001e00:	2032      	movs	r0, #50	; 0x32
 8001e02:	f003 f80d 	bl	8004e20 <setTimer3>
			break;
 8001e06:	e013      	b.n	8001e30 <fsm_ingame+0x130>
				}else if(counter_time <= 0){
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <fsm_ingame+0x14c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	dc0f      	bgt.n	8001e30 <fsm_ingame+0x130>
					status = WIN;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <fsm_ingame+0x138>)
 8001e12:	2211      	movs	r2, #17
 8001e14:	601a      	str	r2, [r3, #0]
					youwin_lcd();
 8001e16:	f000 ffef 	bl	8002df8 <youwin_lcd>
					user_history();
 8001e1a:	f004 fdbb 	bl	8006994 <user_history>
					snake_init();
 8001e1e:	f002 fdff 	bl	8004a20 <snake_init>
			break;
 8001e22:	e005      	b.n	8001e30 <fsm_ingame+0x130>
			break;
 8001e24:	bf00      	nop
 8001e26:	e004      	b.n	8001e32 <fsm_ingame+0x132>
			break;
 8001e28:	bf00      	nop
 8001e2a:	e002      	b.n	8001e32 <fsm_ingame+0x132>
			break;
 8001e2c:	bf00      	nop
 8001e2e:	e000      	b.n	8001e32 <fsm_ingame+0x132>
			break;
 8001e30:	bf00      	nop
	}
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000015c 	.word	0x2000015c
 8001e3c:	20000164 	.word	0x20000164
 8001e40:	20000186 	.word	0x20000186
 8001e44:	20000180 	.word	0x20000180
 8001e48:	2000004c 	.word	0x2000004c
 8001e4c:	20000168 	.word	0x20000168

08001e50 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]
 8001e66:	615a      	str	r2, [r3, #20]
 8001e68:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
 8001e78:	615a      	str	r2, [r3, #20]
 8001e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001e7e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e82:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001e86:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <MX_FSMC_Init+0xf0>)
 8001e88:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001ebc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001ee2:	230f      	movs	r3, #15
 8001ee4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001ee6:	230f      	movs	r3, #15
 8001ee8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001eea:	233c      	movs	r3, #60	; 0x3c
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001ef6:	2311      	movs	r3, #17
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001efe:	2308      	movs	r3, #8
 8001f00:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001f02:	230f      	movs	r3, #15
 8001f04:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001f06:	2309      	movs	r3, #9
 8001f08:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001f12:	2311      	movs	r3, #17
 8001f14:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001f1a:	463a      	mov	r2, r7
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4806      	ldr	r0, [pc, #24]	; (8001f3c <MX_FSMC_Init+0xec>)
 8001f24:	f008 fb42 	bl	800a5ac <HAL_SRAM_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001f2e:	f002 fd1f 	bl	8004970 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001f32:	bf00      	nop
 8001f34:	3738      	adds	r7, #56	; 0x38
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000210 	.word	0x20000210
 8001f40:	a0000104 	.word	0xa0000104
 8001f44:	00000000 	.word	0x00000000

08001f48 <distance_of_two_point>:
 */

#include "fun_touch.h"

// Tinh khoang cach hai diem
float distance_of_two_point(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8001f48:	b5b0      	push	{r4, r5, r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4604      	mov	r4, r0
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	80fb      	strh	r3, [r7, #6]
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80bb      	strh	r3, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	807b      	strh	r3, [r7, #2]
 8001f62:	4613      	mov	r3, r2
 8001f64:	803b      	strh	r3, [r7, #0]
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
 8001f66:	88fa      	ldrh	r2, [r7, #6]
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fad9 	bl	8000524 <__aeabi_i2d>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001fe0 <distance_of_two_point+0x98>
 8001f7a:	ec43 2b10 	vmov	d0, r2, r3
 8001f7e:	f00b fc3f 	bl	800d800 <pow>
 8001f82:	ec55 4b10 	vmov	r4, r5, d0
 8001f86:	88ba      	ldrh	r2, [r7, #4]
 8001f88:	883b      	ldrh	r3, [r7, #0]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fac9 	bl	8000524 <__aeabi_i2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001fe0 <distance_of_two_point+0x98>
 8001f9a:	ec43 2b10 	vmov	d0, r2, r3
 8001f9e:	f00b fc2f 	bl	800d800 <pow>
 8001fa2:	ec53 2b10 	vmov	r2, r3, d0
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4629      	mov	r1, r5
 8001faa:	f7fe f96f 	bl	800028c <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	ec43 2b17 	vmov	d7, r2, r3
 8001fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fba:	eef0 0a67 	vmov.f32	s1, s15
 8001fbe:	f00b fccd 	bl	800d95c <sqrt>
 8001fc2:	ec53 2b10 	vmov	r2, r3, d0
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fe0d 	bl	8000be8 <__aeabi_d2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	ee07 3a90 	vmov	s15, r3
}
 8001fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40000000 	.word	0x40000000

08001fe8 <is_touch_right>:

int is_touch_right(){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001fec:	f004 fbc4 	bl	8006778 <touch_IsTouched>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <is_touch_right+0x12>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e018      	b.n	800202c <is_touch_right+0x44>
	return (touch_GetX() > POS_X_RIGHT
 8001ffa:	f004 fbcf 	bl	800679c <touch_GetX>
 8001ffe:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
			&& touch_GetY() > POS_Y_RIGHT
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8002000:	2ba5      	cmp	r3, #165	; 0xa5
 8002002:	d912      	bls.n	800202a <is_touch_right+0x42>
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
 8002004:	f004 fbca 	bl	800679c <touch_GetX>
 8002008:	4603      	mov	r3, r0
 800200a:	2bea      	cmp	r3, #234	; 0xea
 800200c:	d80d      	bhi.n	800202a <is_touch_right+0x42>
			&& touch_GetY() > POS_Y_RIGHT
 800200e:	f004 fbd1 	bl	80067b4 <touch_GetY>
 8002012:	4603      	mov	r3, r0
 8002014:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8002018:	d307      	bcc.n	800202a <is_touch_right+0x42>
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 800201a:	f004 fbcb 	bl	80067b4 <touch_GetY>
 800201e:	4603      	mov	r3, r0
 8002020:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8002024:	d801      	bhi.n	800202a <is_touch_right+0x42>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <is_touch_right+0x44>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}

08002030 <is_touch_left>:

int is_touch_left(){
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002034:	f004 fba0 	bl	8006778 <touch_IsTouched>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <is_touch_left+0x12>
 800203e:	2300      	movs	r3, #0
 8002040:	e018      	b.n	8002074 <is_touch_left+0x44>
	return (touch_GetX() > POS_X_LEFT
 8002042:	f004 fbab 	bl	800679c <touch_GetX>
 8002046:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
			&& touch_GetY() > POS_Y_LEFT
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8002048:	2b05      	cmp	r3, #5
 800204a:	d912      	bls.n	8002072 <is_touch_left+0x42>
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
 800204c:	f004 fba6 	bl	800679c <touch_GetX>
 8002050:	4603      	mov	r3, r0
 8002052:	2b4a      	cmp	r3, #74	; 0x4a
 8002054:	d80d      	bhi.n	8002072 <is_touch_left+0x42>
			&& touch_GetY() > POS_Y_LEFT
 8002056:	f004 fbad 	bl	80067b4 <touch_GetY>
 800205a:	4603      	mov	r3, r0
 800205c:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8002060:	d307      	bcc.n	8002072 <is_touch_left+0x42>
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8002062:	f004 fba7 	bl	80067b4 <touch_GetY>
 8002066:	4603      	mov	r3, r0
 8002068:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800206c:	d801      	bhi.n	8002072 <is_touch_left+0x42>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <is_touch_left+0x44>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}

08002078 <is_touch_up>:

int is_touch_up(){
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800207c:	f004 fb7c 	bl	8006778 <touch_IsTouched>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <is_touch_up+0x12>
 8002086:	2300      	movs	r3, #0
 8002088:	e016      	b.n	80020b8 <is_touch_up+0x40>
	return (touch_GetX() > POS_X_UP
 800208a:	f004 fb87 	bl	800679c <touch_GetX>
 800208e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
			&& touch_GetY() > POS_Y_UP
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8002090:	2b55      	cmp	r3, #85	; 0x55
 8002092:	d910      	bls.n	80020b6 <is_touch_up+0x3e>
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
 8002094:	f004 fb82 	bl	800679c <touch_GetX>
 8002098:	4603      	mov	r3, r0
 800209a:	2b9a      	cmp	r3, #154	; 0x9a
 800209c:	d80b      	bhi.n	80020b6 <is_touch_up+0x3e>
			&& touch_GetY() > POS_Y_UP
 800209e:	f004 fb89 	bl	80067b4 <touch_GetY>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2bcd      	cmp	r3, #205	; 0xcd
 80020a6:	d906      	bls.n	80020b6 <is_touch_up+0x3e>
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 80020a8:	f004 fb84 	bl	80067b4 <touch_GetY>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2bfe      	cmp	r3, #254	; 0xfe
 80020b0:	d801      	bhi.n	80020b6 <is_touch_up+0x3e>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <is_touch_up+0x40>
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}

080020bc <is_touch_down>:

int is_touch_down(){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80020c0:	f004 fb5a 	bl	8006778 <touch_IsTouched>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <is_touch_down+0x12>
 80020ca:	2300      	movs	r3, #0
 80020cc:	e018      	b.n	8002100 <is_touch_down+0x44>
	return (touch_GetX() > POS_X_DOWN
 80020ce:	f004 fb65 	bl	800679c <touch_GetX>
 80020d2:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
			&& touch_GetY() > POS_Y_DOWN
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 80020d4:	2b55      	cmp	r3, #85	; 0x55
 80020d6:	d912      	bls.n	80020fe <is_touch_down+0x42>
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
 80020d8:	f004 fb60 	bl	800679c <touch_GetX>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b9a      	cmp	r3, #154	; 0x9a
 80020e0:	d80d      	bhi.n	80020fe <is_touch_down+0x42>
			&& touch_GetY() > POS_Y_DOWN
 80020e2:	f004 fb67 	bl	80067b4 <touch_GetY>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80020ec:	d307      	bcc.n	80020fe <is_touch_down+0x42>
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 80020ee:	f004 fb61 	bl	80067b4 <touch_GetY>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80020f8:	d801      	bhi.n	80020fe <is_touch_down+0x42>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <is_touch_down+0x44>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}

08002104 <is_touch_quit>:

int is_touch_quit(){
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002108:	f004 fb36 	bl	8006778 <touch_IsTouched>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <is_touch_quit+0x12>
 8002112:	2300      	movs	r3, #0
 8002114:	e017      	b.n	8002146 <is_touch_quit+0x42>
	return (touch_GetX() > POS_X_FORTH
 8002116:	f004 fb41 	bl	800679c <touch_GetX>
 800211a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 800211c:	2b41      	cmp	r3, #65	; 0x41
 800211e:	d911      	bls.n	8002144 <is_touch_quit+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8002120:	f004 fb3c 	bl	800679c <touch_GetX>
 8002124:	4603      	mov	r3, r0
 8002126:	2bb8      	cmp	r3, #184	; 0xb8
 8002128:	d80c      	bhi.n	8002144 <is_touch_quit+0x40>
			&& touch_GetY() > POS_Y_FORTH
 800212a:	f004 fb43 	bl	80067b4 <touch_GetY>
 800212e:	4603      	mov	r3, r0
 8002130:	2bfa      	cmp	r3, #250	; 0xfa
 8002132:	d907      	bls.n	8002144 <is_touch_quit+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8002134:	f004 fb3e 	bl	80067b4 <touch_GetY>
 8002138:	4603      	mov	r3, r0
 800213a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800213e:	d801      	bhi.n	8002144 <is_touch_quit+0x40>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <is_touch_quit+0x42>
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}

0800214a <is_touch_quit_end>:

int is_touch_quit_end(){
 800214a:	b580      	push	{r7, lr}
 800214c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800214e:	f004 fb13 	bl	8006778 <touch_IsTouched>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <is_touch_quit_end+0x12>
 8002158:	2300      	movs	r3, #0
 800215a:	e016      	b.n	800218a <is_touch_quit_end+0x40>
	return (touch_GetX() > POS_X_THIRD
 800215c:	f004 fb1e 	bl	800679c <touch_GetX>
 8002160:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002162:	2b41      	cmp	r3, #65	; 0x41
 8002164:	d910      	bls.n	8002188 <is_touch_quit_end+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8002166:	f004 fb19 	bl	800679c <touch_GetX>
 800216a:	4603      	mov	r3, r0
 800216c:	2bb8      	cmp	r3, #184	; 0xb8
 800216e:	d80b      	bhi.n	8002188 <is_touch_quit_end+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8002170:	f004 fb20 	bl	80067b4 <touch_GetY>
 8002174:	4603      	mov	r3, r0
 8002176:	2bc8      	cmp	r3, #200	; 0xc8
 8002178:	d906      	bls.n	8002188 <is_touch_quit_end+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 800217a:	f004 fb1b 	bl	80067b4 <touch_GetY>
 800217e:	4603      	mov	r3, r0
 8002180:	2bea      	cmp	r3, #234	; 0xea
 8002182:	d801      	bhi.n	8002188 <is_touch_quit_end+0x3e>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <is_touch_quit_end+0x40>
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}

0800218e <is_touch_resume>:

int is_touch_resume(){
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002192:	f004 faf1 	bl	8006778 <touch_IsTouched>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <is_touch_resume+0x12>
 800219c:	2300      	movs	r3, #0
 800219e:	e016      	b.n	80021ce <is_touch_resume+0x40>
	return (touch_GetX() > POS_X_SECOND
 80021a0:	f004 fafc 	bl	800679c <touch_GetX>
 80021a4:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80021a6:	2b41      	cmp	r3, #65	; 0x41
 80021a8:	d910      	bls.n	80021cc <is_touch_resume+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 80021aa:	f004 faf7 	bl	800679c <touch_GetX>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2bb8      	cmp	r3, #184	; 0xb8
 80021b2:	d80b      	bhi.n	80021cc <is_touch_resume+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 80021b4:	f004 fafe 	bl	80067b4 <touch_GetY>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b96      	cmp	r3, #150	; 0x96
 80021bc:	d906      	bls.n	80021cc <is_touch_resume+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 80021be:	f004 faf9 	bl	80067b4 <touch_GetY>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2bb8      	cmp	r3, #184	; 0xb8
 80021c6:	d801      	bhi.n	80021cc <is_touch_resume+0x3e>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <is_touch_resume+0x40>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <is_touch_pause>:

int is_touch_pause(){
 80021d2:	b598      	push	{r3, r4, r7, lr}
 80021d4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80021d6:	f004 facf 	bl	8006778 <touch_IsTouched>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <is_touch_pause+0x12>
 80021e0:	2300      	movs	r3, #0
 80021e2:	e018      	b.n	8002216 <is_touch_pause+0x44>
	return distance_of_two_point(touch_GetX(), touch_GetY(), POS_X_PAUSE, POS_Y_PAUSE) < BTN_HEIGHT / 2;
 80021e4:	f004 fada 	bl	800679c <touch_GetX>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461c      	mov	r4, r3
 80021ec:	f004 fae2 	bl	80067b4 <touch_GetY>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4619      	mov	r1, r3
 80021f4:	23e6      	movs	r3, #230	; 0xe6
 80021f6:	22c8      	movs	r2, #200	; 0xc8
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff fea5 	bl	8001f48 <distance_of_two_point>
 80021fe:	eef0 7a40 	vmov.f32	s15, s0
 8002202:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	bf4c      	ite	mi
 8002210:	2301      	movmi	r3, #1
 8002212:	2300      	movpl	r3, #0
 8002214:	b2db      	uxtb	r3, r3
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd98      	pop	{r3, r4, r7, pc}

0800221a <is_touch_newGame>:

int is_touch_newGame(){
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800221e:	f004 faab 	bl	8006778 <touch_IsTouched>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <is_touch_newGame+0x12>
 8002228:	2300      	movs	r3, #0
 800222a:	e016      	b.n	800225a <is_touch_newGame+0x40>
	return (touch_GetX() > POS_X_SECOND
 800222c:	f004 fab6 	bl	800679c <touch_GetX>
 8002230:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8002232:	2b41      	cmp	r3, #65	; 0x41
 8002234:	d910      	bls.n	8002258 <is_touch_newGame+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8002236:	f004 fab1 	bl	800679c <touch_GetX>
 800223a:	4603      	mov	r3, r0
 800223c:	2bb8      	cmp	r3, #184	; 0xb8
 800223e:	d80b      	bhi.n	8002258 <is_touch_newGame+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8002240:	f004 fab8 	bl	80067b4 <touch_GetY>
 8002244:	4603      	mov	r3, r0
 8002246:	2b96      	cmp	r3, #150	; 0x96
 8002248:	d906      	bls.n	8002258 <is_touch_newGame+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 800224a:	f004 fab3 	bl	80067b4 <touch_GetY>
 800224e:	4603      	mov	r3, r0
 8002250:	2bb8      	cmp	r3, #184	; 0xb8
 8002252:	d801      	bhi.n	8002258 <is_touch_newGame+0x3e>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <is_touch_newGame+0x40>
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}

0800225e <is_touch_continue>:

int is_touch_continue(){
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002262:	f004 fa89 	bl	8006778 <touch_IsTouched>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <is_touch_continue+0x12>
 800226c:	2300      	movs	r3, #0
 800226e:	e016      	b.n	800229e <is_touch_continue+0x40>
	return (touch_GetX() > POS_X_THIRD
 8002270:	f004 fa94 	bl	800679c <touch_GetX>
 8002274:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002276:	2b41      	cmp	r3, #65	; 0x41
 8002278:	d910      	bls.n	800229c <is_touch_continue+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 800227a:	f004 fa8f 	bl	800679c <touch_GetX>
 800227e:	4603      	mov	r3, r0
 8002280:	2bb8      	cmp	r3, #184	; 0xb8
 8002282:	d80b      	bhi.n	800229c <is_touch_continue+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8002284:	f004 fa96 	bl	80067b4 <touch_GetY>
 8002288:	4603      	mov	r3, r0
 800228a:	2bc8      	cmp	r3, #200	; 0xc8
 800228c:	d906      	bls.n	800229c <is_touch_continue+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 800228e:	f004 fa91 	bl	80067b4 <touch_GetY>
 8002292:	4603      	mov	r3, r0
 8002294:	2bea      	cmp	r3, #234	; 0xea
 8002296:	d801      	bhi.n	800229c <is_touch_continue+0x3e>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <is_touch_continue+0x40>
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <is_touch_highScore>:

int is_touch_highScore(){
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80022a6:	f004 fa67 	bl	8006778 <touch_IsTouched>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <is_touch_highScore+0x12>
 80022b0:	2300      	movs	r3, #0
 80022b2:	e017      	b.n	80022e4 <is_touch_highScore+0x42>
	return (touch_GetX() > POS_X_FORTH
 80022b4:	f004 fa72 	bl	800679c <touch_GetX>
 80022b8:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 80022ba:	2b41      	cmp	r3, #65	; 0x41
 80022bc:	d911      	bls.n	80022e2 <is_touch_highScore+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 80022be:	f004 fa6d 	bl	800679c <touch_GetX>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2bb8      	cmp	r3, #184	; 0xb8
 80022c6:	d80c      	bhi.n	80022e2 <is_touch_highScore+0x40>
			&& touch_GetY() > POS_Y_FORTH
 80022c8:	f004 fa74 	bl	80067b4 <touch_GetY>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2bfa      	cmp	r3, #250	; 0xfa
 80022d0:	d907      	bls.n	80022e2 <is_touch_highScore+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 80022d2:	f004 fa6f 	bl	80067b4 <touch_GetY>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80022dc:	d801      	bhi.n	80022e2 <is_touch_highScore+0x40>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <is_touch_highScore+0x42>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <is_touch_classic>:

int is_touch_classic(){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80022ec:	f004 fa44 	bl	8006778 <touch_IsTouched>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <is_touch_classic+0x12>
 80022f6:	2300      	movs	r3, #0
 80022f8:	e016      	b.n	8002328 <is_touch_classic+0x40>
	return (touch_GetX() > POS_X_FIRST
 80022fa:	f004 fa4f 	bl	800679c <touch_GetX>
 80022fe:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8002300:	2b41      	cmp	r3, #65	; 0x41
 8002302:	d910      	bls.n	8002326 <is_touch_classic+0x3e>
			&& touch_GetX() < POS_X_FIRST + WIDTH
 8002304:	f004 fa4a 	bl	800679c <touch_GetX>
 8002308:	4603      	mov	r3, r0
 800230a:	2bb8      	cmp	r3, #184	; 0xb8
 800230c:	d80b      	bhi.n	8002326 <is_touch_classic+0x3e>
			&& touch_GetY() > POS_Y_FIRST
 800230e:	f004 fa51 	bl	80067b4 <touch_GetY>
 8002312:	4603      	mov	r3, r0
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d906      	bls.n	8002326 <is_touch_classic+0x3e>
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8002318:	f004 fa4c 	bl	80067b4 <touch_GetY>
 800231c:	4603      	mov	r3, r0
 800231e:	2b86      	cmp	r3, #134	; 0x86
 8002320:	d801      	bhi.n	8002326 <is_touch_classic+0x3e>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <is_touch_classic+0x40>
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}

0800232c <is_touch_speed>:

int is_touch_speed(){
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002330:	f004 fa22 	bl	8006778 <touch_IsTouched>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <is_touch_speed+0x12>
 800233a:	2300      	movs	r3, #0
 800233c:	e016      	b.n	800236c <is_touch_speed+0x40>
	return (touch_GetX() > POS_X_SECOND
 800233e:	f004 fa2d 	bl	800679c <touch_GetX>
 8002342:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8002344:	2b41      	cmp	r3, #65	; 0x41
 8002346:	d910      	bls.n	800236a <is_touch_speed+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8002348:	f004 fa28 	bl	800679c <touch_GetX>
 800234c:	4603      	mov	r3, r0
 800234e:	2bb8      	cmp	r3, #184	; 0xb8
 8002350:	d80b      	bhi.n	800236a <is_touch_speed+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8002352:	f004 fa2f 	bl	80067b4 <touch_GetY>
 8002356:	4603      	mov	r3, r0
 8002358:	2b96      	cmp	r3, #150	; 0x96
 800235a:	d906      	bls.n	800236a <is_touch_speed+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 800235c:	f004 fa2a 	bl	80067b4 <touch_GetY>
 8002360:	4603      	mov	r3, r0
 8002362:	2bb8      	cmp	r3, #184	; 0xb8
 8002364:	d801      	bhi.n	800236a <is_touch_speed+0x3e>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <is_touch_speed+0x40>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}

08002370 <is_touch_time>:

int is_touch_time(){
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8002374:	f004 fa00 	bl	8006778 <touch_IsTouched>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <is_touch_time+0x12>
 800237e:	2300      	movs	r3, #0
 8002380:	e016      	b.n	80023b0 <is_touch_time+0x40>
	return (touch_GetX() > POS_X_THIRD
 8002382:	f004 fa0b 	bl	800679c <touch_GetX>
 8002386:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002388:	2b41      	cmp	r3, #65	; 0x41
 800238a:	d910      	bls.n	80023ae <is_touch_time+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 800238c:	f004 fa06 	bl	800679c <touch_GetX>
 8002390:	4603      	mov	r3, r0
 8002392:	2bb8      	cmp	r3, #184	; 0xb8
 8002394:	d80b      	bhi.n	80023ae <is_touch_time+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8002396:	f004 fa0d 	bl	80067b4 <touch_GetY>
 800239a:	4603      	mov	r3, r0
 800239c:	2bc8      	cmp	r3, #200	; 0xc8
 800239e:	d906      	bls.n	80023ae <is_touch_time+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 80023a0:	f004 fa08 	bl	80067b4 <touch_GetY>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2bea      	cmp	r3, #234	; 0xea
 80023a8:	d801      	bhi.n	80023ae <is_touch_time+0x3e>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <is_touch_time+0x40>
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <is_touch_char>:

int is_touch_char(){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80023b8:	f004 f9de 	bl	8006778 <touch_IsTouched>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <is_touch_char+0x12>
 80023c2:	2300      	movs	r3, #0
 80023c4:	e017      	b.n	80023f6 <is_touch_char+0x42>
	return (touch_GetX() > POS_X_CHAR
 80023c6:	f004 f9e9 	bl	800679c <touch_GetX>
 80023ca:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_CHAR + CHAR_COL*CHAR_WIDTH
			&& touch_GetY() > POS_Y_CHAR
			&& touch_GetY() < POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT);
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d911      	bls.n	80023f4 <is_touch_char+0x40>
			&& touch_GetX() < POS_X_CHAR + CHAR_COL*CHAR_WIDTH
 80023d0:	f004 f9e4 	bl	800679c <touch_GetX>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2be9      	cmp	r3, #233	; 0xe9
 80023d8:	d80c      	bhi.n	80023f4 <is_touch_char+0x40>
			&& touch_GetY() > POS_Y_CHAR
 80023da:	f004 f9eb 	bl	80067b4 <touch_GetY>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b7c      	cmp	r3, #124	; 0x7c
 80023e2:	d907      	bls.n	80023f4 <is_touch_char+0x40>
			&& touch_GetY() < POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT);
 80023e4:	f004 f9e6 	bl	80067b4 <touch_GetY>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80023ee:	d201      	bcs.n	80023f4 <is_touch_char+0x40>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <is_touch_char+0x42>
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	4b89      	ldr	r3, [pc, #548]	; (800263c <MX_GPIO_Init+0x240>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a88      	ldr	r2, [pc, #544]	; (800263c <MX_GPIO_Init+0x240>)
 800241c:	f043 0310 	orr.w	r3, r3, #16
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b86      	ldr	r3, [pc, #536]	; (800263c <MX_GPIO_Init+0x240>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	4b82      	ldr	r3, [pc, #520]	; (800263c <MX_GPIO_Init+0x240>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a81      	ldr	r2, [pc, #516]	; (800263c <MX_GPIO_Init+0x240>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b7f      	ldr	r3, [pc, #508]	; (800263c <MX_GPIO_Init+0x240>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	4b7b      	ldr	r3, [pc, #492]	; (800263c <MX_GPIO_Init+0x240>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a7a      	ldr	r2, [pc, #488]	; (800263c <MX_GPIO_Init+0x240>)
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b78      	ldr	r3, [pc, #480]	; (800263c <MX_GPIO_Init+0x240>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	4b74      	ldr	r3, [pc, #464]	; (800263c <MX_GPIO_Init+0x240>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a73      	ldr	r2, [pc, #460]	; (800263c <MX_GPIO_Init+0x240>)
 8002470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b71      	ldr	r3, [pc, #452]	; (800263c <MX_GPIO_Init+0x240>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b6d      	ldr	r3, [pc, #436]	; (800263c <MX_GPIO_Init+0x240>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a6c      	ldr	r2, [pc, #432]	; (800263c <MX_GPIO_Init+0x240>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b6a      	ldr	r3, [pc, #424]	; (800263c <MX_GPIO_Init+0x240>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b66      	ldr	r3, [pc, #408]	; (800263c <MX_GPIO_Init+0x240>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a65      	ldr	r2, [pc, #404]	; (800263c <MX_GPIO_Init+0x240>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <MX_GPIO_Init+0x240>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b5f      	ldr	r3, [pc, #380]	; (800263c <MX_GPIO_Init+0x240>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a5e      	ldr	r2, [pc, #376]	; (800263c <MX_GPIO_Init+0x240>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b5c      	ldr	r3, [pc, #368]	; (800263c <MX_GPIO_Init+0x240>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	4b58      	ldr	r3, [pc, #352]	; (800263c <MX_GPIO_Init+0x240>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a57      	ldr	r2, [pc, #348]	; (800263c <MX_GPIO_Init+0x240>)
 80024e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b55      	ldr	r3, [pc, #340]	; (800263c <MX_GPIO_Init+0x240>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2110      	movs	r1, #16
 80024f6:	4852      	ldr	r0, [pc, #328]	; (8002640 <MX_GPIO_Init+0x244>)
 80024f8:	f005 fe62 	bl	80081c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8002502:	4850      	ldr	r0, [pc, #320]	; (8002644 <MX_GPIO_Init+0x248>)
 8002504:	f005 fe5c 	bl	80081c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8002508:	2200      	movs	r2, #0
 800250a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800250e:	484e      	ldr	r0, [pc, #312]	; (8002648 <MX_GPIO_Init+0x24c>)
 8002510:	f005 fe56 	bl	80081c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800251a:	484c      	ldr	r0, [pc, #304]	; (800264c <MX_GPIO_Init+0x250>)
 800251c:	f005 fe50 	bl	80081c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002526:	484a      	ldr	r0, [pc, #296]	; (8002650 <MX_GPIO_Init+0x254>)
 8002528:	f005 fe4a 	bl	80081c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800252c:	2200      	movs	r2, #0
 800252e:	2108      	movs	r1, #8
 8002530:	4848      	ldr	r0, [pc, #288]	; (8002654 <MX_GPIO_Init+0x258>)
 8002532:	f005 fe45 	bl	80081c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8002536:	2310      	movs	r3, #16
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254a:	4619      	mov	r1, r3
 800254c:	483c      	ldr	r0, [pc, #240]	; (8002640 <MX_GPIO_Init+0x244>)
 800254e:	f005 fc83 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8002552:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	2301      	movs	r3, #1
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	4619      	mov	r1, r3
 800256a:	4836      	ldr	r0, [pc, #216]	; (8002644 <MX_GPIO_Init+0x248>)
 800256c:	f005 fc74 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002576:	2300      	movs	r3, #0
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002582:	4619      	mov	r1, r3
 8002584:	4830      	ldr	r0, [pc, #192]	; (8002648 <MX_GPIO_Init+0x24c>)
 8002586:	f005 fc67 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 800258a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002590:	2301      	movs	r3, #1
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 800259c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a0:	4619      	mov	r1, r3
 80025a2:	4829      	ldr	r0, [pc, #164]	; (8002648 <MX_GPIO_Init+0x24c>)
 80025a4:	f005 fc58 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80025a8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025be:	4619      	mov	r1, r3
 80025c0:	4822      	ldr	r0, [pc, #136]	; (800264c <MX_GPIO_Init+0x250>)
 80025c2:	f005 fc49 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 80025c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	4619      	mov	r1, r3
 80025da:	481a      	ldr	r0, [pc, #104]	; (8002644 <MX_GPIO_Init+0x248>)
 80025dc:	f005 fc3c 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80025e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80025f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f6:	4619      	mov	r1, r3
 80025f8:	4815      	ldr	r0, [pc, #84]	; (8002650 <MX_GPIO_Init+0x254>)
 80025fa:	f005 fc2d 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80025fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002610:	4619      	mov	r1, r3
 8002612:	480c      	ldr	r0, [pc, #48]	; (8002644 <MX_GPIO_Init+0x248>)
 8002614:	f005 fc20 	bl	8007e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8002618:	2308      	movs	r3, #8
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	2301      	movs	r3, #1
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262c:	4619      	mov	r1, r3
 800262e:	4809      	ldr	r0, [pc, #36]	; (8002654 <MX_GPIO_Init+0x258>)
 8002630:	f005 fc12 	bl	8007e58 <HAL_GPIO_Init>

}
 8002634:	bf00      	nop
 8002636:	3738      	adds	r7, #56	; 0x38
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	40021000 	.word	0x40021000
 8002644:	40020800 	.word	0x40020800
 8002648:	40021400 	.word	0x40021400
 800264c:	40021800 	.word	0x40021800
 8002650:	40020000 	.word	0x40020000
 8002654:	40020c00 	.word	0x40020c00

08002658 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_I2C1_Init+0x50>)
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <MX_I2C1_Init+0x54>)
 8002660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <MX_I2C1_Init+0x50>)
 8002664:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <MX_I2C1_Init+0x58>)
 8002666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_I2C1_Init+0x50>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MX_I2C1_Init+0x50>)
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_I2C1_Init+0x50>)
 8002676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800267a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <MX_I2C1_Init+0x50>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MX_I2C1_Init+0x50>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <MX_I2C1_Init+0x50>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <MX_I2C1_Init+0x50>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <MX_I2C1_Init+0x50>)
 8002696:	f005 fdad 	bl	80081f4 <HAL_I2C_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026a0:	f002 f966 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000314 	.word	0x20000314
 80026ac:	40005400 	.word	0x40005400
 80026b0:	000186a0 	.word	0x000186a0

080026b4 <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <home_lcd+0xa0>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026c2:	22f0      	movs	r2, #240	; 0xf0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f001 fc80 	bl	8003fcc <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 80026cc:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	23b9      	movs	r3, #185	; 0xb9
 80026d4:	22b9      	movs	r2, #185	; 0xb9
 80026d6:	2196      	movs	r1, #150	; 0x96
 80026d8:	2041      	movs	r0, #65	; 0x41
 80026da:	f001 f96d 	bl	80039b8 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 80026de:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	23eb      	movs	r3, #235	; 0xeb
 80026e6:	22b9      	movs	r2, #185	; 0xb9
 80026e8:	21c8      	movs	r1, #200	; 0xc8
 80026ea:	2041      	movs	r0, #65	; 0x41
 80026ec:	f001 f964 	bl	80039b8 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 80026f0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f240 131d 	movw	r3, #285	; 0x11d
 80026fa:	22b9      	movs	r2, #185	; 0xb9
 80026fc:	21fa      	movs	r1, #250	; 0xfa
 80026fe:	2041      	movs	r0, #65	; 0x41
 8002700:	f001 f95a 	bl	80039b8 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 8002704:	2301      	movs	r3, #1
 8002706:	9302      	str	r3, [sp, #8]
 8002708:	2318      	movs	r3, #24
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	2300      	movs	r3, #0
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2300      	movs	r3, #0
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <home_lcd+0xa4>)
 8002714:	219b      	movs	r1, #155	; 0x9b
 8002716:	2054      	movs	r0, #84	; 0x54
 8002718:	f001 ff29 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 800271c:	2301      	movs	r3, #1
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	2318      	movs	r3, #24
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	2300      	movs	r3, #0
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2300      	movs	r3, #0
 800272a:	4a0c      	ldr	r2, [pc, #48]	; (800275c <home_lcd+0xa8>)
 800272c:	21cd      	movs	r1, #205	; 0xcd
 800272e:	204d      	movs	r0, #77	; 0x4d
 8002730:	f001 ff1d 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 8002734:	2301      	movs	r3, #1
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	2318      	movs	r3, #24
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	2300      	movs	r3, #0
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2300      	movs	r3, #0
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <home_lcd+0xac>)
 8002744:	21ff      	movs	r1, #255	; 0xff
 8002746:	2048      	movs	r0, #72	; 0x48
 8002748:	f001 ff11 	bl	800456e <lcd_ShowStr>
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	08011da8 	.word	0x08011da8
 8002758:	0800e830 	.word	0x0800e830
 800275c:	0800e838 	.word	0x0800e838
 8002760:	0800e844 	.word	0x0800e844

08002764 <mode_game_lcd>:

void mode_game_lcd(){
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 800276a:	4b34      	ldr	r3, [pc, #208]	; (800283c <mode_game_lcd+0xd8>)
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002772:	22f0      	movs	r2, #240	; 0xf0
 8002774:	2100      	movs	r1, #0
 8002776:	2000      	movs	r0, #0
 8002778:	f001 fc28 	bl	8003fcc <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 78, gImage_mode);
 800277c:	4b30      	ldr	r3, [pc, #192]	; (8002840 <mode_game_lcd+0xdc>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	234e      	movs	r3, #78	; 0x4e
 8002782:	22f0      	movs	r2, #240	; 0xf0
 8002784:	2100      	movs	r1, #0
 8002786:	2000      	movs	r0, #0
 8002788:	f001 fc20 	bl	8003fcc <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 800278c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2387      	movs	r3, #135	; 0x87
 8002794:	22b9      	movs	r2, #185	; 0xb9
 8002796:	2164      	movs	r1, #100	; 0x64
 8002798:	2041      	movs	r0, #65	; 0x41
 800279a:	f001 f90d 	bl	80039b8 <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 800279e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	23b9      	movs	r3, #185	; 0xb9
 80027a6:	22b9      	movs	r2, #185	; 0xb9
 80027a8:	2196      	movs	r1, #150	; 0x96
 80027aa:	2041      	movs	r0, #65	; 0x41
 80027ac:	f001 f904 	bl	80039b8 <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 80027b0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	23eb      	movs	r3, #235	; 0xeb
 80027b8:	22b9      	movs	r2, #185	; 0xb9
 80027ba:	21c8      	movs	r1, #200	; 0xc8
 80027bc:	2041      	movs	r0, #65	; 0x41
 80027be:	f001 f8fb 	bl	80039b8 <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 80027c2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f240 131d 	movw	r3, #285	; 0x11d
 80027cc:	22b9      	movs	r2, #185	; 0xb9
 80027ce:	21fa      	movs	r1, #250	; 0xfa
 80027d0:	2041      	movs	r0, #65	; 0x41
 80027d2:	f001 f8f1 	bl	80039b8 <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 80027d6:	2301      	movs	r3, #1
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	2318      	movs	r3, #24
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	2300      	movs	r3, #0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <mode_game_lcd+0xe0>)
 80027e6:	2169      	movs	r1, #105	; 0x69
 80027e8:	2054      	movs	r0, #84	; 0x54
 80027ea:	f001 fec0 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 80027ee:	2301      	movs	r3, #1
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	2318      	movs	r3, #24
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	2300      	movs	r3, #0
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2300      	movs	r3, #0
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <mode_game_lcd+0xe4>)
 80027fe:	219b      	movs	r1, #155	; 0x9b
 8002800:	2060      	movs	r0, #96	; 0x60
 8002802:	f001 feb4 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 8002806:	2301      	movs	r3, #1
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	2318      	movs	r3, #24
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	2300      	movs	r3, #0
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2300      	movs	r3, #0
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <mode_game_lcd+0xe8>)
 8002816:	21cd      	movs	r1, #205	; 0xcd
 8002818:	2060      	movs	r0, #96	; 0x60
 800281a:	f001 fea8 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 800281e:	2301      	movs	r3, #1
 8002820:	9302      	str	r3, [sp, #8]
 8002822:	2318      	movs	r3, #24
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	2300      	movs	r3, #0
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2300      	movs	r3, #0
 800282c:	4a08      	ldr	r2, [pc, #32]	; (8002850 <mode_game_lcd+0xec>)
 800282e:	21ff      	movs	r1, #255	; 0xff
 8002830:	2064      	movs	r0, #100	; 0x64
 8002832:	f001 fe9c 	bl	800456e <lcd_ShowStr>
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	080375a8 	.word	0x080375a8
 8002840:	0805cda8 	.word	0x0805cda8
 8002844:	0800e850 	.word	0x0800e850
 8002848:	0800e858 	.word	0x0800e858
 800284c:	0800e860 	.word	0x0800e860
 8002850:	0800e868 	.word	0x0800e868

08002854 <highscore_lcd>:

void highscore_lcd(){
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 800285a:	4b61      	ldr	r3, [pc, #388]	; (80029e0 <highscore_lcd+0x18c>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002862:	22f0      	movs	r2, #240	; 0xf0
 8002864:	2100      	movs	r1, #0
 8002866:	2000      	movs	r0, #0
 8002868:	f001 fbb0 	bl	8003fcc <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 81, gImage_highscore);
 800286c:	4b5d      	ldr	r3, [pc, #372]	; (80029e4 <highscore_lcd+0x190>)
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2351      	movs	r3, #81	; 0x51
 8002872:	22f0      	movs	r2, #240	; 0xf0
 8002874:	2100      	movs	r1, #0
 8002876:	2000      	movs	r0, #0
 8002878:	f001 fba8 	bl	8003fcc <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 800287c:	2301      	movs	r3, #1
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	2310      	movs	r3, #16
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	2300      	movs	r3, #0
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2300      	movs	r3, #0
 800288a:	4a57      	ldr	r2, [pc, #348]	; (80029e8 <highscore_lcd+0x194>)
 800288c:	2150      	movs	r1, #80	; 0x50
 800288e:	200a      	movs	r0, #10
 8002890:	f001 fe6d 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 8002894:	2301      	movs	r3, #1
 8002896:	9302      	str	r3, [sp, #8]
 8002898:	2310      	movs	r3, #16
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	2300      	movs	r3, #0
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2300      	movs	r3, #0
 80028a2:	4a52      	ldr	r2, [pc, #328]	; (80029ec <highscore_lcd+0x198>)
 80028a4:	2150      	movs	r1, #80	; 0x50
 80028a6:	203c      	movs	r0, #60	; 0x3c
 80028a8:	f001 fe61 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 80028ac:	2301      	movs	r3, #1
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2310      	movs	r3, #16
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	2300      	movs	r3, #0
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2300      	movs	r3, #0
 80028ba:	4a4d      	ldr	r2, [pc, #308]	; (80029f0 <highscore_lcd+0x19c>)
 80028bc:	2150      	movs	r1, #80	; 0x50
 80028be:	20a0      	movs	r0, #160	; 0xa0
 80028c0:	f001 fe55 	bl	800456e <lcd_ShowStr>
	char c[10] = "";
 80028c4:	2300      	movs	r3, #0
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	f107 0308 	add.w	r3, r7, #8
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e051      	b.n	800297c <highscore_lcd+0x128>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	3305      	adds	r3, #5
 80028dc:	b29b      	uxth	r3, r3
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	b29c      	uxth	r4, r3
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	1d39      	adds	r1, r7, #4
 80028e6:	220a      	movs	r2, #10
 80028e8:	4618      	mov	r0, r3
 80028ea:	f009 ff33 	bl	800c754 <itoa>
 80028ee:	4602      	mov	r2, r0
 80028f0:	2301      	movs	r3, #1
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	2310      	movs	r3, #16
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	4621      	mov	r1, r4
 8002900:	200a      	movs	r0, #10
 8002902:	f001 fe34 	bl	800456e <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	3305      	adds	r3, #5
 800290a:	b29b      	uxth	r3, r3
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	b299      	uxth	r1, r3
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	1e5a      	subs	r2, r3, #1
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <highscore_lcd+0x1a0>)
 800291e:	441a      	add	r2, r3
 8002920:	2301      	movs	r3, #1
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	2310      	movs	r3, #16
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	2300      	movs	r3, #0
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2300      	movs	r3, #0
 800292e:	203c      	movs	r0, #60	; 0x3c
 8002930:	f001 fe1d 	bl	800456e <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	3305      	adds	r3, #5
 8002938:	b29b      	uxth	r3, r3
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	b29c      	uxth	r4, r3
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	492c      	ldr	r1, [pc, #176]	; (80029f4 <highscore_lcd+0x1a0>)
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	440b      	add	r3, r1
 800294e:	330c      	adds	r3, #12
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	220a      	movs	r2, #10
 8002958:	4619      	mov	r1, r3
 800295a:	f009 fefb 	bl	800c754 <itoa>
 800295e:	4602      	mov	r2, r0
 8002960:	2301      	movs	r3, #1
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	2310      	movs	r3, #16
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	2300      	movs	r3, #0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2300      	movs	r3, #0
 800296e:	4621      	mov	r1, r4
 8002970:	20a0      	movs	r0, #160	; 0xa0
 8002972:	f001 fdfc 	bl	800456e <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	3301      	adds	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <highscore_lcd+0x1a4>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	429a      	cmp	r2, r3
 8002984:	d9a8      	bls.n	80028d8 <highscore_lcd+0x84>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002986:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	f240 131d 	movw	r3, #285	; 0x11d
 8002990:	22b9      	movs	r2, #185	; 0xb9
 8002992:	21fa      	movs	r1, #250	; 0xfa
 8002994:	2041      	movs	r0, #65	; 0x41
 8002996:	f001 f80f 	bl	80039b8 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 800299a:	2301      	movs	r3, #1
 800299c:	9302      	str	r3, [sp, #8]
 800299e:	2318      	movs	r3, #24
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2300      	movs	r3, #0
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <highscore_lcd+0x1a8>)
 80029aa:	21ff      	movs	r1, #255	; 0xff
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	f001 fdde 	bl	800456e <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80029b2:	2300      	movs	r3, #0
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	f240 131d 	movw	r3, #285	; 0x11d
 80029ba:	22b9      	movs	r2, #185	; 0xb9
 80029bc:	21fa      	movs	r1, #250	; 0xfa
 80029be:	2041      	movs	r0, #65	; 0x41
 80029c0:	f001 f8cb 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80029c4:	2300      	movs	r3, #0
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80029cc:	22b8      	movs	r2, #184	; 0xb8
 80029ce:	21fb      	movs	r1, #251	; 0xfb
 80029d0:	2042      	movs	r0, #66	; 0x42
 80029d2:	f001 f8c2 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	080375a8 	.word	0x080375a8
 80029e4:	08065fe8 	.word	0x08065fe8
 80029e8:	0800e870 	.word	0x0800e870
 80029ec:	0800e878 	.word	0x0800e878
 80029f0:	0800e880 	.word	0x0800e880
 80029f4:	20000288 	.word	0x20000288
 80029f8:	20000140 	.word	0x20000140
 80029fc:	0800e868 	.word	0x0800e868

08002a00 <game_lcd>:

void game_lcd(){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 8002a06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a0a:	f000 ffa3 	bl	8003954 <lcd_Clear>
	lcd_Fill(0, 0, 239, POS_Y_MIN - 1, LGRAYBLUE);
 8002a0e:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2311      	movs	r3, #17
 8002a16:	22ef      	movs	r2, #239	; 0xef
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f000 ffcc 	bl	80039b8 <lcd_Fill>
	lcd_Fill(0, POS_Y_MAX + 1, 239, 319, LGRAYBLUE);
 8002a20:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f240 133f 	movw	r3, #319	; 0x13f
 8002a2a:	22ef      	movs	r2, #239	; 0xef
 8002a2c:	21c8      	movs	r1, #200	; 0xc8
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f000 ffc2 	bl	80039b8 <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 8002a34:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	f240 133b 	movw	r3, #315	; 0x13b
 8002a3e:	224b      	movs	r2, #75	; 0x4b
 8002a40:	f240 1109 	movw	r1, #265	; 0x109
 8002a44:	2005      	movs	r0, #5
 8002a46:	f000 ffb7 	bl	80039b8 <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 8002a4a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f240 133b 	movw	r3, #315	; 0x13b
 8002a54:	22eb      	movs	r2, #235	; 0xeb
 8002a56:	f240 1109 	movw	r1, #265	; 0x109
 8002a5a:	20a5      	movs	r0, #165	; 0xa5
 8002a5c:	f000 ffac 	bl	80039b8 <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 8002a60:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	23ff      	movs	r3, #255	; 0xff
 8002a68:	229b      	movs	r2, #155	; 0x9b
 8002a6a:	21cd      	movs	r1, #205	; 0xcd
 8002a6c:	2055      	movs	r0, #85	; 0x55
 8002a6e:	f000 ffa3 	bl	80039b8 <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 8002a72:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	f240 133b 	movw	r3, #315	; 0x13b
 8002a7c:	229b      	movs	r2, #155	; 0x9b
 8002a7e:	f240 1109 	movw	r1, #265	; 0x109
 8002a82:	2055      	movs	r0, #85	; 0x55
 8002a84:	f000 ff98 	bl	80039b8 <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 8002a88:	2301      	movs	r3, #1
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2319      	movs	r3, #25
 8002a8e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a92:	21e6      	movs	r1, #230	; 0xe6
 8002a94:	20c8      	movs	r0, #200	; 0xc8
 8002a96:	f001 fcfe 	bl	8004496 <lcd_DrawCircle>
	lcd_ShowStr(POS_X_TEMP, POS_Y_TEMP, "TEMP:", BLACK, BLACK, 12, 1);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <game_lcd+0x148>)
 8002aaa:	2103      	movs	r1, #3
 8002aac:	200a      	movs	r0, #10
 8002aae:	f001 fd5e 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_TEMP + 65, POS_Y_TEMP, "oC", BLACK, BLACK, 12, 1);
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <game_lcd+0x14c>)
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	204b      	movs	r0, #75	; 0x4b
 8002ac6:	f001 fd52 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM, POS_Y_TEMP, "HUM:", BLACK, BLACK, 12, 1);
 8002aca:	2301      	movs	r3, #1
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	230c      	movs	r3, #12
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <game_lcd+0x150>)
 8002ada:	2103      	movs	r1, #3
 8002adc:	206e      	movs	r0, #110	; 0x6e
 8002ade:	f001 fd46 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM + 40, POS_Y_TEMP, "%", BLACK, BLACK, 12, 1);
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	9302      	str	r3, [sp, #8]
 8002ae6:	230c      	movs	r3, #12
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2300      	movs	r3, #0
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <game_lcd+0x154>)
 8002af2:	2103      	movs	r1, #3
 8002af4:	2096      	movs	r0, #150	; 0x96
 8002af6:	f001 fd3a 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_LIGHT, POS_Y_TEMP, "LIGHT:", BLACK, BLACK, 12, 1);
 8002afa:	2301      	movs	r3, #1
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	230c      	movs	r3, #12
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	2300      	movs	r3, #0
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2300      	movs	r3, #0
 8002b08:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <game_lcd+0x158>)
 8002b0a:	2103      	movs	r1, #3
 8002b0c:	20aa      	movs	r0, #170	; 0xaa
 8002b0e:	f001 fd2e 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 8002b12:	2301      	movs	r3, #1
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	2310      	movs	r3, #16
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <game_lcd+0x15c>)
 8002b22:	21de      	movs	r1, #222	; 0xde
 8002b24:	20b6      	movs	r0, #182	; 0xb6
 8002b26:	f001 fd22 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	9302      	str	r3, [sp, #8]
 8002b2e:	2310      	movs	r3, #16
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	2300      	movs	r3, #0
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <game_lcd+0x160>)
 8002b3a:	21cd      	movs	r1, #205	; 0xcd
 8002b3c:	2005      	movs	r0, #5
 8002b3e:	f001 fd16 	bl	800456e <lcd_ShowStr>
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	0800e888 	.word	0x0800e888
 8002b4c:	0800e890 	.word	0x0800e890
 8002b50:	0800e894 	.word	0x0800e894
 8002b54:	0800e89c 	.word	0x0800e89c
 8002b58:	0800e8a0 	.word	0x0800e8a0
 8002b5c:	0800e8a8 	.word	0x0800e8a8
 8002b60:	0800e8b0 	.word	0x0800e8b0

08002b64 <environment_lcd>:

void environment_lcd(){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af04      	add	r7, sp, #16
	lcd_ShowFloatNum(POS_X_TEMP + 30, POS_Y_TEMP, current_temp, 4, BLACK, LGRAYBLUE, 12);
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <environment_lcd+0x64>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	230c      	movs	r3, #12
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b82:	2103      	movs	r1, #3
 8002b84:	2028      	movs	r0, #40	; 0x28
 8002b86:	f001 f999 	bl	8003ebc <lcd_ShowFloatNum>
	lcd_ShowIntNum(POS_X_HUM + 25, POS_Y_TEMP, current_hum, 2, BLACK, LGRAYBLUE, 12);
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <environment_lcd+0x68>)
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	230c      	movs	r3, #12
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	2087      	movs	r0, #135	; 0x87
 8002ba2:	f001 f90d 	bl	8003dc0 <lcd_ShowIntNum>
	lcd_ShowIntNum(POS_X_LIGHT + 37, POS_Y_TEMP, current_light, 4, BLACK, LGRAYBLUE, 12);
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <environment_lcd+0x6c>)
 8002ba8:	881a      	ldrh	r2, [r3, #0]
 8002baa:	230c      	movs	r3, #12
 8002bac:	9302      	str	r3, [sp, #8]
 8002bae:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2304      	movs	r3, #4
 8002bba:	2103      	movs	r1, #3
 8002bbc:	20cf      	movs	r0, #207	; 0xcf
 8002bbe:	f001 f8ff 	bl	8003dc0 <lcd_ShowIntNum>
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	2000000a 	.word	0x2000000a

08002bd4 <score_lcd>:

void score_lcd(){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <score_lcd+0x2c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	2310      	movs	r3, #16
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2305      	movs	r3, #5
 8002bf0:	21dd      	movs	r1, #221	; 0xdd
 8002bf2:	2005      	movs	r0, #5
 8002bf4:	f001 f8e4 	bl	8003dc0 <lcd_ShowIntNum>
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000000 	.word	0x20000000

08002c04 <pause_lcd>:

void pause_lcd(){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_backg);
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <pause_lcd+0x84>)
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c12:	22f0      	movs	r2, #240	; 0xf0
 8002c14:	2100      	movs	r1, #0
 8002c16:	2000      	movs	r0, #0
 8002c18:	f001 f9d8 	bl	8003fcc <lcd_ShowPicture>
	lcd_ShowPicture(0, 0, 240, 84, gImage_pause);
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <pause_lcd+0x88>)
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2354      	movs	r3, #84	; 0x54
 8002c22:	22f0      	movs	r2, #240	; 0xf0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2000      	movs	r0, #0
 8002c28:	f001 f9d0 	bl	8003fcc <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002c2c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	23b9      	movs	r3, #185	; 0xb9
 8002c34:	22b9      	movs	r2, #185	; 0xb9
 8002c36:	2196      	movs	r1, #150	; 0x96
 8002c38:	2041      	movs	r0, #65	; 0x41
 8002c3a:	f000 febd 	bl	80039b8 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002c3e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	23eb      	movs	r3, #235	; 0xeb
 8002c46:	22b9      	movs	r2, #185	; 0xb9
 8002c48:	21c8      	movs	r1, #200	; 0xc8
 8002c4a:	2041      	movs	r0, #65	; 0x41
 8002c4c:	f000 feb4 	bl	80039b8 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 8002c50:	2301      	movs	r3, #1
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	2318      	movs	r3, #24
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <pause_lcd+0x8c>)
 8002c60:	219b      	movs	r1, #155	; 0x9b
 8002c62:	205a      	movs	r0, #90	; 0x5a
 8002c64:	f001 fc83 	bl	800456e <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002c68:	2301      	movs	r3, #1
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	2318      	movs	r3, #24
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	2300      	movs	r3, #0
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <pause_lcd+0x90>)
 8002c78:	21cd      	movs	r1, #205	; 0xcd
 8002c7a:	2064      	movs	r0, #100	; 0x64
 8002c7c:	f001 fc77 	bl	800456e <lcd_ShowStr>
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	080375a8 	.word	0x080375a8
 8002c8c:	0806f7c8 	.word	0x0806f7c8
 8002c90:	0800e8b8 	.word	0x0800e8b8
 8002c94:	0800e868 	.word	0x0800e868

08002c98 <game_over_lcd>:

void game_over_lcd(){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <game_over_lcd+0x140>)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ca6:	22f0      	movs	r2, #240	; 0xf0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2000      	movs	r0, #0
 8002cac:	f001 f98e 	bl	8003fcc <lcd_ShowPicture>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002cb0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	f240 131d 	movw	r3, #285	; 0x11d
 8002cba:	22b9      	movs	r2, #185	; 0xb9
 8002cbc:	21fa      	movs	r1, #250	; 0xfa
 8002cbe:	2041      	movs	r0, #65	; 0x41
 8002cc0:	f000 fe7a 	bl	80039b8 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f240 131d 	movw	r3, #285	; 0x11d
 8002ccc:	22b9      	movs	r2, #185	; 0xb9
 8002cce:	21fa      	movs	r1, #250	; 0xfa
 8002cd0:	2041      	movs	r0, #65	; 0x41
 8002cd2:	f000 ff42 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002cde:	22b8      	movs	r2, #184	; 0xb8
 8002ce0:	21fb      	movs	r1, #251	; 0xfb
 8002ce2:	2042      	movs	r0, #66	; 0x42
 8002ce4:	f000 ff39 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002ce8:	2301      	movs	r3, #1
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	2318      	movs	r3, #24
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4a39      	ldr	r2, [pc, #228]	; (8002ddc <game_over_lcd+0x144>)
 8002cf8:	21ff      	movs	r1, #255	; 0xff
 8002cfa:	2064      	movs	r0, #100	; 0x64
 8002cfc:	f001 fc37 	bl	800456e <lcd_ShowStr>
	char c[10] = "";
 8002d00:	2300      	movs	r3, #0
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	f107 0308 	add.w	r3, r7, #8
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	809a      	strh	r2, [r3, #4]
	lcd_StrCenter(0, POS_Y_INFO, "USER", BLACK, BROWN, 16, 1);
 8002d0e:	2301      	movs	r3, #1
 8002d10:	9302      	str	r3, [sp, #8]
 8002d12:	2310      	movs	r3, #16
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <game_over_lcd+0x148>)
 8002d20:	2164      	movs	r1, #100	; 0x64
 8002d22:	2000      	movs	r0, #0
 8002d24:	f001 fc72 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + SPACE_INFO, name, DARKBLUE, BROWN, 16, 1);
 8002d28:	2301      	movs	r3, #1
 8002d2a:	9302      	str	r3, [sp, #8]
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002d3a:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <game_over_lcd+0x14c>)
 8002d3c:	2178      	movs	r1, #120	; 0x78
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f001 fc64 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 2 * SPACE_INFO, "SCORE", BLACK, BROWN, 16, 1);
 8002d44:	2301      	movs	r3, #1
 8002d46:	9302      	str	r3, [sp, #8]
 8002d48:	2310      	movs	r3, #16
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2300      	movs	r3, #0
 8002d54:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <game_over_lcd+0x150>)
 8002d56:	218c      	movs	r1, #140	; 0x8c
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f001 fc57 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 3 * SPACE_INFO, itoa(current_score, c, 10), DARKBLUE, BROWN, 16, 1);
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <game_over_lcd+0x154>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	220a      	movs	r2, #10
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f009 fcf3 	bl	800c754 <itoa>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	2301      	movs	r3, #1
 8002d72:	9302      	str	r3, [sp, #8]
 8002d74:	2310      	movs	r3, #16
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002d82:	21a0      	movs	r1, #160	; 0xa0
 8002d84:	2000      	movs	r0, #0
 8002d86:	f001 fc41 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 4 * SPACE_INFO, "TIME PLAYED", BLACK, BROWN, 16, 1);
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	9302      	str	r3, [sp, #8]
 8002d8e:	2310      	movs	r3, #16
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <game_over_lcd+0x158>)
 8002d9c:	21b4      	movs	r1, #180	; 0xb4
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f001 fc34 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 5 * SPACE_INFO, itoa(current_time, c, 10), DARKBLUE, BROWN, 16, 1);
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <game_over_lcd+0x15c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	220a      	movs	r2, #10
 8002dae:	4619      	mov	r1, r3
 8002db0:	f009 fcd0 	bl	800c754 <itoa>
 8002db4:	4602      	mov	r2, r0
 8002db6:	2301      	movs	r3, #1
 8002db8:	9302      	str	r3, [sp, #8]
 8002dba:	2310      	movs	r3, #16
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002dc8:	21c8      	movs	r1, #200	; 0xc8
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f001 fc1e 	bl	800460c <lcd_StrCenter>
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	08079548 	.word	0x08079548
 8002ddc:	0800e868 	.word	0x0800e868
 8002de0:	0800e8c0 	.word	0x0800e8c0
 8002de4:	20000144 	.word	0x20000144
 8002de8:	0800e880 	.word	0x0800e880
 8002dec:	20000000 	.word	0x20000000
 8002df0:	0800e8c8 	.word	0x0800e8c8
 8002df4:	20000150 	.word	0x20000150

08002df8 <youwin_lcd>:

void youwin_lcd(){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <youwin_lcd+0x140>)
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e06:	22f0      	movs	r2, #240	; 0xf0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f001 f8de 	bl	8003fcc <lcd_ShowPicture>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002e10:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	f240 131d 	movw	r3, #285	; 0x11d
 8002e1a:	22b9      	movs	r2, #185	; 0xb9
 8002e1c:	21fa      	movs	r1, #250	; 0xfa
 8002e1e:	2041      	movs	r0, #65	; 0x41
 8002e20:	f000 fdca 	bl	80039b8 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002e24:	2300      	movs	r3, #0
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	f240 131d 	movw	r3, #285	; 0x11d
 8002e2c:	22b9      	movs	r2, #185	; 0xb9
 8002e2e:	21fa      	movs	r1, #250	; 0xfa
 8002e30:	2041      	movs	r0, #65	; 0x41
 8002e32:	f000 fe92 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002e3e:	22b8      	movs	r2, #184	; 0xb8
 8002e40:	21fb      	movs	r1, #251	; 0xfb
 8002e42:	2042      	movs	r0, #66	; 0x42
 8002e44:	f000 fe89 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002e48:	2301      	movs	r3, #1
 8002e4a:	9302      	str	r3, [sp, #8]
 8002e4c:	2318      	movs	r3, #24
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	2300      	movs	r3, #0
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2300      	movs	r3, #0
 8002e56:	4a39      	ldr	r2, [pc, #228]	; (8002f3c <youwin_lcd+0x144>)
 8002e58:	21ff      	movs	r1, #255	; 0xff
 8002e5a:	2064      	movs	r0, #100	; 0x64
 8002e5c:	f001 fb87 	bl	800456e <lcd_ShowStr>
	char c[10] = "";
 8002e60:	2300      	movs	r3, #0
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	f107 0308 	add.w	r3, r7, #8
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	809a      	strh	r2, [r3, #4]
	lcd_StrCenter(0, POS_Y_INFO, "USER", BLACK, BROWN, 16, 1);
 8002e6e:	2301      	movs	r3, #1
 8002e70:	9302      	str	r3, [sp, #8]
 8002e72:	2310      	movs	r3, #16
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <youwin_lcd+0x148>)
 8002e80:	2164      	movs	r1, #100	; 0x64
 8002e82:	2000      	movs	r0, #0
 8002e84:	f001 fbc2 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + SPACE_INFO, name, DARKBLUE, BROWN, 16, 1);
 8002e88:	2301      	movs	r3, #1
 8002e8a:	9302      	str	r3, [sp, #8]
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <youwin_lcd+0x14c>)
 8002e9c:	2178      	movs	r1, #120	; 0x78
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f001 fbb4 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 2 * SPACE_INFO, "SCORE", BLACK, BROWN, 16, 1);
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	9302      	str	r3, [sp, #8]
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <youwin_lcd+0x150>)
 8002eb6:	218c      	movs	r1, #140	; 0x8c
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f001 fba7 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 3 * SPACE_INFO, itoa(current_score, c, 10), DARKBLUE, BROWN, 16, 1);
 8002ebe:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <youwin_lcd+0x154>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	220a      	movs	r2, #10
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f009 fc43 	bl	800c754 <itoa>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002ee2:	21a0      	movs	r1, #160	; 0xa0
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f001 fb91 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 4 * SPACE_INFO, "TIME PLAYED", BLACK, BROWN, 16, 1);
 8002eea:	2301      	movs	r3, #1
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	2310      	movs	r3, #16
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <youwin_lcd+0x158>)
 8002efc:	21b4      	movs	r1, #180	; 0xb4
 8002efe:	2000      	movs	r0, #0
 8002f00:	f001 fb84 	bl	800460c <lcd_StrCenter>
	lcd_StrCenter(0, POS_Y_INFO + 5 * SPACE_INFO, itoa(current_time, c, 10), DARKBLUE, BROWN, 16, 1);
 8002f04:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <youwin_lcd+0x15c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f009 fc20 	bl	800c754 <itoa>
 8002f14:	4602      	mov	r2, r0
 8002f16:	2301      	movs	r3, #1
 8002f18:	9302      	str	r3, [sp, #8]
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002f28:	21c8      	movs	r1, #200	; 0xc8
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f001 fb6e 	bl	800460c <lcd_StrCenter>
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	0809ed48 	.word	0x0809ed48
 8002f3c:	0800e868 	.word	0x0800e868
 8002f40:	0800e8c0 	.word	0x0800e8c0
 8002f44:	20000144 	.word	0x20000144
 8002f48:	0800e880 	.word	0x0800e880
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	0800e8c8 	.word	0x0800e8c8
 8002f54:	20000150 	.word	0x20000150

08002f58 <uppercase_lcd>:

void uppercase_lcd(){
 8002f58:	b5b0      	push	{r4, r5, r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002f5e:	2300      	movs	r3, #0
 8002f60:	71fb      	strb	r3, [r7, #7]
 8002f62:	e036      	b.n	8002fd2 <uppercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002f64:	2300      	movs	r3, #0
 8002f66:	71bb      	strb	r3, [r7, #6]
 8002f68:	e02d      	b.n	8002fc6 <uppercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_upper[i][j], BLACK, BROWN, 16, 0);
 8002f6a:	79bb      	ldrb	r3, [r7, #6]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	00d2      	lsls	r2, r2, #3
 8002f72:	441a      	add	r2, r3
 8002f74:	0052      	lsls	r2, r2, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3316      	adds	r3, #22
 8002f7e:	b298      	uxth	r0, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	00d2      	lsls	r2, r2, #3
 8002f88:	441a      	add	r2, r3
 8002f8a:	0052      	lsls	r2, r2, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3386      	adds	r3, #134	; 0x86
 8002f94:	b29c      	uxth	r4, r3
 8002f96:	79fa      	ldrb	r2, [r7, #7]
 8002f98:	79b9      	ldrb	r1, [r7, #6]
 8002f9a:	4d12      	ldr	r5, [pc, #72]	; (8002fe4 <uppercase_lcd+0x8c>)
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	442b      	add	r3, r5
 8002fa6:	440b      	add	r3, r1
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	2310      	movs	r3, #16
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	4621      	mov	r1, r4
 8002fbc:	f000 fe04 	bl	8003bc8 <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002fc0:	79bb      	ldrb	r3, [r7, #6]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	71bb      	strb	r3, [r7, #6]
 8002fc6:	79bb      	ldrb	r3, [r7, #6]
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d9ce      	bls.n	8002f6a <uppercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	71fb      	strb	r3, [r7, #7]
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d9c5      	bls.n	8002f64 <uppercase_lcd+0xc>
		}
	}
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000000c 	.word	0x2000000c

08002fe8 <lowercase_lcd>:

void lowercase_lcd(){
 8002fe8:	b5b0      	push	{r4, r5, r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002fee:	2300      	movs	r3, #0
 8002ff0:	71fb      	strb	r3, [r7, #7]
 8002ff2:	e036      	b.n	8003062 <lowercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	71bb      	strb	r3, [r7, #6]
 8002ff8:	e02d      	b.n	8003056 <lowercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_lower[i][j], BLACK, BROWN, 16, 0);
 8002ffa:	79bb      	ldrb	r3, [r7, #6]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	00d2      	lsls	r2, r2, #3
 8003002:	441a      	add	r2, r3
 8003004:	0052      	lsls	r2, r2, #1
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	3316      	adds	r3, #22
 800300e:	b298      	uxth	r0, r3
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	b29b      	uxth	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	00d2      	lsls	r2, r2, #3
 8003018:	441a      	add	r2, r3
 800301a:	0052      	lsls	r2, r2, #1
 800301c:	4413      	add	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	3386      	adds	r3, #134	; 0x86
 8003024:	b29c      	uxth	r4, r3
 8003026:	79fa      	ldrb	r2, [r7, #7]
 8003028:	79b9      	ldrb	r1, [r7, #6]
 800302a:	4d12      	ldr	r5, [pc, #72]	; (8003074 <lowercase_lcd+0x8c>)
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	442b      	add	r3, r5
 8003036:	440b      	add	r3, r1
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	2300      	movs	r3, #0
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	2310      	movs	r3, #16
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2300      	movs	r3, #0
 800304a:	4621      	mov	r1, r4
 800304c:	f000 fdbc 	bl	8003bc8 <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8003050:	79bb      	ldrb	r3, [r7, #6]
 8003052:	3301      	adds	r3, #1
 8003054:	71bb      	strb	r3, [r7, #6]
 8003056:	79bb      	ldrb	r3, [r7, #6]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d9ce      	bls.n	8002ffa <lowercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	3301      	adds	r3, #1
 8003060:	71fb      	strb	r3, [r7, #7]
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b04      	cmp	r3, #4
 8003066:	d9c5      	bls.n	8002ff4 <lowercase_lcd+0xc>
		}
	}
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bdb0      	pop	{r4, r5, r7, pc}
 8003072:	bf00      	nop
 8003074:	2000002c 	.word	0x2000002c

08003078 <selectbox_lcd>:

void selectbox_lcd(){
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b083      	sub	sp, #12
 800307c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 800307e:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <selectbox_lcd+0xf8>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	00d2      	lsls	r2, r2, #3
 8003088:	441a      	add	r2, r3
 800308a:	0052      	lsls	r2, r2, #1
 800308c:	4413      	add	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	b29b      	uxth	r3, r3
 8003092:	3306      	adds	r3, #6
 8003094:	b298      	uxth	r0, r3
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <selectbox_lcd+0xfc>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	00d2      	lsls	r2, r2, #3
 80030a0:	441a      	add	r2, r3
 80030a2:	0052      	lsls	r2, r2, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	337c      	adds	r3, #124	; 0x7c
 80030ac:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_c_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r_old + 1) * CHAR_HEIGHT, GRAY);
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <selectbox_lcd+0xf8>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	00d2      	lsls	r2, r2, #3
 80030ba:	441a      	add	r2, r3
 80030bc:	0052      	lsls	r2, r2, #1
 80030be:	4413      	add	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3306      	adds	r3, #6
 80030c6:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_c_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r_old + 1) * CHAR_HEIGHT, GRAY);
 80030c8:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <selectbox_lcd+0xfc>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c_old * CHAR_WIDTH, POS_Y_CHAR + index_r_old * CHAR_HEIGHT,
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461c      	mov	r4, r3
 80030d2:	00e4      	lsls	r4, r4, #3
 80030d4:	441c      	add	r4, r3
 80030d6:	0064      	lsls	r4, r4, #1
 80030d8:	4423      	add	r3, r4
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	337c      	adds	r3, #124	; 0x7c
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f248 4430 	movw	r4, #33840	; 0x8430
 80030e6:	9400      	str	r4, [sp, #0]
 80030e8:	f000 fd37 	bl	8003b5a <lcd_DrawRectangle>
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <selectbox_lcd+0x100>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	00d2      	lsls	r2, r2, #3
 80030f6:	441a      	add	r2, r3
 80030f8:	0052      	lsls	r2, r2, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3306      	adds	r3, #6
 8003102:	b298      	uxth	r0, r3
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <selectbox_lcd+0x104>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	00d2      	lsls	r2, r2, #3
 800310e:	441a      	add	r2, r3
 8003110:	0052      	lsls	r2, r2, #1
 8003112:	4413      	add	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	b29b      	uxth	r3, r3
 8003118:	337c      	adds	r3, #124	; 0x7c
 800311a:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_c + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r + 1) * CHAR_HEIGHT, BLACK);
 800311c:	4b16      	ldr	r3, [pc, #88]	; (8003178 <selectbox_lcd+0x100>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	00d2      	lsls	r2, r2, #3
 8003128:	441a      	add	r2, r3
 800312a:	0052      	lsls	r2, r2, #1
 800312c:	4413      	add	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	b29b      	uxth	r3, r3
 8003132:	3306      	adds	r3, #6
 8003134:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_c + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_r + 1) * CHAR_HEIGHT, BLACK);
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <selectbox_lcd+0x104>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_c * CHAR_WIDTH, POS_Y_CHAR + index_r * CHAR_HEIGHT,
 800313c:	b29b      	uxth	r3, r3
 800313e:	461c      	mov	r4, r3
 8003140:	00e4      	lsls	r4, r4, #3
 8003142:	441c      	add	r4, r3
 8003144:	0064      	lsls	r4, r4, #1
 8003146:	4423      	add	r3, r4
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	b29b      	uxth	r3, r3
 800314c:	337c      	adds	r3, #124	; 0x7c
 800314e:	b29b      	uxth	r3, r3
 8003150:	2400      	movs	r4, #0
 8003152:	9400      	str	r4, [sp, #0]
 8003154:	f000 fd01 	bl	8003b5a <lcd_DrawRectangle>
	index_r_old = index_r;
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <selectbox_lcd+0x104>)
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <selectbox_lcd+0xfc>)
 800315e:	701a      	strb	r2, [r3, #0]
	index_c_old = index_c;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <selectbox_lcd+0x100>)
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <selectbox_lcd+0xf8>)
 8003166:	701a      	strb	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	3704      	adds	r7, #4
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}
 8003170:	2000015a 	.word	0x2000015a
 8003174:	20000159 	.word	0x20000159
 8003178:	20000158 	.word	0x20000158
 800317c:	20000157 	.word	0x20000157

08003180 <displayName_lcd>:

void displayName_lcd(){
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < name_length; i++){
 8003186:	2300      	movs	r3, #0
 8003188:	71fb      	strb	r3, [r7, #7]
 800318a:	e018      	b.n	80031be <displayName_lcd+0x3e>
		lcd_ShowChar(POS_X_DISP + i * SPACE_DISP, POS_Y_DISP, name[i], BLACK, BROWN, 24, 0);
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	b29b      	uxth	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	b29b      	uxth	r3, r3
 8003198:	332f      	adds	r3, #47	; 0x2f
 800319a:	b298      	uxth	r0, r3
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <displayName_lcd+0x90>)
 80031a0:	5cd2      	ldrb	r2, [r2, r3]
 80031a2:	2300      	movs	r3, #0
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	2318      	movs	r3, #24
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	2150      	movs	r1, #80	; 0x50
 80031b4:	f000 fd08 	bl	8003bc8 <lcd_ShowChar>
	for(uint8_t i = 0; i < name_length; i++){
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	3301      	adds	r3, #1
 80031bc:	71fb      	strb	r3, [r7, #7]
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <displayName_lcd+0x94>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	79fa      	ldrb	r2, [r7, #7]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d3e1      	bcc.n	800318c <displayName_lcd+0xc>
	}
	for(uint8_t i = name_length; i < 10; i++){
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <displayName_lcd+0x94>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	71bb      	strb	r3, [r7, #6]
 80031ce:	e016      	b.n	80031fe <displayName_lcd+0x7e>
		lcd_ShowChar(POS_X_DISP + i * SPACE_DISP, POS_Y_DISP, '_', BLACK, BROWN, 24, 0);
 80031d0:	79bb      	ldrb	r3, [r7, #6]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	b29b      	uxth	r3, r3
 80031dc:	332f      	adds	r3, #47	; 0x2f
 80031de:	b298      	uxth	r0, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	9302      	str	r3, [sp, #8]
 80031e4:	2318      	movs	r3, #24
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2300      	movs	r3, #0
 80031f0:	225f      	movs	r2, #95	; 0x5f
 80031f2:	2150      	movs	r1, #80	; 0x50
 80031f4:	f000 fce8 	bl	8003bc8 <lcd_ShowChar>
	for(uint8_t i = name_length; i < 10; i++){
 80031f8:	79bb      	ldrb	r3, [r7, #6]
 80031fa:	3301      	adds	r3, #1
 80031fc:	71bb      	strb	r3, [r7, #6]
 80031fe:	79bb      	ldrb	r3, [r7, #6]
 8003200:	2b09      	cmp	r3, #9
 8003202:	d9e5      	bls.n	80031d0 <displayName_lcd+0x50>
	}
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000144 	.word	0x20000144
 8003214:	2000014f 	.word	0x2000014f

08003218 <entername_lcd>:

void entername_lcd(){
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b085      	sub	sp, #20
 800321c:	af02      	add	r7, sp, #8
	lcd_ShowPicture(0, 0, 240, 320, gImage_select);
 800321e:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <entername_lcd+0xdc>)
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003226:	22f0      	movs	r2, #240	; 0xf0
 8003228:	2100      	movs	r1, #0
 800322a:	2000      	movs	r0, #0
 800322c:	f000 fece 	bl	8003fcc <lcd_ShowPicture>
	lcd_Fill(POS_X_CHAR, POS_Y_CHAR,
 8003230:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800323a:	22ea      	movs	r2, #234	; 0xea
 800323c:	217c      	movs	r1, #124	; 0x7c
 800323e:	2006      	movs	r0, #6
 8003240:	f000 fbba 	bl	80039b8 <lcd_Fill>
			POS_X_CHAR + CHAR_COL*CHAR_WIDTH, POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT, BROWN);
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8003244:	2300      	movs	r3, #0
 8003246:	71fb      	strb	r3, [r7, #7]
 8003248:	e03e      	b.n	80032c8 <entername_lcd+0xb0>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 800324a:	2300      	movs	r3, #0
 800324c:	71bb      	strb	r3, [r7, #6]
 800324e:	e035      	b.n	80032bc <entername_lcd+0xa4>
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8003250:	79bb      	ldrb	r3, [r7, #6]
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	00d2      	lsls	r2, r2, #3
 8003258:	441a      	add	r2, r3
 800325a:	0052      	lsls	r2, r2, #1
 800325c:	4413      	add	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	b29b      	uxth	r3, r3
 8003262:	3306      	adds	r3, #6
 8003264:	b298      	uxth	r0, r3
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	00d2      	lsls	r2, r2, #3
 800326e:	441a      	add	r2, r3
 8003270:	0052      	lsls	r2, r2, #1
 8003272:	4413      	add	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	b29b      	uxth	r3, r3
 8003278:	337c      	adds	r3, #124	; 0x7c
 800327a:	b299      	uxth	r1, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 800327c:	79bb      	ldrb	r3, [r7, #6]
 800327e:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	00d2      	lsls	r2, r2, #3
 8003286:	441a      	add	r2, r3
 8003288:	0052      	lsls	r2, r2, #1
 800328a:	4413      	add	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	b29b      	uxth	r3, r3
 8003290:	3306      	adds	r3, #6
 8003292:	b29a      	uxth	r2, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8003298:	b29b      	uxth	r3, r3
 800329a:	461c      	mov	r4, r3
 800329c:	00e4      	lsls	r4, r4, #3
 800329e:	441c      	add	r4, r3
 80032a0:	0064      	lsls	r4, r4, #1
 80032a2:	4423      	add	r3, r4
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	337c      	adds	r3, #124	; 0x7c
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f248 4430 	movw	r4, #33840	; 0x8430
 80032b0:	9400      	str	r4, [sp, #0]
 80032b2:	f000 fc52 	bl	8003b5a <lcd_DrawRectangle>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 80032b6:	79bb      	ldrb	r3, [r7, #6]
 80032b8:	3301      	adds	r3, #1
 80032ba:	71bb      	strb	r3, [r7, #6]
 80032bc:	79bb      	ldrb	r3, [r7, #6]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d9c6      	bls.n	8003250 <entername_lcd+0x38>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	3301      	adds	r3, #1
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d9bd      	bls.n	800324a <entername_lcd+0x32>
		}
	}
	index_r = 0;
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <entername_lcd+0xe0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
	index_c = 0;
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <entername_lcd+0xe4>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
	flag_uppercase = 0;
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <entername_lcd+0xe8>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
	lowercase_lcd();
 80032e0:	f7ff fe82 	bl	8002fe8 <lowercase_lcd>
	selectbox_lcd();
 80032e4:	f7ff fec8 	bl	8003078 <selectbox_lcd>
	displayName_lcd();
 80032e8:	f7ff ff4a 	bl	8003180 <displayName_lcd>
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	080c4548 	.word	0x080c4548
 80032f8:	20000157 	.word	0x20000157
 80032fc:	20000158 	.word	0x20000158
 8003300:	20000156 	.word	0x20000156

08003304 <home_not_select>:

void home_not_select(){
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 800330a:	f248 4330 	movw	r3, #33840	; 0x8430
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	23b9      	movs	r3, #185	; 0xb9
 8003312:	22b9      	movs	r2, #185	; 0xb9
 8003314:	2196      	movs	r1, #150	; 0x96
 8003316:	2041      	movs	r0, #65	; 0x41
 8003318:	f000 fc1f 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 800331c:	f248 4330 	movw	r3, #33840	; 0x8430
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	23b8      	movs	r3, #184	; 0xb8
 8003324:	22b8      	movs	r2, #184	; 0xb8
 8003326:	2197      	movs	r1, #151	; 0x97
 8003328:	2042      	movs	r0, #66	; 0x42
 800332a:	f000 fc16 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800332e:	f248 4330 	movw	r3, #33840	; 0x8430
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	23eb      	movs	r3, #235	; 0xeb
 8003336:	22b9      	movs	r2, #185	; 0xb9
 8003338:	21c8      	movs	r1, #200	; 0xc8
 800333a:	2041      	movs	r0, #65	; 0x41
 800333c:	f000 fc0d 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8003340:	f248 4330 	movw	r3, #33840	; 0x8430
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	23ea      	movs	r3, #234	; 0xea
 8003348:	22b8      	movs	r2, #184	; 0xb8
 800334a:	21c9      	movs	r1, #201	; 0xc9
 800334c:	2042      	movs	r0, #66	; 0x42
 800334e:	f000 fc04 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8003352:	f248 4330 	movw	r3, #33840	; 0x8430
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	f240 131d 	movw	r3, #285	; 0x11d
 800335c:	22b9      	movs	r2, #185	; 0xb9
 800335e:	21fa      	movs	r1, #250	; 0xfa
 8003360:	2041      	movs	r0, #65	; 0x41
 8003362:	f000 fbfa 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8003366:	f248 4330 	movw	r3, #33840	; 0x8430
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003370:	22b8      	movs	r2, #184	; 0xb8
 8003372:	21fb      	movs	r1, #251	; 0xfb
 8003374:	2042      	movs	r0, #66	; 0x42
 8003376:	f000 fbf0 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <home_second_lcd>:

void home_second_lcd(){
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af02      	add	r7, sp, #8
	home_not_select();
 8003386:	f7ff ffbd 	bl	8003304 <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 800338a:	2300      	movs	r3, #0
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	23b9      	movs	r3, #185	; 0xb9
 8003390:	22b9      	movs	r2, #185	; 0xb9
 8003392:	2196      	movs	r1, #150	; 0x96
 8003394:	2041      	movs	r0, #65	; 0x41
 8003396:	f000 fbe0 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 800339a:	2300      	movs	r3, #0
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	23b8      	movs	r3, #184	; 0xb8
 80033a0:	22b8      	movs	r2, #184	; 0xb8
 80033a2:	2197      	movs	r1, #151	; 0x97
 80033a4:	2042      	movs	r0, #66	; 0x42
 80033a6:	f000 fbd8 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <home_third_lcd>:

void home_third_lcd(){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af02      	add	r7, sp, #8
	home_not_select();
 80033b6:	f7ff ffa5 	bl	8003304 <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80033ba:	2300      	movs	r3, #0
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	23eb      	movs	r3, #235	; 0xeb
 80033c0:	22b9      	movs	r2, #185	; 0xb9
 80033c2:	21c8      	movs	r1, #200	; 0xc8
 80033c4:	2041      	movs	r0, #65	; 0x41
 80033c6:	f000 fbc8 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	23ea      	movs	r3, #234	; 0xea
 80033d0:	22b8      	movs	r2, #184	; 0xb8
 80033d2:	21c9      	movs	r1, #201	; 0xc9
 80033d4:	2042      	movs	r0, #66	; 0x42
 80033d6:	f000 fbc0 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <home_forth_lcd>:

void home_forth_lcd(){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af02      	add	r7, sp, #8
	home_not_select();
 80033e6:	f7ff ff8d 	bl	8003304 <home_not_select>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80033ea:	2300      	movs	r3, #0
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f240 131d 	movw	r3, #285	; 0x11d
 80033f2:	22b9      	movs	r2, #185	; 0xb9
 80033f4:	21fa      	movs	r1, #250	; 0xfa
 80033f6:	2041      	movs	r0, #65	; 0x41
 80033f8:	f000 fbaf 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80033fc:	2300      	movs	r3, #0
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003404:	22b8      	movs	r2, #184	; 0xb8
 8003406:	21fb      	movs	r1, #251	; 0xfb
 8003408:	2042      	movs	r0, #66	; 0x42
 800340a:	f000 fba6 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 800340e:	bf00      	nop
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <mode_first_lcd>:

void mode_first_lcd(){
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800341a:	2300      	movs	r3, #0
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2387      	movs	r3, #135	; 0x87
 8003420:	22b9      	movs	r2, #185	; 0xb9
 8003422:	2164      	movs	r1, #100	; 0x64
 8003424:	2041      	movs	r0, #65	; 0x41
 8003426:	f000 fb98 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 800342a:	2300      	movs	r3, #0
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	2386      	movs	r3, #134	; 0x86
 8003430:	22b8      	movs	r2, #184	; 0xb8
 8003432:	2165      	movs	r1, #101	; 0x65
 8003434:	2042      	movs	r0, #66	; 0x42
 8003436:	f000 fb90 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, BLACK);
	home_not_select();
 800343a:	f7ff ff63 	bl	8003304 <home_not_select>
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <mode_second_lcd>:

void mode_second_lcd(){
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800344a:	f248 4330 	movw	r3, #33840	; 0x8430
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2387      	movs	r3, #135	; 0x87
 8003452:	22b9      	movs	r2, #185	; 0xb9
 8003454:	2164      	movs	r1, #100	; 0x64
 8003456:	2041      	movs	r0, #65	; 0x41
 8003458:	f000 fb7f 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 800345c:	f248 4330 	movw	r3, #33840	; 0x8430
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2386      	movs	r3, #134	; 0x86
 8003464:	22b8      	movs	r2, #184	; 0xb8
 8003466:	2165      	movs	r1, #101	; 0x65
 8003468:	2042      	movs	r0, #66	; 0x42
 800346a:	f000 fb76 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_second_lcd();
 800346e:	f7ff ff87 	bl	8003380 <home_second_lcd>
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <mode_third_lcd>:

void mode_third_lcd(){
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800347e:	f248 4330 	movw	r3, #33840	; 0x8430
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2387      	movs	r3, #135	; 0x87
 8003486:	22b9      	movs	r2, #185	; 0xb9
 8003488:	2164      	movs	r1, #100	; 0x64
 800348a:	2041      	movs	r0, #65	; 0x41
 800348c:	f000 fb65 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8003490:	f248 4330 	movw	r3, #33840	; 0x8430
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2386      	movs	r3, #134	; 0x86
 8003498:	22b8      	movs	r2, #184	; 0xb8
 800349a:	2165      	movs	r1, #101	; 0x65
 800349c:	2042      	movs	r0, #66	; 0x42
 800349e:	f000 fb5c 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_third_lcd();
 80034a2:	f7ff ff85 	bl	80033b0 <home_third_lcd>
}
 80034a6:	bf00      	nop
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <mode_forth_lcd>:

void mode_forth_lcd(){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80034b2:	f248 4330 	movw	r3, #33840	; 0x8430
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	2387      	movs	r3, #135	; 0x87
 80034ba:	22b9      	movs	r2, #185	; 0xb9
 80034bc:	2164      	movs	r1, #100	; 0x64
 80034be:	2041      	movs	r0, #65	; 0x41
 80034c0:	f000 fb4b 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80034c4:	f248 4330 	movw	r3, #33840	; 0x8430
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2386      	movs	r3, #134	; 0x86
 80034cc:	22b8      	movs	r2, #184	; 0xb8
 80034ce:	2165      	movs	r1, #101	; 0x65
 80034d0:	2042      	movs	r0, #66	; 0x42
 80034d2:	f000 fb42 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_forth_lcd();
 80034d6:	f7ff ff83 	bl	80033e0 <home_forth_lcd>
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <pause_second_lcd>:

void pause_second_lcd(){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80034e6:	2300      	movs	r3, #0
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	23b9      	movs	r3, #185	; 0xb9
 80034ec:	22b9      	movs	r2, #185	; 0xb9
 80034ee:	2196      	movs	r1, #150	; 0x96
 80034f0:	2041      	movs	r0, #65	; 0x41
 80034f2:	f000 fb32 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80034f6:	2300      	movs	r3, #0
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	23b8      	movs	r3, #184	; 0xb8
 80034fc:	22b8      	movs	r2, #184	; 0xb8
 80034fe:	2197      	movs	r1, #151	; 0x97
 8003500:	2042      	movs	r0, #66	; 0x42
 8003502:	f000 fb2a 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8003506:	f248 4330 	movw	r3, #33840	; 0x8430
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	23eb      	movs	r3, #235	; 0xeb
 800350e:	22b9      	movs	r2, #185	; 0xb9
 8003510:	21c8      	movs	r1, #200	; 0xc8
 8003512:	2041      	movs	r0, #65	; 0x41
 8003514:	f000 fb21 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8003518:	f248 4330 	movw	r3, #33840	; 0x8430
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	23ea      	movs	r3, #234	; 0xea
 8003520:	22b8      	movs	r2, #184	; 0xb8
 8003522:	21c9      	movs	r1, #201	; 0xc9
 8003524:	2042      	movs	r0, #66	; 0x42
 8003526:	f000 fb18 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <pause_third_lcd>:

void pause_third_lcd(){
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8003536:	f248 4330 	movw	r3, #33840	; 0x8430
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	23b9      	movs	r3, #185	; 0xb9
 800353e:	22b9      	movs	r2, #185	; 0xb9
 8003540:	2196      	movs	r1, #150	; 0x96
 8003542:	2041      	movs	r0, #65	; 0x41
 8003544:	f000 fb09 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8003548:	f248 4330 	movw	r3, #33840	; 0x8430
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	23b8      	movs	r3, #184	; 0xb8
 8003550:	22b8      	movs	r2, #184	; 0xb8
 8003552:	2197      	movs	r1, #151	; 0x97
 8003554:	2042      	movs	r0, #66	; 0x42
 8003556:	f000 fb00 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800355a:	2300      	movs	r3, #0
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	23eb      	movs	r3, #235	; 0xeb
 8003560:	22b9      	movs	r2, #185	; 0xb9
 8003562:	21c8      	movs	r1, #200	; 0xc8
 8003564:	2041      	movs	r0, #65	; 0x41
 8003566:	f000 faf8 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 800356a:	2300      	movs	r3, #0
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	23ea      	movs	r3, #234	; 0xea
 8003570:	22b8      	movs	r2, #184	; 0xb8
 8003572:	21c9      	movs	r1, #201	; 0xc9
 8003574:	2042      	movs	r0, #66	; 0x42
 8003576:	f000 faf0 	bl	8003b5a <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <point_head_lcd>:

void point_head_lcd(struct Point head){
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af02      	add	r7, sp, #8
 8003586:	463b      	mov	r3, r7
 8003588:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(head.x, head.y, GREEN, RADIUS_SNAKE, 1);
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	2301      	movs	r3, #1
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2304      	movs	r3, #4
 8003596:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800359a:	f000 ff7c 	bl	8004496 <lcd_DrawCircle>
	lcd_DrawCircle(head.x, head.y, BLACK, 1, 1);
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	2301      	movs	r3, #1
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2301      	movs	r3, #1
 80035a8:	2200      	movs	r2, #0
 80035aa:	f000 ff74 	bl	8004496 <lcd_DrawCircle>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <point_snake_lcd>:

void point_snake_lcd(struct Point snake){
 80035b6:	b590      	push	{r4, r7, lr}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af02      	add	r7, sp, #8
 80035bc:	463b      	mov	r3, r7
 80035be:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(snake.x, snake.y, GREEN, RADIUS_SNAKE, 1);
 80035c2:	6838      	ldr	r0, [r7, #0]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	2301      	movs	r3, #1
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2304      	movs	r3, #4
 80035cc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80035d0:	f000 ff61 	bl	8004496 <lcd_DrawCircle>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b03      	subs	r3, #3
 80035da:	b298      	uxth	r0, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b03      	subs	r3, #3
 80035e2:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80035e4:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3304      	adds	r3, #4
 80035ea:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 80035ec:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3304      	adds	r3, #4
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80035f8:	9400      	str	r4, [sp, #0]
 80035fa:	f000 fa2a 	bl	8003a52 <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b03      	subs	r3, #3
 8003604:	b298      	uxth	r0, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b02      	subs	r3, #2
 800360c:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 800360e:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8003610:	b29b      	uxth	r3, r3
 8003612:	3303      	adds	r3, #3
 8003614:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8003616:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8003618:	b29b      	uxth	r3, r3
 800361a:	3304      	adds	r3, #4
 800361c:	b29b      	uxth	r3, r3
 800361e:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003622:	9400      	str	r4, [sp, #0]
 8003624:	f000 fa15 	bl	8003a52 <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b02      	subs	r3, #2
 800362e:	b298      	uxth	r0, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b03      	subs	r3, #3
 8003636:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 8003638:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 800363a:	b29b      	uxth	r3, r3
 800363c:	3304      	adds	r3, #4
 800363e:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 8003640:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8003642:	b29b      	uxth	r3, r3
 8003644:	3303      	adds	r3, #3
 8003646:	b29b      	uxth	r3, r3
 8003648:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800364c:	9400      	str	r4, [sp, #0]
 800364e:	f000 fa00 	bl	8003a52 <lcd_DrawLine>
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}

0800365a <point_food_lcd>:

void point_food_lcd(struct Point food){
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af02      	add	r7, sp, #8
 8003660:	463b      	mov	r3, r7
 8003662:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(food.x, food.y, RED, RADIUS_SNAKE, 1);
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	2301      	movs	r3, #1
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2304      	movs	r3, #4
 8003670:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003674:	f000 ff0f 	bl	8004496 <lcd_DrawCircle>
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <point_clr>:

void point_clr(struct Point clr){
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af02      	add	r7, sp, #8
 8003686:	463b      	mov	r3, r7
 8003688:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(clr.x, clr.y, WHITE, RADIUS_SNAKE, 1);
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	2301      	movs	r3, #1
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2304      	movs	r3, #4
 8003696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800369a:	f000 fefc 	bl	8004496 <lcd_DrawCircle>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <mode_7seg>:

void mode_7seg(){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	switch(status){
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <mode_7seg+0x44>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b0d      	cmp	r3, #13
 80036b2:	d012      	beq.n	80036da <mode_7seg+0x32>
 80036b4:	2b0d      	cmp	r3, #13
 80036b6:	dc16      	bgt.n	80036e6 <mode_7seg+0x3e>
 80036b8:	2b0b      	cmp	r3, #11
 80036ba:	d002      	beq.n	80036c2 <mode_7seg+0x1a>
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d006      	beq.n	80036ce <mode_7seg+0x26>
			break;
		case TIME:
			led7_SetDigit(3, 0, 1);
			break;
		default:
			break;
 80036c0:	e011      	b.n	80036e6 <mode_7seg+0x3e>
			led7_SetDigit(1, 0, 1);
 80036c2:	2201      	movs	r2, #1
 80036c4:	2100      	movs	r1, #0
 80036c6:	2001      	movs	r0, #1
 80036c8:	f001 f86a 	bl	80047a0 <led7_SetDigit>
			break;
 80036cc:	e00c      	b.n	80036e8 <mode_7seg+0x40>
			led7_SetDigit(2, 0, 1);
 80036ce:	2201      	movs	r2, #1
 80036d0:	2100      	movs	r1, #0
 80036d2:	2002      	movs	r0, #2
 80036d4:	f001 f864 	bl	80047a0 <led7_SetDigit>
			break;
 80036d8:	e006      	b.n	80036e8 <mode_7seg+0x40>
			led7_SetDigit(3, 0, 1);
 80036da:	2201      	movs	r2, #1
 80036dc:	2100      	movs	r1, #0
 80036de:	2003      	movs	r0, #3
 80036e0:	f001 f85e 	bl	80047a0 <led7_SetDigit>
			break;
 80036e4:	e000      	b.n	80036e8 <mode_7seg+0x40>
			break;
 80036e6:	bf00      	nop
	}
}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	2000015c 	.word	0x2000015c

080036f0 <reset_7seg>:

void reset_7seg(){
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
	led7_SetDigit(0, 0, 0);
 80036f4:	2200      	movs	r2, #0
 80036f6:	2100      	movs	r1, #0
 80036f8:	2000      	movs	r0, #0
 80036fa:	f001 f851 	bl	80047a0 <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2101      	movs	r1, #1
 8003702:	2000      	movs	r0, #0
 8003704:	f001 f84c 	bl	80047a0 <led7_SetDigit>
	led7_SetDigit(0, 2, 0);
 8003708:	2200      	movs	r2, #0
 800370a:	2102      	movs	r1, #2
 800370c:	2000      	movs	r0, #0
 800370e:	f001 f847 	bl	80047a0 <led7_SetDigit>
	led7_SetDigit(0, 3, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2103      	movs	r1, #3
 8003716:	2000      	movs	r0, #0
 8003718:	f001 f842 	bl	80047a0 <led7_SetDigit>
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <update_7seg_time>:

void update_7seg_time(){
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	if(flag_timer5 == 1 && flag_user == FLAG_PLAYING){
 8003724:	4b44      	ldr	r3, [pc, #272]	; (8003838 <update_7seg_time+0x118>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 8081 	bne.w	8003830 <update_7seg_time+0x110>
 800372e:	4b43      	ldr	r3, [pc, #268]	; (800383c <update_7seg_time+0x11c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d17c      	bne.n	8003830 <update_7seg_time+0x110>
		flag_timer5 = 0;
 8003736:	4b40      	ldr	r3, [pc, #256]	; (8003838 <update_7seg_time+0x118>)
 8003738:	2200      	movs	r2, #0
 800373a:	801a      	strh	r2, [r3, #0]
		current_time++;
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <update_7seg_time+0x120>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a3f      	ldr	r2, [pc, #252]	; (8003840 <update_7seg_time+0x120>)
 8003744:	6013      	str	r3, [r2, #0]
		switch(status){
 8003746:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <update_7seg_time+0x124>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	dc02      	bgt.n	8003754 <update_7seg_time+0x34>
 800374e:	2b0b      	cmp	r3, #11
 8003750:	da03      	bge.n	800375a <update_7seg_time+0x3a>
				led7_SetDigit((counter_time % 100) / 10, 2, 0);
				led7_SetDigit(counter_time % 10, 3, 0);
				break;
		}
	}
}
 8003752:	e06e      	b.n	8003832 <update_7seg_time+0x112>
		switch(status){
 8003754:	2b0d      	cmp	r3, #13
 8003756:	d030      	beq.n	80037ba <update_7seg_time+0x9a>
}
 8003758:	e06b      	b.n	8003832 <update_7seg_time+0x112>
				led7_SetDigit(current_time / 100, 1, 0);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <update_7seg_time+0x120>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <update_7seg_time+0x128>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2200      	movs	r2, #0
 8003768:	2101      	movs	r1, #1
 800376a:	4618      	mov	r0, r3
 800376c:	f001 f818 	bl	80047a0 <led7_SetDigit>
				led7_SetDigit((current_time % 100) / 10, 2, 0);
 8003770:	4b33      	ldr	r3, [pc, #204]	; (8003840 <update_7seg_time+0x120>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b34      	ldr	r3, [pc, #208]	; (8003848 <update_7seg_time+0x128>)
 8003776:	fba3 1302 	umull	r1, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2164      	movs	r1, #100	; 0x64
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	4a31      	ldr	r2, [pc, #196]	; (800384c <update_7seg_time+0x12c>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	08db      	lsrs	r3, r3, #3
 800378c:	2200      	movs	r2, #0
 800378e:	2102      	movs	r1, #2
 8003790:	4618      	mov	r0, r3
 8003792:	f001 f805 	bl	80047a0 <led7_SetDigit>
				led7_SetDigit(current_time % 10, 3, 0);
 8003796:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <update_7seg_time+0x120>)
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	4b2c      	ldr	r3, [pc, #176]	; (800384c <update_7seg_time+0x12c>)
 800379c:	fba3 2301 	umull	r2, r3, r3, r1
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	1aca      	subs	r2, r1, r3
 80037ac:	4613      	mov	r3, r2
 80037ae:	2200      	movs	r2, #0
 80037b0:	2103      	movs	r1, #3
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fff4 	bl	80047a0 <led7_SetDigit>
				break;
 80037b8:	e03b      	b.n	8003832 <update_7seg_time+0x112>
				counter_time--;
 80037ba:	4b25      	ldr	r3, [pc, #148]	; (8003850 <update_7seg_time+0x130>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3b01      	subs	r3, #1
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <update_7seg_time+0x130>)
 80037c2:	6013      	str	r3, [r2, #0]
				led7_SetDigit(counter_time / 100, 1, 0);
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <update_7seg_time+0x130>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <update_7seg_time+0x128>)
 80037ca:	fb82 1203 	smull	r1, r2, r2, r3
 80037ce:	1152      	asrs	r2, r2, #5
 80037d0:	17db      	asrs	r3, r3, #31
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2200      	movs	r2, #0
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 ffe1 	bl	80047a0 <led7_SetDigit>
				led7_SetDigit((counter_time % 100) / 10, 2, 0);
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <update_7seg_time+0x130>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <update_7seg_time+0x128>)
 80037e4:	fb83 1302 	smull	r1, r3, r3, r2
 80037e8:	1159      	asrs	r1, r3, #5
 80037ea:	17d3      	asrs	r3, r2, #31
 80037ec:	1acb      	subs	r3, r1, r3
 80037ee:	2164      	movs	r1, #100	; 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <update_7seg_time+0x134>)
 80037f8:	fb82 1203 	smull	r1, r2, r2, r3
 80037fc:	1092      	asrs	r2, r2, #2
 80037fe:	17db      	asrs	r3, r3, #31
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2200      	movs	r2, #0
 8003804:	2102      	movs	r1, #2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 ffca 	bl	80047a0 <led7_SetDigit>
				led7_SetDigit(counter_time % 10, 3, 0);
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <update_7seg_time+0x130>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <update_7seg_time+0x134>)
 8003812:	fb83 1302 	smull	r1, r3, r3, r2
 8003816:	1099      	asrs	r1, r3, #2
 8003818:	17d3      	asrs	r3, r2, #31
 800381a:	1ac8      	subs	r0, r1, r3
 800381c:	4603      	mov	r3, r0
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4403      	add	r3, r0
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	1ad0      	subs	r0, r2, r3
 8003826:	2200      	movs	r2, #0
 8003828:	2103      	movs	r1, #3
 800382a:	f000 ffb9 	bl	80047a0 <led7_SetDigit>
				break;
 800382e:	e000      	b.n	8003832 <update_7seg_time+0x112>
	}
 8003830:	bf00      	nop
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2000018c 	.word	0x2000018c
 800383c:	20000154 	.word	0x20000154
 8003840:	20000150 	.word	0x20000150
 8003844:	2000015c 	.word	0x2000015c
 8003848:	51eb851f 	.word	0x51eb851f
 800384c:	cccccccd 	.word	0xcccccccd
 8003850:	20000168 	.word	0x20000168
 8003854:	66666667 	.word	0x66666667

08003858 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8003862:	4a04      	ldr	r2, [pc, #16]	; (8003874 <LCD_WR_REG+0x1c>)
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	8013      	strh	r3, [r2, #0]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	600ffffe 	.word	0x600ffffe

08003878 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <LCD_WR_DATA+0x1c>)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	8053      	strh	r3, [r2, #2]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	600ffffe 	.word	0x600ffffe

08003898 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <LCD_RD_DATA+0x20>)
 80038a0:	885b      	ldrh	r3, [r3, #2]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	b29b      	uxth	r3, r3
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	600ffffe 	.word	0x600ffffe

080038bc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4604      	mov	r4, r0
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	80fb      	strh	r3, [r7, #6]
 80038ce:	4603      	mov	r3, r0
 80038d0:	80bb      	strh	r3, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	807b      	strh	r3, [r7, #2]
 80038d6:	4613      	mov	r3, r2
 80038d8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80038da:	202a      	movs	r0, #42	; 0x2a
 80038dc:	f7ff ffbc 	bl	8003858 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ffc6 	bl	8003878 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ffc0 	bl	8003878 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80038f8:	887b      	ldrh	r3, [r7, #2]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ffba 	bl	8003878 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	b29b      	uxth	r3, r3
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ffb4 	bl	8003878 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8003910:	202b      	movs	r0, #43	; 0x2b
 8003912:	f7ff ffa1 	bl	8003858 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8003916:	88bb      	ldrh	r3, [r7, #4]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	b29b      	uxth	r3, r3
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ffab 	bl	8003878 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8003922:	88bb      	ldrh	r3, [r7, #4]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	b29b      	uxth	r3, r3
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ffa5 	bl	8003878 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800392e:	883b      	ldrh	r3, [r7, #0]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	b29b      	uxth	r3, r3
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff9f 	bl	8003878 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800393a:	883b      	ldrh	r3, [r7, #0]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff99 	bl	8003878 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8003946:	202c      	movs	r0, #44	; 0x2c
 8003948:	f7ff ff86 	bl	8003858 <LCD_WR_REG>
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}

08003954 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <lcd_Clear+0x60>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <lcd_Clear+0x60>)
 8003968:	885b      	ldrh	r3, [r3, #2]
 800396a:	3b01      	subs	r3, #1
 800396c:	b29b      	uxth	r3, r3
 800396e:	2100      	movs	r1, #0
 8003970:	2000      	movs	r0, #0
 8003972:	f7ff ffa3 	bl	80038bc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8003976:	2300      	movs	r3, #0
 8003978:	81fb      	strh	r3, [r7, #14]
 800397a:	e011      	b.n	80039a0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800397c:	2300      	movs	r3, #0
 800397e:	81bb      	strh	r3, [r7, #12]
 8003980:	e006      	b.n	8003990 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff77 	bl	8003878 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800398a:	89bb      	ldrh	r3, [r7, #12]
 800398c:	3301      	adds	r3, #1
 800398e:	81bb      	strh	r3, [r7, #12]
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <lcd_Clear+0x60>)
 8003992:	885b      	ldrh	r3, [r3, #2]
 8003994:	89ba      	ldrh	r2, [r7, #12]
 8003996:	429a      	cmp	r2, r3
 8003998:	d3f3      	bcc.n	8003982 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800399a:	89fb      	ldrh	r3, [r7, #14]
 800399c:	3301      	adds	r3, #1
 800399e:	81fb      	strh	r3, [r7, #14]
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <lcd_Clear+0x60>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	89fa      	ldrh	r2, [r7, #14]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d3e8      	bcc.n	800397c <lcd_Clear+0x28>
		}
	}
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000368 	.word	0x20000368

080039b8 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4604      	mov	r4, r0
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	80fb      	strh	r3, [r7, #6]
 80039ca:	4603      	mov	r3, r0
 80039cc:	80bb      	strh	r3, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	807b      	strh	r3, [r7, #2]
 80039d2:	4613      	mov	r3, r2
 80039d4:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	883b      	ldrh	r3, [r7, #0]
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	88b9      	ldrh	r1, [r7, #4]
 80039e4:	88f8      	ldrh	r0, [r7, #6]
 80039e6:	f7ff ff69 	bl	80038bc <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80039ea:	88bb      	ldrh	r3, [r7, #4]
 80039ec:	81fb      	strh	r3, [r7, #14]
 80039ee:	e010      	b.n	8003a12 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	81bb      	strh	r3, [r7, #12]
 80039f4:	e006      	b.n	8003a04 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80039f6:	8c3b      	ldrh	r3, [r7, #32]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff3d 	bl	8003878 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80039fe:	89bb      	ldrh	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	81bb      	strh	r3, [r7, #12]
 8003a04:	89ba      	ldrh	r2, [r7, #12]
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d3f4      	bcc.n	80039f6 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8003a0c:	89fb      	ldrh	r3, [r7, #14]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	81fb      	strh	r3, [r7, #14]
 8003a12:	89fa      	ldrh	r2, [r7, #14]
 8003a14:	883b      	ldrh	r3, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3ea      	bcc.n	80039f0 <lcd_Fill+0x38>
		}
	}
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd90      	pop	{r4, r7, pc}

08003a24 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80fb      	strh	r3, [r7, #6]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	80bb      	strh	r3, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8003a36:	88bb      	ldrh	r3, [r7, #4]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	88b9      	ldrh	r1, [r7, #4]
 8003a3c:	88f8      	ldrh	r0, [r7, #6]
 8003a3e:	f7ff ff3d 	bl	80038bc <lcd_AddressSet>
	LCD_WR_DATA(color);
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff17 	bl	8003878 <LCD_WR_DATA>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8003a52:	b590      	push	{r4, r7, lr}
 8003a54:	b08d      	sub	sp, #52	; 0x34
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4604      	mov	r4, r0
 8003a5a:	4608      	mov	r0, r1
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4623      	mov	r3, r4
 8003a62:	80fb      	strh	r3, [r7, #6]
 8003a64:	4603      	mov	r3, r0
 8003a66:	80bb      	strh	r3, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8003a78:	887a      	ldrh	r2, [r7, #2]
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8003a80:	883a      	ldrh	r2, [r7, #0]
 8003a82:	88bb      	ldrh	r3, [r7, #4]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8003a8c:	88bb      	ldrh	r3, [r7, #4]
 8003a8e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	dd02      	ble.n	8003a9c <lcd_DrawLine+0x4a>
 8003a96:	2301      	movs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e00b      	b.n	8003ab4 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <lcd_DrawLine+0x56>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e005      	b.n	8003ab4 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	425b      	negs	r3, r3
 8003ab2:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	dd02      	ble.n	8003ac0 <lcd_DrawLine+0x6e>
 8003aba:	2301      	movs	r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	e00b      	b.n	8003ad8 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <lcd_DrawLine+0x7a>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e005      	b.n	8003ad8 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	425b      	negs	r3, r3
 8003ad6:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	dd02      	ble.n	8003ae6 <lcd_DrawLine+0x94>
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e001      	b.n	8003aea <lcd_DrawLine+0x98>
	else distance=delta_y;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003aee:	e02b      	b.n	8003b48 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	b291      	uxth	r1, r2
 8003af8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff91 	bl	8003a24 <lcd_DrawPoint>
		xerr+=delta_x;
 8003b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	4413      	add	r3, r2
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8003b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	dd07      	ble.n	8003b2a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8003b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	4413      	add	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	dd07      	ble.n	8003b42 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8003b42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b44:	3301      	adds	r3, #1
 8003b46:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dacf      	bge.n	8003af0 <lcd_DrawLine+0x9e>
		}
	}
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3734      	adds	r7, #52	; 0x34
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd90      	pop	{r4, r7, pc}

08003b5a <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8003b5a:	b590      	push	{r4, r7, lr}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af02      	add	r7, sp, #8
 8003b60:	4604      	mov	r4, r0
 8003b62:	4608      	mov	r0, r1
 8003b64:	4611      	mov	r1, r2
 8003b66:	461a      	mov	r2, r3
 8003b68:	4623      	mov	r3, r4
 8003b6a:	80fb      	strh	r3, [r7, #6]
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	80bb      	strh	r3, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8003b78:	88bc      	ldrh	r4, [r7, #4]
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	88b9      	ldrh	r1, [r7, #4]
 8003b7e:	88f8      	ldrh	r0, [r7, #6]
 8003b80:	8b3b      	ldrh	r3, [r7, #24]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	4623      	mov	r3, r4
 8003b86:	f7ff ff64 	bl	8003a52 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8003b8a:	883c      	ldrh	r4, [r7, #0]
 8003b8c:	88fa      	ldrh	r2, [r7, #6]
 8003b8e:	88b9      	ldrh	r1, [r7, #4]
 8003b90:	88f8      	ldrh	r0, [r7, #6]
 8003b92:	8b3b      	ldrh	r3, [r7, #24]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	4623      	mov	r3, r4
 8003b98:	f7ff ff5b 	bl	8003a52 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8003b9c:	883c      	ldrh	r4, [r7, #0]
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	8839      	ldrh	r1, [r7, #0]
 8003ba2:	88f8      	ldrh	r0, [r7, #6]
 8003ba4:	8b3b      	ldrh	r3, [r7, #24]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4623      	mov	r3, r4
 8003baa:	f7ff ff52 	bl	8003a52 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8003bae:	883c      	ldrh	r4, [r7, #0]
 8003bb0:	887a      	ldrh	r2, [r7, #2]
 8003bb2:	88b9      	ldrh	r1, [r7, #4]
 8003bb4:	8878      	ldrh	r0, [r7, #2]
 8003bb6:	8b3b      	ldrh	r3, [r7, #24]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	4623      	mov	r3, r4
 8003bbc:	f7ff ff49 	bl	8003a52 <lcd_DrawLine>
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd90      	pop	{r4, r7, pc}

08003bc8 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	80fb      	strh	r3, [r7, #6]
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80bb      	strh	r3, [r7, #4]
 8003bde:	460b      	mov	r3, r1
 8003be0:	70fb      	strb	r3, [r7, #3]
 8003be2:	4613      	mov	r3, r2
 8003be4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8003bee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	08db      	lsrs	r3, r3, #3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	fb12 f303 	smulbb	r3, r2, r3
 8003c1e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	3b20      	subs	r3, #32
 8003c24:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29c      	uxth	r4, r3
 8003c34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	88bb      	ldrh	r3, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	88b9      	ldrh	r1, [r7, #4]
 8003c46:	88f8      	ldrh	r0, [r7, #6]
 8003c48:	4622      	mov	r2, r4
 8003c4a:	f7ff fe37 	bl	80038bc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	827b      	strh	r3, [r7, #18]
 8003c52:	e086      	b.n	8003d62 <lcd_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[character][i];
 8003c54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d10b      	bne.n	8003c74 <lcd_ShowChar+0xac>
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	8a79      	ldrh	r1, [r7, #18]
 8003c60:	4845      	ldr	r0, [pc, #276]	; (8003d78 <lcd_ShowChar+0x1b0>)
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4403      	add	r3, r0
 8003c6c:	440b      	add	r3, r1
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	75fb      	strb	r3, [r7, #23]
 8003c72:	e028      	b.n	8003cc6 <lcd_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[character][i];
 8003c74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d108      	bne.n	8003c8e <lcd_ShowChar+0xc6>
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	8a7b      	ldrh	r3, [r7, #18]
 8003c80:	493e      	ldr	r1, [pc, #248]	; (8003d7c <lcd_ShowChar+0x1b4>)
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	440a      	add	r2, r1
 8003c86:	4413      	add	r3, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	75fb      	strb	r3, [r7, #23]
 8003c8c:	e01b      	b.n	8003cc6 <lcd_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[character][i];
 8003c8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c92:	2b18      	cmp	r3, #24
 8003c94:	d10b      	bne.n	8003cae <lcd_ShowChar+0xe6>
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	8a79      	ldrh	r1, [r7, #18]
 8003c9a:	4839      	ldr	r0, [pc, #228]	; (8003d80 <lcd_ShowChar+0x1b8>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	4403      	add	r3, r0
 8003ca6:	440b      	add	r3, r1
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	75fb      	strb	r3, [r7, #23]
 8003cac:	e00b      	b.n	8003cc6 <lcd_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[character][i];
 8003cae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d15b      	bne.n	8003d6e <lcd_ShowChar+0x1a6>
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	8a7b      	ldrh	r3, [r7, #18]
 8003cba:	4932      	ldr	r1, [pc, #200]	; (8003d84 <lcd_ShowChar+0x1bc>)
 8003cbc:	0192      	lsls	r2, r2, #6
 8003cbe:	440a      	add	r2, r1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75bb      	strb	r3, [r7, #22]
 8003cca:	e044      	b.n	8003d56 <lcd_ShowChar+0x18e>
		{
			if(!mode)
 8003ccc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d120      	bne.n	8003d16 <lcd_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8003cd4:	7dfa      	ldrb	r2, [r7, #23]
 8003cd6:	7dbb      	ldrb	r3, [r7, #22]
 8003cd8:	fa42 f303 	asr.w	r3, r2, r3
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <lcd_ShowChar+0x126>
 8003ce4:	883b      	ldrh	r3, [r7, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fdc6 	bl	8003878 <LCD_WR_DATA>
 8003cec:	e003      	b.n	8003cf6 <lcd_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8003cee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fdc1 	bl	8003878 <LCD_WR_DATA>
				m++;
 8003cf6:	7d7b      	ldrb	r3, [r7, #21]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8003cfc:	7d7b      	ldrb	r3, [r7, #21]
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d04:	fb02 f201 	mul.w	r2, r2, r1
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11f      	bne.n	8003d50 <lcd_ShowChar+0x188>
				{
					m=0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	757b      	strb	r3, [r7, #21]
					break;
 8003d14:	e022      	b.n	8003d5c <lcd_ShowChar+0x194>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8003d16:	7dfa      	ldrb	r2, [r7, #23]
 8003d18:	7dbb      	ldrb	r3, [r7, #22]
 8003d1a:	fa42 f303 	asr.w	r3, r2, r3
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <lcd_ShowChar+0x16a>
 8003d26:	883a      	ldrh	r2, [r7, #0]
 8003d28:	88b9      	ldrh	r1, [r7, #4]
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fe79 	bl	8003a24 <lcd_DrawPoint>
				x++;
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	3301      	adds	r3, #1
 8003d36:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	8a3b      	ldrh	r3, [r7, #16]
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d105      	bne.n	8003d50 <lcd_ShowChar+0x188>
				{
					x=x0;
 8003d44:	8a3b      	ldrh	r3, [r7, #16]
 8003d46:	80fb      	strh	r3, [r7, #6]
					y++;
 8003d48:	88bb      	ldrh	r3, [r7, #4]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	80bb      	strh	r3, [r7, #4]
					break;
 8003d4e:	e005      	b.n	8003d5c <lcd_ShowChar+0x194>
		for(t=0;t<8;t++)
 8003d50:	7dbb      	ldrb	r3, [r7, #22]
 8003d52:	3301      	adds	r3, #1
 8003d54:	75bb      	strb	r3, [r7, #22]
 8003d56:	7dbb      	ldrb	r3, [r7, #22]
 8003d58:	2b07      	cmp	r3, #7
 8003d5a:	d9b7      	bls.n	8003ccc <lcd_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8003d5c:	8a7b      	ldrh	r3, [r7, #18]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	827b      	strh	r3, [r7, #18]
 8003d62:	8a7a      	ldrh	r2, [r7, #18]
 8003d64:	89bb      	ldrh	r3, [r7, #12]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	f4ff af74 	bcc.w	8003c54 <lcd_ShowChar+0x8c>
 8003d6c:	e000      	b.n	8003d70 <lcd_ShowChar+0x1a8>
		else return;
 8003d6e:	bf00      	nop
				}
			}
		}
	}
}
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd90      	pop	{r4, r7, pc}
 8003d76:	bf00      	nop
 8003d78:	0800e9b4 	.word	0x0800e9b4
 8003d7c:	0800ee28 	.word	0x0800ee28
 8003d80:	0800f418 	.word	0x0800f418
 8003d84:	080105e8 	.word	0x080105e8

08003d88 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	460a      	mov	r2, r1
 8003d92:	71fb      	strb	r3, [r7, #7]
 8003d94:	4613      	mov	r3, r2
 8003d96:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8003d9c:	e004      	b.n	8003da8 <mypow+0x20>
 8003d9e:	79fa      	ldrb	r2, [r7, #7]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	79bb      	ldrb	r3, [r7, #6]
 8003daa:	1e5a      	subs	r2, r3, #1
 8003dac:	71ba      	strb	r2, [r7, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f5      	bne.n	8003d9e <mypow+0x16>
	return result;
 8003db2:	68fb      	ldr	r3, [r7, #12]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af04      	add	r7, sp, #16
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4623      	mov	r3, r4
 8003dd0:	80fb      	strh	r3, [r7, #6]
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	80bb      	strh	r3, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	807b      	strh	r3, [r7, #2]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8003de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	e059      	b.n	8003ea4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8003df0:	887c      	ldrh	r4, [r7, #2]
 8003df2:	787a      	ldrb	r2, [r7, #1]
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	4619      	mov	r1, r3
 8003e00:	200a      	movs	r0, #10
 8003e02:	f7ff ffc1 	bl	8003d88 <mypow>
 8003e06:	4603      	mov	r3, r0
 8003e08:	fbb4 f1f3 	udiv	r1, r4, r3
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <lcd_ShowIntNum+0xf8>)
 8003e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e12:	08da      	lsrs	r2, r3, #3
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	1aca      	subs	r2, r1, r3
 8003e1e:	4613      	mov	r3, r2
 8003e20:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8003e22:	7bbb      	ldrb	r3, [r7, #14]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d121      	bne.n	8003e6c <lcd_ShowIntNum+0xac>
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	787b      	ldrb	r3, [r7, #1]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	da1c      	bge.n	8003e6c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8003e32:	7b3b      	ldrb	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d117      	bne.n	8003e68 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	7b7b      	ldrb	r3, [r7, #13]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	fb12 f303 	smulbb	r3, r2, r3
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	4413      	add	r3, r2
 8003e4a:	b298      	uxth	r0, r3
 8003e4c:	8c3a      	ldrh	r2, [r7, #32]
 8003e4e:	88b9      	ldrh	r1, [r7, #4]
 8003e50:	2300      	movs	r3, #0
 8003e52:	9302      	str	r3, [sp, #8]
 8003e54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	2220      	movs	r2, #32
 8003e62:	f7ff feb1 	bl	8003bc8 <lcd_ShowChar>
				continue;
 8003e66:	e01a      	b.n	8003e9e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	7b7b      	ldrb	r3, [r7, #13]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	fb12 f303 	smulbb	r3, r2, r3
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	b298      	uxth	r0, r3
 8003e80:	7b3b      	ldrb	r3, [r7, #12]
 8003e82:	3330      	adds	r3, #48	; 0x30
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	8c3c      	ldrh	r4, [r7, #32]
 8003e88:	88b9      	ldrh	r1, [r7, #4]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9302      	str	r3, [sp, #8]
 8003e8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4623      	mov	r3, r4
 8003e9a:	f7ff fe95 	bl	8003bc8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	787b      	ldrb	r3, [r7, #1]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d3a1      	bcc.n	8003df0 <lcd_ShowIntNum+0x30>
	}
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd90      	pop	{r4, r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	cccccccd 	.word	0xcccccccd

08003ebc <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b08b      	sub	sp, #44	; 0x2c
 8003ec0:	af04      	add	r7, sp, #16
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	ed87 0a02 	vstr	s0, [r7, #8]
 8003eca:	4611      	mov	r1, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	81fb      	strh	r3, [r7, #14]
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	81bb      	strh	r3, [r7, #12]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	71fb      	strb	r3, [r7, #7]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8003ede:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8003ee6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eea:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003fc4 <lcd_ShowFloatNum+0x108>
 8003eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef6:	ee17 3a90 	vmov	r3, s15
 8003efa:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	75fb      	strb	r3, [r7, #23]
 8003f00:	e057      	b.n	8003fb2 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8003f02:	8abc      	ldrh	r4, [r7, #20]
 8003f04:	79fa      	ldrb	r2, [r7, #7]
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	4619      	mov	r1, r3
 8003f12:	200a      	movs	r0, #10
 8003f14:	f7ff ff38 	bl	8003d88 <mypow>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	fbb4 f1f3 	udiv	r1, r4, r3
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <lcd_ShowFloatNum+0x10c>)
 8003f20:	fba3 2301 	umull	r2, r3, r3, r1
 8003f24:	08da      	lsrs	r2, r3, #3
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	1aca      	subs	r2, r1, r3
 8003f30:	4613      	mov	r3, r2
 8003f32:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8003f34:	7dfa      	ldrb	r2, [r7, #23]
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	3b02      	subs	r3, #2
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d11d      	bne.n	8003f7a <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	3b02      	subs	r3, #2
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	7dbb      	ldrb	r3, [r7, #22]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	fb12 f303 	smulbb	r3, r2, r3
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	89fb      	ldrh	r3, [r7, #14]
 8003f50:	4413      	add	r3, r2
 8003f52:	b298      	uxth	r0, r3
 8003f54:	88ba      	ldrh	r2, [r7, #4]
 8003f56:	89b9      	ldrh	r1, [r7, #12]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	9302      	str	r3, [sp, #8]
 8003f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	222e      	movs	r2, #46	; 0x2e
 8003f6a:	f7ff fe2d 	bl	8003bc8 <lcd_ShowChar>
			t++;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	3301      	adds	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	3301      	adds	r3, #1
 8003f78:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	7dbb      	ldrb	r3, [r7, #22]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	fb12 f303 	smulbb	r3, r2, r3
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	b298      	uxth	r0, r3
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	3330      	adds	r3, #48	; 0x30
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	88bc      	ldrh	r4, [r7, #4]
 8003f96:	89b9      	ldrh	r1, [r7, #12]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9302      	str	r3, [sp, #8]
 8003f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	f7ff fe0e 	bl	8003bc8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
 8003fb2:	7dfa      	ldrb	r2, [r7, #23]
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d3a3      	bcc.n	8003f02 <lcd_ShowFloatNum+0x46>
	}
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd90      	pop	{r4, r7, pc}
 8003fc4:	42c80000 	.word	0x42c80000
 8003fc8:	cccccccd 	.word	0xcccccccd

08003fcc <lcd_ShowPicture>:

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4623      	mov	r3, r4
 8003fdc:	80fb      	strh	r3, [r7, #6]
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80bb      	strh	r3, [r7, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	807b      	strh	r3, [r7, #2]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29c      	uxth	r4, r3
 8003ffa:	88ba      	ldrh	r2, [r7, #4]
 8003ffc:	883b      	ldrh	r3, [r7, #0]
 8003ffe:	4413      	add	r3, r2
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29b      	uxth	r3, r3
 8004006:	88b9      	ldrh	r1, [r7, #4]
 8004008:	88f8      	ldrh	r0, [r7, #6]
 800400a:	4622      	mov	r2, r4
 800400c:	f7ff fc56 	bl	80038bc <lcd_AddressSet>
	for(i=0;i<length;i++)
 8004010:	2300      	movs	r3, #0
 8004012:	82fb      	strh	r3, [r7, #22]
 8004014:	e027      	b.n	8004066 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8004016:	2300      	movs	r3, #0
 8004018:	82bb      	strh	r3, [r7, #20]
 800401a:	e01d      	b.n	8004058 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004022:	4413      	add	r3, r2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	3301      	adds	r3, #1
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	4413      	add	r3, r2
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	b21a      	sxth	r2, r3
 800403c:	7bbb      	ldrb	r3, [r7, #14]
 800403e:	b21b      	sxth	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	b21b      	sxth	r3, r3
 8004044:	b29b      	uxth	r3, r3
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fc16 	bl	8003878 <LCD_WR_DATA>
			k++;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	3301      	adds	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8004052:	8abb      	ldrh	r3, [r7, #20]
 8004054:	3301      	adds	r3, #1
 8004056:	82bb      	strh	r3, [r7, #20]
 8004058:	8aba      	ldrh	r2, [r7, #20]
 800405a:	883b      	ldrh	r3, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d3dd      	bcc.n	800401c <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8004060:	8afb      	ldrh	r3, [r7, #22]
 8004062:	3301      	adds	r3, #1
 8004064:	82fb      	strh	r3, [r7, #22]
 8004066:	8afa      	ldrh	r2, [r7, #22]
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	429a      	cmp	r2, r3
 800406c:	d3d3      	bcc.n	8004016 <lcd_ShowPicture+0x4a>
		}
	}
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}

08004078 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <lcd_SetDir+0x44>)
 8004094:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004098:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <lcd_SetDir+0x44>)
 800409c:	22f0      	movs	r2, #240	; 0xf0
 800409e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80040a0:	e006      	b.n	80040b0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <lcd_SetDir+0x44>)
 80040a4:	22f0      	movs	r2, #240	; 0xf0
 80040a6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <lcd_SetDir+0x44>)
 80040aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80040ae:	805a      	strh	r2, [r3, #2]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20000368 	.word	0x20000368

080040c0 <lcd_init>:


void lcd_init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80040c4:	2200      	movs	r2, #0
 80040c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040ca:	48aa      	ldr	r0, [pc, #680]	; (8004374 <lcd_init+0x2b4>)
 80040cc:	f004 f878 	bl	80081c0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80040d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040d4:	f002 fd76 	bl	8006bc4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80040d8:	2201      	movs	r2, #1
 80040da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040de:	48a5      	ldr	r0, [pc, #660]	; (8004374 <lcd_init+0x2b4>)
 80040e0:	f004 f86e 	bl	80081c0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80040e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040e8:	f002 fd6c 	bl	8006bc4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80040ec:	2000      	movs	r0, #0
 80040ee:	f7ff ffc3 	bl	8004078 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80040f2:	20d3      	movs	r0, #211	; 0xd3
 80040f4:	f7ff fbb0 	bl	8003858 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80040f8:	f7ff fbce 	bl	8003898 <LCD_RD_DATA>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	4b9d      	ldr	r3, [pc, #628]	; (8004378 <lcd_init+0x2b8>)
 8004102:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8004104:	f7ff fbc8 	bl	8003898 <LCD_RD_DATA>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	4b9a      	ldr	r3, [pc, #616]	; (8004378 <lcd_init+0x2b8>)
 800410e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8004110:	f7ff fbc2 	bl	8003898 <LCD_RD_DATA>
 8004114:	4603      	mov	r3, r0
 8004116:	461a      	mov	r2, r3
 8004118:	4b97      	ldr	r3, [pc, #604]	; (8004378 <lcd_init+0x2b8>)
 800411a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800411c:	4b96      	ldr	r3, [pc, #600]	; (8004378 <lcd_init+0x2b8>)
 800411e:	889b      	ldrh	r3, [r3, #4]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	b29a      	uxth	r2, r3
 8004124:	4b94      	ldr	r3, [pc, #592]	; (8004378 <lcd_init+0x2b8>)
 8004126:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8004128:	f7ff fbb6 	bl	8003898 <LCD_RD_DATA>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	4b91      	ldr	r3, [pc, #580]	; (8004378 <lcd_init+0x2b8>)
 8004132:	889b      	ldrh	r3, [r3, #4]
 8004134:	4313      	orrs	r3, r2
 8004136:	b29a      	uxth	r2, r3
 8004138:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <lcd_init+0x2b8>)
 800413a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800413c:	20cf      	movs	r0, #207	; 0xcf
 800413e:	f7ff fb8b 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004142:	2000      	movs	r0, #0
 8004144:	f7ff fb98 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8004148:	20c1      	movs	r0, #193	; 0xc1
 800414a:	f7ff fb95 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800414e:	2030      	movs	r0, #48	; 0x30
 8004150:	f7ff fb92 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8004154:	20ed      	movs	r0, #237	; 0xed
 8004156:	f7ff fb7f 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800415a:	2064      	movs	r0, #100	; 0x64
 800415c:	f7ff fb8c 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8004160:	2003      	movs	r0, #3
 8004162:	f7ff fb89 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8004166:	2012      	movs	r0, #18
 8004168:	f7ff fb86 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800416c:	2081      	movs	r0, #129	; 0x81
 800416e:	f7ff fb83 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8004172:	20e8      	movs	r0, #232	; 0xe8
 8004174:	f7ff fb70 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8004178:	2085      	movs	r0, #133	; 0x85
 800417a:	f7ff fb7d 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800417e:	2010      	movs	r0, #16
 8004180:	f7ff fb7a 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8004184:	207a      	movs	r0, #122	; 0x7a
 8004186:	f7ff fb77 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800418a:	20cb      	movs	r0, #203	; 0xcb
 800418c:	f7ff fb64 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8004190:	2039      	movs	r0, #57	; 0x39
 8004192:	f7ff fb71 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8004196:	202c      	movs	r0, #44	; 0x2c
 8004198:	f7ff fb6e 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800419c:	2000      	movs	r0, #0
 800419e:	f7ff fb6b 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80041a2:	2034      	movs	r0, #52	; 0x34
 80041a4:	f7ff fb68 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80041a8:	2002      	movs	r0, #2
 80041aa:	f7ff fb65 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80041ae:	20f7      	movs	r0, #247	; 0xf7
 80041b0:	f7ff fb52 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80041b4:	2020      	movs	r0, #32
 80041b6:	f7ff fb5f 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80041ba:	20ea      	movs	r0, #234	; 0xea
 80041bc:	f7ff fb4c 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7ff fb59 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7ff fb56 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80041cc:	20c0      	movs	r0, #192	; 0xc0
 80041ce:	f7ff fb43 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80041d2:	201b      	movs	r0, #27
 80041d4:	f7ff fb50 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80041d8:	20c1      	movs	r0, #193	; 0xc1
 80041da:	f7ff fb3d 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80041de:	2001      	movs	r0, #1
 80041e0:	f7ff fb4a 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80041e4:	20c5      	movs	r0, #197	; 0xc5
 80041e6:	f7ff fb37 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80041ea:	2030      	movs	r0, #48	; 0x30
 80041ec:	f7ff fb44 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80041f0:	2030      	movs	r0, #48	; 0x30
 80041f2:	f7ff fb41 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80041f6:	20c7      	movs	r0, #199	; 0xc7
 80041f8:	f7ff fb2e 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80041fc:	20b7      	movs	r0, #183	; 0xb7
 80041fe:	f7ff fb3b 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8004202:	2036      	movs	r0, #54	; 0x36
 8004204:	f7ff fb28 	bl	8003858 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8004208:	2008      	movs	r0, #8
 800420a:	f7ff fb35 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800420e:	203a      	movs	r0, #58	; 0x3a
 8004210:	f7ff fb22 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8004214:	2055      	movs	r0, #85	; 0x55
 8004216:	f7ff fb2f 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800421a:	20b1      	movs	r0, #177	; 0xb1
 800421c:	f7ff fb1c 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004220:	2000      	movs	r0, #0
 8004222:	f7ff fb29 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8004226:	201a      	movs	r0, #26
 8004228:	f7ff fb26 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800422c:	20b6      	movs	r0, #182	; 0xb6
 800422e:	f7ff fb13 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8004232:	200a      	movs	r0, #10
 8004234:	f7ff fb20 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8004238:	20a2      	movs	r0, #162	; 0xa2
 800423a:	f7ff fb1d 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800423e:	20f2      	movs	r0, #242	; 0xf2
 8004240:	f7ff fb0a 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004244:	2000      	movs	r0, #0
 8004246:	f7ff fb17 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800424a:	2026      	movs	r0, #38	; 0x26
 800424c:	f7ff fb04 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8004250:	2001      	movs	r0, #1
 8004252:	f7ff fb11 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8004256:	20e0      	movs	r0, #224	; 0xe0
 8004258:	f7ff fafe 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800425c:	200f      	movs	r0, #15
 800425e:	f7ff fb0b 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8004262:	202a      	movs	r0, #42	; 0x2a
 8004264:	f7ff fb08 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8004268:	2028      	movs	r0, #40	; 0x28
 800426a:	f7ff fb05 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800426e:	2008      	movs	r0, #8
 8004270:	f7ff fb02 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8004274:	200e      	movs	r0, #14
 8004276:	f7ff faff 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800427a:	2008      	movs	r0, #8
 800427c:	f7ff fafc 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8004280:	2054      	movs	r0, #84	; 0x54
 8004282:	f7ff faf9 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8004286:	20a9      	movs	r0, #169	; 0xa9
 8004288:	f7ff faf6 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800428c:	2043      	movs	r0, #67	; 0x43
 800428e:	f7ff faf3 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8004292:	200a      	movs	r0, #10
 8004294:	f7ff faf0 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8004298:	200f      	movs	r0, #15
 800429a:	f7ff faed 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800429e:	2000      	movs	r0, #0
 80042a0:	f7ff faea 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f7ff fae7 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80042aa:	2000      	movs	r0, #0
 80042ac:	f7ff fae4 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80042b0:	2000      	movs	r0, #0
 80042b2:	f7ff fae1 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80042b6:	20e1      	movs	r0, #225	; 0xe1
 80042b8:	f7ff face 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80042bc:	2000      	movs	r0, #0
 80042be:	f7ff fadb 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80042c2:	2015      	movs	r0, #21
 80042c4:	f7ff fad8 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80042c8:	2017      	movs	r0, #23
 80042ca:	f7ff fad5 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80042ce:	2007      	movs	r0, #7
 80042d0:	f7ff fad2 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80042d4:	2011      	movs	r0, #17
 80042d6:	f7ff facf 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80042da:	2006      	movs	r0, #6
 80042dc:	f7ff facc 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80042e0:	202b      	movs	r0, #43	; 0x2b
 80042e2:	f7ff fac9 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80042e6:	2056      	movs	r0, #86	; 0x56
 80042e8:	f7ff fac6 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80042ec:	203c      	movs	r0, #60	; 0x3c
 80042ee:	f7ff fac3 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80042f2:	2005      	movs	r0, #5
 80042f4:	f7ff fac0 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80042f8:	2010      	movs	r0, #16
 80042fa:	f7ff fabd 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80042fe:	200f      	movs	r0, #15
 8004300:	f7ff faba 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8004304:	203f      	movs	r0, #63	; 0x3f
 8004306:	f7ff fab7 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800430a:	203f      	movs	r0, #63	; 0x3f
 800430c:	f7ff fab4 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8004310:	200f      	movs	r0, #15
 8004312:	f7ff fab1 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8004316:	202b      	movs	r0, #43	; 0x2b
 8004318:	f7ff fa9e 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800431c:	2000      	movs	r0, #0
 800431e:	f7ff faab 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004322:	2000      	movs	r0, #0
 8004324:	f7ff faa8 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8004328:	2001      	movs	r0, #1
 800432a:	f7ff faa5 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800432e:	203f      	movs	r0, #63	; 0x3f
 8004330:	f7ff faa2 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8004334:	202a      	movs	r0, #42	; 0x2a
 8004336:	f7ff fa8f 	bl	8003858 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800433a:	2000      	movs	r0, #0
 800433c:	f7ff fa9c 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004340:	2000      	movs	r0, #0
 8004342:	f7ff fa99 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004346:	2000      	movs	r0, #0
 8004348:	f7ff fa96 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800434c:	20ef      	movs	r0, #239	; 0xef
 800434e:	f7ff fa93 	bl	8003878 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8004352:	2011      	movs	r0, #17
 8004354:	f7ff fa80 	bl	8003858 <LCD_WR_REG>
	HAL_Delay(120);
 8004358:	2078      	movs	r0, #120	; 0x78
 800435a:	f002 fc33 	bl	8006bc4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800435e:	2029      	movs	r0, #41	; 0x29
 8004360:	f7ff fa7a 	bl	8003858 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8004364:	2201      	movs	r2, #1
 8004366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800436a:	4804      	ldr	r0, [pc, #16]	; (800437c <lcd_init+0x2bc>)
 800436c:	f003 ff28 	bl	80081c0 <HAL_GPIO_WritePin>
}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40020800 	.word	0x40020800
 8004378:	20000368 	.word	0x20000368
 800437c:	40020000 	.word	0x40020000

08004380 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	b29a      	uxth	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	b29b      	uxth	r3, r3
 8004396:	4413      	add	r3, r2
 8004398:	b298      	uxth	r0, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	b29a      	uxth	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8b3a      	ldrh	r2, [r7, #24]
 80043a8:	4619      	mov	r1, r3
 80043aa:	f7ff fb3b 	bl	8003a24 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	b298      	uxth	r0, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	8b3a      	ldrh	r2, [r7, #24]
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7ff fb2b 	bl	8003a24 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	b298      	uxth	r0, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8b3a      	ldrh	r2, [r7, #24]
 80043e8:	4619      	mov	r1, r3
 80043ea:	f7ff fb1b 	bl	8003a24 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	b298      	uxth	r0, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	b29b      	uxth	r3, r3
 8004406:	8b3a      	ldrh	r2, [r7, #24]
 8004408:	4619      	mov	r1, r3
 800440a:	f7ff fb0b 	bl	8003a24 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	b29a      	uxth	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	4413      	add	r3, r2
 8004418:	b298      	uxth	r0, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	b29b      	uxth	r3, r3
 8004422:	4413      	add	r3, r2
 8004424:	b29b      	uxth	r3, r3
 8004426:	8b3a      	ldrh	r2, [r7, #24]
 8004428:	4619      	mov	r1, r3
 800442a:	f7ff fafb 	bl	8003a24 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	b29a      	uxth	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	b298      	uxth	r0, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	b29b      	uxth	r3, r3
 8004442:	4413      	add	r3, r2
 8004444:	b29b      	uxth	r3, r3
 8004446:	8b3a      	ldrh	r2, [r7, #24]
 8004448:	4619      	mov	r1, r3
 800444a:	f7ff faeb 	bl	8003a24 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	b29a      	uxth	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4413      	add	r3, r2
 8004458:	b298      	uxth	r0, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	b29b      	uxth	r3, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	b29b      	uxth	r3, r3
 8004466:	8b3a      	ldrh	r2, [r7, #24]
 8004468:	4619      	mov	r1, r3
 800446a:	f7ff fadb 	bl	8003a24 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	b29a      	uxth	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	b298      	uxth	r0, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	b29b      	uxth	r3, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	b29b      	uxth	r3, r3
 8004486:	8b3a      	ldrh	r2, [r7, #24]
 8004488:	4619      	mov	r1, r3
 800448a:	f7ff facb 	bl	8003a24 <lcd_DrawPoint>
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b08a      	sub	sp, #40	; 0x28
 800449a:	af02      	add	r7, sp, #8
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	f1c3 0303 	rsb	r3, r3, #3
 80044b6:	613b      	str	r3, [r7, #16]


	if (fill)
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d04f      	beq.n	800455e <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80044be:	e029      	b.n	8004514 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	e00a      	b.n	80044dc <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ff55 	bl	8004380 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	3301      	adds	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	ddf0      	ble.n	80044c6 <lcd_DrawCircle+0x30>

			if (d < 0) {
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da06      	bge.n	80044f8 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	009a      	lsls	r2, r3, #2
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4413      	add	r3, r2
 80044f2:	3306      	adds	r3, #6
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	e00a      	b.n	800450e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	009a      	lsls	r2, r3, #2
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	330a      	adds	r3, #10
 8004506:	613b      	str	r3, [r7, #16]
				y--;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	3b01      	subs	r3, #1
 800450c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	ddd1      	ble.n	80044c0 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800451c:	e023      	b.n	8004566 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff ff29 	bl	8004380 <_draw_circle_8>
			if (d < 0) {
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	da06      	bge.n	8004542 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	009a      	lsls	r2, r3, #2
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4413      	add	r3, r2
 800453c:	3306      	adds	r3, #6
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e00a      	b.n	8004558 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	009a      	lsls	r2, r3, #2
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4413      	add	r3, r2
 800454e:	330a      	adds	r3, #10
 8004550:	613b      	str	r3, [r7, #16]
				y--;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	3b01      	subs	r3, #1
 8004556:	61bb      	str	r3, [r7, #24]
			x++;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	3301      	adds	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	429a      	cmp	r2, r3
 8004564:	dddb      	ble.n	800451e <lcd_DrawCircle+0x88>
}
 8004566:	bf00      	nop
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800456e:	b590      	push	{r4, r7, lr}
 8004570:	b08b      	sub	sp, #44	; 0x2c
 8004572:	af04      	add	r7, sp, #16
 8004574:	60ba      	str	r2, [r7, #8]
 8004576:	461a      	mov	r2, r3
 8004578:	4603      	mov	r3, r0
 800457a:	81fb      	strh	r3, [r7, #14]
 800457c:	460b      	mov	r3, r1
 800457e:	81bb      	strh	r3, [r7, #12]
 8004580:	4613      	mov	r3, r2
 8004582:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8004584:	89fb      	ldrh	r3, [r7, #14]
 8004586:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8004588:	2300      	movs	r3, #0
 800458a:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800458c:	e034      	b.n	80045f8 <lcd_ShowStr+0x8a>
	{
		if(!bHz)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d131      	bne.n	80045f8 <lcd_ShowStr+0x8a>
		{
//			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
			if(*str>0x80)bHz=1;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b80      	cmp	r3, #128	; 0x80
 800459a:	d902      	bls.n	80045a2 <lcd_ShowStr+0x34>
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
 80045a0:	e02a      	b.n	80045f8 <lcd_ShowStr+0x8a>
			else
			{
				if(*str==0x0D)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b0d      	cmp	r3, #13
 80045a8:	d10b      	bne.n	80045c2 <lcd_ShowStr+0x54>
				{
					y+=sizey;
 80045aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	89bb      	ldrh	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80045b6:	8abb      	ldrh	r3, [r7, #20]
 80045b8:	81fb      	strh	r3, [r7, #14]
					str++;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	3301      	adds	r3, #1
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	e017      	b.n	80045f2 <lcd_ShowStr+0x84>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	88fc      	ldrh	r4, [r7, #6]
 80045c8:	89b9      	ldrh	r1, [r7, #12]
 80045ca:	89f8      	ldrh	r0, [r7, #14]
 80045cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045d0:	9302      	str	r3, [sp, #8]
 80045d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4623      	mov	r3, r4
 80045de:	f7ff faf3 	bl	8003bc8 <lcd_ShowChar>
					x+=sizey/2;
 80045e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	89fb      	ldrh	r3, [r7, #14]
 80045ee:	4413      	add	r3, r2
 80045f0:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	3301      	adds	r3, #1
 80045f6:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1c6      	bne.n	800458e <lcd_ShowStr+0x20>
			}
		}
	}
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd90      	pop	{r4, r7, pc}
	...

0800460c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af04      	add	r7, sp, #16
 8004612:	60ba      	str	r2, [r7, #8]
 8004614:	461a      	mov	r2, r3
 8004616:	4603      	mov	r3, r0
 8004618:	81fb      	strh	r3, [r7, #14]
 800461a:	460b      	mov	r3, r1
 800461c:	81bb      	strh	r3, [r7, #12]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8004622:	68b8      	ldr	r0, [r7, #8]
 8004624:	f7fb fdd4 	bl	80001d0 <strlen>
 8004628:	4603      	mov	r3, r0
 800462a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800462c:	4b0f      	ldr	r3, [pc, #60]	; (800466c <lcd_StrCenter+0x60>)
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	0fda      	lsrs	r2, r3, #31
 800463a:	4413      	add	r3, r2
 800463c:	105b      	asrs	r3, r3, #1
 800463e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8004640:	89fa      	ldrh	r2, [r7, #14]
 8004642:	8abb      	ldrh	r3, [r7, #20]
 8004644:	4413      	add	r3, r2
 8004646:	b298      	uxth	r0, r3
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	89b9      	ldrh	r1, [r7, #12]
 800464c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004650:	9302      	str	r3, [sp, #8]
 8004652:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	8c3b      	ldrh	r3, [r7, #32]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	f7ff ff85 	bl	800456e <lcd_ShowStr>
}
 8004664:	bf00      	nop
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000368 	.word	0x20000368

08004670 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8004674:	2201      	movs	r2, #1
 8004676:	2140      	movs	r1, #64	; 0x40
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <led7_init+0x14>)
 800467a:	f003 fda1 	bl	80081c0 <HAL_GPIO_WritePin>
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021800 	.word	0x40021800

08004688 <led7_Scan>:

void led7_Scan(){
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <led7_Scan+0x104>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	b29a      	uxth	r2, r3
 8004694:	4b3d      	ldr	r3, [pc, #244]	; (800478c <led7_Scan+0x104>)
 8004696:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8004698:	4b3d      	ldr	r3, [pc, #244]	; (8004790 <led7_Scan+0x108>)
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <led7_Scan+0x10c>)
 80046a0:	5c9b      	ldrb	r3, [r3, r2]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	b21a      	sxth	r2, r3
 80046a6:	4b39      	ldr	r3, [pc, #228]	; (800478c <led7_Scan+0x104>)
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b21b      	sxth	r3, r3
 80046ac:	4313      	orrs	r3, r2
 80046ae:	b21b      	sxth	r3, r3
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	4b36      	ldr	r3, [pc, #216]	; (800478c <led7_Scan+0x104>)
 80046b4:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80046b6:	4b36      	ldr	r3, [pc, #216]	; (8004790 <led7_Scan+0x108>)
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d846      	bhi.n	800474c <led7_Scan+0xc4>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <led7_Scan+0x3c>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	080046f3 	.word	0x080046f3
 80046cc:	08004711 	.word	0x08004711
 80046d0:	0800472f 	.word	0x0800472f
	case 0:
		spi_buffer |= 0x00b0;
 80046d4:	4b2d      	ldr	r3, [pc, #180]	; (800478c <led7_Scan+0x104>)
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80046dc:	b29a      	uxth	r2, r3
 80046de:	4b2b      	ldr	r3, [pc, #172]	; (800478c <led7_Scan+0x104>)
 80046e0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80046e2:	4b2a      	ldr	r3, [pc, #168]	; (800478c <led7_Scan+0x104>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	4b27      	ldr	r3, [pc, #156]	; (800478c <led7_Scan+0x104>)
 80046ee:	801a      	strh	r2, [r3, #0]
		break;
 80046f0:	e02d      	b.n	800474e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <led7_Scan+0x104>)
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	4b23      	ldr	r3, [pc, #140]	; (800478c <led7_Scan+0x104>)
 80046fe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8004700:	4b22      	ldr	r3, [pc, #136]	; (800478c <led7_Scan+0x104>)
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	f023 0320 	bic.w	r3, r3, #32
 8004708:	b29a      	uxth	r2, r3
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <led7_Scan+0x104>)
 800470c:	801a      	strh	r2, [r3, #0]
		break;
 800470e:	e01e      	b.n	800474e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8004710:	4b1e      	ldr	r3, [pc, #120]	; (800478c <led7_Scan+0x104>)
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004718:	b29a      	uxth	r2, r3
 800471a:	4b1c      	ldr	r3, [pc, #112]	; (800478c <led7_Scan+0x104>)
 800471c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800471e:	4b1b      	ldr	r3, [pc, #108]	; (800478c <led7_Scan+0x104>)
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	f023 0310 	bic.w	r3, r3, #16
 8004726:	b29a      	uxth	r2, r3
 8004728:	4b18      	ldr	r3, [pc, #96]	; (800478c <led7_Scan+0x104>)
 800472a:	801a      	strh	r2, [r3, #0]
		break;
 800472c:	e00f      	b.n	800474e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <led7_Scan+0x104>)
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004736:	b29a      	uxth	r2, r3
 8004738:	4b14      	ldr	r3, [pc, #80]	; (800478c <led7_Scan+0x104>)
 800473a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800473c:	4b13      	ldr	r3, [pc, #76]	; (800478c <led7_Scan+0x104>)
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004744:	b29a      	uxth	r2, r3
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <led7_Scan+0x104>)
 8004748:	801a      	strh	r2, [r3, #0]
		break;
 800474a:	e000      	b.n	800474e <led7_Scan+0xc6>
	default:
		break;
 800474c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <led7_Scan+0x108>)
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	3301      	adds	r3, #1
 8004754:	425a      	negs	r2, r3
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	f002 0203 	and.w	r2, r2, #3
 800475e:	bf58      	it	pl
 8004760:	4253      	negpl	r3, r2
 8004762:	b29a      	uxth	r2, r3
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <led7_Scan+0x108>)
 8004766:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8004768:	2200      	movs	r2, #0
 800476a:	2140      	movs	r1, #64	; 0x40
 800476c:	480a      	ldr	r0, [pc, #40]	; (8004798 <led7_Scan+0x110>)
 800476e:	f003 fd27 	bl	80081c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8004772:	2301      	movs	r3, #1
 8004774:	2202      	movs	r2, #2
 8004776:	4905      	ldr	r1, [pc, #20]	; (800478c <led7_Scan+0x104>)
 8004778:	4808      	ldr	r0, [pc, #32]	; (800479c <led7_Scan+0x114>)
 800477a:	f005 f9f8 	bl	8009b6e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800477e:	2201      	movs	r2, #1
 8004780:	2140      	movs	r1, #64	; 0x40
 8004782:	4805      	ldr	r0, [pc, #20]	; (8004798 <led7_Scan+0x110>)
 8004784:	f003 fd1c 	bl	80081c0 <HAL_GPIO_WritePin>
}
 8004788:	bf00      	nop
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000066 	.word	0x20000066
 8004790:	20000178 	.word	0x20000178
 8004794:	20000058 	.word	0x20000058
 8004798:	40021800 	.word	0x40021800
 800479c:	20000410 	.word	0x20000410

080047a0 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db0e      	blt.n	80047d2 <led7_SetDigit+0x32>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b09      	cmp	r3, #9
 80047b8:	dc0b      	bgt.n	80047d2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80047ba:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <led7_SetDigit+0x40>)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	b2d9      	uxtb	r1, r3
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <led7_SetDigit+0x44>)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4413      	add	r3, r2
 80047ce:	460a      	mov	r2, r1
 80047d0:	701a      	strb	r2, [r3, #0]
	}
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	2000005c 	.word	0x2000005c
 80047e4:	20000058 	.word	0x20000058

080047e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047ec:	f002 f978 	bl	8006ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047f0:	f000 f82e 	bl	8004850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047f4:	f7fd fe02 	bl	80023fc <MX_GPIO_Init>
  MX_DMA_Init();
 80047f8:	f7fc fd66 	bl	80012c8 <MX_DMA_Init>
  MX_ADC1_Init();
 80047fc:	f7fc fbc0 	bl	8000f80 <MX_ADC1_Init>
  MX_FSMC_Init();
 8004800:	f7fd fb26 	bl	8001e50 <MX_FSMC_Init>
  MX_I2C1_Init();
 8004804:	f7fd ff28 	bl	8002658 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004808:	f000 fbf4 	bl	8004ff4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800480c:	f001 f85c 	bl	80058c8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004810:	f002 f83c 	bl	800688c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004814:	f001 f808 	bl	8005828 <MX_TIM1_Init>
  MX_TIM13_Init();
 8004818:	f001 f8a2 	bl	8005960 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 800481c:	f002 f860 	bl	80068e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8004820:	f000 f880 	bl	8004924 <system_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Scan touch screen
	  // 50ms task
	  if(flag_timer2 == 1){
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <main+0x64>)
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d1fb      	bne.n	8004824 <main+0x3c>
		  flag_timer2 = 0;
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <main+0x64>)
 800482e:	2200      	movs	r2, #0
 8004830:	801a      	strh	r2, [r3, #0]
		  touch_Scan();
 8004832:	f001 ff97 	bl	8006764 <touch_Scan>
		  button_Scan();
 8004836:	f7fc fcdb 	bl	80011f0 <button_Scan>

		  input_process();
 800483a:	f7fd f81d 	bl	8001878 <input_process>
		  fsm_ingame();
 800483e:	f7fd fa5f 	bl	8001d00 <fsm_ingame>
		  update_7seg_time();
 8004842:	f7fe ff6d 	bl	8003720 <update_7seg_time>
		  process_esp();
 8004846:	f7fc fe0f 	bl	8001468 <process_esp>
	  if(flag_timer2 == 1){
 800484a:	e7eb      	b.n	8004824 <main+0x3c>
 800484c:	2000017a 	.word	0x2000017a

08004850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b094      	sub	sp, #80	; 0x50
 8004854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004856:	f107 0320 	add.w	r3, r7, #32
 800485a:	2230      	movs	r2, #48	; 0x30
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f007 ff7a 	bl	800c758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004874:	2300      	movs	r3, #0
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	4b28      	ldr	r3, [pc, #160]	; (800491c <SystemClock_Config+0xcc>)
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <SystemClock_Config+0xcc>)
 800487e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004882:	6413      	str	r3, [r2, #64]	; 0x40
 8004884:	4b25      	ldr	r3, [pc, #148]	; (800491c <SystemClock_Config+0xcc>)
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004890:	2300      	movs	r3, #0
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	4b22      	ldr	r3, [pc, #136]	; (8004920 <SystemClock_Config+0xd0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a21      	ldr	r2, [pc, #132]	; (8004920 <SystemClock_Config+0xd0>)
 800489a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <SystemClock_Config+0xd0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048ac:	2302      	movs	r3, #2
 80048ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048b0:	2301      	movs	r3, #1
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048b4:	2310      	movs	r3, #16
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048b8:	2302      	movs	r3, #2
 80048ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048bc:	2300      	movs	r3, #0
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80048c0:	2308      	movs	r3, #8
 80048c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80048c4:	23a8      	movs	r3, #168	; 0xa8
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048c8:	2302      	movs	r3, #2
 80048ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80048cc:	2304      	movs	r3, #4
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048d0:	f107 0320 	add.w	r3, r7, #32
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 fc4d 	bl	8009174 <HAL_RCC_OscConfig>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80048e0:	f000 f846 	bl	8004970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048e4:	230f      	movs	r3, #15
 80048e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048e8:	2302      	movs	r3, #2
 80048ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80048f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80048f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80048fc:	f107 030c 	add.w	r3, r7, #12
 8004900:	2105      	movs	r1, #5
 8004902:	4618      	mov	r0, r3
 8004904:	f004 feae 	bl	8009664 <HAL_RCC_ClockConfig>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800490e:	f000 f82f 	bl	8004970 <Error_Handler>
  }
}
 8004912:	bf00      	nop
 8004914:	3750      	adds	r7, #80	; 0x50
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800
 8004920:	40007000 	.word	0x40007000

08004924 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
	  timer_init();
 8004928:	f000 fa50 	bl	8004dcc <timer_init>
	  button_init();
 800492c:	f7fc fc54 	bl	80011d8 <button_init>
	  lcd_init();
 8004930:	f7ff fbc6 	bl	80040c0 <lcd_init>
	  sensor_init();
 8004934:	f000 f822 	bl	800497c <sensor_init>
	  touch_init();
 8004938:	f001 ff04 	bl	8006744 <touch_init>
	  led7_init();
 800493c:	f7ff fe98 	bl	8004670 <led7_init>
	  //ds3231_init();
	  uart_init_esp();
 8004940:	f001 ff44 	bl	80067cc <uart_init_esp>

	  home_lcd();		// Hien thi man hinh vua moi dau
 8004944:	f7fd feb6 	bl	80026b4 <home_lcd>
	  snake_init();		// Khoi tao ran
 8004948:	f000 f86a 	bl	8004a20 <snake_init>
	  reset_7seg();
 800494c:	f7fe fed0 	bl	80036f0 <reset_7seg>

	  setTimer2(50);
 8004950:	2032      	movs	r0, #50	; 0x32
 8004952:	f000 fa49 	bl	8004de8 <setTimer2>
	  setTimer3(50);
 8004956:	2032      	movs	r0, #50	; 0x32
 8004958:	f000 fa62 	bl	8004e20 <setTimer3>
	  setTimer4(3000);
 800495c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004960:	f000 fa7a 	bl	8004e58 <setTimer4>
	  setTimer5(1000);
 8004964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004968:	f000 fa92 	bl	8004e90 <setTimer5>
}
 800496c:	bf00      	nop
 800496e:	bd80      	pop	{r7, pc}

08004970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004974:	b672      	cpsid	i
}
 8004976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004978:	e7fe      	b.n	8004978 <Error_Handler+0x8>
	...

0800497c <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8004980:	2205      	movs	r2, #5
 8004982:	4903      	ldr	r1, [pc, #12]	; (8004990 <sensor_init+0x14>)
 8004984:	4803      	ldr	r0, [pc, #12]	; (8004994 <sensor_init+0x18>)
 8004986:	f002 f985 	bl	8006c94 <HAL_ADC_Start_DMA>
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000404 	.word	0x20000404
 8004994:	200001a8 	.word	0x200001a8

08004998 <sensor_Read>:

void sensor_Read(){
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800499c:	2205      	movs	r2, #5
 800499e:	4903      	ldr	r1, [pc, #12]	; (80049ac <sensor_Read+0x14>)
 80049a0:	4803      	ldr	r0, [pc, #12]	; (80049b0 <sensor_Read+0x18>)
 80049a2:	f002 f977 	bl	8006c94 <HAL_ADC_Start_DMA>
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000404 	.word	0x20000404
 80049b0:	200001a8 	.word	0x200001a8

080049b4 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
	return adc_receive[2];
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <sensor_GetLight+0x14>)
 80049ba:	889b      	ldrh	r3, [r3, #4]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000404 	.word	0x20000404

080049cc <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <sensor_GetPotentiometer+0x14>)
 80049d2:	88db      	ldrh	r3, [r3, #6]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000404 	.word	0x20000404

080049e4 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <sensor_GetTemperature+0x30>)
 80049ea:	891b      	ldrh	r3, [r3, #8]
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004a18 <sensor_GetTemperature+0x34>
 80049f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049fc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004a1c <sensor_GetTemperature+0x38>
 8004a00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a04:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a08:	eeb0 0a67 	vmov.f32	s0, s15
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	20000404 	.word	0x20000404
 8004a18:	43a50000 	.word	0x43a50000
 8004a1c:	457ff000 	.word	0x457ff000

08004a20 <snake_init>:
 *      Author: ADMIN
 */

#include "snake.h"

void snake_init(){
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
	snake[0].x = (POS_X_MAX - POS_X_MIN) / 2;
 8004a26:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <snake_init+0x6c>)
 8004a28:	2277      	movs	r2, #119	; 0x77
 8004a2a:	601a      	str	r2, [r3, #0]
	snake[0].y = (POS_Y_MAX - POS_Y_MIN) / 2;
 8004a2c:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <snake_init+0x6c>)
 8004a2e:	225a      	movs	r2, #90	; 0x5a
 8004a30:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 8004a32:	2301      	movs	r3, #1
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	e00d      	b.n	8004a54 <snake_init+0x34>
		snake[i].x = 0;
 8004a38:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <snake_init+0x6c>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 8004a42:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <snake_init+0x6c>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3301      	adds	r3, #1
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	ddee      	ble.n	8004a38 <snake_init+0x18>
	}
	move = UP;
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <snake_init+0x70>)
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	601a      	str	r2, [r3, #0]
	length = 1;
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <snake_init+0x74>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
	current_score = 0;
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <snake_init+0x78>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
	counter_time_score = 0;
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <snake_init+0x7c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
	counter_time = 60;
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <snake_init+0x80>)
 8004a74:	223c      	movs	r2, #60	; 0x3c
 8004a76:	601a      	str	r2, [r3, #0]
	tempFlag = 0;
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <snake_init+0x84>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000260 	.word	0x20000260
 8004a90:	20000160 	.word	0x20000160
 8004a94:	2000004c 	.word	0x2000004c
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	20000164 	.word	0x20000164
 8004aa0:	20000168 	.word	0x20000168
 8004aa4:	2000016c 	.word	0x2000016c

08004aa8 <is_collision_food>:

int is_collision_food(struct Point p){
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	463b      	mov	r3, r7
 8004ab0:	e883 0003 	stmia.w	r3, {r0, r1}
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	dd08      	ble.n	8004acc <is_collision_food+0x24>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2bee      	cmp	r3, #238	; 0xee
 8004abe:	dc05      	bgt.n	8004acc <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8004ac0:	687b      	ldr	r3, [r7, #4]
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8004ac2:	2b12      	cmp	r3, #18
 8004ac4:	dd02      	ble.n	8004acc <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2bc6      	cmp	r3, #198	; 0xc6
 8004aca:	dd01      	ble.n	8004ad0 <is_collision_food+0x28>
		return 1;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e01c      	b.n	8004b0a <is_collision_food+0x62>
	}
	for (int i = 0; i < length; i++){
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e013      	b.n	8004afe <is_collision_food+0x56>
		if (p.x == snake[i].x && p.y == snake[i].y)
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	490f      	ldr	r1, [pc, #60]	; (8004b18 <is_collision_food+0x70>)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d109      	bne.n	8004af8 <is_collision_food+0x50>
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	490c      	ldr	r1, [pc, #48]	; (8004b18 <is_collision_food+0x70>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	440b      	add	r3, r1
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d101      	bne.n	8004af8 <is_collision_food+0x50>
			return 1;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e008      	b.n	8004b0a <is_collision_food+0x62>
	for (int i = 0; i < length; i++){
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <is_collision_food+0x74>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d3e6      	bcc.n	8004ad6 <is_collision_food+0x2e>
	}
	return 0;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000260 	.word	0x20000260
 8004b1c:	2000004c 	.word	0x2000004c

08004b20 <is_collision>:

int is_collision(){
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <is_collision+0x74>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	dd0b      	ble.n	8004b46 <is_collision+0x26>
 8004b2e:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <is_collision+0x74>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2bee      	cmp	r3, #238	; 0xee
 8004b34:	dc07      	bgt.n	8004b46 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 8004b36:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <is_collision+0x74>)
 8004b38:	685b      	ldr	r3, [r3, #4]
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 8004b3a:	2b12      	cmp	r3, #18
 8004b3c:	dd03      	ble.n	8004b46 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <is_collision+0x74>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2bc6      	cmp	r3, #198	; 0xc6
 8004b44:	dd01      	ble.n	8004b4a <is_collision+0x2a>
		return 1;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e01e      	b.n	8004b88 <is_collision+0x68>
	}
	for (int i = 1; i < length; i++){
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	e015      	b.n	8004b7c <is_collision+0x5c>
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
 8004b50:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <is_collision+0x74>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	490f      	ldr	r1, [pc, #60]	; (8004b94 <is_collision+0x74>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d10a      	bne.n	8004b76 <is_collision+0x56>
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <is_collision+0x74>)
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	490b      	ldr	r1, [pc, #44]	; (8004b94 <is_collision+0x74>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	440b      	add	r3, r1
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d101      	bne.n	8004b76 <is_collision+0x56>
			return 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e008      	b.n	8004b88 <is_collision+0x68>
	for (int i = 1; i < length; i++){
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <is_collision+0x78>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3e4      	bcc.n	8004b50 <is_collision+0x30>
	}
	return 0;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	20000260 	.word	0x20000260
 8004b98:	2000004c 	.word	0x2000004c

08004b9c <is_eat>:

int is_eat(){
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
	if (snake[0].x <= (food.x + 6) && snake[0].x >= (food.x - 6) &&
 8004ba0:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <is_eat+0x54>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <is_eat+0x58>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3306      	adds	r3, #6
 8004baa:	429a      	cmp	r2, r3
 8004bac:	dc1d      	bgt.n	8004bea <is_eat+0x4e>
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <is_eat+0x54>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <is_eat+0x58>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3b06      	subs	r3, #6
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	db16      	blt.n	8004bea <is_eat+0x4e>
		snake[0].y <= (food.y + 6) && snake[0].y >= (food.y - 6) ){
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <is_eat+0x54>)
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <is_eat+0x58>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	3306      	adds	r3, #6
	if (snake[0].x <= (food.x + 6) && snake[0].x >= (food.x - 6) &&
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	dc0f      	bgt.n	8004bea <is_eat+0x4e>
		snake[0].y <= (food.y + 6) && snake[0].y >= (food.y - 6) ){
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <is_eat+0x54>)
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <is_eat+0x58>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	3b06      	subs	r3, #6
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	db08      	blt.n	8004bea <is_eat+0x4e>
		point_clr(food);
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <is_eat+0x58>)
 8004bda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bde:	f7fe fd4f 	bl	8003680 <point_clr>
		reDraw_snake();
 8004be2:	f000 f8cf 	bl	8004d84 <reDraw_snake>
		return 1;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <is_eat+0x50>
	}
	return 0;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000260 	.word	0x20000260
 8004bf4:	20000050 	.word	0x20000050

08004bf8 <get_rand>:

int get_rand(int max){
 8004bf8:	b5b0      	push	{r4, r5, r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	return 0 + (int)(rand()*(max - 0 + 1.0)/(1.0 + RAND_MAX));
 8004c00:	f007 fdb2 	bl	800c768 <rand>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fb fc8c 	bl	8000524 <__aeabi_i2d>
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	460d      	mov	r5, r1
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fb fc87 	bl	8000524 <__aeabi_i2d>
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <get_rand+0x5c>)
 8004c1c:	f7fb fb36 	bl	800028c <__adddf3>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4620      	mov	r0, r4
 8004c26:	4629      	mov	r1, r5
 8004c28:	f7fb fce6 	bl	80005f8 <__aeabi_dmul>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <get_rand+0x60>)
 8004c3a:	f7fb fe07 	bl	800084c <__aeabi_ddiv>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fb ff87 	bl	8000b58 <__aeabi_d2iz>
 8004c4a:	4603      	mov	r3, r0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bdb0      	pop	{r4, r5, r7, pc}
 8004c54:	3ff00000 	.word	0x3ff00000
 8004c58:	41e00000 	.word	0x41e00000

08004c5c <rand_food>:

void rand_food(){
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
	struct Point p;
	p.x = get_rand(POS_X_MAX);
 8004c62:	20ef      	movs	r0, #239	; 0xef
 8004c64:	f7ff ffc8 	bl	8004bf8 <get_rand>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	603b      	str	r3, [r7, #0]
	p.y = get_rand(POS_Y_MAX);
 8004c6c:	20c7      	movs	r0, #199	; 0xc7
 8004c6e:	f7ff ffc3 	bl	8004bf8 <get_rand>
 8004c72:	4603      	mov	r3, r0
 8004c74:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004c76:	e009      	b.n	8004c8c <rand_food+0x30>
		p.x = get_rand(POS_X_MAX);
 8004c78:	20ef      	movs	r0, #239	; 0xef
 8004c7a:	f7ff ffbd 	bl	8004bf8 <get_rand>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	603b      	str	r3, [r7, #0]
		p.y = get_rand(POS_Y_MAX);
 8004c82:	20c7      	movs	r0, #199	; 0xc7
 8004c84:	f7ff ffb8 	bl	8004bf8 <get_rand>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c92:	f7ff ff09 	bl	8004aa8 <is_collision_food>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d0ed      	beq.n	8004c78 <rand_food+0x1c>
	}
	food = p;
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <rand_food+0x60>)
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ca6:	e882 0003 	stmia.w	r2, {r0, r1}
	point_food_lcd(food);
 8004caa:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <rand_food+0x60>)
 8004cac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cb0:	f7fe fcd3 	bl	800365a <point_food_lcd>
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000050 	.word	0x20000050

08004cc0 <move_snake>:

void move_snake(){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
	point_clr(snake[length - 1]);
 8004cc6:	4b2c      	ldr	r3, [pc, #176]	; (8004d78 <move_snake+0xb8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <move_snake+0xbc>)
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cd6:	f7fe fcd3 	bl	8003680 <point_clr>
	for (int i = length - 1; i > 0; i--){
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <move_snake+0xb8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	e016      	b.n	8004d12 <move_snake+0x52>
		snake[i].x = snake[i-1].x;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	4a24      	ldr	r2, [pc, #144]	; (8004d7c <move_snake+0xbc>)
 8004cea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004cee:	4923      	ldr	r1, [pc, #140]	; (8004d7c <move_snake+0xbc>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[i].y = snake[i-1].y;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <move_snake+0xbc>)
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	491e      	ldr	r1, [pc, #120]	; (8004d7c <move_snake+0xbc>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	605a      	str	r2, [r3, #4]
	for (int i = length - 1; i > 0; i--){
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dce5      	bgt.n	8004ce4 <move_snake+0x24>
	}
	switch (move) {
 8004d18:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <move_snake+0xc0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d822      	bhi.n	8004d68 <move_snake+0xa8>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <move_snake+0x68>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d45 	.word	0x08004d45
 8004d30:	08004d51 	.word	0x08004d51
 8004d34:	08004d5d 	.word	0x08004d5d
		case RIGHT:
			snake[0].x += 7;
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <move_snake+0xbc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3307      	adds	r3, #7
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <move_snake+0xbc>)
 8004d40:	6013      	str	r3, [r2, #0]
			break;
 8004d42:	e012      	b.n	8004d6a <move_snake+0xaa>
		case LEFT:
			snake[0].x -= 7;
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <move_snake+0xbc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3b07      	subs	r3, #7
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <move_snake+0xbc>)
 8004d4c:	6013      	str	r3, [r2, #0]
			break;
 8004d4e:	e00c      	b.n	8004d6a <move_snake+0xaa>
		case UP:
			snake[0].y -= 7;
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <move_snake+0xbc>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	3b07      	subs	r3, #7
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <move_snake+0xbc>)
 8004d58:	6053      	str	r3, [r2, #4]
			break;
 8004d5a:	e006      	b.n	8004d6a <move_snake+0xaa>
		case DOWN:
			snake[0].y += 7;
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <move_snake+0xbc>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	3307      	adds	r3, #7
 8004d62:	4a06      	ldr	r2, [pc, #24]	; (8004d7c <move_snake+0xbc>)
 8004d64:	6053      	str	r3, [r2, #4]
			break;
 8004d66:	e000      	b.n	8004d6a <move_snake+0xaa>
		default:
			break;
 8004d68:	bf00      	nop
	}
	reDraw_snake();
 8004d6a:	f000 f80b 	bl	8004d84 <reDraw_snake>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	2000004c 	.word	0x2000004c
 8004d7c:	20000260 	.word	0x20000260
 8004d80:	20000160 	.word	0x20000160

08004d84 <reDraw_snake>:

void reDraw_snake(){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
	point_head_lcd(snake[0]);
 8004d8a:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <reDraw_snake+0x40>)
 8004d8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d90:	f7fe fbf6 	bl	8003580 <point_head_lcd>
	for (int i = 1; i < length; i++){
 8004d94:	2301      	movs	r3, #1
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	e00a      	b.n	8004db0 <reDraw_snake+0x2c>
		point_snake_lcd(snake[i]);
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <reDraw_snake+0x40>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004da6:	f7fe fc06 	bl	80035b6 <point_snake_lcd>
	for (int i = 1; i < length; i++){
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3301      	adds	r3, #1
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <reDraw_snake+0x44>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d3ef      	bcc.n	8004d9a <reDraw_snake+0x16>
	}
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20000260 	.word	0x20000260
 8004dc8:	2000004c 	.word	0x2000004c

08004dcc <timer_init>:

uint16_t flag_timer5 = 0;
uint16_t timer5_counter = 0;
uint16_t timer5_MUL = 0;

void timer_init(){
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004dd0:	4803      	ldr	r0, [pc, #12]	; (8004de0 <timer_init+0x14>)
 8004dd2:	f005 fce7 	bl	800a7a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8004dd6:	4803      	ldr	r0, [pc, #12]	; (8004de4 <timer_init+0x18>)
 8004dd8:	f005 fc7c 	bl	800a6d4 <HAL_TIM_Base_Start>
}
 8004ddc:	bf00      	nop
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	200004f8 	.word	0x200004f8
 8004de4:	200004b0 	.word	0x200004b0

08004de8 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8004df2:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <setTimer2+0x2c>)
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <setTimer2+0x2c>)
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <setTimer2+0x30>)
 8004dfe:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <setTimer2+0x34>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	801a      	strh	r2, [r3, #0]
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	2000017e 	.word	0x2000017e
 8004e18:	2000017c 	.word	0x2000017c
 8004e1c:	2000017a 	.word	0x2000017a

08004e20 <setTimer3>:

void setTimer3(uint16_t duration){
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8004e2a:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <setTimer3+0x2c>)
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <setTimer3+0x2c>)
 8004e32:	881a      	ldrh	r2, [r3, #0]
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <setTimer3+0x30>)
 8004e36:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <setTimer3+0x34>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	801a      	strh	r2, [r3, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000184 	.word	0x20000184
 8004e50:	20000182 	.word	0x20000182
 8004e54:	20000180 	.word	0x20000180

08004e58 <setTimer4>:

void setTimer4(uint16_t duration){
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 8004e62:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <setTimer4+0x2c>)
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <setTimer4+0x2c>)
 8004e6a:	881a      	ldrh	r2, [r3, #0]
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <setTimer4+0x30>)
 8004e6e:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <setTimer4+0x34>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	801a      	strh	r2, [r3, #0]
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	2000018a 	.word	0x2000018a
 8004e88:	20000188 	.word	0x20000188
 8004e8c:	20000186 	.word	0x20000186

08004e90 <setTimer5>:

void setTimer5(uint16_t duration){
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <setTimer5+0x2c>)
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <setTimer5+0x2c>)
 8004ea2:	881a      	ldrh	r2, [r3, #0]
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <setTimer5+0x30>)
 8004ea6:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <setTimer5+0x34>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	801a      	strh	r2, [r3, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000190 	.word	0x20000190
 8004ec0:	2000018e 	.word	0x2000018e
 8004ec4:	2000018c 	.word	0x2000018c

08004ec8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed8:	d155      	bne.n	8004f86 <HAL_TIM_PeriodElapsedCallback+0xbe>
		if(timer2_counter > 0){
 8004eda:	4b2d      	ldr	r3, [pc, #180]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d010      	beq.n	8004f04 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8004ee2:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	4b29      	ldr	r3, [pc, #164]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004eec:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0){
 8004eee:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004ef6:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8004efc:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004efe:	881a      	ldrh	r2, [r3, #0]
 8004f00:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8004f02:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d010      	beq.n	8004f2e <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8004f0c:	4b23      	ldr	r3, [pc, #140]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f16:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0){
 8004f18:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8004f20:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004f26:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8004f2c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d010      	beq.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8004f36:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f40:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0){
 8004f42:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8004f4a:	4b18      	ldr	r3, [pc, #96]	; (8004fac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004f56:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8004f58:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d010      	beq.n	8004f82 <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f6a:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0){
 8004f6c:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 8004f74:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 8004f7a:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004f80:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8004f82:	f7ff fb81 	bl	8004688 <led7_Scan>
	}
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000017c 	.word	0x2000017c
 8004f94:	2000017a 	.word	0x2000017a
 8004f98:	2000017e 	.word	0x2000017e
 8004f9c:	20000182 	.word	0x20000182
 8004fa0:	20000180 	.word	0x20000180
 8004fa4:	20000184 	.word	0x20000184
 8004fa8:	20000188 	.word	0x20000188
 8004fac:	20000186 	.word	0x20000186
 8004fb0:	2000018a 	.word	0x2000018a
 8004fb4:	2000018e 	.word	0x2000018e
 8004fb8:	2000018c 	.word	0x2000018c
 8004fbc:	20000190 	.word	0x20000190

08004fc0 <delay_us>:

void delay_us (uint16_t us){
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <delay_us+0x30>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8004fd2:	bf00      	nop
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <delay_us+0x30>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d3f9      	bcc.n	8004fd4 <delay_us+0x14>
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	200004b0 	.word	0x200004b0

08004ff4 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ff8:	4b17      	ldr	r3, [pc, #92]	; (8005058 <MX_SPI1_Init+0x64>)
 8004ffa:	4a18      	ldr	r2, [pc, #96]	; (800505c <MX_SPI1_Init+0x68>)
 8004ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ffe:	4b16      	ldr	r3, [pc, #88]	; (8005058 <MX_SPI1_Init+0x64>)
 8005000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <MX_SPI1_Init+0x64>)
 8005008:	2200      	movs	r2, #0
 800500a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <MX_SPI1_Init+0x64>)
 800500e:	2200      	movs	r2, #0
 8005010:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005012:	4b11      	ldr	r3, [pc, #68]	; (8005058 <MX_SPI1_Init+0x64>)
 8005014:	2200      	movs	r2, #0
 8005016:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005018:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <MX_SPI1_Init+0x64>)
 800501a:	2200      	movs	r2, #0
 800501c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800501e:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <MX_SPI1_Init+0x64>)
 8005020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005024:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <MX_SPI1_Init+0x64>)
 8005028:	2200      	movs	r2, #0
 800502a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <MX_SPI1_Init+0x64>)
 800502e:	2200      	movs	r2, #0
 8005030:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <MX_SPI1_Init+0x64>)
 8005034:	2200      	movs	r2, #0
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <MX_SPI1_Init+0x64>)
 800503a:	2200      	movs	r2, #0
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <MX_SPI1_Init+0x64>)
 8005040:	220a      	movs	r2, #10
 8005042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005044:	4804      	ldr	r0, [pc, #16]	; (8005058 <MX_SPI1_Init+0x64>)
 8005046:	f004 fd09 	bl	8009a5c <HAL_SPI_Init>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005050:	f7ff fc8e 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000410 	.word	0x20000410
 800505c:	40013000 	.word	0x40013000

08005060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_MspInit+0x4c>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	4a0f      	ldr	r2, [pc, #60]	; (80050ac <HAL_MspInit+0x4c>)
 8005070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005074:	6453      	str	r3, [r2, #68]	; 0x44
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <HAL_MspInit+0x4c>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	4b09      	ldr	r3, [pc, #36]	; (80050ac <HAL_MspInit+0x4c>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	4a08      	ldr	r2, [pc, #32]	; (80050ac <HAL_MspInit+0x4c>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_MspInit+0x4c>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800

080050b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	609a      	str	r2, [r3, #8]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a3c      	ldr	r2, [pc, #240]	; (80051c0 <HAL_ADC_MspInit+0x110>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d171      	bne.n	80051b6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	4a3a      	ldr	r2, [pc, #232]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e0:	6453      	str	r3, [r2, #68]	; 0x44
 80050e2:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	4a33      	ldr	r2, [pc, #204]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050f8:	f043 0304 	orr.w	r3, r3, #4
 80050fc:	6313      	str	r3, [r2, #48]	; 0x30
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	6313      	str	r3, [r2, #48]	; 0x30
 800511a:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005126:	2307      	movs	r3, #7
 8005128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800512a:	2303      	movs	r3, #3
 800512c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	4619      	mov	r1, r3
 8005138:	4823      	ldr	r0, [pc, #140]	; (80051c8 <HAL_ADC_MspInit+0x118>)
 800513a:	f002 fe8d 	bl	8007e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800513e:	2303      	movs	r3, #3
 8005140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005142:	2303      	movs	r3, #3
 8005144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800514a:	f107 0314 	add.w	r3, r7, #20
 800514e:	4619      	mov	r1, r3
 8005150:	481e      	ldr	r0, [pc, #120]	; (80051cc <HAL_ADC_MspInit+0x11c>)
 8005152:	f002 fe81 	bl	8007e58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005158:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <HAL_ADC_MspInit+0x124>)
 800515a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800515c:	4b1c      	ldr	r3, [pc, #112]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 800515e:	2200      	movs	r2, #0
 8005160:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005162:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005164:	2200      	movs	r2, #0
 8005166:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005168:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 800516a:	2200      	movs	r2, #0
 800516c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005174:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005184:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800518c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800518e:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005190:	2200      	movs	r2, #0
 8005192:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005194:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005196:	2200      	movs	r2, #0
 8005198:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800519a:	480d      	ldr	r0, [pc, #52]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 800519c:	f002 fa5a 	bl	8007654 <HAL_DMA_Init>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80051a6:	f7ff fbe3 	bl	8004970 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
 80051b0:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051b6:	bf00      	nop
 80051b8:	3728      	adds	r7, #40	; 0x28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40012000 	.word	0x40012000
 80051c4:	40023800 	.word	0x40023800
 80051c8:	40020800 	.word	0x40020800
 80051cc:	40020400 	.word	0x40020400
 80051d0:	200003a4 	.word	0x200003a4
 80051d4:	40026410 	.word	0x40026410

080051d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <HAL_I2C_MspInit+0x84>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d12b      	bne.n	8005252 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	4b18      	ldr	r3, [pc, #96]	; (8005260 <HAL_I2C_MspInit+0x88>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <HAL_I2C_MspInit+0x88>)
 8005204:	f043 0302 	orr.w	r3, r3, #2
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <HAL_I2C_MspInit+0x88>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005216:	23c0      	movs	r3, #192	; 0xc0
 8005218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800521a:	2312      	movs	r3, #18
 800521c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005222:	2303      	movs	r3, #3
 8005224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005226:	2304      	movs	r3, #4
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	4619      	mov	r1, r3
 8005230:	480c      	ldr	r0, [pc, #48]	; (8005264 <HAL_I2C_MspInit+0x8c>)
 8005232:	f002 fe11 	bl	8007e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_I2C_MspInit+0x88>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	4a08      	ldr	r2, [pc, #32]	; (8005260 <HAL_I2C_MspInit+0x88>)
 8005240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005244:	6413      	str	r3, [r2, #64]	; 0x40
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_I2C_MspInit+0x88>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005252:	bf00      	nop
 8005254:	3728      	adds	r7, #40	; 0x28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40005400 	.word	0x40005400
 8005260:	40023800 	.word	0x40023800
 8005264:	40020400 	.word	0x40020400

08005268 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005270:	f107 0314 	add.w	r3, r7, #20
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a19      	ldr	r2, [pc, #100]	; (80052ec <HAL_SPI_MspInit+0x84>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d12b      	bne.n	80052e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <HAL_SPI_MspInit+0x88>)
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	4a17      	ldr	r2, [pc, #92]	; (80052f0 <HAL_SPI_MspInit+0x88>)
 8005294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005298:	6453      	str	r3, [r2, #68]	; 0x44
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <HAL_SPI_MspInit+0x88>)
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_SPI_MspInit+0x88>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <HAL_SPI_MspInit+0x88>)
 80052b0:	f043 0302 	orr.w	r3, r3, #2
 80052b4:	6313      	str	r3, [r2, #48]	; 0x30
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <HAL_SPI_MspInit+0x88>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80052c2:	2338      	movs	r3, #56	; 0x38
 80052c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c6:	2302      	movs	r3, #2
 80052c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ce:	2303      	movs	r3, #3
 80052d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052d2:	2305      	movs	r3, #5
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d6:	f107 0314 	add.w	r3, r7, #20
 80052da:	4619      	mov	r1, r3
 80052dc:	4805      	ldr	r0, [pc, #20]	; (80052f4 <HAL_SPI_MspInit+0x8c>)
 80052de:	f002 fdbb 	bl	8007e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80052e2:	bf00      	nop
 80052e4:	3728      	adds	r7, #40	; 0x28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40013000 	.word	0x40013000
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40020400 	.word	0x40020400

080052f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a22      	ldr	r2, [pc, #136]	; (8005390 <HAL_TIM_Base_MspInit+0x98>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	4a20      	ldr	r2, [pc, #128]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	6453      	str	r3, [r2, #68]	; 0x44
 800531a:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005326:	e02e      	b.n	8005386 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d116      	bne.n	8005360 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	6413      	str	r3, [r2, #64]	; 0x40
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800534e:	2200      	movs	r2, #0
 8005350:	2100      	movs	r1, #0
 8005352:	201c      	movs	r0, #28
 8005354:	f002 f947 	bl	80075e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005358:	201c      	movs	r0, #28
 800535a:	f002 f960 	bl	800761e <HAL_NVIC_EnableIRQ>
}
 800535e:	e012      	b.n	8005386 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a0c      	ldr	r2, [pc, #48]	; (8005398 <HAL_TIM_Base_MspInit+0xa0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d10d      	bne.n	8005386 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	4a08      	ldr	r2, [pc, #32]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	6413      	str	r3, [r2, #64]	; 0x40
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <HAL_TIM_Base_MspInit+0x9c>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40023800 	.word	0x40023800
 8005398:	40001c00 	.word	0x40001c00

0800539c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a4:	f107 030c 	add.w	r3, r7, #12
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a12      	ldr	r2, [pc, #72]	; (8005404 <HAL_TIM_MspPostInit+0x68>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d11e      	bne.n	80053fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	4b11      	ldr	r3, [pc, #68]	; (8005408 <HAL_TIM_MspPostInit+0x6c>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	4a10      	ldr	r2, [pc, #64]	; (8005408 <HAL_TIM_MspPostInit+0x6c>)
 80053c8:	f043 0320 	orr.w	r3, r3, #32
 80053cc:	6313      	str	r3, [r2, #48]	; 0x30
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <HAL_TIM_MspPostInit+0x6c>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e0:	2302      	movs	r3, #2
 80053e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80053ec:	2309      	movs	r3, #9
 80053ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053f0:	f107 030c 	add.w	r3, r7, #12
 80053f4:	4619      	mov	r1, r3
 80053f6:	4805      	ldr	r0, [pc, #20]	; (800540c <HAL_TIM_MspPostInit+0x70>)
 80053f8:	f002 fd2e 	bl	8007e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80053fc:	bf00      	nop
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40001c00 	.word	0x40001c00
 8005408:	40023800 	.word	0x40023800
 800540c:	40021400 	.word	0x40021400

08005410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	; 0x30
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005418:	f107 031c 	add.w	r3, r7, #28
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3a      	ldr	r2, [pc, #232]	; (8005518 <HAL_UART_MspInit+0x108>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d135      	bne.n	800549e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <HAL_UART_MspInit+0x10c>)
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	4a38      	ldr	r2, [pc, #224]	; (800551c <HAL_UART_MspInit+0x10c>)
 800543c:	f043 0310 	orr.w	r3, r3, #16
 8005440:	6453      	str	r3, [r2, #68]	; 0x44
 8005442:	4b36      	ldr	r3, [pc, #216]	; (800551c <HAL_UART_MspInit+0x10c>)
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	4b32      	ldr	r3, [pc, #200]	; (800551c <HAL_UART_MspInit+0x10c>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	4a31      	ldr	r2, [pc, #196]	; (800551c <HAL_UART_MspInit+0x10c>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6313      	str	r3, [r2, #48]	; 0x30
 800545e:	4b2f      	ldr	r3, [pc, #188]	; (800551c <HAL_UART_MspInit+0x10c>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800546a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800546e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005470:	2302      	movs	r3, #2
 8005472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005474:	2300      	movs	r3, #0
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005478:	2303      	movs	r3, #3
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800547c:	2307      	movs	r3, #7
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005480:	f107 031c 	add.w	r3, r7, #28
 8005484:	4619      	mov	r1, r3
 8005486:	4826      	ldr	r0, [pc, #152]	; (8005520 <HAL_UART_MspInit+0x110>)
 8005488:	f002 fce6 	bl	8007e58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800548c:	2200      	movs	r2, #0
 800548e:	2100      	movs	r1, #0
 8005490:	2025      	movs	r0, #37	; 0x25
 8005492:	f002 f8a8 	bl	80075e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005496:	2025      	movs	r0, #37	; 0x25
 8005498:	f002 f8c1 	bl	800761e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800549c:	e038      	b.n	8005510 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a20      	ldr	r2, [pc, #128]	; (8005524 <HAL_UART_MspInit+0x114>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d133      	bne.n	8005510 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	4b1b      	ldr	r3, [pc, #108]	; (800551c <HAL_UART_MspInit+0x10c>)
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	4a1a      	ldr	r2, [pc, #104]	; (800551c <HAL_UART_MspInit+0x10c>)
 80054b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b6:	6413      	str	r3, [r2, #64]	; 0x40
 80054b8:	4b18      	ldr	r3, [pc, #96]	; (800551c <HAL_UART_MspInit+0x10c>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_UART_MspInit+0x10c>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	4a13      	ldr	r2, [pc, #76]	; (800551c <HAL_UART_MspInit+0x10c>)
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6313      	str	r3, [r2, #48]	; 0x30
 80054d4:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_UART_MspInit+0x10c>)
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80054e0:	230c      	movs	r3, #12
 80054e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e4:	2302      	movs	r3, #2
 80054e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ec:	2303      	movs	r3, #3
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054f0:	2307      	movs	r3, #7
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f4:	f107 031c 	add.w	r3, r7, #28
 80054f8:	4619      	mov	r1, r3
 80054fa:	4809      	ldr	r0, [pc, #36]	; (8005520 <HAL_UART_MspInit+0x110>)
 80054fc:	f002 fcac 	bl	8007e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005500:	2200      	movs	r2, #0
 8005502:	2100      	movs	r1, #0
 8005504:	2026      	movs	r0, #38	; 0x26
 8005506:	f002 f86e 	bl	80075e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800550a:	2026      	movs	r0, #38	; 0x26
 800550c:	f002 f887 	bl	800761e <HAL_NVIC_EnableIRQ>
}
 8005510:	bf00      	nop
 8005512:	3730      	adds	r7, #48	; 0x30
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40011000 	.word	0x40011000
 800551c:	40023800 	.word	0x40023800
 8005520:	40020000 	.word	0x40020000
 8005524:	40004400 	.word	0x40004400

08005528 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800553c:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <HAL_FSMC_MspInit+0x88>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d131      	bne.n	80055a8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005544:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <HAL_FSMC_MspInit+0x88>)
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <HAL_FSMC_MspInit+0x8c>)
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <HAL_FSMC_MspInit+0x8c>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6393      	str	r3, [r2, #56]	; 0x38
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <HAL_FSMC_MspInit+0x8c>)
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8005566:	f64f 7388 	movw	r3, #65416	; 0xff88
 800556a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556c:	2302      	movs	r3, #2
 800556e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005574:	2303      	movs	r3, #3
 8005576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005578:	230c      	movs	r3, #12
 800557a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	4619      	mov	r1, r3
 8005580:	480d      	ldr	r0, [pc, #52]	; (80055b8 <HAL_FSMC_MspInit+0x90>)
 8005582:	f002 fc69 	bl	8007e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005586:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800558a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005594:	2303      	movs	r3, #3
 8005596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005598:	230c      	movs	r3, #12
 800559a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800559c:	1d3b      	adds	r3, r7, #4
 800559e:	4619      	mov	r1, r3
 80055a0:	4806      	ldr	r0, [pc, #24]	; (80055bc <HAL_FSMC_MspInit+0x94>)
 80055a2:	f002 fc59 	bl	8007e58 <HAL_GPIO_Init>
 80055a6:	e000      	b.n	80055aa <HAL_FSMC_MspInit+0x82>
    return;
 80055a8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000194 	.word	0x20000194
 80055b4:	40023800 	.word	0x40023800
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40020c00 	.word	0x40020c00

080055c0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80055c8:	f7ff ffae 	bl	8005528 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055d8:	e7fe      	b.n	80055d8 <NMI_Handler+0x4>

080055da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055de:	e7fe      	b.n	80055de <HardFault_Handler+0x4>

080055e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055e4:	e7fe      	b.n	80055e4 <MemManage_Handler+0x4>

080055e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055e6:	b480      	push	{r7}
 80055e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055ea:	e7fe      	b.n	80055ea <BusFault_Handler+0x4>

080055ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055f0:	e7fe      	b.n	80055f0 <UsageFault_Handler+0x4>

080055f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055f2:	b480      	push	{r7}
 80055f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800560e:	b480      	push	{r7}
 8005610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005612:	bf00      	nop
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005620:	f001 fab0 	bl	8006b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005624:	bf00      	nop
 8005626:	bd80      	pop	{r7, pc}

08005628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800562c:	4802      	ldr	r0, [pc, #8]	; (8005638 <TIM2_IRQHandler+0x10>)
 800562e:	f005 f982 	bl	800a936 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200004f8 	.word	0x200004f8

0800563c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005640:	4802      	ldr	r0, [pc, #8]	; (800564c <USART1_IRQHandler+0x10>)
 8005642:	f006 f8bd 	bl	800b7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000540 	.word	0x20000540

08005650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <USART2_IRQHandler+0x10>)
 8005656:	f006 f8b3 	bl	800b7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000584 	.word	0x20000584

08005664 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005668:	4802      	ldr	r0, [pc, #8]	; (8005674 <DMA2_Stream0_IRQHandler+0x10>)
 800566a:	f002 f98b 	bl	8007984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200003a4 	.word	0x200003a4

08005678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
	return 1;
 800567c:	2301      	movs	r3, #1
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <_kill>:

int _kill(int pid, int sig)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005692:	f007 f81d 	bl	800c6d0 <__errno>
 8005696:	4603      	mov	r3, r0
 8005698:	2216      	movs	r2, #22
 800569a:	601a      	str	r2, [r3, #0]
	return -1;
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <_exit>:

void _exit (int status)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056b0:	f04f 31ff 	mov.w	r1, #4294967295
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ffe7 	bl	8005688 <_kill>
	while (1) {}		/* Make sure we hang here */
 80056ba:	e7fe      	b.n	80056ba <_exit+0x12>

080056bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e00a      	b.n	80056e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056ce:	f3af 8000 	nop.w
 80056d2:	4601      	mov	r1, r0
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	60ba      	str	r2, [r7, #8]
 80056da:	b2ca      	uxtb	r2, r1
 80056dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	3301      	adds	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	dbf0      	blt.n	80056ce <_read+0x12>
	}

return len;
 80056ec:	687b      	ldr	r3, [r7, #4]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e009      	b.n	800571c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	60ba      	str	r2, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	3301      	adds	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	dbf1      	blt.n	8005708 <_write+0x12>
	}
	return len;
 8005724:	687b      	ldr	r3, [r7, #4]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <_close>:

int _close(int file)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
	return -1;
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005756:	605a      	str	r2, [r3, #4]
	return 0;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <_isatty>:

int _isatty(int file)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
	return 1;
 800576e:	2301      	movs	r3, #1
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
	return 0;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057a0:	4a14      	ldr	r2, [pc, #80]	; (80057f4 <_sbrk+0x5c>)
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <_sbrk+0x60>)
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057ac:	4b13      	ldr	r3, [pc, #76]	; (80057fc <_sbrk+0x64>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <_sbrk+0x64>)
 80057b6:	4a12      	ldr	r2, [pc, #72]	; (8005800 <_sbrk+0x68>)
 80057b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057ba:	4b10      	ldr	r3, [pc, #64]	; (80057fc <_sbrk+0x64>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d207      	bcs.n	80057d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057c8:	f006 ff82 	bl	800c6d0 <__errno>
 80057cc:	4603      	mov	r3, r0
 80057ce:	220c      	movs	r2, #12
 80057d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	e009      	b.n	80057ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057d8:	4b08      	ldr	r3, [pc, #32]	; (80057fc <_sbrk+0x64>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <_sbrk+0x64>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4413      	add	r3, r2
 80057e6:	4a05      	ldr	r2, [pc, #20]	; (80057fc <_sbrk+0x64>)
 80057e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057ea:	68fb      	ldr	r3, [r7, #12]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20020000 	.word	0x20020000
 80057f8:	00000400 	.word	0x00000400
 80057fc:	20000198 	.word	0x20000198
 8005800:	200005e0 	.word	0x200005e0

08005804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <SystemInit+0x20>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	4a05      	ldr	r2, [pc, #20]	; (8005824 <SystemInit+0x20>)
 8005810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005818:	bf00      	nop
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	605a      	str	r2, [r3, #4]
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800583c:	463b      	mov	r3, r7
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005844:	4b1e      	ldr	r3, [pc, #120]	; (80058c0 <MX_TIM1_Init+0x98>)
 8005846:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <MX_TIM1_Init+0x9c>)
 8005848:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800584a:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <MX_TIM1_Init+0x98>)
 800584c:	2253      	movs	r2, #83	; 0x53
 800584e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005850:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <MX_TIM1_Init+0x98>)
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005856:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <MX_TIM1_Init+0x98>)
 8005858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800585e:	4b18      	ldr	r3, [pc, #96]	; (80058c0 <MX_TIM1_Init+0x98>)
 8005860:	2200      	movs	r2, #0
 8005862:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005864:	4b16      	ldr	r3, [pc, #88]	; (80058c0 <MX_TIM1_Init+0x98>)
 8005866:	2200      	movs	r2, #0
 8005868:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <MX_TIM1_Init+0x98>)
 800586c:	2200      	movs	r2, #0
 800586e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005870:	4813      	ldr	r0, [pc, #76]	; (80058c0 <MX_TIM1_Init+0x98>)
 8005872:	f004 fedf 	bl	800a634 <HAL_TIM_Base_Init>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800587c:	f7ff f878 	bl	8004970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005886:	f107 0308 	add.w	r3, r7, #8
 800588a:	4619      	mov	r1, r3
 800588c:	480c      	ldr	r0, [pc, #48]	; (80058c0 <MX_TIM1_Init+0x98>)
 800588e:	f005 fa1d 	bl	800accc <HAL_TIM_ConfigClockSource>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005898:	f7ff f86a 	bl	8004970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800589c:	2300      	movs	r3, #0
 800589e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058a4:	463b      	mov	r3, r7
 80058a6:	4619      	mov	r1, r3
 80058a8:	4805      	ldr	r0, [pc, #20]	; (80058c0 <MX_TIM1_Init+0x98>)
 80058aa:	f005 fde9 	bl	800b480 <HAL_TIMEx_MasterConfigSynchronization>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80058b4:	f7ff f85c 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80058b8:	bf00      	nop
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	200004b0 	.word	0x200004b0
 80058c4:	40010000 	.word	0x40010000

080058c8 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	605a      	str	r2, [r3, #4]
 80058d8:	609a      	str	r2, [r3, #8]
 80058da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058dc:	463b      	mov	r3, r7
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	; (800595c <MX_TIM2_Init+0x94>)
 80058e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80058ec:	4b1b      	ldr	r3, [pc, #108]	; (800595c <MX_TIM2_Init+0x94>)
 80058ee:	f240 3247 	movw	r2, #839	; 0x347
 80058f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058f4:	4b19      	ldr	r3, [pc, #100]	; (800595c <MX_TIM2_Init+0x94>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80058fa:	4b18      	ldr	r3, [pc, #96]	; (800595c <MX_TIM2_Init+0x94>)
 80058fc:	2263      	movs	r2, #99	; 0x63
 80058fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005900:	4b16      	ldr	r3, [pc, #88]	; (800595c <MX_TIM2_Init+0x94>)
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <MX_TIM2_Init+0x94>)
 8005908:	2200      	movs	r2, #0
 800590a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800590c:	4813      	ldr	r0, [pc, #76]	; (800595c <MX_TIM2_Init+0x94>)
 800590e:	f004 fe91 	bl	800a634 <HAL_TIM_Base_Init>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005918:	f7ff f82a 	bl	8004970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800591c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005922:	f107 0308 	add.w	r3, r7, #8
 8005926:	4619      	mov	r1, r3
 8005928:	480c      	ldr	r0, [pc, #48]	; (800595c <MX_TIM2_Init+0x94>)
 800592a:	f005 f9cf 	bl	800accc <HAL_TIM_ConfigClockSource>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005934:	f7ff f81c 	bl	8004970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005938:	2300      	movs	r3, #0
 800593a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800593c:	2300      	movs	r3, #0
 800593e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005940:	463b      	mov	r3, r7
 8005942:	4619      	mov	r1, r3
 8005944:	4805      	ldr	r0, [pc, #20]	; (800595c <MX_TIM2_Init+0x94>)
 8005946:	f005 fd9b 	bl	800b480 <HAL_TIMEx_MasterConfigSynchronization>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005950:	f7ff f80e 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005954:	bf00      	nop
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	200004f8 	.word	0x200004f8

08005960 <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005966:	1d3b      	adds	r3, r7, #4
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	605a      	str	r2, [r3, #4]
 800596e:	609a      	str	r2, [r3, #8]
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	611a      	str	r2, [r3, #16]
 8005974:	615a      	str	r2, [r3, #20]
 8005976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005978:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <MX_TIM13_Init+0x94>)
 800597a:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <MX_TIM13_Init+0x98>)
 800597c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800597e:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <MX_TIM13_Init+0x94>)
 8005980:	f240 3247 	movw	r2, #839	; 0x347
 8005984:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005986:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <MX_TIM13_Init+0x94>)
 8005988:	2200      	movs	r2, #0
 800598a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 800598c:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <MX_TIM13_Init+0x94>)
 800598e:	2263      	movs	r2, #99	; 0x63
 8005990:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005992:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <MX_TIM13_Init+0x94>)
 8005994:	2200      	movs	r2, #0
 8005996:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005998:	4b16      	ldr	r3, [pc, #88]	; (80059f4 <MX_TIM13_Init+0x94>)
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800599e:	4815      	ldr	r0, [pc, #84]	; (80059f4 <MX_TIM13_Init+0x94>)
 80059a0:	f004 fe48 	bl	800a634 <HAL_TIM_Base_Init>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80059aa:	f7fe ffe1 	bl	8004970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80059ae:	4811      	ldr	r0, [pc, #68]	; (80059f4 <MX_TIM13_Init+0x94>)
 80059b0:	f004 ff68 	bl	800a884 <HAL_TIM_PWM_Init>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80059ba:	f7fe ffd9 	bl	8004970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059be:	2360      	movs	r3, #96	; 0x60
 80059c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	2200      	movs	r2, #0
 80059d2:	4619      	mov	r1, r3
 80059d4:	4807      	ldr	r0, [pc, #28]	; (80059f4 <MX_TIM13_Init+0x94>)
 80059d6:	f005 f8b7 	bl	800ab48 <HAL_TIM_PWM_ConfigChannel>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80059e0:	f7fe ffc6 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80059e4:	4803      	ldr	r0, [pc, #12]	; (80059f4 <MX_TIM13_Init+0x94>)
 80059e6:	f7ff fcd9 	bl	800539c <HAL_TIM_MspPostInit>

}
 80059ea:	bf00      	nop
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000468 	.word	0x20000468
 80059f8:	40001c00 	.word	0x40001c00

080059fc <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
 8005a0e:	e025      	b.n	8005a5c <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da06      	bge.n	8005a26 <TP_Write_Byte+0x2a>
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a1e:	4813      	ldr	r0, [pc, #76]	; (8005a6c <TP_Write_Byte+0x70>)
 8005a20:	f002 fbce 	bl	80081c0 <HAL_GPIO_WritePin>
 8005a24:	e005      	b.n	8005a32 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8005a26:	2200      	movs	r2, #0
 8005a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a2c:	480f      	ldr	r0, [pc, #60]	; (8005a6c <TP_Write_Byte+0x70>)
 8005a2e:	f002 fbc7 	bl	80081c0 <HAL_GPIO_WritePin>
		num<<=1;
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a3e:	480c      	ldr	r0, [pc, #48]	; (8005a70 <TP_Write_Byte+0x74>)
 8005a40:	f002 fbbe 	bl	80081c0 <HAL_GPIO_WritePin>
		delay_us(1);
 8005a44:	2001      	movs	r0, #1
 8005a46:	f7ff fabb 	bl	8004fc0 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a50:	4807      	ldr	r0, [pc, #28]	; (8005a70 <TP_Write_Byte+0x74>)
 8005a52:	f002 fbb5 	bl	80081c0 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b07      	cmp	r3, #7
 8005a60:	d9d6      	bls.n	8005a10 <TP_Write_Byte+0x14>
	}
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40020800 	.word	0x40020800
 8005a70:	40021800 	.word	0x40021800

08005a74 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005a86:	2200      	movs	r2, #0
 8005a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a8c:	482f      	ldr	r0, [pc, #188]	; (8005b4c <TP_Read_AD+0xd8>)
 8005a8e:	f002 fb97 	bl	80081c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8005a92:	2200      	movs	r2, #0
 8005a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a98:	482d      	ldr	r0, [pc, #180]	; (8005b50 <TP_Read_AD+0xdc>)
 8005a9a:	f002 fb91 	bl	80081c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2180      	movs	r1, #128	; 0x80
 8005aa2:	482a      	ldr	r0, [pc, #168]	; (8005b4c <TP_Read_AD+0xd8>)
 8005aa4:	f002 fb8c 	bl	80081c0 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff ffa6 	bl	80059fc <TP_Write_Byte>
	delay_us(6);
 8005ab0:	2006      	movs	r0, #6
 8005ab2:	f7ff fa85 	bl	8004fc0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005abc:	4823      	ldr	r0, [pc, #140]	; (8005b4c <TP_Read_AD+0xd8>)
 8005abe:	f002 fb7f 	bl	80081c0 <HAL_GPIO_WritePin>
	delay_us(1);
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	f7ff fa7c 	bl	8004fc0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ace:	481f      	ldr	r0, [pc, #124]	; (8005b4c <TP_Read_AD+0xd8>)
 8005ad0:	f002 fb76 	bl	80081c0 <HAL_GPIO_WritePin>
	delay_us(1);
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7ff fa73 	bl	8004fc0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005ada:	2200      	movs	r2, #0
 8005adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ae0:	481a      	ldr	r0, [pc, #104]	; (8005b4c <TP_Read_AD+0xd8>)
 8005ae2:	f002 fb6d 	bl	80081c0 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e01f      	b.n	8005b2c <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8005aec:	89bb      	ldrh	r3, [r7, #12]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005af2:	2200      	movs	r2, #0
 8005af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005af8:	4814      	ldr	r0, [pc, #80]	; (8005b4c <TP_Read_AD+0xd8>)
 8005afa:	f002 fb61 	bl	80081c0 <HAL_GPIO_WritePin>
		delay_us(1);
 8005afe:	2001      	movs	r0, #1
 8005b00:	f7ff fa5e 	bl	8004fc0 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005b04:	2201      	movs	r2, #1
 8005b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b0a:	4810      	ldr	r0, [pc, #64]	; (8005b4c <TP_Read_AD+0xd8>)
 8005b0c:	f002 fb58 	bl	80081c0 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8005b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b14:	480e      	ldr	r0, [pc, #56]	; (8005b50 <TP_Read_AD+0xdc>)
 8005b16:	f002 fb3b 	bl	8008190 <HAL_GPIO_ReadPin>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <TP_Read_AD+0xb2>
 8005b20:	89bb      	ldrh	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	d9dc      	bls.n	8005aec <TP_Read_AD+0x78>
	}
	Num>>=4;
 8005b32:	89bb      	ldrh	r3, [r7, #12]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	4803      	ldr	r0, [pc, #12]	; (8005b4c <TP_Read_AD+0xd8>)
 8005b3e:	f002 fb3f 	bl	80081c0 <HAL_GPIO_WritePin>
	return(Num);
 8005b42:	89bb      	ldrh	r3, [r7, #12]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021800 	.word	0x40021800
 8005b50:	40020800 	.word	0x40020800

08005b54 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b089      	sub	sp, #36	; 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8005b62:	2300      	movs	r3, #0
 8005b64:	83fb      	strh	r3, [r7, #30]
 8005b66:	e00f      	b.n	8005b88 <TP_Read_XOY+0x34>
 8005b68:	8bfc      	ldrh	r4, [r7, #30]
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ff81 	bl	8005a74 <TP_Read_AD>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	0063      	lsls	r3, r4, #1
 8005b78:	f107 0120 	add.w	r1, r7, #32
 8005b7c:	440b      	add	r3, r1
 8005b7e:	f823 2c14 	strh.w	r2, [r3, #-20]
 8005b82:	8bfb      	ldrh	r3, [r7, #30]
 8005b84:	3301      	adds	r3, #1
 8005b86:	83fb      	strh	r3, [r7, #30]
 8005b88:	8bfb      	ldrh	r3, [r7, #30]
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d9ec      	bls.n	8005b68 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8005b8e:	2300      	movs	r3, #0
 8005b90:	83fb      	strh	r3, [r7, #30]
 8005b92:	e03b      	b.n	8005c0c <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8005b94:	8bfb      	ldrh	r3, [r7, #30]
 8005b96:	3301      	adds	r3, #1
 8005b98:	83bb      	strh	r3, [r7, #28]
 8005b9a:	e031      	b.n	8005c00 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8005b9c:	8bfb      	ldrh	r3, [r7, #30]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	f107 0220 	add.w	r2, r7, #32
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005baa:	8bbb      	ldrh	r3, [r7, #28]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	f107 0120 	add.w	r1, r7, #32
 8005bb2:	440b      	add	r3, r1
 8005bb4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d91e      	bls.n	8005bfa <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8005bbc:	8bfb      	ldrh	r3, [r7, #30]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	f107 0220 	add.w	r2, r7, #32
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005bca:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8005bcc:	8bbb      	ldrh	r3, [r7, #28]
 8005bce:	8bfa      	ldrh	r2, [r7, #30]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	f107 0120 	add.w	r1, r7, #32
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8005bdc:	0053      	lsls	r3, r2, #1
 8005bde:	f107 0220 	add.w	r2, r7, #32
 8005be2:	4413      	add	r3, r2
 8005be4:	460a      	mov	r2, r1
 8005be6:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8005bea:	8bbb      	ldrh	r3, [r7, #28]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	f107 0220 	add.w	r2, r7, #32
 8005bf2:	4413      	add	r3, r2
 8005bf4:	8b3a      	ldrh	r2, [r7, #24]
 8005bf6:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8005bfa:	8bbb      	ldrh	r3, [r7, #28]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	83bb      	strh	r3, [r7, #28]
 8005c00:	8bbb      	ldrh	r3, [r7, #28]
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d9ca      	bls.n	8005b9c <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8005c06:	8bfb      	ldrh	r3, [r7, #30]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	83fb      	strh	r3, [r7, #30]
 8005c0c:	8bfb      	ldrh	r3, [r7, #30]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d9c0      	bls.n	8005b94 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8005c16:	2301      	movs	r3, #1
 8005c18:	83fb      	strh	r3, [r7, #30]
 8005c1a:	e00c      	b.n	8005c36 <TP_Read_XOY+0xe2>
 8005c1c:	8bfb      	ldrh	r3, [r7, #30]
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	f107 0220 	add.w	r2, r7, #32
 8005c24:	4413      	add	r3, r2
 8005c26:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005c2a:	8b7b      	ldrh	r3, [r7, #26]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	837b      	strh	r3, [r7, #26]
 8005c30:	8bfb      	ldrh	r3, [r7, #30]
 8005c32:	3301      	adds	r3, #1
 8005c34:	83fb      	strh	r3, [r7, #30]
 8005c36:	8bfb      	ldrh	r3, [r7, #30]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d9ef      	bls.n	8005c1c <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8005c3c:	8b7b      	ldrh	r3, [r7, #26]
 8005c3e:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <TP_Read_XOY+0x100>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	833b      	strh	r3, [r7, #24]
	return temp;
 8005c48:	8b3b      	ldrh	r3, [r7, #24]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3724      	adds	r7, #36	; 0x24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd90      	pop	{r4, r7, pc}
 8005c52:	bf00      	nop
 8005c54:	aaaaaaab 	.word	0xaaaaaaab

08005c58 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8005c62:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <TP_Read_XY+0x3c>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff ff74 	bl	8005b54 <TP_Read_XOY>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <TP_Read_XY+0x40>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff ff6d 	bl	8005b54 <TP_Read_XOY>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	89fa      	ldrh	r2, [r7, #14]
 8005c82:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	89ba      	ldrh	r2, [r7, #12]
 8005c88:	801a      	strh	r2, [r3, #0]
	return 1;
 8005c8a:	2301      	movs	r3, #1
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	200000a0 	.word	0x200000a0
 8005c98:	200000a1 	.word	0x200000a1

08005c9c <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8005ca6:	f107 0212 	add.w	r2, r7, #18
 8005caa:	f107 0314 	add.w	r3, r7, #20
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff ffd1 	bl	8005c58 <TP_Read_XY>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <TP_Read_XY2+0x28>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e049      	b.n	8005d58 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8005cc4:	f107 020e 	add.w	r2, r7, #14
 8005cc8:	f107 0310 	add.w	r3, r7, #16
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff ffc2 	bl	8005c58 <TP_Read_XY>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <TP_Read_XY2+0x46>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e03a      	b.n	8005d58 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8005ce2:	8a3a      	ldrh	r2, [r7, #16]
 8005ce4:	8abb      	ldrh	r3, [r7, #20]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d804      	bhi.n	8005cf4 <TP_Read_XY2+0x58>
 8005cea:	8a3b      	ldrh	r3, [r7, #16]
 8005cec:	3363      	adds	r3, #99	; 0x63
 8005cee:	8aba      	ldrh	r2, [r7, #20]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	da08      	bge.n	8005d06 <TP_Read_XY2+0x6a>
 8005cf4:	8aba      	ldrh	r2, [r7, #20]
 8005cf6:	8a3b      	ldrh	r3, [r7, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d82c      	bhi.n	8005d56 <TP_Read_XY2+0xba>
 8005cfc:	8abb      	ldrh	r3, [r7, #20]
 8005cfe:	3363      	adds	r3, #99	; 0x63
 8005d00:	8a3a      	ldrh	r2, [r7, #16]
 8005d02:	4293      	cmp	r3, r2
 8005d04:	db27      	blt.n	8005d56 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8005d06:	89fa      	ldrh	r2, [r7, #14]
 8005d08:	8a7b      	ldrh	r3, [r7, #18]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d804      	bhi.n	8005d18 <TP_Read_XY2+0x7c>
 8005d0e:	89fb      	ldrh	r3, [r7, #14]
 8005d10:	3363      	adds	r3, #99	; 0x63
 8005d12:	8a7a      	ldrh	r2, [r7, #18]
 8005d14:	4293      	cmp	r3, r2
 8005d16:	da08      	bge.n	8005d2a <TP_Read_XY2+0x8e>
 8005d18:	8a7a      	ldrh	r2, [r7, #18]
 8005d1a:	89fb      	ldrh	r3, [r7, #14]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d81a      	bhi.n	8005d56 <TP_Read_XY2+0xba>
 8005d20:	8a7b      	ldrh	r3, [r7, #18]
 8005d22:	3363      	adds	r3, #99	; 0x63
 8005d24:	89fa      	ldrh	r2, [r7, #14]
 8005d26:	4293      	cmp	r3, r2
 8005d28:	db15      	blt.n	8005d56 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8005d2a:	8abb      	ldrh	r3, [r7, #20]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	8a3b      	ldrh	r3, [r7, #16]
 8005d30:	4413      	add	r3, r2
 8005d32:	0fda      	lsrs	r2, r3, #31
 8005d34:	4413      	add	r3, r2
 8005d36:	105b      	asrs	r3, r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8005d3e:	8a7b      	ldrh	r3, [r7, #18]
 8005d40:	461a      	mov	r2, r3
 8005d42:	89fb      	ldrh	r3, [r7, #14]
 8005d44:	4413      	add	r3, r2
 8005d46:	0fda      	lsrs	r2, r3, #31
 8005d48:	4413      	add	r3, r2
 8005d4a:	105b      	asrs	r3, r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	801a      	strh	r2, [r3, #0]
		return 1;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <TP_Read_XY2+0xbc>
	}else return 0;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	4603      	mov	r3, r0
 8005d68:	80fb      	strh	r3, [r7, #6]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	80bb      	strh	r3, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	3b0c      	subs	r3, #12
 8005d76:	b298      	uxth	r0, r3
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	330d      	adds	r3, #13
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	88bc      	ldrh	r4, [r7, #4]
 8005d80:	88b9      	ldrh	r1, [r7, #4]
 8005d82:	887b      	ldrh	r3, [r7, #2]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	4623      	mov	r3, r4
 8005d88:	f7fd fe63 	bl	8003a52 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8005d8c:	88bb      	ldrh	r3, [r7, #4]
 8005d8e:	3b0c      	subs	r3, #12
 8005d90:	b299      	uxth	r1, r3
 8005d92:	88bb      	ldrh	r3, [r7, #4]
 8005d94:	330d      	adds	r3, #13
 8005d96:	b29c      	uxth	r4, r3
 8005d98:	88fa      	ldrh	r2, [r7, #6]
 8005d9a:	88f8      	ldrh	r0, [r7, #6]
 8005d9c:	887b      	ldrh	r3, [r7, #2]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	4623      	mov	r3, r4
 8005da2:	f7fd fe56 	bl	8003a52 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	3301      	adds	r3, #1
 8005daa:	b298      	uxth	r0, r3
 8005dac:	88bb      	ldrh	r3, [r7, #4]
 8005dae:	3301      	adds	r3, #1
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	887a      	ldrh	r2, [r7, #2]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f7fd fe35 	bl	8003a24 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b298      	uxth	r0, r3
 8005dc0:	88bb      	ldrh	r3, [r7, #4]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	887a      	ldrh	r2, [r7, #2]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f7fd fe2b 	bl	8003a24 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b298      	uxth	r0, r3
 8005dd4:	88bb      	ldrh	r3, [r7, #4]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	887a      	ldrh	r2, [r7, #2]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f7fd fe21 	bl	8003a24 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b298      	uxth	r0, r3
 8005de8:	88bb      	ldrh	r3, [r7, #4]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	887a      	ldrh	r2, [r7, #2]
 8005df0:	4619      	mov	r1, r3
 8005df2:	f7fd fe17 	bl	8003a24 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8005df6:	88f8      	ldrh	r0, [r7, #6]
 8005df8:	88b9      	ldrh	r1, [r7, #4]
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	2306      	movs	r3, #6
 8005e02:	f7fe fb48 	bl	8004496 <lcd_DrawCircle>
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd90      	pop	{r4, r7, pc}
	...

08005e10 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8005e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e1e:	4843      	ldr	r0, [pc, #268]	; (8005f2c <TP_Scan+0x11c>)
 8005e20:	f002 f9b6 	bl	8008190 <HAL_GPIO_ReadPin>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d157      	bne.n	8005eda <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <TP_Scan+0x2a>
 8005e30:	493f      	ldr	r1, [pc, #252]	; (8005f30 <TP_Scan+0x120>)
 8005e32:	4840      	ldr	r0, [pc, #256]	; (8005f34 <TP_Scan+0x124>)
 8005e34:	f7ff ff32 	bl	8005c9c <TP_Read_XY2>
 8005e38:	e03c      	b.n	8005eb4 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8005e3a:	493d      	ldr	r1, [pc, #244]	; (8005f30 <TP_Scan+0x120>)
 8005e3c:	483d      	ldr	r0, [pc, #244]	; (8005f34 <TP_Scan+0x124>)
 8005e3e:	f7ff ff2d 	bl	8005c9c <TP_Read_XY2>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d035      	beq.n	8005eb4 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8005e48:	4b3b      	ldr	r3, [pc, #236]	; (8005f38 <TP_Scan+0x128>)
 8005e4a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005e4e:	4b3a      	ldr	r3, [pc, #232]	; (8005f38 <TP_Scan+0x128>)
 8005e50:	899b      	ldrh	r3, [r3, #12]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e5e:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <TP_Scan+0x128>)
 8005e60:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e74:	ee17 3a90 	vmov	r3, s15
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <TP_Scan+0x128>)
 8005e7c:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8005e7e:	4b2e      	ldr	r3, [pc, #184]	; (8005f38 <TP_Scan+0x128>)
 8005e80:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005e84:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <TP_Scan+0x128>)
 8005e86:	8adb      	ldrh	r3, [r3, #22]
 8005e88:	ee07 3a90 	vmov	s15, r3
 8005e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e94:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <TP_Scan+0x128>)
 8005e96:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eaa:	ee17 3a90 	vmov	r3, s15
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <TP_Scan+0x128>)
 8005eb2:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8005eb4:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <TP_Scan+0x128>)
 8005eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eba:	b25b      	sxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	db2a      	blt.n	8005f16 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8005ec0:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <TP_Scan+0x128>)
 8005ec2:	22c0      	movs	r2, #192	; 0xc0
 8005ec4:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <TP_Scan+0x128>)
 8005eca:	899a      	ldrh	r2, [r3, #12]
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <TP_Scan+0x128>)
 8005ece:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8005ed0:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <TP_Scan+0x128>)
 8005ed2:	8ada      	ldrh	r2, [r3, #22]
 8005ed4:	4b18      	ldr	r3, [pc, #96]	; (8005f38 <TP_Scan+0x128>)
 8005ed6:	83da      	strh	r2, [r3, #30]
 8005ed8:	e01d      	b.n	8005f16 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8005eda:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <TP_Scan+0x128>)
 8005edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ee0:	b25b      	sxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	da09      	bge.n	8005efa <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <TP_Scan+0x128>)
 8005ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <TP_Scan+0x128>)
 8005ef4:	f883 2020 	strb.w	r2, [r3, #32]
 8005ef8:	e00d      	b.n	8005f16 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <TP_Scan+0x128>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8005f00:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <TP_Scan+0x128>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <TP_Scan+0x128>)
 8005f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f0c:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <TP_Scan+0x128>)
 8005f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f14:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <TP_Scan+0x128>)
 8005f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f20:	b2db      	uxtb	r3, r3
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40020800 	.word	0x40020800
 8005f30:	20000082 	.word	0x20000082
 8005f34:	20000078 	.word	0x20000078
 8005f38:	2000006c 	.word	0x2000006c

08005f3c <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005f40:	220e      	movs	r2, #14
 8005f42:	4905      	ldr	r1, [pc, #20]	; (8005f58 <TP_Save_Adjdata+0x1c>)
 8005f44:	2000      	movs	r0, #0
 8005f46:	f7fb f927 	bl	8001198 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	200e      	movs	r0, #14
 8005f4e:	f7fb f8c3 	bl	80010d8 <at24c_WriteOneByte>
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000090 	.word	0x20000090

08005f5c <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8005f66:	200e      	movs	r0, #14
 8005f68:	f7fb f89a 	bl	80010a0 <at24c_ReadOneByte>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005f76:	220e      	movs	r2, #14
 8005f78:	4905      	ldr	r1, [pc, #20]	; (8005f90 <TP_Get_Adjdata+0x34>)
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f7fb f8ed 	bl	800115a <at24c_Read>
		return 1;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000090 	.word	0x20000090
 8005f94:	00000000 	.word	0x00000000

08005f98 <touch_Adjust>:


void touch_Adjust(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08e      	sub	sp, #56	; 0x38
 8005f9c:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8005faa:	4b61      	ldr	r3, [pc, #388]	; (8006130 <touch_Adjust+0x198>)
 8005fac:	881a      	ldrh	r2, [r3, #0]
 8005fae:	4b60      	ldr	r3, [pc, #384]	; (8006130 <touch_Adjust+0x198>)
 8005fb0:	885b      	ldrh	r3, [r3, #2]
 8005fb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fb6:	9100      	str	r1, [sp, #0]
 8005fb8:	2100      	movs	r1, #0
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f7fd fcfc 	bl	80039b8 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9302      	str	r3, [sp, #8]
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005fd2:	4a58      	ldr	r2, [pc, #352]	; (8006134 <touch_Adjust+0x19c>)
 8005fd4:	2128      	movs	r1, #40	; 0x28
 8005fd6:	2005      	movs	r0, #5
 8005fd8:	f7fe fac9 	bl	800456e <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9302      	str	r3, [sp, #8]
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005fee:	4a52      	ldr	r2, [pc, #328]	; (8006138 <touch_Adjust+0x1a0>)
 8005ff0:	2141      	movs	r1, #65	; 0x41
 8005ff2:	2005      	movs	r0, #5
 8005ff4:	f7fe fabb 	bl	800456e <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	9302      	str	r3, [sp, #8]
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800600a:	4a4c      	ldr	r2, [pc, #304]	; (800613c <touch_Adjust+0x1a4>)
 800600c:	215a      	movs	r1, #90	; 0x5a
 800600e:	2005      	movs	r0, #5
 8006010:	f7fe faad 	bl	800456e <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8006014:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006018:	2114      	movs	r1, #20
 800601a:	2014      	movs	r0, #20
 800601c:	f7ff fea0 	bl	8005d60 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8006020:	4b47      	ldr	r3, [pc, #284]	; (8006140 <touch_Adjust+0x1a8>)
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8006028:	4b45      	ldr	r3, [pc, #276]	; (8006140 <touch_Adjust+0x1a8>)
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8006030:	2032      	movs	r0, #50	; 0x32
 8006032:	f000 fdc7 	bl	8006bc4 <HAL_Delay>
		tp_dev.scan(1);
 8006036:	4b42      	ldr	r3, [pc, #264]	; (8006140 <touch_Adjust+0x1a8>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2001      	movs	r0, #1
 800603c:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 800603e:	4b40      	ldr	r3, [pc, #256]	; (8006140 <touch_Adjust+0x1a8>)
 8006040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006044:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	f040 835e 	bne.w	800670a <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 800604e:	4b3c      	ldr	r3, [pc, #240]	; (8006140 <touch_Adjust+0x1a8>)
 8006050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006058:	b2da      	uxtb	r2, r3
 800605a:	4b39      	ldr	r3, [pc, #228]	; (8006140 <touch_Adjust+0x1a8>)
 800605c:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8006060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006064:	4a36      	ldr	r2, [pc, #216]	; (8006140 <touch_Adjust+0x1a8>)
 8006066:	8992      	ldrh	r2, [r2, #12]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800606e:	440b      	add	r3, r1
 8006070:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8006074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006078:	4a31      	ldr	r2, [pc, #196]	; (8006140 <touch_Adjust+0x1a8>)
 800607a:	8ad2      	ldrh	r2, [r2, #22]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006082:	440b      	add	r3, r1
 8006084:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8006088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800608c:	3301      	adds	r3, #1
 800608e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8006092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006096:	3b01      	subs	r3, #1
 8006098:	2b03      	cmp	r3, #3
 800609a:	d8c9      	bhi.n	8006030 <touch_Adjust+0x98>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <touch_Adjust+0x10c>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060d7 	.word	0x080060d7
 80060ac:	08006101 	.word	0x08006101
 80060b0:	08006145 	.word	0x08006145
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80060b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b8:	2114      	movs	r1, #20
 80060ba:	2014      	movs	r0, #20
 80060bc:	f7ff fe50 	bl	8005d60 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80060c0:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <touch_Adjust+0x198>)
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	3b14      	subs	r3, #20
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80060cc:	2114      	movs	r1, #20
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff fe46 	bl	8005d60 <TP_Drow_Touch_Point>
					break;
 80060d4:	e31a      	b.n	800670c <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80060d6:	4b16      	ldr	r3, [pc, #88]	; (8006130 <touch_Adjust+0x198>)
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	3b14      	subs	r3, #20
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060e2:	2114      	movs	r1, #20
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fe3b 	bl	8005d60 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <touch_Adjust+0x198>)
 80060ec:	885b      	ldrh	r3, [r3, #2]
 80060ee:	3b14      	subs	r3, #20
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80060f6:	4619      	mov	r1, r3
 80060f8:	2014      	movs	r0, #20
 80060fa:	f7ff fe31 	bl	8005d60 <TP_Drow_Touch_Point>
					break;
 80060fe:	e305      	b.n	800670c <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <touch_Adjust+0x198>)
 8006102:	885b      	ldrh	r3, [r3, #2]
 8006104:	3b14      	subs	r3, #20
 8006106:	b29b      	uxth	r3, r3
 8006108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800610c:	4619      	mov	r1, r3
 800610e:	2014      	movs	r0, #20
 8006110:	f7ff fe26 	bl	8005d60 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8006114:	4b06      	ldr	r3, [pc, #24]	; (8006130 <touch_Adjust+0x198>)
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	3b14      	subs	r3, #20
 800611a:	b298      	uxth	r0, r3
 800611c:	4b04      	ldr	r3, [pc, #16]	; (8006130 <touch_Adjust+0x198>)
 800611e:	885b      	ldrh	r3, [r3, #2]
 8006120:	3b14      	subs	r3, #20
 8006122:	b29b      	uxth	r3, r3
 8006124:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006128:	4619      	mov	r1, r3
 800612a:	f7ff fe19 	bl	8005d60 <TP_Drow_Touch_Point>
					break;
 800612e:	e2ed      	b.n	800670c <touch_Adjust+0x774>
 8006130:	20000368 	.word	0x20000368
 8006134:	0800e8d4 	.word	0x0800e8d4
 8006138:	0800e8f0 	.word	0x0800e8f0
 800613c:	0800e908 	.word	0x0800e908
 8006140:	2000006c 	.word	0x2000006c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8006144:	883b      	ldrh	r3, [r7, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	88bb      	ldrh	r3, [r7, #4]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfb8      	it	lt
 8006150:	425b      	neglt	r3, r3
 8006152:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8006154:	887b      	ldrh	r3, [r7, #2]
 8006156:	461a      	mov	r2, r3
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	bfb8      	it	lt
 8006160:	425b      	neglt	r3, r3
 8006162:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	fb03 f303 	mul.w	r3, r3, r3
 800616a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	fb03 f303 	mul.w	r3, r3, r3
 8006172:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8006174:	6a3a      	ldr	r2, [r7, #32]
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	4618      	mov	r0, r3
 800617c:	f7fa f9c2 	bl	8000504 <__aeabi_ui2d>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	ec43 2b10 	vmov	d0, r2, r3
 8006188:	f007 fbe8 	bl	800d95c <sqrt>
 800618c:	ec53 2b10 	vmov	r2, r3, d0
 8006190:	4610      	mov	r0, r2
 8006192:	4619      	mov	r1, r3
 8006194:	f7fa fd08 	bl	8000ba8 <__aeabi_d2uiz>
 8006198:	4603      	mov	r3, r0
 800619a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 800619c:	893b      	ldrh	r3, [r7, #8]
 800619e:	461a      	mov	r2, r3
 80061a0:	89bb      	ldrh	r3, [r7, #12]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfb8      	it	lt
 80061a8:	425b      	neglt	r3, r3
 80061aa:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80061ac:	897b      	ldrh	r3, [r7, #10]
 80061ae:	461a      	mov	r2, r3
 80061b0:	89fb      	ldrh	r3, [r7, #14]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bfb8      	it	lt
 80061b8:	425b      	neglt	r3, r3
 80061ba:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	fb03 f303 	mul.w	r3, r3, r3
 80061c2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	fb03 f303 	mul.w	r3, r3, r3
 80061ca:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fa f996 	bl	8000504 <__aeabi_ui2d>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	ec43 2b10 	vmov	d0, r2, r3
 80061e0:	f007 fbbc 	bl	800d95c <sqrt>
 80061e4:	ec53 2b10 	vmov	r2, r3, d0
 80061e8:	4610      	mov	r0, r2
 80061ea:	4619      	mov	r1, r3
 80061ec:	f7fa fcdc 	bl	8000ba8 <__aeabi_d2uiz>
 80061f0:	4603      	mov	r3, r0
 80061f2:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80061f4:	8b7b      	ldrh	r3, [r7, #26]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061fe:	8b3b      	ldrh	r3, [r7, #24]
 8006200:	ee07 3a90 	vmov	s15, r3
 8006204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006208:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800620c:	ee16 0a90 	vmov	r0, s13
 8006210:	f7fa f99a 	bl	8000548 <__aeabi_f2d>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 800621c:	a384      	add	r3, pc, #528	; (adr r3, 8006430 <touch_Adjust+0x498>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006226:	f7fa fc59 	bl	8000adc <__aeabi_dcmplt>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10f      	bne.n	8006250 <touch_Adjust+0x2b8>
 8006230:	a381      	add	r3, pc, #516	; (adr r3, 8006438 <touch_Adjust+0x4a0>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800623a:	f7fa fc6d 	bl	8000b18 <__aeabi_dcmpgt>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <touch_Adjust+0x2b8>
 8006244:	8b7b      	ldrh	r3, [r7, #26]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <touch_Adjust+0x2b8>
 800624a:	8b3b      	ldrh	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d136      	bne.n	80062be <touch_Adjust+0x326>
					{
						cnt=0;
 8006250:	2300      	movs	r3, #0
 8006252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8006256:	4b7a      	ldr	r3, [pc, #488]	; (8006440 <touch_Adjust+0x4a8>)
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	3b14      	subs	r3, #20
 800625c:	b298      	uxth	r0, r3
 800625e:	4b78      	ldr	r3, [pc, #480]	; (8006440 <touch_Adjust+0x4a8>)
 8006260:	885b      	ldrh	r3, [r3, #2]
 8006262:	3b14      	subs	r3, #20
 8006264:	b29b      	uxth	r3, r3
 8006266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800626a:	4619      	mov	r1, r3
 800626c:	f7ff fd78 	bl	8005d60 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8006270:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006274:	2114      	movs	r1, #20
 8006276:	2014      	movs	r0, #20
 8006278:	f7ff fd72 	bl	8005d60 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800627c:	2300      	movs	r3, #0
 800627e:	9302      	str	r3, [sp, #8]
 8006280:	2310      	movs	r3, #16
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800628e:	4a6d      	ldr	r2, [pc, #436]	; (8006444 <touch_Adjust+0x4ac>)
 8006290:	2128      	movs	r1, #40	; 0x28
 8006292:	2005      	movs	r0, #5
 8006294:	f7fe f96b 	bl	800456e <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8006298:	2300      	movs	r3, #0
 800629a:	9302      	str	r3, [sp, #8]
 800629c:	2310      	movs	r3, #16
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062aa:	4a67      	ldr	r2, [pc, #412]	; (8006448 <touch_Adjust+0x4b0>)
 80062ac:	213c      	movs	r1, #60	; 0x3c
 80062ae:	2005      	movs	r0, #5
 80062b0:	f7fe f95d 	bl	800456e <lcd_ShowStr>
						HAL_Delay(1000);
 80062b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062b8:	f000 fc84 	bl	8006bc4 <HAL_Delay>
 						continue;
 80062bc:	e226      	b.n	800670c <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 80062be:	883b      	ldrh	r3, [r7, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	893b      	ldrh	r3, [r7, #8]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bfb8      	it	lt
 80062ca:	425b      	neglt	r3, r3
 80062cc:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 80062ce:	887b      	ldrh	r3, [r7, #2]
 80062d0:	461a      	mov	r2, r3
 80062d2:	897b      	ldrh	r3, [r7, #10]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bfb8      	it	lt
 80062da:	425b      	neglt	r3, r3
 80062dc:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	fb03 f303 	mul.w	r3, r3, r3
 80062e4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	fb03 f303 	mul.w	r3, r3, r3
 80062ec:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fa f905 	bl	8000504 <__aeabi_ui2d>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	ec43 2b10 	vmov	d0, r2, r3
 8006302:	f007 fb2b 	bl	800d95c <sqrt>
 8006306:	ec53 2b10 	vmov	r2, r3, d0
 800630a:	4610      	mov	r0, r2
 800630c:	4619      	mov	r1, r3
 800630e:	f7fa fc4b 	bl	8000ba8 <__aeabi_d2uiz>
 8006312:	4603      	mov	r3, r0
 8006314:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8006316:	88bb      	ldrh	r3, [r7, #4]
 8006318:	461a      	mov	r2, r3
 800631a:	89bb      	ldrh	r3, [r7, #12]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfb8      	it	lt
 8006322:	425b      	neglt	r3, r3
 8006324:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	461a      	mov	r2, r3
 800632a:	89fb      	ldrh	r3, [r7, #14]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfb8      	it	lt
 8006332:	425b      	neglt	r3, r3
 8006334:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	fb03 f303 	mul.w	r3, r3, r3
 800633c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	fb03 f303 	mul.w	r3, r3, r3
 8006344:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f7fa f8d9 	bl	8000504 <__aeabi_ui2d>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	ec43 2b10 	vmov	d0, r2, r3
 800635a:	f007 faff 	bl	800d95c <sqrt>
 800635e:	ec53 2b10 	vmov	r2, r3, d0
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	f7fa fc1f 	bl	8000ba8 <__aeabi_d2uiz>
 800636a:	4603      	mov	r3, r0
 800636c:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800636e:	8b7b      	ldrh	r3, [r7, #26]
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006378:	8b3b      	ldrh	r3, [r7, #24]
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006382:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006386:	ee16 0a90 	vmov	r0, s13
 800638a:	f7fa f8dd 	bl	8000548 <__aeabi_f2d>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8006396:	a326      	add	r3, pc, #152	; (adr r3, 8006430 <touch_Adjust+0x498>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063a0:	f7fa fb9c 	bl	8000adc <__aeabi_dcmplt>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <touch_Adjust+0x426>
 80063aa:	a323      	add	r3, pc, #140	; (adr r3, 8006438 <touch_Adjust+0x4a0>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063b4:	f7fa fbb0 	bl	8000b18 <__aeabi_dcmpgt>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d046      	beq.n	800644c <touch_Adjust+0x4b4>
					{
						cnt=0;
 80063be:	2300      	movs	r3, #0
 80063c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80063c4:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <touch_Adjust+0x4a8>)
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	3b14      	subs	r3, #20
 80063ca:	b298      	uxth	r0, r3
 80063cc:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <touch_Adjust+0x4a8>)
 80063ce:	885b      	ldrh	r3, [r3, #2]
 80063d0:	3b14      	subs	r3, #20
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063d8:	4619      	mov	r1, r3
 80063da:	f7ff fcc1 	bl	8005d60 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80063de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80063e2:	2114      	movs	r1, #20
 80063e4:	2014      	movs	r0, #20
 80063e6:	f7ff fcbb 	bl	8005d60 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80063ea:	2300      	movs	r3, #0
 80063ec:	9302      	str	r3, [sp, #8]
 80063ee:	2310      	movs	r3, #16
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80063fc:	4a11      	ldr	r2, [pc, #68]	; (8006444 <touch_Adjust+0x4ac>)
 80063fe:	2128      	movs	r1, #40	; 0x28
 8006400:	2005      	movs	r0, #5
 8006402:	f7fe f8b4 	bl	800456e <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8006406:	2300      	movs	r3, #0
 8006408:	9302      	str	r3, [sp, #8]
 800640a:	2310      	movs	r3, #16
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006418:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <touch_Adjust+0x4b0>)
 800641a:	213c      	movs	r1, #60	; 0x3c
 800641c:	2005      	movs	r0, #5
 800641e:	f7fe f8a6 	bl	800456e <lcd_ShowStr>
						HAL_Delay(1000);
 8006422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006426:	f000 fbcd 	bl	8006bc4 <HAL_Delay>
						continue;
 800642a:	e16f      	b.n	800670c <touch_Adjust+0x774>
 800642c:	f3af 8000 	nop.w
 8006430:	66666666 	.word	0x66666666
 8006434:	3fee6666 	.word	0x3fee6666
 8006438:	cccccccd 	.word	0xcccccccd
 800643c:	3ff0cccc 	.word	0x3ff0cccc
 8006440:	20000368 	.word	0x20000368
 8006444:	0800e91c 	.word	0x0800e91c
 8006448:	0800e93c 	.word	0x0800e93c
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 800644c:	88bb      	ldrh	r3, [r7, #4]
 800644e:	461a      	mov	r2, r3
 8006450:	893b      	ldrh	r3, [r7, #8]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	bfb8      	it	lt
 8006458:	425b      	neglt	r3, r3
 800645a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	461a      	mov	r2, r3
 8006460:	897b      	ldrh	r3, [r7, #10]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	bfb8      	it	lt
 8006468:	425b      	neglt	r3, r3
 800646a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	fb03 f303 	mul.w	r3, r3, r3
 8006472:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	fb03 f303 	mul.w	r3, r3, r3
 800647a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f7fa f83e 	bl	8000504 <__aeabi_ui2d>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	ec43 2b10 	vmov	d0, r2, r3
 8006490:	f007 fa64 	bl	800d95c <sqrt>
 8006494:	ec53 2b10 	vmov	r2, r3, d0
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	f7fa fb84 	bl	8000ba8 <__aeabi_d2uiz>
 80064a0:	4603      	mov	r3, r0
 80064a2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 80064a4:	883b      	ldrh	r3, [r7, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	89bb      	ldrh	r3, [r7, #12]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bfb8      	it	lt
 80064b0:	425b      	neglt	r3, r3
 80064b2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 80064b4:	887b      	ldrh	r3, [r7, #2]
 80064b6:	461a      	mov	r2, r3
 80064b8:	89fb      	ldrh	r3, [r7, #14]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bfb8      	it	lt
 80064c0:	425b      	neglt	r3, r3
 80064c2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	fb03 f303 	mul.w	r3, r3, r3
 80064ca:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	fb03 f303 	mul.w	r3, r3, r3
 80064d2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	4413      	add	r3, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fa f812 	bl	8000504 <__aeabi_ui2d>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	ec43 2b10 	vmov	d0, r2, r3
 80064e8:	f007 fa38 	bl	800d95c <sqrt>
 80064ec:	ec53 2b10 	vmov	r2, r3, d0
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	f7fa fb58 	bl	8000ba8 <__aeabi_d2uiz>
 80064f8:	4603      	mov	r3, r0
 80064fa:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80064fc:	8b7b      	ldrh	r3, [r7, #26]
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006506:	8b3b      	ldrh	r3, [r7, #24]
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006510:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006514:	ee16 0a90 	vmov	r0, s13
 8006518:	f7fa f816 	bl	8000548 <__aeabi_f2d>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8006524:	a383      	add	r3, pc, #524	; (adr r3, 8006734 <touch_Adjust+0x79c>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800652e:	f7fa fad5 	bl	8000adc <__aeabi_dcmplt>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <touch_Adjust+0x5b4>
 8006538:	a380      	add	r3, pc, #512	; (adr r3, 800673c <touch_Adjust+0x7a4>)
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006542:	f7fa fae9 	bl	8000b18 <__aeabi_dcmpgt>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d036      	beq.n	80065ba <touch_Adjust+0x622>
					{
						cnt=0;
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8006552:	4b71      	ldr	r3, [pc, #452]	; (8006718 <touch_Adjust+0x780>)
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	3b14      	subs	r3, #20
 8006558:	b298      	uxth	r0, r3
 800655a:	4b6f      	ldr	r3, [pc, #444]	; (8006718 <touch_Adjust+0x780>)
 800655c:	885b      	ldrh	r3, [r3, #2]
 800655e:	3b14      	subs	r3, #20
 8006560:	b29b      	uxth	r3, r3
 8006562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006566:	4619      	mov	r1, r3
 8006568:	f7ff fbfa 	bl	8005d60 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800656c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006570:	2114      	movs	r1, #20
 8006572:	2014      	movs	r0, #20
 8006574:	f7ff fbf4 	bl	8005d60 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8006578:	2300      	movs	r3, #0
 800657a:	9302      	str	r3, [sp, #8]
 800657c:	2310      	movs	r3, #16
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800658a:	4a64      	ldr	r2, [pc, #400]	; (800671c <touch_Adjust+0x784>)
 800658c:	2128      	movs	r1, #40	; 0x28
 800658e:	2005      	movs	r0, #5
 8006590:	f7fd ffed 	bl	800456e <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8006594:	2300      	movs	r3, #0
 8006596:	9302      	str	r3, [sp, #8]
 8006598:	2310      	movs	r3, #16
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80065a6:	4a5e      	ldr	r2, [pc, #376]	; (8006720 <touch_Adjust+0x788>)
 80065a8:	213c      	movs	r1, #60	; 0x3c
 80065aa:	2005      	movs	r0, #5
 80065ac:	f7fd ffdf 	bl	800456e <lcd_ShowStr>

						HAL_Delay(1000);
 80065b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065b4:	f000 fb06 	bl	8006bc4 <HAL_Delay>
 							continue;
 80065b8:	e0a8      	b.n	800670c <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 80065ba:	4b57      	ldr	r3, [pc, #348]	; (8006718 <touch_Adjust+0x780>)
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	3b28      	subs	r3, #40	; 0x28
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80065c8:	88bb      	ldrh	r3, [r7, #4]
 80065ca:	461a      	mov	r2, r3
 80065cc:	883b      	ldrh	r3, [r7, #0]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065dc:	4b51      	ldr	r3, [pc, #324]	; (8006724 <touch_Adjust+0x78c>)
 80065de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 80065e2:	4b4d      	ldr	r3, [pc, #308]	; (8006718 <touch_Adjust+0x780>)
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065ee:	4b4d      	ldr	r3, [pc, #308]	; (8006724 <touch_Adjust+0x78c>)
 80065f0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80065f4:	88bb      	ldrh	r3, [r7, #4]
 80065f6:	461a      	mov	r2, r3
 80065f8:	883b      	ldrh	r3, [r7, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006608:	ee37 7a67 	vsub.f32	s14, s14, s15
 800660c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006618:	ee17 3a90 	vmov	r3, s15
 800661c:	b21a      	sxth	r2, r3
 800661e:	4b41      	ldr	r3, [pc, #260]	; (8006724 <touch_Adjust+0x78c>)
 8006620:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8006622:	4b3d      	ldr	r3, [pc, #244]	; (8006718 <touch_Adjust+0x780>)
 8006624:	885b      	ldrh	r3, [r3, #2]
 8006626:	3b28      	subs	r3, #40	; 0x28
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006630:	897b      	ldrh	r3, [r7, #10]
 8006632:	461a      	mov	r2, r3
 8006634:	887b      	ldrh	r3, [r7, #2]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006644:	4b37      	ldr	r3, [pc, #220]	; (8006724 <touch_Adjust+0x78c>)
 8006646:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 800664a:	4b33      	ldr	r3, [pc, #204]	; (8006718 <touch_Adjust+0x780>)
 800664c:	885b      	ldrh	r3, [r3, #2]
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006656:	4b33      	ldr	r3, [pc, #204]	; (8006724 <touch_Adjust+0x78c>)
 8006658:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800665c:	897b      	ldrh	r3, [r7, #10]
 800665e:	461a      	mov	r2, r3
 8006660:	887b      	ldrh	r3, [r7, #2]
 8006662:	4413      	add	r3, r2
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800666c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006674:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800667c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006680:	ee17 3a90 	vmov	r3, s15
 8006684:	b21a      	sxth	r2, r3
 8006686:	4b27      	ldr	r3, [pc, #156]	; (8006724 <touch_Adjust+0x78c>)
 8006688:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800668a:	4b23      	ldr	r3, [pc, #140]	; (8006718 <touch_Adjust+0x780>)
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	3b14      	subs	r3, #20
 8006690:	b298      	uxth	r0, r3
 8006692:	4b21      	ldr	r3, [pc, #132]	; (8006718 <touch_Adjust+0x780>)
 8006694:	885b      	ldrh	r3, [r3, #2]
 8006696:	3b14      	subs	r3, #20
 8006698:	b29b      	uxth	r3, r3
 800669a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800669e:	4619      	mov	r1, r3
 80066a0:	f7ff fb5e 	bl	8005d60 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 80066a4:	2300      	movs	r3, #0
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	2310      	movs	r3, #16
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80066b6:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <touch_Adjust+0x790>)
 80066b8:	2128      	movs	r1, #40	; 0x28
 80066ba:	2005      	movs	r0, #5
 80066bc:	f7fd ff57 	bl	800456e <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 80066c0:	2300      	movs	r3, #0
 80066c2:	9302      	str	r3, [sp, #8]
 80066c4:	2310      	movs	r3, #16
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80066d2:	4a16      	ldr	r2, [pc, #88]	; (800672c <touch_Adjust+0x794>)
 80066d4:	213c      	movs	r1, #60	; 0x3c
 80066d6:	2005      	movs	r0, #5
 80066d8:	f7fd ff49 	bl	800456e <lcd_ShowStr>
					HAL_Delay(1000);
 80066dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066e0:	f000 fa70 	bl	8006bc4 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 80066e4:	2300      	movs	r3, #0
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	2310      	movs	r3, #16
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80066f6:	4a0e      	ldr	r2, [pc, #56]	; (8006730 <touch_Adjust+0x798>)
 80066f8:	2128      	movs	r1, #40	; 0x28
 80066fa:	2005      	movs	r0, #5
 80066fc:	f7fd ff37 	bl	800456e <lcd_ShowStr>
					TP_Save_Adjdata();
 8006700:	f7ff fc1c 	bl	8005f3c <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8006704:	f7ff fc2a 	bl	8005f5c <TP_Get_Adjdata>
					return;
 8006708:	e001      	b.n	800670e <touch_Adjust+0x776>
			}
		}
 800670a:	bf00      	nop
		HAL_Delay(50);
 800670c:	e490      	b.n	8006030 <touch_Adjust+0x98>
 	}
}
 800670e:	3728      	adds	r7, #40	; 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	f3af 8000 	nop.w
 8006718:	20000368 	.word	0x20000368
 800671c:	0800e91c 	.word	0x0800e91c
 8006720:	0800e93c 	.word	0x0800e93c
 8006724:	2000006c 	.word	0x2000006c
 8006728:	0800e95c 	.word	0x0800e95c
 800672c:	0800e97c 	.word	0x0800e97c
 8006730:	0800e99c 	.word	0x0800e99c
 8006734:	66666666 	.word	0x66666666
 8006738:	3fee6666 	.word	0x3fee6666
 800673c:	cccccccd 	.word	0xcccccccd
 8006740:	3ff0cccc 	.word	0x3ff0cccc

08006744 <touch_init>:

void touch_init(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8006748:	4904      	ldr	r1, [pc, #16]	; (800675c <touch_init+0x18>)
 800674a:	4805      	ldr	r0, [pc, #20]	; (8006760 <touch_init+0x1c>)
 800674c:	f7ff fa84 	bl	8005c58 <TP_Read_XY>
	at24c_init();
 8006750:	f7fa fca0 	bl	8001094 <at24c_init>
	TP_Get_Adjdata();
 8006754:	f7ff fc02 	bl	8005f5c <TP_Get_Adjdata>
}
 8006758:	bf00      	nop
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000082 	.word	0x20000082
 8006760:	20000078 	.word	0x20000078

08006764 <touch_Scan>:

void touch_Scan(){
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8006768:	4b02      	ldr	r3, [pc, #8]	; (8006774 <touch_Scan+0x10>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2000      	movs	r0, #0
 800676e:	4798      	blx	r3
}
 8006770:	bf00      	nop
 8006772:	bd80      	pop	{r7, pc}
 8006774:	2000006c 	.word	0x2000006c

08006778 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 800677c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006780:	4805      	ldr	r0, [pc, #20]	; (8006798 <touch_IsTouched+0x20>)
 8006782:	f001 fd05 	bl	8008190 <HAL_GPIO_ReadPin>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
}
 8006792:	4618      	mov	r0, r3
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40020800 	.word	0x40020800

0800679c <touch_GetX>:

uint16_t touch_GetX(){
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 80067a0:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <touch_GetX+0x14>)
 80067a2:	899b      	ldrh	r3, [r3, #12]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	2000006c 	.word	0x2000006c

080067b4 <touch_GetY>:

uint16_t touch_GetY(){
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 80067b8:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <touch_GetY+0x14>)
 80067ba:	8adb      	ldrh	r3, [r3, #22]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	2000006c 	.word	0x2000006c

080067cc <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80067d0:	2201      	movs	r2, #1
 80067d2:	4906      	ldr	r1, [pc, #24]	; (80067ec <uart_init_esp+0x20>)
 80067d4:	4806      	ldr	r0, [pc, #24]	; (80067f0 <uart_init_esp+0x24>)
 80067d6:	f004 ffc2 	bl	800b75e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, 1);
 80067da:	2201      	movs	r2, #1
 80067dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067e0:	4804      	ldr	r0, [pc, #16]	; (80067f4 <uart_init_esp+0x28>)
 80067e2:	f001 fced 	bl	80081c0 <HAL_GPIO_WritePin>
}
 80067e6:	bf00      	nop
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	2000019d 	.word	0x2000019d
 80067f0:	20000584 	.word	0x20000584
 80067f4:	40021400 	.word	0x40021400

080067f8 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8006804:	887a      	ldrh	r2, [r7, #2]
 8006806:	230a      	movs	r3, #10
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4803      	ldr	r0, [pc, #12]	; (8006818 <uart_EspSendBytes+0x20>)
 800680c:	f004 ff15 	bl	800b63a <HAL_UART_Transmit>
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000584 	.word	0x20000584

0800681c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a11      	ldr	r2, [pc, #68]	; (8006870 <HAL_UART_RxCpltCallback+0x54>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d10a      	bne.n	8006844 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800682e:	230a      	movs	r3, #10
 8006830:	2201      	movs	r2, #1
 8006832:	4910      	ldr	r1, [pc, #64]	; (8006874 <HAL_UART_RxCpltCallback+0x58>)
 8006834:	4810      	ldr	r0, [pc, #64]	; (8006878 <HAL_UART_RxCpltCallback+0x5c>)
 8006836:	f004 ff00 	bl	800b63a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800683a:	2201      	movs	r2, #1
 800683c:	490d      	ldr	r1, [pc, #52]	; (8006874 <HAL_UART_RxCpltCallback+0x58>)
 800683e:	480e      	ldr	r0, [pc, #56]	; (8006878 <HAL_UART_RxCpltCallback+0x5c>)
 8006840:	f004 ff8d 	bl	800b75e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a0c      	ldr	r2, [pc, #48]	; (800687c <HAL_UART_RxCpltCallback+0x60>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d10b      	bne.n	8006866 <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <HAL_UART_RxCpltCallback+0x64>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b4f      	cmp	r3, #79	; 0x4f
 8006854:	d102      	bne.n	800685c <HAL_UART_RxCpltCallback+0x40>
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <HAL_UART_RxCpltCallback+0x68>)
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
		//else if(receive_buffer2 == 'a') light_status = 0;
		//else if(receive_buffer2 == 'A') light_status = 1;
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800685c:	2201      	movs	r2, #1
 800685e:	4908      	ldr	r1, [pc, #32]	; (8006880 <HAL_UART_RxCpltCallback+0x64>)
 8006860:	4809      	ldr	r0, [pc, #36]	; (8006888 <HAL_UART_RxCpltCallback+0x6c>)
 8006862:	f004 ff7c 	bl	800b75e <HAL_UART_Receive_IT>
	}
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40011000 	.word	0x40011000
 8006874:	2000019c 	.word	0x2000019c
 8006878:	20000540 	.word	0x20000540
 800687c:	40004400 	.word	0x40004400
 8006880:	2000019d 	.word	0x2000019d
 8006884:	2000019e 	.word	0x2000019e
 8006888:	20000584 	.word	0x20000584

0800688c <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 8006892:	4a12      	ldr	r2, [pc, #72]	; (80068dc <MX_USART1_UART_Init+0x50>)
 8006894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 8006898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800689c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800689e:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80068a4:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80068aa:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 80068b2:	220c      	movs	r2, #12
 80068b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 80068be:	2200      	movs	r2, #0
 80068c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80068c2:	4805      	ldr	r0, [pc, #20]	; (80068d8 <MX_USART1_UART_Init+0x4c>)
 80068c4:	f004 fe6c 	bl	800b5a0 <HAL_UART_Init>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80068ce:	f7fe f84f 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80068d2:	bf00      	nop
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000540 	.word	0x20000540
 80068dc:	40011000 	.word	0x40011000

080068e0 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80068e4:	4b11      	ldr	r3, [pc, #68]	; (800692c <MX_USART2_UART_Init+0x4c>)
 80068e6:	4a12      	ldr	r2, [pc, #72]	; (8006930 <MX_USART2_UART_Init+0x50>)
 80068e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80068ea:	4b10      	ldr	r3, [pc, #64]	; (800692c <MX_USART2_UART_Init+0x4c>)
 80068ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068f2:	4b0e      	ldr	r3, [pc, #56]	; (800692c <MX_USART2_UART_Init+0x4c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <MX_USART2_UART_Init+0x4c>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068fe:	4b0b      	ldr	r3, [pc, #44]	; (800692c <MX_USART2_UART_Init+0x4c>)
 8006900:	2200      	movs	r2, #0
 8006902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <MX_USART2_UART_Init+0x4c>)
 8006906:	220c      	movs	r2, #12
 8006908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800690a:	4b08      	ldr	r3, [pc, #32]	; (800692c <MX_USART2_UART_Init+0x4c>)
 800690c:	2200      	movs	r2, #0
 800690e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <MX_USART2_UART_Init+0x4c>)
 8006912:	2200      	movs	r2, #0
 8006914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006916:	4805      	ldr	r0, [pc, #20]	; (800692c <MX_USART2_UART_Init+0x4c>)
 8006918:	f004 fe42 	bl	800b5a0 <HAL_UART_Init>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006922:	f7fe f825 	bl	8004970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006926:	bf00      	nop
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000584 	.word	0x20000584
 8006930:	40004400 	.word	0x40004400

08006934 <user_init>:
 *      Author: Duyen
 */

#include "user.h"

void user_init(){
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
	memset(name, '\0', sizeof(name));	// Ten nguoi choi nhap vao
 8006938:	220b      	movs	r2, #11
 800693a:	2100      	movs	r1, #0
 800693c:	480d      	ldr	r0, [pc, #52]	; (8006974 <user_init+0x40>)
 800693e:	f005 ff0b 	bl	800c758 <memset>
	name_length = 0;					// Do dai ten nguoi choi
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <user_init+0x44>)
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
	current_score = 0;					// Diem hien tai cua nguoi choi
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <user_init+0x48>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
	current_temp = 0.0;					// Nhiet do hien tai
 800694e:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <user_init+0x4c>)
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
	current_hum = 0;					// Do am hien tai
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <user_init+0x50>)
 8006958:	2200      	movs	r2, #0
 800695a:	801a      	strh	r2, [r3, #0]
	current_light = 0;					// Anh sang hien tai
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <user_init+0x54>)
 800695e:	2200      	movs	r2, #0
 8006960:	801a      	strh	r2, [r3, #0]
	current_time = 0;					// Tong thoi gian choi hien tai
 8006962:	4b0a      	ldr	r3, [pc, #40]	; (800698c <user_init+0x58>)
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
	flag_user = FLAG_NOTSTART;			// Trang thai nguoi choi
 8006968:	4b09      	ldr	r3, [pc, #36]	; (8006990 <user_init+0x5c>)
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
}
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000144 	.word	0x20000144
 8006978:	2000014f 	.word	0x2000014f
 800697c:	20000000 	.word	0x20000000
 8006980:	20000004 	.word	0x20000004
 8006984:	20000008 	.word	0x20000008
 8006988:	2000000a 	.word	0x2000000a
 800698c:	20000150 	.word	0x20000150
 8006990:	20000154 	.word	0x20000154

08006994 <user_history>:

void user_history(){
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	flag_user = FLAG_END;
 800699a:	4b37      	ldr	r3, [pc, #220]	; (8006a78 <user_history+0xe4>)
 800699c:	2202      	movs	r2, #2
 800699e:	701a      	strb	r2, [r3, #0]
	if(num_history == 0){
 80069a0:	4b36      	ldr	r3, [pc, #216]	; (8006a7c <user_history+0xe8>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10f      	bne.n	80069c8 <user_history+0x34>
		strcpy(history[0].name, name);
 80069a8:	4935      	ldr	r1, [pc, #212]	; (8006a80 <user_history+0xec>)
 80069aa:	4836      	ldr	r0, [pc, #216]	; (8006a84 <user_history+0xf0>)
 80069ac:	f005 ff1c 	bl	800c7e8 <strcpy>
		history[0].score = current_score;
 80069b0:	4b35      	ldr	r3, [pc, #212]	; (8006a88 <user_history+0xf4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <user_history+0xf0>)
 80069b8:	819a      	strh	r2, [r3, #12]
		num_history++;
 80069ba:	4b30      	ldr	r3, [pc, #192]	; (8006a7c <user_history+0xe8>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	3301      	adds	r3, #1
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <user_history+0xe8>)
 80069c4:	701a      	strb	r2, [r3, #0]
		return;
 80069c6:	e054      	b.n	8006a72 <user_history+0xde>
	}
	uint8_t i;
	for(i = num_history; i > 0; i--){
 80069c8:	4b2c      	ldr	r3, [pc, #176]	; (8006a7c <user_history+0xe8>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	71fb      	strb	r3, [r7, #7]
 80069ce:	e029      	b.n	8006a24 <user_history+0x90>
		if(history[i - 1].score < current_score){
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	1e5a      	subs	r2, r3, #1
 80069d4:	492b      	ldr	r1, [pc, #172]	; (8006a84 <user_history+0xf0>)
 80069d6:	4613      	mov	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	440b      	add	r3, r1
 80069e0:	330c      	adds	r3, #12
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	4b28      	ldr	r3, [pc, #160]	; (8006a88 <user_history+0xf4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d21e      	bcs.n	8006a2c <user_history+0x98>
			history[i] = history[i - 1];
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	1e5a      	subs	r2, r3, #1
 80069f2:	79f9      	ldrb	r1, [r7, #7]
 80069f4:	4823      	ldr	r0, [pc, #140]	; (8006a84 <user_history+0xf0>)
 80069f6:	460b      	mov	r3, r1
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	1a5b      	subs	r3, r3, r1
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4418      	add	r0, r3
 8006a00:	4920      	ldr	r1, [pc, #128]	; (8006a84 <user_history+0xf0>)
 8006a02:	4613      	mov	r3, r2
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	18ca      	adds	r2, r1, r3
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	6814      	ldr	r4, [r2, #0]
 8006a10:	6850      	ldr	r0, [r2, #4]
 8006a12:	6891      	ldr	r1, [r2, #8]
 8006a14:	601c      	str	r4, [r3, #0]
 8006a16:	6058      	str	r0, [r3, #4]
 8006a18:	6099      	str	r1, [r3, #8]
 8006a1a:	8992      	ldrh	r2, [r2, #12]
 8006a1c:	819a      	strh	r2, [r3, #12]
	for(i = num_history; i > 0; i--){
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	71fb      	strb	r3, [r7, #7]
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1d2      	bne.n	80069d0 <user_history+0x3c>
 8006a2a:	e000      	b.n	8006a2e <user_history+0x9a>
		}else{
			break;
 8006a2c:	bf00      	nop
		}
	}
	strcpy(history[i].name, name);
 8006a2e:	79fa      	ldrb	r2, [r7, #7]
 8006a30:	4613      	mov	r3, r2
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <user_history+0xf0>)
 8006a3a:	4413      	add	r3, r2
 8006a3c:	4910      	ldr	r1, [pc, #64]	; (8006a80 <user_history+0xec>)
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f005 fed2 	bl	800c7e8 <strcpy>
	history[i].score = current_score;
 8006a44:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <user_history+0xf4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	79fa      	ldrb	r2, [r7, #7]
 8006a4a:	b298      	uxth	r0, r3
 8006a4c:	490d      	ldr	r1, [pc, #52]	; (8006a84 <user_history+0xf0>)
 8006a4e:	4613      	mov	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	440b      	add	r3, r1
 8006a58:	330c      	adds	r3, #12
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	801a      	strh	r2, [r3, #0]
	if(num_history < MAX_HISTORY){
 8006a5e:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <user_history+0xe8>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d805      	bhi.n	8006a72 <user_history+0xde>
		num_history++;
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <user_history+0xe8>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <user_history+0xe8>)
 8006a70:	701a      	strb	r2, [r3, #0]
	}
}
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd90      	pop	{r4, r7, pc}
 8006a78:	20000154 	.word	0x20000154
 8006a7c:	20000140 	.word	0x20000140
 8006a80:	20000144 	.word	0x20000144
 8006a84:	20000288 	.word	0x20000288
 8006a88:	20000000 	.word	0x20000000

08006a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006a90:	480d      	ldr	r0, [pc, #52]	; (8006ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006a92:	490e      	ldr	r1, [pc, #56]	; (8006acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006a94:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a98:	e002      	b.n	8006aa0 <LoopCopyDataInit>

08006a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a9e:	3304      	adds	r3, #4

08006aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006aa4:	d3f9      	bcc.n	8006a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006aa6:	4a0b      	ldr	r2, [pc, #44]	; (8006ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006aa8:	4c0b      	ldr	r4, [pc, #44]	; (8006ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006aac:	e001      	b.n	8006ab2 <LoopFillZerobss>

08006aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ab0:	3204      	adds	r2, #4

08006ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ab4:	d3fb      	bcc.n	8006aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ab6:	f7fe fea5 	bl	8005804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006aba:	f005 fe0f 	bl	800c6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006abe:	f7fd fe93 	bl	80047e8 <main>
  bx  lr    
 8006ac2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006acc:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8006ad0:	080e9f28 	.word	0x080e9f28
  ldr r2, =_sbss
 8006ad4:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8006ad8:	200005dc 	.word	0x200005dc

08006adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006adc:	e7fe      	b.n	8006adc <ADC_IRQHandler>
	...

08006ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ae4:	4b0e      	ldr	r3, [pc, #56]	; (8006b20 <HAL_Init+0x40>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a0d      	ldr	r2, [pc, #52]	; (8006b20 <HAL_Init+0x40>)
 8006aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_Init+0x40>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <HAL_Init+0x40>)
 8006af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <HAL_Init+0x40>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a07      	ldr	r2, [pc, #28]	; (8006b20 <HAL_Init+0x40>)
 8006b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b08:	2003      	movs	r0, #3
 8006b0a:	f000 fd61 	bl	80075d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b0e:	200f      	movs	r0, #15
 8006b10:	f000 f808 	bl	8006b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b14:	f7fe faa4 	bl	8005060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40023c00 	.word	0x40023c00

08006b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <HAL_InitTick+0x54>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <HAL_InitTick+0x58>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	4619      	mov	r1, r3
 8006b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fd79 	bl	800763a <HAL_SYSTICK_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e00e      	b.n	8006b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b0f      	cmp	r3, #15
 8006b56:	d80a      	bhi.n	8006b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b58:	2200      	movs	r2, #0
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	f000 fd41 	bl	80075e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b64:	4a06      	ldr	r2, [pc, #24]	; (8006b80 <HAL_InitTick+0x5c>)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e000      	b.n	8006b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000068 	.word	0x20000068
 8006b7c:	200000a8 	.word	0x200000a8
 8006b80:	200000a4 	.word	0x200000a4

08006b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b88:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <HAL_IncTick+0x20>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <HAL_IncTick+0x24>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4413      	add	r3, r2
 8006b94:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <HAL_IncTick+0x24>)
 8006b96:	6013      	str	r3, [r2, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	200000a8 	.word	0x200000a8
 8006ba8:	200005c8 	.word	0x200005c8

08006bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  return uwTick;
 8006bb0:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <HAL_GetTick+0x14>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	200005c8 	.word	0x200005c8

08006bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bcc:	f7ff ffee 	bl	8006bac <HAL_GetTick>
 8006bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bdc:	d005      	beq.n	8006bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <HAL_Delay+0x44>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006bea:	bf00      	nop
 8006bec:	f7ff ffde 	bl	8006bac <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d8f7      	bhi.n	8006bec <HAL_Delay+0x28>
  {
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	200000a8 	.word	0x200000a8

08006c0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e033      	b.n	8006c8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fe fa40 	bl	80050b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d118      	bne.n	8006c7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c52:	f023 0302 	bic.w	r3, r3, #2
 8006c56:	f043 0202 	orr.w	r2, r3, #2
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa68 	bl	8007134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f023 0303 	bic.w	r3, r3, #3
 8006c72:	f043 0201 	orr.w	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	641a      	str	r2, [r3, #64]	; 0x40
 8006c7a:	e001      	b.n	8006c80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_ADC_Start_DMA+0x1e>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e0e9      	b.n	8006e86 <HAL_ADC_Start_DMA+0x1f2>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d018      	beq.n	8006cfa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006cd8:	4b6d      	ldr	r3, [pc, #436]	; (8006e90 <HAL_ADC_Start_DMA+0x1fc>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a6d      	ldr	r2, [pc, #436]	; (8006e94 <HAL_ADC_Start_DMA+0x200>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	0c9a      	lsrs	r2, r3, #18
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	4413      	add	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006cec:	e002      	b.n	8006cf4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f9      	bne.n	8006cee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d08:	d107      	bne.n	8006d1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	f040 80a1 	bne.w	8006e6c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006d32:	f023 0301 	bic.w	r3, r3, #1
 8006d36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d68:	d106      	bne.n	8006d78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6e:	f023 0206 	bic.w	r2, r3, #6
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	645a      	str	r2, [r3, #68]	; 0x44
 8006d76:	e002      	b.n	8006d7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d86:	4b44      	ldr	r3, [pc, #272]	; (8006e98 <HAL_ADC_Start_DMA+0x204>)
 8006d88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	4a43      	ldr	r2, [pc, #268]	; (8006e9c <HAL_ADC_Start_DMA+0x208>)
 8006d90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	4a42      	ldr	r2, [pc, #264]	; (8006ea0 <HAL_ADC_Start_DMA+0x20c>)
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	4a41      	ldr	r2, [pc, #260]	; (8006ea4 <HAL_ADC_Start_DMA+0x210>)
 8006da0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006daa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006dba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	334c      	adds	r3, #76	; 0x4c
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f000 fce8 	bl	80077b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d12a      	bne.n	8006e42 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a2d      	ldr	r2, [pc, #180]	; (8006ea8 <HAL_ADC_Start_DMA+0x214>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d015      	beq.n	8006e22 <HAL_ADC_Start_DMA+0x18e>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a2c      	ldr	r2, [pc, #176]	; (8006eac <HAL_ADC_Start_DMA+0x218>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d105      	bne.n	8006e0c <HAL_ADC_Start_DMA+0x178>
 8006e00:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <HAL_ADC_Start_DMA+0x204>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a27      	ldr	r2, [pc, #156]	; (8006eb0 <HAL_ADC_Start_DMA+0x21c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d136      	bne.n	8006e84 <HAL_ADC_Start_DMA+0x1f0>
 8006e16:	4b20      	ldr	r3, [pc, #128]	; (8006e98 <HAL_ADC_Start_DMA+0x204>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d130      	bne.n	8006e84 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d129      	bne.n	8006e84 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006e3e:	609a      	str	r2, [r3, #8]
 8006e40:	e020      	b.n	8006e84 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <HAL_ADC_Start_DMA+0x214>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d11b      	bne.n	8006e84 <HAL_ADC_Start_DMA+0x1f0>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d114      	bne.n	8006e84 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006e68:	609a      	str	r2, [r3, #8]
 8006e6a:	e00b      	b.n	8006e84 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	f043 0210 	orr.w	r2, r3, #16
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7c:	f043 0201 	orr.w	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000068 	.word	0x20000068
 8006e94:	431bde83 	.word	0x431bde83
 8006e98:	40012300 	.word	0x40012300
 8006e9c:	0800732d 	.word	0x0800732d
 8006ea0:	080073e7 	.word	0x080073e7
 8006ea4:	08007403 	.word	0x08007403
 8006ea8:	40012000 	.word	0x40012000
 8006eac:	40012100 	.word	0x40012100
 8006eb0:	40012200 	.word	0x40012200

08006eb4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_ADC_ConfigChannel+0x1c>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e105      	b.n	8007118 <HAL_ADC_ConfigChannel+0x228>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b09      	cmp	r3, #9
 8006f1a:	d925      	bls.n	8006f68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68d9      	ldr	r1, [r3, #12]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	4413      	add	r3, r2
 8006f30:	3b1e      	subs	r3, #30
 8006f32:	2207      	movs	r2, #7
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	43da      	mvns	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	400a      	ands	r2, r1
 8006f40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68d9      	ldr	r1, [r3, #12]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	4618      	mov	r0, r3
 8006f54:	4603      	mov	r3, r0
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	4403      	add	r3, r0
 8006f5a:	3b1e      	subs	r3, #30
 8006f5c:	409a      	lsls	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	60da      	str	r2, [r3, #12]
 8006f66:	e022      	b.n	8006fae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6919      	ldr	r1, [r3, #16]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	4613      	mov	r3, r2
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	4413      	add	r3, r2
 8006f7c:	2207      	movs	r2, #7
 8006f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f82:	43da      	mvns	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	400a      	ands	r2, r1
 8006f8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6919      	ldr	r1, [r3, #16]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	4403      	add	r3, r0
 8006fa4:	409a      	lsls	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b06      	cmp	r3, #6
 8006fb4:	d824      	bhi.n	8007000 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	3b05      	subs	r3, #5
 8006fc8:	221f      	movs	r2, #31
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	43da      	mvns	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	400a      	ands	r2, r1
 8006fd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	3b05      	subs	r3, #5
 8006ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8006ffe:	e04c      	b.n	800709a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b0c      	cmp	r3, #12
 8007006:	d824      	bhi.n	8007052 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	3b23      	subs	r3, #35	; 0x23
 800701a:	221f      	movs	r2, #31
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	43da      	mvns	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	400a      	ands	r2, r1
 8007028:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	4618      	mov	r0, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	3b23      	subs	r3, #35	; 0x23
 8007044:	fa00 f203 	lsl.w	r2, r0, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	631a      	str	r2, [r3, #48]	; 0x30
 8007050:	e023      	b.n	800709a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	3b41      	subs	r3, #65	; 0x41
 8007064:	221f      	movs	r2, #31
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43da      	mvns	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	400a      	ands	r2, r1
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	4618      	mov	r0, r3
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	3b41      	subs	r3, #65	; 0x41
 800708e:	fa00 f203 	lsl.w	r2, r0, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800709a:	4b22      	ldr	r3, [pc, #136]	; (8007124 <HAL_ADC_ConfigChannel+0x234>)
 800709c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a21      	ldr	r2, [pc, #132]	; (8007128 <HAL_ADC_ConfigChannel+0x238>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d109      	bne.n	80070bc <HAL_ADC_ConfigChannel+0x1cc>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b12      	cmp	r3, #18
 80070ae:	d105      	bne.n	80070bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a19      	ldr	r2, [pc, #100]	; (8007128 <HAL_ADC_ConfigChannel+0x238>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d123      	bne.n	800710e <HAL_ADC_ConfigChannel+0x21e>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b10      	cmp	r3, #16
 80070cc:	d003      	beq.n	80070d6 <HAL_ADC_ConfigChannel+0x1e6>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b11      	cmp	r3, #17
 80070d4:	d11b      	bne.n	800710e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d111      	bne.n	800710e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80070ea:	4b10      	ldr	r3, [pc, #64]	; (800712c <HAL_ADC_ConfigChannel+0x23c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a10      	ldr	r2, [pc, #64]	; (8007130 <HAL_ADC_ConfigChannel+0x240>)
 80070f0:	fba2 2303 	umull	r2, r3, r2, r3
 80070f4:	0c9a      	lsrs	r2, r3, #18
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007100:	e002      	b.n	8007108 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	3b01      	subs	r3, #1
 8007106:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f9      	bne.n	8007102 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40012300 	.word	0x40012300
 8007128:	40012000 	.word	0x40012000
 800712c:	20000068 	.word	0x20000068
 8007130:	431bde83 	.word	0x431bde83

08007134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800713c:	4b79      	ldr	r3, [pc, #484]	; (8007324 <ADC_Init+0x1f0>)
 800713e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	431a      	orrs	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6859      	ldr	r1, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	021a      	lsls	r2, r3, #8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800718c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6859      	ldr	r1, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6899      	ldr	r1, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	4a58      	ldr	r2, [pc, #352]	; (8007328 <ADC_Init+0x1f4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d022      	beq.n	8007212 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6899      	ldr	r1, [r3, #8]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80071fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6899      	ldr	r1, [r3, #8]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	609a      	str	r2, [r3, #8]
 8007210:	e00f      	b.n	8007232 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007230:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0202 	bic.w	r2, r2, #2
 8007240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6899      	ldr	r1, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7e1b      	ldrb	r3, [r3, #24]
 800724c:	005a      	lsls	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01b      	beq.n	8007298 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800726e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800727e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6859      	ldr	r1, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	3b01      	subs	r3, #1
 800728c:	035a      	lsls	r2, r3, #13
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	e007      	b.n	80072a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80072b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	051a      	lsls	r2, r3, #20
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6899      	ldr	r1, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072ea:	025a      	lsls	r2, r3, #9
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689a      	ldr	r2, [r3, #8]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6899      	ldr	r1, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	029a      	lsls	r2, r3, #10
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40012300 	.word	0x40012300
 8007328:	0f000001 	.word	0x0f000001

0800732c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007342:	2b00      	cmp	r3, #0
 8007344:	d13c      	bne.n	80073c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d12b      	bne.n	80073b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007364:	2b00      	cmp	r3, #0
 8007366:	d127      	bne.n	80073b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007372:	2b00      	cmp	r3, #0
 8007374:	d006      	beq.n	8007384 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007380:	2b00      	cmp	r3, #0
 8007382:	d119      	bne.n	80073b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0220 	bic.w	r2, r2, #32
 8007392:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d105      	bne.n	80073b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	f043 0201 	orr.w	r2, r3, #1
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7ff fd7b 	bl	8006eb4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80073be:	e00e      	b.n	80073de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7ff fd85 	bl	8006edc <HAL_ADC_ErrorCallback>
}
 80073d2:	e004      	b.n	80073de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff fd67 	bl	8006ec8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2240      	movs	r2, #64	; 0x40
 8007414:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	f043 0204 	orr.w	r2, r3, #4
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff fd5a 	bl	8006edc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007440:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <__NVIC_SetPriorityGrouping+0x44>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800744c:	4013      	ands	r3, r2
 800744e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800745c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007462:	4a04      	ldr	r2, [pc, #16]	; (8007474 <__NVIC_SetPriorityGrouping+0x44>)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	60d3      	str	r3, [r2, #12]
}
 8007468:	bf00      	nop
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	e000ed00 	.word	0xe000ed00

08007478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <__NVIC_GetPriorityGrouping+0x18>)
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	0a1b      	lsrs	r3, r3, #8
 8007482:	f003 0307 	and.w	r3, r3, #7
}
 8007486:	4618      	mov	r0, r3
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	e000ed00 	.word	0xe000ed00

08007494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800749e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	db0b      	blt.n	80074be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	f003 021f 	and.w	r2, r3, #31
 80074ac:	4907      	ldr	r1, [pc, #28]	; (80074cc <__NVIC_EnableIRQ+0x38>)
 80074ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	2001      	movs	r0, #1
 80074b6:	fa00 f202 	lsl.w	r2, r0, r2
 80074ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	e000e100 	.word	0xe000e100

080074d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	db0a      	blt.n	80074fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	490c      	ldr	r1, [pc, #48]	; (800751c <__NVIC_SetPriority+0x4c>)
 80074ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ee:	0112      	lsls	r2, r2, #4
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	440b      	add	r3, r1
 80074f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074f8:	e00a      	b.n	8007510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	4908      	ldr	r1, [pc, #32]	; (8007520 <__NVIC_SetPriority+0x50>)
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	f003 030f 	and.w	r3, r3, #15
 8007506:	3b04      	subs	r3, #4
 8007508:	0112      	lsls	r2, r2, #4
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	440b      	add	r3, r1
 800750e:	761a      	strb	r2, [r3, #24]
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	e000e100 	.word	0xe000e100
 8007520:	e000ed00 	.word	0xe000ed00

08007524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007524:	b480      	push	{r7}
 8007526:	b089      	sub	sp, #36	; 0x24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f1c3 0307 	rsb	r3, r3, #7
 800753e:	2b04      	cmp	r3, #4
 8007540:	bf28      	it	cs
 8007542:	2304      	movcs	r3, #4
 8007544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	3304      	adds	r3, #4
 800754a:	2b06      	cmp	r3, #6
 800754c:	d902      	bls.n	8007554 <NVIC_EncodePriority+0x30>
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	3b03      	subs	r3, #3
 8007552:	e000      	b.n	8007556 <NVIC_EncodePriority+0x32>
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007558:	f04f 32ff 	mov.w	r2, #4294967295
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	43da      	mvns	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	401a      	ands	r2, r3
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800756c:	f04f 31ff 	mov.w	r1, #4294967295
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	fa01 f303 	lsl.w	r3, r1, r3
 8007576:	43d9      	mvns	r1, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800757c:	4313      	orrs	r3, r2
         );
}
 800757e:	4618      	mov	r0, r3
 8007580:	3724      	adds	r7, #36	; 0x24
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3b01      	subs	r3, #1
 8007598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800759c:	d301      	bcc.n	80075a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800759e:	2301      	movs	r3, #1
 80075a0:	e00f      	b.n	80075c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075a2:	4a0a      	ldr	r2, [pc, #40]	; (80075cc <SysTick_Config+0x40>)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075aa:	210f      	movs	r1, #15
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	f7ff ff8e 	bl	80074d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <SysTick_Config+0x40>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075ba:	4b04      	ldr	r3, [pc, #16]	; (80075cc <SysTick_Config+0x40>)
 80075bc:	2207      	movs	r2, #7
 80075be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	e000e010 	.word	0xe000e010

080075d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff ff29 	bl	8007430 <__NVIC_SetPriorityGrouping>
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b086      	sub	sp, #24
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	4603      	mov	r3, r0
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
 80075f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075f8:	f7ff ff3e 	bl	8007478 <__NVIC_GetPriorityGrouping>
 80075fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	6978      	ldr	r0, [r7, #20]
 8007604:	f7ff ff8e 	bl	8007524 <NVIC_EncodePriority>
 8007608:	4602      	mov	r2, r0
 800760a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800760e:	4611      	mov	r1, r2
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff ff5d 	bl	80074d0 <__NVIC_SetPriority>
}
 8007616:	bf00      	nop
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	4603      	mov	r3, r0
 8007626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff ff31 	bl	8007494 <__NVIC_EnableIRQ>
}
 8007632:	bf00      	nop
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff ffa2 	bl	800758c <SysTick_Config>
 8007648:	4603      	mov	r3, r0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007660:	f7ff faa4 	bl	8006bac <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e099      	b.n	80077a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007690:	e00f      	b.n	80076b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007692:	f7ff fa8b 	bl	8006bac <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b05      	cmp	r3, #5
 800769e:	d908      	bls.n	80076b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2203      	movs	r2, #3
 80076aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e078      	b.n	80077a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e8      	bne.n	8007692 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4b38      	ldr	r3, [pc, #224]	; (80077ac <HAL_DMA_Init+0x158>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b04      	cmp	r3, #4
 800770a:	d107      	bne.n	800771c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	4313      	orrs	r3, r2
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0307 	bic.w	r3, r3, #7
 8007732:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	2b04      	cmp	r3, #4
 8007744:	d117      	bne.n	8007776 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00e      	beq.n	8007776 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb01 	bl	8007d60 <DMA_CheckFifoParam>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d008      	beq.n	8007776 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2240      	movs	r2, #64	; 0x40
 8007768:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007772:	2301      	movs	r3, #1
 8007774:	e016      	b.n	80077a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fab8 	bl	8007cf4 <DMA_CalcBaseAndBitshift>
 8007784:	4603      	mov	r3, r0
 8007786:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778c:	223f      	movs	r2, #63	; 0x3f
 800778e:	409a      	lsls	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	f010803f 	.word	0xf010803f

080077b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_DMA_Start_IT+0x26>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e040      	b.n	8007858 <HAL_DMA_Start_IT+0xa8>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d12f      	bne.n	800784a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 fa4a 	bl	8007c98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007808:	223f      	movs	r2, #63	; 0x3f
 800780a:	409a      	lsls	r2, r3
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0216 	orr.w	r2, r2, #22
 800781e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0208 	orr.w	r2, r2, #8
 8007836:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e005      	b.n	8007856 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007852:	2302      	movs	r3, #2
 8007854:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800786e:	f7ff f99d 	bl	8006bac <HAL_GetTick>
 8007872:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d008      	beq.n	8007892 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2280      	movs	r2, #128	; 0x80
 8007884:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e052      	b.n	8007938 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0216 	bic.w	r2, r2, #22
 80078a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695a      	ldr	r2, [r3, #20]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <HAL_DMA_Abort+0x62>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0208 	bic.w	r2, r2, #8
 80078d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078e2:	e013      	b.n	800790c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078e4:	f7ff f962 	bl	8006bac <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b05      	cmp	r3, #5
 80078f0:	d90c      	bls.n	800790c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2203      	movs	r2, #3
 80078fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e015      	b.n	8007938 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e4      	bne.n	80078e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791e:	223f      	movs	r2, #63	; 0x3f
 8007920:	409a      	lsls	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d004      	beq.n	800795e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2280      	movs	r2, #128	; 0x80
 8007958:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e00c      	b.n	8007978 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2205      	movs	r2, #5
 8007962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0201 	bic.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007990:	4b92      	ldr	r3, [pc, #584]	; (8007bdc <HAL_DMA_IRQHandler+0x258>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a92      	ldr	r2, [pc, #584]	; (8007be0 <HAL_DMA_IRQHandler+0x25c>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	0a9b      	lsrs	r3, r3, #10
 800799c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ae:	2208      	movs	r2, #8
 80079b0:	409a      	lsls	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4013      	ands	r3, r2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01a      	beq.n	80079f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d013      	beq.n	80079f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0204 	bic.w	r2, r2, #4
 80079d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079dc:	2208      	movs	r2, #8
 80079de:	409a      	lsls	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e8:	f043 0201 	orr.w	r2, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f4:	2201      	movs	r2, #1
 80079f6:	409a      	lsls	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d012      	beq.n	8007a26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a12:	2201      	movs	r2, #1
 8007a14:	409a      	lsls	r2, r3
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1e:	f043 0202 	orr.w	r2, r3, #2
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	409a      	lsls	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4013      	ands	r3, r2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d012      	beq.n	8007a5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a48:	2204      	movs	r2, #4
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a54:	f043 0204 	orr.w	r2, r3, #4
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a60:	2210      	movs	r2, #16
 8007a62:	409a      	lsls	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d043      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d03c      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7e:	2210      	movs	r2, #16
 8007a80:	409a      	lsls	r2, r3
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d018      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d108      	bne.n	8007ab4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d024      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
 8007ab2:	e01f      	b.n	8007af4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01b      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
 8007ac4:	e016      	b.n	8007af4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d107      	bne.n	8007ae4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0208 	bic.w	r2, r2, #8
 8007ae2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af8:	2220      	movs	r2, #32
 8007afa:	409a      	lsls	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 808e 	beq.w	8007c22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8086 	beq.w	8007c22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	409a      	lsls	r2, r3
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b05      	cmp	r3, #5
 8007b2c:	d136      	bne.n	8007b9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0216 	bic.w	r2, r2, #22
 8007b3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	695a      	ldr	r2, [r3, #20]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <HAL_DMA_IRQHandler+0x1da>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0208 	bic.w	r2, r2, #8
 8007b6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b72:	223f      	movs	r2, #63	; 0x3f
 8007b74:	409a      	lsls	r2, r3
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d07d      	beq.n	8007c8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
        }
        return;
 8007b9a:	e078      	b.n	8007c8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01c      	beq.n	8007be4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d108      	bne.n	8007bca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d030      	beq.n	8007c22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
 8007bc8:	e02b      	b.n	8007c22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d027      	beq.n	8007c22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
 8007bda:	e022      	b.n	8007c22 <HAL_DMA_IRQHandler+0x29e>
 8007bdc:	20000068 	.word	0x20000068
 8007be0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10f      	bne.n	8007c12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0210 	bic.w	r2, r2, #16
 8007c00:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d032      	beq.n	8007c90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d022      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2205      	movs	r2, #5
 8007c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0201 	bic.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60bb      	str	r3, [r7, #8]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d307      	bcc.n	8007c6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f2      	bne.n	8007c4e <HAL_DMA_IRQHandler+0x2ca>
 8007c68:	e000      	b.n	8007c6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007c6a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
 8007c8c:	e000      	b.n	8007c90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007c8e:	bf00      	nop
    }
  }
}
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop

08007c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d108      	bne.n	8007cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007cd6:	e007      	b.n	8007ce8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	60da      	str	r2, [r3, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	3b10      	subs	r3, #16
 8007d04:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <DMA_CalcBaseAndBitshift+0x64>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	091b      	lsrs	r3, r3, #4
 8007d0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007d0e:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <DMA_CalcBaseAndBitshift+0x68>)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d909      	bls.n	8007d36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	659a      	str	r2, [r3, #88]	; 0x58
 8007d34:	e007      	b.n	8007d46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d3e:	f023 0303 	bic.w	r3, r3, #3
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	aaaaaaab 	.word	0xaaaaaaab
 8007d5c:	080e9d60 	.word	0x080e9d60

08007d60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d11f      	bne.n	8007dba <DMA_CheckFifoParam+0x5a>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d856      	bhi.n	8007e2e <DMA_CheckFifoParam+0xce>
 8007d80:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <DMA_CheckFifoParam+0x28>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007d99 	.word	0x08007d99
 8007d8c:	08007dab 	.word	0x08007dab
 8007d90:	08007d99 	.word	0x08007d99
 8007d94:	08007e2f 	.word	0x08007e2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d046      	beq.n	8007e32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007da8:	e043      	b.n	8007e32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007db2:	d140      	bne.n	8007e36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007db8:	e03d      	b.n	8007e36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc2:	d121      	bne.n	8007e08 <DMA_CheckFifoParam+0xa8>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d837      	bhi.n	8007e3a <DMA_CheckFifoParam+0xda>
 8007dca:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <DMA_CheckFifoParam+0x70>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007de1 	.word	0x08007de1
 8007dd4:	08007de7 	.word	0x08007de7
 8007dd8:	08007de1 	.word	0x08007de1
 8007ddc:	08007df9 	.word	0x08007df9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
      break;
 8007de4:	e030      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d025      	beq.n	8007e3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007df6:	e022      	b.n	8007e3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e00:	d11f      	bne.n	8007e42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007e06:	e01c      	b.n	8007e42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d903      	bls.n	8007e16 <DMA_CheckFifoParam+0xb6>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d003      	beq.n	8007e1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007e14:	e018      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]
      break;
 8007e1a:	e015      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2c:	e00b      	b.n	8007e46 <DMA_CheckFifoParam+0xe6>
      break;
 8007e2e:	bf00      	nop
 8007e30:	e00a      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
      break;
 8007e32:	bf00      	nop
 8007e34:	e008      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
      break;
 8007e36:	bf00      	nop
 8007e38:	e006      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e004      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e002      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
      break;   
 8007e42:	bf00      	nop
 8007e44:	e000      	b.n	8007e48 <DMA_CheckFifoParam+0xe8>
      break;
 8007e46:	bf00      	nop
    }
  } 
  
  return status; 
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop

08007e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b089      	sub	sp, #36	; 0x24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	e16b      	b.n	800814c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e74:	2201      	movs	r2, #1
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4013      	ands	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	f040 815a 	bne.w	8008146 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d005      	beq.n	8007eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d130      	bne.n	8007f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	43db      	mvns	r3, r3
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4013      	ands	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	091b      	lsrs	r3, r3, #4
 8007ef6:	f003 0201 	and.w	r2, r3, #1
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	fa02 f303 	lsl.w	r3, r2, r3
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f003 0303 	and.w	r3, r3, #3
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d017      	beq.n	8007f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	005b      	lsls	r3, r3, #1
 8007f22:	2203      	movs	r2, #3
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d123      	bne.n	8007f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	08da      	lsrs	r2, r3, #3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3208      	adds	r2, #8
 8007f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	220f      	movs	r2, #15
 8007f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f70:	43db      	mvns	r3, r3
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	4013      	ands	r3, r2
 8007f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	fa02 f303 	lsl.w	r3, r2, r3
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	08da      	lsrs	r2, r3, #3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3208      	adds	r2, #8
 8007f96:	69b9      	ldr	r1, [r7, #24]
 8007f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fac:	43db      	mvns	r3, r3
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f003 0203 	and.w	r2, r3, #3
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 80b4 	beq.w	8008146 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	4b60      	ldr	r3, [pc, #384]	; (8008164 <HAL_GPIO_Init+0x30c>)
 8007fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe6:	4a5f      	ldr	r2, [pc, #380]	; (8008164 <HAL_GPIO_Init+0x30c>)
 8007fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fec:	6453      	str	r3, [r2, #68]	; 0x44
 8007fee:	4b5d      	ldr	r3, [pc, #372]	; (8008164 <HAL_GPIO_Init+0x30c>)
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ffa:	4a5b      	ldr	r2, [pc, #364]	; (8008168 <HAL_GPIO_Init+0x310>)
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	089b      	lsrs	r3, r3, #2
 8008000:	3302      	adds	r3, #2
 8008002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	220f      	movs	r2, #15
 8008012:	fa02 f303 	lsl.w	r3, r2, r3
 8008016:	43db      	mvns	r3, r3
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	4013      	ands	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a52      	ldr	r2, [pc, #328]	; (800816c <HAL_GPIO_Init+0x314>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d02b      	beq.n	800807e <HAL_GPIO_Init+0x226>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a51      	ldr	r2, [pc, #324]	; (8008170 <HAL_GPIO_Init+0x318>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d025      	beq.n	800807a <HAL_GPIO_Init+0x222>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a50      	ldr	r2, [pc, #320]	; (8008174 <HAL_GPIO_Init+0x31c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01f      	beq.n	8008076 <HAL_GPIO_Init+0x21e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a4f      	ldr	r2, [pc, #316]	; (8008178 <HAL_GPIO_Init+0x320>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d019      	beq.n	8008072 <HAL_GPIO_Init+0x21a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a4e      	ldr	r2, [pc, #312]	; (800817c <HAL_GPIO_Init+0x324>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d013      	beq.n	800806e <HAL_GPIO_Init+0x216>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a4d      	ldr	r2, [pc, #308]	; (8008180 <HAL_GPIO_Init+0x328>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00d      	beq.n	800806a <HAL_GPIO_Init+0x212>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a4c      	ldr	r2, [pc, #304]	; (8008184 <HAL_GPIO_Init+0x32c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d007      	beq.n	8008066 <HAL_GPIO_Init+0x20e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a4b      	ldr	r2, [pc, #300]	; (8008188 <HAL_GPIO_Init+0x330>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d101      	bne.n	8008062 <HAL_GPIO_Init+0x20a>
 800805e:	2307      	movs	r3, #7
 8008060:	e00e      	b.n	8008080 <HAL_GPIO_Init+0x228>
 8008062:	2308      	movs	r3, #8
 8008064:	e00c      	b.n	8008080 <HAL_GPIO_Init+0x228>
 8008066:	2306      	movs	r3, #6
 8008068:	e00a      	b.n	8008080 <HAL_GPIO_Init+0x228>
 800806a:	2305      	movs	r3, #5
 800806c:	e008      	b.n	8008080 <HAL_GPIO_Init+0x228>
 800806e:	2304      	movs	r3, #4
 8008070:	e006      	b.n	8008080 <HAL_GPIO_Init+0x228>
 8008072:	2303      	movs	r3, #3
 8008074:	e004      	b.n	8008080 <HAL_GPIO_Init+0x228>
 8008076:	2302      	movs	r3, #2
 8008078:	e002      	b.n	8008080 <HAL_GPIO_Init+0x228>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <HAL_GPIO_Init+0x228>
 800807e:	2300      	movs	r3, #0
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	f002 0203 	and.w	r2, r2, #3
 8008086:	0092      	lsls	r2, r2, #2
 8008088:	4093      	lsls	r3, r2
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	4313      	orrs	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008090:	4935      	ldr	r1, [pc, #212]	; (8008168 <HAL_GPIO_Init+0x310>)
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	089b      	lsrs	r3, r3, #2
 8008096:	3302      	adds	r3, #2
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800809e:	4b3b      	ldr	r3, [pc, #236]	; (800818c <HAL_GPIO_Init+0x334>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	43db      	mvns	r3, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80080c2:	4a32      	ldr	r2, [pc, #200]	; (800818c <HAL_GPIO_Init+0x334>)
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80080c8:	4b30      	ldr	r3, [pc, #192]	; (800818c <HAL_GPIO_Init+0x334>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	43db      	mvns	r3, r3
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	4013      	ands	r3, r2
 80080d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080ec:	4a27      	ldr	r2, [pc, #156]	; (800818c <HAL_GPIO_Init+0x334>)
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80080f2:	4b26      	ldr	r3, [pc, #152]	; (800818c <HAL_GPIO_Init+0x334>)
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	43db      	mvns	r3, r3
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	4013      	ands	r3, r2
 8008100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008116:	4a1d      	ldr	r2, [pc, #116]	; (800818c <HAL_GPIO_Init+0x334>)
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800811c:	4b1b      	ldr	r3, [pc, #108]	; (800818c <HAL_GPIO_Init+0x334>)
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	43db      	mvns	r3, r3
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	4013      	ands	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008140:	4a12      	ldr	r2, [pc, #72]	; (800818c <HAL_GPIO_Init+0x334>)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	3301      	adds	r3, #1
 800814a:	61fb      	str	r3, [r7, #28]
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b0f      	cmp	r3, #15
 8008150:	f67f ae90 	bls.w	8007e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop
 8008158:	3724      	adds	r7, #36	; 0x24
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40023800 	.word	0x40023800
 8008168:	40013800 	.word	0x40013800
 800816c:	40020000 	.word	0x40020000
 8008170:	40020400 	.word	0x40020400
 8008174:	40020800 	.word	0x40020800
 8008178:	40020c00 	.word	0x40020c00
 800817c:	40021000 	.word	0x40021000
 8008180:	40021400 	.word	0x40021400
 8008184:	40021800 	.word	0x40021800
 8008188:	40021c00 	.word	0x40021c00
 800818c:	40013c00 	.word	0x40013c00

08008190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	887b      	ldrh	r3, [r7, #2]
 80081a2:	4013      	ands	r3, r2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081a8:	2301      	movs	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
 80081ac:	e001      	b.n	80081b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
 80081cc:	4613      	mov	r3, r2
 80081ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081d0:	787b      	ldrb	r3, [r7, #1]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081d6:	887a      	ldrh	r2, [r7, #2]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80081dc:	e003      	b.n	80081e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80081de:	887b      	ldrh	r3, [r7, #2]
 80081e0:	041a      	lsls	r2, r3, #16
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	619a      	str	r2, [r3, #24]
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
	...

080081f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e12b      	b.n	800845e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fc ffdc 	bl	80051d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2224      	movs	r2, #36	; 0x24
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008258:	f001 fbd8 	bl	8009a0c <HAL_RCC_GetPCLK1Freq>
 800825c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	4a81      	ldr	r2, [pc, #516]	; (8008468 <HAL_I2C_Init+0x274>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d807      	bhi.n	8008278 <HAL_I2C_Init+0x84>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4a80      	ldr	r2, [pc, #512]	; (800846c <HAL_I2C_Init+0x278>)
 800826c:	4293      	cmp	r3, r2
 800826e:	bf94      	ite	ls
 8008270:	2301      	movls	r3, #1
 8008272:	2300      	movhi	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	e006      	b.n	8008286 <HAL_I2C_Init+0x92>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4a7d      	ldr	r2, [pc, #500]	; (8008470 <HAL_I2C_Init+0x27c>)
 800827c:	4293      	cmp	r3, r2
 800827e:	bf94      	ite	ls
 8008280:	2301      	movls	r3, #1
 8008282:	2300      	movhi	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e0e7      	b.n	800845e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4a78      	ldr	r2, [pc, #480]	; (8008474 <HAL_I2C_Init+0x280>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	0c9b      	lsrs	r3, r3, #18
 8008298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4a6a      	ldr	r2, [pc, #424]	; (8008468 <HAL_I2C_Init+0x274>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d802      	bhi.n	80082c8 <HAL_I2C_Init+0xd4>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	3301      	adds	r3, #1
 80082c6:	e009      	b.n	80082dc <HAL_I2C_Init+0xe8>
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	4a69      	ldr	r2, [pc, #420]	; (8008478 <HAL_I2C_Init+0x284>)
 80082d4:	fba2 2303 	umull	r2, r3, r2, r3
 80082d8:	099b      	lsrs	r3, r3, #6
 80082da:	3301      	adds	r3, #1
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80082ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	495c      	ldr	r1, [pc, #368]	; (8008468 <HAL_I2C_Init+0x274>)
 80082f8:	428b      	cmp	r3, r1
 80082fa:	d819      	bhi.n	8008330 <HAL_I2C_Init+0x13c>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	1e59      	subs	r1, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	fbb1 f3f3 	udiv	r3, r1, r3
 800830a:	1c59      	adds	r1, r3, #1
 800830c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008310:	400b      	ands	r3, r1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_I2C_Init+0x138>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	1e59      	subs	r1, r3, #1
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	fbb1 f3f3 	udiv	r3, r1, r3
 8008324:	3301      	adds	r3, #1
 8008326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800832a:	e051      	b.n	80083d0 <HAL_I2C_Init+0x1dc>
 800832c:	2304      	movs	r3, #4
 800832e:	e04f      	b.n	80083d0 <HAL_I2C_Init+0x1dc>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d111      	bne.n	800835c <HAL_I2C_Init+0x168>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	1e58      	subs	r0, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6859      	ldr	r1, [r3, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	440b      	add	r3, r1
 8008346:	fbb0 f3f3 	udiv	r3, r0, r3
 800834a:	3301      	adds	r3, #1
 800834c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008350:	2b00      	cmp	r3, #0
 8008352:	bf0c      	ite	eq
 8008354:	2301      	moveq	r3, #1
 8008356:	2300      	movne	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	e012      	b.n	8008382 <HAL_I2C_Init+0x18e>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	1e58      	subs	r0, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6859      	ldr	r1, [r3, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	0099      	lsls	r1, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008372:	3301      	adds	r3, #1
 8008374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008378:	2b00      	cmp	r3, #0
 800837a:	bf0c      	ite	eq
 800837c:	2301      	moveq	r3, #1
 800837e:	2300      	movne	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <HAL_I2C_Init+0x196>
 8008386:	2301      	movs	r3, #1
 8008388:	e022      	b.n	80083d0 <HAL_I2C_Init+0x1dc>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10e      	bne.n	80083b0 <HAL_I2C_Init+0x1bc>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	1e58      	subs	r0, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6859      	ldr	r1, [r3, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	440b      	add	r3, r1
 80083a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80083a4:	3301      	adds	r3, #1
 80083a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ae:	e00f      	b.n	80083d0 <HAL_I2C_Init+0x1dc>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	1e58      	subs	r0, r3, #1
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6859      	ldr	r1, [r3, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	0099      	lsls	r1, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80083c6:	3301      	adds	r3, #1
 80083c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	6809      	ldr	r1, [r1, #0]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	69da      	ldr	r2, [r3, #28]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80083fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6911      	ldr	r1, [r2, #16]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	68d2      	ldr	r2, [r2, #12]
 800840a:	4311      	orrs	r1, r2
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	430b      	orrs	r3, r1
 8008412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	000186a0 	.word	0x000186a0
 800846c:	001e847f 	.word	0x001e847f
 8008470:	003d08ff 	.word	0x003d08ff
 8008474:	431bde83 	.word	0x431bde83
 8008478:	10624dd3 	.word	0x10624dd3

0800847c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	4608      	mov	r0, r1
 8008486:	4611      	mov	r1, r2
 8008488:	461a      	mov	r2, r3
 800848a:	4603      	mov	r3, r0
 800848c:	817b      	strh	r3, [r7, #10]
 800848e:	460b      	mov	r3, r1
 8008490:	813b      	strh	r3, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008496:	f7fe fb89 	bl	8006bac <HAL_GetTick>
 800849a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	f040 80d9 	bne.w	800865c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2319      	movs	r3, #25
 80084b0:	2201      	movs	r2, #1
 80084b2:	496d      	ldr	r1, [pc, #436]	; (8008668 <HAL_I2C_Mem_Write+0x1ec>)
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fc7f 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80084c0:	2302      	movs	r3, #2
 80084c2:	e0cc      	b.n	800865e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_I2C_Mem_Write+0x56>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e0c5      	b.n	800865e <HAL_I2C_Mem_Write+0x1e2>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d007      	beq.n	80084f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2221      	movs	r2, #33	; 0x21
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2240      	movs	r2, #64	; 0x40
 8008514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6a3a      	ldr	r2, [r7, #32]
 8008522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4a4d      	ldr	r2, [pc, #308]	; (800866c <HAL_I2C_Mem_Write+0x1f0>)
 8008538:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800853a:	88f8      	ldrh	r0, [r7, #6]
 800853c:	893a      	ldrh	r2, [r7, #8]
 800853e:	8979      	ldrh	r1, [r7, #10]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4603      	mov	r3, r0
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fab6 	bl	8008abc <I2C_RequestMemoryWrite>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d052      	beq.n	80085fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e081      	b.n	800865e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 fd00 	bl	8008f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00d      	beq.n	8008586 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	2b04      	cmp	r3, #4
 8008570:	d107      	bne.n	8008582 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008580:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e06b      	b.n	800865e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a0:	3b01      	subs	r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d11b      	bne.n	80085fc <HAL_I2C_Mem_Write+0x180>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d017      	beq.n	80085fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	781a      	ldrb	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1aa      	bne.n	800855a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fcec 	bl	8008fe6 <I2C_WaitOnBTFFlagUntilTimeout>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00d      	beq.n	8008630 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008618:	2b04      	cmp	r3, #4
 800861a:	d107      	bne.n	800862c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800862a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e016      	b.n	800865e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800863e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	e000      	b.n	800865e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800865c:	2302      	movs	r3, #2
  }
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	00100002 	.word	0x00100002
 800866c:	ffff0000 	.word	0xffff0000

08008670 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08c      	sub	sp, #48	; 0x30
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	4608      	mov	r0, r1
 800867a:	4611      	mov	r1, r2
 800867c:	461a      	mov	r2, r3
 800867e:	4603      	mov	r3, r0
 8008680:	817b      	strh	r3, [r7, #10]
 8008682:	460b      	mov	r3, r1
 8008684:	813b      	strh	r3, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800868a:	f7fe fa8f 	bl	8006bac <HAL_GetTick>
 800868e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b20      	cmp	r3, #32
 800869a:	f040 8208 	bne.w	8008aae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	2319      	movs	r3, #25
 80086a4:	2201      	movs	r2, #1
 80086a6:	497b      	ldr	r1, [pc, #492]	; (8008894 <HAL_I2C_Mem_Read+0x224>)
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 fb85 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80086b4:	2302      	movs	r3, #2
 80086b6:	e1fb      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_I2C_Mem_Read+0x56>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e1f4      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d007      	beq.n	80086ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2222      	movs	r2, #34	; 0x22
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2240      	movs	r2, #64	; 0x40
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800871c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4a5b      	ldr	r2, [pc, #364]	; (8008898 <HAL_I2C_Mem_Read+0x228>)
 800872c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800872e:	88f8      	ldrh	r0, [r7, #6]
 8008730:	893a      	ldrh	r2, [r7, #8]
 8008732:	8979      	ldrh	r1, [r7, #10]
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	4603      	mov	r3, r0
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 fa52 	bl	8008be8 <I2C_RequestMemoryRead>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e1b0      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008752:	2b00      	cmp	r3, #0
 8008754:	d113      	bne.n	800877e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008756:	2300      	movs	r3, #0
 8008758:	623b      	str	r3, [r7, #32]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	623b      	str	r3, [r7, #32]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	623b      	str	r3, [r7, #32]
 800876a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	e184      	b.n	8008a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008782:	2b01      	cmp	r3, #1
 8008784:	d11b      	bne.n	80087be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008796:	2300      	movs	r3, #0
 8008798:	61fb      	str	r3, [r7, #28]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	61fb      	str	r3, [r7, #28]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	61fb      	str	r3, [r7, #28]
 80087aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	e164      	b.n	8008a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d11b      	bne.n	80087fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087e6:	2300      	movs	r3, #0
 80087e8:	61bb      	str	r3, [r7, #24]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	61bb      	str	r3, [r7, #24]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	e144      	b.n	8008a88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	617b      	str	r3, [r7, #20]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008814:	e138      	b.n	8008a88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881a:	2b03      	cmp	r3, #3
 800881c:	f200 80f1 	bhi.w	8008a02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008824:	2b01      	cmp	r3, #1
 8008826:	d123      	bne.n	8008870 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 fc1b 	bl	8009068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e139      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	b2d2      	uxtb	r2, r2
 8008848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008858:	3b01      	subs	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008864:	b29b      	uxth	r3, r3
 8008866:	3b01      	subs	r3, #1
 8008868:	b29a      	uxth	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800886e:	e10b      	b.n	8008a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008874:	2b02      	cmp	r3, #2
 8008876:	d14e      	bne.n	8008916 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	2200      	movs	r2, #0
 8008880:	4906      	ldr	r1, [pc, #24]	; (800889c <HAL_I2C_Mem_Read+0x22c>)
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 fa98 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d008      	beq.n	80088a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e10e      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
 8008892:	bf00      	nop
 8008894:	00100002 	.word	0x00100002
 8008898:	ffff0000 	.word	0xffff0000
 800889c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691a      	ldr	r2, [r3, #16]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088cc:	3b01      	subs	r3, #1
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d8:	b29b      	uxth	r3, r3
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890a:	b29b      	uxth	r3, r3
 800890c:	3b01      	subs	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008914:	e0b8      	b.n	8008a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891c:	2200      	movs	r2, #0
 800891e:	4966      	ldr	r1, [pc, #408]	; (8008ab8 <HAL_I2C_Mem_Read+0x448>)
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fa49 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e0bf      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800893e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691a      	ldr	r2, [r3, #16]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008968:	b29b      	uxth	r3, r3
 800896a:	3b01      	subs	r3, #1
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	2200      	movs	r2, #0
 800897a:	494f      	ldr	r1, [pc, #316]	; (8008ab8 <HAL_I2C_Mem_Read+0x448>)
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fa1b 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e091      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800899a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	691a      	ldr	r2, [r3, #16]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	3b01      	subs	r3, #1
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a00:	e042      	b.n	8008a88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fb2e 	bl	8009068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e04c      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	691a      	ldr	r2, [r3, #16]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	b2d2      	uxtb	r2, r2
 8008a22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	f003 0304 	and.w	r3, r3, #4
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d118      	bne.n	8008a88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691a      	ldr	r2, [r3, #16]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	b2d2      	uxtb	r2, r2
 8008a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f47f aec2 	bne.w	8008816 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e000      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008aae:	2302      	movs	r3, #2
  }
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3728      	adds	r7, #40	; 0x28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	00010004 	.word	0x00010004

08008abc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	817b      	strh	r3, [r7, #10]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	813b      	strh	r3, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ae4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f960 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00d      	beq.n	8008b1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b0c:	d103      	bne.n	8008b16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e05f      	b.n	8008bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b1a:	897b      	ldrh	r3, [r7, #10]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	6a3a      	ldr	r2, [r7, #32]
 8008b2e:	492d      	ldr	r1, [pc, #180]	; (8008be4 <I2C_RequestMemoryWrite+0x128>)
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f998 	bl	8008e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e04c      	b.n	8008bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	617b      	str	r3, [r7, #20]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	617b      	str	r3, [r7, #20]
 8008b54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b58:	6a39      	ldr	r1, [r7, #32]
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fa02 	bl	8008f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00d      	beq.n	8008b82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d107      	bne.n	8008b7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e02b      	b.n	8008bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d105      	bne.n	8008b94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b88:	893b      	ldrh	r3, [r7, #8]
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	611a      	str	r2, [r3, #16]
 8008b92:	e021      	b.n	8008bd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b94:	893b      	ldrh	r3, [r7, #8]
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba4:	6a39      	ldr	r1, [r7, #32]
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 f9dc 	bl	8008f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00d      	beq.n	8008bce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d107      	bne.n	8008bca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e005      	b.n	8008bda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bce:	893b      	ldrh	r3, [r7, #8]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	00010002 	.word	0x00010002

08008be8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af02      	add	r7, sp, #8
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	817b      	strh	r3, [r7, #10]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	813b      	strh	r3, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 f8c2 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00d      	beq.n	8008c56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c48:	d103      	bne.n	8008c52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e0aa      	b.n	8008dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c56:	897b      	ldrh	r3, [r7, #10]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	6a3a      	ldr	r2, [r7, #32]
 8008c6a:	4952      	ldr	r1, [pc, #328]	; (8008db4 <I2C_RequestMemoryRead+0x1cc>)
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 f8fa 	bl	8008e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e097      	b.n	8008dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c94:	6a39      	ldr	r1, [r7, #32]
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 f964 	bl	8008f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00d      	beq.n	8008cbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	d107      	bne.n	8008cba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e076      	b.n	8008dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cbe:	88fb      	ldrh	r3, [r7, #6]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d105      	bne.n	8008cd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cc4:	893b      	ldrh	r3, [r7, #8]
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	611a      	str	r2, [r3, #16]
 8008cce:	e021      	b.n	8008d14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008cd0:	893b      	ldrh	r3, [r7, #8]
 8008cd2:	0a1b      	lsrs	r3, r3, #8
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce0:	6a39      	ldr	r1, [r7, #32]
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 f93e 	bl	8008f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00d      	beq.n	8008d0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d107      	bne.n	8008d06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e050      	b.n	8008dac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d0a:	893b      	ldrh	r3, [r7, #8]
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d16:	6a39      	ldr	r1, [r7, #32]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 f923 	bl	8008f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00d      	beq.n	8008d40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d107      	bne.n	8008d3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e035      	b.n	8008dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 f82b 	bl	8008db8 <I2C_WaitOnFlagUntilTimeout>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00d      	beq.n	8008d84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d76:	d103      	bne.n	8008d80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e013      	b.n	8008dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d84:	897b      	ldrh	r3, [r7, #10]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f043 0301 	orr.w	r3, r3, #1
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	6a3a      	ldr	r2, [r7, #32]
 8008d98:	4906      	ldr	r1, [pc, #24]	; (8008db4 <I2C_RequestMemoryRead+0x1cc>)
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 f863 	bl	8008e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	00010002 	.word	0x00010002

08008db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dc8:	e025      	b.n	8008e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd0:	d021      	beq.n	8008e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd2:	f7fd feeb 	bl	8006bac <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d116      	bne.n	8008e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	f043 0220 	orr.w	r2, r3, #32
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e023      	b.n	8008e5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	0c1b      	lsrs	r3, r3, #16
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d10d      	bne.n	8008e3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	43da      	mvns	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bf0c      	ite	eq
 8008e32:	2301      	moveq	r3, #1
 8008e34:	2300      	movne	r3, #0
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	e00c      	b.n	8008e56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	43da      	mvns	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4013      	ands	r3, r2
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bf0c      	ite	eq
 8008e4e:	2301      	moveq	r3, #1
 8008e50:	2300      	movne	r3, #0
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	461a      	mov	r2, r3
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d0b6      	beq.n	8008dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e74:	e051      	b.n	8008f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e84:	d123      	bne.n	8008ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	f043 0204 	orr.w	r2, r3, #4
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e046      	b.n	8008f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed4:	d021      	beq.n	8008f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ed6:	f7fd fe69 	bl	8006bac <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d302      	bcc.n	8008eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d116      	bne.n	8008f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f043 0220 	orr.w	r2, r3, #32
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e020      	b.n	8008f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	0c1b      	lsrs	r3, r3, #16
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d10c      	bne.n	8008f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	43da      	mvns	r2, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bf14      	ite	ne
 8008f36:	2301      	movne	r3, #1
 8008f38:	2300      	moveq	r3, #0
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	e00b      	b.n	8008f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	43da      	mvns	r2, r3
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d18d      	bne.n	8008e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f70:	e02d      	b.n	8008fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 f8ce 	bl	8009114 <I2C_IsAcknowledgeFailed>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e02d      	b.n	8008fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d021      	beq.n	8008fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f8a:	f7fd fe0f 	bl	8006bac <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d302      	bcc.n	8008fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d116      	bne.n	8008fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	f043 0220 	orr.w	r2, r3, #32
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e007      	b.n	8008fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd8:	2b80      	cmp	r3, #128	; 0x80
 8008fda:	d1ca      	bne.n	8008f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ff2:	e02d      	b.n	8009050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 f88d 	bl	8009114 <I2C_IsAcknowledgeFailed>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e02d      	b.n	8009060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900a:	d021      	beq.n	8009050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800900c:	f7fd fdce 	bl	8006bac <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	429a      	cmp	r2, r3
 800901a:	d302      	bcc.n	8009022 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d116      	bne.n	8009050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	f043 0220 	orr.w	r2, r3, #32
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e007      	b.n	8009060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b04      	cmp	r3, #4
 800905c:	d1ca      	bne.n	8008ff4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009074:	e042      	b.n	80090fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b10      	cmp	r3, #16
 8009082:	d119      	bne.n	80090b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0210 	mvn.w	r2, #16
 800908c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e029      	b.n	800910c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b8:	f7fd fd78 	bl	8006bac <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d302      	bcc.n	80090ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d116      	bne.n	80090fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e8:	f043 0220 	orr.w	r2, r3, #32
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e007      	b.n	800910c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009106:	2b40      	cmp	r3, #64	; 0x40
 8009108:	d1b5      	bne.n	8009076 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800912a:	d11b      	bne.n	8009164 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009134:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	f043 0204 	orr.w	r2, r3, #4
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
	...

08009174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e264      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d075      	beq.n	800927e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009192:	4ba3      	ldr	r3, [pc, #652]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 030c 	and.w	r3, r3, #12
 800919a:	2b04      	cmp	r3, #4
 800919c:	d00c      	beq.n	80091b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800919e:	4ba0      	ldr	r3, [pc, #640]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091a6:	2b08      	cmp	r3, #8
 80091a8:	d112      	bne.n	80091d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091aa:	4b9d      	ldr	r3, [pc, #628]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091b6:	d10b      	bne.n	80091d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091b8:	4b99      	ldr	r3, [pc, #612]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d05b      	beq.n	800927c <HAL_RCC_OscConfig+0x108>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d157      	bne.n	800927c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e23f      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d8:	d106      	bne.n	80091e8 <HAL_RCC_OscConfig+0x74>
 80091da:	4b91      	ldr	r3, [pc, #580]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a90      	ldr	r2, [pc, #576]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80091e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	e01d      	b.n	8009224 <HAL_RCC_OscConfig+0xb0>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091f0:	d10c      	bne.n	800920c <HAL_RCC_OscConfig+0x98>
 80091f2:	4b8b      	ldr	r3, [pc, #556]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a8a      	ldr	r2, [pc, #552]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80091f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	4b88      	ldr	r3, [pc, #544]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a87      	ldr	r2, [pc, #540]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	e00b      	b.n	8009224 <HAL_RCC_OscConfig+0xb0>
 800920c:	4b84      	ldr	r3, [pc, #528]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a83      	ldr	r2, [pc, #524]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	4b81      	ldr	r3, [pc, #516]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a80      	ldr	r2, [pc, #512]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 800921e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d013      	beq.n	8009254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800922c:	f7fd fcbe 	bl	8006bac <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009234:	f7fd fcba 	bl	8006bac <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b64      	cmp	r3, #100	; 0x64
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e204      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009246:	4b76      	ldr	r3, [pc, #472]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f0      	beq.n	8009234 <HAL_RCC_OscConfig+0xc0>
 8009252:	e014      	b.n	800927e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009254:	f7fd fcaa 	bl	8006bac <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800925c:	f7fd fca6 	bl	8006bac <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b64      	cmp	r3, #100	; 0x64
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e1f0      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800926e:	4b6c      	ldr	r3, [pc, #432]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1f0      	bne.n	800925c <HAL_RCC_OscConfig+0xe8>
 800927a:	e000      	b.n	800927e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800927c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d063      	beq.n	8009352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800928a:	4b65      	ldr	r3, [pc, #404]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f003 030c 	and.w	r3, r3, #12
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009296:	4b62      	ldr	r3, [pc, #392]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d11c      	bne.n	80092dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092a2:	4b5f      	ldr	r3, [pc, #380]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d116      	bne.n	80092dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092ae:	4b5c      	ldr	r3, [pc, #368]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <HAL_RCC_OscConfig+0x152>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d001      	beq.n	80092c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e1c4      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092c6:	4b56      	ldr	r3, [pc, #344]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4952      	ldr	r1, [pc, #328]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092da:	e03a      	b.n	8009352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d020      	beq.n	8009326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092e4:	4b4f      	ldr	r3, [pc, #316]	; (8009424 <HAL_RCC_OscConfig+0x2b0>)
 80092e6:	2201      	movs	r2, #1
 80092e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ea:	f7fd fc5f 	bl	8006bac <HAL_GetTick>
 80092ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092f0:	e008      	b.n	8009304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092f2:	f7fd fc5b 	bl	8006bac <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d901      	bls.n	8009304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e1a5      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009304:	4b46      	ldr	r3, [pc, #280]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0f0      	beq.n	80092f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009310:	4b43      	ldr	r3, [pc, #268]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	4940      	ldr	r1, [pc, #256]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009320:	4313      	orrs	r3, r2
 8009322:	600b      	str	r3, [r1, #0]
 8009324:	e015      	b.n	8009352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009326:	4b3f      	ldr	r3, [pc, #252]	; (8009424 <HAL_RCC_OscConfig+0x2b0>)
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800932c:	f7fd fc3e 	bl	8006bac <HAL_GetTick>
 8009330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009332:	e008      	b.n	8009346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009334:	f7fd fc3a 	bl	8006bac <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	2b02      	cmp	r3, #2
 8009340:	d901      	bls.n	8009346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e184      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009346:	4b36      	ldr	r3, [pc, #216]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1f0      	bne.n	8009334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0308 	and.w	r3, r3, #8
 800935a:	2b00      	cmp	r3, #0
 800935c:	d030      	beq.n	80093c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d016      	beq.n	8009394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009366:	4b30      	ldr	r3, [pc, #192]	; (8009428 <HAL_RCC_OscConfig+0x2b4>)
 8009368:	2201      	movs	r2, #1
 800936a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800936c:	f7fd fc1e 	bl	8006bac <HAL_GetTick>
 8009370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009372:	e008      	b.n	8009386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009374:	f7fd fc1a 	bl	8006bac <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d901      	bls.n	8009386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e164      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009386:	4b26      	ldr	r3, [pc, #152]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 8009388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0f0      	beq.n	8009374 <HAL_RCC_OscConfig+0x200>
 8009392:	e015      	b.n	80093c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009394:	4b24      	ldr	r3, [pc, #144]	; (8009428 <HAL_RCC_OscConfig+0x2b4>)
 8009396:	2200      	movs	r2, #0
 8009398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800939a:	f7fd fc07 	bl	8006bac <HAL_GetTick>
 800939e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093a0:	e008      	b.n	80093b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093a2:	f7fd fc03 	bl	8006bac <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d901      	bls.n	80093b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e14d      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093b4:	4b1a      	ldr	r3, [pc, #104]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80093b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1f0      	bne.n	80093a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 80a0 	beq.w	800950e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093d2:	4b13      	ldr	r3, [pc, #76]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10f      	bne.n	80093fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	4a0e      	ldr	r2, [pc, #56]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80093e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ec:	6413      	str	r3, [r2, #64]	; 0x40
 80093ee:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <HAL_RCC_OscConfig+0x2ac>)
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f6:	60bb      	str	r3, [r7, #8]
 80093f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093fe:	4b0b      	ldr	r3, [pc, #44]	; (800942c <HAL_RCC_OscConfig+0x2b8>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009406:	2b00      	cmp	r3, #0
 8009408:	d121      	bne.n	800944e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800940a:	4b08      	ldr	r3, [pc, #32]	; (800942c <HAL_RCC_OscConfig+0x2b8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a07      	ldr	r2, [pc, #28]	; (800942c <HAL_RCC_OscConfig+0x2b8>)
 8009410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009416:	f7fd fbc9 	bl	8006bac <HAL_GetTick>
 800941a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800941c:	e011      	b.n	8009442 <HAL_RCC_OscConfig+0x2ce>
 800941e:	bf00      	nop
 8009420:	40023800 	.word	0x40023800
 8009424:	42470000 	.word	0x42470000
 8009428:	42470e80 	.word	0x42470e80
 800942c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009430:	f7fd fbbc 	bl	8006bac <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e106      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009442:	4b85      	ldr	r3, [pc, #532]	; (8009658 <HAL_RCC_OscConfig+0x4e4>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0f0      	beq.n	8009430 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d106      	bne.n	8009464 <HAL_RCC_OscConfig+0x2f0>
 8009456:	4b81      	ldr	r3, [pc, #516]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 8009458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945a:	4a80      	ldr	r2, [pc, #512]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	6713      	str	r3, [r2, #112]	; 0x70
 8009462:	e01c      	b.n	800949e <HAL_RCC_OscConfig+0x32a>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	2b05      	cmp	r3, #5
 800946a:	d10c      	bne.n	8009486 <HAL_RCC_OscConfig+0x312>
 800946c:	4b7b      	ldr	r3, [pc, #492]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 800946e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009470:	4a7a      	ldr	r2, [pc, #488]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 8009472:	f043 0304 	orr.w	r3, r3, #4
 8009476:	6713      	str	r3, [r2, #112]	; 0x70
 8009478:	4b78      	ldr	r3, [pc, #480]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 800947a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947c:	4a77      	ldr	r2, [pc, #476]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	6713      	str	r3, [r2, #112]	; 0x70
 8009484:	e00b      	b.n	800949e <HAL_RCC_OscConfig+0x32a>
 8009486:	4b75      	ldr	r3, [pc, #468]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 8009488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948a:	4a74      	ldr	r2, [pc, #464]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 800948c:	f023 0301 	bic.w	r3, r3, #1
 8009490:	6713      	str	r3, [r2, #112]	; 0x70
 8009492:	4b72      	ldr	r3, [pc, #456]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 8009494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009496:	4a71      	ldr	r2, [pc, #452]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 8009498:	f023 0304 	bic.w	r3, r3, #4
 800949c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d015      	beq.n	80094d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094a6:	f7fd fb81 	bl	8006bac <HAL_GetTick>
 80094aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ac:	e00a      	b.n	80094c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094ae:	f7fd fb7d 	bl	8006bac <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094bc:	4293      	cmp	r3, r2
 80094be:	d901      	bls.n	80094c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e0c5      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094c4:	4b65      	ldr	r3, [pc, #404]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 80094c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0ee      	beq.n	80094ae <HAL_RCC_OscConfig+0x33a>
 80094d0:	e014      	b.n	80094fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094d2:	f7fd fb6b 	bl	8006bac <HAL_GetTick>
 80094d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094d8:	e00a      	b.n	80094f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094da:	f7fd fb67 	bl	8006bac <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d901      	bls.n	80094f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e0af      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094f0:	4b5a      	ldr	r3, [pc, #360]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 80094f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1ee      	bne.n	80094da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d105      	bne.n	800950e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009502:	4b56      	ldr	r3, [pc, #344]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 8009504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009506:	4a55      	ldr	r2, [pc, #340]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 8009508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800950c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	2b00      	cmp	r3, #0
 8009514:	f000 809b 	beq.w	800964e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009518:	4b50      	ldr	r3, [pc, #320]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 030c 	and.w	r3, r3, #12
 8009520:	2b08      	cmp	r3, #8
 8009522:	d05c      	beq.n	80095de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b02      	cmp	r3, #2
 800952a:	d141      	bne.n	80095b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800952c:	4b4c      	ldr	r3, [pc, #304]	; (8009660 <HAL_RCC_OscConfig+0x4ec>)
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009532:	f7fd fb3b 	bl	8006bac <HAL_GetTick>
 8009536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009538:	e008      	b.n	800954c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800953a:	f7fd fb37 	bl	8006bac <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d901      	bls.n	800954c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e081      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800954c:	4b43      	ldr	r3, [pc, #268]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1f0      	bne.n	800953a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	69da      	ldr	r2, [r3, #28]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	019b      	lsls	r3, r3, #6
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	085b      	lsrs	r3, r3, #1
 8009570:	3b01      	subs	r3, #1
 8009572:	041b      	lsls	r3, r3, #16
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	061b      	lsls	r3, r3, #24
 800957c:	4937      	ldr	r1, [pc, #220]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 800957e:	4313      	orrs	r3, r2
 8009580:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009582:	4b37      	ldr	r3, [pc, #220]	; (8009660 <HAL_RCC_OscConfig+0x4ec>)
 8009584:	2201      	movs	r2, #1
 8009586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009588:	f7fd fb10 	bl	8006bac <HAL_GetTick>
 800958c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800958e:	e008      	b.n	80095a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009590:	f7fd fb0c 	bl	8006bac <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b02      	cmp	r3, #2
 800959c:	d901      	bls.n	80095a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e056      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095a2:	4b2e      	ldr	r3, [pc, #184]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0f0      	beq.n	8009590 <HAL_RCC_OscConfig+0x41c>
 80095ae:	e04e      	b.n	800964e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095b0:	4b2b      	ldr	r3, [pc, #172]	; (8009660 <HAL_RCC_OscConfig+0x4ec>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b6:	f7fd faf9 	bl	8006bac <HAL_GetTick>
 80095ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095bc:	e008      	b.n	80095d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095be:	f7fd faf5 	bl	8006bac <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d901      	bls.n	80095d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e03f      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095d0:	4b22      	ldr	r3, [pc, #136]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f0      	bne.n	80095be <HAL_RCC_OscConfig+0x44a>
 80095dc:	e037      	b.n	800964e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e032      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80095ea:	4b1c      	ldr	r3, [pc, #112]	; (800965c <HAL_RCC_OscConfig+0x4e8>)
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d028      	beq.n	800964a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009602:	429a      	cmp	r2, r3
 8009604:	d121      	bne.n	800964a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009610:	429a      	cmp	r2, r3
 8009612:	d11a      	bne.n	800964a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800961a:	4013      	ands	r3, r2
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009620:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009622:	4293      	cmp	r3, r2
 8009624:	d111      	bne.n	800964a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009630:	085b      	lsrs	r3, r3, #1
 8009632:	3b01      	subs	r3, #1
 8009634:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009636:	429a      	cmp	r2, r3
 8009638:	d107      	bne.n	800964a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009644:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009646:	429a      	cmp	r2, r3
 8009648:	d001      	beq.n	800964e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40007000 	.word	0x40007000
 800965c:	40023800 	.word	0x40023800
 8009660:	42470060 	.word	0x42470060

08009664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e0cc      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009678:	4b68      	ldr	r3, [pc, #416]	; (800981c <HAL_RCC_ClockConfig+0x1b8>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d90c      	bls.n	80096a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009686:	4b65      	ldr	r3, [pc, #404]	; (800981c <HAL_RCC_ClockConfig+0x1b8>)
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800968e:	4b63      	ldr	r3, [pc, #396]	; (800981c <HAL_RCC_ClockConfig+0x1b8>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d001      	beq.n	80096a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e0b8      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d020      	beq.n	80096ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096b8:	4b59      	ldr	r3, [pc, #356]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	4a58      	ldr	r2, [pc, #352]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80096be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0308 	and.w	r3, r3, #8
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096d0:	4b53      	ldr	r3, [pc, #332]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	4a52      	ldr	r2, [pc, #328]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80096d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096dc:	4b50      	ldr	r3, [pc, #320]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	494d      	ldr	r1, [pc, #308]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d044      	beq.n	8009784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d107      	bne.n	8009712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009702:	4b47      	ldr	r3, [pc, #284]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d119      	bne.n	8009742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e07f      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d003      	beq.n	8009722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800971e:	2b03      	cmp	r3, #3
 8009720:	d107      	bne.n	8009732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009722:	4b3f      	ldr	r3, [pc, #252]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d109      	bne.n	8009742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e06f      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009732:	4b3b      	ldr	r3, [pc, #236]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e067      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009742:	4b37      	ldr	r3, [pc, #220]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f023 0203 	bic.w	r2, r3, #3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	4934      	ldr	r1, [pc, #208]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 8009750:	4313      	orrs	r3, r2
 8009752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009754:	f7fd fa2a 	bl	8006bac <HAL_GetTick>
 8009758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800975a:	e00a      	b.n	8009772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800975c:	f7fd fa26 	bl	8006bac <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	f241 3288 	movw	r2, #5000	; 0x1388
 800976a:	4293      	cmp	r3, r2
 800976c:	d901      	bls.n	8009772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e04f      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009772:	4b2b      	ldr	r3, [pc, #172]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f003 020c 	and.w	r2, r3, #12
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	429a      	cmp	r2, r3
 8009782:	d1eb      	bne.n	800975c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009784:	4b25      	ldr	r3, [pc, #148]	; (800981c <HAL_RCC_ClockConfig+0x1b8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d20c      	bcs.n	80097ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009792:	4b22      	ldr	r3, [pc, #136]	; (800981c <HAL_RCC_ClockConfig+0x1b8>)
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	b2d2      	uxtb	r2, r2
 8009798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800979a:	4b20      	ldr	r3, [pc, #128]	; (800981c <HAL_RCC_ClockConfig+0x1b8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d001      	beq.n	80097ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e032      	b.n	8009812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d008      	beq.n	80097ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097b8:	4b19      	ldr	r3, [pc, #100]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	4916      	ldr	r1, [pc, #88]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0308 	and.w	r3, r3, #8
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097d6:	4b12      	ldr	r3, [pc, #72]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	490e      	ldr	r1, [pc, #56]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097ea:	f000 f821 	bl	8009830 <HAL_RCC_GetSysClockFreq>
 80097ee:	4602      	mov	r2, r0
 80097f0:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <HAL_RCC_ClockConfig+0x1bc>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	091b      	lsrs	r3, r3, #4
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	490a      	ldr	r1, [pc, #40]	; (8009824 <HAL_RCC_ClockConfig+0x1c0>)
 80097fc:	5ccb      	ldrb	r3, [r1, r3]
 80097fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009802:	4a09      	ldr	r2, [pc, #36]	; (8009828 <HAL_RCC_ClockConfig+0x1c4>)
 8009804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009806:	4b09      	ldr	r3, [pc, #36]	; (800982c <HAL_RCC_ClockConfig+0x1c8>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f7fd f98a 	bl	8006b24 <HAL_InitTick>

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40023c00 	.word	0x40023c00
 8009820:	40023800 	.word	0x40023800
 8009824:	080e9d48 	.word	0x080e9d48
 8009828:	20000068 	.word	0x20000068
 800982c:	200000a4 	.word	0x200000a4

08009830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009830:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	607b      	str	r3, [r7, #4]
 800983c:	2300      	movs	r3, #0
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	2300      	movs	r3, #0
 8009842:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009848:	4b67      	ldr	r3, [pc, #412]	; (80099e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 030c 	and.w	r3, r3, #12
 8009850:	2b08      	cmp	r3, #8
 8009852:	d00d      	beq.n	8009870 <HAL_RCC_GetSysClockFreq+0x40>
 8009854:	2b08      	cmp	r3, #8
 8009856:	f200 80bd 	bhi.w	80099d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_RCC_GetSysClockFreq+0x34>
 800985e:	2b04      	cmp	r3, #4
 8009860:	d003      	beq.n	800986a <HAL_RCC_GetSysClockFreq+0x3a>
 8009862:	e0b7      	b.n	80099d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009864:	4b61      	ldr	r3, [pc, #388]	; (80099ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009866:	60bb      	str	r3, [r7, #8]
       break;
 8009868:	e0b7      	b.n	80099da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800986a:	4b61      	ldr	r3, [pc, #388]	; (80099f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800986c:	60bb      	str	r3, [r7, #8]
      break;
 800986e:	e0b4      	b.n	80099da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009870:	4b5d      	ldr	r3, [pc, #372]	; (80099e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009878:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800987a:	4b5b      	ldr	r3, [pc, #364]	; (80099e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d04d      	beq.n	8009922 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009886:	4b58      	ldr	r3, [pc, #352]	; (80099e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	099b      	lsrs	r3, r3, #6
 800988c:	461a      	mov	r2, r3
 800988e:	f04f 0300 	mov.w	r3, #0
 8009892:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009896:	f04f 0100 	mov.w	r1, #0
 800989a:	ea02 0800 	and.w	r8, r2, r0
 800989e:	ea03 0901 	and.w	r9, r3, r1
 80098a2:	4640      	mov	r0, r8
 80098a4:	4649      	mov	r1, r9
 80098a6:	f04f 0200 	mov.w	r2, #0
 80098aa:	f04f 0300 	mov.w	r3, #0
 80098ae:	014b      	lsls	r3, r1, #5
 80098b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80098b4:	0142      	lsls	r2, r0, #5
 80098b6:	4610      	mov	r0, r2
 80098b8:	4619      	mov	r1, r3
 80098ba:	ebb0 0008 	subs.w	r0, r0, r8
 80098be:	eb61 0109 	sbc.w	r1, r1, r9
 80098c2:	f04f 0200 	mov.w	r2, #0
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	018b      	lsls	r3, r1, #6
 80098cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80098d0:	0182      	lsls	r2, r0, #6
 80098d2:	1a12      	subs	r2, r2, r0
 80098d4:	eb63 0301 	sbc.w	r3, r3, r1
 80098d8:	f04f 0000 	mov.w	r0, #0
 80098dc:	f04f 0100 	mov.w	r1, #0
 80098e0:	00d9      	lsls	r1, r3, #3
 80098e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098e6:	00d0      	lsls	r0, r2, #3
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	eb12 0208 	adds.w	r2, r2, r8
 80098f0:	eb43 0309 	adc.w	r3, r3, r9
 80098f4:	f04f 0000 	mov.w	r0, #0
 80098f8:	f04f 0100 	mov.w	r1, #0
 80098fc:	0259      	lsls	r1, r3, #9
 80098fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009902:	0250      	lsls	r0, r2, #9
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4610      	mov	r0, r2
 800990a:	4619      	mov	r1, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	461a      	mov	r2, r3
 8009910:	f04f 0300 	mov.w	r3, #0
 8009914:	f7f7 f9b8 	bl	8000c88 <__aeabi_uldivmod>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4613      	mov	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	e04a      	b.n	80099b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009922:	4b31      	ldr	r3, [pc, #196]	; (80099e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	099b      	lsrs	r3, r3, #6
 8009928:	461a      	mov	r2, r3
 800992a:	f04f 0300 	mov.w	r3, #0
 800992e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009932:	f04f 0100 	mov.w	r1, #0
 8009936:	ea02 0400 	and.w	r4, r2, r0
 800993a:	ea03 0501 	and.w	r5, r3, r1
 800993e:	4620      	mov	r0, r4
 8009940:	4629      	mov	r1, r5
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	014b      	lsls	r3, r1, #5
 800994c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009950:	0142      	lsls	r2, r0, #5
 8009952:	4610      	mov	r0, r2
 8009954:	4619      	mov	r1, r3
 8009956:	1b00      	subs	r0, r0, r4
 8009958:	eb61 0105 	sbc.w	r1, r1, r5
 800995c:	f04f 0200 	mov.w	r2, #0
 8009960:	f04f 0300 	mov.w	r3, #0
 8009964:	018b      	lsls	r3, r1, #6
 8009966:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800996a:	0182      	lsls	r2, r0, #6
 800996c:	1a12      	subs	r2, r2, r0
 800996e:	eb63 0301 	sbc.w	r3, r3, r1
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f04f 0100 	mov.w	r1, #0
 800997a:	00d9      	lsls	r1, r3, #3
 800997c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009980:	00d0      	lsls	r0, r2, #3
 8009982:	4602      	mov	r2, r0
 8009984:	460b      	mov	r3, r1
 8009986:	1912      	adds	r2, r2, r4
 8009988:	eb45 0303 	adc.w	r3, r5, r3
 800998c:	f04f 0000 	mov.w	r0, #0
 8009990:	f04f 0100 	mov.w	r1, #0
 8009994:	0299      	lsls	r1, r3, #10
 8009996:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800999a:	0290      	lsls	r0, r2, #10
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4610      	mov	r0, r2
 80099a2:	4619      	mov	r1, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f04f 0300 	mov.w	r3, #0
 80099ac:	f7f7 f96c 	bl	8000c88 <__aeabi_uldivmod>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	4613      	mov	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80099b8:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	0c1b      	lsrs	r3, r3, #16
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	3301      	adds	r3, #1
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d0:	60bb      	str	r3, [r7, #8]
      break;
 80099d2:	e002      	b.n	80099da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80099d6:	60bb      	str	r3, [r7, #8]
      break;
 80099d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099da:	68bb      	ldr	r3, [r7, #8]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80099e6:	bf00      	nop
 80099e8:	40023800 	.word	0x40023800
 80099ec:	00f42400 	.word	0x00f42400
 80099f0:	007a1200 	.word	0x007a1200

080099f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099f8:	4b03      	ldr	r3, [pc, #12]	; (8009a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80099fa:	681b      	ldr	r3, [r3, #0]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	20000068 	.word	0x20000068

08009a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a10:	f7ff fff0 	bl	80099f4 <HAL_RCC_GetHCLKFreq>
 8009a14:	4602      	mov	r2, r0
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	0a9b      	lsrs	r3, r3, #10
 8009a1c:	f003 0307 	and.w	r3, r3, #7
 8009a20:	4903      	ldr	r1, [pc, #12]	; (8009a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a22:	5ccb      	ldrb	r3, [r1, r3]
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	40023800 	.word	0x40023800
 8009a30:	080e9d58 	.word	0x080e9d58

08009a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a38:	f7ff ffdc 	bl	80099f4 <HAL_RCC_GetHCLKFreq>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	0b5b      	lsrs	r3, r3, #13
 8009a44:	f003 0307 	and.w	r3, r3, #7
 8009a48:	4903      	ldr	r1, [pc, #12]	; (8009a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a4a:	5ccb      	ldrb	r3, [r1, r3]
 8009a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	40023800 	.word	0x40023800
 8009a58:	080e9d58 	.word	0x080e9d58

08009a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e07b      	b.n	8009b66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d108      	bne.n	8009a88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a7e:	d009      	beq.n	8009a94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	61da      	str	r2, [r3, #28]
 8009a86:	e005      	b.n	8009a94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fb fbda 	bl	8005268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009adc:	431a      	orrs	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f003 0302 	and.w	r3, r3, #2
 8009af0:	431a      	orrs	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b04:	431a      	orrs	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b18:	ea42 0103 	orr.w	r1, r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	0c1b      	lsrs	r3, r3, #16
 8009b32:	f003 0104 	and.w	r1, r3, #4
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	f003 0210 	and.w	r2, r3, #16
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69da      	ldr	r2, [r3, #28]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b088      	sub	sp, #32
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d101      	bne.n	8009b90 <HAL_SPI_Transmit+0x22>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e126      	b.n	8009dde <HAL_SPI_Transmit+0x270>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b98:	f7fd f808 	bl	8006bac <HAL_GetTick>
 8009b9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d002      	beq.n	8009bb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bb2:	e10b      	b.n	8009dcc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <HAL_SPI_Transmit+0x52>
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bc4:	e102      	b.n	8009dcc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2203      	movs	r2, #3
 8009bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	88fa      	ldrh	r2, [r7, #6]
 8009bde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	88fa      	ldrh	r2, [r7, #6]
 8009be4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c0c:	d10f      	bne.n	8009c2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c38:	2b40      	cmp	r3, #64	; 0x40
 8009c3a:	d007      	beq.n	8009c4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c54:	d14b      	bne.n	8009cee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <HAL_SPI_Transmit+0xf6>
 8009c5e:	8afb      	ldrh	r3, [r7, #22]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d13e      	bne.n	8009ce2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c68:	881a      	ldrh	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c74:	1c9a      	adds	r2, r3, #2
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	3b01      	subs	r3, #1
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c88:	e02b      	b.n	8009ce2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d112      	bne.n	8009cbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9c:	881a      	ldrh	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca8:	1c9a      	adds	r2, r3, #2
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	86da      	strh	r2, [r3, #54]	; 0x36
 8009cbc:	e011      	b.n	8009ce2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cbe:	f7fc ff75 	bl	8006bac <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d803      	bhi.n	8009cd6 <HAL_SPI_Transmit+0x168>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd4:	d102      	bne.n	8009cdc <HAL_SPI_Transmit+0x16e>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d102      	bne.n	8009ce2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ce0:	e074      	b.n	8009dcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1ce      	bne.n	8009c8a <HAL_SPI_Transmit+0x11c>
 8009cec:	e04c      	b.n	8009d88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <HAL_SPI_Transmit+0x18e>
 8009cf6:	8afb      	ldrh	r3, [r7, #22]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d140      	bne.n	8009d7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	330c      	adds	r3, #12
 8009d06:	7812      	ldrb	r2, [r2, #0]
 8009d08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009d22:	e02c      	b.n	8009d7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d113      	bne.n	8009d5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	330c      	adds	r3, #12
 8009d3c:	7812      	ldrb	r2, [r2, #0]
 8009d3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d58:	e011      	b.n	8009d7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d5a:	f7fc ff27 	bl	8006bac <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d803      	bhi.n	8009d72 <HAL_SPI_Transmit+0x204>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d70:	d102      	bne.n	8009d78 <HAL_SPI_Transmit+0x20a>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d7c:	e026      	b.n	8009dcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1cd      	bne.n	8009d24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 fbcb 	bl	800a528 <SPI_EndRxTxTransaction>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10a      	bne.n	8009dbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009da6:	2300      	movs	r3, #0
 8009da8:	613b      	str	r3, [r7, #16]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	613b      	str	r3, [r7, #16]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	613b      	str	r3, [r7, #16]
 8009dba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	77fb      	strb	r3, [r7, #31]
 8009dc8:	e000      	b.n	8009dcc <HAL_SPI_Transmit+0x25e>
  }

error:
 8009dca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ddc:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3720      	adds	r7, #32
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b088      	sub	sp, #32
 8009dea:	af02      	add	r7, sp, #8
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	603b      	str	r3, [r7, #0]
 8009df2:	4613      	mov	r3, r2
 8009df4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e02:	d112      	bne.n	8009e2a <HAL_SPI_Receive+0x44>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10e      	bne.n	8009e2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2204      	movs	r2, #4
 8009e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009e14:	88fa      	ldrh	r2, [r7, #6]
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f8f1 	bl	800a008 <HAL_SPI_TransmitReceive>
 8009e26:	4603      	mov	r3, r0
 8009e28:	e0ea      	b.n	800a000 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d101      	bne.n	8009e38 <HAL_SPI_Receive+0x52>
 8009e34:	2302      	movs	r3, #2
 8009e36:	e0e3      	b.n	800a000 <HAL_SPI_Receive+0x21a>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e40:	f7fc feb4 	bl	8006bac <HAL_GetTick>
 8009e44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d002      	beq.n	8009e58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009e52:	2302      	movs	r3, #2
 8009e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e56:	e0ca      	b.n	8009fee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <HAL_SPI_Receive+0x7e>
 8009e5e:	88fb      	ldrh	r3, [r7, #6]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d102      	bne.n	8009e6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e68:	e0c1      	b.n	8009fee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2204      	movs	r2, #4
 8009e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	88fa      	ldrh	r2, [r7, #6]
 8009e82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	88fa      	ldrh	r2, [r7, #6]
 8009e88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eb0:	d10f      	bne.n	8009ed2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ec0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ed0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009edc:	2b40      	cmp	r3, #64	; 0x40
 8009ede:	d007      	beq.n	8009ef0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d162      	bne.n	8009fbe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ef8:	e02e      	b.n	8009f58 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d115      	bne.n	8009f34 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f103 020c 	add.w	r2, r3, #12
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f14:	7812      	ldrb	r2, [r2, #0]
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f32:	e011      	b.n	8009f58 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f34:	f7fc fe3a 	bl	8006bac <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d803      	bhi.n	8009f4c <HAL_SPI_Receive+0x166>
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4a:	d102      	bne.n	8009f52 <HAL_SPI_Receive+0x16c>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d102      	bne.n	8009f58 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009f56:	e04a      	b.n	8009fee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1cb      	bne.n	8009efa <HAL_SPI_Receive+0x114>
 8009f62:	e031      	b.n	8009fc8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d113      	bne.n	8009f9a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68da      	ldr	r2, [r3, #12]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f84:	1c9a      	adds	r2, r3, #2
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	3b01      	subs	r3, #1
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f98:	e011      	b.n	8009fbe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f9a:	f7fc fe07 	bl	8006bac <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d803      	bhi.n	8009fb2 <HAL_SPI_Receive+0x1cc>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d102      	bne.n	8009fb8 <HAL_SPI_Receive+0x1d2>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009fbc:	e017      	b.n	8009fee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1cd      	bne.n	8009f64 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fa45 	bl	800a45c <SPI_EndRxTransaction>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	75fb      	strb	r3, [r7, #23]
 8009fea:	e000      	b.n	8009fee <HAL_SPI_Receive+0x208>
  }

error :
 8009fec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08c      	sub	sp, #48	; 0x30
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
 800a014:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a016:	2301      	movs	r3, #1
 800a018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <HAL_SPI_TransmitReceive+0x26>
 800a02a:	2302      	movs	r3, #2
 800a02c:	e18a      	b.n	800a344 <HAL_SPI_TransmitReceive+0x33c>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a036:	f7fc fdb9 	bl	8006bac <HAL_GetTick>
 800a03a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a04c:	887b      	ldrh	r3, [r7, #2]
 800a04e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a054:	2b01      	cmp	r3, #1
 800a056:	d00f      	beq.n	800a078 <HAL_SPI_TransmitReceive+0x70>
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a05e:	d107      	bne.n	800a070 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d103      	bne.n	800a070 <HAL_SPI_TransmitReceive+0x68>
 800a068:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d003      	beq.n	800a078 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a070:	2302      	movs	r3, #2
 800a072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a076:	e15b      	b.n	800a330 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d005      	beq.n	800a08a <HAL_SPI_TransmitReceive+0x82>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <HAL_SPI_TransmitReceive+0x82>
 800a084:	887b      	ldrh	r3, [r7, #2]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d103      	bne.n	800a092 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a090:	e14e      	b.n	800a330 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d003      	beq.n	800a0a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2205      	movs	r2, #5
 800a0a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	887a      	ldrh	r2, [r7, #2]
 800a0b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	887a      	ldrh	r2, [r7, #2]
 800a0bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	887a      	ldrh	r2, [r7, #2]
 800a0c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	887a      	ldrh	r2, [r7, #2]
 800a0ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e6:	2b40      	cmp	r3, #64	; 0x40
 800a0e8:	d007      	beq.n	800a0fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a102:	d178      	bne.n	800a1f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <HAL_SPI_TransmitReceive+0x10a>
 800a10c:	8b7b      	ldrh	r3, [r7, #26]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d166      	bne.n	800a1e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a116:	881a      	ldrh	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a122:	1c9a      	adds	r2, r3, #2
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	3b01      	subs	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a136:	e053      	b.n	800a1e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b02      	cmp	r3, #2
 800a144:	d11b      	bne.n	800a17e <HAL_SPI_TransmitReceive+0x176>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d016      	beq.n	800a17e <HAL_SPI_TransmitReceive+0x176>
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	2b01      	cmp	r3, #1
 800a154:	d113      	bne.n	800a17e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	881a      	ldrh	r2, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	1c9a      	adds	r2, r3, #2
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a170:	b29b      	uxth	r3, r3
 800a172:	3b01      	subs	r3, #1
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d119      	bne.n	800a1c0 <HAL_SPI_TransmitReceive+0x1b8>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a190:	b29b      	uxth	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d014      	beq.n	800a1c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68da      	ldr	r2, [r3, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a0:	b292      	uxth	r2, r2
 800a1a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a8:	1c9a      	adds	r2, r3, #2
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a1c0:	f7fc fcf4 	bl	8006bac <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d807      	bhi.n	800a1e0 <HAL_SPI_TransmitReceive+0x1d8>
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d6:	d003      	beq.n	800a1e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a1de:	e0a7      	b.n	800a330 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1a6      	bne.n	800a138 <HAL_SPI_TransmitReceive+0x130>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1a1      	bne.n	800a138 <HAL_SPI_TransmitReceive+0x130>
 800a1f4:	e07c      	b.n	800a2f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <HAL_SPI_TransmitReceive+0x1fc>
 800a1fe:	8b7b      	ldrh	r3, [r7, #26]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d16b      	bne.n	800a2dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	330c      	adds	r3, #12
 800a20e:	7812      	ldrb	r2, [r2, #0]
 800a210:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a220:	b29b      	uxth	r3, r3
 800a222:	3b01      	subs	r3, #1
 800a224:	b29a      	uxth	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a22a:	e057      	b.n	800a2dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b02      	cmp	r3, #2
 800a238:	d11c      	bne.n	800a274 <HAL_SPI_TransmitReceive+0x26c>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a23e:	b29b      	uxth	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d017      	beq.n	800a274 <HAL_SPI_TransmitReceive+0x26c>
 800a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a246:	2b01      	cmp	r3, #1
 800a248:	d114      	bne.n	800a274 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	330c      	adds	r3, #12
 800a254:	7812      	ldrb	r2, [r2, #0]
 800a256:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a266:	b29b      	uxth	r3, r3
 800a268:	3b01      	subs	r3, #1
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d119      	bne.n	800a2b6 <HAL_SPI_TransmitReceive+0x2ae>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a286:	b29b      	uxth	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d014      	beq.n	800a2b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68da      	ldr	r2, [r3, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a296:	b2d2      	uxtb	r2, r2
 800a298:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a2b6:	f7fc fc79 	bl	8006bac <HAL_GetTick>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d803      	bhi.n	800a2ce <HAL_SPI_TransmitReceive+0x2c6>
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2cc:	d102      	bne.n	800a2d4 <HAL_SPI_TransmitReceive+0x2cc>
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d103      	bne.n	800a2dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a2da:	e029      	b.n	800a330 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1a2      	bne.n	800a22c <HAL_SPI_TransmitReceive+0x224>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d19d      	bne.n	800a22c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f917 	bl	800a528 <SPI_EndRxTxTransaction>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d006      	beq.n	800a30e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2220      	movs	r2, #32
 800a30a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a30c:	e010      	b.n	800a330 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10b      	bne.n	800a32e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	617b      	str	r3, [r7, #20]
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	e000      	b.n	800a330 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a32e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a344:	4618      	mov	r0, r3
 800a346:	3730      	adds	r7, #48	; 0x30
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	4613      	mov	r3, r2
 800a35a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a35c:	f7fc fc26 	bl	8006bac <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	1a9b      	subs	r3, r3, r2
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4413      	add	r3, r2
 800a36a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a36c:	f7fc fc1e 	bl	8006bac <HAL_GetTick>
 800a370:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a372:	4b39      	ldr	r3, [pc, #228]	; (800a458 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	015b      	lsls	r3, r3, #5
 800a378:	0d1b      	lsrs	r3, r3, #20
 800a37a:	69fa      	ldr	r2, [r7, #28]
 800a37c:	fb02 f303 	mul.w	r3, r2, r3
 800a380:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a382:	e054      	b.n	800a42e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38a:	d050      	beq.n	800a42e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a38c:	f7fc fc0e 	bl	8006bac <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d902      	bls.n	800a3a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d13d      	bne.n	800a41e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a3b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3ba:	d111      	bne.n	800a3e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c4:	d004      	beq.n	800a3d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ce:	d107      	bne.n	800a3e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3e8:	d10f      	bne.n	800a40a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e017      	b.n	800a44e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689a      	ldr	r2, [r3, #8]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4013      	ands	r3, r2
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	bf0c      	ite	eq
 800a43e:	2301      	moveq	r3, #1
 800a440:	2300      	movne	r3, #0
 800a442:	b2db      	uxtb	r3, r3
 800a444:	461a      	mov	r2, r3
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d19b      	bne.n	800a384 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3720      	adds	r7, #32
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20000068 	.word	0x20000068

0800a45c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af02      	add	r7, sp, #8
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a470:	d111      	bne.n	800a496 <SPI_EndRxTransaction+0x3a>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a47a:	d004      	beq.n	800a486 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a484:	d107      	bne.n	800a496 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a494:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a49e:	d12a      	bne.n	800a4f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a8:	d012      	beq.n	800a4d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2180      	movs	r1, #128	; 0x80
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff ff49 	bl	800a34c <SPI_WaitFlagStateUntilTimeout>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d02d      	beq.n	800a51c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c4:	f043 0220 	orr.w	r2, r3, #32
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e026      	b.n	800a51e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2101      	movs	r1, #1
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff ff36 	bl	800a34c <SPI_WaitFlagStateUntilTimeout>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01a      	beq.n	800a51c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ea:	f043 0220 	orr.w	r2, r3, #32
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e013      	b.n	800a51e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2101      	movs	r1, #1
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff ff23 	bl	800a34c <SPI_WaitFlagStateUntilTimeout>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a510:	f043 0220 	orr.w	r2, r3, #32
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e000      	b.n	800a51e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b088      	sub	sp, #32
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a534:	4b1b      	ldr	r3, [pc, #108]	; (800a5a4 <SPI_EndRxTxTransaction+0x7c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a1b      	ldr	r2, [pc, #108]	; (800a5a8 <SPI_EndRxTxTransaction+0x80>)
 800a53a:	fba2 2303 	umull	r2, r3, r2, r3
 800a53e:	0d5b      	lsrs	r3, r3, #21
 800a540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a544:	fb02 f303 	mul.w	r3, r2, r3
 800a548:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a552:	d112      	bne.n	800a57a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2200      	movs	r2, #0
 800a55c:	2180      	movs	r1, #128	; 0x80
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f7ff fef4 	bl	800a34c <SPI_WaitFlagStateUntilTimeout>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d016      	beq.n	800a598 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56e:	f043 0220 	orr.w	r2, r3, #32
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e00f      	b.n	800a59a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00a      	beq.n	800a596 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	3b01      	subs	r3, #1
 800a584:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a590:	2b80      	cmp	r3, #128	; 0x80
 800a592:	d0f2      	beq.n	800a57a <SPI_EndRxTxTransaction+0x52>
 800a594:	e000      	b.n	800a598 <SPI_EndRxTxTransaction+0x70>
        break;
 800a596:	bf00      	nop
  }

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20000068 	.word	0x20000068
 800a5a8:	165e9f81 	.word	0x165e9f81

0800a5ac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e034      	b.n	800a62c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7fa fff2 	bl	80055c0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f001 ffa2 	bl	800c530 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	f001 ffec 	bl	800c5d4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6858      	ldr	r0, [r3, #4]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	f002 f821 	bl	800c650 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	6892      	ldr	r2, [r2, #8]
 800a616:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	6892      	ldr	r2, [r2, #8]
 800a622:	f041 0101 	orr.w	r1, r1, #1
 800a626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e041      	b.n	800a6ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7fa fe4c 	bl	80052f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2202      	movs	r2, #2
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3304      	adds	r3, #4
 800a670:	4619      	mov	r1, r3
 800a672:	4610      	mov	r0, r2
 800a674:	f000 fc1a 	bl	800aeac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
	...

0800a6d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d001      	beq.n	800a6ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e046      	b.n	800a77a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a23      	ldr	r2, [pc, #140]	; (800a788 <HAL_TIM_Base_Start+0xb4>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d022      	beq.n	800a744 <HAL_TIM_Base_Start+0x70>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a706:	d01d      	beq.n	800a744 <HAL_TIM_Base_Start+0x70>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a1f      	ldr	r2, [pc, #124]	; (800a78c <HAL_TIM_Base_Start+0xb8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d018      	beq.n	800a744 <HAL_TIM_Base_Start+0x70>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a1e      	ldr	r2, [pc, #120]	; (800a790 <HAL_TIM_Base_Start+0xbc>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d013      	beq.n	800a744 <HAL_TIM_Base_Start+0x70>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a1c      	ldr	r2, [pc, #112]	; (800a794 <HAL_TIM_Base_Start+0xc0>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d00e      	beq.n	800a744 <HAL_TIM_Base_Start+0x70>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a1b      	ldr	r2, [pc, #108]	; (800a798 <HAL_TIM_Base_Start+0xc4>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d009      	beq.n	800a744 <HAL_TIM_Base_Start+0x70>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a19      	ldr	r2, [pc, #100]	; (800a79c <HAL_TIM_Base_Start+0xc8>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d004      	beq.n	800a744 <HAL_TIM_Base_Start+0x70>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a18      	ldr	r2, [pc, #96]	; (800a7a0 <HAL_TIM_Base_Start+0xcc>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d111      	bne.n	800a768 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f003 0307 	and.w	r3, r3, #7
 800a74e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b06      	cmp	r3, #6
 800a754:	d010      	beq.n	800a778 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f042 0201 	orr.w	r2, r2, #1
 800a764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a766:	e007      	b.n	800a778 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0201 	orr.w	r2, r2, #1
 800a776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	40010000 	.word	0x40010000
 800a78c:	40000400 	.word	0x40000400
 800a790:	40000800 	.word	0x40000800
 800a794:	40000c00 	.word	0x40000c00
 800a798:	40010400 	.word	0x40010400
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	40001800 	.word	0x40001800

0800a7a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d001      	beq.n	800a7bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e04e      	b.n	800a85a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f042 0201 	orr.w	r2, r2, #1
 800a7d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a23      	ldr	r2, [pc, #140]	; (800a868 <HAL_TIM_Base_Start_IT+0xc4>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d022      	beq.n	800a824 <HAL_TIM_Base_Start_IT+0x80>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e6:	d01d      	beq.n	800a824 <HAL_TIM_Base_Start_IT+0x80>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a1f      	ldr	r2, [pc, #124]	; (800a86c <HAL_TIM_Base_Start_IT+0xc8>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d018      	beq.n	800a824 <HAL_TIM_Base_Start_IT+0x80>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a1e      	ldr	r2, [pc, #120]	; (800a870 <HAL_TIM_Base_Start_IT+0xcc>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d013      	beq.n	800a824 <HAL_TIM_Base_Start_IT+0x80>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a1c      	ldr	r2, [pc, #112]	; (800a874 <HAL_TIM_Base_Start_IT+0xd0>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d00e      	beq.n	800a824 <HAL_TIM_Base_Start_IT+0x80>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a1b      	ldr	r2, [pc, #108]	; (800a878 <HAL_TIM_Base_Start_IT+0xd4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d009      	beq.n	800a824 <HAL_TIM_Base_Start_IT+0x80>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a19      	ldr	r2, [pc, #100]	; (800a87c <HAL_TIM_Base_Start_IT+0xd8>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d004      	beq.n	800a824 <HAL_TIM_Base_Start_IT+0x80>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a18      	ldr	r2, [pc, #96]	; (800a880 <HAL_TIM_Base_Start_IT+0xdc>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d111      	bne.n	800a848 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f003 0307 	and.w	r3, r3, #7
 800a82e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b06      	cmp	r3, #6
 800a834:	d010      	beq.n	800a858 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f042 0201 	orr.w	r2, r2, #1
 800a844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a846:	e007      	b.n	800a858 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 0201 	orr.w	r2, r2, #1
 800a856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	40010000 	.word	0x40010000
 800a86c:	40000400 	.word	0x40000400
 800a870:	40000800 	.word	0x40000800
 800a874:	40000c00 	.word	0x40000c00
 800a878:	40010400 	.word	0x40010400
 800a87c:	40014000 	.word	0x40014000
 800a880:	40001800 	.word	0x40001800

0800a884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e041      	b.n	800a91a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f839 	bl	800a922 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	f000 faf2 	bl	800aeac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d122      	bne.n	800a992 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	2b02      	cmp	r3, #2
 800a958:	d11b      	bne.n	800a992 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f06f 0202 	mvn.w	r2, #2
 800a962:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d003      	beq.n	800a980 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fa78 	bl	800ae6e <HAL_TIM_IC_CaptureCallback>
 800a97e:	e005      	b.n	800a98c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fa6a 	bl	800ae5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fa7b 	bl	800ae82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	f003 0304 	and.w	r3, r3, #4
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d122      	bne.n	800a9e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	d11b      	bne.n	800a9e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f06f 0204 	mvn.w	r2, #4
 800a9b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fa4e 	bl	800ae6e <HAL_TIM_IC_CaptureCallback>
 800a9d2:	e005      	b.n	800a9e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fa40 	bl	800ae5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fa51 	bl	800ae82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f003 0308 	and.w	r3, r3, #8
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	d122      	bne.n	800aa3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	f003 0308 	and.w	r3, r3, #8
 800a9fe:	2b08      	cmp	r3, #8
 800aa00:	d11b      	bne.n	800aa3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f06f 0208 	mvn.w	r2, #8
 800aa0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2204      	movs	r2, #4
 800aa10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	f003 0303 	and.w	r3, r3, #3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fa24 	bl	800ae6e <HAL_TIM_IC_CaptureCallback>
 800aa26:	e005      	b.n	800aa34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fa16 	bl	800ae5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fa27 	bl	800ae82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	f003 0310 	and.w	r3, r3, #16
 800aa44:	2b10      	cmp	r3, #16
 800aa46:	d122      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	f003 0310 	and.w	r3, r3, #16
 800aa52:	2b10      	cmp	r3, #16
 800aa54:	d11b      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f06f 0210 	mvn.w	r2, #16
 800aa5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2208      	movs	r2, #8
 800aa64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f9fa 	bl	800ae6e <HAL_TIM_IC_CaptureCallback>
 800aa7a:	e005      	b.n	800aa88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f9ec 	bl	800ae5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f9fd 	bl	800ae82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d10e      	bne.n	800aaba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d107      	bne.n	800aaba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f06f 0201 	mvn.w	r2, #1
 800aab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7fa fa07 	bl	8004ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac4:	2b80      	cmp	r3, #128	; 0x80
 800aac6:	d10e      	bne.n	800aae6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad2:	2b80      	cmp	r3, #128	; 0x80
 800aad4:	d107      	bne.n	800aae6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fd53 	bl	800b58c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf0:	2b40      	cmp	r3, #64	; 0x40
 800aaf2:	d10e      	bne.n	800ab12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aafe:	2b40      	cmp	r3, #64	; 0x40
 800ab00:	d107      	bne.n	800ab12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f9c2 	bl	800ae96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	f003 0320 	and.w	r3, r3, #32
 800ab1c:	2b20      	cmp	r3, #32
 800ab1e:	d10e      	bne.n	800ab3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f003 0320 	and.w	r3, r3, #32
 800ab2a:	2b20      	cmp	r3, #32
 800ab2c:	d107      	bne.n	800ab3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f06f 0220 	mvn.w	r2, #32
 800ab36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fd1d 	bl	800b578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e0ae      	b.n	800acc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b0c      	cmp	r3, #12
 800ab72:	f200 809f 	bhi.w	800acb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ab76:	a201      	add	r2, pc, #4	; (adr r2, 800ab7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7c:	0800abb1 	.word	0x0800abb1
 800ab80:	0800acb5 	.word	0x0800acb5
 800ab84:	0800acb5 	.word	0x0800acb5
 800ab88:	0800acb5 	.word	0x0800acb5
 800ab8c:	0800abf1 	.word	0x0800abf1
 800ab90:	0800acb5 	.word	0x0800acb5
 800ab94:	0800acb5 	.word	0x0800acb5
 800ab98:	0800acb5 	.word	0x0800acb5
 800ab9c:	0800ac33 	.word	0x0800ac33
 800aba0:	0800acb5 	.word	0x0800acb5
 800aba4:	0800acb5 	.word	0x0800acb5
 800aba8:	0800acb5 	.word	0x0800acb5
 800abac:	0800ac73 	.word	0x0800ac73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68b9      	ldr	r1, [r7, #8]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fa18 	bl	800afec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	699a      	ldr	r2, [r3, #24]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0208 	orr.w	r2, r2, #8
 800abca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	699a      	ldr	r2, [r3, #24]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f022 0204 	bic.w	r2, r2, #4
 800abda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6999      	ldr	r1, [r3, #24]
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	691a      	ldr	r2, [r3, #16]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	430a      	orrs	r2, r1
 800abec:	619a      	str	r2, [r3, #24]
      break;
 800abee:	e064      	b.n	800acba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68b9      	ldr	r1, [r7, #8]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fa68 	bl	800b0cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	699a      	ldr	r2, [r3, #24]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	699a      	ldr	r2, [r3, #24]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6999      	ldr	r1, [r3, #24]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	021a      	lsls	r2, r3, #8
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	430a      	orrs	r2, r1
 800ac2e:	619a      	str	r2, [r3, #24]
      break;
 800ac30:	e043      	b.n	800acba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 fabd 	bl	800b1b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	69da      	ldr	r2, [r3, #28]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f042 0208 	orr.w	r2, r2, #8
 800ac4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	69da      	ldr	r2, [r3, #28]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f022 0204 	bic.w	r2, r2, #4
 800ac5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	69d9      	ldr	r1, [r3, #28]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	691a      	ldr	r2, [r3, #16]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	61da      	str	r2, [r3, #28]
      break;
 800ac70:	e023      	b.n	800acba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 fb11 	bl	800b2a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	69da      	ldr	r2, [r3, #28]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	69da      	ldr	r2, [r3, #28]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	69d9      	ldr	r1, [r3, #28]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	021a      	lsls	r2, r3, #8
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	61da      	str	r2, [r3, #28]
      break;
 800acb2:	e002      	b.n	800acba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	75fb      	strb	r3, [r7, #23]
      break;
 800acb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d101      	bne.n	800ace8 <HAL_TIM_ConfigClockSource+0x1c>
 800ace4:	2302      	movs	r3, #2
 800ace6:	e0b4      	b.n	800ae52 <HAL_TIM_ConfigClockSource+0x186>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2202      	movs	r2, #2
 800acf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad20:	d03e      	beq.n	800ada0 <HAL_TIM_ConfigClockSource+0xd4>
 800ad22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad26:	f200 8087 	bhi.w	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
 800ad2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad2e:	f000 8086 	beq.w	800ae3e <HAL_TIM_ConfigClockSource+0x172>
 800ad32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad36:	d87f      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
 800ad38:	2b70      	cmp	r3, #112	; 0x70
 800ad3a:	d01a      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0xa6>
 800ad3c:	2b70      	cmp	r3, #112	; 0x70
 800ad3e:	d87b      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
 800ad40:	2b60      	cmp	r3, #96	; 0x60
 800ad42:	d050      	beq.n	800ade6 <HAL_TIM_ConfigClockSource+0x11a>
 800ad44:	2b60      	cmp	r3, #96	; 0x60
 800ad46:	d877      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
 800ad48:	2b50      	cmp	r3, #80	; 0x50
 800ad4a:	d03c      	beq.n	800adc6 <HAL_TIM_ConfigClockSource+0xfa>
 800ad4c:	2b50      	cmp	r3, #80	; 0x50
 800ad4e:	d873      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
 800ad50:	2b40      	cmp	r3, #64	; 0x40
 800ad52:	d058      	beq.n	800ae06 <HAL_TIM_ConfigClockSource+0x13a>
 800ad54:	2b40      	cmp	r3, #64	; 0x40
 800ad56:	d86f      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
 800ad58:	2b30      	cmp	r3, #48	; 0x30
 800ad5a:	d064      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x15a>
 800ad5c:	2b30      	cmp	r3, #48	; 0x30
 800ad5e:	d86b      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
 800ad60:	2b20      	cmp	r3, #32
 800ad62:	d060      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x15a>
 800ad64:	2b20      	cmp	r3, #32
 800ad66:	d867      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d05c      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x15a>
 800ad6c:	2b10      	cmp	r3, #16
 800ad6e:	d05a      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x15a>
 800ad70:	e062      	b.n	800ae38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	6899      	ldr	r1, [r3, #8]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f000 fb5d 	bl	800b440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	609a      	str	r2, [r3, #8]
      break;
 800ad9e:	e04f      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	6899      	ldr	r1, [r3, #8]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f000 fb46 	bl	800b440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adc2:	609a      	str	r2, [r3, #8]
      break;
 800adc4:	e03c      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	6859      	ldr	r1, [r3, #4]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	461a      	mov	r2, r3
 800add4:	f000 faba 	bl	800b34c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2150      	movs	r1, #80	; 0x50
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 fb13 	bl	800b40a <TIM_ITRx_SetConfig>
      break;
 800ade4:	e02c      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	6859      	ldr	r1, [r3, #4]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f000 fad9 	bl	800b3aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2160      	movs	r1, #96	; 0x60
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fb03 	bl	800b40a <TIM_ITRx_SetConfig>
      break;
 800ae04:	e01c      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	6859      	ldr	r1, [r3, #4]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f000 fa9a 	bl	800b34c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2140      	movs	r1, #64	; 0x40
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 faf3 	bl	800b40a <TIM_ITRx_SetConfig>
      break;
 800ae24:	e00c      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4610      	mov	r0, r2
 800ae32:	f000 faea 	bl	800b40a <TIM_ITRx_SetConfig>
      break;
 800ae36:	e003      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3c:	e000      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b083      	sub	sp, #12
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae62:	bf00      	nop
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae76:	bf00      	nop
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae8a:	bf00      	nop
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
	...

0800aeac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a40      	ldr	r2, [pc, #256]	; (800afc0 <TIM_Base_SetConfig+0x114>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d013      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeca:	d00f      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a3d      	ldr	r2, [pc, #244]	; (800afc4 <TIM_Base_SetConfig+0x118>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d00b      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a3c      	ldr	r2, [pc, #240]	; (800afc8 <TIM_Base_SetConfig+0x11c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d007      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a3b      	ldr	r2, [pc, #236]	; (800afcc <TIM_Base_SetConfig+0x120>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d003      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a3a      	ldr	r2, [pc, #232]	; (800afd0 <TIM_Base_SetConfig+0x124>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d108      	bne.n	800aefe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a2f      	ldr	r2, [pc, #188]	; (800afc0 <TIM_Base_SetConfig+0x114>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d02b      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af0c:	d027      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a2c      	ldr	r2, [pc, #176]	; (800afc4 <TIM_Base_SetConfig+0x118>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d023      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a2b      	ldr	r2, [pc, #172]	; (800afc8 <TIM_Base_SetConfig+0x11c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d01f      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a2a      	ldr	r2, [pc, #168]	; (800afcc <TIM_Base_SetConfig+0x120>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d01b      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a29      	ldr	r2, [pc, #164]	; (800afd0 <TIM_Base_SetConfig+0x124>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d017      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a28      	ldr	r2, [pc, #160]	; (800afd4 <TIM_Base_SetConfig+0x128>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d013      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a27      	ldr	r2, [pc, #156]	; (800afd8 <TIM_Base_SetConfig+0x12c>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d00f      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a26      	ldr	r2, [pc, #152]	; (800afdc <TIM_Base_SetConfig+0x130>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d00b      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a25      	ldr	r2, [pc, #148]	; (800afe0 <TIM_Base_SetConfig+0x134>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d007      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a24      	ldr	r2, [pc, #144]	; (800afe4 <TIM_Base_SetConfig+0x138>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d003      	beq.n	800af5e <TIM_Base_SetConfig+0xb2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a23      	ldr	r2, [pc, #140]	; (800afe8 <TIM_Base_SetConfig+0x13c>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d108      	bne.n	800af70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	689a      	ldr	r2, [r3, #8]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a0a      	ldr	r2, [pc, #40]	; (800afc0 <TIM_Base_SetConfig+0x114>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d003      	beq.n	800afa4 <TIM_Base_SetConfig+0xf8>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a0c      	ldr	r2, [pc, #48]	; (800afd0 <TIM_Base_SetConfig+0x124>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d103      	bne.n	800afac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	615a      	str	r2, [r3, #20]
}
 800afb2:	bf00      	nop
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	40010000 	.word	0x40010000
 800afc4:	40000400 	.word	0x40000400
 800afc8:	40000800 	.word	0x40000800
 800afcc:	40000c00 	.word	0x40000c00
 800afd0:	40010400 	.word	0x40010400
 800afd4:	40014000 	.word	0x40014000
 800afd8:	40014400 	.word	0x40014400
 800afdc:	40014800 	.word	0x40014800
 800afe0:	40001800 	.word	0x40001800
 800afe4:	40001c00 	.word	0x40001c00
 800afe8:	40002000 	.word	0x40002000

0800afec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	f023 0201 	bic.w	r2, r3, #1
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b01a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f023 0302 	bic.w	r3, r3, #2
 800b034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a20      	ldr	r2, [pc, #128]	; (800b0c4 <TIM_OC1_SetConfig+0xd8>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d003      	beq.n	800b050 <TIM_OC1_SetConfig+0x64>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a1f      	ldr	r2, [pc, #124]	; (800b0c8 <TIM_OC1_SetConfig+0xdc>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d10c      	bne.n	800b06a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f023 0308 	bic.w	r3, r3, #8
 800b056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	4313      	orrs	r3, r2
 800b060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f023 0304 	bic.w	r3, r3, #4
 800b068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a15      	ldr	r2, [pc, #84]	; (800b0c4 <TIM_OC1_SetConfig+0xd8>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d003      	beq.n	800b07a <TIM_OC1_SetConfig+0x8e>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a14      	ldr	r2, [pc, #80]	; (800b0c8 <TIM_OC1_SetConfig+0xdc>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d111      	bne.n	800b09e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4313      	orrs	r3, r2
 800b092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	621a      	str	r2, [r3, #32]
}
 800b0b8:	bf00      	nop
 800b0ba:	371c      	adds	r7, #28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	40010000 	.word	0x40010000
 800b0c8:	40010400 	.word	0x40010400

0800b0cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	f023 0210 	bic.w	r2, r3, #16
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f023 0320 	bic.w	r3, r3, #32
 800b116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	011b      	lsls	r3, r3, #4
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	4313      	orrs	r3, r2
 800b122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a22      	ldr	r2, [pc, #136]	; (800b1b0 <TIM_OC2_SetConfig+0xe4>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d003      	beq.n	800b134 <TIM_OC2_SetConfig+0x68>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a21      	ldr	r2, [pc, #132]	; (800b1b4 <TIM_OC2_SetConfig+0xe8>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d10d      	bne.n	800b150 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b13a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	011b      	lsls	r3, r3, #4
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	4313      	orrs	r3, r2
 800b146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b14e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a17      	ldr	r2, [pc, #92]	; (800b1b0 <TIM_OC2_SetConfig+0xe4>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d003      	beq.n	800b160 <TIM_OC2_SetConfig+0x94>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a16      	ldr	r2, [pc, #88]	; (800b1b4 <TIM_OC2_SetConfig+0xe8>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d113      	bne.n	800b188 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b16e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	695b      	ldr	r3, [r3, #20]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	4313      	orrs	r3, r2
 800b17a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	693a      	ldr	r2, [r7, #16]
 800b184:	4313      	orrs	r3, r2
 800b186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	621a      	str	r2, [r3, #32]
}
 800b1a2:	bf00      	nop
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	40010000 	.word	0x40010000
 800b1b4:	40010400 	.word	0x40010400

0800b1b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f023 0303 	bic.w	r3, r3, #3
 800b1ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	697a      	ldr	r2, [r7, #20]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a21      	ldr	r2, [pc, #132]	; (800b298 <TIM_OC3_SetConfig+0xe0>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d003      	beq.n	800b21e <TIM_OC3_SetConfig+0x66>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a20      	ldr	r2, [pc, #128]	; (800b29c <TIM_OC3_SetConfig+0xe4>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d10d      	bne.n	800b23a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	021b      	lsls	r3, r3, #8
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	4313      	orrs	r3, r2
 800b230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a16      	ldr	r2, [pc, #88]	; (800b298 <TIM_OC3_SetConfig+0xe0>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d003      	beq.n	800b24a <TIM_OC3_SetConfig+0x92>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a15      	ldr	r2, [pc, #84]	; (800b29c <TIM_OC3_SetConfig+0xe4>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d113      	bne.n	800b272 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	4313      	orrs	r3, r2
 800b264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	4313      	orrs	r3, r2
 800b270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685a      	ldr	r2, [r3, #4]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	621a      	str	r2, [r3, #32]
}
 800b28c:	bf00      	nop
 800b28e:	371c      	adds	r7, #28
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	40010000 	.word	0x40010000
 800b29c:	40010400 	.word	0x40010400

0800b2a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	69db      	ldr	r3, [r3, #28]
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	031b      	lsls	r3, r3, #12
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a12      	ldr	r2, [pc, #72]	; (800b344 <TIM_OC4_SetConfig+0xa4>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d003      	beq.n	800b308 <TIM_OC4_SetConfig+0x68>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a11      	ldr	r2, [pc, #68]	; (800b348 <TIM_OC4_SetConfig+0xa8>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d109      	bne.n	800b31c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b30e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	695b      	ldr	r3, [r3, #20]
 800b314:	019b      	lsls	r3, r3, #6
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	4313      	orrs	r3, r2
 800b31a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	621a      	str	r2, [r3, #32]
}
 800b336:	bf00      	nop
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	40010000 	.word	0x40010000
 800b348:	40010400 	.word	0x40010400

0800b34c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	f023 0201 	bic.w	r2, r3, #1
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	4313      	orrs	r3, r2
 800b380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	f023 030a 	bic.w	r3, r3, #10
 800b388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	4313      	orrs	r3, r2
 800b390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	621a      	str	r2, [r3, #32]
}
 800b39e:	bf00      	nop
 800b3a0:	371c      	adds	r7, #28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b087      	sub	sp, #28
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	60f8      	str	r0, [r7, #12]
 800b3b2:	60b9      	str	r1, [r7, #8]
 800b3b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	f023 0210 	bic.w	r2, r3, #16
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6a1b      	ldr	r3, [r3, #32]
 800b3cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b3d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	031b      	lsls	r3, r3, #12
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b3e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	011b      	lsls	r3, r3, #4
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	621a      	str	r2, [r3, #32]
}
 800b3fe:	bf00      	nop
 800b400:	371c      	adds	r7, #28
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	f043 0307 	orr.w	r3, r3, #7
 800b42c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	609a      	str	r2, [r3, #8]
}
 800b434:	bf00      	nop
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b45a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	021a      	lsls	r2, r3, #8
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	431a      	orrs	r2, r3
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	4313      	orrs	r3, r2
 800b468:	697a      	ldr	r2, [r7, #20]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	609a      	str	r2, [r3, #8]
}
 800b474:	bf00      	nop
 800b476:	371c      	adds	r7, #28
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b490:	2b01      	cmp	r3, #1
 800b492:	d101      	bne.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b494:	2302      	movs	r3, #2
 800b496:	e05a      	b.n	800b54e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a21      	ldr	r2, [pc, #132]	; (800b55c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d022      	beq.n	800b522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e4:	d01d      	beq.n	800b522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a1d      	ldr	r2, [pc, #116]	; (800b560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d018      	beq.n	800b522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a1b      	ldr	r2, [pc, #108]	; (800b564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d013      	beq.n	800b522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a1a      	ldr	r2, [pc, #104]	; (800b568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d00e      	beq.n	800b522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a18      	ldr	r2, [pc, #96]	; (800b56c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d009      	beq.n	800b522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a17      	ldr	r2, [pc, #92]	; (800b570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d004      	beq.n	800b522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a15      	ldr	r2, [pc, #84]	; (800b574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d10c      	bne.n	800b53c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	4313      	orrs	r3, r2
 800b532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40010000 	.word	0x40010000
 800b560:	40000400 	.word	0x40000400
 800b564:	40000800 	.word	0x40000800
 800b568:	40000c00 	.word	0x40000c00
 800b56c:	40010400 	.word	0x40010400
 800b570:	40014000 	.word	0x40014000
 800b574:	40001800 	.word	0x40001800

0800b578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e03f      	b.n	800b632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d106      	bne.n	800b5cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7f9 ff22 	bl	8005410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2224      	movs	r2, #36	; 0x24
 800b5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68da      	ldr	r2, [r3, #12]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fddb 	bl	800c1a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	691a      	ldr	r2, [r3, #16]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b5f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	695a      	ldr	r2, [r3, #20]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2220      	movs	r2, #32
 800b624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b08a      	sub	sp, #40	; 0x28
 800b63e:	af02      	add	r7, sp, #8
 800b640:	60f8      	str	r0, [r7, #12]
 800b642:	60b9      	str	r1, [r7, #8]
 800b644:	603b      	str	r3, [r7, #0]
 800b646:	4613      	mov	r3, r2
 800b648:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b20      	cmp	r3, #32
 800b658:	d17c      	bne.n	800b754 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <HAL_UART_Transmit+0x2c>
 800b660:	88fb      	ldrh	r3, [r7, #6]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e075      	b.n	800b756 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b670:	2b01      	cmp	r3, #1
 800b672:	d101      	bne.n	800b678 <HAL_UART_Transmit+0x3e>
 800b674:	2302      	movs	r3, #2
 800b676:	e06e      	b.n	800b756 <HAL_UART_Transmit+0x11c>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2221      	movs	r2, #33	; 0x21
 800b68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b68e:	f7fb fa8d 	bl	8006bac <HAL_GetTick>
 800b692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	88fa      	ldrh	r2, [r7, #6]
 800b698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	88fa      	ldrh	r2, [r7, #6]
 800b69e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6a8:	d108      	bne.n	800b6bc <HAL_UART_Transmit+0x82>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d104      	bne.n	800b6bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	61bb      	str	r3, [r7, #24]
 800b6ba:	e003      	b.n	800b6c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b6cc:	e02a      	b.n	800b724 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2180      	movs	r1, #128	; 0x80
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 fb1f 	bl	800bd1c <UART_WaitOnFlagUntilTimeout>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e036      	b.n	800b756 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10b      	bne.n	800b706 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	3302      	adds	r3, #2
 800b702:	61bb      	str	r3, [r7, #24]
 800b704:	e007      	b.n	800b716 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	781a      	ldrb	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	3301      	adds	r3, #1
 800b714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	3b01      	subs	r3, #1
 800b71e:	b29a      	uxth	r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b728:	b29b      	uxth	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1cf      	bne.n	800b6ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2200      	movs	r2, #0
 800b736:	2140      	movs	r1, #64	; 0x40
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 faef 	bl	800bd1c <UART_WaitOnFlagUntilTimeout>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b744:	2303      	movs	r3, #3
 800b746:	e006      	b.n	800b756 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2220      	movs	r2, #32
 800b74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	e000      	b.n	800b756 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b754:	2302      	movs	r3, #2
  }
}
 800b756:	4618      	mov	r0, r3
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	60f8      	str	r0, [r7, #12]
 800b766:	60b9      	str	r1, [r7, #8]
 800b768:	4613      	mov	r3, r2
 800b76a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b20      	cmp	r3, #32
 800b776:	d11d      	bne.n	800b7b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <HAL_UART_Receive_IT+0x26>
 800b77e:	88fb      	ldrh	r3, [r7, #6]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	e016      	b.n	800b7b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d101      	bne.n	800b796 <HAL_UART_Receive_IT+0x38>
 800b792:	2302      	movs	r3, #2
 800b794:	e00f      	b.n	800b7b6 <HAL_UART_Receive_IT+0x58>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b7a4:	88fb      	ldrh	r3, [r7, #6]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f000 fb24 	bl	800bdf8 <UART_Start_Receive_IT>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	e000      	b.n	800b7b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b7b4:	2302      	movs	r3, #2
  }
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b0ba      	sub	sp, #232	; 0xe8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b7fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10f      	bne.n	800b826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80a:	f003 0320 	and.w	r3, r3, #32
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d009      	beq.n	800b826 <HAL_UART_IRQHandler+0x66>
 800b812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b816:	f003 0320 	and.w	r3, r3, #32
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d003      	beq.n	800b826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fc03 	bl	800c02a <UART_Receive_IT>
      return;
 800b824:	e256      	b.n	800bcd4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f000 80de 	beq.w	800b9ec <HAL_UART_IRQHandler+0x22c>
 800b830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d106      	bne.n	800b84a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b83c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b840:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 80d1 	beq.w	800b9ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b84e:	f003 0301 	and.w	r3, r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00b      	beq.n	800b86e <HAL_UART_IRQHandler+0xae>
 800b856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b85a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d005      	beq.n	800b86e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b866:	f043 0201 	orr.w	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b872:	f003 0304 	and.w	r3, r3, #4
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00b      	beq.n	800b892 <HAL_UART_IRQHandler+0xd2>
 800b87a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	2b00      	cmp	r3, #0
 800b884:	d005      	beq.n	800b892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88a:	f043 0202 	orr.w	r2, r3, #2
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b896:	f003 0302 	and.w	r3, r3, #2
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00b      	beq.n	800b8b6 <HAL_UART_IRQHandler+0xf6>
 800b89e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ae:	f043 0204 	orr.w	r2, r3, #4
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b8b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ba:	f003 0308 	and.w	r3, r3, #8
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d011      	beq.n	800b8e6 <HAL_UART_IRQHandler+0x126>
 800b8c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8c6:	f003 0320 	and.w	r3, r3, #32
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d105      	bne.n	800b8da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b8ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8de:	f043 0208 	orr.w	r2, r3, #8
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 81ed 	beq.w	800bcca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8f4:	f003 0320 	and.w	r3, r3, #32
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d008      	beq.n	800b90e <HAL_UART_IRQHandler+0x14e>
 800b8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b900:	f003 0320 	and.w	r3, r3, #32
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fb8e 	bl	800c02a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b918:	2b40      	cmp	r3, #64	; 0x40
 800b91a:	bf0c      	ite	eq
 800b91c:	2301      	moveq	r3, #1
 800b91e:	2300      	movne	r3, #0
 800b920:	b2db      	uxtb	r3, r3
 800b922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	f003 0308 	and.w	r3, r3, #8
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d103      	bne.n	800b93a <HAL_UART_IRQHandler+0x17a>
 800b932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b936:	2b00      	cmp	r3, #0
 800b938:	d04f      	beq.n	800b9da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fa96 	bl	800be6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94a:	2b40      	cmp	r3, #64	; 0x40
 800b94c:	d141      	bne.n	800b9d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	3314      	adds	r3, #20
 800b954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b95c:	e853 3f00 	ldrex	r3, [r3]
 800b960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b96c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3314      	adds	r3, #20
 800b976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b97a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b97e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b98a:	e841 2300 	strex	r3, r2, [r1]
 800b98e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1d9      	bne.n	800b94e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d013      	beq.n	800b9ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a6:	4a7d      	ldr	r2, [pc, #500]	; (800bb9c <HAL_UART_IRQHandler+0x3dc>)
 800b9a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fb ffc6 	bl	8007940 <HAL_DMA_Abort_IT>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d016      	beq.n	800b9e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c8:	e00e      	b.n	800b9e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f990 	bl	800bcf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9d0:	e00a      	b.n	800b9e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f98c 	bl	800bcf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9d8:	e006      	b.n	800b9e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f988 	bl	800bcf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b9e6:	e170      	b.n	800bcca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e8:	bf00      	nop
    return;
 800b9ea:	e16e      	b.n	800bcca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	f040 814a 	bne.w	800bc8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fa:	f003 0310 	and.w	r3, r3, #16
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 8143 	beq.w	800bc8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ba04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba08:	f003 0310 	and.w	r3, r3, #16
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 813c 	beq.w	800bc8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba12:	2300      	movs	r3, #0
 800ba14:	60bb      	str	r3, [r7, #8]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60bb      	str	r3, [r7, #8]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	60bb      	str	r3, [r7, #8]
 800ba26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba32:	2b40      	cmp	r3, #64	; 0x40
 800ba34:	f040 80b4 	bne.w	800bba0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 8140 	beq.w	800bcce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba56:	429a      	cmp	r2, r3
 800ba58:	f080 8139 	bcs.w	800bcce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba6e:	f000 8088 	beq.w	800bb82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	330c      	adds	r3, #12
 800ba78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba80:	e853 3f00 	ldrex	r3, [r3]
 800ba84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	330c      	adds	r3, #12
 800ba9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800baa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800baaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800baae:	e841 2300 	strex	r3, r2, [r1]
 800bab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1d9      	bne.n	800ba72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3314      	adds	r3, #20
 800bac4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bad0:	f023 0301 	bic.w	r3, r3, #1
 800bad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3314      	adds	r3, #20
 800bade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bae2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bae6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800baea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800baf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e1      	bne.n	800babe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	3314      	adds	r3, #20
 800bb00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb04:	e853 3f00 	ldrex	r3, [r3]
 800bb08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	3314      	adds	r3, #20
 800bb1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e3      	bne.n	800bafa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2220      	movs	r2, #32
 800bb36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	330c      	adds	r3, #12
 800bb46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb52:	f023 0310 	bic.w	r3, r3, #16
 800bb56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	330c      	adds	r3, #12
 800bb60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb64:	65ba      	str	r2, [r7, #88]	; 0x58
 800bb66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e3      	bne.n	800bb40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fb fe6f 	bl	8007860 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f8b6 	bl	800bd04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb98:	e099      	b.n	800bcce <HAL_UART_IRQHandler+0x50e>
 800bb9a:	bf00      	nop
 800bb9c:	0800bf33 	.word	0x0800bf33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	1ad3      	subs	r3, r2, r3
 800bbac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 808b 	beq.w	800bcd2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bbbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 8086 	beq.w	800bcd2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	330c      	adds	r3, #12
 800bbcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd0:	e853 3f00 	ldrex	r3, [r3]
 800bbd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	330c      	adds	r3, #12
 800bbe6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bbea:	647a      	str	r2, [r7, #68]	; 0x44
 800bbec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbf2:	e841 2300 	strex	r3, r2, [r1]
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1e3      	bne.n	800bbc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3314      	adds	r3, #20
 800bc04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	e853 3f00 	ldrex	r3, [r3]
 800bc0c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	f023 0301 	bic.w	r3, r3, #1
 800bc14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3314      	adds	r3, #20
 800bc1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc22:	633a      	str	r2, [r7, #48]	; 0x30
 800bc24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e3      	bne.n	800bbfe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2220      	movs	r2, #32
 800bc3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	330c      	adds	r3, #12
 800bc4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	e853 3f00 	ldrex	r3, [r3]
 800bc52:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f023 0310 	bic.w	r3, r3, #16
 800bc5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	330c      	adds	r3, #12
 800bc64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bc68:	61fa      	str	r2, [r7, #28]
 800bc6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6c:	69b9      	ldr	r1, [r7, #24]
 800bc6e:	69fa      	ldr	r2, [r7, #28]
 800bc70:	e841 2300 	strex	r3, r2, [r1]
 800bc74:	617b      	str	r3, [r7, #20]
   return(result);
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e3      	bne.n	800bc44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f83e 	bl	800bd04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc88:	e023      	b.n	800bcd2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d009      	beq.n	800bcaa <HAL_UART_IRQHandler+0x4ea>
 800bc96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f959 	bl	800bf5a <UART_Transmit_IT>
    return;
 800bca8:	e014      	b.n	800bcd4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bcaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00e      	beq.n	800bcd4 <HAL_UART_IRQHandler+0x514>
 800bcb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d008      	beq.n	800bcd4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f999 	bl	800bffa <UART_EndTransmit_IT>
    return;
 800bcc8:	e004      	b.n	800bcd4 <HAL_UART_IRQHandler+0x514>
    return;
 800bcca:	bf00      	nop
 800bccc:	e002      	b.n	800bcd4 <HAL_UART_IRQHandler+0x514>
      return;
 800bcce:	bf00      	nop
 800bcd0:	e000      	b.n	800bcd4 <HAL_UART_IRQHandler+0x514>
      return;
 800bcd2:	bf00      	nop
  }
}
 800bcd4:	37e8      	adds	r7, #232	; 0xe8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop

0800bcdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b090      	sub	sp, #64	; 0x40
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd2c:	e050      	b.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd34:	d04c      	beq.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bd36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d007      	beq.n	800bd4c <UART_WaitOnFlagUntilTimeout+0x30>
 800bd3c:	f7fa ff36 	bl	8006bac <HAL_GetTick>
 800bd40:	4602      	mov	r2, r0
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d241      	bcs.n	800bdd0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	330c      	adds	r3, #12
 800bd52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	e853 3f00 	ldrex	r3, [r3]
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	330c      	adds	r3, #12
 800bd6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd6c:	637a      	str	r2, [r7, #52]	; 0x34
 800bd6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd74:	e841 2300 	strex	r3, r2, [r1]
 800bd78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1e5      	bne.n	800bd4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3314      	adds	r3, #20
 800bd86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	e853 3f00 	ldrex	r3, [r3]
 800bd8e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f023 0301 	bic.w	r3, r3, #1
 800bd96:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3314      	adds	r3, #20
 800bd9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bda0:	623a      	str	r2, [r7, #32]
 800bda2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda4:	69f9      	ldr	r1, [r7, #28]
 800bda6:	6a3a      	ldr	r2, [r7, #32]
 800bda8:	e841 2300 	strex	r3, r2, [r1]
 800bdac:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1e5      	bne.n	800bd80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2220      	movs	r2, #32
 800bdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e00f      	b.n	800bdf0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	4013      	ands	r3, r2
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	bf0c      	ite	eq
 800bde0:	2301      	moveq	r3, #1
 800bde2:	2300      	movne	r3, #0
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	461a      	mov	r2, r3
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d09f      	beq.n	800bd2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3740      	adds	r7, #64	; 0x40
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	4613      	mov	r3, r2
 800be04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	88fa      	ldrh	r2, [r7, #6]
 800be10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	88fa      	ldrh	r2, [r7, #6]
 800be16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2222      	movs	r2, #34	; 0x22
 800be22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68da      	ldr	r2, [r3, #12]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be3c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	695a      	ldr	r2, [r3, #20]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f042 0201 	orr.w	r2, r2, #1
 800be4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68da      	ldr	r2, [r3, #12]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f042 0220 	orr.w	r2, r2, #32
 800be5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b095      	sub	sp, #84	; 0x54
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	330c      	adds	r3, #12
 800be7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7e:	e853 3f00 	ldrex	r3, [r3]
 800be82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	330c      	adds	r3, #12
 800be92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be94:	643a      	str	r2, [r7, #64]	; 0x40
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be9c:	e841 2300 	strex	r3, r2, [r1]
 800bea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e5      	bne.n	800be74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3314      	adds	r3, #20
 800beae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb0:	6a3b      	ldr	r3, [r7, #32]
 800beb2:	e853 3f00 	ldrex	r3, [r3]
 800beb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	f023 0301 	bic.w	r3, r3, #1
 800bebe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3314      	adds	r3, #20
 800bec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800beca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800becc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bed0:	e841 2300 	strex	r3, r2, [r1]
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1e5      	bne.n	800bea8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d119      	bne.n	800bf18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	330c      	adds	r3, #12
 800beea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	e853 3f00 	ldrex	r3, [r3]
 800bef2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	f023 0310 	bic.w	r3, r3, #16
 800befa:	647b      	str	r3, [r7, #68]	; 0x44
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	330c      	adds	r3, #12
 800bf02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf04:	61ba      	str	r2, [r7, #24]
 800bf06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf08:	6979      	ldr	r1, [r7, #20]
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	e841 2300 	strex	r3, r2, [r1]
 800bf10:	613b      	str	r3, [r7, #16]
   return(result);
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d1e5      	bne.n	800bee4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2220      	movs	r2, #32
 800bf1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf26:	bf00      	nop
 800bf28:	3754      	adds	r7, #84	; 0x54
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f7ff fecf 	bl	800bcf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b085      	sub	sp, #20
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b21      	cmp	r3, #33	; 0x21
 800bf6c:	d13e      	bne.n	800bfec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf76:	d114      	bne.n	800bfa2 <UART_Transmit_IT+0x48>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d110      	bne.n	800bfa2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a1b      	ldr	r3, [r3, #32]
 800bf84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	1c9a      	adds	r2, r3, #2
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	621a      	str	r2, [r3, #32]
 800bfa0:	e008      	b.n	800bfb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	1c59      	adds	r1, r3, #1
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	6211      	str	r1, [r2, #32]
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10f      	bne.n	800bfe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68da      	ldr	r2, [r3, #12]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68da      	ldr	r2, [r3, #12]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e000      	b.n	800bfee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bfec:	2302      	movs	r3, #2
  }
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b082      	sub	sp, #8
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68da      	ldr	r2, [r3, #12]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2220      	movs	r2, #32
 800c016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff fe5e 	bl	800bcdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b08c      	sub	sp, #48	; 0x30
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b22      	cmp	r3, #34	; 0x22
 800c03c:	f040 80ab 	bne.w	800c196 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c048:	d117      	bne.n	800c07a <UART_Receive_IT+0x50>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d113      	bne.n	800c07a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	b29b      	uxth	r3, r3
 800c064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c068:	b29a      	uxth	r2, r3
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c072:	1c9a      	adds	r2, r3, #2
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	629a      	str	r2, [r3, #40]	; 0x28
 800c078:	e026      	b.n	800c0c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c07e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c080:	2300      	movs	r3, #0
 800c082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c08c:	d007      	beq.n	800c09e <UART_Receive_IT+0x74>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10a      	bne.n	800c0ac <UART_Receive_IT+0x82>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d106      	bne.n	800c0ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	b2da      	uxtb	r2, r3
 800c0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a8:	701a      	strb	r2, [r3, #0]
 800c0aa:	e008      	b.n	800c0be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c2:	1c5a      	adds	r2, r3, #1
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d15a      	bne.n	800c192 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68da      	ldr	r2, [r3, #12]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 0220 	bic.w	r2, r2, #32
 800c0ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	695a      	ldr	r2, [r3, #20]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f022 0201 	bic.w	r2, r2, #1
 800c10a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2220      	movs	r2, #32
 800c110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d135      	bne.n	800c188 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	330c      	adds	r3, #12
 800c128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	613b      	str	r3, [r7, #16]
   return(result);
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f023 0310 	bic.w	r3, r3, #16
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	330c      	adds	r3, #12
 800c140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c142:	623a      	str	r2, [r7, #32]
 800c144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	69f9      	ldr	r1, [r7, #28]
 800c148:	6a3a      	ldr	r2, [r7, #32]
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e5      	bne.n	800c122 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0310 	and.w	r3, r3, #16
 800c160:	2b10      	cmp	r3, #16
 800c162:	d10a      	bne.n	800c17a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c164:	2300      	movs	r3, #0
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c17e:	4619      	mov	r1, r3
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff fdbf 	bl	800bd04 <HAL_UARTEx_RxEventCallback>
 800c186:	e002      	b.n	800c18e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7fa fb47 	bl	800681c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	e002      	b.n	800c198 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	e000      	b.n	800c198 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c196:	2302      	movs	r3, #2
  }
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3730      	adds	r7, #48	; 0x30
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	b09f      	sub	sp, #124	; 0x7c
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1b6:	68d9      	ldr	r1, [r3, #12]
 800c1b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	ea40 0301 	orr.w	r3, r0, r1
 800c1c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1c4:	689a      	ldr	r2, [r3, #8]
 800c1c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c1e4:	f021 010c 	bic.w	r1, r1, #12
 800c1e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1ee:	430b      	orrs	r3, r1
 800c1f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c1fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1fe:	6999      	ldr	r1, [r3, #24]
 800c200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	ea40 0301 	orr.w	r3, r0, r1
 800c208:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c20a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	4bc5      	ldr	r3, [pc, #788]	; (800c524 <UART_SetConfig+0x384>)
 800c210:	429a      	cmp	r2, r3
 800c212:	d004      	beq.n	800c21e <UART_SetConfig+0x7e>
 800c214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	4bc3      	ldr	r3, [pc, #780]	; (800c528 <UART_SetConfig+0x388>)
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d103      	bne.n	800c226 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c21e:	f7fd fc09 	bl	8009a34 <HAL_RCC_GetPCLK2Freq>
 800c222:	6778      	str	r0, [r7, #116]	; 0x74
 800c224:	e002      	b.n	800c22c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c226:	f7fd fbf1 	bl	8009a0c <HAL_RCC_GetPCLK1Freq>
 800c22a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c22e:	69db      	ldr	r3, [r3, #28]
 800c230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c234:	f040 80b6 	bne.w	800c3a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c23a:	461c      	mov	r4, r3
 800c23c:	f04f 0500 	mov.w	r5, #0
 800c240:	4622      	mov	r2, r4
 800c242:	462b      	mov	r3, r5
 800c244:	1891      	adds	r1, r2, r2
 800c246:	6439      	str	r1, [r7, #64]	; 0x40
 800c248:	415b      	adcs	r3, r3
 800c24a:	647b      	str	r3, [r7, #68]	; 0x44
 800c24c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c250:	1912      	adds	r2, r2, r4
 800c252:	eb45 0303 	adc.w	r3, r5, r3
 800c256:	f04f 0000 	mov.w	r0, #0
 800c25a:	f04f 0100 	mov.w	r1, #0
 800c25e:	00d9      	lsls	r1, r3, #3
 800c260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c264:	00d0      	lsls	r0, r2, #3
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	1911      	adds	r1, r2, r4
 800c26c:	6639      	str	r1, [r7, #96]	; 0x60
 800c26e:	416b      	adcs	r3, r5
 800c270:	667b      	str	r3, [r7, #100]	; 0x64
 800c272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	461a      	mov	r2, r3
 800c278:	f04f 0300 	mov.w	r3, #0
 800c27c:	1891      	adds	r1, r2, r2
 800c27e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c280:	415b      	adcs	r3, r3
 800c282:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c288:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c28c:	f7f4 fcfc 	bl	8000c88 <__aeabi_uldivmod>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4ba5      	ldr	r3, [pc, #660]	; (800c52c <UART_SetConfig+0x38c>)
 800c296:	fba3 2302 	umull	r2, r3, r3, r2
 800c29a:	095b      	lsrs	r3, r3, #5
 800c29c:	011e      	lsls	r6, r3, #4
 800c29e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2a0:	461c      	mov	r4, r3
 800c2a2:	f04f 0500 	mov.w	r5, #0
 800c2a6:	4622      	mov	r2, r4
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	1891      	adds	r1, r2, r2
 800c2ac:	6339      	str	r1, [r7, #48]	; 0x30
 800c2ae:	415b      	adcs	r3, r3
 800c2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c2b6:	1912      	adds	r2, r2, r4
 800c2b8:	eb45 0303 	adc.w	r3, r5, r3
 800c2bc:	f04f 0000 	mov.w	r0, #0
 800c2c0:	f04f 0100 	mov.w	r1, #0
 800c2c4:	00d9      	lsls	r1, r3, #3
 800c2c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c2ca:	00d0      	lsls	r0, r2, #3
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	1911      	adds	r1, r2, r4
 800c2d2:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2d4:	416b      	adcs	r3, r5
 800c2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	f04f 0300 	mov.w	r3, #0
 800c2e2:	1891      	adds	r1, r2, r2
 800c2e4:	62b9      	str	r1, [r7, #40]	; 0x28
 800c2e6:	415b      	adcs	r3, r3
 800c2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c2ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c2f2:	f7f4 fcc9 	bl	8000c88 <__aeabi_uldivmod>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	4b8c      	ldr	r3, [pc, #560]	; (800c52c <UART_SetConfig+0x38c>)
 800c2fc:	fba3 1302 	umull	r1, r3, r3, r2
 800c300:	095b      	lsrs	r3, r3, #5
 800c302:	2164      	movs	r1, #100	; 0x64
 800c304:	fb01 f303 	mul.w	r3, r1, r3
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	00db      	lsls	r3, r3, #3
 800c30c:	3332      	adds	r3, #50	; 0x32
 800c30e:	4a87      	ldr	r2, [pc, #540]	; (800c52c <UART_SetConfig+0x38c>)
 800c310:	fba2 2303 	umull	r2, r3, r2, r3
 800c314:	095b      	lsrs	r3, r3, #5
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c31c:	441e      	add	r6, r3
 800c31e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c320:	4618      	mov	r0, r3
 800c322:	f04f 0100 	mov.w	r1, #0
 800c326:	4602      	mov	r2, r0
 800c328:	460b      	mov	r3, r1
 800c32a:	1894      	adds	r4, r2, r2
 800c32c:	623c      	str	r4, [r7, #32]
 800c32e:	415b      	adcs	r3, r3
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
 800c332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c336:	1812      	adds	r2, r2, r0
 800c338:	eb41 0303 	adc.w	r3, r1, r3
 800c33c:	f04f 0400 	mov.w	r4, #0
 800c340:	f04f 0500 	mov.w	r5, #0
 800c344:	00dd      	lsls	r5, r3, #3
 800c346:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c34a:	00d4      	lsls	r4, r2, #3
 800c34c:	4622      	mov	r2, r4
 800c34e:	462b      	mov	r3, r5
 800c350:	1814      	adds	r4, r2, r0
 800c352:	653c      	str	r4, [r7, #80]	; 0x50
 800c354:	414b      	adcs	r3, r1
 800c356:	657b      	str	r3, [r7, #84]	; 0x54
 800c358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	461a      	mov	r2, r3
 800c35e:	f04f 0300 	mov.w	r3, #0
 800c362:	1891      	adds	r1, r2, r2
 800c364:	61b9      	str	r1, [r7, #24]
 800c366:	415b      	adcs	r3, r3
 800c368:	61fb      	str	r3, [r7, #28]
 800c36a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c36e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c372:	f7f4 fc89 	bl	8000c88 <__aeabi_uldivmod>
 800c376:	4602      	mov	r2, r0
 800c378:	460b      	mov	r3, r1
 800c37a:	4b6c      	ldr	r3, [pc, #432]	; (800c52c <UART_SetConfig+0x38c>)
 800c37c:	fba3 1302 	umull	r1, r3, r3, r2
 800c380:	095b      	lsrs	r3, r3, #5
 800c382:	2164      	movs	r1, #100	; 0x64
 800c384:	fb01 f303 	mul.w	r3, r1, r3
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	3332      	adds	r3, #50	; 0x32
 800c38e:	4a67      	ldr	r2, [pc, #412]	; (800c52c <UART_SetConfig+0x38c>)
 800c390:	fba2 2303 	umull	r2, r3, r2, r3
 800c394:	095b      	lsrs	r3, r3, #5
 800c396:	f003 0207 	and.w	r2, r3, #7
 800c39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4432      	add	r2, r6
 800c3a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3a2:	e0b9      	b.n	800c518 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3a6:	461c      	mov	r4, r3
 800c3a8:	f04f 0500 	mov.w	r5, #0
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	462b      	mov	r3, r5
 800c3b0:	1891      	adds	r1, r2, r2
 800c3b2:	6139      	str	r1, [r7, #16]
 800c3b4:	415b      	adcs	r3, r3
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c3bc:	1912      	adds	r2, r2, r4
 800c3be:	eb45 0303 	adc.w	r3, r5, r3
 800c3c2:	f04f 0000 	mov.w	r0, #0
 800c3c6:	f04f 0100 	mov.w	r1, #0
 800c3ca:	00d9      	lsls	r1, r3, #3
 800c3cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c3d0:	00d0      	lsls	r0, r2, #3
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	eb12 0804 	adds.w	r8, r2, r4
 800c3da:	eb43 0905 	adc.w	r9, r3, r5
 800c3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f04f 0100 	mov.w	r1, #0
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	f04f 0300 	mov.w	r3, #0
 800c3f0:	008b      	lsls	r3, r1, #2
 800c3f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c3f6:	0082      	lsls	r2, r0, #2
 800c3f8:	4640      	mov	r0, r8
 800c3fa:	4649      	mov	r1, r9
 800c3fc:	f7f4 fc44 	bl	8000c88 <__aeabi_uldivmod>
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	4b49      	ldr	r3, [pc, #292]	; (800c52c <UART_SetConfig+0x38c>)
 800c406:	fba3 2302 	umull	r2, r3, r3, r2
 800c40a:	095b      	lsrs	r3, r3, #5
 800c40c:	011e      	lsls	r6, r3, #4
 800c40e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c410:	4618      	mov	r0, r3
 800c412:	f04f 0100 	mov.w	r1, #0
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	1894      	adds	r4, r2, r2
 800c41c:	60bc      	str	r4, [r7, #8]
 800c41e:	415b      	adcs	r3, r3
 800c420:	60fb      	str	r3, [r7, #12]
 800c422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c426:	1812      	adds	r2, r2, r0
 800c428:	eb41 0303 	adc.w	r3, r1, r3
 800c42c:	f04f 0400 	mov.w	r4, #0
 800c430:	f04f 0500 	mov.w	r5, #0
 800c434:	00dd      	lsls	r5, r3, #3
 800c436:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c43a:	00d4      	lsls	r4, r2, #3
 800c43c:	4622      	mov	r2, r4
 800c43e:	462b      	mov	r3, r5
 800c440:	1814      	adds	r4, r2, r0
 800c442:	64bc      	str	r4, [r7, #72]	; 0x48
 800c444:	414b      	adcs	r3, r1
 800c446:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f04f 0100 	mov.w	r1, #0
 800c452:	f04f 0200 	mov.w	r2, #0
 800c456:	f04f 0300 	mov.w	r3, #0
 800c45a:	008b      	lsls	r3, r1, #2
 800c45c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c460:	0082      	lsls	r2, r0, #2
 800c462:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c466:	f7f4 fc0f 	bl	8000c88 <__aeabi_uldivmod>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4b2f      	ldr	r3, [pc, #188]	; (800c52c <UART_SetConfig+0x38c>)
 800c470:	fba3 1302 	umull	r1, r3, r3, r2
 800c474:	095b      	lsrs	r3, r3, #5
 800c476:	2164      	movs	r1, #100	; 0x64
 800c478:	fb01 f303 	mul.w	r3, r1, r3
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	011b      	lsls	r3, r3, #4
 800c480:	3332      	adds	r3, #50	; 0x32
 800c482:	4a2a      	ldr	r2, [pc, #168]	; (800c52c <UART_SetConfig+0x38c>)
 800c484:	fba2 2303 	umull	r2, r3, r2, r3
 800c488:	095b      	lsrs	r3, r3, #5
 800c48a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c48e:	441e      	add	r6, r3
 800c490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c492:	4618      	mov	r0, r3
 800c494:	f04f 0100 	mov.w	r1, #0
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	1894      	adds	r4, r2, r2
 800c49e:	603c      	str	r4, [r7, #0]
 800c4a0:	415b      	adcs	r3, r3
 800c4a2:	607b      	str	r3, [r7, #4]
 800c4a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4a8:	1812      	adds	r2, r2, r0
 800c4aa:	eb41 0303 	adc.w	r3, r1, r3
 800c4ae:	f04f 0400 	mov.w	r4, #0
 800c4b2:	f04f 0500 	mov.w	r5, #0
 800c4b6:	00dd      	lsls	r5, r3, #3
 800c4b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c4bc:	00d4      	lsls	r4, r2, #3
 800c4be:	4622      	mov	r2, r4
 800c4c0:	462b      	mov	r3, r5
 800c4c2:	eb12 0a00 	adds.w	sl, r2, r0
 800c4c6:	eb43 0b01 	adc.w	fp, r3, r1
 800c4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f04f 0100 	mov.w	r1, #0
 800c4d4:	f04f 0200 	mov.w	r2, #0
 800c4d8:	f04f 0300 	mov.w	r3, #0
 800c4dc:	008b      	lsls	r3, r1, #2
 800c4de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c4e2:	0082      	lsls	r2, r0, #2
 800c4e4:	4650      	mov	r0, sl
 800c4e6:	4659      	mov	r1, fp
 800c4e8:	f7f4 fbce 	bl	8000c88 <__aeabi_uldivmod>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4b0e      	ldr	r3, [pc, #56]	; (800c52c <UART_SetConfig+0x38c>)
 800c4f2:	fba3 1302 	umull	r1, r3, r3, r2
 800c4f6:	095b      	lsrs	r3, r3, #5
 800c4f8:	2164      	movs	r1, #100	; 0x64
 800c4fa:	fb01 f303 	mul.w	r3, r1, r3
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	011b      	lsls	r3, r3, #4
 800c502:	3332      	adds	r3, #50	; 0x32
 800c504:	4a09      	ldr	r2, [pc, #36]	; (800c52c <UART_SetConfig+0x38c>)
 800c506:	fba2 2303 	umull	r2, r3, r2, r3
 800c50a:	095b      	lsrs	r3, r3, #5
 800c50c:	f003 020f 	and.w	r2, r3, #15
 800c510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4432      	add	r2, r6
 800c516:	609a      	str	r2, [r3, #8]
}
 800c518:	bf00      	nop
 800c51a:	377c      	adds	r7, #124	; 0x7c
 800c51c:	46bd      	mov	sp, r7
 800c51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c522:	bf00      	nop
 800c524:	40011000 	.word	0x40011000
 800c528:	40011400 	.word	0x40011400
 800c52c:	51eb851f 	.word	0x51eb851f

0800c530 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c548:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	4b20      	ldr	r3, [pc, #128]	; (800c5d0 <FSMC_NORSRAM_Init+0xa0>)
 800c54e:	4013      	ands	r3, r2
 800c550:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c55a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c560:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c566:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c56c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800c572:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800c578:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c57e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800c584:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800c58a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800c590:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800c596:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800c59c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	2b08      	cmp	r3, #8
 800c5aa:	d103      	bne.n	800c5b4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	68f9      	ldr	r1, [r7, #12]
 800c5bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3714      	adds	r7, #20
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	fff00080 	.word	0xfff00080

0800c5d4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	1c5a      	adds	r2, r3, #1
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ee:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c5f6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c602:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c60a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c612:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	3b01      	subs	r3, #1
 800c61a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c61c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	3b02      	subs	r3, #2
 800c624:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c626:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c62c:	4313      	orrs	r3, r2
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	4313      	orrs	r3, r2
 800c632:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6979      	ldr	r1, [r7, #20]
 800c63c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	371c      	adds	r7, #28
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
	...

0800c650 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c650:	b480      	push	{r7}
 800c652:	b087      	sub	sp, #28
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
 800c65c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c668:	d122      	bne.n	800c6b0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c672:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	4b15      	ldr	r3, [pc, #84]	; (800c6cc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800c678:	4013      	ands	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c686:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c68e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800c696:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c69c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	6979      	ldr	r1, [r7, #20]
 800c6aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c6ae:	e005      	b.n	800c6bc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c6b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	371c      	adds	r7, #28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	cff00000 	.word	0xcff00000

0800c6d0 <__errno>:
 800c6d0:	4b01      	ldr	r3, [pc, #4]	; (800c6d8 <__errno+0x8>)
 800c6d2:	6818      	ldr	r0, [r3, #0]
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	200000ac 	.word	0x200000ac

0800c6dc <__libc_init_array>:
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	4d0d      	ldr	r5, [pc, #52]	; (800c714 <__libc_init_array+0x38>)
 800c6e0:	4c0d      	ldr	r4, [pc, #52]	; (800c718 <__libc_init_array+0x3c>)
 800c6e2:	1b64      	subs	r4, r4, r5
 800c6e4:	10a4      	asrs	r4, r4, #2
 800c6e6:	2600      	movs	r6, #0
 800c6e8:	42a6      	cmp	r6, r4
 800c6ea:	d109      	bne.n	800c700 <__libc_init_array+0x24>
 800c6ec:	4d0b      	ldr	r5, [pc, #44]	; (800c71c <__libc_init_array+0x40>)
 800c6ee:	4c0c      	ldr	r4, [pc, #48]	; (800c720 <__libc_init_array+0x44>)
 800c6f0:	f002 f870 	bl	800e7d4 <_init>
 800c6f4:	1b64      	subs	r4, r4, r5
 800c6f6:	10a4      	asrs	r4, r4, #2
 800c6f8:	2600      	movs	r6, #0
 800c6fa:	42a6      	cmp	r6, r4
 800c6fc:	d105      	bne.n	800c70a <__libc_init_array+0x2e>
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	f855 3b04 	ldr.w	r3, [r5], #4
 800c704:	4798      	blx	r3
 800c706:	3601      	adds	r6, #1
 800c708:	e7ee      	b.n	800c6e8 <__libc_init_array+0xc>
 800c70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c70e:	4798      	blx	r3
 800c710:	3601      	adds	r6, #1
 800c712:	e7f2      	b.n	800c6fa <__libc_init_array+0x1e>
 800c714:	080e9f20 	.word	0x080e9f20
 800c718:	080e9f20 	.word	0x080e9f20
 800c71c:	080e9f20 	.word	0x080e9f20
 800c720:	080e9f24 	.word	0x080e9f24

0800c724 <__itoa>:
 800c724:	1e93      	subs	r3, r2, #2
 800c726:	2b22      	cmp	r3, #34	; 0x22
 800c728:	b510      	push	{r4, lr}
 800c72a:	460c      	mov	r4, r1
 800c72c:	d904      	bls.n	800c738 <__itoa+0x14>
 800c72e:	2300      	movs	r3, #0
 800c730:	700b      	strb	r3, [r1, #0]
 800c732:	461c      	mov	r4, r3
 800c734:	4620      	mov	r0, r4
 800c736:	bd10      	pop	{r4, pc}
 800c738:	2a0a      	cmp	r2, #10
 800c73a:	d109      	bne.n	800c750 <__itoa+0x2c>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	da07      	bge.n	800c750 <__itoa+0x2c>
 800c740:	232d      	movs	r3, #45	; 0x2d
 800c742:	700b      	strb	r3, [r1, #0]
 800c744:	4240      	negs	r0, r0
 800c746:	2101      	movs	r1, #1
 800c748:	4421      	add	r1, r4
 800c74a:	f000 f855 	bl	800c7f8 <__utoa>
 800c74e:	e7f1      	b.n	800c734 <__itoa+0x10>
 800c750:	2100      	movs	r1, #0
 800c752:	e7f9      	b.n	800c748 <__itoa+0x24>

0800c754 <itoa>:
 800c754:	f7ff bfe6 	b.w	800c724 <__itoa>

0800c758 <memset>:
 800c758:	4402      	add	r2, r0
 800c75a:	4603      	mov	r3, r0
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d100      	bne.n	800c762 <memset+0xa>
 800c760:	4770      	bx	lr
 800c762:	f803 1b01 	strb.w	r1, [r3], #1
 800c766:	e7f9      	b.n	800c75c <memset+0x4>

0800c768 <rand>:
 800c768:	4b17      	ldr	r3, [pc, #92]	; (800c7c8 <rand+0x60>)
 800c76a:	b510      	push	{r4, lr}
 800c76c:	681c      	ldr	r4, [r3, #0]
 800c76e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c770:	b9b3      	cbnz	r3, 800c7a0 <rand+0x38>
 800c772:	2018      	movs	r0, #24
 800c774:	f000 f8b2 	bl	800c8dc <malloc>
 800c778:	63a0      	str	r0, [r4, #56]	; 0x38
 800c77a:	b928      	cbnz	r0, 800c788 <rand+0x20>
 800c77c:	4602      	mov	r2, r0
 800c77e:	4b13      	ldr	r3, [pc, #76]	; (800c7cc <rand+0x64>)
 800c780:	4813      	ldr	r0, [pc, #76]	; (800c7d0 <rand+0x68>)
 800c782:	214e      	movs	r1, #78	; 0x4e
 800c784:	f000 f87a 	bl	800c87c <__assert_func>
 800c788:	4a12      	ldr	r2, [pc, #72]	; (800c7d4 <rand+0x6c>)
 800c78a:	4b13      	ldr	r3, [pc, #76]	; (800c7d8 <rand+0x70>)
 800c78c:	e9c0 2300 	strd	r2, r3, [r0]
 800c790:	4b12      	ldr	r3, [pc, #72]	; (800c7dc <rand+0x74>)
 800c792:	6083      	str	r3, [r0, #8]
 800c794:	230b      	movs	r3, #11
 800c796:	8183      	strh	r3, [r0, #12]
 800c798:	2201      	movs	r2, #1
 800c79a:	2300      	movs	r3, #0
 800c79c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c7a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c7a2:	480f      	ldr	r0, [pc, #60]	; (800c7e0 <rand+0x78>)
 800c7a4:	690a      	ldr	r2, [r1, #16]
 800c7a6:	694b      	ldr	r3, [r1, #20]
 800c7a8:	4c0e      	ldr	r4, [pc, #56]	; (800c7e4 <rand+0x7c>)
 800c7aa:	4350      	muls	r0, r2
 800c7ac:	fb04 0003 	mla	r0, r4, r3, r0
 800c7b0:	fba2 3404 	umull	r3, r4, r2, r4
 800c7b4:	1c5a      	adds	r2, r3, #1
 800c7b6:	4404      	add	r4, r0
 800c7b8:	f144 0000 	adc.w	r0, r4, #0
 800c7bc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c7c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c7c4:	bd10      	pop	{r4, pc}
 800c7c6:	bf00      	nop
 800c7c8:	200000ac 	.word	0x200000ac
 800c7cc:	080e9d6c 	.word	0x080e9d6c
 800c7d0:	080e9d83 	.word	0x080e9d83
 800c7d4:	abcd330e 	.word	0xabcd330e
 800c7d8:	e66d1234 	.word	0xe66d1234
 800c7dc:	0005deec 	.word	0x0005deec
 800c7e0:	5851f42d 	.word	0x5851f42d
 800c7e4:	4c957f2d 	.word	0x4c957f2d

0800c7e8 <strcpy>:
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7ee:	f803 2b01 	strb.w	r2, [r3], #1
 800c7f2:	2a00      	cmp	r2, #0
 800c7f4:	d1f9      	bne.n	800c7ea <strcpy+0x2>
 800c7f6:	4770      	bx	lr

0800c7f8 <__utoa>:
 800c7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7fa:	4c1f      	ldr	r4, [pc, #124]	; (800c878 <__utoa+0x80>)
 800c7fc:	b08b      	sub	sp, #44	; 0x2c
 800c7fe:	4605      	mov	r5, r0
 800c800:	460b      	mov	r3, r1
 800c802:	466e      	mov	r6, sp
 800c804:	f104 0c20 	add.w	ip, r4, #32
 800c808:	6820      	ldr	r0, [r4, #0]
 800c80a:	6861      	ldr	r1, [r4, #4]
 800c80c:	4637      	mov	r7, r6
 800c80e:	c703      	stmia	r7!, {r0, r1}
 800c810:	3408      	adds	r4, #8
 800c812:	4564      	cmp	r4, ip
 800c814:	463e      	mov	r6, r7
 800c816:	d1f7      	bne.n	800c808 <__utoa+0x10>
 800c818:	7921      	ldrb	r1, [r4, #4]
 800c81a:	7139      	strb	r1, [r7, #4]
 800c81c:	1e91      	subs	r1, r2, #2
 800c81e:	6820      	ldr	r0, [r4, #0]
 800c820:	6038      	str	r0, [r7, #0]
 800c822:	2922      	cmp	r1, #34	; 0x22
 800c824:	f04f 0100 	mov.w	r1, #0
 800c828:	d904      	bls.n	800c834 <__utoa+0x3c>
 800c82a:	7019      	strb	r1, [r3, #0]
 800c82c:	460b      	mov	r3, r1
 800c82e:	4618      	mov	r0, r3
 800c830:	b00b      	add	sp, #44	; 0x2c
 800c832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c834:	1e58      	subs	r0, r3, #1
 800c836:	4684      	mov	ip, r0
 800c838:	fbb5 f7f2 	udiv	r7, r5, r2
 800c83c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c840:	fb02 5617 	mls	r6, r2, r7, r5
 800c844:	4476      	add	r6, lr
 800c846:	460c      	mov	r4, r1
 800c848:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c84c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c850:	462e      	mov	r6, r5
 800c852:	42b2      	cmp	r2, r6
 800c854:	f101 0101 	add.w	r1, r1, #1
 800c858:	463d      	mov	r5, r7
 800c85a:	d9ed      	bls.n	800c838 <__utoa+0x40>
 800c85c:	2200      	movs	r2, #0
 800c85e:	545a      	strb	r2, [r3, r1]
 800c860:	1919      	adds	r1, r3, r4
 800c862:	1aa5      	subs	r5, r4, r2
 800c864:	42aa      	cmp	r2, r5
 800c866:	dae2      	bge.n	800c82e <__utoa+0x36>
 800c868:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c86c:	780e      	ldrb	r6, [r1, #0]
 800c86e:	7006      	strb	r6, [r0, #0]
 800c870:	3201      	adds	r2, #1
 800c872:	f801 5901 	strb.w	r5, [r1], #-1
 800c876:	e7f4      	b.n	800c862 <__utoa+0x6a>
 800c878:	080e9de2 	.word	0x080e9de2

0800c87c <__assert_func>:
 800c87c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c87e:	4614      	mov	r4, r2
 800c880:	461a      	mov	r2, r3
 800c882:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <__assert_func+0x2c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4605      	mov	r5, r0
 800c888:	68d8      	ldr	r0, [r3, #12]
 800c88a:	b14c      	cbz	r4, 800c8a0 <__assert_func+0x24>
 800c88c:	4b07      	ldr	r3, [pc, #28]	; (800c8ac <__assert_func+0x30>)
 800c88e:	9100      	str	r1, [sp, #0]
 800c890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c894:	4906      	ldr	r1, [pc, #24]	; (800c8b0 <__assert_func+0x34>)
 800c896:	462b      	mov	r3, r5
 800c898:	f000 f80e 	bl	800c8b8 <fiprintf>
 800c89c:	f000 fc8e 	bl	800d1bc <abort>
 800c8a0:	4b04      	ldr	r3, [pc, #16]	; (800c8b4 <__assert_func+0x38>)
 800c8a2:	461c      	mov	r4, r3
 800c8a4:	e7f3      	b.n	800c88e <__assert_func+0x12>
 800c8a6:	bf00      	nop
 800c8a8:	200000ac 	.word	0x200000ac
 800c8ac:	080e9e07 	.word	0x080e9e07
 800c8b0:	080e9e14 	.word	0x080e9e14
 800c8b4:	080e9e42 	.word	0x080e9e42

0800c8b8 <fiprintf>:
 800c8b8:	b40e      	push	{r1, r2, r3}
 800c8ba:	b503      	push	{r0, r1, lr}
 800c8bc:	4601      	mov	r1, r0
 800c8be:	ab03      	add	r3, sp, #12
 800c8c0:	4805      	ldr	r0, [pc, #20]	; (800c8d8 <fiprintf+0x20>)
 800c8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8c6:	6800      	ldr	r0, [r0, #0]
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	f000 f8e3 	bl	800ca94 <_vfiprintf_r>
 800c8ce:	b002      	add	sp, #8
 800c8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8d4:	b003      	add	sp, #12
 800c8d6:	4770      	bx	lr
 800c8d8:	200000ac 	.word	0x200000ac

0800c8dc <malloc>:
 800c8dc:	4b02      	ldr	r3, [pc, #8]	; (800c8e8 <malloc+0xc>)
 800c8de:	4601      	mov	r1, r0
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	f000 b853 	b.w	800c98c <_malloc_r>
 800c8e6:	bf00      	nop
 800c8e8:	200000ac 	.word	0x200000ac

0800c8ec <_free_r>:
 800c8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8ee:	2900      	cmp	r1, #0
 800c8f0:	d048      	beq.n	800c984 <_free_r+0x98>
 800c8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8f6:	9001      	str	r0, [sp, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f1a1 0404 	sub.w	r4, r1, #4
 800c8fe:	bfb8      	it	lt
 800c900:	18e4      	addlt	r4, r4, r3
 800c902:	f000 fe81 	bl	800d608 <__malloc_lock>
 800c906:	4a20      	ldr	r2, [pc, #128]	; (800c988 <_free_r+0x9c>)
 800c908:	9801      	ldr	r0, [sp, #4]
 800c90a:	6813      	ldr	r3, [r2, #0]
 800c90c:	4615      	mov	r5, r2
 800c90e:	b933      	cbnz	r3, 800c91e <_free_r+0x32>
 800c910:	6063      	str	r3, [r4, #4]
 800c912:	6014      	str	r4, [r2, #0]
 800c914:	b003      	add	sp, #12
 800c916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c91a:	f000 be7b 	b.w	800d614 <__malloc_unlock>
 800c91e:	42a3      	cmp	r3, r4
 800c920:	d90b      	bls.n	800c93a <_free_r+0x4e>
 800c922:	6821      	ldr	r1, [r4, #0]
 800c924:	1862      	adds	r2, r4, r1
 800c926:	4293      	cmp	r3, r2
 800c928:	bf04      	itt	eq
 800c92a:	681a      	ldreq	r2, [r3, #0]
 800c92c:	685b      	ldreq	r3, [r3, #4]
 800c92e:	6063      	str	r3, [r4, #4]
 800c930:	bf04      	itt	eq
 800c932:	1852      	addeq	r2, r2, r1
 800c934:	6022      	streq	r2, [r4, #0]
 800c936:	602c      	str	r4, [r5, #0]
 800c938:	e7ec      	b.n	800c914 <_free_r+0x28>
 800c93a:	461a      	mov	r2, r3
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	b10b      	cbz	r3, 800c944 <_free_r+0x58>
 800c940:	42a3      	cmp	r3, r4
 800c942:	d9fa      	bls.n	800c93a <_free_r+0x4e>
 800c944:	6811      	ldr	r1, [r2, #0]
 800c946:	1855      	adds	r5, r2, r1
 800c948:	42a5      	cmp	r5, r4
 800c94a:	d10b      	bne.n	800c964 <_free_r+0x78>
 800c94c:	6824      	ldr	r4, [r4, #0]
 800c94e:	4421      	add	r1, r4
 800c950:	1854      	adds	r4, r2, r1
 800c952:	42a3      	cmp	r3, r4
 800c954:	6011      	str	r1, [r2, #0]
 800c956:	d1dd      	bne.n	800c914 <_free_r+0x28>
 800c958:	681c      	ldr	r4, [r3, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	6053      	str	r3, [r2, #4]
 800c95e:	4421      	add	r1, r4
 800c960:	6011      	str	r1, [r2, #0]
 800c962:	e7d7      	b.n	800c914 <_free_r+0x28>
 800c964:	d902      	bls.n	800c96c <_free_r+0x80>
 800c966:	230c      	movs	r3, #12
 800c968:	6003      	str	r3, [r0, #0]
 800c96a:	e7d3      	b.n	800c914 <_free_r+0x28>
 800c96c:	6825      	ldr	r5, [r4, #0]
 800c96e:	1961      	adds	r1, r4, r5
 800c970:	428b      	cmp	r3, r1
 800c972:	bf04      	itt	eq
 800c974:	6819      	ldreq	r1, [r3, #0]
 800c976:	685b      	ldreq	r3, [r3, #4]
 800c978:	6063      	str	r3, [r4, #4]
 800c97a:	bf04      	itt	eq
 800c97c:	1949      	addeq	r1, r1, r5
 800c97e:	6021      	streq	r1, [r4, #0]
 800c980:	6054      	str	r4, [r2, #4]
 800c982:	e7c7      	b.n	800c914 <_free_r+0x28>
 800c984:	b003      	add	sp, #12
 800c986:	bd30      	pop	{r4, r5, pc}
 800c988:	200001a0 	.word	0x200001a0

0800c98c <_malloc_r>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	1ccd      	adds	r5, r1, #3
 800c990:	f025 0503 	bic.w	r5, r5, #3
 800c994:	3508      	adds	r5, #8
 800c996:	2d0c      	cmp	r5, #12
 800c998:	bf38      	it	cc
 800c99a:	250c      	movcc	r5, #12
 800c99c:	2d00      	cmp	r5, #0
 800c99e:	4606      	mov	r6, r0
 800c9a0:	db01      	blt.n	800c9a6 <_malloc_r+0x1a>
 800c9a2:	42a9      	cmp	r1, r5
 800c9a4:	d903      	bls.n	800c9ae <_malloc_r+0x22>
 800c9a6:	230c      	movs	r3, #12
 800c9a8:	6033      	str	r3, [r6, #0]
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ae:	f000 fe2b 	bl	800d608 <__malloc_lock>
 800c9b2:	4921      	ldr	r1, [pc, #132]	; (800ca38 <_malloc_r+0xac>)
 800c9b4:	680a      	ldr	r2, [r1, #0]
 800c9b6:	4614      	mov	r4, r2
 800c9b8:	b99c      	cbnz	r4, 800c9e2 <_malloc_r+0x56>
 800c9ba:	4f20      	ldr	r7, [pc, #128]	; (800ca3c <_malloc_r+0xb0>)
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	b923      	cbnz	r3, 800c9ca <_malloc_r+0x3e>
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	f000 fb2a 	bl	800d01c <_sbrk_r>
 800c9c8:	6038      	str	r0, [r7, #0]
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f000 fb25 	bl	800d01c <_sbrk_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d123      	bne.n	800ca1e <_malloc_r+0x92>
 800c9d6:	230c      	movs	r3, #12
 800c9d8:	6033      	str	r3, [r6, #0]
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f000 fe1a 	bl	800d614 <__malloc_unlock>
 800c9e0:	e7e3      	b.n	800c9aa <_malloc_r+0x1e>
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	1b5b      	subs	r3, r3, r5
 800c9e6:	d417      	bmi.n	800ca18 <_malloc_r+0x8c>
 800c9e8:	2b0b      	cmp	r3, #11
 800c9ea:	d903      	bls.n	800c9f4 <_malloc_r+0x68>
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	441c      	add	r4, r3
 800c9f0:	6025      	str	r5, [r4, #0]
 800c9f2:	e004      	b.n	800c9fe <_malloc_r+0x72>
 800c9f4:	6863      	ldr	r3, [r4, #4]
 800c9f6:	42a2      	cmp	r2, r4
 800c9f8:	bf0c      	ite	eq
 800c9fa:	600b      	streq	r3, [r1, #0]
 800c9fc:	6053      	strne	r3, [r2, #4]
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f000 fe08 	bl	800d614 <__malloc_unlock>
 800ca04:	f104 000b 	add.w	r0, r4, #11
 800ca08:	1d23      	adds	r3, r4, #4
 800ca0a:	f020 0007 	bic.w	r0, r0, #7
 800ca0e:	1ac2      	subs	r2, r0, r3
 800ca10:	d0cc      	beq.n	800c9ac <_malloc_r+0x20>
 800ca12:	1a1b      	subs	r3, r3, r0
 800ca14:	50a3      	str	r3, [r4, r2]
 800ca16:	e7c9      	b.n	800c9ac <_malloc_r+0x20>
 800ca18:	4622      	mov	r2, r4
 800ca1a:	6864      	ldr	r4, [r4, #4]
 800ca1c:	e7cc      	b.n	800c9b8 <_malloc_r+0x2c>
 800ca1e:	1cc4      	adds	r4, r0, #3
 800ca20:	f024 0403 	bic.w	r4, r4, #3
 800ca24:	42a0      	cmp	r0, r4
 800ca26:	d0e3      	beq.n	800c9f0 <_malloc_r+0x64>
 800ca28:	1a21      	subs	r1, r4, r0
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f000 faf6 	bl	800d01c <_sbrk_r>
 800ca30:	3001      	adds	r0, #1
 800ca32:	d1dd      	bne.n	800c9f0 <_malloc_r+0x64>
 800ca34:	e7cf      	b.n	800c9d6 <_malloc_r+0x4a>
 800ca36:	bf00      	nop
 800ca38:	200001a0 	.word	0x200001a0
 800ca3c:	200001a4 	.word	0x200001a4

0800ca40 <__sfputc_r>:
 800ca40:	6893      	ldr	r3, [r2, #8]
 800ca42:	3b01      	subs	r3, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	b410      	push	{r4}
 800ca48:	6093      	str	r3, [r2, #8]
 800ca4a:	da08      	bge.n	800ca5e <__sfputc_r+0x1e>
 800ca4c:	6994      	ldr	r4, [r2, #24]
 800ca4e:	42a3      	cmp	r3, r4
 800ca50:	db01      	blt.n	800ca56 <__sfputc_r+0x16>
 800ca52:	290a      	cmp	r1, #10
 800ca54:	d103      	bne.n	800ca5e <__sfputc_r+0x1e>
 800ca56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca5a:	f000 baef 	b.w	800d03c <__swbuf_r>
 800ca5e:	6813      	ldr	r3, [r2, #0]
 800ca60:	1c58      	adds	r0, r3, #1
 800ca62:	6010      	str	r0, [r2, #0]
 800ca64:	7019      	strb	r1, [r3, #0]
 800ca66:	4608      	mov	r0, r1
 800ca68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <__sfputs_r>:
 800ca6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca70:	4606      	mov	r6, r0
 800ca72:	460f      	mov	r7, r1
 800ca74:	4614      	mov	r4, r2
 800ca76:	18d5      	adds	r5, r2, r3
 800ca78:	42ac      	cmp	r4, r5
 800ca7a:	d101      	bne.n	800ca80 <__sfputs_r+0x12>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e007      	b.n	800ca90 <__sfputs_r+0x22>
 800ca80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca84:	463a      	mov	r2, r7
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7ff ffda 	bl	800ca40 <__sfputc_r>
 800ca8c:	1c43      	adds	r3, r0, #1
 800ca8e:	d1f3      	bne.n	800ca78 <__sfputs_r+0xa>
 800ca90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca94 <_vfiprintf_r>:
 800ca94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca98:	460d      	mov	r5, r1
 800ca9a:	b09d      	sub	sp, #116	; 0x74
 800ca9c:	4614      	mov	r4, r2
 800ca9e:	4698      	mov	r8, r3
 800caa0:	4606      	mov	r6, r0
 800caa2:	b118      	cbz	r0, 800caac <_vfiprintf_r+0x18>
 800caa4:	6983      	ldr	r3, [r0, #24]
 800caa6:	b90b      	cbnz	r3, 800caac <_vfiprintf_r+0x18>
 800caa8:	f000 fcaa 	bl	800d400 <__sinit>
 800caac:	4b89      	ldr	r3, [pc, #548]	; (800ccd4 <_vfiprintf_r+0x240>)
 800caae:	429d      	cmp	r5, r3
 800cab0:	d11b      	bne.n	800caea <_vfiprintf_r+0x56>
 800cab2:	6875      	ldr	r5, [r6, #4]
 800cab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cab6:	07d9      	lsls	r1, r3, #31
 800cab8:	d405      	bmi.n	800cac6 <_vfiprintf_r+0x32>
 800caba:	89ab      	ldrh	r3, [r5, #12]
 800cabc:	059a      	lsls	r2, r3, #22
 800cabe:	d402      	bmi.n	800cac6 <_vfiprintf_r+0x32>
 800cac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cac2:	f000 fd3b 	bl	800d53c <__retarget_lock_acquire_recursive>
 800cac6:	89ab      	ldrh	r3, [r5, #12]
 800cac8:	071b      	lsls	r3, r3, #28
 800caca:	d501      	bpl.n	800cad0 <_vfiprintf_r+0x3c>
 800cacc:	692b      	ldr	r3, [r5, #16]
 800cace:	b9eb      	cbnz	r3, 800cb0c <_vfiprintf_r+0x78>
 800cad0:	4629      	mov	r1, r5
 800cad2:	4630      	mov	r0, r6
 800cad4:	f000 fb04 	bl	800d0e0 <__swsetup_r>
 800cad8:	b1c0      	cbz	r0, 800cb0c <_vfiprintf_r+0x78>
 800cada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cadc:	07dc      	lsls	r4, r3, #31
 800cade:	d50e      	bpl.n	800cafe <_vfiprintf_r+0x6a>
 800cae0:	f04f 30ff 	mov.w	r0, #4294967295
 800cae4:	b01d      	add	sp, #116	; 0x74
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	4b7b      	ldr	r3, [pc, #492]	; (800ccd8 <_vfiprintf_r+0x244>)
 800caec:	429d      	cmp	r5, r3
 800caee:	d101      	bne.n	800caf4 <_vfiprintf_r+0x60>
 800caf0:	68b5      	ldr	r5, [r6, #8]
 800caf2:	e7df      	b.n	800cab4 <_vfiprintf_r+0x20>
 800caf4:	4b79      	ldr	r3, [pc, #484]	; (800ccdc <_vfiprintf_r+0x248>)
 800caf6:	429d      	cmp	r5, r3
 800caf8:	bf08      	it	eq
 800cafa:	68f5      	ldreq	r5, [r6, #12]
 800cafc:	e7da      	b.n	800cab4 <_vfiprintf_r+0x20>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	0598      	lsls	r0, r3, #22
 800cb02:	d4ed      	bmi.n	800cae0 <_vfiprintf_r+0x4c>
 800cb04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb06:	f000 fd1a 	bl	800d53e <__retarget_lock_release_recursive>
 800cb0a:	e7e9      	b.n	800cae0 <_vfiprintf_r+0x4c>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb10:	2320      	movs	r3, #32
 800cb12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb16:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb1a:	2330      	movs	r3, #48	; 0x30
 800cb1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cce0 <_vfiprintf_r+0x24c>
 800cb20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb24:	f04f 0901 	mov.w	r9, #1
 800cb28:	4623      	mov	r3, r4
 800cb2a:	469a      	mov	sl, r3
 800cb2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb30:	b10a      	cbz	r2, 800cb36 <_vfiprintf_r+0xa2>
 800cb32:	2a25      	cmp	r2, #37	; 0x25
 800cb34:	d1f9      	bne.n	800cb2a <_vfiprintf_r+0x96>
 800cb36:	ebba 0b04 	subs.w	fp, sl, r4
 800cb3a:	d00b      	beq.n	800cb54 <_vfiprintf_r+0xc0>
 800cb3c:	465b      	mov	r3, fp
 800cb3e:	4622      	mov	r2, r4
 800cb40:	4629      	mov	r1, r5
 800cb42:	4630      	mov	r0, r6
 800cb44:	f7ff ff93 	bl	800ca6e <__sfputs_r>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	f000 80aa 	beq.w	800cca2 <_vfiprintf_r+0x20e>
 800cb4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb50:	445a      	add	r2, fp
 800cb52:	9209      	str	r2, [sp, #36]	; 0x24
 800cb54:	f89a 3000 	ldrb.w	r3, [sl]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 80a2 	beq.w	800cca2 <_vfiprintf_r+0x20e>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f04f 32ff 	mov.w	r2, #4294967295
 800cb64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb68:	f10a 0a01 	add.w	sl, sl, #1
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	9307      	str	r3, [sp, #28]
 800cb70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb74:	931a      	str	r3, [sp, #104]	; 0x68
 800cb76:	4654      	mov	r4, sl
 800cb78:	2205      	movs	r2, #5
 800cb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb7e:	4858      	ldr	r0, [pc, #352]	; (800cce0 <_vfiprintf_r+0x24c>)
 800cb80:	f7f3 fb2e 	bl	80001e0 <memchr>
 800cb84:	9a04      	ldr	r2, [sp, #16]
 800cb86:	b9d8      	cbnz	r0, 800cbc0 <_vfiprintf_r+0x12c>
 800cb88:	06d1      	lsls	r1, r2, #27
 800cb8a:	bf44      	itt	mi
 800cb8c:	2320      	movmi	r3, #32
 800cb8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb92:	0713      	lsls	r3, r2, #28
 800cb94:	bf44      	itt	mi
 800cb96:	232b      	movmi	r3, #43	; 0x2b
 800cb98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cba0:	2b2a      	cmp	r3, #42	; 0x2a
 800cba2:	d015      	beq.n	800cbd0 <_vfiprintf_r+0x13c>
 800cba4:	9a07      	ldr	r2, [sp, #28]
 800cba6:	4654      	mov	r4, sl
 800cba8:	2000      	movs	r0, #0
 800cbaa:	f04f 0c0a 	mov.w	ip, #10
 800cbae:	4621      	mov	r1, r4
 800cbb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbb4:	3b30      	subs	r3, #48	; 0x30
 800cbb6:	2b09      	cmp	r3, #9
 800cbb8:	d94e      	bls.n	800cc58 <_vfiprintf_r+0x1c4>
 800cbba:	b1b0      	cbz	r0, 800cbea <_vfiprintf_r+0x156>
 800cbbc:	9207      	str	r2, [sp, #28]
 800cbbe:	e014      	b.n	800cbea <_vfiprintf_r+0x156>
 800cbc0:	eba0 0308 	sub.w	r3, r0, r8
 800cbc4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	9304      	str	r3, [sp, #16]
 800cbcc:	46a2      	mov	sl, r4
 800cbce:	e7d2      	b.n	800cb76 <_vfiprintf_r+0xe2>
 800cbd0:	9b03      	ldr	r3, [sp, #12]
 800cbd2:	1d19      	adds	r1, r3, #4
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	9103      	str	r1, [sp, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bfbb      	ittet	lt
 800cbdc:	425b      	neglt	r3, r3
 800cbde:	f042 0202 	orrlt.w	r2, r2, #2
 800cbe2:	9307      	strge	r3, [sp, #28]
 800cbe4:	9307      	strlt	r3, [sp, #28]
 800cbe6:	bfb8      	it	lt
 800cbe8:	9204      	strlt	r2, [sp, #16]
 800cbea:	7823      	ldrb	r3, [r4, #0]
 800cbec:	2b2e      	cmp	r3, #46	; 0x2e
 800cbee:	d10c      	bne.n	800cc0a <_vfiprintf_r+0x176>
 800cbf0:	7863      	ldrb	r3, [r4, #1]
 800cbf2:	2b2a      	cmp	r3, #42	; 0x2a
 800cbf4:	d135      	bne.n	800cc62 <_vfiprintf_r+0x1ce>
 800cbf6:	9b03      	ldr	r3, [sp, #12]
 800cbf8:	1d1a      	adds	r2, r3, #4
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	9203      	str	r2, [sp, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bfb8      	it	lt
 800cc02:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc06:	3402      	adds	r4, #2
 800cc08:	9305      	str	r3, [sp, #20]
 800cc0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ccf0 <_vfiprintf_r+0x25c>
 800cc0e:	7821      	ldrb	r1, [r4, #0]
 800cc10:	2203      	movs	r2, #3
 800cc12:	4650      	mov	r0, sl
 800cc14:	f7f3 fae4 	bl	80001e0 <memchr>
 800cc18:	b140      	cbz	r0, 800cc2c <_vfiprintf_r+0x198>
 800cc1a:	2340      	movs	r3, #64	; 0x40
 800cc1c:	eba0 000a 	sub.w	r0, r0, sl
 800cc20:	fa03 f000 	lsl.w	r0, r3, r0
 800cc24:	9b04      	ldr	r3, [sp, #16]
 800cc26:	4303      	orrs	r3, r0
 800cc28:	3401      	adds	r4, #1
 800cc2a:	9304      	str	r3, [sp, #16]
 800cc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc30:	482c      	ldr	r0, [pc, #176]	; (800cce4 <_vfiprintf_r+0x250>)
 800cc32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc36:	2206      	movs	r2, #6
 800cc38:	f7f3 fad2 	bl	80001e0 <memchr>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d03f      	beq.n	800ccc0 <_vfiprintf_r+0x22c>
 800cc40:	4b29      	ldr	r3, [pc, #164]	; (800cce8 <_vfiprintf_r+0x254>)
 800cc42:	bb1b      	cbnz	r3, 800cc8c <_vfiprintf_r+0x1f8>
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	3307      	adds	r3, #7
 800cc48:	f023 0307 	bic.w	r3, r3, #7
 800cc4c:	3308      	adds	r3, #8
 800cc4e:	9303      	str	r3, [sp, #12]
 800cc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc52:	443b      	add	r3, r7
 800cc54:	9309      	str	r3, [sp, #36]	; 0x24
 800cc56:	e767      	b.n	800cb28 <_vfiprintf_r+0x94>
 800cc58:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	2001      	movs	r0, #1
 800cc60:	e7a5      	b.n	800cbae <_vfiprintf_r+0x11a>
 800cc62:	2300      	movs	r3, #0
 800cc64:	3401      	adds	r4, #1
 800cc66:	9305      	str	r3, [sp, #20]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	f04f 0c0a 	mov.w	ip, #10
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc74:	3a30      	subs	r2, #48	; 0x30
 800cc76:	2a09      	cmp	r2, #9
 800cc78:	d903      	bls.n	800cc82 <_vfiprintf_r+0x1ee>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d0c5      	beq.n	800cc0a <_vfiprintf_r+0x176>
 800cc7e:	9105      	str	r1, [sp, #20]
 800cc80:	e7c3      	b.n	800cc0a <_vfiprintf_r+0x176>
 800cc82:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc86:	4604      	mov	r4, r0
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e7f0      	b.n	800cc6e <_vfiprintf_r+0x1da>
 800cc8c:	ab03      	add	r3, sp, #12
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	462a      	mov	r2, r5
 800cc92:	4b16      	ldr	r3, [pc, #88]	; (800ccec <_vfiprintf_r+0x258>)
 800cc94:	a904      	add	r1, sp, #16
 800cc96:	4630      	mov	r0, r6
 800cc98:	f3af 8000 	nop.w
 800cc9c:	4607      	mov	r7, r0
 800cc9e:	1c78      	adds	r0, r7, #1
 800cca0:	d1d6      	bne.n	800cc50 <_vfiprintf_r+0x1bc>
 800cca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca4:	07d9      	lsls	r1, r3, #31
 800cca6:	d405      	bmi.n	800ccb4 <_vfiprintf_r+0x220>
 800cca8:	89ab      	ldrh	r3, [r5, #12]
 800ccaa:	059a      	lsls	r2, r3, #22
 800ccac:	d402      	bmi.n	800ccb4 <_vfiprintf_r+0x220>
 800ccae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccb0:	f000 fc45 	bl	800d53e <__retarget_lock_release_recursive>
 800ccb4:	89ab      	ldrh	r3, [r5, #12]
 800ccb6:	065b      	lsls	r3, r3, #25
 800ccb8:	f53f af12 	bmi.w	800cae0 <_vfiprintf_r+0x4c>
 800ccbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccbe:	e711      	b.n	800cae4 <_vfiprintf_r+0x50>
 800ccc0:	ab03      	add	r3, sp, #12
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	462a      	mov	r2, r5
 800ccc6:	4b09      	ldr	r3, [pc, #36]	; (800ccec <_vfiprintf_r+0x258>)
 800ccc8:	a904      	add	r1, sp, #16
 800ccca:	4630      	mov	r0, r6
 800cccc:	f000 f880 	bl	800cdd0 <_printf_i>
 800ccd0:	e7e4      	b.n	800cc9c <_vfiprintf_r+0x208>
 800ccd2:	bf00      	nop
 800ccd4:	080e9e98 	.word	0x080e9e98
 800ccd8:	080e9eb8 	.word	0x080e9eb8
 800ccdc:	080e9e78 	.word	0x080e9e78
 800cce0:	080e9e43 	.word	0x080e9e43
 800cce4:	080e9e4d 	.word	0x080e9e4d
 800cce8:	00000000 	.word	0x00000000
 800ccec:	0800ca6f 	.word	0x0800ca6f
 800ccf0:	080e9e49 	.word	0x080e9e49

0800ccf4 <_printf_common>:
 800ccf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf8:	4616      	mov	r6, r2
 800ccfa:	4699      	mov	r9, r3
 800ccfc:	688a      	ldr	r2, [r1, #8]
 800ccfe:	690b      	ldr	r3, [r1, #16]
 800cd00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd04:	4293      	cmp	r3, r2
 800cd06:	bfb8      	it	lt
 800cd08:	4613      	movlt	r3, r2
 800cd0a:	6033      	str	r3, [r6, #0]
 800cd0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd10:	4607      	mov	r7, r0
 800cd12:	460c      	mov	r4, r1
 800cd14:	b10a      	cbz	r2, 800cd1a <_printf_common+0x26>
 800cd16:	3301      	adds	r3, #1
 800cd18:	6033      	str	r3, [r6, #0]
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	0699      	lsls	r1, r3, #26
 800cd1e:	bf42      	ittt	mi
 800cd20:	6833      	ldrmi	r3, [r6, #0]
 800cd22:	3302      	addmi	r3, #2
 800cd24:	6033      	strmi	r3, [r6, #0]
 800cd26:	6825      	ldr	r5, [r4, #0]
 800cd28:	f015 0506 	ands.w	r5, r5, #6
 800cd2c:	d106      	bne.n	800cd3c <_printf_common+0x48>
 800cd2e:	f104 0a19 	add.w	sl, r4, #25
 800cd32:	68e3      	ldr	r3, [r4, #12]
 800cd34:	6832      	ldr	r2, [r6, #0]
 800cd36:	1a9b      	subs	r3, r3, r2
 800cd38:	42ab      	cmp	r3, r5
 800cd3a:	dc26      	bgt.n	800cd8a <_printf_common+0x96>
 800cd3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd40:	1e13      	subs	r3, r2, #0
 800cd42:	6822      	ldr	r2, [r4, #0]
 800cd44:	bf18      	it	ne
 800cd46:	2301      	movne	r3, #1
 800cd48:	0692      	lsls	r2, r2, #26
 800cd4a:	d42b      	bmi.n	800cda4 <_printf_common+0xb0>
 800cd4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd50:	4649      	mov	r1, r9
 800cd52:	4638      	mov	r0, r7
 800cd54:	47c0      	blx	r8
 800cd56:	3001      	adds	r0, #1
 800cd58:	d01e      	beq.n	800cd98 <_printf_common+0xa4>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	68e5      	ldr	r5, [r4, #12]
 800cd5e:	6832      	ldr	r2, [r6, #0]
 800cd60:	f003 0306 	and.w	r3, r3, #6
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	bf08      	it	eq
 800cd68:	1aad      	subeq	r5, r5, r2
 800cd6a:	68a3      	ldr	r3, [r4, #8]
 800cd6c:	6922      	ldr	r2, [r4, #16]
 800cd6e:	bf0c      	ite	eq
 800cd70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd74:	2500      	movne	r5, #0
 800cd76:	4293      	cmp	r3, r2
 800cd78:	bfc4      	itt	gt
 800cd7a:	1a9b      	subgt	r3, r3, r2
 800cd7c:	18ed      	addgt	r5, r5, r3
 800cd7e:	2600      	movs	r6, #0
 800cd80:	341a      	adds	r4, #26
 800cd82:	42b5      	cmp	r5, r6
 800cd84:	d11a      	bne.n	800cdbc <_printf_common+0xc8>
 800cd86:	2000      	movs	r0, #0
 800cd88:	e008      	b.n	800cd9c <_printf_common+0xa8>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	4652      	mov	r2, sl
 800cd8e:	4649      	mov	r1, r9
 800cd90:	4638      	mov	r0, r7
 800cd92:	47c0      	blx	r8
 800cd94:	3001      	adds	r0, #1
 800cd96:	d103      	bne.n	800cda0 <_printf_common+0xac>
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda0:	3501      	adds	r5, #1
 800cda2:	e7c6      	b.n	800cd32 <_printf_common+0x3e>
 800cda4:	18e1      	adds	r1, r4, r3
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	2030      	movs	r0, #48	; 0x30
 800cdaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdae:	4422      	add	r2, r4
 800cdb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdb8:	3302      	adds	r3, #2
 800cdba:	e7c7      	b.n	800cd4c <_printf_common+0x58>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	47c0      	blx	r8
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d0e6      	beq.n	800cd98 <_printf_common+0xa4>
 800cdca:	3601      	adds	r6, #1
 800cdcc:	e7d9      	b.n	800cd82 <_printf_common+0x8e>
	...

0800cdd0 <_printf_i>:
 800cdd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	4691      	mov	r9, r2
 800cdd8:	7e27      	ldrb	r7, [r4, #24]
 800cdda:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cddc:	2f78      	cmp	r7, #120	; 0x78
 800cdde:	4680      	mov	r8, r0
 800cde0:	469a      	mov	sl, r3
 800cde2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cde6:	d807      	bhi.n	800cdf8 <_printf_i+0x28>
 800cde8:	2f62      	cmp	r7, #98	; 0x62
 800cdea:	d80a      	bhi.n	800ce02 <_printf_i+0x32>
 800cdec:	2f00      	cmp	r7, #0
 800cdee:	f000 80d8 	beq.w	800cfa2 <_printf_i+0x1d2>
 800cdf2:	2f58      	cmp	r7, #88	; 0x58
 800cdf4:	f000 80a3 	beq.w	800cf3e <_printf_i+0x16e>
 800cdf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cdfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce00:	e03a      	b.n	800ce78 <_printf_i+0xa8>
 800ce02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce06:	2b15      	cmp	r3, #21
 800ce08:	d8f6      	bhi.n	800cdf8 <_printf_i+0x28>
 800ce0a:	a001      	add	r0, pc, #4	; (adr r0, 800ce10 <_printf_i+0x40>)
 800ce0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ce10:	0800ce69 	.word	0x0800ce69
 800ce14:	0800ce7d 	.word	0x0800ce7d
 800ce18:	0800cdf9 	.word	0x0800cdf9
 800ce1c:	0800cdf9 	.word	0x0800cdf9
 800ce20:	0800cdf9 	.word	0x0800cdf9
 800ce24:	0800cdf9 	.word	0x0800cdf9
 800ce28:	0800ce7d 	.word	0x0800ce7d
 800ce2c:	0800cdf9 	.word	0x0800cdf9
 800ce30:	0800cdf9 	.word	0x0800cdf9
 800ce34:	0800cdf9 	.word	0x0800cdf9
 800ce38:	0800cdf9 	.word	0x0800cdf9
 800ce3c:	0800cf89 	.word	0x0800cf89
 800ce40:	0800cead 	.word	0x0800cead
 800ce44:	0800cf6b 	.word	0x0800cf6b
 800ce48:	0800cdf9 	.word	0x0800cdf9
 800ce4c:	0800cdf9 	.word	0x0800cdf9
 800ce50:	0800cfab 	.word	0x0800cfab
 800ce54:	0800cdf9 	.word	0x0800cdf9
 800ce58:	0800cead 	.word	0x0800cead
 800ce5c:	0800cdf9 	.word	0x0800cdf9
 800ce60:	0800cdf9 	.word	0x0800cdf9
 800ce64:	0800cf73 	.word	0x0800cf73
 800ce68:	680b      	ldr	r3, [r1, #0]
 800ce6a:	1d1a      	adds	r2, r3, #4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	600a      	str	r2, [r1, #0]
 800ce70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e0a3      	b.n	800cfc4 <_printf_i+0x1f4>
 800ce7c:	6825      	ldr	r5, [r4, #0]
 800ce7e:	6808      	ldr	r0, [r1, #0]
 800ce80:	062e      	lsls	r6, r5, #24
 800ce82:	f100 0304 	add.w	r3, r0, #4
 800ce86:	d50a      	bpl.n	800ce9e <_printf_i+0xce>
 800ce88:	6805      	ldr	r5, [r0, #0]
 800ce8a:	600b      	str	r3, [r1, #0]
 800ce8c:	2d00      	cmp	r5, #0
 800ce8e:	da03      	bge.n	800ce98 <_printf_i+0xc8>
 800ce90:	232d      	movs	r3, #45	; 0x2d
 800ce92:	426d      	negs	r5, r5
 800ce94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce98:	485e      	ldr	r0, [pc, #376]	; (800d014 <_printf_i+0x244>)
 800ce9a:	230a      	movs	r3, #10
 800ce9c:	e019      	b.n	800ced2 <_printf_i+0x102>
 800ce9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cea2:	6805      	ldr	r5, [r0, #0]
 800cea4:	600b      	str	r3, [r1, #0]
 800cea6:	bf18      	it	ne
 800cea8:	b22d      	sxthne	r5, r5
 800ceaa:	e7ef      	b.n	800ce8c <_printf_i+0xbc>
 800ceac:	680b      	ldr	r3, [r1, #0]
 800ceae:	6825      	ldr	r5, [r4, #0]
 800ceb0:	1d18      	adds	r0, r3, #4
 800ceb2:	6008      	str	r0, [r1, #0]
 800ceb4:	0628      	lsls	r0, r5, #24
 800ceb6:	d501      	bpl.n	800cebc <_printf_i+0xec>
 800ceb8:	681d      	ldr	r5, [r3, #0]
 800ceba:	e002      	b.n	800cec2 <_printf_i+0xf2>
 800cebc:	0669      	lsls	r1, r5, #25
 800cebe:	d5fb      	bpl.n	800ceb8 <_printf_i+0xe8>
 800cec0:	881d      	ldrh	r5, [r3, #0]
 800cec2:	4854      	ldr	r0, [pc, #336]	; (800d014 <_printf_i+0x244>)
 800cec4:	2f6f      	cmp	r7, #111	; 0x6f
 800cec6:	bf0c      	ite	eq
 800cec8:	2308      	moveq	r3, #8
 800ceca:	230a      	movne	r3, #10
 800cecc:	2100      	movs	r1, #0
 800cece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ced2:	6866      	ldr	r6, [r4, #4]
 800ced4:	60a6      	str	r6, [r4, #8]
 800ced6:	2e00      	cmp	r6, #0
 800ced8:	bfa2      	ittt	ge
 800ceda:	6821      	ldrge	r1, [r4, #0]
 800cedc:	f021 0104 	bicge.w	r1, r1, #4
 800cee0:	6021      	strge	r1, [r4, #0]
 800cee2:	b90d      	cbnz	r5, 800cee8 <_printf_i+0x118>
 800cee4:	2e00      	cmp	r6, #0
 800cee6:	d04d      	beq.n	800cf84 <_printf_i+0x1b4>
 800cee8:	4616      	mov	r6, r2
 800ceea:	fbb5 f1f3 	udiv	r1, r5, r3
 800ceee:	fb03 5711 	mls	r7, r3, r1, r5
 800cef2:	5dc7      	ldrb	r7, [r0, r7]
 800cef4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cef8:	462f      	mov	r7, r5
 800cefa:	42bb      	cmp	r3, r7
 800cefc:	460d      	mov	r5, r1
 800cefe:	d9f4      	bls.n	800ceea <_printf_i+0x11a>
 800cf00:	2b08      	cmp	r3, #8
 800cf02:	d10b      	bne.n	800cf1c <_printf_i+0x14c>
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	07df      	lsls	r7, r3, #31
 800cf08:	d508      	bpl.n	800cf1c <_printf_i+0x14c>
 800cf0a:	6923      	ldr	r3, [r4, #16]
 800cf0c:	6861      	ldr	r1, [r4, #4]
 800cf0e:	4299      	cmp	r1, r3
 800cf10:	bfde      	ittt	le
 800cf12:	2330      	movle	r3, #48	; 0x30
 800cf14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf1c:	1b92      	subs	r2, r2, r6
 800cf1e:	6122      	str	r2, [r4, #16]
 800cf20:	f8cd a000 	str.w	sl, [sp]
 800cf24:	464b      	mov	r3, r9
 800cf26:	aa03      	add	r2, sp, #12
 800cf28:	4621      	mov	r1, r4
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	f7ff fee2 	bl	800ccf4 <_printf_common>
 800cf30:	3001      	adds	r0, #1
 800cf32:	d14c      	bne.n	800cfce <_printf_i+0x1fe>
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295
 800cf38:	b004      	add	sp, #16
 800cf3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3e:	4835      	ldr	r0, [pc, #212]	; (800d014 <_printf_i+0x244>)
 800cf40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	680e      	ldr	r6, [r1, #0]
 800cf48:	061f      	lsls	r7, r3, #24
 800cf4a:	f856 5b04 	ldr.w	r5, [r6], #4
 800cf4e:	600e      	str	r6, [r1, #0]
 800cf50:	d514      	bpl.n	800cf7c <_printf_i+0x1ac>
 800cf52:	07d9      	lsls	r1, r3, #31
 800cf54:	bf44      	itt	mi
 800cf56:	f043 0320 	orrmi.w	r3, r3, #32
 800cf5a:	6023      	strmi	r3, [r4, #0]
 800cf5c:	b91d      	cbnz	r5, 800cf66 <_printf_i+0x196>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	f023 0320 	bic.w	r3, r3, #32
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	2310      	movs	r3, #16
 800cf68:	e7b0      	b.n	800cecc <_printf_i+0xfc>
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	f043 0320 	orr.w	r3, r3, #32
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	2378      	movs	r3, #120	; 0x78
 800cf74:	4828      	ldr	r0, [pc, #160]	; (800d018 <_printf_i+0x248>)
 800cf76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf7a:	e7e3      	b.n	800cf44 <_printf_i+0x174>
 800cf7c:	065e      	lsls	r6, r3, #25
 800cf7e:	bf48      	it	mi
 800cf80:	b2ad      	uxthmi	r5, r5
 800cf82:	e7e6      	b.n	800cf52 <_printf_i+0x182>
 800cf84:	4616      	mov	r6, r2
 800cf86:	e7bb      	b.n	800cf00 <_printf_i+0x130>
 800cf88:	680b      	ldr	r3, [r1, #0]
 800cf8a:	6826      	ldr	r6, [r4, #0]
 800cf8c:	6960      	ldr	r0, [r4, #20]
 800cf8e:	1d1d      	adds	r5, r3, #4
 800cf90:	600d      	str	r5, [r1, #0]
 800cf92:	0635      	lsls	r5, r6, #24
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	d501      	bpl.n	800cf9c <_printf_i+0x1cc>
 800cf98:	6018      	str	r0, [r3, #0]
 800cf9a:	e002      	b.n	800cfa2 <_printf_i+0x1d2>
 800cf9c:	0671      	lsls	r1, r6, #25
 800cf9e:	d5fb      	bpl.n	800cf98 <_printf_i+0x1c8>
 800cfa0:	8018      	strh	r0, [r3, #0]
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	6123      	str	r3, [r4, #16]
 800cfa6:	4616      	mov	r6, r2
 800cfa8:	e7ba      	b.n	800cf20 <_printf_i+0x150>
 800cfaa:	680b      	ldr	r3, [r1, #0]
 800cfac:	1d1a      	adds	r2, r3, #4
 800cfae:	600a      	str	r2, [r1, #0]
 800cfb0:	681e      	ldr	r6, [r3, #0]
 800cfb2:	6862      	ldr	r2, [r4, #4]
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f7f3 f912 	bl	80001e0 <memchr>
 800cfbc:	b108      	cbz	r0, 800cfc2 <_printf_i+0x1f2>
 800cfbe:	1b80      	subs	r0, r0, r6
 800cfc0:	6060      	str	r0, [r4, #4]
 800cfc2:	6863      	ldr	r3, [r4, #4]
 800cfc4:	6123      	str	r3, [r4, #16]
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfcc:	e7a8      	b.n	800cf20 <_printf_i+0x150>
 800cfce:	6923      	ldr	r3, [r4, #16]
 800cfd0:	4632      	mov	r2, r6
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	47d0      	blx	sl
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d0ab      	beq.n	800cf34 <_printf_i+0x164>
 800cfdc:	6823      	ldr	r3, [r4, #0]
 800cfde:	079b      	lsls	r3, r3, #30
 800cfe0:	d413      	bmi.n	800d00a <_printf_i+0x23a>
 800cfe2:	68e0      	ldr	r0, [r4, #12]
 800cfe4:	9b03      	ldr	r3, [sp, #12]
 800cfe6:	4298      	cmp	r0, r3
 800cfe8:	bfb8      	it	lt
 800cfea:	4618      	movlt	r0, r3
 800cfec:	e7a4      	b.n	800cf38 <_printf_i+0x168>
 800cfee:	2301      	movs	r3, #1
 800cff0:	4632      	mov	r2, r6
 800cff2:	4649      	mov	r1, r9
 800cff4:	4640      	mov	r0, r8
 800cff6:	47d0      	blx	sl
 800cff8:	3001      	adds	r0, #1
 800cffa:	d09b      	beq.n	800cf34 <_printf_i+0x164>
 800cffc:	3501      	adds	r5, #1
 800cffe:	68e3      	ldr	r3, [r4, #12]
 800d000:	9903      	ldr	r1, [sp, #12]
 800d002:	1a5b      	subs	r3, r3, r1
 800d004:	42ab      	cmp	r3, r5
 800d006:	dcf2      	bgt.n	800cfee <_printf_i+0x21e>
 800d008:	e7eb      	b.n	800cfe2 <_printf_i+0x212>
 800d00a:	2500      	movs	r5, #0
 800d00c:	f104 0619 	add.w	r6, r4, #25
 800d010:	e7f5      	b.n	800cffe <_printf_i+0x22e>
 800d012:	bf00      	nop
 800d014:	080e9e54 	.word	0x080e9e54
 800d018:	080e9e65 	.word	0x080e9e65

0800d01c <_sbrk_r>:
 800d01c:	b538      	push	{r3, r4, r5, lr}
 800d01e:	4d06      	ldr	r5, [pc, #24]	; (800d038 <_sbrk_r+0x1c>)
 800d020:	2300      	movs	r3, #0
 800d022:	4604      	mov	r4, r0
 800d024:	4608      	mov	r0, r1
 800d026:	602b      	str	r3, [r5, #0]
 800d028:	f7f8 fbb6 	bl	8005798 <_sbrk>
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d102      	bne.n	800d036 <_sbrk_r+0x1a>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	b103      	cbz	r3, 800d036 <_sbrk_r+0x1a>
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	200005d8 	.word	0x200005d8

0800d03c <__swbuf_r>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	460e      	mov	r6, r1
 800d040:	4614      	mov	r4, r2
 800d042:	4605      	mov	r5, r0
 800d044:	b118      	cbz	r0, 800d04e <__swbuf_r+0x12>
 800d046:	6983      	ldr	r3, [r0, #24]
 800d048:	b90b      	cbnz	r3, 800d04e <__swbuf_r+0x12>
 800d04a:	f000 f9d9 	bl	800d400 <__sinit>
 800d04e:	4b21      	ldr	r3, [pc, #132]	; (800d0d4 <__swbuf_r+0x98>)
 800d050:	429c      	cmp	r4, r3
 800d052:	d12b      	bne.n	800d0ac <__swbuf_r+0x70>
 800d054:	686c      	ldr	r4, [r5, #4]
 800d056:	69a3      	ldr	r3, [r4, #24]
 800d058:	60a3      	str	r3, [r4, #8]
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	071a      	lsls	r2, r3, #28
 800d05e:	d52f      	bpl.n	800d0c0 <__swbuf_r+0x84>
 800d060:	6923      	ldr	r3, [r4, #16]
 800d062:	b36b      	cbz	r3, 800d0c0 <__swbuf_r+0x84>
 800d064:	6923      	ldr	r3, [r4, #16]
 800d066:	6820      	ldr	r0, [r4, #0]
 800d068:	1ac0      	subs	r0, r0, r3
 800d06a:	6963      	ldr	r3, [r4, #20]
 800d06c:	b2f6      	uxtb	r6, r6
 800d06e:	4283      	cmp	r3, r0
 800d070:	4637      	mov	r7, r6
 800d072:	dc04      	bgt.n	800d07e <__swbuf_r+0x42>
 800d074:	4621      	mov	r1, r4
 800d076:	4628      	mov	r0, r5
 800d078:	f000 f92e 	bl	800d2d8 <_fflush_r>
 800d07c:	bb30      	cbnz	r0, 800d0cc <__swbuf_r+0x90>
 800d07e:	68a3      	ldr	r3, [r4, #8]
 800d080:	3b01      	subs	r3, #1
 800d082:	60a3      	str	r3, [r4, #8]
 800d084:	6823      	ldr	r3, [r4, #0]
 800d086:	1c5a      	adds	r2, r3, #1
 800d088:	6022      	str	r2, [r4, #0]
 800d08a:	701e      	strb	r6, [r3, #0]
 800d08c:	6963      	ldr	r3, [r4, #20]
 800d08e:	3001      	adds	r0, #1
 800d090:	4283      	cmp	r3, r0
 800d092:	d004      	beq.n	800d09e <__swbuf_r+0x62>
 800d094:	89a3      	ldrh	r3, [r4, #12]
 800d096:	07db      	lsls	r3, r3, #31
 800d098:	d506      	bpl.n	800d0a8 <__swbuf_r+0x6c>
 800d09a:	2e0a      	cmp	r6, #10
 800d09c:	d104      	bne.n	800d0a8 <__swbuf_r+0x6c>
 800d09e:	4621      	mov	r1, r4
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f000 f919 	bl	800d2d8 <_fflush_r>
 800d0a6:	b988      	cbnz	r0, 800d0cc <__swbuf_r+0x90>
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <__swbuf_r+0x9c>)
 800d0ae:	429c      	cmp	r4, r3
 800d0b0:	d101      	bne.n	800d0b6 <__swbuf_r+0x7a>
 800d0b2:	68ac      	ldr	r4, [r5, #8]
 800d0b4:	e7cf      	b.n	800d056 <__swbuf_r+0x1a>
 800d0b6:	4b09      	ldr	r3, [pc, #36]	; (800d0dc <__swbuf_r+0xa0>)
 800d0b8:	429c      	cmp	r4, r3
 800d0ba:	bf08      	it	eq
 800d0bc:	68ec      	ldreq	r4, [r5, #12]
 800d0be:	e7ca      	b.n	800d056 <__swbuf_r+0x1a>
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f000 f80c 	bl	800d0e0 <__swsetup_r>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0cb      	beq.n	800d064 <__swbuf_r+0x28>
 800d0cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d0d0:	e7ea      	b.n	800d0a8 <__swbuf_r+0x6c>
 800d0d2:	bf00      	nop
 800d0d4:	080e9e98 	.word	0x080e9e98
 800d0d8:	080e9eb8 	.word	0x080e9eb8
 800d0dc:	080e9e78 	.word	0x080e9e78

0800d0e0 <__swsetup_r>:
 800d0e0:	4b32      	ldr	r3, [pc, #200]	; (800d1ac <__swsetup_r+0xcc>)
 800d0e2:	b570      	push	{r4, r5, r6, lr}
 800d0e4:	681d      	ldr	r5, [r3, #0]
 800d0e6:	4606      	mov	r6, r0
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	b125      	cbz	r5, 800d0f6 <__swsetup_r+0x16>
 800d0ec:	69ab      	ldr	r3, [r5, #24]
 800d0ee:	b913      	cbnz	r3, 800d0f6 <__swsetup_r+0x16>
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	f000 f985 	bl	800d400 <__sinit>
 800d0f6:	4b2e      	ldr	r3, [pc, #184]	; (800d1b0 <__swsetup_r+0xd0>)
 800d0f8:	429c      	cmp	r4, r3
 800d0fa:	d10f      	bne.n	800d11c <__swsetup_r+0x3c>
 800d0fc:	686c      	ldr	r4, [r5, #4]
 800d0fe:	89a3      	ldrh	r3, [r4, #12]
 800d100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d104:	0719      	lsls	r1, r3, #28
 800d106:	d42c      	bmi.n	800d162 <__swsetup_r+0x82>
 800d108:	06dd      	lsls	r5, r3, #27
 800d10a:	d411      	bmi.n	800d130 <__swsetup_r+0x50>
 800d10c:	2309      	movs	r3, #9
 800d10e:	6033      	str	r3, [r6, #0]
 800d110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d114:	81a3      	strh	r3, [r4, #12]
 800d116:	f04f 30ff 	mov.w	r0, #4294967295
 800d11a:	e03e      	b.n	800d19a <__swsetup_r+0xba>
 800d11c:	4b25      	ldr	r3, [pc, #148]	; (800d1b4 <__swsetup_r+0xd4>)
 800d11e:	429c      	cmp	r4, r3
 800d120:	d101      	bne.n	800d126 <__swsetup_r+0x46>
 800d122:	68ac      	ldr	r4, [r5, #8]
 800d124:	e7eb      	b.n	800d0fe <__swsetup_r+0x1e>
 800d126:	4b24      	ldr	r3, [pc, #144]	; (800d1b8 <__swsetup_r+0xd8>)
 800d128:	429c      	cmp	r4, r3
 800d12a:	bf08      	it	eq
 800d12c:	68ec      	ldreq	r4, [r5, #12]
 800d12e:	e7e6      	b.n	800d0fe <__swsetup_r+0x1e>
 800d130:	0758      	lsls	r0, r3, #29
 800d132:	d512      	bpl.n	800d15a <__swsetup_r+0x7a>
 800d134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d136:	b141      	cbz	r1, 800d14a <__swsetup_r+0x6a>
 800d138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d13c:	4299      	cmp	r1, r3
 800d13e:	d002      	beq.n	800d146 <__swsetup_r+0x66>
 800d140:	4630      	mov	r0, r6
 800d142:	f7ff fbd3 	bl	800c8ec <_free_r>
 800d146:	2300      	movs	r3, #0
 800d148:	6363      	str	r3, [r4, #52]	; 0x34
 800d14a:	89a3      	ldrh	r3, [r4, #12]
 800d14c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d150:	81a3      	strh	r3, [r4, #12]
 800d152:	2300      	movs	r3, #0
 800d154:	6063      	str	r3, [r4, #4]
 800d156:	6923      	ldr	r3, [r4, #16]
 800d158:	6023      	str	r3, [r4, #0]
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	f043 0308 	orr.w	r3, r3, #8
 800d160:	81a3      	strh	r3, [r4, #12]
 800d162:	6923      	ldr	r3, [r4, #16]
 800d164:	b94b      	cbnz	r3, 800d17a <__swsetup_r+0x9a>
 800d166:	89a3      	ldrh	r3, [r4, #12]
 800d168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d16c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d170:	d003      	beq.n	800d17a <__swsetup_r+0x9a>
 800d172:	4621      	mov	r1, r4
 800d174:	4630      	mov	r0, r6
 800d176:	f000 fa07 	bl	800d588 <__smakebuf_r>
 800d17a:	89a0      	ldrh	r0, [r4, #12]
 800d17c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d180:	f010 0301 	ands.w	r3, r0, #1
 800d184:	d00a      	beq.n	800d19c <__swsetup_r+0xbc>
 800d186:	2300      	movs	r3, #0
 800d188:	60a3      	str	r3, [r4, #8]
 800d18a:	6963      	ldr	r3, [r4, #20]
 800d18c:	425b      	negs	r3, r3
 800d18e:	61a3      	str	r3, [r4, #24]
 800d190:	6923      	ldr	r3, [r4, #16]
 800d192:	b943      	cbnz	r3, 800d1a6 <__swsetup_r+0xc6>
 800d194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d198:	d1ba      	bne.n	800d110 <__swsetup_r+0x30>
 800d19a:	bd70      	pop	{r4, r5, r6, pc}
 800d19c:	0781      	lsls	r1, r0, #30
 800d19e:	bf58      	it	pl
 800d1a0:	6963      	ldrpl	r3, [r4, #20]
 800d1a2:	60a3      	str	r3, [r4, #8]
 800d1a4:	e7f4      	b.n	800d190 <__swsetup_r+0xb0>
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e7f7      	b.n	800d19a <__swsetup_r+0xba>
 800d1aa:	bf00      	nop
 800d1ac:	200000ac 	.word	0x200000ac
 800d1b0:	080e9e98 	.word	0x080e9e98
 800d1b4:	080e9eb8 	.word	0x080e9eb8
 800d1b8:	080e9e78 	.word	0x080e9e78

0800d1bc <abort>:
 800d1bc:	b508      	push	{r3, lr}
 800d1be:	2006      	movs	r0, #6
 800d1c0:	f000 fa56 	bl	800d670 <raise>
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	f7f8 fa6f 	bl	80056a8 <_exit>
	...

0800d1cc <__sflush_r>:
 800d1cc:	898a      	ldrh	r2, [r1, #12]
 800d1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	0710      	lsls	r0, r2, #28
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	d458      	bmi.n	800d28c <__sflush_r+0xc0>
 800d1da:	684b      	ldr	r3, [r1, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	dc05      	bgt.n	800d1ec <__sflush_r+0x20>
 800d1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	dc02      	bgt.n	800d1ec <__sflush_r+0x20>
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1ee:	2e00      	cmp	r6, #0
 800d1f0:	d0f9      	beq.n	800d1e6 <__sflush_r+0x1a>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1f8:	682f      	ldr	r7, [r5, #0]
 800d1fa:	602b      	str	r3, [r5, #0]
 800d1fc:	d032      	beq.n	800d264 <__sflush_r+0x98>
 800d1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d200:	89a3      	ldrh	r3, [r4, #12]
 800d202:	075a      	lsls	r2, r3, #29
 800d204:	d505      	bpl.n	800d212 <__sflush_r+0x46>
 800d206:	6863      	ldr	r3, [r4, #4]
 800d208:	1ac0      	subs	r0, r0, r3
 800d20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d20c:	b10b      	cbz	r3, 800d212 <__sflush_r+0x46>
 800d20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d210:	1ac0      	subs	r0, r0, r3
 800d212:	2300      	movs	r3, #0
 800d214:	4602      	mov	r2, r0
 800d216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d218:	6a21      	ldr	r1, [r4, #32]
 800d21a:	4628      	mov	r0, r5
 800d21c:	47b0      	blx	r6
 800d21e:	1c43      	adds	r3, r0, #1
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	d106      	bne.n	800d232 <__sflush_r+0x66>
 800d224:	6829      	ldr	r1, [r5, #0]
 800d226:	291d      	cmp	r1, #29
 800d228:	d82c      	bhi.n	800d284 <__sflush_r+0xb8>
 800d22a:	4a2a      	ldr	r2, [pc, #168]	; (800d2d4 <__sflush_r+0x108>)
 800d22c:	40ca      	lsrs	r2, r1
 800d22e:	07d6      	lsls	r6, r2, #31
 800d230:	d528      	bpl.n	800d284 <__sflush_r+0xb8>
 800d232:	2200      	movs	r2, #0
 800d234:	6062      	str	r2, [r4, #4]
 800d236:	04d9      	lsls	r1, r3, #19
 800d238:	6922      	ldr	r2, [r4, #16]
 800d23a:	6022      	str	r2, [r4, #0]
 800d23c:	d504      	bpl.n	800d248 <__sflush_r+0x7c>
 800d23e:	1c42      	adds	r2, r0, #1
 800d240:	d101      	bne.n	800d246 <__sflush_r+0x7a>
 800d242:	682b      	ldr	r3, [r5, #0]
 800d244:	b903      	cbnz	r3, 800d248 <__sflush_r+0x7c>
 800d246:	6560      	str	r0, [r4, #84]	; 0x54
 800d248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d24a:	602f      	str	r7, [r5, #0]
 800d24c:	2900      	cmp	r1, #0
 800d24e:	d0ca      	beq.n	800d1e6 <__sflush_r+0x1a>
 800d250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d254:	4299      	cmp	r1, r3
 800d256:	d002      	beq.n	800d25e <__sflush_r+0x92>
 800d258:	4628      	mov	r0, r5
 800d25a:	f7ff fb47 	bl	800c8ec <_free_r>
 800d25e:	2000      	movs	r0, #0
 800d260:	6360      	str	r0, [r4, #52]	; 0x34
 800d262:	e7c1      	b.n	800d1e8 <__sflush_r+0x1c>
 800d264:	6a21      	ldr	r1, [r4, #32]
 800d266:	2301      	movs	r3, #1
 800d268:	4628      	mov	r0, r5
 800d26a:	47b0      	blx	r6
 800d26c:	1c41      	adds	r1, r0, #1
 800d26e:	d1c7      	bne.n	800d200 <__sflush_r+0x34>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d0c4      	beq.n	800d200 <__sflush_r+0x34>
 800d276:	2b1d      	cmp	r3, #29
 800d278:	d001      	beq.n	800d27e <__sflush_r+0xb2>
 800d27a:	2b16      	cmp	r3, #22
 800d27c:	d101      	bne.n	800d282 <__sflush_r+0xb6>
 800d27e:	602f      	str	r7, [r5, #0]
 800d280:	e7b1      	b.n	800d1e6 <__sflush_r+0x1a>
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d288:	81a3      	strh	r3, [r4, #12]
 800d28a:	e7ad      	b.n	800d1e8 <__sflush_r+0x1c>
 800d28c:	690f      	ldr	r7, [r1, #16]
 800d28e:	2f00      	cmp	r7, #0
 800d290:	d0a9      	beq.n	800d1e6 <__sflush_r+0x1a>
 800d292:	0793      	lsls	r3, r2, #30
 800d294:	680e      	ldr	r6, [r1, #0]
 800d296:	bf08      	it	eq
 800d298:	694b      	ldreq	r3, [r1, #20]
 800d29a:	600f      	str	r7, [r1, #0]
 800d29c:	bf18      	it	ne
 800d29e:	2300      	movne	r3, #0
 800d2a0:	eba6 0807 	sub.w	r8, r6, r7
 800d2a4:	608b      	str	r3, [r1, #8]
 800d2a6:	f1b8 0f00 	cmp.w	r8, #0
 800d2aa:	dd9c      	ble.n	800d1e6 <__sflush_r+0x1a>
 800d2ac:	6a21      	ldr	r1, [r4, #32]
 800d2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2b0:	4643      	mov	r3, r8
 800d2b2:	463a      	mov	r2, r7
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	47b0      	blx	r6
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	dc06      	bgt.n	800d2ca <__sflush_r+0xfe>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c2:	81a3      	strh	r3, [r4, #12]
 800d2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c8:	e78e      	b.n	800d1e8 <__sflush_r+0x1c>
 800d2ca:	4407      	add	r7, r0
 800d2cc:	eba8 0800 	sub.w	r8, r8, r0
 800d2d0:	e7e9      	b.n	800d2a6 <__sflush_r+0xda>
 800d2d2:	bf00      	nop
 800d2d4:	20400001 	.word	0x20400001

0800d2d8 <_fflush_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	690b      	ldr	r3, [r1, #16]
 800d2dc:	4605      	mov	r5, r0
 800d2de:	460c      	mov	r4, r1
 800d2e0:	b913      	cbnz	r3, 800d2e8 <_fflush_r+0x10>
 800d2e2:	2500      	movs	r5, #0
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	b118      	cbz	r0, 800d2f2 <_fflush_r+0x1a>
 800d2ea:	6983      	ldr	r3, [r0, #24]
 800d2ec:	b90b      	cbnz	r3, 800d2f2 <_fflush_r+0x1a>
 800d2ee:	f000 f887 	bl	800d400 <__sinit>
 800d2f2:	4b14      	ldr	r3, [pc, #80]	; (800d344 <_fflush_r+0x6c>)
 800d2f4:	429c      	cmp	r4, r3
 800d2f6:	d11b      	bne.n	800d330 <_fflush_r+0x58>
 800d2f8:	686c      	ldr	r4, [r5, #4]
 800d2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d0ef      	beq.n	800d2e2 <_fflush_r+0xa>
 800d302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d304:	07d0      	lsls	r0, r2, #31
 800d306:	d404      	bmi.n	800d312 <_fflush_r+0x3a>
 800d308:	0599      	lsls	r1, r3, #22
 800d30a:	d402      	bmi.n	800d312 <_fflush_r+0x3a>
 800d30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d30e:	f000 f915 	bl	800d53c <__retarget_lock_acquire_recursive>
 800d312:	4628      	mov	r0, r5
 800d314:	4621      	mov	r1, r4
 800d316:	f7ff ff59 	bl	800d1cc <__sflush_r>
 800d31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d31c:	07da      	lsls	r2, r3, #31
 800d31e:	4605      	mov	r5, r0
 800d320:	d4e0      	bmi.n	800d2e4 <_fflush_r+0xc>
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	059b      	lsls	r3, r3, #22
 800d326:	d4dd      	bmi.n	800d2e4 <_fflush_r+0xc>
 800d328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d32a:	f000 f908 	bl	800d53e <__retarget_lock_release_recursive>
 800d32e:	e7d9      	b.n	800d2e4 <_fflush_r+0xc>
 800d330:	4b05      	ldr	r3, [pc, #20]	; (800d348 <_fflush_r+0x70>)
 800d332:	429c      	cmp	r4, r3
 800d334:	d101      	bne.n	800d33a <_fflush_r+0x62>
 800d336:	68ac      	ldr	r4, [r5, #8]
 800d338:	e7df      	b.n	800d2fa <_fflush_r+0x22>
 800d33a:	4b04      	ldr	r3, [pc, #16]	; (800d34c <_fflush_r+0x74>)
 800d33c:	429c      	cmp	r4, r3
 800d33e:	bf08      	it	eq
 800d340:	68ec      	ldreq	r4, [r5, #12]
 800d342:	e7da      	b.n	800d2fa <_fflush_r+0x22>
 800d344:	080e9e98 	.word	0x080e9e98
 800d348:	080e9eb8 	.word	0x080e9eb8
 800d34c:	080e9e78 	.word	0x080e9e78

0800d350 <std>:
 800d350:	2300      	movs	r3, #0
 800d352:	b510      	push	{r4, lr}
 800d354:	4604      	mov	r4, r0
 800d356:	e9c0 3300 	strd	r3, r3, [r0]
 800d35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d35e:	6083      	str	r3, [r0, #8]
 800d360:	8181      	strh	r1, [r0, #12]
 800d362:	6643      	str	r3, [r0, #100]	; 0x64
 800d364:	81c2      	strh	r2, [r0, #14]
 800d366:	6183      	str	r3, [r0, #24]
 800d368:	4619      	mov	r1, r3
 800d36a:	2208      	movs	r2, #8
 800d36c:	305c      	adds	r0, #92	; 0x5c
 800d36e:	f7ff f9f3 	bl	800c758 <memset>
 800d372:	4b05      	ldr	r3, [pc, #20]	; (800d388 <std+0x38>)
 800d374:	6263      	str	r3, [r4, #36]	; 0x24
 800d376:	4b05      	ldr	r3, [pc, #20]	; (800d38c <std+0x3c>)
 800d378:	62a3      	str	r3, [r4, #40]	; 0x28
 800d37a:	4b05      	ldr	r3, [pc, #20]	; (800d390 <std+0x40>)
 800d37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d37e:	4b05      	ldr	r3, [pc, #20]	; (800d394 <std+0x44>)
 800d380:	6224      	str	r4, [r4, #32]
 800d382:	6323      	str	r3, [r4, #48]	; 0x30
 800d384:	bd10      	pop	{r4, pc}
 800d386:	bf00      	nop
 800d388:	0800d6a9 	.word	0x0800d6a9
 800d38c:	0800d6cb 	.word	0x0800d6cb
 800d390:	0800d703 	.word	0x0800d703
 800d394:	0800d727 	.word	0x0800d727

0800d398 <_cleanup_r>:
 800d398:	4901      	ldr	r1, [pc, #4]	; (800d3a0 <_cleanup_r+0x8>)
 800d39a:	f000 b8af 	b.w	800d4fc <_fwalk_reent>
 800d39e:	bf00      	nop
 800d3a0:	0800d2d9 	.word	0x0800d2d9

0800d3a4 <__sfmoreglue>:
 800d3a4:	b570      	push	{r4, r5, r6, lr}
 800d3a6:	1e4a      	subs	r2, r1, #1
 800d3a8:	2568      	movs	r5, #104	; 0x68
 800d3aa:	4355      	muls	r5, r2
 800d3ac:	460e      	mov	r6, r1
 800d3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d3b2:	f7ff faeb 	bl	800c98c <_malloc_r>
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	b140      	cbz	r0, 800d3cc <__sfmoreglue+0x28>
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d3c0:	300c      	adds	r0, #12
 800d3c2:	60a0      	str	r0, [r4, #8]
 800d3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3c8:	f7ff f9c6 	bl	800c758 <memset>
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}

0800d3d0 <__sfp_lock_acquire>:
 800d3d0:	4801      	ldr	r0, [pc, #4]	; (800d3d8 <__sfp_lock_acquire+0x8>)
 800d3d2:	f000 b8b3 	b.w	800d53c <__retarget_lock_acquire_recursive>
 800d3d6:	bf00      	nop
 800d3d8:	200005d4 	.word	0x200005d4

0800d3dc <__sfp_lock_release>:
 800d3dc:	4801      	ldr	r0, [pc, #4]	; (800d3e4 <__sfp_lock_release+0x8>)
 800d3de:	f000 b8ae 	b.w	800d53e <__retarget_lock_release_recursive>
 800d3e2:	bf00      	nop
 800d3e4:	200005d4 	.word	0x200005d4

0800d3e8 <__sinit_lock_acquire>:
 800d3e8:	4801      	ldr	r0, [pc, #4]	; (800d3f0 <__sinit_lock_acquire+0x8>)
 800d3ea:	f000 b8a7 	b.w	800d53c <__retarget_lock_acquire_recursive>
 800d3ee:	bf00      	nop
 800d3f0:	200005cf 	.word	0x200005cf

0800d3f4 <__sinit_lock_release>:
 800d3f4:	4801      	ldr	r0, [pc, #4]	; (800d3fc <__sinit_lock_release+0x8>)
 800d3f6:	f000 b8a2 	b.w	800d53e <__retarget_lock_release_recursive>
 800d3fa:	bf00      	nop
 800d3fc:	200005cf 	.word	0x200005cf

0800d400 <__sinit>:
 800d400:	b510      	push	{r4, lr}
 800d402:	4604      	mov	r4, r0
 800d404:	f7ff fff0 	bl	800d3e8 <__sinit_lock_acquire>
 800d408:	69a3      	ldr	r3, [r4, #24]
 800d40a:	b11b      	cbz	r3, 800d414 <__sinit+0x14>
 800d40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d410:	f7ff bff0 	b.w	800d3f4 <__sinit_lock_release>
 800d414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d418:	6523      	str	r3, [r4, #80]	; 0x50
 800d41a:	4b13      	ldr	r3, [pc, #76]	; (800d468 <__sinit+0x68>)
 800d41c:	4a13      	ldr	r2, [pc, #76]	; (800d46c <__sinit+0x6c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	62a2      	str	r2, [r4, #40]	; 0x28
 800d422:	42a3      	cmp	r3, r4
 800d424:	bf04      	itt	eq
 800d426:	2301      	moveq	r3, #1
 800d428:	61a3      	streq	r3, [r4, #24]
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 f820 	bl	800d470 <__sfp>
 800d430:	6060      	str	r0, [r4, #4]
 800d432:	4620      	mov	r0, r4
 800d434:	f000 f81c 	bl	800d470 <__sfp>
 800d438:	60a0      	str	r0, [r4, #8]
 800d43a:	4620      	mov	r0, r4
 800d43c:	f000 f818 	bl	800d470 <__sfp>
 800d440:	2200      	movs	r2, #0
 800d442:	60e0      	str	r0, [r4, #12]
 800d444:	2104      	movs	r1, #4
 800d446:	6860      	ldr	r0, [r4, #4]
 800d448:	f7ff ff82 	bl	800d350 <std>
 800d44c:	68a0      	ldr	r0, [r4, #8]
 800d44e:	2201      	movs	r2, #1
 800d450:	2109      	movs	r1, #9
 800d452:	f7ff ff7d 	bl	800d350 <std>
 800d456:	68e0      	ldr	r0, [r4, #12]
 800d458:	2202      	movs	r2, #2
 800d45a:	2112      	movs	r1, #18
 800d45c:	f7ff ff78 	bl	800d350 <std>
 800d460:	2301      	movs	r3, #1
 800d462:	61a3      	str	r3, [r4, #24]
 800d464:	e7d2      	b.n	800d40c <__sinit+0xc>
 800d466:	bf00      	nop
 800d468:	080e9d68 	.word	0x080e9d68
 800d46c:	0800d399 	.word	0x0800d399

0800d470 <__sfp>:
 800d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d472:	4607      	mov	r7, r0
 800d474:	f7ff ffac 	bl	800d3d0 <__sfp_lock_acquire>
 800d478:	4b1e      	ldr	r3, [pc, #120]	; (800d4f4 <__sfp+0x84>)
 800d47a:	681e      	ldr	r6, [r3, #0]
 800d47c:	69b3      	ldr	r3, [r6, #24]
 800d47e:	b913      	cbnz	r3, 800d486 <__sfp+0x16>
 800d480:	4630      	mov	r0, r6
 800d482:	f7ff ffbd 	bl	800d400 <__sinit>
 800d486:	3648      	adds	r6, #72	; 0x48
 800d488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d48c:	3b01      	subs	r3, #1
 800d48e:	d503      	bpl.n	800d498 <__sfp+0x28>
 800d490:	6833      	ldr	r3, [r6, #0]
 800d492:	b30b      	cbz	r3, 800d4d8 <__sfp+0x68>
 800d494:	6836      	ldr	r6, [r6, #0]
 800d496:	e7f7      	b.n	800d488 <__sfp+0x18>
 800d498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d49c:	b9d5      	cbnz	r5, 800d4d4 <__sfp+0x64>
 800d49e:	4b16      	ldr	r3, [pc, #88]	; (800d4f8 <__sfp+0x88>)
 800d4a0:	60e3      	str	r3, [r4, #12]
 800d4a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800d4a8:	f000 f847 	bl	800d53a <__retarget_lock_init_recursive>
 800d4ac:	f7ff ff96 	bl	800d3dc <__sfp_lock_release>
 800d4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4b8:	6025      	str	r5, [r4, #0]
 800d4ba:	61a5      	str	r5, [r4, #24]
 800d4bc:	2208      	movs	r2, #8
 800d4be:	4629      	mov	r1, r5
 800d4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4c4:	f7ff f948 	bl	800c758 <memset>
 800d4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4d4:	3468      	adds	r4, #104	; 0x68
 800d4d6:	e7d9      	b.n	800d48c <__sfp+0x1c>
 800d4d8:	2104      	movs	r1, #4
 800d4da:	4638      	mov	r0, r7
 800d4dc:	f7ff ff62 	bl	800d3a4 <__sfmoreglue>
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	6030      	str	r0, [r6, #0]
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d1d5      	bne.n	800d494 <__sfp+0x24>
 800d4e8:	f7ff ff78 	bl	800d3dc <__sfp_lock_release>
 800d4ec:	230c      	movs	r3, #12
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	e7ee      	b.n	800d4d0 <__sfp+0x60>
 800d4f2:	bf00      	nop
 800d4f4:	080e9d68 	.word	0x080e9d68
 800d4f8:	ffff0001 	.word	0xffff0001

0800d4fc <_fwalk_reent>:
 800d4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d500:	4606      	mov	r6, r0
 800d502:	4688      	mov	r8, r1
 800d504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d508:	2700      	movs	r7, #0
 800d50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d50e:	f1b9 0901 	subs.w	r9, r9, #1
 800d512:	d505      	bpl.n	800d520 <_fwalk_reent+0x24>
 800d514:	6824      	ldr	r4, [r4, #0]
 800d516:	2c00      	cmp	r4, #0
 800d518:	d1f7      	bne.n	800d50a <_fwalk_reent+0xe>
 800d51a:	4638      	mov	r0, r7
 800d51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d520:	89ab      	ldrh	r3, [r5, #12]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d907      	bls.n	800d536 <_fwalk_reent+0x3a>
 800d526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d52a:	3301      	adds	r3, #1
 800d52c:	d003      	beq.n	800d536 <_fwalk_reent+0x3a>
 800d52e:	4629      	mov	r1, r5
 800d530:	4630      	mov	r0, r6
 800d532:	47c0      	blx	r8
 800d534:	4307      	orrs	r7, r0
 800d536:	3568      	adds	r5, #104	; 0x68
 800d538:	e7e9      	b.n	800d50e <_fwalk_reent+0x12>

0800d53a <__retarget_lock_init_recursive>:
 800d53a:	4770      	bx	lr

0800d53c <__retarget_lock_acquire_recursive>:
 800d53c:	4770      	bx	lr

0800d53e <__retarget_lock_release_recursive>:
 800d53e:	4770      	bx	lr

0800d540 <__swhatbuf_r>:
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	460e      	mov	r6, r1
 800d544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d548:	2900      	cmp	r1, #0
 800d54a:	b096      	sub	sp, #88	; 0x58
 800d54c:	4614      	mov	r4, r2
 800d54e:	461d      	mov	r5, r3
 800d550:	da07      	bge.n	800d562 <__swhatbuf_r+0x22>
 800d552:	2300      	movs	r3, #0
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	89b3      	ldrh	r3, [r6, #12]
 800d558:	061a      	lsls	r2, r3, #24
 800d55a:	d410      	bmi.n	800d57e <__swhatbuf_r+0x3e>
 800d55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d560:	e00e      	b.n	800d580 <__swhatbuf_r+0x40>
 800d562:	466a      	mov	r2, sp
 800d564:	f000 f906 	bl	800d774 <_fstat_r>
 800d568:	2800      	cmp	r0, #0
 800d56a:	dbf2      	blt.n	800d552 <__swhatbuf_r+0x12>
 800d56c:	9a01      	ldr	r2, [sp, #4]
 800d56e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d572:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d576:	425a      	negs	r2, r3
 800d578:	415a      	adcs	r2, r3
 800d57a:	602a      	str	r2, [r5, #0]
 800d57c:	e7ee      	b.n	800d55c <__swhatbuf_r+0x1c>
 800d57e:	2340      	movs	r3, #64	; 0x40
 800d580:	2000      	movs	r0, #0
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	b016      	add	sp, #88	; 0x58
 800d586:	bd70      	pop	{r4, r5, r6, pc}

0800d588 <__smakebuf_r>:
 800d588:	898b      	ldrh	r3, [r1, #12]
 800d58a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d58c:	079d      	lsls	r5, r3, #30
 800d58e:	4606      	mov	r6, r0
 800d590:	460c      	mov	r4, r1
 800d592:	d507      	bpl.n	800d5a4 <__smakebuf_r+0x1c>
 800d594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	6123      	str	r3, [r4, #16]
 800d59c:	2301      	movs	r3, #1
 800d59e:	6163      	str	r3, [r4, #20]
 800d5a0:	b002      	add	sp, #8
 800d5a2:	bd70      	pop	{r4, r5, r6, pc}
 800d5a4:	ab01      	add	r3, sp, #4
 800d5a6:	466a      	mov	r2, sp
 800d5a8:	f7ff ffca 	bl	800d540 <__swhatbuf_r>
 800d5ac:	9900      	ldr	r1, [sp, #0]
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	f7ff f9eb 	bl	800c98c <_malloc_r>
 800d5b6:	b948      	cbnz	r0, 800d5cc <__smakebuf_r+0x44>
 800d5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5bc:	059a      	lsls	r2, r3, #22
 800d5be:	d4ef      	bmi.n	800d5a0 <__smakebuf_r+0x18>
 800d5c0:	f023 0303 	bic.w	r3, r3, #3
 800d5c4:	f043 0302 	orr.w	r3, r3, #2
 800d5c8:	81a3      	strh	r3, [r4, #12]
 800d5ca:	e7e3      	b.n	800d594 <__smakebuf_r+0xc>
 800d5cc:	4b0d      	ldr	r3, [pc, #52]	; (800d604 <__smakebuf_r+0x7c>)
 800d5ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	6020      	str	r0, [r4, #0]
 800d5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	9b00      	ldr	r3, [sp, #0]
 800d5dc:	6163      	str	r3, [r4, #20]
 800d5de:	9b01      	ldr	r3, [sp, #4]
 800d5e0:	6120      	str	r0, [r4, #16]
 800d5e2:	b15b      	cbz	r3, 800d5fc <__smakebuf_r+0x74>
 800d5e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f000 f8d5 	bl	800d798 <_isatty_r>
 800d5ee:	b128      	cbz	r0, 800d5fc <__smakebuf_r+0x74>
 800d5f0:	89a3      	ldrh	r3, [r4, #12]
 800d5f2:	f023 0303 	bic.w	r3, r3, #3
 800d5f6:	f043 0301 	orr.w	r3, r3, #1
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	89a0      	ldrh	r0, [r4, #12]
 800d5fe:	4305      	orrs	r5, r0
 800d600:	81a5      	strh	r5, [r4, #12]
 800d602:	e7cd      	b.n	800d5a0 <__smakebuf_r+0x18>
 800d604:	0800d399 	.word	0x0800d399

0800d608 <__malloc_lock>:
 800d608:	4801      	ldr	r0, [pc, #4]	; (800d610 <__malloc_lock+0x8>)
 800d60a:	f7ff bf97 	b.w	800d53c <__retarget_lock_acquire_recursive>
 800d60e:	bf00      	nop
 800d610:	200005d0 	.word	0x200005d0

0800d614 <__malloc_unlock>:
 800d614:	4801      	ldr	r0, [pc, #4]	; (800d61c <__malloc_unlock+0x8>)
 800d616:	f7ff bf92 	b.w	800d53e <__retarget_lock_release_recursive>
 800d61a:	bf00      	nop
 800d61c:	200005d0 	.word	0x200005d0

0800d620 <_raise_r>:
 800d620:	291f      	cmp	r1, #31
 800d622:	b538      	push	{r3, r4, r5, lr}
 800d624:	4604      	mov	r4, r0
 800d626:	460d      	mov	r5, r1
 800d628:	d904      	bls.n	800d634 <_raise_r+0x14>
 800d62a:	2316      	movs	r3, #22
 800d62c:	6003      	str	r3, [r0, #0]
 800d62e:	f04f 30ff 	mov.w	r0, #4294967295
 800d632:	bd38      	pop	{r3, r4, r5, pc}
 800d634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d636:	b112      	cbz	r2, 800d63e <_raise_r+0x1e>
 800d638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d63c:	b94b      	cbnz	r3, 800d652 <_raise_r+0x32>
 800d63e:	4620      	mov	r0, r4
 800d640:	f000 f830 	bl	800d6a4 <_getpid_r>
 800d644:	462a      	mov	r2, r5
 800d646:	4601      	mov	r1, r0
 800d648:	4620      	mov	r0, r4
 800d64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d64e:	f000 b817 	b.w	800d680 <_kill_r>
 800d652:	2b01      	cmp	r3, #1
 800d654:	d00a      	beq.n	800d66c <_raise_r+0x4c>
 800d656:	1c59      	adds	r1, r3, #1
 800d658:	d103      	bne.n	800d662 <_raise_r+0x42>
 800d65a:	2316      	movs	r3, #22
 800d65c:	6003      	str	r3, [r0, #0]
 800d65e:	2001      	movs	r0, #1
 800d660:	e7e7      	b.n	800d632 <_raise_r+0x12>
 800d662:	2400      	movs	r4, #0
 800d664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d668:	4628      	mov	r0, r5
 800d66a:	4798      	blx	r3
 800d66c:	2000      	movs	r0, #0
 800d66e:	e7e0      	b.n	800d632 <_raise_r+0x12>

0800d670 <raise>:
 800d670:	4b02      	ldr	r3, [pc, #8]	; (800d67c <raise+0xc>)
 800d672:	4601      	mov	r1, r0
 800d674:	6818      	ldr	r0, [r3, #0]
 800d676:	f7ff bfd3 	b.w	800d620 <_raise_r>
 800d67a:	bf00      	nop
 800d67c:	200000ac 	.word	0x200000ac

0800d680 <_kill_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4d07      	ldr	r5, [pc, #28]	; (800d6a0 <_kill_r+0x20>)
 800d684:	2300      	movs	r3, #0
 800d686:	4604      	mov	r4, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	4611      	mov	r1, r2
 800d68c:	602b      	str	r3, [r5, #0]
 800d68e:	f7f7 fffb 	bl	8005688 <_kill>
 800d692:	1c43      	adds	r3, r0, #1
 800d694:	d102      	bne.n	800d69c <_kill_r+0x1c>
 800d696:	682b      	ldr	r3, [r5, #0]
 800d698:	b103      	cbz	r3, 800d69c <_kill_r+0x1c>
 800d69a:	6023      	str	r3, [r4, #0]
 800d69c:	bd38      	pop	{r3, r4, r5, pc}
 800d69e:	bf00      	nop
 800d6a0:	200005d8 	.word	0x200005d8

0800d6a4 <_getpid_r>:
 800d6a4:	f7f7 bfe8 	b.w	8005678 <_getpid>

0800d6a8 <__sread>:
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b0:	f000 f894 	bl	800d7dc <_read_r>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	bfab      	itete	ge
 800d6b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d6ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d6bc:	181b      	addge	r3, r3, r0
 800d6be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6c2:	bfac      	ite	ge
 800d6c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d6c6:	81a3      	strhlt	r3, [r4, #12]
 800d6c8:	bd10      	pop	{r4, pc}

0800d6ca <__swrite>:
 800d6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ce:	461f      	mov	r7, r3
 800d6d0:	898b      	ldrh	r3, [r1, #12]
 800d6d2:	05db      	lsls	r3, r3, #23
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	4616      	mov	r6, r2
 800d6da:	d505      	bpl.n	800d6e8 <__swrite+0x1e>
 800d6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f000 f868 	bl	800d7b8 <_lseek_r>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fe:	f000 b817 	b.w	800d730 <_write_r>

0800d702 <__sseek>:
 800d702:	b510      	push	{r4, lr}
 800d704:	460c      	mov	r4, r1
 800d706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d70a:	f000 f855 	bl	800d7b8 <_lseek_r>
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	89a3      	ldrh	r3, [r4, #12]
 800d712:	bf15      	itete	ne
 800d714:	6560      	strne	r0, [r4, #84]	; 0x54
 800d716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d71a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d71e:	81a3      	strheq	r3, [r4, #12]
 800d720:	bf18      	it	ne
 800d722:	81a3      	strhne	r3, [r4, #12]
 800d724:	bd10      	pop	{r4, pc}

0800d726 <__sclose>:
 800d726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d72a:	f000 b813 	b.w	800d754 <_close_r>
	...

0800d730 <_write_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	4d07      	ldr	r5, [pc, #28]	; (800d750 <_write_r+0x20>)
 800d734:	4604      	mov	r4, r0
 800d736:	4608      	mov	r0, r1
 800d738:	4611      	mov	r1, r2
 800d73a:	2200      	movs	r2, #0
 800d73c:	602a      	str	r2, [r5, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	f7f7 ffd9 	bl	80056f6 <_write>
 800d744:	1c43      	adds	r3, r0, #1
 800d746:	d102      	bne.n	800d74e <_write_r+0x1e>
 800d748:	682b      	ldr	r3, [r5, #0]
 800d74a:	b103      	cbz	r3, 800d74e <_write_r+0x1e>
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	200005d8 	.word	0x200005d8

0800d754 <_close_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4d06      	ldr	r5, [pc, #24]	; (800d770 <_close_r+0x1c>)
 800d758:	2300      	movs	r3, #0
 800d75a:	4604      	mov	r4, r0
 800d75c:	4608      	mov	r0, r1
 800d75e:	602b      	str	r3, [r5, #0]
 800d760:	f7f7 ffe5 	bl	800572e <_close>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d102      	bne.n	800d76e <_close_r+0x1a>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	b103      	cbz	r3, 800d76e <_close_r+0x1a>
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	200005d8 	.word	0x200005d8

0800d774 <_fstat_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	4d07      	ldr	r5, [pc, #28]	; (800d794 <_fstat_r+0x20>)
 800d778:	2300      	movs	r3, #0
 800d77a:	4604      	mov	r4, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	4611      	mov	r1, r2
 800d780:	602b      	str	r3, [r5, #0]
 800d782:	f7f7 ffe0 	bl	8005746 <_fstat>
 800d786:	1c43      	adds	r3, r0, #1
 800d788:	d102      	bne.n	800d790 <_fstat_r+0x1c>
 800d78a:	682b      	ldr	r3, [r5, #0]
 800d78c:	b103      	cbz	r3, 800d790 <_fstat_r+0x1c>
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	bd38      	pop	{r3, r4, r5, pc}
 800d792:	bf00      	nop
 800d794:	200005d8 	.word	0x200005d8

0800d798 <_isatty_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4d06      	ldr	r5, [pc, #24]	; (800d7b4 <_isatty_r+0x1c>)
 800d79c:	2300      	movs	r3, #0
 800d79e:	4604      	mov	r4, r0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	602b      	str	r3, [r5, #0]
 800d7a4:	f7f7 ffdf 	bl	8005766 <_isatty>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_isatty_r+0x1a>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_isatty_r+0x1a>
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	200005d8 	.word	0x200005d8

0800d7b8 <_lseek_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4d07      	ldr	r5, [pc, #28]	; (800d7d8 <_lseek_r+0x20>)
 800d7bc:	4604      	mov	r4, r0
 800d7be:	4608      	mov	r0, r1
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	602a      	str	r2, [r5, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	f7f7 ffd8 	bl	800577c <_lseek>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d102      	bne.n	800d7d6 <_lseek_r+0x1e>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	b103      	cbz	r3, 800d7d6 <_lseek_r+0x1e>
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	bd38      	pop	{r3, r4, r5, pc}
 800d7d8:	200005d8 	.word	0x200005d8

0800d7dc <_read_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d07      	ldr	r5, [pc, #28]	; (800d7fc <_read_r+0x20>)
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	4608      	mov	r0, r1
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	602a      	str	r2, [r5, #0]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f7f7 ff66 	bl	80056bc <_read>
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	d102      	bne.n	800d7fa <_read_r+0x1e>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	b103      	cbz	r3, 800d7fa <_read_r+0x1e>
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	bd38      	pop	{r3, r4, r5, pc}
 800d7fc:	200005d8 	.word	0x200005d8

0800d800 <pow>:
 800d800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d804:	ec59 8b10 	vmov	r8, r9, d0
 800d808:	ec57 6b11 	vmov	r6, r7, d1
 800d80c:	f000 f8dc 	bl	800d9c8 <__ieee754_pow>
 800d810:	4b4e      	ldr	r3, [pc, #312]	; (800d94c <pow+0x14c>)
 800d812:	f993 3000 	ldrsb.w	r3, [r3]
 800d816:	3301      	adds	r3, #1
 800d818:	ec55 4b10 	vmov	r4, r5, d0
 800d81c:	d015      	beq.n	800d84a <pow+0x4a>
 800d81e:	4632      	mov	r2, r6
 800d820:	463b      	mov	r3, r7
 800d822:	4630      	mov	r0, r6
 800d824:	4639      	mov	r1, r7
 800d826:	f7f3 f981 	bl	8000b2c <__aeabi_dcmpun>
 800d82a:	b970      	cbnz	r0, 800d84a <pow+0x4a>
 800d82c:	4642      	mov	r2, r8
 800d82e:	464b      	mov	r3, r9
 800d830:	4640      	mov	r0, r8
 800d832:	4649      	mov	r1, r9
 800d834:	f7f3 f97a 	bl	8000b2c <__aeabi_dcmpun>
 800d838:	2200      	movs	r2, #0
 800d83a:	2300      	movs	r3, #0
 800d83c:	b148      	cbz	r0, 800d852 <pow+0x52>
 800d83e:	4630      	mov	r0, r6
 800d840:	4639      	mov	r1, r7
 800d842:	f7f3 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 800d846:	2800      	cmp	r0, #0
 800d848:	d17d      	bne.n	800d946 <pow+0x146>
 800d84a:	ec45 4b10 	vmov	d0, r4, r5
 800d84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d852:	4640      	mov	r0, r8
 800d854:	4649      	mov	r1, r9
 800d856:	f7f3 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800d85a:	b1e0      	cbz	r0, 800d896 <pow+0x96>
 800d85c:	2200      	movs	r2, #0
 800d85e:	2300      	movs	r3, #0
 800d860:	4630      	mov	r0, r6
 800d862:	4639      	mov	r1, r7
 800d864:	f7f3 f930 	bl	8000ac8 <__aeabi_dcmpeq>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d16c      	bne.n	800d946 <pow+0x146>
 800d86c:	ec47 6b10 	vmov	d0, r6, r7
 800d870:	f000 fe89 	bl	800e586 <finite>
 800d874:	2800      	cmp	r0, #0
 800d876:	d0e8      	beq.n	800d84a <pow+0x4a>
 800d878:	2200      	movs	r2, #0
 800d87a:	2300      	movs	r3, #0
 800d87c:	4630      	mov	r0, r6
 800d87e:	4639      	mov	r1, r7
 800d880:	f7f3 f92c 	bl	8000adc <__aeabi_dcmplt>
 800d884:	2800      	cmp	r0, #0
 800d886:	d0e0      	beq.n	800d84a <pow+0x4a>
 800d888:	f7fe ff22 	bl	800c6d0 <__errno>
 800d88c:	2321      	movs	r3, #33	; 0x21
 800d88e:	6003      	str	r3, [r0, #0]
 800d890:	2400      	movs	r4, #0
 800d892:	4d2f      	ldr	r5, [pc, #188]	; (800d950 <pow+0x150>)
 800d894:	e7d9      	b.n	800d84a <pow+0x4a>
 800d896:	ec45 4b10 	vmov	d0, r4, r5
 800d89a:	f000 fe74 	bl	800e586 <finite>
 800d89e:	bbb8      	cbnz	r0, 800d910 <pow+0x110>
 800d8a0:	ec49 8b10 	vmov	d0, r8, r9
 800d8a4:	f000 fe6f 	bl	800e586 <finite>
 800d8a8:	b390      	cbz	r0, 800d910 <pow+0x110>
 800d8aa:	ec47 6b10 	vmov	d0, r6, r7
 800d8ae:	f000 fe6a 	bl	800e586 <finite>
 800d8b2:	b368      	cbz	r0, 800d910 <pow+0x110>
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	f7f3 f936 	bl	8000b2c <__aeabi_dcmpun>
 800d8c0:	b160      	cbz	r0, 800d8dc <pow+0xdc>
 800d8c2:	f7fe ff05 	bl	800c6d0 <__errno>
 800d8c6:	2321      	movs	r3, #33	; 0x21
 800d8c8:	6003      	str	r3, [r0, #0]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	f7f2 ffbb 	bl	800084c <__aeabi_ddiv>
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	460d      	mov	r5, r1
 800d8da:	e7b6      	b.n	800d84a <pow+0x4a>
 800d8dc:	f7fe fef8 	bl	800c6d0 <__errno>
 800d8e0:	2322      	movs	r3, #34	; 0x22
 800d8e2:	6003      	str	r3, [r0, #0]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	4640      	mov	r0, r8
 800d8ea:	4649      	mov	r1, r9
 800d8ec:	f7f3 f8f6 	bl	8000adc <__aeabi_dcmplt>
 800d8f0:	2400      	movs	r4, #0
 800d8f2:	b158      	cbz	r0, 800d90c <pow+0x10c>
 800d8f4:	ec47 6b10 	vmov	d0, r6, r7
 800d8f8:	f000 fe5a 	bl	800e5b0 <rint>
 800d8fc:	4632      	mov	r2, r6
 800d8fe:	ec51 0b10 	vmov	r0, r1, d0
 800d902:	463b      	mov	r3, r7
 800d904:	f7f3 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d908:	2800      	cmp	r0, #0
 800d90a:	d0c2      	beq.n	800d892 <pow+0x92>
 800d90c:	4d11      	ldr	r5, [pc, #68]	; (800d954 <pow+0x154>)
 800d90e:	e79c      	b.n	800d84a <pow+0x4a>
 800d910:	2200      	movs	r2, #0
 800d912:	2300      	movs	r3, #0
 800d914:	4620      	mov	r0, r4
 800d916:	4629      	mov	r1, r5
 800d918:	f7f3 f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d094      	beq.n	800d84a <pow+0x4a>
 800d920:	ec49 8b10 	vmov	d0, r8, r9
 800d924:	f000 fe2f 	bl	800e586 <finite>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d08e      	beq.n	800d84a <pow+0x4a>
 800d92c:	ec47 6b10 	vmov	d0, r6, r7
 800d930:	f000 fe29 	bl	800e586 <finite>
 800d934:	2800      	cmp	r0, #0
 800d936:	d088      	beq.n	800d84a <pow+0x4a>
 800d938:	f7fe feca 	bl	800c6d0 <__errno>
 800d93c:	2322      	movs	r3, #34	; 0x22
 800d93e:	6003      	str	r3, [r0, #0]
 800d940:	2400      	movs	r4, #0
 800d942:	2500      	movs	r5, #0
 800d944:	e781      	b.n	800d84a <pow+0x4a>
 800d946:	4d04      	ldr	r5, [pc, #16]	; (800d958 <pow+0x158>)
 800d948:	2400      	movs	r4, #0
 800d94a:	e77e      	b.n	800d84a <pow+0x4a>
 800d94c:	20000110 	.word	0x20000110
 800d950:	fff00000 	.word	0xfff00000
 800d954:	7ff00000 	.word	0x7ff00000
 800d958:	3ff00000 	.word	0x3ff00000

0800d95c <sqrt>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	ed2d 8b02 	vpush	{d8}
 800d962:	ec55 4b10 	vmov	r4, r5, d0
 800d966:	f000 fd51 	bl	800e40c <__ieee754_sqrt>
 800d96a:	4b15      	ldr	r3, [pc, #84]	; (800d9c0 <sqrt+0x64>)
 800d96c:	eeb0 8a40 	vmov.f32	s16, s0
 800d970:	eef0 8a60 	vmov.f32	s17, s1
 800d974:	f993 3000 	ldrsb.w	r3, [r3]
 800d978:	3301      	adds	r3, #1
 800d97a:	d019      	beq.n	800d9b0 <sqrt+0x54>
 800d97c:	4622      	mov	r2, r4
 800d97e:	462b      	mov	r3, r5
 800d980:	4620      	mov	r0, r4
 800d982:	4629      	mov	r1, r5
 800d984:	f7f3 f8d2 	bl	8000b2c <__aeabi_dcmpun>
 800d988:	b990      	cbnz	r0, 800d9b0 <sqrt+0x54>
 800d98a:	2200      	movs	r2, #0
 800d98c:	2300      	movs	r3, #0
 800d98e:	4620      	mov	r0, r4
 800d990:	4629      	mov	r1, r5
 800d992:	f7f3 f8a3 	bl	8000adc <__aeabi_dcmplt>
 800d996:	b158      	cbz	r0, 800d9b0 <sqrt+0x54>
 800d998:	f7fe fe9a 	bl	800c6d0 <__errno>
 800d99c:	2321      	movs	r3, #33	; 0x21
 800d99e:	6003      	str	r3, [r0, #0]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	f7f2 ff50 	bl	800084c <__aeabi_ddiv>
 800d9ac:	ec41 0b18 	vmov	d8, r0, r1
 800d9b0:	eeb0 0a48 	vmov.f32	s0, s16
 800d9b4:	eef0 0a68 	vmov.f32	s1, s17
 800d9b8:	ecbd 8b02 	vpop	{d8}
 800d9bc:	bd38      	pop	{r3, r4, r5, pc}
 800d9be:	bf00      	nop
 800d9c0:	20000110 	.word	0x20000110
 800d9c4:	00000000 	.word	0x00000000

0800d9c8 <__ieee754_pow>:
 800d9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9cc:	ed2d 8b06 	vpush	{d8-d10}
 800d9d0:	b08d      	sub	sp, #52	; 0x34
 800d9d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d9d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d9da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d9de:	ea56 0100 	orrs.w	r1, r6, r0
 800d9e2:	ec53 2b10 	vmov	r2, r3, d0
 800d9e6:	f000 84d1 	beq.w	800e38c <__ieee754_pow+0x9c4>
 800d9ea:	497f      	ldr	r1, [pc, #508]	; (800dbe8 <__ieee754_pow+0x220>)
 800d9ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d9f0:	428c      	cmp	r4, r1
 800d9f2:	ee10 8a10 	vmov	r8, s0
 800d9f6:	4699      	mov	r9, r3
 800d9f8:	dc09      	bgt.n	800da0e <__ieee754_pow+0x46>
 800d9fa:	d103      	bne.n	800da04 <__ieee754_pow+0x3c>
 800d9fc:	b97a      	cbnz	r2, 800da1e <__ieee754_pow+0x56>
 800d9fe:	42a6      	cmp	r6, r4
 800da00:	dd02      	ble.n	800da08 <__ieee754_pow+0x40>
 800da02:	e00c      	b.n	800da1e <__ieee754_pow+0x56>
 800da04:	428e      	cmp	r6, r1
 800da06:	dc02      	bgt.n	800da0e <__ieee754_pow+0x46>
 800da08:	428e      	cmp	r6, r1
 800da0a:	d110      	bne.n	800da2e <__ieee754_pow+0x66>
 800da0c:	b178      	cbz	r0, 800da2e <__ieee754_pow+0x66>
 800da0e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800da12:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800da16:	ea54 0308 	orrs.w	r3, r4, r8
 800da1a:	f000 84b7 	beq.w	800e38c <__ieee754_pow+0x9c4>
 800da1e:	4873      	ldr	r0, [pc, #460]	; (800dbec <__ieee754_pow+0x224>)
 800da20:	b00d      	add	sp, #52	; 0x34
 800da22:	ecbd 8b06 	vpop	{d8-d10}
 800da26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2a:	f000 bdb9 	b.w	800e5a0 <nan>
 800da2e:	f1b9 0f00 	cmp.w	r9, #0
 800da32:	da36      	bge.n	800daa2 <__ieee754_pow+0xda>
 800da34:	496e      	ldr	r1, [pc, #440]	; (800dbf0 <__ieee754_pow+0x228>)
 800da36:	428e      	cmp	r6, r1
 800da38:	dc51      	bgt.n	800dade <__ieee754_pow+0x116>
 800da3a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800da3e:	428e      	cmp	r6, r1
 800da40:	f340 84af 	ble.w	800e3a2 <__ieee754_pow+0x9da>
 800da44:	1531      	asrs	r1, r6, #20
 800da46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800da4a:	2914      	cmp	r1, #20
 800da4c:	dd0f      	ble.n	800da6e <__ieee754_pow+0xa6>
 800da4e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800da52:	fa20 fc01 	lsr.w	ip, r0, r1
 800da56:	fa0c f101 	lsl.w	r1, ip, r1
 800da5a:	4281      	cmp	r1, r0
 800da5c:	f040 84a1 	bne.w	800e3a2 <__ieee754_pow+0x9da>
 800da60:	f00c 0c01 	and.w	ip, ip, #1
 800da64:	f1cc 0102 	rsb	r1, ip, #2
 800da68:	9100      	str	r1, [sp, #0]
 800da6a:	b180      	cbz	r0, 800da8e <__ieee754_pow+0xc6>
 800da6c:	e059      	b.n	800db22 <__ieee754_pow+0x15a>
 800da6e:	2800      	cmp	r0, #0
 800da70:	d155      	bne.n	800db1e <__ieee754_pow+0x156>
 800da72:	f1c1 0114 	rsb	r1, r1, #20
 800da76:	fa46 fc01 	asr.w	ip, r6, r1
 800da7a:	fa0c f101 	lsl.w	r1, ip, r1
 800da7e:	42b1      	cmp	r1, r6
 800da80:	f040 848c 	bne.w	800e39c <__ieee754_pow+0x9d4>
 800da84:	f00c 0c01 	and.w	ip, ip, #1
 800da88:	f1cc 0102 	rsb	r1, ip, #2
 800da8c:	9100      	str	r1, [sp, #0]
 800da8e:	4959      	ldr	r1, [pc, #356]	; (800dbf4 <__ieee754_pow+0x22c>)
 800da90:	428e      	cmp	r6, r1
 800da92:	d12d      	bne.n	800daf0 <__ieee754_pow+0x128>
 800da94:	2f00      	cmp	r7, #0
 800da96:	da79      	bge.n	800db8c <__ieee754_pow+0x1c4>
 800da98:	4956      	ldr	r1, [pc, #344]	; (800dbf4 <__ieee754_pow+0x22c>)
 800da9a:	2000      	movs	r0, #0
 800da9c:	f7f2 fed6 	bl	800084c <__aeabi_ddiv>
 800daa0:	e016      	b.n	800dad0 <__ieee754_pow+0x108>
 800daa2:	2100      	movs	r1, #0
 800daa4:	9100      	str	r1, [sp, #0]
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d13b      	bne.n	800db22 <__ieee754_pow+0x15a>
 800daaa:	494f      	ldr	r1, [pc, #316]	; (800dbe8 <__ieee754_pow+0x220>)
 800daac:	428e      	cmp	r6, r1
 800daae:	d1ee      	bne.n	800da8e <__ieee754_pow+0xc6>
 800dab0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dab4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dab8:	ea53 0308 	orrs.w	r3, r3, r8
 800dabc:	f000 8466 	beq.w	800e38c <__ieee754_pow+0x9c4>
 800dac0:	4b4d      	ldr	r3, [pc, #308]	; (800dbf8 <__ieee754_pow+0x230>)
 800dac2:	429c      	cmp	r4, r3
 800dac4:	dd0d      	ble.n	800dae2 <__ieee754_pow+0x11a>
 800dac6:	2f00      	cmp	r7, #0
 800dac8:	f280 8464 	bge.w	800e394 <__ieee754_pow+0x9cc>
 800dacc:	2000      	movs	r0, #0
 800dace:	2100      	movs	r1, #0
 800dad0:	ec41 0b10 	vmov	d0, r0, r1
 800dad4:	b00d      	add	sp, #52	; 0x34
 800dad6:	ecbd 8b06 	vpop	{d8-d10}
 800dada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dade:	2102      	movs	r1, #2
 800dae0:	e7e0      	b.n	800daa4 <__ieee754_pow+0xdc>
 800dae2:	2f00      	cmp	r7, #0
 800dae4:	daf2      	bge.n	800dacc <__ieee754_pow+0x104>
 800dae6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800daea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800daee:	e7ef      	b.n	800dad0 <__ieee754_pow+0x108>
 800daf0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800daf4:	d104      	bne.n	800db00 <__ieee754_pow+0x138>
 800daf6:	4610      	mov	r0, r2
 800daf8:	4619      	mov	r1, r3
 800dafa:	f7f2 fd7d 	bl	80005f8 <__aeabi_dmul>
 800dafe:	e7e7      	b.n	800dad0 <__ieee754_pow+0x108>
 800db00:	493e      	ldr	r1, [pc, #248]	; (800dbfc <__ieee754_pow+0x234>)
 800db02:	428f      	cmp	r7, r1
 800db04:	d10d      	bne.n	800db22 <__ieee754_pow+0x15a>
 800db06:	f1b9 0f00 	cmp.w	r9, #0
 800db0a:	db0a      	blt.n	800db22 <__ieee754_pow+0x15a>
 800db0c:	ec43 2b10 	vmov	d0, r2, r3
 800db10:	b00d      	add	sp, #52	; 0x34
 800db12:	ecbd 8b06 	vpop	{d8-d10}
 800db16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1a:	f000 bc77 	b.w	800e40c <__ieee754_sqrt>
 800db1e:	2100      	movs	r1, #0
 800db20:	9100      	str	r1, [sp, #0]
 800db22:	ec43 2b10 	vmov	d0, r2, r3
 800db26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db2a:	f000 fd23 	bl	800e574 <fabs>
 800db2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db32:	ec51 0b10 	vmov	r0, r1, d0
 800db36:	f1b8 0f00 	cmp.w	r8, #0
 800db3a:	d12a      	bne.n	800db92 <__ieee754_pow+0x1ca>
 800db3c:	b12c      	cbz	r4, 800db4a <__ieee754_pow+0x182>
 800db3e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800dbf4 <__ieee754_pow+0x22c>
 800db42:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800db46:	45e6      	cmp	lr, ip
 800db48:	d123      	bne.n	800db92 <__ieee754_pow+0x1ca>
 800db4a:	2f00      	cmp	r7, #0
 800db4c:	da05      	bge.n	800db5a <__ieee754_pow+0x192>
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	2000      	movs	r0, #0
 800db54:	4927      	ldr	r1, [pc, #156]	; (800dbf4 <__ieee754_pow+0x22c>)
 800db56:	f7f2 fe79 	bl	800084c <__aeabi_ddiv>
 800db5a:	f1b9 0f00 	cmp.w	r9, #0
 800db5e:	dab7      	bge.n	800dad0 <__ieee754_pow+0x108>
 800db60:	9b00      	ldr	r3, [sp, #0]
 800db62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800db66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800db6a:	4323      	orrs	r3, r4
 800db6c:	d108      	bne.n	800db80 <__ieee754_pow+0x1b8>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4610      	mov	r0, r2
 800db74:	4619      	mov	r1, r3
 800db76:	f7f2 fb87 	bl	8000288 <__aeabi_dsub>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	e78d      	b.n	800da9c <__ieee754_pow+0xd4>
 800db80:	9b00      	ldr	r3, [sp, #0]
 800db82:	2b01      	cmp	r3, #1
 800db84:	d1a4      	bne.n	800dad0 <__ieee754_pow+0x108>
 800db86:	4602      	mov	r2, r0
 800db88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db8c:	4610      	mov	r0, r2
 800db8e:	4619      	mov	r1, r3
 800db90:	e79e      	b.n	800dad0 <__ieee754_pow+0x108>
 800db92:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800db96:	f10c 35ff 	add.w	r5, ip, #4294967295
 800db9a:	950a      	str	r5, [sp, #40]	; 0x28
 800db9c:	9d00      	ldr	r5, [sp, #0]
 800db9e:	46ac      	mov	ip, r5
 800dba0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800dba2:	ea5c 0505 	orrs.w	r5, ip, r5
 800dba6:	d0e4      	beq.n	800db72 <__ieee754_pow+0x1aa>
 800dba8:	4b15      	ldr	r3, [pc, #84]	; (800dc00 <__ieee754_pow+0x238>)
 800dbaa:	429e      	cmp	r6, r3
 800dbac:	f340 80fc 	ble.w	800dda8 <__ieee754_pow+0x3e0>
 800dbb0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dbb4:	429e      	cmp	r6, r3
 800dbb6:	4b10      	ldr	r3, [pc, #64]	; (800dbf8 <__ieee754_pow+0x230>)
 800dbb8:	dd07      	ble.n	800dbca <__ieee754_pow+0x202>
 800dbba:	429c      	cmp	r4, r3
 800dbbc:	dc0a      	bgt.n	800dbd4 <__ieee754_pow+0x20c>
 800dbbe:	2f00      	cmp	r7, #0
 800dbc0:	da84      	bge.n	800dacc <__ieee754_pow+0x104>
 800dbc2:	a307      	add	r3, pc, #28	; (adr r3, 800dbe0 <__ieee754_pow+0x218>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	e795      	b.n	800daf6 <__ieee754_pow+0x12e>
 800dbca:	429c      	cmp	r4, r3
 800dbcc:	dbf7      	blt.n	800dbbe <__ieee754_pow+0x1f6>
 800dbce:	4b09      	ldr	r3, [pc, #36]	; (800dbf4 <__ieee754_pow+0x22c>)
 800dbd0:	429c      	cmp	r4, r3
 800dbd2:	dd17      	ble.n	800dc04 <__ieee754_pow+0x23c>
 800dbd4:	2f00      	cmp	r7, #0
 800dbd6:	dcf4      	bgt.n	800dbc2 <__ieee754_pow+0x1fa>
 800dbd8:	e778      	b.n	800dacc <__ieee754_pow+0x104>
 800dbda:	bf00      	nop
 800dbdc:	f3af 8000 	nop.w
 800dbe0:	8800759c 	.word	0x8800759c
 800dbe4:	7e37e43c 	.word	0x7e37e43c
 800dbe8:	7ff00000 	.word	0x7ff00000
 800dbec:	080e9e42 	.word	0x080e9e42
 800dbf0:	433fffff 	.word	0x433fffff
 800dbf4:	3ff00000 	.word	0x3ff00000
 800dbf8:	3fefffff 	.word	0x3fefffff
 800dbfc:	3fe00000 	.word	0x3fe00000
 800dc00:	41e00000 	.word	0x41e00000
 800dc04:	4b64      	ldr	r3, [pc, #400]	; (800dd98 <__ieee754_pow+0x3d0>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	f7f2 fb3e 	bl	8000288 <__aeabi_dsub>
 800dc0c:	a356      	add	r3, pc, #344	; (adr r3, 800dd68 <__ieee754_pow+0x3a0>)
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	4604      	mov	r4, r0
 800dc14:	460d      	mov	r5, r1
 800dc16:	f7f2 fcef 	bl	80005f8 <__aeabi_dmul>
 800dc1a:	a355      	add	r3, pc, #340	; (adr r3, 800dd70 <__ieee754_pow+0x3a8>)
 800dc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc20:	4606      	mov	r6, r0
 800dc22:	460f      	mov	r7, r1
 800dc24:	4620      	mov	r0, r4
 800dc26:	4629      	mov	r1, r5
 800dc28:	f7f2 fce6 	bl	80005f8 <__aeabi_dmul>
 800dc2c:	4b5b      	ldr	r3, [pc, #364]	; (800dd9c <__ieee754_pow+0x3d4>)
 800dc2e:	4682      	mov	sl, r0
 800dc30:	468b      	mov	fp, r1
 800dc32:	2200      	movs	r2, #0
 800dc34:	4620      	mov	r0, r4
 800dc36:	4629      	mov	r1, r5
 800dc38:	f7f2 fcde 	bl	80005f8 <__aeabi_dmul>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	a14d      	add	r1, pc, #308	; (adr r1, 800dd78 <__ieee754_pow+0x3b0>)
 800dc42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc46:	f7f2 fb1f 	bl	8000288 <__aeabi_dsub>
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	462b      	mov	r3, r5
 800dc4e:	f7f2 fcd3 	bl	80005f8 <__aeabi_dmul>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	2000      	movs	r0, #0
 800dc58:	4951      	ldr	r1, [pc, #324]	; (800dda0 <__ieee754_pow+0x3d8>)
 800dc5a:	f7f2 fb15 	bl	8000288 <__aeabi_dsub>
 800dc5e:	4622      	mov	r2, r4
 800dc60:	4680      	mov	r8, r0
 800dc62:	4689      	mov	r9, r1
 800dc64:	462b      	mov	r3, r5
 800dc66:	4620      	mov	r0, r4
 800dc68:	4629      	mov	r1, r5
 800dc6a:	f7f2 fcc5 	bl	80005f8 <__aeabi_dmul>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	4640      	mov	r0, r8
 800dc74:	4649      	mov	r1, r9
 800dc76:	f7f2 fcbf 	bl	80005f8 <__aeabi_dmul>
 800dc7a:	a341      	add	r3, pc, #260	; (adr r3, 800dd80 <__ieee754_pow+0x3b8>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	f7f2 fcba 	bl	80005f8 <__aeabi_dmul>
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	4650      	mov	r0, sl
 800dc8a:	4659      	mov	r1, fp
 800dc8c:	f7f2 fafc 	bl	8000288 <__aeabi_dsub>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	4680      	mov	r8, r0
 800dc96:	4689      	mov	r9, r1
 800dc98:	4630      	mov	r0, r6
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	f7f2 faf6 	bl	800028c <__adddf3>
 800dca0:	2400      	movs	r4, #0
 800dca2:	4632      	mov	r2, r6
 800dca4:	463b      	mov	r3, r7
 800dca6:	4620      	mov	r0, r4
 800dca8:	460d      	mov	r5, r1
 800dcaa:	f7f2 faed 	bl	8000288 <__aeabi_dsub>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	4640      	mov	r0, r8
 800dcb4:	4649      	mov	r1, r9
 800dcb6:	f7f2 fae7 	bl	8000288 <__aeabi_dsub>
 800dcba:	9b00      	ldr	r3, [sp, #0]
 800dcbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	4682      	mov	sl, r0
 800dcc4:	468b      	mov	fp, r1
 800dcc6:	f040 81f1 	bne.w	800e0ac <__ieee754_pow+0x6e4>
 800dcca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dd88 <__ieee754_pow+0x3c0>
 800dcce:	eeb0 8a47 	vmov.f32	s16, s14
 800dcd2:	eef0 8a67 	vmov.f32	s17, s15
 800dcd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dcda:	2600      	movs	r6, #0
 800dcdc:	4632      	mov	r2, r6
 800dcde:	463b      	mov	r3, r7
 800dce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce4:	f7f2 fad0 	bl	8000288 <__aeabi_dsub>
 800dce8:	4622      	mov	r2, r4
 800dcea:	462b      	mov	r3, r5
 800dcec:	f7f2 fc84 	bl	80005f8 <__aeabi_dmul>
 800dcf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcf4:	4680      	mov	r8, r0
 800dcf6:	4689      	mov	r9, r1
 800dcf8:	4650      	mov	r0, sl
 800dcfa:	4659      	mov	r1, fp
 800dcfc:	f7f2 fc7c 	bl	80005f8 <__aeabi_dmul>
 800dd00:	4602      	mov	r2, r0
 800dd02:	460b      	mov	r3, r1
 800dd04:	4640      	mov	r0, r8
 800dd06:	4649      	mov	r1, r9
 800dd08:	f7f2 fac0 	bl	800028c <__adddf3>
 800dd0c:	4632      	mov	r2, r6
 800dd0e:	463b      	mov	r3, r7
 800dd10:	4680      	mov	r8, r0
 800dd12:	4689      	mov	r9, r1
 800dd14:	4620      	mov	r0, r4
 800dd16:	4629      	mov	r1, r5
 800dd18:	f7f2 fc6e 	bl	80005f8 <__aeabi_dmul>
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4604      	mov	r4, r0
 800dd20:	460d      	mov	r5, r1
 800dd22:	4602      	mov	r2, r0
 800dd24:	4649      	mov	r1, r9
 800dd26:	4640      	mov	r0, r8
 800dd28:	f7f2 fab0 	bl	800028c <__adddf3>
 800dd2c:	4b1d      	ldr	r3, [pc, #116]	; (800dda4 <__ieee754_pow+0x3dc>)
 800dd2e:	4299      	cmp	r1, r3
 800dd30:	ec45 4b19 	vmov	d9, r4, r5
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	468b      	mov	fp, r1
 800dd3a:	f340 82fe 	ble.w	800e33a <__ieee754_pow+0x972>
 800dd3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dd42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dd46:	4303      	orrs	r3, r0
 800dd48:	f000 81f0 	beq.w	800e12c <__ieee754_pow+0x764>
 800dd4c:	a310      	add	r3, pc, #64	; (adr r3, 800dd90 <__ieee754_pow+0x3c8>)
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	ec51 0b18 	vmov	r0, r1, d8
 800dd56:	f7f2 fc4f 	bl	80005f8 <__aeabi_dmul>
 800dd5a:	a30d      	add	r3, pc, #52	; (adr r3, 800dd90 <__ieee754_pow+0x3c8>)
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	e6cb      	b.n	800dafa <__ieee754_pow+0x132>
 800dd62:	bf00      	nop
 800dd64:	f3af 8000 	nop.w
 800dd68:	60000000 	.word	0x60000000
 800dd6c:	3ff71547 	.word	0x3ff71547
 800dd70:	f85ddf44 	.word	0xf85ddf44
 800dd74:	3e54ae0b 	.word	0x3e54ae0b
 800dd78:	55555555 	.word	0x55555555
 800dd7c:	3fd55555 	.word	0x3fd55555
 800dd80:	652b82fe 	.word	0x652b82fe
 800dd84:	3ff71547 	.word	0x3ff71547
 800dd88:	00000000 	.word	0x00000000
 800dd8c:	bff00000 	.word	0xbff00000
 800dd90:	8800759c 	.word	0x8800759c
 800dd94:	7e37e43c 	.word	0x7e37e43c
 800dd98:	3ff00000 	.word	0x3ff00000
 800dd9c:	3fd00000 	.word	0x3fd00000
 800dda0:	3fe00000 	.word	0x3fe00000
 800dda4:	408fffff 	.word	0x408fffff
 800dda8:	4bd7      	ldr	r3, [pc, #860]	; (800e108 <__ieee754_pow+0x740>)
 800ddaa:	ea03 0309 	and.w	r3, r3, r9
 800ddae:	2200      	movs	r2, #0
 800ddb0:	b92b      	cbnz	r3, 800ddbe <__ieee754_pow+0x3f6>
 800ddb2:	4bd6      	ldr	r3, [pc, #856]	; (800e10c <__ieee754_pow+0x744>)
 800ddb4:	f7f2 fc20 	bl	80005f8 <__aeabi_dmul>
 800ddb8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ddbc:	460c      	mov	r4, r1
 800ddbe:	1523      	asrs	r3, r4, #20
 800ddc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ddc4:	4413      	add	r3, r2
 800ddc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ddc8:	4bd1      	ldr	r3, [pc, #836]	; (800e110 <__ieee754_pow+0x748>)
 800ddca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ddce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ddd2:	429c      	cmp	r4, r3
 800ddd4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ddd8:	dd08      	ble.n	800ddec <__ieee754_pow+0x424>
 800ddda:	4bce      	ldr	r3, [pc, #824]	; (800e114 <__ieee754_pow+0x74c>)
 800dddc:	429c      	cmp	r4, r3
 800ddde:	f340 8163 	ble.w	800e0a8 <__ieee754_pow+0x6e0>
 800dde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde4:	3301      	adds	r3, #1
 800dde6:	9309      	str	r3, [sp, #36]	; 0x24
 800dde8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ddec:	2400      	movs	r4, #0
 800ddee:	00e3      	lsls	r3, r4, #3
 800ddf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddf2:	4bc9      	ldr	r3, [pc, #804]	; (800e118 <__ieee754_pow+0x750>)
 800ddf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddf8:	ed93 7b00 	vldr	d7, [r3]
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	ec53 2b17 	vmov	r2, r3, d7
 800de02:	eeb0 8a47 	vmov.f32	s16, s14
 800de06:	eef0 8a67 	vmov.f32	s17, s15
 800de0a:	4682      	mov	sl, r0
 800de0c:	f7f2 fa3c 	bl	8000288 <__aeabi_dsub>
 800de10:	4652      	mov	r2, sl
 800de12:	4606      	mov	r6, r0
 800de14:	460f      	mov	r7, r1
 800de16:	462b      	mov	r3, r5
 800de18:	ec51 0b18 	vmov	r0, r1, d8
 800de1c:	f7f2 fa36 	bl	800028c <__adddf3>
 800de20:	4602      	mov	r2, r0
 800de22:	460b      	mov	r3, r1
 800de24:	2000      	movs	r0, #0
 800de26:	49bd      	ldr	r1, [pc, #756]	; (800e11c <__ieee754_pow+0x754>)
 800de28:	f7f2 fd10 	bl	800084c <__aeabi_ddiv>
 800de2c:	ec41 0b19 	vmov	d9, r0, r1
 800de30:	4602      	mov	r2, r0
 800de32:	460b      	mov	r3, r1
 800de34:	4630      	mov	r0, r6
 800de36:	4639      	mov	r1, r7
 800de38:	f7f2 fbde 	bl	80005f8 <__aeabi_dmul>
 800de3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800de40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de48:	2300      	movs	r3, #0
 800de4a:	9304      	str	r3, [sp, #16]
 800de4c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800de50:	46ab      	mov	fp, r5
 800de52:	106d      	asrs	r5, r5, #1
 800de54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800de58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800de5c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800de60:	2200      	movs	r2, #0
 800de62:	4640      	mov	r0, r8
 800de64:	4649      	mov	r1, r9
 800de66:	4614      	mov	r4, r2
 800de68:	461d      	mov	r5, r3
 800de6a:	f7f2 fbc5 	bl	80005f8 <__aeabi_dmul>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4630      	mov	r0, r6
 800de74:	4639      	mov	r1, r7
 800de76:	f7f2 fa07 	bl	8000288 <__aeabi_dsub>
 800de7a:	ec53 2b18 	vmov	r2, r3, d8
 800de7e:	4606      	mov	r6, r0
 800de80:	460f      	mov	r7, r1
 800de82:	4620      	mov	r0, r4
 800de84:	4629      	mov	r1, r5
 800de86:	f7f2 f9ff 	bl	8000288 <__aeabi_dsub>
 800de8a:	4602      	mov	r2, r0
 800de8c:	460b      	mov	r3, r1
 800de8e:	4650      	mov	r0, sl
 800de90:	4659      	mov	r1, fp
 800de92:	f7f2 f9f9 	bl	8000288 <__aeabi_dsub>
 800de96:	4642      	mov	r2, r8
 800de98:	464b      	mov	r3, r9
 800de9a:	f7f2 fbad 	bl	80005f8 <__aeabi_dmul>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4630      	mov	r0, r6
 800dea4:	4639      	mov	r1, r7
 800dea6:	f7f2 f9ef 	bl	8000288 <__aeabi_dsub>
 800deaa:	ec53 2b19 	vmov	r2, r3, d9
 800deae:	f7f2 fba3 	bl	80005f8 <__aeabi_dmul>
 800deb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800deb6:	ec41 0b18 	vmov	d8, r0, r1
 800deba:	4610      	mov	r0, r2
 800debc:	4619      	mov	r1, r3
 800debe:	f7f2 fb9b 	bl	80005f8 <__aeabi_dmul>
 800dec2:	a37d      	add	r3, pc, #500	; (adr r3, 800e0b8 <__ieee754_pow+0x6f0>)
 800dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec8:	4604      	mov	r4, r0
 800deca:	460d      	mov	r5, r1
 800decc:	f7f2 fb94 	bl	80005f8 <__aeabi_dmul>
 800ded0:	a37b      	add	r3, pc, #492	; (adr r3, 800e0c0 <__ieee754_pow+0x6f8>)
 800ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded6:	f7f2 f9d9 	bl	800028c <__adddf3>
 800deda:	4622      	mov	r2, r4
 800dedc:	462b      	mov	r3, r5
 800dede:	f7f2 fb8b 	bl	80005f8 <__aeabi_dmul>
 800dee2:	a379      	add	r3, pc, #484	; (adr r3, 800e0c8 <__ieee754_pow+0x700>)
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	f7f2 f9d0 	bl	800028c <__adddf3>
 800deec:	4622      	mov	r2, r4
 800deee:	462b      	mov	r3, r5
 800def0:	f7f2 fb82 	bl	80005f8 <__aeabi_dmul>
 800def4:	a376      	add	r3, pc, #472	; (adr r3, 800e0d0 <__ieee754_pow+0x708>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	f7f2 f9c7 	bl	800028c <__adddf3>
 800defe:	4622      	mov	r2, r4
 800df00:	462b      	mov	r3, r5
 800df02:	f7f2 fb79 	bl	80005f8 <__aeabi_dmul>
 800df06:	a374      	add	r3, pc, #464	; (adr r3, 800e0d8 <__ieee754_pow+0x710>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	f7f2 f9be 	bl	800028c <__adddf3>
 800df10:	4622      	mov	r2, r4
 800df12:	462b      	mov	r3, r5
 800df14:	f7f2 fb70 	bl	80005f8 <__aeabi_dmul>
 800df18:	a371      	add	r3, pc, #452	; (adr r3, 800e0e0 <__ieee754_pow+0x718>)
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	f7f2 f9b5 	bl	800028c <__adddf3>
 800df22:	4622      	mov	r2, r4
 800df24:	4606      	mov	r6, r0
 800df26:	460f      	mov	r7, r1
 800df28:	462b      	mov	r3, r5
 800df2a:	4620      	mov	r0, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	f7f2 fb63 	bl	80005f8 <__aeabi_dmul>
 800df32:	4602      	mov	r2, r0
 800df34:	460b      	mov	r3, r1
 800df36:	4630      	mov	r0, r6
 800df38:	4639      	mov	r1, r7
 800df3a:	f7f2 fb5d 	bl	80005f8 <__aeabi_dmul>
 800df3e:	4642      	mov	r2, r8
 800df40:	4604      	mov	r4, r0
 800df42:	460d      	mov	r5, r1
 800df44:	464b      	mov	r3, r9
 800df46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df4a:	f7f2 f99f 	bl	800028c <__adddf3>
 800df4e:	ec53 2b18 	vmov	r2, r3, d8
 800df52:	f7f2 fb51 	bl	80005f8 <__aeabi_dmul>
 800df56:	4622      	mov	r2, r4
 800df58:	462b      	mov	r3, r5
 800df5a:	f7f2 f997 	bl	800028c <__adddf3>
 800df5e:	4642      	mov	r2, r8
 800df60:	4682      	mov	sl, r0
 800df62:	468b      	mov	fp, r1
 800df64:	464b      	mov	r3, r9
 800df66:	4640      	mov	r0, r8
 800df68:	4649      	mov	r1, r9
 800df6a:	f7f2 fb45 	bl	80005f8 <__aeabi_dmul>
 800df6e:	4b6c      	ldr	r3, [pc, #432]	; (800e120 <__ieee754_pow+0x758>)
 800df70:	2200      	movs	r2, #0
 800df72:	4606      	mov	r6, r0
 800df74:	460f      	mov	r7, r1
 800df76:	f7f2 f989 	bl	800028c <__adddf3>
 800df7a:	4652      	mov	r2, sl
 800df7c:	465b      	mov	r3, fp
 800df7e:	f7f2 f985 	bl	800028c <__adddf3>
 800df82:	9c04      	ldr	r4, [sp, #16]
 800df84:	460d      	mov	r5, r1
 800df86:	4622      	mov	r2, r4
 800df88:	460b      	mov	r3, r1
 800df8a:	4640      	mov	r0, r8
 800df8c:	4649      	mov	r1, r9
 800df8e:	f7f2 fb33 	bl	80005f8 <__aeabi_dmul>
 800df92:	4b63      	ldr	r3, [pc, #396]	; (800e120 <__ieee754_pow+0x758>)
 800df94:	4680      	mov	r8, r0
 800df96:	4689      	mov	r9, r1
 800df98:	2200      	movs	r2, #0
 800df9a:	4620      	mov	r0, r4
 800df9c:	4629      	mov	r1, r5
 800df9e:	f7f2 f973 	bl	8000288 <__aeabi_dsub>
 800dfa2:	4632      	mov	r2, r6
 800dfa4:	463b      	mov	r3, r7
 800dfa6:	f7f2 f96f 	bl	8000288 <__aeabi_dsub>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	4650      	mov	r0, sl
 800dfb0:	4659      	mov	r1, fp
 800dfb2:	f7f2 f969 	bl	8000288 <__aeabi_dsub>
 800dfb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dfba:	f7f2 fb1d 	bl	80005f8 <__aeabi_dmul>
 800dfbe:	4622      	mov	r2, r4
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	460f      	mov	r7, r1
 800dfc4:	462b      	mov	r3, r5
 800dfc6:	ec51 0b18 	vmov	r0, r1, d8
 800dfca:	f7f2 fb15 	bl	80005f8 <__aeabi_dmul>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f7f2 f959 	bl	800028c <__adddf3>
 800dfda:	4606      	mov	r6, r0
 800dfdc:	460f      	mov	r7, r1
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4640      	mov	r0, r8
 800dfe4:	4649      	mov	r1, r9
 800dfe6:	f7f2 f951 	bl	800028c <__adddf3>
 800dfea:	9c04      	ldr	r4, [sp, #16]
 800dfec:	a33e      	add	r3, pc, #248	; (adr r3, 800e0e8 <__ieee754_pow+0x720>)
 800dfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff2:	4620      	mov	r0, r4
 800dff4:	460d      	mov	r5, r1
 800dff6:	f7f2 faff 	bl	80005f8 <__aeabi_dmul>
 800dffa:	4642      	mov	r2, r8
 800dffc:	ec41 0b18 	vmov	d8, r0, r1
 800e000:	464b      	mov	r3, r9
 800e002:	4620      	mov	r0, r4
 800e004:	4629      	mov	r1, r5
 800e006:	f7f2 f93f 	bl	8000288 <__aeabi_dsub>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4630      	mov	r0, r6
 800e010:	4639      	mov	r1, r7
 800e012:	f7f2 f939 	bl	8000288 <__aeabi_dsub>
 800e016:	a336      	add	r3, pc, #216	; (adr r3, 800e0f0 <__ieee754_pow+0x728>)
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	f7f2 faec 	bl	80005f8 <__aeabi_dmul>
 800e020:	a335      	add	r3, pc, #212	; (adr r3, 800e0f8 <__ieee754_pow+0x730>)
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	4606      	mov	r6, r0
 800e028:	460f      	mov	r7, r1
 800e02a:	4620      	mov	r0, r4
 800e02c:	4629      	mov	r1, r5
 800e02e:	f7f2 fae3 	bl	80005f8 <__aeabi_dmul>
 800e032:	4602      	mov	r2, r0
 800e034:	460b      	mov	r3, r1
 800e036:	4630      	mov	r0, r6
 800e038:	4639      	mov	r1, r7
 800e03a:	f7f2 f927 	bl	800028c <__adddf3>
 800e03e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e040:	4b38      	ldr	r3, [pc, #224]	; (800e124 <__ieee754_pow+0x75c>)
 800e042:	4413      	add	r3, r2
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	f7f2 f920 	bl	800028c <__adddf3>
 800e04c:	4682      	mov	sl, r0
 800e04e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e050:	468b      	mov	fp, r1
 800e052:	f7f2 fa67 	bl	8000524 <__aeabi_i2d>
 800e056:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e058:	4b33      	ldr	r3, [pc, #204]	; (800e128 <__ieee754_pow+0x760>)
 800e05a:	4413      	add	r3, r2
 800e05c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e060:	4606      	mov	r6, r0
 800e062:	460f      	mov	r7, r1
 800e064:	4652      	mov	r2, sl
 800e066:	465b      	mov	r3, fp
 800e068:	ec51 0b18 	vmov	r0, r1, d8
 800e06c:	f7f2 f90e 	bl	800028c <__adddf3>
 800e070:	4642      	mov	r2, r8
 800e072:	464b      	mov	r3, r9
 800e074:	f7f2 f90a 	bl	800028c <__adddf3>
 800e078:	4632      	mov	r2, r6
 800e07a:	463b      	mov	r3, r7
 800e07c:	f7f2 f906 	bl	800028c <__adddf3>
 800e080:	9c04      	ldr	r4, [sp, #16]
 800e082:	4632      	mov	r2, r6
 800e084:	463b      	mov	r3, r7
 800e086:	4620      	mov	r0, r4
 800e088:	460d      	mov	r5, r1
 800e08a:	f7f2 f8fd 	bl	8000288 <__aeabi_dsub>
 800e08e:	4642      	mov	r2, r8
 800e090:	464b      	mov	r3, r9
 800e092:	f7f2 f8f9 	bl	8000288 <__aeabi_dsub>
 800e096:	ec53 2b18 	vmov	r2, r3, d8
 800e09a:	f7f2 f8f5 	bl	8000288 <__aeabi_dsub>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4650      	mov	r0, sl
 800e0a4:	4659      	mov	r1, fp
 800e0a6:	e606      	b.n	800dcb6 <__ieee754_pow+0x2ee>
 800e0a8:	2401      	movs	r4, #1
 800e0aa:	e6a0      	b.n	800ddee <__ieee754_pow+0x426>
 800e0ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e100 <__ieee754_pow+0x738>
 800e0b0:	e60d      	b.n	800dcce <__ieee754_pow+0x306>
 800e0b2:	bf00      	nop
 800e0b4:	f3af 8000 	nop.w
 800e0b8:	4a454eef 	.word	0x4a454eef
 800e0bc:	3fca7e28 	.word	0x3fca7e28
 800e0c0:	93c9db65 	.word	0x93c9db65
 800e0c4:	3fcd864a 	.word	0x3fcd864a
 800e0c8:	a91d4101 	.word	0xa91d4101
 800e0cc:	3fd17460 	.word	0x3fd17460
 800e0d0:	518f264d 	.word	0x518f264d
 800e0d4:	3fd55555 	.word	0x3fd55555
 800e0d8:	db6fabff 	.word	0xdb6fabff
 800e0dc:	3fdb6db6 	.word	0x3fdb6db6
 800e0e0:	33333303 	.word	0x33333303
 800e0e4:	3fe33333 	.word	0x3fe33333
 800e0e8:	e0000000 	.word	0xe0000000
 800e0ec:	3feec709 	.word	0x3feec709
 800e0f0:	dc3a03fd 	.word	0xdc3a03fd
 800e0f4:	3feec709 	.word	0x3feec709
 800e0f8:	145b01f5 	.word	0x145b01f5
 800e0fc:	be3e2fe0 	.word	0xbe3e2fe0
 800e100:	00000000 	.word	0x00000000
 800e104:	3ff00000 	.word	0x3ff00000
 800e108:	7ff00000 	.word	0x7ff00000
 800e10c:	43400000 	.word	0x43400000
 800e110:	0003988e 	.word	0x0003988e
 800e114:	000bb679 	.word	0x000bb679
 800e118:	080e9ed8 	.word	0x080e9ed8
 800e11c:	3ff00000 	.word	0x3ff00000
 800e120:	40080000 	.word	0x40080000
 800e124:	080e9ef8 	.word	0x080e9ef8
 800e128:	080e9ee8 	.word	0x080e9ee8
 800e12c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e404 <__ieee754_pow+0xa3c>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	4640      	mov	r0, r8
 800e134:	4649      	mov	r1, r9
 800e136:	f7f2 f8a9 	bl	800028c <__adddf3>
 800e13a:	4622      	mov	r2, r4
 800e13c:	ec41 0b1a 	vmov	d10, r0, r1
 800e140:	462b      	mov	r3, r5
 800e142:	4630      	mov	r0, r6
 800e144:	4639      	mov	r1, r7
 800e146:	f7f2 f89f 	bl	8000288 <__aeabi_dsub>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	ec51 0b1a 	vmov	r0, r1, d10
 800e152:	f7f2 fce1 	bl	8000b18 <__aeabi_dcmpgt>
 800e156:	2800      	cmp	r0, #0
 800e158:	f47f adf8 	bne.w	800dd4c <__ieee754_pow+0x384>
 800e15c:	4aa4      	ldr	r2, [pc, #656]	; (800e3f0 <__ieee754_pow+0xa28>)
 800e15e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e162:	4293      	cmp	r3, r2
 800e164:	f340 810b 	ble.w	800e37e <__ieee754_pow+0x9b6>
 800e168:	151b      	asrs	r3, r3, #20
 800e16a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e16e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e172:	fa4a f303 	asr.w	r3, sl, r3
 800e176:	445b      	add	r3, fp
 800e178:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e17c:	4e9d      	ldr	r6, [pc, #628]	; (800e3f4 <__ieee754_pow+0xa2c>)
 800e17e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e182:	4116      	asrs	r6, r2
 800e184:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e188:	2000      	movs	r0, #0
 800e18a:	ea23 0106 	bic.w	r1, r3, r6
 800e18e:	f1c2 0214 	rsb	r2, r2, #20
 800e192:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e196:	fa4a fa02 	asr.w	sl, sl, r2
 800e19a:	f1bb 0f00 	cmp.w	fp, #0
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	bfb8      	it	lt
 800e1a8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e1ac:	f7f2 f86c 	bl	8000288 <__aeabi_dsub>
 800e1b0:	ec41 0b19 	vmov	d9, r0, r1
 800e1b4:	4642      	mov	r2, r8
 800e1b6:	464b      	mov	r3, r9
 800e1b8:	ec51 0b19 	vmov	r0, r1, d9
 800e1bc:	f7f2 f866 	bl	800028c <__adddf3>
 800e1c0:	2400      	movs	r4, #0
 800e1c2:	a379      	add	r3, pc, #484	; (adr r3, 800e3a8 <__ieee754_pow+0x9e0>)
 800e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	460d      	mov	r5, r1
 800e1cc:	f7f2 fa14 	bl	80005f8 <__aeabi_dmul>
 800e1d0:	ec53 2b19 	vmov	r2, r3, d9
 800e1d4:	4606      	mov	r6, r0
 800e1d6:	460f      	mov	r7, r1
 800e1d8:	4620      	mov	r0, r4
 800e1da:	4629      	mov	r1, r5
 800e1dc:	f7f2 f854 	bl	8000288 <__aeabi_dsub>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4649      	mov	r1, r9
 800e1e8:	f7f2 f84e 	bl	8000288 <__aeabi_dsub>
 800e1ec:	a370      	add	r3, pc, #448	; (adr r3, 800e3b0 <__ieee754_pow+0x9e8>)
 800e1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f2:	f7f2 fa01 	bl	80005f8 <__aeabi_dmul>
 800e1f6:	a370      	add	r3, pc, #448	; (adr r3, 800e3b8 <__ieee754_pow+0x9f0>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	4680      	mov	r8, r0
 800e1fe:	4689      	mov	r9, r1
 800e200:	4620      	mov	r0, r4
 800e202:	4629      	mov	r1, r5
 800e204:	f7f2 f9f8 	bl	80005f8 <__aeabi_dmul>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4640      	mov	r0, r8
 800e20e:	4649      	mov	r1, r9
 800e210:	f7f2 f83c 	bl	800028c <__adddf3>
 800e214:	4604      	mov	r4, r0
 800e216:	460d      	mov	r5, r1
 800e218:	4602      	mov	r2, r0
 800e21a:	460b      	mov	r3, r1
 800e21c:	4630      	mov	r0, r6
 800e21e:	4639      	mov	r1, r7
 800e220:	f7f2 f834 	bl	800028c <__adddf3>
 800e224:	4632      	mov	r2, r6
 800e226:	463b      	mov	r3, r7
 800e228:	4680      	mov	r8, r0
 800e22a:	4689      	mov	r9, r1
 800e22c:	f7f2 f82c 	bl	8000288 <__aeabi_dsub>
 800e230:	4602      	mov	r2, r0
 800e232:	460b      	mov	r3, r1
 800e234:	4620      	mov	r0, r4
 800e236:	4629      	mov	r1, r5
 800e238:	f7f2 f826 	bl	8000288 <__aeabi_dsub>
 800e23c:	4642      	mov	r2, r8
 800e23e:	4606      	mov	r6, r0
 800e240:	460f      	mov	r7, r1
 800e242:	464b      	mov	r3, r9
 800e244:	4640      	mov	r0, r8
 800e246:	4649      	mov	r1, r9
 800e248:	f7f2 f9d6 	bl	80005f8 <__aeabi_dmul>
 800e24c:	a35c      	add	r3, pc, #368	; (adr r3, 800e3c0 <__ieee754_pow+0x9f8>)
 800e24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e252:	4604      	mov	r4, r0
 800e254:	460d      	mov	r5, r1
 800e256:	f7f2 f9cf 	bl	80005f8 <__aeabi_dmul>
 800e25a:	a35b      	add	r3, pc, #364	; (adr r3, 800e3c8 <__ieee754_pow+0xa00>)
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f7f2 f812 	bl	8000288 <__aeabi_dsub>
 800e264:	4622      	mov	r2, r4
 800e266:	462b      	mov	r3, r5
 800e268:	f7f2 f9c6 	bl	80005f8 <__aeabi_dmul>
 800e26c:	a358      	add	r3, pc, #352	; (adr r3, 800e3d0 <__ieee754_pow+0xa08>)
 800e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e272:	f7f2 f80b 	bl	800028c <__adddf3>
 800e276:	4622      	mov	r2, r4
 800e278:	462b      	mov	r3, r5
 800e27a:	f7f2 f9bd 	bl	80005f8 <__aeabi_dmul>
 800e27e:	a356      	add	r3, pc, #344	; (adr r3, 800e3d8 <__ieee754_pow+0xa10>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	f7f2 f800 	bl	8000288 <__aeabi_dsub>
 800e288:	4622      	mov	r2, r4
 800e28a:	462b      	mov	r3, r5
 800e28c:	f7f2 f9b4 	bl	80005f8 <__aeabi_dmul>
 800e290:	a353      	add	r3, pc, #332	; (adr r3, 800e3e0 <__ieee754_pow+0xa18>)
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	f7f1 fff9 	bl	800028c <__adddf3>
 800e29a:	4622      	mov	r2, r4
 800e29c:	462b      	mov	r3, r5
 800e29e:	f7f2 f9ab 	bl	80005f8 <__aeabi_dmul>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	4649      	mov	r1, r9
 800e2aa:	f7f1 ffed 	bl	8000288 <__aeabi_dsub>
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	460d      	mov	r5, r1
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4640      	mov	r0, r8
 800e2b8:	4649      	mov	r1, r9
 800e2ba:	f7f2 f99d 	bl	80005f8 <__aeabi_dmul>
 800e2be:	2200      	movs	r2, #0
 800e2c0:	ec41 0b19 	vmov	d9, r0, r1
 800e2c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	f7f1 ffdc 	bl	8000288 <__aeabi_dsub>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	ec51 0b19 	vmov	r0, r1, d9
 800e2d8:	f7f2 fab8 	bl	800084c <__aeabi_ddiv>
 800e2dc:	4632      	mov	r2, r6
 800e2de:	4604      	mov	r4, r0
 800e2e0:	460d      	mov	r5, r1
 800e2e2:	463b      	mov	r3, r7
 800e2e4:	4640      	mov	r0, r8
 800e2e6:	4649      	mov	r1, r9
 800e2e8:	f7f2 f986 	bl	80005f8 <__aeabi_dmul>
 800e2ec:	4632      	mov	r2, r6
 800e2ee:	463b      	mov	r3, r7
 800e2f0:	f7f1 ffcc 	bl	800028c <__adddf3>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	f7f1 ffc4 	bl	8000288 <__aeabi_dsub>
 800e300:	4642      	mov	r2, r8
 800e302:	464b      	mov	r3, r9
 800e304:	f7f1 ffc0 	bl	8000288 <__aeabi_dsub>
 800e308:	460b      	mov	r3, r1
 800e30a:	4602      	mov	r2, r0
 800e30c:	493a      	ldr	r1, [pc, #232]	; (800e3f8 <__ieee754_pow+0xa30>)
 800e30e:	2000      	movs	r0, #0
 800e310:	f7f1 ffba 	bl	8000288 <__aeabi_dsub>
 800e314:	e9cd 0100 	strd	r0, r1, [sp]
 800e318:	9b01      	ldr	r3, [sp, #4]
 800e31a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e322:	da2f      	bge.n	800e384 <__ieee754_pow+0x9bc>
 800e324:	4650      	mov	r0, sl
 800e326:	ed9d 0b00 	vldr	d0, [sp]
 800e32a:	f000 f9cd 	bl	800e6c8 <scalbn>
 800e32e:	ec51 0b10 	vmov	r0, r1, d0
 800e332:	ec53 2b18 	vmov	r2, r3, d8
 800e336:	f7ff bbe0 	b.w	800dafa <__ieee754_pow+0x132>
 800e33a:	4b30      	ldr	r3, [pc, #192]	; (800e3fc <__ieee754_pow+0xa34>)
 800e33c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e340:	429e      	cmp	r6, r3
 800e342:	f77f af0b 	ble.w	800e15c <__ieee754_pow+0x794>
 800e346:	4b2e      	ldr	r3, [pc, #184]	; (800e400 <__ieee754_pow+0xa38>)
 800e348:	440b      	add	r3, r1
 800e34a:	4303      	orrs	r3, r0
 800e34c:	d00b      	beq.n	800e366 <__ieee754_pow+0x99e>
 800e34e:	a326      	add	r3, pc, #152	; (adr r3, 800e3e8 <__ieee754_pow+0xa20>)
 800e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e354:	ec51 0b18 	vmov	r0, r1, d8
 800e358:	f7f2 f94e 	bl	80005f8 <__aeabi_dmul>
 800e35c:	a322      	add	r3, pc, #136	; (adr r3, 800e3e8 <__ieee754_pow+0xa20>)
 800e35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e362:	f7ff bbca 	b.w	800dafa <__ieee754_pow+0x132>
 800e366:	4622      	mov	r2, r4
 800e368:	462b      	mov	r3, r5
 800e36a:	f7f1 ff8d 	bl	8000288 <__aeabi_dsub>
 800e36e:	4642      	mov	r2, r8
 800e370:	464b      	mov	r3, r9
 800e372:	f7f2 fbc7 	bl	8000b04 <__aeabi_dcmpge>
 800e376:	2800      	cmp	r0, #0
 800e378:	f43f aef0 	beq.w	800e15c <__ieee754_pow+0x794>
 800e37c:	e7e7      	b.n	800e34e <__ieee754_pow+0x986>
 800e37e:	f04f 0a00 	mov.w	sl, #0
 800e382:	e717      	b.n	800e1b4 <__ieee754_pow+0x7ec>
 800e384:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e388:	4619      	mov	r1, r3
 800e38a:	e7d2      	b.n	800e332 <__ieee754_pow+0x96a>
 800e38c:	491a      	ldr	r1, [pc, #104]	; (800e3f8 <__ieee754_pow+0xa30>)
 800e38e:	2000      	movs	r0, #0
 800e390:	f7ff bb9e 	b.w	800dad0 <__ieee754_pow+0x108>
 800e394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e398:	f7ff bb9a 	b.w	800dad0 <__ieee754_pow+0x108>
 800e39c:	9000      	str	r0, [sp, #0]
 800e39e:	f7ff bb76 	b.w	800da8e <__ieee754_pow+0xc6>
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	f7ff bb60 	b.w	800da68 <__ieee754_pow+0xa0>
 800e3a8:	00000000 	.word	0x00000000
 800e3ac:	3fe62e43 	.word	0x3fe62e43
 800e3b0:	fefa39ef 	.word	0xfefa39ef
 800e3b4:	3fe62e42 	.word	0x3fe62e42
 800e3b8:	0ca86c39 	.word	0x0ca86c39
 800e3bc:	be205c61 	.word	0xbe205c61
 800e3c0:	72bea4d0 	.word	0x72bea4d0
 800e3c4:	3e663769 	.word	0x3e663769
 800e3c8:	c5d26bf1 	.word	0xc5d26bf1
 800e3cc:	3ebbbd41 	.word	0x3ebbbd41
 800e3d0:	af25de2c 	.word	0xaf25de2c
 800e3d4:	3f11566a 	.word	0x3f11566a
 800e3d8:	16bebd93 	.word	0x16bebd93
 800e3dc:	3f66c16c 	.word	0x3f66c16c
 800e3e0:	5555553e 	.word	0x5555553e
 800e3e4:	3fc55555 	.word	0x3fc55555
 800e3e8:	c2f8f359 	.word	0xc2f8f359
 800e3ec:	01a56e1f 	.word	0x01a56e1f
 800e3f0:	3fe00000 	.word	0x3fe00000
 800e3f4:	000fffff 	.word	0x000fffff
 800e3f8:	3ff00000 	.word	0x3ff00000
 800e3fc:	4090cbff 	.word	0x4090cbff
 800e400:	3f6f3400 	.word	0x3f6f3400
 800e404:	652b82fe 	.word	0x652b82fe
 800e408:	3c971547 	.word	0x3c971547

0800e40c <__ieee754_sqrt>:
 800e40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e410:	ec55 4b10 	vmov	r4, r5, d0
 800e414:	4e56      	ldr	r6, [pc, #344]	; (800e570 <__ieee754_sqrt+0x164>)
 800e416:	43ae      	bics	r6, r5
 800e418:	ee10 0a10 	vmov	r0, s0
 800e41c:	ee10 3a10 	vmov	r3, s0
 800e420:	4629      	mov	r1, r5
 800e422:	462a      	mov	r2, r5
 800e424:	d110      	bne.n	800e448 <__ieee754_sqrt+0x3c>
 800e426:	ee10 2a10 	vmov	r2, s0
 800e42a:	462b      	mov	r3, r5
 800e42c:	f7f2 f8e4 	bl	80005f8 <__aeabi_dmul>
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4620      	mov	r0, r4
 800e436:	4629      	mov	r1, r5
 800e438:	f7f1 ff28 	bl	800028c <__adddf3>
 800e43c:	4604      	mov	r4, r0
 800e43e:	460d      	mov	r5, r1
 800e440:	ec45 4b10 	vmov	d0, r4, r5
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e448:	2d00      	cmp	r5, #0
 800e44a:	dc10      	bgt.n	800e46e <__ieee754_sqrt+0x62>
 800e44c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e450:	4330      	orrs	r0, r6
 800e452:	d0f5      	beq.n	800e440 <__ieee754_sqrt+0x34>
 800e454:	b15d      	cbz	r5, 800e46e <__ieee754_sqrt+0x62>
 800e456:	ee10 2a10 	vmov	r2, s0
 800e45a:	462b      	mov	r3, r5
 800e45c:	ee10 0a10 	vmov	r0, s0
 800e460:	f7f1 ff12 	bl	8000288 <__aeabi_dsub>
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	f7f2 f9f0 	bl	800084c <__aeabi_ddiv>
 800e46c:	e7e6      	b.n	800e43c <__ieee754_sqrt+0x30>
 800e46e:	1509      	asrs	r1, r1, #20
 800e470:	d076      	beq.n	800e560 <__ieee754_sqrt+0x154>
 800e472:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e476:	07ce      	lsls	r6, r1, #31
 800e478:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e47c:	bf5e      	ittt	pl
 800e47e:	0fda      	lsrpl	r2, r3, #31
 800e480:	005b      	lslpl	r3, r3, #1
 800e482:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e486:	0fda      	lsrs	r2, r3, #31
 800e488:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e48c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e490:	2000      	movs	r0, #0
 800e492:	106d      	asrs	r5, r5, #1
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	f04f 0e16 	mov.w	lr, #22
 800e49a:	4684      	mov	ip, r0
 800e49c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e4a0:	eb0c 0401 	add.w	r4, ip, r1
 800e4a4:	4294      	cmp	r4, r2
 800e4a6:	bfde      	ittt	le
 800e4a8:	1b12      	suble	r2, r2, r4
 800e4aa:	eb04 0c01 	addle.w	ip, r4, r1
 800e4ae:	1840      	addle	r0, r0, r1
 800e4b0:	0052      	lsls	r2, r2, #1
 800e4b2:	f1be 0e01 	subs.w	lr, lr, #1
 800e4b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e4ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e4be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4c2:	d1ed      	bne.n	800e4a0 <__ieee754_sqrt+0x94>
 800e4c4:	4671      	mov	r1, lr
 800e4c6:	2720      	movs	r7, #32
 800e4c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e4cc:	4562      	cmp	r2, ip
 800e4ce:	eb04 060e 	add.w	r6, r4, lr
 800e4d2:	dc02      	bgt.n	800e4da <__ieee754_sqrt+0xce>
 800e4d4:	d113      	bne.n	800e4fe <__ieee754_sqrt+0xf2>
 800e4d6:	429e      	cmp	r6, r3
 800e4d8:	d811      	bhi.n	800e4fe <__ieee754_sqrt+0xf2>
 800e4da:	2e00      	cmp	r6, #0
 800e4dc:	eb06 0e04 	add.w	lr, r6, r4
 800e4e0:	da43      	bge.n	800e56a <__ieee754_sqrt+0x15e>
 800e4e2:	f1be 0f00 	cmp.w	lr, #0
 800e4e6:	db40      	blt.n	800e56a <__ieee754_sqrt+0x15e>
 800e4e8:	f10c 0801 	add.w	r8, ip, #1
 800e4ec:	eba2 020c 	sub.w	r2, r2, ip
 800e4f0:	429e      	cmp	r6, r3
 800e4f2:	bf88      	it	hi
 800e4f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e4f8:	1b9b      	subs	r3, r3, r6
 800e4fa:	4421      	add	r1, r4
 800e4fc:	46c4      	mov	ip, r8
 800e4fe:	0052      	lsls	r2, r2, #1
 800e500:	3f01      	subs	r7, #1
 800e502:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e506:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e50a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e50e:	d1dd      	bne.n	800e4cc <__ieee754_sqrt+0xc0>
 800e510:	4313      	orrs	r3, r2
 800e512:	d006      	beq.n	800e522 <__ieee754_sqrt+0x116>
 800e514:	1c4c      	adds	r4, r1, #1
 800e516:	bf13      	iteet	ne
 800e518:	3101      	addne	r1, #1
 800e51a:	3001      	addeq	r0, #1
 800e51c:	4639      	moveq	r1, r7
 800e51e:	f021 0101 	bicne.w	r1, r1, #1
 800e522:	1043      	asrs	r3, r0, #1
 800e524:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e528:	0849      	lsrs	r1, r1, #1
 800e52a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e52e:	07c2      	lsls	r2, r0, #31
 800e530:	bf48      	it	mi
 800e532:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e536:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e53a:	460c      	mov	r4, r1
 800e53c:	463d      	mov	r5, r7
 800e53e:	e77f      	b.n	800e440 <__ieee754_sqrt+0x34>
 800e540:	0ada      	lsrs	r2, r3, #11
 800e542:	3815      	subs	r0, #21
 800e544:	055b      	lsls	r3, r3, #21
 800e546:	2a00      	cmp	r2, #0
 800e548:	d0fa      	beq.n	800e540 <__ieee754_sqrt+0x134>
 800e54a:	02d7      	lsls	r7, r2, #11
 800e54c:	d50a      	bpl.n	800e564 <__ieee754_sqrt+0x158>
 800e54e:	f1c1 0420 	rsb	r4, r1, #32
 800e552:	fa23 f404 	lsr.w	r4, r3, r4
 800e556:	1e4d      	subs	r5, r1, #1
 800e558:	408b      	lsls	r3, r1
 800e55a:	4322      	orrs	r2, r4
 800e55c:	1b41      	subs	r1, r0, r5
 800e55e:	e788      	b.n	800e472 <__ieee754_sqrt+0x66>
 800e560:	4608      	mov	r0, r1
 800e562:	e7f0      	b.n	800e546 <__ieee754_sqrt+0x13a>
 800e564:	0052      	lsls	r2, r2, #1
 800e566:	3101      	adds	r1, #1
 800e568:	e7ef      	b.n	800e54a <__ieee754_sqrt+0x13e>
 800e56a:	46e0      	mov	r8, ip
 800e56c:	e7be      	b.n	800e4ec <__ieee754_sqrt+0xe0>
 800e56e:	bf00      	nop
 800e570:	7ff00000 	.word	0x7ff00000

0800e574 <fabs>:
 800e574:	ec51 0b10 	vmov	r0, r1, d0
 800e578:	ee10 2a10 	vmov	r2, s0
 800e57c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e580:	ec43 2b10 	vmov	d0, r2, r3
 800e584:	4770      	bx	lr

0800e586 <finite>:
 800e586:	b082      	sub	sp, #8
 800e588:	ed8d 0b00 	vstr	d0, [sp]
 800e58c:	9801      	ldr	r0, [sp, #4]
 800e58e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e592:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e596:	0fc0      	lsrs	r0, r0, #31
 800e598:	b002      	add	sp, #8
 800e59a:	4770      	bx	lr
 800e59c:	0000      	movs	r0, r0
	...

0800e5a0 <nan>:
 800e5a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e5a8 <nan+0x8>
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	00000000 	.word	0x00000000
 800e5ac:	7ff80000 	.word	0x7ff80000

0800e5b0 <rint>:
 800e5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5b2:	ec51 0b10 	vmov	r0, r1, d0
 800e5b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e5ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e5be:	2e13      	cmp	r6, #19
 800e5c0:	ee10 4a10 	vmov	r4, s0
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e5ca:	dc58      	bgt.n	800e67e <rint+0xce>
 800e5cc:	2e00      	cmp	r6, #0
 800e5ce:	da2b      	bge.n	800e628 <rint+0x78>
 800e5d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e5d4:	4302      	orrs	r2, r0
 800e5d6:	d023      	beq.n	800e620 <rint+0x70>
 800e5d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e5dc:	4302      	orrs	r2, r0
 800e5de:	4254      	negs	r4, r2
 800e5e0:	4314      	orrs	r4, r2
 800e5e2:	0c4b      	lsrs	r3, r1, #17
 800e5e4:	0b24      	lsrs	r4, r4, #12
 800e5e6:	045b      	lsls	r3, r3, #17
 800e5e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e5ec:	ea44 0103 	orr.w	r1, r4, r3
 800e5f0:	4b32      	ldr	r3, [pc, #200]	; (800e6bc <rint+0x10c>)
 800e5f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e5f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	4630      	mov	r0, r6
 800e600:	4639      	mov	r1, r7
 800e602:	f7f1 fe43 	bl	800028c <__adddf3>
 800e606:	e9cd 0100 	strd	r0, r1, [sp]
 800e60a:	463b      	mov	r3, r7
 800e60c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e610:	4632      	mov	r2, r6
 800e612:	f7f1 fe39 	bl	8000288 <__aeabi_dsub>
 800e616:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e61a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e61e:	4639      	mov	r1, r7
 800e620:	ec41 0b10 	vmov	d0, r0, r1
 800e624:	b003      	add	sp, #12
 800e626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e628:	4a25      	ldr	r2, [pc, #148]	; (800e6c0 <rint+0x110>)
 800e62a:	4132      	asrs	r2, r6
 800e62c:	ea01 0702 	and.w	r7, r1, r2
 800e630:	4307      	orrs	r7, r0
 800e632:	d0f5      	beq.n	800e620 <rint+0x70>
 800e634:	0851      	lsrs	r1, r2, #1
 800e636:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e63a:	4314      	orrs	r4, r2
 800e63c:	d00c      	beq.n	800e658 <rint+0xa8>
 800e63e:	ea23 0201 	bic.w	r2, r3, r1
 800e642:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e646:	2e13      	cmp	r6, #19
 800e648:	fa43 f606 	asr.w	r6, r3, r6
 800e64c:	bf0c      	ite	eq
 800e64e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e652:	2400      	movne	r4, #0
 800e654:	ea42 0306 	orr.w	r3, r2, r6
 800e658:	4918      	ldr	r1, [pc, #96]	; (800e6bc <rint+0x10c>)
 800e65a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e65e:	4622      	mov	r2, r4
 800e660:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e664:	4620      	mov	r0, r4
 800e666:	4629      	mov	r1, r5
 800e668:	f7f1 fe10 	bl	800028c <__adddf3>
 800e66c:	e9cd 0100 	strd	r0, r1, [sp]
 800e670:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e674:	4622      	mov	r2, r4
 800e676:	462b      	mov	r3, r5
 800e678:	f7f1 fe06 	bl	8000288 <__aeabi_dsub>
 800e67c:	e7d0      	b.n	800e620 <rint+0x70>
 800e67e:	2e33      	cmp	r6, #51	; 0x33
 800e680:	dd07      	ble.n	800e692 <rint+0xe2>
 800e682:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e686:	d1cb      	bne.n	800e620 <rint+0x70>
 800e688:	ee10 2a10 	vmov	r2, s0
 800e68c:	f7f1 fdfe 	bl	800028c <__adddf3>
 800e690:	e7c6      	b.n	800e620 <rint+0x70>
 800e692:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e696:	f04f 36ff 	mov.w	r6, #4294967295
 800e69a:	40d6      	lsrs	r6, r2
 800e69c:	4230      	tst	r0, r6
 800e69e:	d0bf      	beq.n	800e620 <rint+0x70>
 800e6a0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e6a4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e6a8:	bf1f      	itttt	ne
 800e6aa:	ea24 0101 	bicne.w	r1, r4, r1
 800e6ae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e6b2:	fa44 f202 	asrne.w	r2, r4, r2
 800e6b6:	ea41 0402 	orrne.w	r4, r1, r2
 800e6ba:	e7cd      	b.n	800e658 <rint+0xa8>
 800e6bc:	080e9f08 	.word	0x080e9f08
 800e6c0:	000fffff 	.word	0x000fffff
 800e6c4:	00000000 	.word	0x00000000

0800e6c8 <scalbn>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	ec55 4b10 	vmov	r4, r5, d0
 800e6ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e6d2:	4606      	mov	r6, r0
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	b99a      	cbnz	r2, 800e700 <scalbn+0x38>
 800e6d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e6dc:	4323      	orrs	r3, r4
 800e6de:	d036      	beq.n	800e74e <scalbn+0x86>
 800e6e0:	4b39      	ldr	r3, [pc, #228]	; (800e7c8 <scalbn+0x100>)
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	ee10 0a10 	vmov	r0, s0
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f7f1 ff85 	bl	80005f8 <__aeabi_dmul>
 800e6ee:	4b37      	ldr	r3, [pc, #220]	; (800e7cc <scalbn+0x104>)
 800e6f0:	429e      	cmp	r6, r3
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	460d      	mov	r5, r1
 800e6f6:	da10      	bge.n	800e71a <scalbn+0x52>
 800e6f8:	a32b      	add	r3, pc, #172	; (adr r3, 800e7a8 <scalbn+0xe0>)
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	e03a      	b.n	800e776 <scalbn+0xae>
 800e700:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e704:	428a      	cmp	r2, r1
 800e706:	d10c      	bne.n	800e722 <scalbn+0x5a>
 800e708:	ee10 2a10 	vmov	r2, s0
 800e70c:	4620      	mov	r0, r4
 800e70e:	4629      	mov	r1, r5
 800e710:	f7f1 fdbc 	bl	800028c <__adddf3>
 800e714:	4604      	mov	r4, r0
 800e716:	460d      	mov	r5, r1
 800e718:	e019      	b.n	800e74e <scalbn+0x86>
 800e71a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e71e:	460b      	mov	r3, r1
 800e720:	3a36      	subs	r2, #54	; 0x36
 800e722:	4432      	add	r2, r6
 800e724:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e728:	428a      	cmp	r2, r1
 800e72a:	dd08      	ble.n	800e73e <scalbn+0x76>
 800e72c:	2d00      	cmp	r5, #0
 800e72e:	a120      	add	r1, pc, #128	; (adr r1, 800e7b0 <scalbn+0xe8>)
 800e730:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e734:	da1c      	bge.n	800e770 <scalbn+0xa8>
 800e736:	a120      	add	r1, pc, #128	; (adr r1, 800e7b8 <scalbn+0xf0>)
 800e738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e73c:	e018      	b.n	800e770 <scalbn+0xa8>
 800e73e:	2a00      	cmp	r2, #0
 800e740:	dd08      	ble.n	800e754 <scalbn+0x8c>
 800e742:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e746:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e74a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e74e:	ec45 4b10 	vmov	d0, r4, r5
 800e752:	bd70      	pop	{r4, r5, r6, pc}
 800e754:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e758:	da19      	bge.n	800e78e <scalbn+0xc6>
 800e75a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e75e:	429e      	cmp	r6, r3
 800e760:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e764:	dd0a      	ble.n	800e77c <scalbn+0xb4>
 800e766:	a112      	add	r1, pc, #72	; (adr r1, 800e7b0 <scalbn+0xe8>)
 800e768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1e2      	bne.n	800e736 <scalbn+0x6e>
 800e770:	a30f      	add	r3, pc, #60	; (adr r3, 800e7b0 <scalbn+0xe8>)
 800e772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e776:	f7f1 ff3f 	bl	80005f8 <__aeabi_dmul>
 800e77a:	e7cb      	b.n	800e714 <scalbn+0x4c>
 800e77c:	a10a      	add	r1, pc, #40	; (adr r1, 800e7a8 <scalbn+0xe0>)
 800e77e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d0b8      	beq.n	800e6f8 <scalbn+0x30>
 800e786:	a10e      	add	r1, pc, #56	; (adr r1, 800e7c0 <scalbn+0xf8>)
 800e788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e78c:	e7b4      	b.n	800e6f8 <scalbn+0x30>
 800e78e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e792:	3236      	adds	r2, #54	; 0x36
 800e794:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e798:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e79c:	4620      	mov	r0, r4
 800e79e:	4b0c      	ldr	r3, [pc, #48]	; (800e7d0 <scalbn+0x108>)
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	e7e8      	b.n	800e776 <scalbn+0xae>
 800e7a4:	f3af 8000 	nop.w
 800e7a8:	c2f8f359 	.word	0xc2f8f359
 800e7ac:	01a56e1f 	.word	0x01a56e1f
 800e7b0:	8800759c 	.word	0x8800759c
 800e7b4:	7e37e43c 	.word	0x7e37e43c
 800e7b8:	8800759c 	.word	0x8800759c
 800e7bc:	fe37e43c 	.word	0xfe37e43c
 800e7c0:	c2f8f359 	.word	0xc2f8f359
 800e7c4:	81a56e1f 	.word	0x81a56e1f
 800e7c8:	43500000 	.word	0x43500000
 800e7cc:	ffff3cb0 	.word	0xffff3cb0
 800e7d0:	3c900000 	.word	0x3c900000

0800e7d4 <_init>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	bf00      	nop
 800e7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7da:	bc08      	pop	{r3}
 800e7dc:	469e      	mov	lr, r3
 800e7de:	4770      	bx	lr

0800e7e0 <_fini>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	bf00      	nop
 800e7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7e6:	bc08      	pop	{r3}
 800e7e8:	469e      	mov	lr, r3
 800e7ea:	4770      	bx	lr
